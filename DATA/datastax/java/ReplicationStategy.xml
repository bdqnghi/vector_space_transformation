com.datastax.driver.core com.google.common.collect.ImmutableSet import com.google.common.collect.Maps import com.google.common.collect.Sets import org.slf4j.Logger import org.slf4j.LoggerFactory import java.util.* import class com.datastax.driver.core.ReplicationStrategy String String decl Map static static < decl_stmt java.lang.String = if == return try if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) decl_stmt java.lang.String = return == : new else if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) decl_stmt java.util.Map < = new < for < : if continue call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return new else return catch return private static private static < return int decl Map decl Set < < < < < < decl_stmt int = decl_stmt java.util.Map < < = new < < for = < ++ decl_stmt java.util.Set < = new < for = < && call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() < ++ call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return SimpleStrategy public public if == return if == || != return decl_stmt SimpleStrategy = return == public public return String Host decl Set decl Set Host decl Map decl Map String String decl Map decl Set int long Integer long decl Map int decl Map decl Map decl Iterator < < < < < < decl_stmt long = decl_stmt java.util.Map < < = decl_stmt java.util.Map < < = new < < decl_stmt java.util.Map < = decl_stmt java.util.Set < = for : decl_stmt java.lang.String = if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() + for = < ++ decl_stmt java.util.Map < < = new < < decl_stmt java.util.Map < < = new < < decl_stmt java.util.Map < < = new < < for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < decl_stmt java.util.Set < = new < for = < && ! ++ decl_stmt com.datastax.driver.core.Host = + decl_stmt java.lang.String = call com.datastax.driver.core.Host.getDatacenter() call com.datastax.driver.core.Host.getDatacenter() call com.datastax.driver.core.Host.getDatacenter() call com.datastax.driver.core.Host.getDatacenter() call com.datastax.driver.core.Host.getDatacenter() if == || ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() continue decl_stmt java.lang.Integer = decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == || call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() >= continue decl_stmt java.lang.String = call com.datastax.driver.core.Host.getRack() call com.datastax.driver.core.Host.getRack() call com.datastax.driver.core.Host.getRack() call com.datastax.driver.core.Host.getRack() call com.datastax.driver.core.Host.getRack() if == || call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() == call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() else call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() == call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.util.Iterator < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() && call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() < decl_stmt com.datastax.driver.core.Host = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = decl_stmt int = decl_stmt int = if < && ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() + + call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt long = - return int String private private < < < for < < : decl_stmt java.lang.String = decl_stmt int = == : if < return return decl Map decl Set private < < private < < < decl_stmt java.util.Map < < = new < < for : decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return NetworkTopologyStrategy public public if == return if == || != return decl_stmt NetworkTopologyStrategy = return public public return