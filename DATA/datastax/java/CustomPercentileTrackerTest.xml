com.datastax.driver.core com.datastax.driver.core.exceptions.ReadTimeoutException import com.google.common.collect.Lists import com.google.common.util.concurrent.Uninterruptibles import org.testng.annotations.Test import java.util.List import java.util.concurrent.TimeUnit import static static org.assertj.core.api.Assertions.assertThat import static static org.mockito.Mockito.mock import class com.datastax.driver.core.CustomPercentileTrackerTest decl List PercentileTracker Host Host decl List Cluster = public = public decl_stmt com.datastax.driver.core.Cluster final final = decl_stmt com.datastax.driver.core.Host final final = decl_stmt com.datastax.driver.core.Host final final = decl_stmt com.datastax.driver.core.PercentileTracker = new protected protected if == return else return call com.datastax.driver.core.PercentileTracker.onRegister(Cluster) call com.datastax.driver.core.PercentileTracker.onRegister(Cluster) call com.datastax.driver.core.PercentileTracker.onRegister(Cluster) call com.datastax.driver.core.PercentileTracker.onRegister(Cluster) call com.datastax.driver.core.PercentileTracker.onRegister(Cluster) decl_stmt java.util.List < = decl_stmt java.util.List < = new new for = < ++ call com.datastax.driver.core.PercentileTracker.update(Host,Statement,Exception,long) call com.datastax.driver.core.PercentileTracker.update(Host,Statement,Exception,long) call com.datastax.driver.core.PercentileTracker.update(Host,Statement,Exception,long) call com.datastax.driver.core.PercentileTracker.update(Host,Statement,Exception,long) call com.datastax.driver.core.PercentileTracker.update(Host,Statement,Exception,long) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + * call com.datastax.driver.core.PercentileTracker.update(Host,Statement,Exception,long) call com.datastax.driver.core.PercentileTracker.update(Host,Statement,Exception,long) call com.datastax.driver.core.PercentileTracker.update(Host,Statement,Exception,long) call com.datastax.driver.core.PercentileTracker.update(Host,Statement,Exception,long) call com.datastax.driver.core.PercentileTracker.update(Host,Statement,Exception,long) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + for = <= ++ call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) * call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) - protected protected if == return else return