com.datastax.driver.core io.netty.handler.ssl.SslContextBuilder import org.testng.annotations.DataProvider import javax.net.ssl.KeyManagerFactory import javax.net.ssl.SSLContext import javax.net.ssl.TrustManagerFactory import java.security.KeyStore import java.security.SecureRandom import static static com.datastax.driver.core.SSLTestBase.SslImplementation.JDK import static static com.datastax.driver.core.SSLTestBase.SslImplementation.NETTY_OPENSSL import static static io.netty.handler.ssl.SslProvider.OPENSSL import static static org.assertj.core.api.Assertions.fail import class annotation com.datastax.driver.core.SSLTestBase super super extends String = public static = public static decl_stmt java.lang.String = if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) return new else return new Cluster protected protected throws decl_stmt com.datastax.driver.core.Cluster = call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() Cluster protected protected throws decl_stmt com.datastax.driver.core.Cluster = call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() KeyStore KeyManagerFactory SslContextBuilder TrustManagerFactory SSLContext public public throws decl_stmt javax.net.ssl.TrustManagerFactory = if decl_stmt java.security.KeyStore = call java.security.KeyStore.load(LoadStoreParameter) call java.security.KeyStore.load(LoadStoreParameter) call java.security.KeyStore.load(LoadStoreParameter) call java.security.KeyStore.load(LoadStoreParameter) call java.security.KeyStore.load(LoadStoreParameter) = call javax.net.ssl.TrustManagerFactory.init(ManagerFactoryParameters) call javax.net.ssl.TrustManagerFactory.init(ManagerFactoryParameters) call javax.net.ssl.TrustManagerFactory.init(ManagerFactoryParameters) call javax.net.ssl.TrustManagerFactory.init(ManagerFactoryParameters) call javax.net.ssl.TrustManagerFactory.init(ManagerFactoryParameters) switch case decl_stmt javax.net.ssl.KeyManagerFactory = if decl_stmt java.security.KeyStore = call java.security.KeyStore.load(LoadStoreParameter) call java.security.KeyStore.load(LoadStoreParameter) call java.security.KeyStore.load(LoadStoreParameter) call java.security.KeyStore.load(LoadStoreParameter) call java.security.KeyStore.load(LoadStoreParameter) = call javax.net.ssl.KeyManagerFactory.init(ManagerFactoryParameters) call javax.net.ssl.KeyManagerFactory.init(ManagerFactoryParameters) call javax.net.ssl.KeyManagerFactory.init(ManagerFactoryParameters) call javax.net.ssl.KeyManagerFactory.init(ManagerFactoryParameters) call javax.net.ssl.KeyManagerFactory.init(ManagerFactoryParameters) decl_stmt javax.net.ssl.SSLContext = call javax.net.ssl.SSLContext.init(KeyManager,TrustManager,SecureRandom) call javax.net.ssl.SSLContext.init(KeyManager,TrustManager,SecureRandom) call javax.net.ssl.SSLContext.init(KeyManager,TrustManager,SecureRandom) call javax.net.ssl.SSLContext.init(KeyManager,TrustManager,SecureRandom) call javax.net.ssl.SSLContext.init(KeyManager,TrustManager,SecureRandom) != call javax.net.ssl.KeyManagerFactory.getKeyManagers() call javax.net.ssl.KeyManagerFactory.getKeyManagers() call javax.net.ssl.KeyManagerFactory.getKeyManagers() call javax.net.ssl.KeyManagerFactory.getKeyManagers() call javax.net.ssl.KeyManagerFactory.getKeyManagers() : != call javax.net.ssl.TrustManagerFactory.getTrustManagers() call javax.net.ssl.TrustManagerFactory.getTrustManagers() call javax.net.ssl.TrustManagerFactory.getTrustManagers() call javax.net.ssl.TrustManagerFactory.getTrustManagers() call javax.net.ssl.TrustManagerFactory.getTrustManagers() : new return case decl_stmt SslContextBuilder = if call SslContextBuilder.keyManager() call SslContextBuilder.keyManager() call SslContextBuilder.keyManager() call SslContextBuilder.keyManager() call SslContextBuilder.keyManager() return new call SslContextBuilder.build() call SslContextBuilder.build() call SslContextBuilder.build() call SslContextBuilder.build() call SslContextBuilder.build() default: + return