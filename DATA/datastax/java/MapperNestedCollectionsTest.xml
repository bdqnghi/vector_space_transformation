com.datastax.driver.mapping com.datastax.driver.core.CCMTestsSupport import com.datastax.driver.core.ResultSet import com.datastax.driver.core.utils.CassandraVersion import com.datastax.driver.mapping.annotations.* import com.google.common.collect.ImmutableMap import com.google.common.collect.Lists import com.google.common.collect.Sets import org.testng.annotations.Test import java.util.ArrayList import java.util.List import java.util.Map import java.util.Set import static static com.datastax.driver.core.Assertions.assertThat import class annotation annotation com.datastax.driver.mapping.MapperNestedCollectionsTest super super extends public public + + TestTable decl Mapper TestTable decl Set decl Set decl List = public = public decl_stmt com.datastax.driver.mapping.Mapper < = new decl_stmt TestTable = new call TestTable.setK() call TestTable.setK() call TestTable.setK() call TestTable.setK() call TestTable.setK() call TestTable.setM1() call TestTable.setM1() call TestTable.setM1() call TestTable.setM1() call TestTable.setM1() < > decl_stmt java.util.Set < = decl_stmt java.util.Set < = decl_stmt java.util.List < < = new < < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call TestTable.setM2() call TestTable.setM2() call TestTable.setM2() call TestTable.setM2() call TestTable.setM2() < > new call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() decl_stmt TestTable = call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call TestTable.getM1() call TestTable.getM1() call TestTable.getM1() call TestTable.getM1() call TestTable.getM1() call TestTable.getM1() call TestTable.getM1() call TestTable.getM1() call TestTable.getM1() call TestTable.getM1() call TestTable.getM2() call TestTable.getM2() call TestTable.getM2() call TestTable.getM2() call TestTable.getM2() call TestTable.getM2() call TestTable.getM2() call TestTable.getM2() call TestTable.getM2() call TestTable.getM2() decl Mapper TestTable TestTable decl Map MappingManager decl Map TestAccessor = public = public decl_stmt com.datastax.driver.mapping.MappingManager = new decl_stmt com.datastax.driver.mapping.Mapper < = call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) decl_stmt com.datastax.driver.mapping.TestAccessor = call com.datastax.driver.mapping.MappingManager.createAccessor(Class) call com.datastax.driver.mapping.MappingManager.createAccessor(Class) call com.datastax.driver.mapping.MappingManager.createAccessor(Class) call com.datastax.driver.mapping.MappingManager.createAccessor(Class) call com.datastax.driver.mapping.MappingManager.createAccessor(Class) decl_stmt TestTable = new call TestTable.setK() call TestTable.setK() call TestTable.setK() call TestTable.setK() call TestTable.setK() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() decl_stmt java.util.Map < < = < decl_stmt java.util.Map < < = < new call com.datastax.driver.mapping.TestAccessor.setM1(int,Map) call com.datastax.driver.mapping.TestAccessor.setM1(int,Map) call com.datastax.driver.mapping.TestAccessor.setM1(int,Map) call com.datastax.driver.mapping.TestAccessor.setM1(int,Map) call com.datastax.driver.mapping.TestAccessor.setM1(int,Map) call TestAccessor.setM2() call TestAccessor.setM2() call TestAccessor.setM2() call TestAccessor.setM2() call TestAccessor.setM2() decl_stmt TestTable = call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() public public return public public = public < < public < < return public public < < = TestType public public if == return if ! instanceof return decl_stmt TestType = return == && int public public decl_stmt int = = * + return public public return public public = public < < public < < return public public < < = public < < public < < return public public < < =