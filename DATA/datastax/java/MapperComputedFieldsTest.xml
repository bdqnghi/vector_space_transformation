com.datastax.driver.mapping com.datastax.driver.core.* import com.datastax.driver.core.exceptions.CodecNotFoundException import com.datastax.driver.core.exceptions.InvalidQueryException import com.datastax.driver.core.utils.CassandraVersion import com.datastax.driver.mapping.annotations.* import org.testng.SkipException import org.testng.annotations.BeforeMethod import org.testng.annotations.Test import static static com.datastax.driver.core.Assertions.assertThat import static static com.datastax.driver.core.ProtocolVersion.V1 import static static org.assertj.core.api.Assertions.fail import class annotation com.datastax.driver.mapping.MapperComputedFieldsTest super super extends MappingManager decl Mapper ProtocolVersion public public = = = new = if call sun.security.ssl.ProtocolVersion.compareTo(ProtocolVersion) call sun.security.ssl.ProtocolVersion.compareTo(ProtocolVersion) call sun.security.ssl.ProtocolVersion.compareTo(ProtocolVersion) call sun.security.ssl.ProtocolVersion.compareTo(ProtocolVersion) call sun.security.ssl.ProtocolVersion.compareTo(ProtocolVersion) > = call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) = = = = if call sun.security.ssl.ProtocolVersion.compareTo(ProtocolVersion) call sun.security.ssl.ProtocolVersion.compareTo(ProtocolVersion) call sun.security.ssl.ProtocolVersion.compareTo(ProtocolVersion) call sun.security.ssl.ProtocolVersion.compareTo(ProtocolVersion) call sun.security.ssl.ProtocolVersion.compareTo(ProtocolVersion) > throw new = call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) User long User = = = = decl_stmt long = * decl_stmt User = new call User.setWriteTime() call User.setWriteTime() call User.setWriteTime() call User.setWriteTime() call User.setWriteTime() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() decl_stmt User = call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call User.getLogin() call User.getLogin() call User.getLogin() call User.getLogin() call User.getLogin() call User.getName() call User.getName() call User.getName() call User.getName() call User.getName() call User.getWriteTime() call User.getWriteTime() call User.getWriteTime() call User.getWriteTime() call User.getWriteTime() + call User.getTtl() call User.getTtl() call User.getTtl() call User.getTtl() call User.getTtl() = call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call User.getWriteTime() call User.getWriteTime() call User.getWriteTime() call User.getWriteTime() call User.getWriteTime() + call User.getTtl() call User.getTtl() call User.getTtl() call User.getTtl() call User.getTtl() call decl Mapper.delete() call decl Mapper.delete() call decl Mapper.delete() call decl Mapper.delete() call decl Mapper.delete() BoundStatement = = = = decl_stmt com.datastax.driver.core.BoundStatement = call decl Mapper.getQuery() call decl Mapper.getQuery() call decl Mapper.getQuery() call decl Mapper.getQuery() call decl Mapper.getQuery() call com.datastax.driver.core.BoundStatement.preparedStatement() call com.datastax.driver.core.BoundStatement.preparedStatement() call com.datastax.driver.core.BoundStatement.preparedStatement() call com.datastax.driver.core.BoundStatement.preparedStatement() call com.datastax.driver.core.BoundStatement.preparedStatement() Statement User decl Result ResultSet = = public = = public decl_stmt com.datastax.driver.core.Statement = call decl Mapper.getQuery() call decl Mapper.getQuery() call decl Mapper.getQuery() call decl Mapper.getQuery() call decl Mapper.getQuery() call com.datastax.driver.core.Statement.setConsistencyLevel(ConsistencyLevel) call com.datastax.driver.core.Statement.setConsistencyLevel(ConsistencyLevel) call com.datastax.driver.core.Statement.setConsistencyLevel(ConsistencyLevel) call com.datastax.driver.core.Statement.setConsistencyLevel(ConsistencyLevel) call com.datastax.driver.core.Statement.setConsistencyLevel(ConsistencyLevel) decl_stmt com.datastax.driver.core.ResultSet = decl_stmt com.datastax.driver.mapping.Result < = call decl Mapper.map() call decl Mapper.map() call decl Mapper.map() call decl Mapper.map() call decl Mapper.map() decl_stmt User = call decl Result.one() call decl Result.one() call decl Result.one() call decl Result.one() call decl Result.one() call User.getLogin() call User.getLogin() call User.getLogin() call User.getLogin() call User.getLogin() User UserAccessor decl Result ResultSet = = = = decl_stmt com.datastax.driver.mapping.UserAccessor = call com.datastax.driver.mapping.MappingManager.createAccessor(Class) call com.datastax.driver.mapping.MappingManager.createAccessor(Class) call com.datastax.driver.mapping.MappingManager.createAccessor(Class) call com.datastax.driver.mapping.MappingManager.createAccessor(Class) call com.datastax.driver.mapping.MappingManager.createAccessor(Class) decl_stmt com.datastax.driver.core.ResultSet = call UserAccessor.all() call UserAccessor.all() call UserAccessor.all() call UserAccessor.all() call UserAccessor.all() decl_stmt com.datastax.driver.mapping.Result < = call decl Mapper.map() call decl Mapper.map() call decl Mapper.map() call decl Mapper.map() call decl Mapper.map() decl_stmt User = call decl Result.one() call decl Result.one() call decl Result.one() call decl Result.one() call decl Result.one() call User.getLogin() call User.getLogin() call User.getLogin() call User.getLogin() call User.getLogin() call User.getWriteTime() call User.getWriteTime() call User.getWriteTime() call User.getWriteTime() call User.getWriteTime() decl Mapper User_WrongComputedType = = = = = = decl_stmt com.datastax.driver.mapping.Mapper < = call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) decl_stmt User_WrongComputedType = call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() decl Mapper User_WrongAnnotationForComputed = = = = decl_stmt com.datastax.driver.mapping.Mapper < = call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) call com.datastax.driver.mapping.MappingManager.mapper(Class) try call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() new catch try decl_stmt User_WrongAnnotationForComputed = call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() catch public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public =