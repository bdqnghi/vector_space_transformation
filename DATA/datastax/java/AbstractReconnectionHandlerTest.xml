com.datastax.driver.core com.datastax.driver.core.AbstractReconnectionHandler.HandlerFuture import com.datastax.driver.core.AbstractReconnectionHandlerTest.MockReconnectionWork.ReconnectBehavior import com.datastax.driver.core.exceptions.ConnectionException import com.datastax.driver.core.exceptions.UnsupportedProtocolVersionException import com.datastax.driver.core.policies.ReconnectionPolicy.ReconnectionSchedule import com.google.common.util.concurrent.Futures import com.google.common.util.concurrent.ListenableFuture import com.google.common.util.concurrent.SettableFuture import org.slf4j.Logger import org.slf4j.LoggerFactory import org.testng.annotations.AfterMethod import org.testng.annotations.BeforeMethod import org.testng.annotations.Test import java.net.InetSocketAddress import java.util.concurrent.* import java.util.concurrent.atomic.AtomicReference import static static com.datastax.driver.core.ConditionChecker.check import static static org.assertj.core.api.Assertions.assertThat import static static org.mockito.Mockito.* import static static org.testng.Assert.fail import class com.datastax.driver.core.AbstractReconnectionHandlerTest MockReconnectionSchedule MockReconnectionWork AbstractReconnectionHandler ScheduledExecutorService decl Callable Logger decl AtomicReference public public throws return != = public = public = = new = new call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() = new protected protected throws return call MockReconnectionWork.tryReconnect() call MockReconnectionWork.tryReconnect() call MockReconnectionWork.tryReconnect() call MockReconnectionWork.tryReconnect() call MockReconnectionWork.tryReconnect() protected protected call MockReconnectionWork.onReconnection() call MockReconnectionWork.onReconnection() call MockReconnectionWork.onReconnection() call MockReconnectionWork.onReconnection() call MockReconnectionWork.onReconnection() protected protected throws return call MockReconnectionWork.tryReconnect() call MockReconnectionWork.tryReconnect() call MockReconnectionWork.tryReconnect() call MockReconnectionWork.tryReconnect() call MockReconnectionWork.tryReconnect() protected protected call MockReconnectionWork.onReconnection() call MockReconnectionWork.onReconnection() call MockReconnectionWork.onReconnection() call MockReconnectionWork.onReconnection() call MockReconnectionWork.onReconnection() = = public = = public if call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() != call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call ScheduledExecutorService.shutdownNow() call ScheduledExecutorService.shutdownNow() call ScheduledExecutorService.shutdownNow() call ScheduledExecutorService.shutdownNow() call ScheduledExecutorService.shutdownNow() = public = public call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() = call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() int = public = public call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() decl_stmt int = for = < ++ call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() = call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() = call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() + call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() = public = public = * call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() HandlerFuture decl ListenableFuture = public = public call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() = call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() = call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() decl_stmt ListenableFuture < = call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() decl_stmt HandlerFuture = call HandlerFuture.isCancelled() call HandlerFuture.isCancelled() call HandlerFuture.isCancelled() call HandlerFuture.isCancelled() call HandlerFuture.isCancelled() call HandlerFuture.nextTry() call HandlerFuture.nextTry() call HandlerFuture.nextTry() call HandlerFuture.nextTry() call HandlerFuture.nextTry() call HandlerFuture.nextTry() call HandlerFuture.nextTry() call HandlerFuture.nextTry() call HandlerFuture.nextTry() = public = public throws call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() = call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() = public = public throws call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() = call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() = public = public call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() = call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() = public = public call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() = public = public call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call com.datastax.driver.core.AbstractReconnectionHandler.start() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() call MockReconnectionSchedule.tick() = call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call MockReconnectionWork.tick() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() public public if = else call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() try call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return public public if = else call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() try catch protected protected throws += call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() try call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() catch switch case call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return case call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() throw new new default: throw new public public call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() try catch protected protected = boolean private private call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() try decl_stmt boolean = call ScheduledExecutorService.awaitTermination() call ScheduledExecutorService.awaitTermination() call ScheduledExecutorService.awaitTermination() call ScheduledExecutorService.awaitTermination() call ScheduledExecutorService.awaitTermination() if ! catch