com.datastax.driver.mapping com.datastax.driver.core.* import com.datastax.driver.core.exceptions.CodecNotFoundException import com.datastax.driver.core.utils.CassandraVersion import com.datastax.driver.core.utils.UUIDs import com.datastax.driver.mapping.annotations.* import com.google.common.base.Objects import com.google.common.collect.Maps import org.assertj.core.data.MapEntry import org.testng.annotations.BeforeMethod import org.testng.annotations.Test import java.util.* import static static org.assertj.core.api.Assertions.assertThat import static static org.assertj.core.api.Assertions.fail import static static org.testng.Assert.* import class annotation annotation com.datastax.driver.mapping.MapperUDTTest super super extends public public = public = public public public return public public = public public return public public = public public return public public = public < public < return public public < = public public User public public if == return if instanceof decl_stmt User = return && && && return public public return public public return public public return public public = public public return public public = public public return public public = public < public < return public public < = Address public public if == return if instanceof decl_stmt Address = return && && && return public public return public public return User decl Mapper = public = public throws decl_stmt com.datastax.driver.mapping.Mapper < = new decl_stmt User = new new call User.addOtherAddress() call User.addOtherAddress() call User.addOtherAddress() call User.addOtherAddress() call User.addOtherAddress() new call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() User decl Mapper = public = public throws decl_stmt com.datastax.driver.mapping.Mapper < = new decl_stmt User = new call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() decl Map User decl Mapper User Address User User MappingManager decl Result User UserAccessor = public = public throws decl_stmt com.datastax.driver.mapping.MappingManager = new decl_stmt com.datastax.driver.mapping.Mapper < = new decl_stmt User = new new call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() decl_stmt com.datastax.driver.mapping.UserAccessor = call com.datastax.driver.mapping.MappingManager.createAccessor(Class) call com.datastax.driver.mapping.MappingManager.createAccessor(Class) call com.datastax.driver.mapping.MappingManager.createAccessor(Class) call com.datastax.driver.mapping.MappingManager.createAccessor(Class) call com.datastax.driver.mapping.MappingManager.createAccessor(Class) decl_stmt Address = new call com.datastax.driver.mapping.UserAccessor.addAddress(UUID,String,Address) call com.datastax.driver.mapping.UserAccessor.addAddress(UUID,String,Address) call com.datastax.driver.mapping.UserAccessor.addAddress(UUID,String,Address) call com.datastax.driver.mapping.UserAccessor.addAddress(UUID,String,Address) call com.datastax.driver.mapping.UserAccessor.addAddress(UUID,String,Address) call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() decl_stmt User = call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getOtherAddresses() call User.getOtherAddresses() call User.getOtherAddresses() call User.getOtherAddresses() call User.getOtherAddresses() call com.datastax.driver.mapping.UserAccessor.addAddress(UUID,String,Address) call com.datastax.driver.mapping.UserAccessor.addAddress(UUID,String,Address) call com.datastax.driver.mapping.UserAccessor.addAddress(UUID,String,Address) call com.datastax.driver.mapping.UserAccessor.addAddress(UUID,String,Address) call com.datastax.driver.mapping.UserAccessor.addAddress(UUID,String,Address) call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() decl_stmt User = call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getOtherAddresses() call User.getOtherAddresses() call User.getOtherAddresses() call User.getOtherAddresses() call User.getOtherAddresses() decl_stmt java.util.Map < = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new call com.datastax.driver.mapping.UserAccessor.setOtherAddresses(UUID,Map) call com.datastax.driver.mapping.UserAccessor.setOtherAddresses(UUID,Map) call com.datastax.driver.mapping.UserAccessor.setOtherAddresses(UUID,Map) call com.datastax.driver.mapping.UserAccessor.setOtherAddresses(UUID,Map) call com.datastax.driver.mapping.UserAccessor.setOtherAddresses(UUID,Map) call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() decl_stmt User = call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getOtherAddresses() call User.getOtherAddresses() call User.getOtherAddresses() call User.getOtherAddresses() call User.getOtherAddresses() call com.datastax.driver.mapping.UserAccessor.setOtherAddresses(UUID,Map) call com.datastax.driver.mapping.UserAccessor.setOtherAddresses(UUID,Map) call com.datastax.driver.mapping.UserAccessor.setOtherAddresses(UUID,Map) call com.datastax.driver.mapping.UserAccessor.setOtherAddresses(UUID,Map) call com.datastax.driver.mapping.UserAccessor.setOtherAddresses(UUID,Map) call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() decl_stmt User = call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call com.datastax.driver.mapping.UserAccessor.getOne(UUID) call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getUserId() call User.getOtherAddresses() call User.getOtherAddresses() call User.getOtherAddresses() call User.getOtherAddresses() call User.getOtherAddresses() decl_stmt com.datastax.driver.mapping.Result < = call com.datastax.driver.mapping.UserAccessor.getAll() call com.datastax.driver.mapping.UserAccessor.getAll() call com.datastax.driver.mapping.UserAccessor.getAll() call com.datastax.driver.mapping.UserAccessor.getAll() call com.datastax.driver.mapping.UserAccessor.getAll() call decl Result.one() call decl Result.one() call decl Result.one() call decl Result.one() call decl Result.one() call decl Result.isExhausted() call decl Result.isExhausted() call decl Result.isExhausted() call decl Result.isExhausted() call decl Result.isExhausted() decl Map Address UDTValue UUID Cluster Session CodecRegistry decl TypeCodec decl TypeCodec Address Object Row = public = public decl_stmt com.datastax.driver.core.Cluster = decl_stmt com.datastax.driver.core.CodecRegistry = call com.datastax.driver.core.Cluster.getConfiguration() call com.datastax.driver.core.Cluster.getConfiguration() call com.datastax.driver.core.Cluster.getConfiguration() call com.datastax.driver.core.Cluster.getConfiguration() call com.datastax.driver.core.Cluster.getConfiguration() decl_stmt com.datastax.driver.core.Session = call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() decl_stmt java.util.UUID = call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) + + call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) + + decl_stmt com.datastax.driver.core.Row = call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) decl_stmt com.datastax.driver.core.UDTValue = call Row.getUDTValue() call Row.getUDTValue() call Row.getUDTValue() call Row.getUDTValue() call Row.getUDTValue() call UDTValue.getString() call UDTValue.getString() call UDTValue.getString() call UDTValue.getString() call UDTValue.getString() decl_stmt java.lang.Object = call Row.getObject() call Row.getObject() call Row.getObject() call Row.getObject() call Row.getObject() try call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) catch decl_stmt com.datastax.driver.core.TypeCodec < = call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call decl TypeCodec.getCqlType() call decl TypeCodec.getCqlType() call decl TypeCodec.getCqlType() call decl TypeCodec.getCqlType() call decl TypeCodec.getCqlType() call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call decl TypeCodec.getJavaType() call decl TypeCodec.getJavaType() call decl TypeCodec.getJavaType() call decl TypeCodec.getJavaType() call decl TypeCodec.getJavaType() decl_stmt com.datastax.driver.core.TypeCodec < = new call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.CodecRegistry.codecFor(T) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) call com.datastax.driver.core.UDTValue.getType(int) decl_stmt Address = call Row.get() call Row.get() call Row.get() call Row.get() call Row.get() call Address.getCity() call Address.getCity() call Address.getCity() call Address.getCity() call Address.getCity() call Address.getStreet() call Address.getStreet() call Address.getStreet() call Address.getStreet() call Address.getStreet() call Address.getZipCode() call Address.getZipCode() call Address.getZipCode() call Address.getZipCode() call Address.getZipCode() call Address.getPhones() call Address.getPhones() call Address.getPhones() call Address.getPhones() call Address.getPhones() decl_stmt Address = new call Address.setStreet() call Address.setStreet() call Address.setStreet() call Address.setStreet() call Address.setStreet() call Address.setCity() call Address.setCity() call Address.setCity() call Address.setCity() call Address.setCity() call Address.setZipCode() call Address.setZipCode() call Address.setZipCode() call Address.setZipCode() call Address.setZipCode() call Address.setPhones() call Address.setPhones() call Address.setPhones() call Address.setPhones() call Address.setPhones() decl_stmt java.util.Map < = call Row.getMap() call Row.getMap() call Row.getMap() call Row.getMap() call Row.getMap()