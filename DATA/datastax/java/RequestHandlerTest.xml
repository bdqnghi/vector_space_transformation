com.datastax.driver.core com.google.common.collect.ImmutableMap import org.scassandra.Scassandra import org.scassandra.http.client.PrimingRequest import org.testng.annotations.Test import java.util.concurrent.TimeUnit import java.util.concurrent.TimeoutException import static static org.assertj.core.api.Assertions.assertThat import class com.datastax.driver.core.RequestHandlerTest long long long Cluster Scassandra Connection Session int ResultSetFuture = public = public decl_stmt Scassandra final final = decl_stmt com.datastax.driver.core.Cluster = try call Scassandra.start() call Scassandra.start() call Scassandra.start() call Scassandra.start() call Scassandra.start() call Scassandra.primingClient() call Scassandra.primingClient() call Scassandra.primingClient() call Scassandra.primingClient() call Scassandra.primingClient() = call Scassandra.getBinaryPort() call Scassandra.getBinaryPort() call Scassandra.getBinaryPort() call Scassandra.getBinaryPort() call Scassandra.getBinaryPort() new decl_stmt com.datastax.driver.core.Session = call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() decl_stmt int = decl_stmt long = for = < ++ call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) call com.datastax.driver.core.Session.execute(String) decl_stmt long = - decl_stmt long = / for = < ++ decl_stmt com.datastax.driver.core.ResultSetFuture = call com.datastax.driver.core.Session.executeAsync(String,Object) call com.datastax.driver.core.Session.executeAsync(String,Object) call com.datastax.driver.core.Session.executeAsync(String,Object) call com.datastax.driver.core.Session.executeAsync(String,Object) call com.datastax.driver.core.Session.executeAsync(String,Object) try call com.datastax.driver.core.ResultSetFuture.getUninterruptibly(long,TimeUnit) call com.datastax.driver.core.ResultSetFuture.getUninterruptibly(long,TimeUnit) call com.datastax.driver.core.ResultSetFuture.getUninterruptibly(long,TimeUnit) call com.datastax.driver.core.ResultSetFuture.getUninterruptibly(long,TimeUnit) call com.datastax.driver.core.ResultSetFuture.getUninterruptibly(long,TimeUnit) catch call ResultSetFuture.cancel() call ResultSetFuture.cancel() call ResultSetFuture.cancel() call ResultSetFuture.cancel() call ResultSetFuture.cancel() decl_stmt com.datastax.driver.core.Connection = call Connection.inFlight() call Connection.inFlight() call Connection.inFlight() call Connection.inFlight() call Connection.inFlight() call Connection.inFlight() call Connection.inFlight() call Connection.inFlight() call Connection.inFlight() finally if != call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call Scassandra.stop() call Scassandra.stop() call Scassandra.stop() call Scassandra.stop() call Scassandra.stop() HostConnectionPool private private decl_stmt com.datastax.driver.core.HostConnectionPool = return call HostConnectionPool.connections() call HostConnectionPool.connections() call HostConnectionPool.connections() call HostConnectionPool.connections() call HostConnectionPool.connections() call HostConnectionPool.connections() call HostConnectionPool.connections() call HostConnectionPool.connections() call HostConnectionPool.connections()