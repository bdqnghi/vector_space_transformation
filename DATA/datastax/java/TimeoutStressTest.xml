com.datastax.driver.core com.datastax.driver.core.exceptions.NoHostAvailableException import com.datastax.driver.core.policies.ConstantReconnectionPolicy import com.datastax.driver.core.utils.SocketChannelMonitor import com.google.common.util.concurrent.FutureCallback import com.google.common.util.concurrent.Futures import com.google.common.util.concurrent.ThreadFactoryBuilder import com.google.common.util.concurrent.Uninterruptibles import io.netty.channel.socket.SocketChannel import org.slf4j.Logger import org.slf4j.LoggerFactory import org.testng.annotations.Test import java.util.Collection import java.util.concurrent.ExecutorService import java.util.concurrent.Executors import java.util.concurrent.Semaphore import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicBoolean import java.util.concurrent.atomic.AtomicInteger import static static com.datastax.driver.core.Assertions.assertThat import class annotation com.datastax.driver.core.TimeoutStressTest super super extends int SocketChannelMonitor long int int Logger AtomicInteger PoolingOptions public public = new decl_stmt com.datastax.driver.core.PoolingOptions = new return call com.datastax.driver.core.utils.SocketChannelMonitor.nettyOptions() call com.datastax.driver.core.utils.SocketChannelMonitor.nettyOptions() call com.datastax.driver.core.utils.SocketChannelMonitor.nettyOptions() call com.datastax.driver.core.utils.SocketChannelMonitor.nettyOptions() call com.datastax.driver.core.utils.SocketChannelMonitor.nettyOptions() new public public + + + + + long ExecutorService int Session AtomicBoolean PreparedStatement int Semaphore decl Collection = public = public throws decl_stmt com.datastax.driver.core.Session = decl_stmt com.datastax.driver.core.PreparedStatement = call com.datastax.driver.core.Session.prepare(RegularStatement) call com.datastax.driver.core.Session.prepare(RegularStatement) call com.datastax.driver.core.Session.prepare(RegularStatement) call com.datastax.driver.core.Session.prepare(RegularStatement) call com.datastax.driver.core.Session.prepare(RegularStatement) decl_stmt int = decl_stmt java.util.concurrent.ExecutorService = new decl_stmt java.util.concurrent.atomic.AtomicBoolean = new decl_stmt int = * + try decl_stmt java.util.concurrent.Semaphore = new for = < ++ call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) new decl_stmt long = while - < call com.datastax.driver.core.utils.SocketChannelMonitor.report() call com.datastax.driver.core.utils.SocketChannelMonitor.report() call com.datastax.driver.core.utils.SocketChannelMonitor.report() call com.datastax.driver.core.utils.SocketChannelMonitor.report() call com.datastax.driver.core.utils.SocketChannelMonitor.report() decl_stmt java.util.Collection < = call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) if call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() > call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() finally call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + decl_stmt java.util.Collection < = call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call com.datastax.driver.core.Session.close() call com.datastax.driver.core.Session.close() call com.datastax.driver.core.Session.close() call com.datastax.driver.core.Session.close() call com.datastax.driver.core.Session.close() = call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call com.datastax.driver.core.utils.SocketChannelMonitor.openChannels(InetSocketAddress) call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() int PreparedStatement private private decl_stmt int = decl_stmt com.datastax.driver.core.PreparedStatement = for = < ++ if == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call com.datastax.driver.core.PreparedStatement.bind() call com.datastax.driver.core.PreparedStatement.bind() call com.datastax.driver.core.PreparedStatement.bind() call com.datastax.driver.core.PreparedStatement.bind() call com.datastax.driver.core.PreparedStatement.bind() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() ResultSetFuture public public while ! try decl_stmt com.datastax.driver.core.ResultSetFuture = new < public public if call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() public public if instanceof else catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() public public if call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() public public if instanceof else