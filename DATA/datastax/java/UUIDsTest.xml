com.datastax.driver.core.utils com.datastax.driver.core.ProtocolVersion import com.datastax.driver.core.TypeCodec import org.testng.annotations.Test import java.nio.ByteBuffer import java.util.HashSet import java.util.Random import java.util.Set import java.util.UUID import java.util.concurrent.ConcurrentSkipListSet import static static org.testng.Assert.assertEquals import static static org.testng.Assert.assertTrue import class com.datastax.driver.core.utils.UUIDsTest long UUID long = public = public decl_stmt long = decl_stmt java.util.UUID = call java.util.UUID.version() call java.util.UUID.version() call java.util.UUID.version() call java.util.UUID.version() call java.util.UUID.version() call java.util.UUID.variant() call java.util.UUID.variant() call java.util.UUID.variant() call java.util.UUID.variant() call java.util.UUID.variant() decl_stmt long = assert <= && >= - : int decl Set = public = public decl_stmt int = decl_stmt java.util.Set < = new < for = < ++ call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() int int decl Set decl UUIDGenerator = public = public throws decl_stmt int = decl_stmt int = decl_stmt java.util.Set < = new < decl_stmt UUIDGenerator = new for = < ++ = new for = < ++ for = < ++ call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() * int long long = public = public decl_stmt int = decl_stmt long = for = < ++ decl_stmt long = assert < : int Random int long = public = public decl_stmt java.util.Random = new decl_stmt int = decl_stmt int = for = < ++ decl_stmt long = long call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) for = < ++ new call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() ByteBuffer ByteBuffer ByteBuffer private static private static decl_stmt ByteBuffer = decl_stmt ByteBuffer = decl_stmt ByteBuffer = <= >= int int int private static private static decl_stmt int = decl_stmt int = decl_stmt int = + & - + & if != return = + & - + & if != return = + & - + & if != return = + & - + & if != return = & - & if != return = + & - + & if != return = + & - + & if != return return + & - + & public public for = < ++