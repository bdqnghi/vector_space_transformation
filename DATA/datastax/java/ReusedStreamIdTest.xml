com.datastax.driver.core com.datastax.driver.core.exceptions.NoHostAvailableException import com.google.common.util.concurrent.FutureCallback import com.google.common.util.concurrent.Futures import com.google.common.util.concurrent.Uninterruptibles import org.slf4j.Logger import org.slf4j.LoggerFactory import org.testng.annotations.Test import java.util.List import java.util.Random import java.util.concurrent.CountDownLatch import java.util.concurrent.Semaphore import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import static static com.datastax.driver.core.CreateCCM.TestMode.PER_METHOD import static static org.assertj.core.api.Assertions.assertThat import static static org.testng.Assert.fail import class annotation com.datastax.driver.core.ReusedStreamIdTest super super extends Logger public public return new int int CountDownLatch int String decl List AtomicInteger Random long ResultSetFuture int Semaphore String = = = public = = = public decl_stmt int = decl_stmt java.util.concurrent.Semaphore final final = new decl_stmt java.util.Random final final = new try decl_stmt java.util.List < = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.util.concurrent.CountDownLatch final final = new decl_stmt long = decl_stmt int = decl_stmt java.util.concurrent.atomic.AtomicInteger final final = new for = <= ++ try if call java.util.concurrent.CountDownLatch.getCount() call java.util.concurrent.CountDownLatch.getCount() call java.util.concurrent.CountDownLatch.getCount() call java.util.concurrent.CountDownLatch.getCount() call java.util.concurrent.CountDownLatch.getCount() == - call java.util.concurrent.Semaphore.acquire(int) call java.util.concurrent.Semaphore.acquire(int) call java.util.concurrent.Semaphore.acquire(int) call java.util.concurrent.Semaphore.acquire(int) call java.util.concurrent.Semaphore.acquire(int) decl_stmt java.lang.String final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.lang.String = decl_stmt com.datastax.driver.core.ResultSetFuture = new < public public call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.Semaphore.release(int) decl_stmt int = if == - call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() return call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) if == public public call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.Semaphore.release(int) if ! instanceof call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() catch if / == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() if call java.util.concurrent.CountDownLatch.getCount() call java.util.concurrent.CountDownLatch.getCount() call java.util.concurrent.CountDownLatch.getCount() call java.util.concurrent.CountDownLatch.getCount() call java.util.concurrent.CountDownLatch.getCount() == - call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() finally try if ! call java.util.concurrent.Semaphore.tryAcquire(long,TimeUnit) call java.util.concurrent.Semaphore.tryAcquire(long,TimeUnit) call java.util.concurrent.Semaphore.tryAcquire(long,TimeUnit) call java.util.concurrent.Semaphore.tryAcquire(long,TimeUnit) call java.util.concurrent.Semaphore.tryAcquire(long,TimeUnit) catch int int public public decl_stmt int = if == - call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return decl_stmt int = if == public public if ! instanceof call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error()