com.datastax.driver.core com.datastax.driver.core.exceptions.NoHostAvailableException import com.datastax.driver.core.policies.ConstantReconnectionPolicy import com.google.common.collect.ImmutableMap import com.google.common.collect.ImmutableSet import com.google.common.collect.Lists import com.google.common.util.concurrent.Uninterruptibles import org.scassandra.Scassandra import org.scassandra.http.client.PrimingClient import org.scassandra.http.client.PrimingRequest import org.slf4j.Logger import org.slf4j.LoggerFactory import org.testng.SkipException import org.testng.annotations.Test import java.net.InetAddress import java.net.InetSocketAddress import java.net.UnknownHostException import java.util.List import java.util.Map import java.util.UUID import java.util.concurrent.TimeUnit import java.util.concurrent.TimeoutException import static static com.datastax.driver.core.Assertions.assertThat import static static com.datastax.driver.core.Assertions.fail import static static com.datastax.driver.core.FakeHost.Behavior.THROWING_CONNECT_TIMEOUTS import static static com.datastax.driver.core.HostDistance.LOCAL import static static com.datastax.driver.core.TestUtils.* import static static org.mockito.Mockito.* import class com.datastax.driver.core.ClusterInitTest Logger Scassandra FakeHost String long Cluster Host long SocketOptions ConstantReconnectionPolicy decl List PoolingOptions int = public = public throws if > throw new decl_stmt com.datastax.driver.core.Cluster = decl_stmt Scassandra = decl_stmt java.util.List < = try = call Scassandra.start() call Scassandra.start() call Scassandra.start() call Scassandra.start() call Scassandra.start() decl_stmt int = call Scassandra.getBinaryPort() call Scassandra.getBinaryPort() call Scassandra.getBinaryPort() call Scassandra.getBinaryPort() call Scassandra.getBinaryPort() for = <= ++ decl_stmt com.datastax.driver.core.FakeHost = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call com.datastax.driver.core.FakeHost.start() call com.datastax.driver.core.FakeHost.start() call com.datastax.driver.core.FakeHost.start() call com.datastax.driver.core.FakeHost.start() call com.datastax.driver.core.FakeHost.start() decl_stmt java.lang.String = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt long = decl_stmt com.datastax.driver.core.SocketOptions = new decl_stmt com.datastax.driver.core.policies.ConstantReconnectionPolicy = new * decl_stmt com.datastax.driver.core.PoolingOptions = new = call Scassandra.getBinaryPort() call Scassandra.getBinaryPort() call Scassandra.getBinaryPort() call Scassandra.getBinaryPort() call Scassandra.getBinaryPort() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() decl_stmt long = - call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) for : decl_stmt com.datastax.driver.core.Host = if != && call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() == || call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() finally if != call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() for : if != call Scassandra.stop() call Scassandra.stop() call Scassandra.stop() call Scassandra.stop() call Scassandra.stop() Cluster decl List CountingReconnectionPolicy = = public = = public decl_stmt java.util.List < = new new decl_stmt com.datastax.driver.core.CountingReconnectionPolicy = new new decl_stmt com.datastax.driver.core.Cluster = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() try call com.datastax.driver.core.Cluster.init() call com.datastax.driver.core.Cluster.init() call com.datastax.driver.core.Cluster.init() call com.datastax.driver.core.Cluster.init() call com.datastax.driver.core.Cluster.init() finally call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() for : call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() Cluster CloseFuture = public = public throws decl_stmt com.datastax.driver.core.Cluster = new try call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() catch decl_stmt com.datastax.driver.core.CloseFuture = call com.datastax.driver.core.Cluster.closeAsync() call com.datastax.driver.core.Cluster.closeAsync() call com.datastax.driver.core.Cluster.closeAsync() call com.datastax.driver.core.Cluster.closeAsync() call com.datastax.driver.core.Cluster.closeAsync() try call CloseFuture.get() call CloseFuture.get() call CloseFuture.get() call CloseFuture.get() call CloseFuture.get() catch finally call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() Cluster ScassandraCluster InetAddress = public = public decl_stmt com.datastax.driver.core.ScassandraCluster = decl_stmt com.datastax.driver.core.Cluster = call com.datastax.driver.core.ScassandraCluster.address(int) call com.datastax.driver.core.ScassandraCluster.address(int) call com.datastax.driver.core.ScassandraCluster.address(int) call com.datastax.driver.core.ScassandraCluster.address(int) call com.datastax.driver.core.ScassandraCluster.address(int) call com.datastax.driver.core.ScassandraCluster.getBinaryPort() call com.datastax.driver.core.ScassandraCluster.getBinaryPort() call com.datastax.driver.core.ScassandraCluster.getBinaryPort() call com.datastax.driver.core.ScassandraCluster.getBinaryPort() call com.datastax.driver.core.ScassandraCluster.getBinaryPort() try call com.datastax.driver.core.ScassandraCluster.init() call com.datastax.driver.core.ScassandraCluster.init() call com.datastax.driver.core.ScassandraCluster.init() call com.datastax.driver.core.ScassandraCluster.init() call com.datastax.driver.core.ScassandraCluster.init() call com.datastax.driver.core.Cluster.init() call com.datastax.driver.core.Cluster.init() call com.datastax.driver.core.Cluster.init() call com.datastax.driver.core.Cluster.init() call com.datastax.driver.core.Cluster.init() for = <= ++ decl_stmt java.net.InetAddress = call com.datastax.driver.core.ScassandraCluster.address(int) call com.datastax.driver.core.ScassandraCluster.address(int) call com.datastax.driver.core.ScassandraCluster.address(int) call com.datastax.driver.core.ScassandraCluster.address(int) call com.datastax.driver.core.ScassandraCluster.address(int) if == else finally call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.ScassandraCluster.stop() call com.datastax.driver.core.ScassandraCluster.stop() call com.datastax.driver.core.ScassandraCluster.stop() call com.datastax.driver.core.ScassandraCluster.stop() call com.datastax.driver.core.ScassandraCluster.stop() PrimingClient int decl List InetAddress private private < throws decl_stmt PrimingClient = decl_stmt java.util.List < < = decl_stmt int = for : decl_stmt java.net.InetAddress = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() > + ++ call PrimingClient.prime() call PrimingClient.prime() call PrimingClient.prime() call PrimingClient.prime() call PrimingClient.prime()