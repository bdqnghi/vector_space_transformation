com.datastax.driver.core io.netty.bootstrap.Bootstrap import io.netty.channel.ChannelHandler import io.netty.channel.ChannelHandlerContext import io.netty.channel.EventLoopGroup import io.netty.channel.nio.NioEventLoopGroup import io.netty.channel.socket.SocketChannel import io.netty.util.HashedWheelTimer import io.netty.util.Timer import org.mockito.invocation.InvocationOnMock import org.mockito.stubbing.Answer import org.testng.annotations.Test import java.util.concurrent.ThreadFactory import static static com.datastax.driver.core.CreateCCM.TestMode.PER_METHOD import static static org.mockito.Answers.CALLS_REAL_METHODS import static static org.mockito.Matchers.any import static static org.mockito.Mockito.* import class annotation annotation com.datastax.driver.core.NettyOptionsTest super super extends = public = public throws = = public = = public throws int Timer Cluster ChannelHandler NettyOptions EventLoopGroup SocketChannel private private throws decl_stmt com.datastax.driver.core.NettyOptions = decl_stmt EventLoopGroup = new decl_stmt java.util.Timer = new decl_stmt ChannelHandler final final = new public public throws decl_stmt java.nio.channels.SocketChannel = call SocketChannel.pipeline() call SocketChannel.pipeline() call SocketChannel.pipeline() call SocketChannel.pipeline() call SocketChannel.pipeline() return decl_stmt com.datastax.driver.core.Cluster = new call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() decl_stmt int = * + if ! += call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() SocketChannel public public throws decl_stmt java.nio.channels.SocketChannel = call SocketChannel.pipeline() call SocketChannel.pipeline() call SocketChannel.pipeline() call SocketChannel.pipeline() call SocketChannel.pipeline() return