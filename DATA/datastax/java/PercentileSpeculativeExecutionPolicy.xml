com.datastax.driver.core.policies com.datastax.driver.core.* import java.util.concurrent.atomic.AtomicInteger import static static com.google.common.base.Preconditions.checkArgument import class com.datastax.driver.core.policies.PercentileSpeculativeExecutionPolicy super super implements int double PercentileTracker AtomicInteger public public return new decl_stmt java.util.concurrent.atomic.AtomicInteger private final final = new public public if call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() > return call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) else return - public public if > return call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) call com.datastax.driver.core.PercentileTracker.getLatencyAtPercentile(Host,Statement,Exception,double) else return - public public public public