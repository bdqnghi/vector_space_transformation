com.datastax.driver.core com.datastax.driver.core.Host.State import com.datastax.driver.core.policies.ConstantReconnectionPolicy import com.datastax.driver.core.policies.DelegatingLoadBalancingPolicy import com.datastax.driver.core.policies.LoadBalancingPolicy import com.datastax.driver.core.policies.RoundRobinPolicy import com.google.common.util.concurrent.ListenableFuture import com.google.common.util.concurrent.Uninterruptibles import org.testng.annotations.Test import java.io.IOException import java.net.InetSocketAddress import java.util.Collections import java.util.Iterator import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.ConcurrentMap import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import static static com.datastax.driver.core.Assertions.assertThat import static static com.datastax.driver.core.CreateCCM.TestMode.PER_METHOD import static static java.util.concurrent.TimeUnit.SECONDS import static static org.mockito.Mockito.* import class annotation com.datastax.driver.core.ReconnectionTest super super extends int Cluster = = = = public = = = = public throws decl_stmt com.datastax.driver.core.Cluster = new call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() * * Cluster int CountingAuthProvider int CountingReconnectionPolicy = = = = = public = = = = = public throws if < decl_stmt com.datastax.driver.core.CountingReconnectionPolicy = new new decl_stmt CountingAuthProvider = new decl_stmt com.datastax.driver.core.Cluster = call com.datastax.driver.core.Cluster.init() call com.datastax.driver.core.Cluster.init() call com.datastax.driver.core.Cluster.init() call com.datastax.driver.core.Cluster.init() call com.datastax.driver.core.Cluster.init() call CountingAuthProvider.setPassword() call CountingAuthProvider.setPassword() call CountingAuthProvider.setPassword() call CountingAuthProvider.setPassword() call CountingAuthProvider.setPassword() decl_stmt int = call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() decl_stmt int = = do += < && call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() call CountingAuthProvider.count() <= call CountingAuthProvider.setPassword() call CountingAuthProvider.setPassword() call CountingAuthProvider.setPassword() call CountingAuthProvider.setPassword() call CountingAuthProvider.setPassword() * Cluster int Host CountingReconnectionPolicy = = = = public = = = = public throws decl_stmt com.datastax.driver.core.CountingReconnectionPolicy = new new decl_stmt com.datastax.driver.core.Cluster = call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() decl_stmt com.datastax.driver.core.Host = call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() decl_stmt int = call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() * call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() call CountingReconnectionPolicy.count() * Cluster TogglabePolicy decl ListenableFuture Host = = = public = = = public throws decl_stmt TogglabePolicy = new new decl_stmt com.datastax.driver.core.Cluster = new call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() = decl_stmt com.datastax.driver.core.Host = call TogglabePolicy.setDistance() call TogglabePolicy.setDistance() call TogglabePolicy.setDistance() call TogglabePolicy.setDistance() call TogglabePolicy.setDistance() decl_stmt ListenableFuture < = call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() if != call decl ListenableFuture.cancel() call decl ListenableFuture.cancel() call decl ListenableFuture.cancel() call decl ListenableFuture.cancel() call decl ListenableFuture.cancel() call com.datastax.driver.core.Host.tryReconnectOnce() call com.datastax.driver.core.Host.tryReconnectOnce() call com.datastax.driver.core.Host.tryReconnectOnce() call com.datastax.driver.core.Host.tryReconnectOnce() call com.datastax.driver.core.Host.tryReconnectOnce() * call com.datastax.driver.core.Host.tryReconnectOnce() call com.datastax.driver.core.Host.tryReconnectOnce() call com.datastax.driver.core.Host.tryReconnectOnce() call com.datastax.driver.core.Host.tryReconnectOnce() call com.datastax.driver.core.Host.tryReconnectOnce() * int Cluster TogglabePolicy Host SocketOptions = = = public = = = public decl_stmt TogglabePolicy = new new decl_stmt com.datastax.driver.core.SocketOptions = new decl_stmt com.datastax.driver.core.Cluster = new call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() decl_stmt int = + * = decl_stmt com.datastax.driver.core.Host = call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.getReconnectionAttemptFuture() call com.datastax.driver.core.Host.tryReconnectOnce() call com.datastax.driver.core.Host.tryReconnectOnce() call com.datastax.driver.core.Host.tryReconnectOnce() call com.datastax.driver.core.Host.tryReconnectOnce() call com.datastax.driver.core.Host.tryReconnectOnce() * * public public return HostDistance public public decl_stmt HostDistance = return != : public public public < public < if return > else return