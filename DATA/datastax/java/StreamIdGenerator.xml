com.datastax.driver.core java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.atomic.AtomicLongArray import class com.datastax.driver.core.StreamIdGenerator long AtomicInteger int AtomicInteger int int AtomicLongArray static static return new private static private static switch case case return case case return default: throw int int int public public decl_stmt int do = call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() = + call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() ! call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) for = < call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() ++ decl_stmt int = + call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() decl_stmt int = if >= return + * return - public public / public public call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() public public call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() public public return - call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() long int private private while decl_stmt long = call java.util.concurrent.atomic.AtomicLongArray.get(int) call java.util.concurrent.atomic.AtomicLongArray.get(int) call java.util.concurrent.atomic.AtomicLongArray.get(int) call java.util.concurrent.atomic.AtomicLongArray.get(int) call java.util.concurrent.atomic.AtomicLongArray.get(int) if == return - decl_stmt int = if call java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long) call java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long) call java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long) call java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long) call java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long) ^ return long private private while decl_stmt long = call java.util.concurrent.atomic.AtomicLongArray.get(int) call java.util.concurrent.atomic.AtomicLongArray.get(int) call java.util.concurrent.atomic.AtomicLongArray.get(int) call java.util.concurrent.atomic.AtomicLongArray.get(int) call java.util.concurrent.atomic.AtomicLongArray.get(int) if call java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long) call java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long) call java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long) call java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long) call java.util.concurrent.atomic.AtomicLongArray.compareAndSet(int,long,long) | return private static private static return <<