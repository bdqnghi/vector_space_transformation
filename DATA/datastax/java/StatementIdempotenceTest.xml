com.datastax.driver.core com.datastax.driver.core.querybuilder.BuiltStatement import com.google.common.collect.ImmutableList import com.google.common.collect.ImmutableMap import com.google.common.collect.Lists import com.google.common.collect.Sets import org.testng.annotations.BeforeMethod import org.testng.annotations.Test import static static com.datastax.driver.core.querybuilder.QueryBuilder.* import static static org.assertj.core.api.Assertions.assertThat import static static org.mockito.Mockito.mock import static static org.mockito.Mockito.when import class com.datastax.driver.core.StatementIdempotenceTest Cluster ProtocolOptions Configuration CodecRegistry = public = public throws decl_stmt com.datastax.driver.core.CodecRegistry = new = decl_stmt com.datastax.driver.core.Configuration = decl_stmt com.datastax.driver.core.ProtocolOptions = call com.datastax.driver.core.Cluster.getConfiguration() call com.datastax.driver.core.Cluster.getConfiguration() call com.datastax.driver.core.Cluster.getConfiguration() call com.datastax.driver.core.Cluster.getConfiguration() call com.datastax.driver.core.Cluster.getConfiguration() call com.datastax.driver.core.Configuration.getCodecRegistry() call com.datastax.driver.core.Configuration.getCodecRegistry() call com.datastax.driver.core.Configuration.getCodecRegistry() call com.datastax.driver.core.Configuration.getCodecRegistry() call com.datastax.driver.core.Configuration.getCodecRegistry() call com.datastax.driver.core.Configuration.getProtocolOptions() call com.datastax.driver.core.Configuration.getProtocolOptions() call com.datastax.driver.core.Configuration.getProtocolOptions() call com.datastax.driver.core.Configuration.getProtocolOptions() call com.datastax.driver.core.Configuration.getProtocolOptions() call ProtocolOptions.getProtocolVersion() call ProtocolOptions.getProtocolVersion() call ProtocolOptions.getProtocolVersion() call ProtocolOptions.getProtocolVersion() call ProtocolOptions.getProtocolVersion() QueryOptions SimpleStatement = public = public decl_stmt com.datastax.driver.core.QueryOptions = new decl_stmt com.datastax.driver.core.SimpleStatement = new call SimpleStatement.isIdempotentWithDefault() call SimpleStatement.isIdempotentWithDefault() call SimpleStatement.isIdempotentWithDefault() call SimpleStatement.isIdempotentWithDefault() call SimpleStatement.isIdempotentWithDefault() QueryOptions SimpleStatement = public = public decl_stmt com.datastax.driver.core.QueryOptions = new decl_stmt com.datastax.driver.core.SimpleStatement = new for : new call com.datastax.driver.core.QueryOptions.setDefaultIdempotence(boolean) call com.datastax.driver.core.QueryOptions.setDefaultIdempotence(boolean) call com.datastax.driver.core.QueryOptions.setDefaultIdempotence(boolean) call com.datastax.driver.core.QueryOptions.setDefaultIdempotence(boolean) call com.datastax.driver.core.QueryOptions.setDefaultIdempotence(boolean) call SimpleStatement.isIdempotentWithDefault() call SimpleStatement.isIdempotentWithDefault() call SimpleStatement.isIdempotentWithDefault() call SimpleStatement.isIdempotentWithDefault() call SimpleStatement.isIdempotentWithDefault() QueryOptions SimpleStatement = public = public decl_stmt com.datastax.driver.core.QueryOptions = new decl_stmt com.datastax.driver.core.SimpleStatement = new for : new for : new call com.datastax.driver.core.QueryOptions.setDefaultIdempotence(boolean) call com.datastax.driver.core.QueryOptions.setDefaultIdempotence(boolean) call com.datastax.driver.core.QueryOptions.setDefaultIdempotence(boolean) call com.datastax.driver.core.QueryOptions.setDefaultIdempotence(boolean) call com.datastax.driver.core.QueryOptions.setDefaultIdempotence(boolean) call SimpleStatement.setIdempotent() call SimpleStatement.setIdempotent() call SimpleStatement.setIdempotent() call SimpleStatement.setIdempotent() call SimpleStatement.setIdempotent() call SimpleStatement.isIdempotentWithDefault() call SimpleStatement.isIdempotentWithDefault() call SimpleStatement.isIdempotentWithDefault() call SimpleStatement.isIdempotentWithDefault() call SimpleStatement.isIdempotentWithDefault() = public = public for : for : = public = public for : new for : for : private < private < return > private < private < return new new new new new new new new new new new new new new new new new new new new new new new new