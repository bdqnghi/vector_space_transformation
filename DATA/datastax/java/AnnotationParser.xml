com.datastax.driver.mapping com.datastax.driver.core.ConsistencyLevel import com.datastax.driver.core.Metadata import com.datastax.driver.core.TypeCodec import com.datastax.driver.core.UserType import com.datastax.driver.mapping.MethodMapper.ParamMapper import com.datastax.driver.mapping.annotations.* import com.google.common.base.Strings import com.google.common.collect.Maps import com.google.common.reflect.TypeToken import java.lang.annotation.Annotation import java.lang.reflect.Field import java.lang.reflect.* import java.util.* import java.util.concurrent.atomic.AtomicInteger import class com.datastax.driver.mapping.AnnotationParser decl Comparator public public return - decl EntityMapper ConsistencyLevel decl List String String decl List decl List ConsistencyLevel Table AtomicInteger public static < < public static < < < decl_stmt Table = decl_stmt java.lang.String = call Table.caseSensitiveKeyspace() call Table.caseSensitiveKeyspace() call Table.caseSensitiveKeyspace() call Table.caseSensitiveKeyspace() call Table.caseSensitiveKeyspace() call Table.keyspace() call Table.keyspace() call Table.keyspace() call Table.keyspace() call Table.keyspace() : call Table.keyspace() call Table.keyspace() call Table.keyspace() call Table.keyspace() call Table.keyspace() decl_stmt java.lang.String = call Table.caseSensitiveTable() call Table.caseSensitiveTable() call Table.caseSensitiveTable() call Table.caseSensitiveTable() call Table.caseSensitiveTable() call Table.name() call Table.name() call Table.name() call Table.name() call Table.name() : call Table.name() call Table.name() call Table.name() call Table.name() call Table.name() decl_stmt ConsistencyLevel = call Table.writeConsistency() call Table.writeConsistency() call Table.writeConsistency() call Table.writeConsistency() call Table.writeConsistency() : call Table.writeConsistency() call Table.writeConsistency() call Table.writeConsistency() call Table.writeConsistency() call Table.writeConsistency() decl_stmt ConsistencyLevel = call Table.readConsistency() call Table.readConsistency() call Table.readConsistency() call Table.readConsistency() call Table.readConsistency() : call Table.readConsistency() call Table.readConsistency() call Table.readConsistency() call Table.readConsistency() call Table.readConsistency() if call Table.keyspace() call Table.keyspace() call Table.keyspace() call Table.keyspace() call Table.keyspace() = if throw new decl_stmt com.datastax.driver.mapping.EntityMapper < = decl_stmt java.util.List < = new < decl_stmt java.util.List < = new < decl_stmt java.util.List < = new < for : if || & == continue if && != throw new if != continue switch case call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() break case call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() break default: call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() break decl_stmt java.util.concurrent.atomic.AtomicInteger = : new call decl EntityMapper.addColumns() call decl EntityMapper.addColumns() call decl EntityMapper.addColumns() call decl EntityMapper.addColumns() call decl EntityMapper.addColumns() return decl List int Field private static < < < private static < < < < < decl_stmt java.util.List < < = new < < for = < ++ decl_stmt com.sun.jdi.Field = decl_stmt int = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() < : return String String UDT UserType decl Map decl List public static < < public static < < < decl_stmt UDT = decl_stmt java.lang.String = call UDT.caseSensitiveKeyspace() call UDT.caseSensitiveKeyspace() call UDT.caseSensitiveKeyspace() call UDT.caseSensitiveKeyspace() call UDT.caseSensitiveKeyspace() call UDT.keyspace() call UDT.keyspace() call UDT.keyspace() call UDT.keyspace() call UDT.keyspace() : call UDT.keyspace() call UDT.keyspace() call UDT.keyspace() call UDT.keyspace() call UDT.keyspace() decl_stmt java.lang.String = call UDT.caseSensitiveType() call UDT.caseSensitiveType() call UDT.caseSensitiveType() call UDT.caseSensitiveType() call UDT.caseSensitiveType() call UDT.name() call UDT.name() call UDT.name() call UDT.name() call UDT.name() : call UDT.name() call UDT.name() call UDT.name() call UDT.name() call UDT.name() if call UDT.keyspace() call UDT.keyspace() call UDT.keyspace() call UDT.keyspace() call UDT.keyspace() = if throw new decl_stmt com.datastax.driver.core.UserType = decl_stmt java.util.List < = new < for : if || & == continue if != continue switch case throw new case throw new default: call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() break decl_stmt java.util.Map < < = return new < decl ColumnMapper decl Map int Field private static < < < private static < < < < < decl_stmt java.util.Map < < = for = < ++ decl_stmt com.sun.jdi.Field = decl_stmt int = decl_stmt com.datastax.driver.mapping.ColumnMapper < = < : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl ColumnMapper.getColumnName() call decl ColumnMapper.getColumnName() call decl ColumnMapper.getColumnName() call decl ColumnMapper.getColumnName() call decl ColumnMapper.getColumnName() return Field int private static private static < for = < ++ decl_stmt com.sun.jdi.Field = decl_stmt int = if != throw new call com.sun.jdi.Field.getName() call com.sun.jdi.Field.getName() call com.sun.jdi.Field.getName() call com.sun.jdi.Field.getName() call com.sun.jdi.Field.getName() private static private static switch case return case return default: return - ClusteringColumn PartitionKey Computed public static public static decl_stmt PartitionKey = decl_stmt ClusteringColumn = decl_stmt Computed = if != && != throw new + + if != return if != return if != return return Column decl com Computed public static public static decl_stmt Column = decl_stmt Computed = if != && ! call Column.name() call Column.name() call Column.name() call Column.name() call Column.name() if != throw new return call Column.caseSensitive() call Column.caseSensitive() call Column.caseSensitive() call Column.caseSensitive() call Column.caseSensitive() call Column.name() call Column.name() call Column.name() call Column.name() call Column.name() : call Column.name() call Column.name() call Column.name() call Column.name() call Column.name() decl_stmt com.sun.jdi.Field = if != && ! call decl com.name() call decl com.name() call decl com.name() call decl com.name() call decl com.name() return call decl com.caseSensitive() call decl com.caseSensitive() call decl com.caseSensitive() call decl com.caseSensitive() call decl com.caseSensitive() call decl com.name() call decl com.name() call decl com.name() call decl com.name() call decl com.name() : call decl com.name() call decl com.name() call decl com.name() call decl com.name() call decl com.name() if != return call Computed.value() call Computed.value() call Computed.value() call Computed.value() call Computed.value() return public static public static return + decl TypeCodec decl Class public static < public static < decl_stmt java.lang.Class < extends extends extends < = if call decl Class.equals() call decl Class.equals() call decl Class.equals() call decl Class.equals() call decl Class.equals() return try decl_stmt com.datastax.driver.core.TypeCodec < = < call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() return catch throw new Column decl com private static < extends extends extends < private static < extends extends extends < decl_stmt Column = if != return call Column.codec() call Column.codec() call Column.codec() call Column.codec() call Column.codec() decl_stmt com.sun.jdi.Field = if != return call decl com.codec() call decl com.codec() call decl com.codec() call decl com.codec() call decl com.codec() return decl ParamMapper decl List ConsistencyLevel boolean boolean String Param decl Annotation decl Type String Boolean Query int decl Class QueryParameters Boolean public static < < public static < < < if ! throw new decl_stmt java.util.List < = new < for : decl_stmt javax.management.Query = if == continue decl_stmt java.lang.String = call javax.management.Query.value(long) call javax.management.Query.value(long) call javax.management.Query.value(long) call javax.management.Query.value(long) call javax.management.Query.value(long) decl_stmt java.text.Annotation = decl_stmt sun.tools.java.Type = decl_stmt ParamMapper = new decl_stmt java.lang.Boolean = for = < ++ decl_stmt java.lang.String = decl_stmt java.lang.Class < extends extends extends < = for : if decl_stmt Param = = call Param.value() call Param.value() call Param.value() call Param.value() call Param.value() if call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() = = call Param.codec() call Param.codec() call Param.codec() call Param.codec() call Param.codec() if = break decl_stmt boolean = != if == = else if != throw new = decl_stmt ConsistencyLevel = decl_stmt int = - decl_stmt boolean = decl_stmt java.lang.Boolean = decl_stmt QueryParameters = if != = call QueryParameters.consistency() call QueryParameters.consistency() call QueryParameters.consistency() call QueryParameters.consistency() call QueryParameters.consistency() : call QueryParameters.consistency() call QueryParameters.consistency() call QueryParameters.consistency() call QueryParameters.consistency() call QueryParameters.consistency() = call QueryParameters.fetchSize() call QueryParameters.fetchSize() call QueryParameters.fetchSize() call QueryParameters.fetchSize() call QueryParameters.fetchSize() = call QueryParameters.tracing() call QueryParameters.tracing() call QueryParameters.tracing() call QueryParameters.tracing() call QueryParameters.tracing() if call QueryParameters.idempotent() call QueryParameters.idempotent() call QueryParameters.idempotent() call QueryParameters.idempotent() call QueryParameters.idempotent() > throw new = call QueryParameters.idempotent() call QueryParameters.idempotent() call QueryParameters.idempotent() call QueryParameters.idempotent() call QueryParameters.idempotent() == : call QueryParameters.idempotent() call QueryParameters.idempotent() call QueryParameters.idempotent() call QueryParameters.idempotent() call QueryParameters.idempotent() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return decl Class private static private static < extends extends extends < if instanceof decl_stmt java.lang.Class < = < if return new else if instanceof for < : return new else throw new