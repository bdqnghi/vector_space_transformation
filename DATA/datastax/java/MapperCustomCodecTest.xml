com.datastax.driver.mapping com.datastax.driver.core.* import com.datastax.driver.core.exceptions.InvalidTypeException import com.datastax.driver.core.utils.CassandraVersion import com.datastax.driver.mapping.annotations.* import com.google.common.base.Optional import com.google.common.base.Predicate import com.google.common.collect.ImmutableMap import com.google.common.reflect.TypeParameter import com.google.common.reflect.TypeToken import org.testng.annotations.Test import java.nio.ByteBuffer import java.util.Collection import java.util.Map import static static org.assertj.core.api.Assertions.assertThat import static static org.assertj.core.api.Assertions.fail import class annotation annotation com.datastax.driver.mapping.MapperCustomCodecTest super super extends public public public public return new new decl Mapper Row Data1 Data1 = public = public decl_stmt com.datastax.driver.mapping.Mapper < = new decl_stmt Data1 = call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() new call Data1.getI() call Data1.getI() call Data1.getI() call Data1.getI() call Data1.getI() new call Data1.getL() call Data1.getL() call Data1.getL() call Data1.getL() call Data1.getL() new decl_stmt Data1 = new call Data1.setI() call Data1.setI() call Data1.setI() call Data1.setI() call Data1.setI() new call Data1.setL() call Data1.setL() call Data1.setL() call Data1.setL() call Data1.setL() new call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() decl_stmt com.datastax.driver.core.Row = call Row.getInt() call Row.getInt() call Row.getInt() call Row.getInt() call Row.getInt() call Row.getLong() call Row.getLong() call Row.getLong() call Row.getLong() call Row.getLong() call decl Mapper.delete() call decl Mapper.delete() call decl Mapper.delete() call decl Mapper.delete() call decl Mapper.delete() new = Data1 Data1Accessor Row = public = public decl_stmt com.datastax.driver.mapping.Data1Accessor = new decl_stmt Data1 = call com.datastax.driver.mapping.Data1Accessor.get(CustomInt) call com.datastax.driver.mapping.Data1Accessor.get(CustomInt) call com.datastax.driver.mapping.Data1Accessor.get(CustomInt) call com.datastax.driver.mapping.Data1Accessor.get(CustomInt) call com.datastax.driver.mapping.Data1Accessor.get(CustomInt) new call Data1.getI() call Data1.getI() call Data1.getI() call Data1.getI() call Data1.getI() new call Data1.getL() call Data1.getL() call Data1.getL() call Data1.getL() call Data1.getL() new call Data1Accessor.setL() call Data1Accessor.setL() call Data1Accessor.setL() call Data1Accessor.setL() call Data1Accessor.setL() new decl_stmt com.datastax.driver.core.Row = call Row.getLong() call Row.getLong() call Row.getLong() call Row.getLong() call Row.getLong() call Data1Accessor.setL() call Data1Accessor.setL() call Data1Accessor.setL() call Data1Accessor.setL() call Data1Accessor.setL() new decl Mapper Data2 Row Data2 = public = public decl_stmt com.datastax.driver.mapping.Mapper < = new decl_stmt Data2 = call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call Data2.getData() call Data2.getData() call Data2.getData() call Data2.getData() call Data2.getData() new call Data2.getData() call Data2.getData() call Data2.getData() call Data2.getData() call Data2.getData() new decl_stmt Data2 = new call Data2.setI() call Data2.setI() call Data2.setI() call Data2.setI() call Data2.setI() call Data2.setData() call Data2.setData() call Data2.setData() call Data2.setData() call Data2.setData() new call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() decl_stmt com.datastax.driver.core.Row = call Row.getUDTValue() call Row.getUDTValue() call Row.getUDTValue() call Row.getUDTValue() call Row.getUDTValue() call Row.getUDTValue() call Row.getUDTValue() call Row.getUDTValue() call Row.getUDTValue() call Row.getUDTValue() call decl Mapper.delete() call decl Mapper.delete() call decl Mapper.delete() call decl Mapper.delete() call decl Mapper.delete() decl Mapper decl Map Data3 Data3 Row = public = public decl_stmt com.datastax.driver.mapping.Mapper < = new decl_stmt Data3 = call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call Data3.getData() call Data3.getData() call Data3.getData() call Data3.getData() call Data3.getData() new call Data3.getData() call Data3.getData() call Data3.getData() call Data3.getData() call Data3.getData() new new decl_stmt Data3 = new call Data3.setI() call Data3.setI() call Data3.setI() call Data3.setI() call Data3.setI() call Data3.setData() call Data3.setData() call Data3.setData() call Data3.setData() call Data3.setData() new new call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() decl_stmt com.datastax.driver.core.Row = decl_stmt java.util.Map < = call Row.getMap() call Row.getMap() call Row.getMap() call Row.getMap() call Row.getMap() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Mapper.delete() call decl Mapper.delete() call decl Mapper.delete() call decl Mapper.delete() call decl Mapper.delete() = = public = = public new decl Mapper Data1InvalidCodecTypeMapping = = public = = public decl_stmt com.datastax.driver.mapping.Mapper < = new try call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() catch decl_stmt Data1InvalidCodecTypeMapping = new call Data1InvalidCodecTypeMapping.setI() call Data1InvalidCodecTypeMapping.setI() call Data1InvalidCodecTypeMapping.setI() call Data1InvalidCodecTypeMapping.setI() call Data1InvalidCodecTypeMapping.setI() call Data1InvalidCodecTypeMapping.setL() call Data1InvalidCodecTypeMapping.setL() call Data1InvalidCodecTypeMapping.setL() call Data1InvalidCodecTypeMapping.setL() call Data1InvalidCodecTypeMapping.setL() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() = = public = = public new Data1AccessorInvalidCodecTypeMapping = = public = = public decl_stmt Data1AccessorInvalidCodecTypeMapping = new try call Data1AccessorInvalidCodecTypeMapping.get() call Data1AccessorInvalidCodecTypeMapping.get() call Data1AccessorInvalidCodecTypeMapping.get() call Data1AccessorInvalidCodecTypeMapping.get() call Data1AccessorInvalidCodecTypeMapping.get() catch call Data1AccessorInvalidCodecTypeMapping.setL() call Data1AccessorInvalidCodecTypeMapping.setL() call Data1AccessorInvalidCodecTypeMapping.setL() call Data1AccessorInvalidCodecTypeMapping.setL() call Data1AccessorInvalidCodecTypeMapping.setL() decl Mapper Data1ParameterizedType Data1ParameterizedType Data1ParameterizedType Data1ParameterizedType Row = public = public decl_stmt com.datastax.driver.mapping.Mapper < = new decl_stmt Data1ParameterizedType = call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call Data1ParameterizedType.getL() call Data1ParameterizedType.getL() call Data1ParameterizedType.getL() call Data1ParameterizedType.getL() call Data1ParameterizedType.getL() decl_stmt Data1ParameterizedType = new call Data1ParameterizedType.setI() call Data1ParameterizedType.setI() call Data1ParameterizedType.setI() call Data1ParameterizedType.setI() call Data1ParameterizedType.setI() call Data1ParameterizedType.setL() call Data1ParameterizedType.setL() call Data1ParameterizedType.setL() call Data1ParameterizedType.setL() call Data1ParameterizedType.setL() > call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() decl_stmt Data1ParameterizedType = call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call Data1ParameterizedType.getL() call Data1ParameterizedType.getL() call Data1ParameterizedType.getL() call Data1ParameterizedType.getL() call Data1ParameterizedType.getL() > decl_stmt com.datastax.driver.core.Row = call Row.getObject() call Row.getObject() call Row.getObject() call Row.getObject() call Row.getObject() call Row.getLong() call Row.getLong() call Row.getLong() call Row.getLong() call Row.getLong() call Row.get() call Row.get() call Row.get() call Row.get() call Row.get() new > decl_stmt Data1ParameterizedType = new call Data1ParameterizedType.setI() call Data1ParameterizedType.setI() call Data1ParameterizedType.setI() call Data1ParameterizedType.setI() call Data1ParameterizedType.setI() call Data1ParameterizedType.setL() call Data1ParameterizedType.setL() call Data1ParameterizedType.setL() call Data1ParameterizedType.setL() call Data1ParameterizedType.setL() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() = call Row.getObject() call Row.getObject() call Row.getObject() call Row.getObject() call Row.getObject() call Row.getLong() call Row.getLong() call Row.getLong() call Row.getLong() call Row.getLong() call Row.get() call Row.get() call Row.get() call Row.get() call Row.get() new public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public < public < return public public < = public public return public public = public < public < return public public < = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public < public < return public public < = CustomInt public public if instanceof decl_stmt CustomInt = return == return public public return public public throws return Integer public public throws decl_stmt java.lang.Integer = return new public public throws throw new public public throws throw new CustomLong public public if instanceof decl_stmt CustomLong = return == return public public return ^ >>> public public throws return Long public public throws decl_stmt java.lang.Long = return new public public throws throw new public public throws throw new public public return == || instanceof && || instanceof && protected < protected < return > : protected protected < return : protected protected return protected protected return public public throws return public public throws return public public throws return public public throws return