com.datastax.driver.examples.datatypes com.datastax.driver.core.* import com.datastax.driver.core.utils.Bytes import com.google.common.collect.ImmutableMap import java.io.* import java.nio.ByteBuffer import java.nio.channels.FileChannel import java.util.Map import class com.datastax.driver.examples.datatypes.Blobs decl String int File Cluster Session public static public static throws decl_stmt com.datastax.driver.core.Cluster = try = decl_stmt com.datastax.driver.core.Session = call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() call com.datastax.driver.core.Cluster.connect() finally if != call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() call com.datastax.driver.core.Cluster.close() private static private static + ByteBuffer private static private static decl_stmt ByteBuffer = while call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() byte assert call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() - call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() == call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() assert call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() - call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() == ByteBuffer decl byte byte Row private static private static decl_stmt com.datastax.driver.core.Row = decl_stmt ByteBuffer = call Row.getBytes() call Row.getBytes() call Row.getBytes() call Row.getBytes() call Row.getBytes() assert call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() - call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() == for = call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() < call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() ++ decl_stmt byte = call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() assert == byte while call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() decl_stmt byte = call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() assert == byte assert call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() == call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() decl_stmt byte = assert == for : assert == byte ByteBuffer decl Map Row private static private static decl_stmt com.datastax.driver.core.Row = decl_stmt java.util.Map < = call Row.getMap() call Row.getMap() call Row.getMap() call Row.getMap() call Row.getMap() decl_stmt ByteBuffer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() assert call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() - call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() == assert call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() == assert call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() == PreparedStatement ByteBuffer int BoundStatement Row ByteBuffer private static private static decl_stmt com.datastax.driver.core.PreparedStatement = decl_stmt ByteBuffer = decl_stmt com.datastax.driver.core.BoundStatement = call com.datastax.driver.core.PreparedStatement.bind() call com.datastax.driver.core.PreparedStatement.bind() call com.datastax.driver.core.PreparedStatement.bind() call com.datastax.driver.core.PreparedStatement.bind() call com.datastax.driver.core.PreparedStatement.bind() call com.datastax.driver.core.BoundStatement.setBytes(String,ByteBuffer) call com.datastax.driver.core.BoundStatement.setBytes(String,ByteBuffer) call com.datastax.driver.core.BoundStatement.setBytes(String,ByteBuffer) call com.datastax.driver.core.BoundStatement.setBytes(String,ByteBuffer) call com.datastax.driver.core.BoundStatement.setBytes(String,ByteBuffer) call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() decl_stmt com.datastax.driver.core.Row = assert call Row.getBytes() call Row.getBytes() call Row.getBytes() call Row.getBytes() call Row.getBytes() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() byte = assert call Row.getBytes() call Row.getBytes() call Row.getBytes() call Row.getBytes() call Row.getBytes() decl_stmt int = call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() decl_stmt ByteBuffer = call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() - call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call com.datastax.driver.core.BoundStatement.setBytes(String,ByteBuffer) call com.datastax.driver.core.BoundStatement.setBytes(String,ByteBuffer) call com.datastax.driver.core.BoundStatement.setBytes(String,ByteBuffer) call com.datastax.driver.core.BoundStatement.setBytes(String,ByteBuffer) call com.datastax.driver.core.BoundStatement.setBytes(String,ByteBuffer) ByteBuffer File Row private static private static throws decl_stmt ByteBuffer = decl_stmt File = call File.getAbsoluteFile() call File.getAbsoluteFile() call File.getAbsoluteFile() call File.getAbsoluteFile() call File.getAbsoluteFile() decl_stmt com.datastax.driver.core.Row = call Row.getBytes() call Row.getBytes() call Row.getBytes() call Row.getBytes() call Row.getBytes() ByteBuffer boolean FileChannel FileInputStream private static private static throws decl_stmt FileInputStream = decl_stmt boolean = try = new decl_stmt java.nio.channels.FileChannel = call FileInputStream.getChannel() call FileInputStream.getChannel() call FileInputStream.getChannel() call FileInputStream.getChannel() call FileInputStream.getChannel() decl_stmt ByteBuffer = int call FileChannel.size() call FileChannel.size() call FileChannel.size() call FileChannel.size() call FileChannel.size() call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() return catch = throw finally FileOutputStream FileChannel boolean private static private static throws decl_stmt java.io.FileOutputStream = decl_stmt boolean = try = new decl_stmt java.nio.channels.FileChannel = call java.io.FileOutputStream.getChannel() call java.io.FileOutputStream.getChannel() call java.io.FileOutputStream.getChannel() call java.io.FileOutputStream.getChannel() call java.io.FileOutputStream.getChannel() call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) catch = throw finally private static private static throws if != try catch if ! throw