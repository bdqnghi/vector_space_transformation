com.datastax.driver.core.policies com.datastax.driver.core.* import com.datastax.driver.core.exceptions.* import com.google.common.annotations.VisibleForTesting import com.google.common.collect.AbstractIterator import com.google.common.collect.ImmutableMap import com.google.common.collect.ImmutableSet import com.google.common.util.concurrent.ThreadFactoryBuilder import org.slf4j.Logger import org.slf4j.LoggerFactory import java.util.* import java.util.concurrent.* import java.util.concurrent.atomic.AtomicReference import class com.datastax.driver.core.policies.LatencyAwarePolicy super super implements long long double Tracker LoadBalancingPolicy ScheduledExecutorService decl Set Logger long public public return public static public static return new Host decl Snapshot decl Set double public public try call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Tracker.updateMin() call Tracker.updateMin() call Tracker.updateMin() call Tracker.updateMin() call Tracker.updateMin() if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() decl_stmt java.util.Set < = new < decl_stmt double = call Tracker.getMinAverage() call Tracker.getMinAverage() call Tracker.getMinAverage() call Tracker.getMinAverage() call Tracker.getMinAverage() for < : decl_stmt com.datastax.driver.core.Host = decl_stmt Stats = if call decl Snapshot.getMeasurementsCount() call decl Snapshot.getMeasurementsCount() call decl Snapshot.getMeasurementsCount() call decl Snapshot.getMeasurementsCount() call decl Snapshot.getMeasurementsCount() < continue if call decl Snapshot.lastUpdatedSince() call decl Snapshot.lastUpdatedSince() call decl Snapshot.lastUpdatedSince() call decl Snapshot.lastUpdatedSince() call decl Snapshot.lastUpdatedSince() > if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call decl Snapshot.lastUpdatedSince() call decl Snapshot.lastUpdatedSince() call decl Snapshot.lastUpdatedSince() call decl Snapshot.lastUpdatedSince() call decl Snapshot.lastUpdatedSince() continue if call decl Snapshot.getLatencyScore() call decl Snapshot.getLatencyScore() call decl Snapshot.getLatencyScore() call decl Snapshot.getLatencyScore() call decl Snapshot.getLatencyScore() > * call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if ! call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call decl Snapshot.getLatencyScore() call decl Snapshot.getLatencyScore() call decl Snapshot.getLatencyScore() call decl Snapshot.getLatencyScore() call decl Snapshot.getLatencyScore() continue if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() = catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() private static private static return double / * private static private static return / * private static private static return new public public < call LoadBalancingPolicy.init() call LoadBalancingPolicy.init() call LoadBalancingPolicy.init() call LoadBalancingPolicy.init() call LoadBalancingPolicy.init() public public return call com.datastax.driver.core.policies.LoadBalancingPolicy.distance(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.distance(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.distance(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.distance(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.distance(Host) decl Iterator decl Queue TimestampedAverage long Host long public < public < decl_stmt java.util.Iterator final final final < = call com.datastax.driver.core.policies.LoadBalancingPolicy.newQueryPlan(String,Statement) call com.datastax.driver.core.policies.LoadBalancingPolicy.newQueryPlan(String,Statement) call com.datastax.driver.core.policies.LoadBalancingPolicy.newQueryPlan(String,Statement) call com.datastax.driver.core.policies.LoadBalancingPolicy.newQueryPlan(String,Statement) call com.datastax.driver.core.policies.LoadBalancingPolicy.newQueryPlan(String,Statement) return new < decl_stmt java.util.Queue private < protected protected decl_stmt long = call Tracker.getMinAverage() call Tracker.getMinAverage() call Tracker.getMinAverage() call Tracker.getMinAverage() call Tracker.getMinAverage() decl_stmt long = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt com.datastax.driver.core.Host = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt TimestampedAverage = call Tracker.latencyOf() call Tracker.latencyOf() call Tracker.latencyOf() call Tracker.latencyOf() call Tracker.latencyOf() if < || == || < || || - || || - || || - || || - || || - return if <= * double return if == = new < call decl Queue.offer() call decl Queue.offer() call decl Queue.offer() call decl Queue.offer() call decl Queue.offer() if != && ! call decl Queue.isEmpty() call decl Queue.isEmpty() call decl Queue.isEmpty() call decl Queue.isEmpty() call decl Queue.isEmpty() return call decl Queue.poll() call decl Queue.poll() call decl Queue.poll() call decl Queue.poll() call decl Queue.poll() return TimestampedAverage Host long long protected protected decl_stmt long = call Tracker.getMinAverage() call Tracker.getMinAverage() call Tracker.getMinAverage() call Tracker.getMinAverage() call Tracker.getMinAverage() decl_stmt long = while decl_stmt com.datastax.driver.core.Host = decl_stmt TimestampedAverage = call Tracker.latencyOf() call Tracker.latencyOf() call Tracker.latencyOf() call Tracker.latencyOf() call Tracker.latencyOf() if < || == || < || || - || || - || || - || || - || || - return if <= * double return if == = new < if != && ! return return TimestampedAverage decl Snapshot decl Map decl ImmutableMap Host long public public decl_stmt java.util.Map < = call Tracker.currentLatencies() call Tracker.currentLatencies() call Tracker.currentLatencies() call Tracker.currentLatencies() call Tracker.currentLatencies() decl_stmt ImmutableMap < = decl_stmt long = for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt com.datastax.driver.core.Host = decl_stmt TimestampedAverage = decl_stmt Stats = new - call decl ImmutableMap.put() call decl ImmutableMap.put() call decl ImmutableMap.put() call decl ImmutableMap.put() call decl ImmutableMap.put() return new call decl ImmutableMap.build() call decl ImmutableMap.build() call decl ImmutableMap.build() call decl ImmutableMap.build() call decl ImmutableMap.build() public public call com.datastax.driver.core.policies.LoadBalancingPolicy.onUp(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onUp(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onUp(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onUp(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onUp(Host) public public call com.datastax.driver.core.policies.LoadBalancingPolicy.onDown(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onDown(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onDown(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onDown(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onDown(Host) call Tracker.resetHost() call Tracker.resetHost() call Tracker.resetHost() call Tracker.resetHost() call Tracker.resetHost() public public call com.datastax.driver.core.policies.LoadBalancingPolicy.onAdd(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onAdd(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onAdd(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onAdd(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onAdd(Host) public public call com.datastax.driver.core.policies.LoadBalancingPolicy.onRemove(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onRemove(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onRemove(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onRemove(Host) call com.datastax.driver.core.policies.LoadBalancingPolicy.onRemove(Host) call Tracker.resetHost() call Tracker.resetHost() call Tracker.resetHost() call Tracker.resetHost() call Tracker.resetHost() public < public < return public public return public public return public public return public public return HostLatencyTracker HostLatencyTracker public public if decl_stmt HostLatencyTracker = if == = new * / decl_stmt HostLatencyTracker = if != = call HostLatencyTracker.add() call HostLatencyTracker.add() call HostLatencyTracker.add() call HostLatencyTracker.add() call HostLatencyTracker.add() private private if == return if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return return long TimestampedAverage long public public decl_stmt long = decl_stmt long = for : decl_stmt TimestampedAverage = if != && >= && >= && - <= = if != = public public return HostLatencyTracker public public decl_stmt HostLatencyTracker = return == : call HostLatencyTracker.getCurrentAverage() call HostLatencyTracker.getCurrentAverage() call HostLatencyTracker.getCurrentAverage() call HostLatencyTracker.getCurrentAverage() call HostLatencyTracker.getCurrentAverage() decl Map public < public < decl_stmt java.util.Map < = new < for < : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return public public public public public public TimestampedAverage public public decl_stmt TimestampedAverage do = = != && ! double long long long double long private private decl_stmt long = decl_stmt long = == : + if < return new - if == || < return new decl_stmt long = - if <= return decl_stmt double = double / decl_stmt double = + / decl_stmt long = - * + * return new public public return public public if < throw new = return public public if <= throw new = return public public if < throw new = return public public if <= throw new = return public public if < throw new = return public public return new public public call com.datastax.driver.core.policies.LoadBalancingPolicy.close() call com.datastax.driver.core.policies.LoadBalancingPolicy.close() call com.datastax.driver.core.policies.LoadBalancingPolicy.close() call com.datastax.driver.core.policies.LoadBalancingPolicy.close() call com.datastax.driver.core.policies.LoadBalancingPolicy.close() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown()