com.datastax.driver.core com.datastax.driver.core.exceptions.NoHostAvailableException import com.datastax.driver.core.policies.ConstantReconnectionPolicy import com.datastax.driver.core.policies.ExponentialReconnectionPolicy import com.datastax.driver.core.policies.ReconnectionPolicy import org.testng.annotations.Test import static static com.datastax.driver.core.CreateCCM.TestMode.PER_METHOD import static static org.testng.Assert.assertTrue import static static org.testng.Assert.fail import class annotation annotation annotation com.datastax.driver.core.ReconnectionPolicyTest super super extends private private return new * * * private private return new * long long decl ReconnectionPolicy decl ReconnectionSchedule ExponentialReconnectionPolicy = = public = = public throws if ! instanceof decl_stmt com.datastax.driver.core.policies.ExponentialReconnectionPolicy = call com.datastax.driver.core.policies.ExponentialReconnectionPolicy.getBaseDelayMs() call com.datastax.driver.core.policies.ExponentialReconnectionPolicy.getBaseDelayMs() call com.datastax.driver.core.policies.ExponentialReconnectionPolicy.getBaseDelayMs() call com.datastax.driver.core.policies.ExponentialReconnectionPolicy.getBaseDelayMs() call com.datastax.driver.core.policies.ExponentialReconnectionPolicy.getBaseDelayMs() == * call ExponentialReconnectionPolicy.getMaxDelayMs() call ExponentialReconnectionPolicy.getMaxDelayMs() call ExponentialReconnectionPolicy.getMaxDelayMs() call ExponentialReconnectionPolicy.getMaxDelayMs() call ExponentialReconnectionPolicy.getMaxDelayMs() == * * try new - catch try new - catch try new - - catch try new catch decl_stmt ReconnectionSchedule = new * * * call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() == call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() == call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() == call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() == call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() == for = < ++ call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() == call ExponentialReconnectionPolicy.getMaxDelayMs() call ExponentialReconnectionPolicy.getMaxDelayMs() call ExponentialReconnectionPolicy.getMaxDelayMs() call ExponentialReconnectionPolicy.getMaxDelayMs() call ExponentialReconnectionPolicy.getMaxDelayMs() decl_stmt long = + + + decl_stmt long = decl_stmt long = long long decl ReconnectionPolicy decl ReconnectionSchedule ConstantReconnectionPolicy = = public = = public throws if ! instanceof decl_stmt com.datastax.driver.core.policies.ConstantReconnectionPolicy = call com.datastax.driver.core.policies.ConstantReconnectionPolicy.getConstantDelayMs() call com.datastax.driver.core.policies.ConstantReconnectionPolicy.getConstantDelayMs() call com.datastax.driver.core.policies.ConstantReconnectionPolicy.getConstantDelayMs() call com.datastax.driver.core.policies.ConstantReconnectionPolicy.getConstantDelayMs() call com.datastax.driver.core.policies.ConstantReconnectionPolicy.getConstantDelayMs() == * try new - catch decl_stmt ReconnectionSchedule = new * call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() == call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() == call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() == call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() == call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() call decl ReconnectionPolicy.nextDelayMs() == decl_stmt long = decl_stmt long = decl_stmt long = boolean long long public public throws + decl_stmt long = try = / catch decl_stmt long decl_stmt boolean = while = / if ! && - > = try + - < - && - < + - catch continue + = try = / catch = while = / if ! && - > = try + - < - && - < + - catch continue break break