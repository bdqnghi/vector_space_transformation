com.datastax.driver.core.policies com.datastax.driver.core.* import com.google.common.collect.AbstractIterator import org.slf4j.Logger import org.slf4j.LoggerFactory import java.util.Collection import java.util.Iterator import java.util.List import java.util.Random import java.util.concurrent.CopyOnWriteArrayList import java.util.concurrent.atomic.AtomicInteger import class com.datastax.driver.core.policies.RoundRobinPolicy super super implements AtomicInteger Logger Configuration boolean decl CopyOnWriteArrayList public public < = new public public return int int int ConsistencyLevel decl List int public < public < if ! decl_stmt ConsistencyLevel = == call com.datastax.driver.core.Configuration.getQueryOptions() call com.datastax.driver.core.Configuration.getQueryOptions() call com.datastax.driver.core.Configuration.getQueryOptions() call com.datastax.driver.core.Configuration.getQueryOptions() call com.datastax.driver.core.Configuration.getQueryOptions() : if call ConsistencyLevel.isDCLocal() call ConsistencyLevel.isDCLocal() call ConsistencyLevel.isDCLocal() call ConsistencyLevel.isDCLocal() call ConsistencyLevel.isDCLocal() = call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + decl_stmt java.util.List final final final < = < call decl CopyOnWriteArrayList.clone() call decl CopyOnWriteArrayList.clone() call decl CopyOnWriteArrayList.clone() call decl CopyOnWriteArrayList.clone() call decl CopyOnWriteArrayList.clone() decl_stmt int final final = call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() if > - call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) return new < decl_stmt int private = decl_stmt int private = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() protected protected if <= return -- decl_stmt int = ++ call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if < += call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() int protected protected if <= return -- decl_stmt int = ++ if < += return public public call decl CopyOnWriteArrayList.addIfAbsent() call decl CopyOnWriteArrayList.addIfAbsent() call decl CopyOnWriteArrayList.addIfAbsent() call decl CopyOnWriteArrayList.addIfAbsent() call decl CopyOnWriteArrayList.addIfAbsent() public public call decl CopyOnWriteArrayList.remove() call decl CopyOnWriteArrayList.remove() call decl CopyOnWriteArrayList.remove() call decl CopyOnWriteArrayList.remove() call decl CopyOnWriteArrayList.remove() public public public public public public