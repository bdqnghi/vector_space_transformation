com.datastax.driver.core com.datastax.driver.core.utils.Bytes import com.google.common.annotations.VisibleForTesting import com.google.common.collect.Lists import com.google.common.primitives.UnsignedBytes import java.math.BigInteger import java.nio.ByteBuffer import java.security.MessageDigest import java.security.NoSuchAlgorithmException import java.util.List import class com.datastax.driver.core.Token super super implements static static if return else if return else if return else return decl BigInteger BigInteger decl List BigInteger BigInteger int protected < protected < decl_stmt java.math.BigInteger = decl_stmt java.math.BigInteger = decl_stmt int = decl_stmt java.util.List < = - decl_stmt java.math.BigInteger = decl_stmt java.math.BigInteger = == : call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) for = < ++ = call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) -- > : if != && call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) > = call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return int int private private decl_stmt int = << decl_stmt int = + return long + & + long + & << + long + & << + long + & << + long + & << + long + & << + long + & << + long + & << private private return << | >>> - private private ^= >>> *= ^= >>> *= ^= >>> return long long long long int int long long int private private decl_stmt int = decl_stmt int = decl_stmt int = >> decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt long = for = < ++ decl_stmt long = * + decl_stmt long = * + *= = *= ^= = += = * + *= = *= ^= = += = * + += * decl_stmt long = decl_stmt long = switch & case ^= long + << case ^= long + << case ^= long + << case ^= long + << case ^= long + << case ^= long + << case ^= long + << *= = *= ^= case ^= long + << case ^= long + << case ^= long + << case ^= long + << case ^= long + << case ^= long + << case ^= long + << case ^= long *= = *= ^= ^= ^= += += = = += += return return new return return new return long decl_stmt long = return new == : decl List BigInteger BigInteger decl List BigInteger < < if && = decl_stmt java.math.BigInteger = decl_stmt java.math.BigInteger = decl_stmt java.math.BigInteger = call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) if call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) < = call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) decl_stmt java.util.List < = decl_stmt java.util.List < = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return public public return public public return public public return long public public assert instanceof decl_stmt long = return < - : == : public public if == return if == || != return return == public public return ^ >>> public public return String ByteBuffer public public if ! decl_stmt java.lang.String = == : = + decl_stmt ByteBuffer = return new return return new return return new decl List BigInteger int BigInteger OPPToken int decl List int int OPPToken < < decl_stmt int = if == && throw new decl_stmt OPPToken = decl_stmt OPPToken = decl_stmt int decl_stmt java.math.BigInteger decl_stmt java.math.BigInteger = if < = call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() decl_stmt int = while = = = call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) if == || call int.compareTo() call int.compareTo() call int.compareTo() call int.compareTo() call int.compareTo() >= break += += = = else = call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() call OPPToken.value() decl_stmt int = while = = = * = call decl List.subtract() call decl List.subtract() call decl List.subtract() call decl List.subtract() call decl List.subtract() = call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) if == || call int.compareTo() call int.compareTo() call int.compareTo() call int.compareTo() call int.compareTo() >= break += += decl_stmt java.util.List < = decl_stmt java.util.List < = for : new return decl byte decl byte private private decl_stmt byte = decl_stmt byte if != = new else = return new int decl byte decl byte protected protected decl_stmt byte = decl_stmt byte if == = else = new decl_stmt int if == = = - else = = - return byte int private static private static decl_stmt byte = decl_stmt int = for = - > -- if == = else break return public public return public public return public public return public public assert instanceof return public public if == return if == || != return return public public return public public return MessageDigest private private try decl_stmt java.security.MessageDigest = call java.security.MessageDigest.update(byte,int,int) call java.security.MessageDigest.update(byte,int,int) call java.security.MessageDigest.update(byte,int,int) call java.security.MessageDigest.update(byte,int,int) call java.security.MessageDigest.update(byte,int,int) return new call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.digest(byte) catch throw new return new new return return new return return new decl List BigInteger BigInteger decl List BigInteger < < if && = decl_stmt java.math.BigInteger = decl_stmt java.math.BigInteger = decl_stmt java.math.BigInteger = call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) if call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) < = call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) decl_stmt java.util.List < = decl_stmt java.util.List < = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return public public return public public return public public return public public assert instanceof return public public if == return if == || != return return public public return public public return