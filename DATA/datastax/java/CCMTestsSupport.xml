com.datastax.driver.core com.datastax.driver.core.CCMAccess.Workload import com.datastax.driver.core.CreateCCM.TestMode import com.datastax.driver.core.exceptions.InvalidQueryException import com.google.common.base.Throwables import com.google.common.collect.ImmutableMap import com.google.common.collect.Lists import com.google.common.io.Closer import com.google.common.util.concurrent.Uninterruptibles import org.slf4j.Logger import org.slf4j.LoggerFactory import org.testng.ITestResult import org.testng.annotations.* import java.io.Closeable import java.io.File import java.io.IOException import java.lang.annotation.Annotation import java.lang.reflect.Constructor import java.lang.reflect.Method import java.lang.reflect.Modifier import java.net.InetAddress import java.net.InetSocketAddress import java.net.UnknownHostException import java.util.* import java.util.concurrent.Callable import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import static static com.datastax.driver.core.CreateCCM.TestMode.PER_CLASS import static static com.datastax.driver.core.CreateCCM.TestMode.PER_METHOD import static static com.datastax.driver.core.TestUtils.* import static static org.assertj.core.api.Assertions.fail import class annotation com.datastax.driver.core.CCMTestsSupport Session CCMTestConfig Cluster AtomicInteger decl Map decl List boolean TestMode Closer decl CCMBridge CCMAccess Logger String decl Builder public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public public public return public public throw new public public throw new public public throw new public public throw new public public throw new public public throw new public public throw new public public throw new public public throw new public public throw new public public throw new public public throw new public public < throw new public public < throw new public public throw new public public < throw new public public throw new public public < throw new public public throw new public public throw new public public throw new public public return private private for : if != && > return return new private private for : if != && ! return return private private for : if != && > return return private private for : if != && > return return private private for : if != && > return return CCMConfig decl Map private < private < decl_stmt java.util.Map < = new < for = - >= -- decl_stmt CCMConfig = call CCMConfig.config() call CCMConfig.config() call CCMConfig.config() call CCMConfig.config() call CCMConfig.config() return CCMConfig decl Map private < private < decl_stmt java.util.Map < = new < for = - >= -- decl_stmt CCMConfig = call CCMConfig.dseConfig() call CCMConfig.dseConfig() call CCMConfig.dseConfig() call CCMConfig.dseConfig() call CCMConfig.dseConfig() return VersionNumber VersionNumber String decl String String String private private < decl_stmt java.lang.String = decl_stmt com.datastax.driver.core.VersionNumber = call TestMode.parse() call TestMode.parse() call TestMode.parse() call TestMode.parse() call TestMode.parse() != : for : decl_stmt java.lang.String = if != + decl_stmt java.lang.String = decl_stmt java.lang.String = if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() decl_stmt com.datastax.driver.core.VersionNumber = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call com.datastax.driver.core.VersionNumber.compareTo(VersionNumber) call com.datastax.driver.core.VersionNumber.compareTo(VersionNumber) call com.datastax.driver.core.VersionNumber.compareTo(VersionNumber) call com.datastax.driver.core.VersionNumber.compareTo(VersionNumber) call com.datastax.driver.core.VersionNumber.compareTo(VersionNumber) < call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + continue CCMConfig decl Set private < private < decl_stmt java.util.Set < = new < for = - >= -- decl_stmt CCMConfig = call CCMConfig.jvmArgs() call CCMConfig.jvmArgs() call CCMConfig.jvmArgs() call CCMConfig.jvmArgs() call CCMConfig.jvmArgs() return CCMConfig decl Set private < private < decl_stmt java.util.Set < = new < for = - >= -- decl_stmt CCMConfig = call CCMConfig.options() call CCMConfig.options() call CCMConfig.options() call CCMConfig.options() call CCMConfig.options() return decl CCMWorkload CCMConfig int decl List CCMWorkload private < private < decl_stmt int = for : += decl_stmt java.util.List < = new < > for = - >= -- decl_stmt CCMConfig = decl_stmt CCMWorkload = call CCMConfig.workloads() call CCMConfig.workloads() call CCMConfig.workloads() call CCMConfig.workloads() call CCMConfig.workloads() for = < ++ decl_stmt CCMWorkload = call decl List.set() call decl List.set() call decl List.set() call decl List.set() call decl List.set() call CCMWorkload.value() call CCMWorkload.value() call CCMWorkload.value() call CCMWorkload.value() call CCMWorkload.value() return private private for : if != && > return return private private for : if != && > return return private private for : if != && > return return private private for : if != && > return return private private for : if != && > return return decl Workload decl List private private throws if == = if == = if != call String.withVersion() call String.withVersion() call String.withVersion() call String.withVersion() call String.withVersion() if call String.withDSE() call String.withDSE() call String.withDSE() call String.withDSE() call String.withDSE() if call String.withSSL() call String.withSSL() call String.withSSL() call String.withSSL() call String.withSSL() if call String.withAuth() call String.withAuth() call String.withAuth() call String.withAuth() call String.withAuth() for < : call String.withCassandraConfiguration() call String.withCassandraConfiguration() call String.withCassandraConfiguration() call String.withCassandraConfiguration() call String.withCassandraConfiguration() for < : call String.withDSEConfiguration() call String.withDSEConfiguration() call String.withDSEConfiguration() call String.withDSEConfiguration() call String.withDSEConfiguration() for : call String.withCreateOptions() call String.withCreateOptions() call String.withCreateOptions() call String.withCreateOptions() call String.withCreateOptions() for : call String.withJvmArgs() call String.withJvmArgs() call String.withJvmArgs() call String.withJvmArgs() call String.withJvmArgs() decl_stmt java.util.List < = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt Workload = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if != call String.withWorkload() call String.withWorkload() call String.withWorkload() call String.withWorkload() call String.withWorkload() + return CCMConfig Object String Method decl Class private private throws decl_stmt java.lang.String = decl_stmt java.lang.Class < = for = - >= -- decl_stmt CCMConfig = if ! call CCMConfig.ccmProvider() call CCMConfig.ccmProvider() call CCMConfig.ccmProvider() call CCMConfig.ccmProvider() call CCMConfig.ccmProvider() = call CCMConfig.ccmProvider() call CCMConfig.ccmProvider() call CCMConfig.ccmProvider() call CCMConfig.ccmProvider() call CCMConfig.ccmProvider() if ! call CCMConfig.ccmProviderClass() call CCMConfig.ccmProviderClass() call CCMConfig.ccmProviderClass() call CCMConfig.ccmProviderClass() call CCMConfig.ccmProviderClass() = call CCMConfig.ccmProviderClass() call CCMConfig.ccmProviderClass() call CCMConfig.ccmProviderClass() call CCMConfig.ccmProviderClass() call CCMConfig.ccmProviderClass() if == return if == = decl_stmt com.sun.jdi.Method = assert call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() if call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() return call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) else decl_stmt java.lang.Object = : return call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) CCMConfig Object String Method decl Class private private throws decl_stmt java.lang.String = decl_stmt java.lang.Class < = for = - >= -- decl_stmt CCMConfig = if ! call CCMConfig.clusterProvider() call CCMConfig.clusterProvider() call CCMConfig.clusterProvider() call CCMConfig.clusterProvider() call CCMConfig.clusterProvider() = call CCMConfig.clusterProvider() call CCMConfig.clusterProvider() call CCMConfig.clusterProvider() call CCMConfig.clusterProvider() call CCMConfig.clusterProvider() if ! call CCMConfig.clusterProviderClass() call CCMConfig.clusterProviderClass() call CCMConfig.clusterProviderClass() call CCMConfig.clusterProviderClass() call CCMConfig.clusterProviderClass() = call CCMConfig.clusterProviderClass() call CCMConfig.clusterProviderClass() call CCMConfig.clusterProviderClass() call CCMConfig.clusterProviderClass() call CCMConfig.clusterProviderClass() if == = if == = decl_stmt com.sun.jdi.Method = assert call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() call com.sun.jdi.Method.getReturnType() if call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() return call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) else decl_stmt java.lang.Object = : return call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) CCMConfig Object String Method decl Class private private throws decl_stmt java.lang.String = decl_stmt java.lang.Class < = for = - >= -- decl_stmt CCMConfig = if ! call CCMConfig.testInitializer() call CCMConfig.testInitializer() call CCMConfig.testInitializer() call CCMConfig.testInitializer() call CCMConfig.testInitializer() = call CCMConfig.testInitializer() call CCMConfig.testInitializer() call CCMConfig.testInitializer() call CCMConfig.testInitializer() call CCMConfig.testInitializer() if ! call CCMConfig.testInitializerClass() call CCMConfig.testInitializerClass() call CCMConfig.testInitializerClass() call CCMConfig.testInitializerClass() call CCMConfig.testInitializerClass() = call CCMConfig.testInitializerClass() call CCMConfig.testInitializerClass() call CCMConfig.testInitializerClass() call CCMConfig.testInitializerClass() call CCMConfig.testInitializerClass() if == = if == = decl_stmt com.sun.jdi.Method = if call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.getModifiers() call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) else decl_stmt java.lang.Object = : call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) = public = public throws public public throws = if == = try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() = public = public throws public public throws if if == = if == || try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() assert != assert ! call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() || != = = public = = public throws if if == if || == if == = = public = = public throws if == public public return new public public return public public public public return public public return public public return public public public public < assert != for : try call Closer.execute() call Closer.execute() call Closer.execute() call Closer.execute() call Closer.execute() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + public public = if != call Session.setKeepLogs() call Session.setKeepLogs() call Session.setKeepLogs() call Session.setKeepLogs() call Session.setKeepLogs() int decl List decl int int public < public < assert != decl_stmt java.util.List < = new < decl_stmt int = decl_stmt int = call Cluster.numberOfNodes() call Cluster.numberOfNodes() call Cluster.numberOfNodes() call Cluster.numberOfNodes() call Cluster.numberOfNodes() for = <= ++ decl_stmt int = - for = < ++ try call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch ++ return int decl List decl int int public < public < assert != decl_stmt java.util.List < = new < decl_stmt int = decl_stmt int = call Cluster.numberOfNodes() call Cluster.numberOfNodes() call Cluster.numberOfNodes() call Cluster.numberOfNodes() call Cluster.numberOfNodes() for = <= ++ decl_stmt int = - for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call Session.getBinaryPort() call Session.getBinaryPort() call Session.getBinaryPort() call Session.getBinaryPort() call Session.getBinaryPort() ++ return public < extends extends public < extends extends return public public int public public decl_stmt int final final = for = <= ++ try call Closer.execute() call Closer.execute() call Closer.execute() call Closer.execute() call Closer.execute() + catch if == throw call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() CCMAccess protected protected throws = = assert != if call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() = call Cluster.ccmBuilder() call Cluster.ccmBuilder() call Cluster.ccmBuilder() call Cluster.ccmBuilder() call Cluster.ccmBuilder() decl_stmt com.datastax.driver.core.CCMAccess = assert != if call Cluster.dirtiesContext() call Cluster.dirtiesContext() call Cluster.dirtiesContext() call Cluster.dirtiesContext() call Cluster.dirtiesContext() = else = new try call com.datastax.driver.core.CCMAccess.start(int) call com.datastax.driver.core.CCMAccess.start(int) call com.datastax.driver.core.CCMAccess.start(int) call com.datastax.driver.core.CCMAccess.start(int) call com.datastax.driver.core.CCMAccess.start(int) catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() decl Cluster protected protected throws if call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() && call Cluster.createCluster() call Cluster.createCluster() call Cluster.createCluster() call Cluster.createCluster() call Cluster.createCluster() decl_stmt com.datastax.driver.stress.Builder = call Cluster.clusterProvider() call Cluster.clusterProvider() call Cluster.clusterProvider() call Cluster.clusterProvider() call Cluster.clusterProvider() if call decl Cluster.getContactPoints() call decl Cluster.getContactPoints() call decl Cluster.getContactPoints() call decl Cluster.getContactPoints() call decl Cluster.getContactPoints() call decl Cluster.addContactPoints() call decl Cluster.addContactPoints() call decl Cluster.addContactPoints() call decl Cluster.addContactPoints() call decl Cluster.addContactPoints() call decl Cluster.withPort() call decl Cluster.withPort() call decl Cluster.withPort() call decl Cluster.withPort() call decl Cluster.withPort() call Session.getBinaryPort() call Session.getBinaryPort() call Session.getBinaryPort() call Session.getBinaryPort() call Session.getBinaryPort() = call decl Cluster.build() call decl Cluster.build() call decl Cluster.build() call decl Cluster.build() call decl Cluster.build() call boolean.init() call boolean.init() call boolean.init() call boolean.init() call boolean.init() protected protected throws if call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() && call Cluster.createCluster() call Cluster.createCluster() call Cluster.createCluster() call Cluster.createCluster() call Cluster.createCluster() && call Cluster.createSession() call Cluster.createSession() call Cluster.createSession() call Cluster.createSession() call Cluster.createSession() = call boolean.connect() call boolean.connect() call boolean.connect() call boolean.connect() call boolean.connect() protected protected if call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() call Cluster.createCcm() && call Cluster.createCluster() call Cluster.createCluster() call Cluster.createCluster() call Cluster.createCluster() call Cluster.createCluster() && call Cluster.createSession() call Cluster.createSession() call Cluster.createSession() call Cluster.createSession() call Cluster.createSession() && call Cluster.createKeyspace() call Cluster.createKeyspace() call Cluster.createKeyspace() call Cluster.createKeyspace() call Cluster.createKeyspace() try = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + call Closer.execute() call Closer.execute() call Closer.execute() call Closer.execute() call Closer.execute() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() protected protected throws call Cluster.invokeInitTest() call Cluster.invokeInitTest() call Cluster.invokeInitTest() call Cluster.invokeInitTest() call Cluster.invokeInitTest() protected protected throws if != && != && != if call Cluster.dirtiesContext() call Cluster.dirtiesContext() call Cluster.dirtiesContext() call Cluster.dirtiesContext() call Cluster.dirtiesContext() call com.datastax.driver.core.Session.close() call com.datastax.driver.core.Session.close() call com.datastax.driver.core.Session.close() call com.datastax.driver.core.Session.close() call com.datastax.driver.core.Session.close() else = = = protected protected if != && ! call boolean.isClosed() call boolean.isClosed() call boolean.isClosed() call boolean.isClosed() call boolean.isClosed() new public public call boolean.close() call boolean.close() call boolean.close() call boolean.close() call boolean.close() = = = public public call boolean.close() call boolean.close() call boolean.close() call boolean.close() call boolean.close() protected protected if != new < public public throws return public public throws return Test private static private static decl_stmt Test = return ! call Test.groups() call Test.groups() call Test.groups() call Test.groups() call Test.groups() CCMConfig decl ArrayList private static private static throws decl_stmt java.util.ArrayList < = new < decl_stmt CCMConfig = if != call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return new decl List private static private static < decl_stmt java.util.List < = new < if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return private static < extends extends private static < extends extends < extends extends if == return return A private static < extends extends < private static < extends extends < < < extends extends < decl_stmt A = if != = if == return return Method private static private static < throws try decl_stmt com.sun.jdi.Method = call Method.setAccessible() call Method.setAccessible() call Method.setAccessible() call Method.setAccessible() call Method.setAccessible() return catch = if == throw return decl Class Object decl Constructor private static < private static < < extends extends throws if == || decl_stmt java.lang.reflect.Constructor < = call decl Constructor.setAccessible() call decl Constructor.setAccessible() call decl Constructor.setAccessible() call decl Constructor.setAccessible() call decl Constructor.setAccessible() return call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() else decl_stmt java.lang.Class < = decl_stmt java.lang.Object = call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() decl_stmt java.lang.reflect.Constructor < = call decl Constructor.setAccessible() call decl Constructor.setAccessible() call decl Constructor.setAccessible() call decl Constructor.setAccessible() call decl Constructor.setAccessible() return call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance()