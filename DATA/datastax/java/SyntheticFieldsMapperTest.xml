com.datastax.driver.mapping com.datastax.driver.core.CCMTestsSupport import com.datastax.driver.mapping.annotations.PartitionKey import com.datastax.driver.mapping.annotations.Table import com.google.common.io.Closeables import org.objectweb.asm.* import org.testng.annotations.Test import java.io.IOException import java.io.InputStream import java.lang.reflect.Constructor import static static org.testng.Assert.assertEquals import class annotation com.datastax.driver.mapping.SyntheticFieldsMapperTest super super extends public public Object decl Mapper decl Class = public = public decl_stmt java.lang.Class < = decl_stmt java.lang.Object = decl_stmt com.datastax.driver.mapping.Mapper < = < new call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.save() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() call decl Mapper.get() decl Class InputStream decl byte ClassReader ClassWriter ClassVisitor String private < private < decl_stmt java.io.InputStream = try decl_stmt java.lang.Class < = decl_stmt java.lang.String = call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + = call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() decl_stmt com.sun.java.util.jar.pack.ClassWriter = new decl_stmt ClassVisitor = new decl_stmt ClassReader = new call ClassReader.accept() call ClassReader.accept() call ClassReader.accept() call ClassReader.accept() call ClassReader.accept() decl_stmt byte = call ClassWriter.toByteArray() call ClassWriter.toByteArray() call ClassWriter.toByteArray() call ClassWriter.toByteArray() call ClassWriter.toByteArray() return new catch throw new finally try catch decl Constructor private private < try decl_stmt java.lang.reflect.Constructor < = return call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch throw new public public return public public = ClassWithSyntheticField public public if == return if == || != return decl_stmt ClassWithSyntheticField = return == public public return int public public decl_stmt int = if = + return public public return