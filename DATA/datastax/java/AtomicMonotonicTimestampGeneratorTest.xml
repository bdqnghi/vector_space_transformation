com.datastax.driver.core com.google.common.collect.Lists import com.google.common.util.concurrent.Futures import com.google.common.util.concurrent.ListenableFuture import com.google.common.util.concurrent.ListeningExecutorService import com.google.common.util.concurrent.MoreExecutors import org.apache.log4j.Level import org.apache.log4j.Logger import org.testng.annotations.Test import java.util.List import java.util.SortedSet import java.util.concurrent.ConcurrentSkipListSet import java.util.concurrent.ExecutionException import java.util.concurrent.Executors import java.util.concurrent.TimeUnit import static static org.testng.Assert.assertEquals import static static org.testng.Assert.fail import class com.datastax.driver.core.AtomicMonotonicTimestampGeneratorTest long int AtomicMonotonicTimestampGenerator Level decl List int ListeningExecutorService Long Logger Throwable MemoryAppender decl SortedSet = public = public throws decl_stmt long final final = decl_stmt com.datastax.driver.core.AtomicMonotonicTimestampGenerator final final = new = new decl_stmt com.datastax.driver.core.MemoryAppender = new decl_stmt java.util.logging.Logger = decl_stmt java.util.logging.Level = call java.util.logging.Logger.getLevel() call java.util.logging.Logger.getLevel() call java.util.logging.Logger.getLevel() call java.util.logging.Logger.getLevel() call java.util.logging.Logger.getLevel() call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call Logger.addAppender() call Logger.addAppender() call Logger.addAppender() call Logger.addAppender() call Logger.addAppender() try decl_stmt int final final = decl_stmt java.util.SortedSet final final final < = new < decl_stmt ListeningExecutorService = decl_stmt java.util.List < < = for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call ListeningExecutorService.submit() call ListeningExecutorService.submit() call ListeningExecutorService.submit() call ListeningExecutorService.submit() call ListeningExecutorService.submit() new public public for = < / ++ call decl SortedSet.add() call decl SortedSet.add() call decl SortedSet.add() call decl SortedSet.add() call decl SortedSet.add() call AtomicMonotonicTimestampGenerator.next() call AtomicMonotonicTimestampGenerator.next() call AtomicMonotonicTimestampGenerator.next() call AtomicMonotonicTimestampGenerator.next() call AtomicMonotonicTimestampGenerator.next() call ListeningExecutorService.shutdown() call ListeningExecutorService.shutdown() call ListeningExecutorService.shutdown() call ListeningExecutorService.shutdown() call ListeningExecutorService.shutdown() call ListeningExecutorService.awaitTermination() call ListeningExecutorService.awaitTermination() call ListeningExecutorService.awaitTermination() call ListeningExecutorService.awaitTermination() call ListeningExecutorService.awaitTermination() try catch decl_stmt java.lang.Throwable = if instanceof throw else decl_stmt int = for : decl_stmt java.lang.Long = + += finally call Logger.removeAppender() call Logger.removeAppender() call Logger.removeAppender() call Logger.removeAppender() call Logger.removeAppender() call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) call java.util.logging.Logger.setLevel(Level) public public for = < / ++