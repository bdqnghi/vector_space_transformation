Cassandra.Tests.Mapping System using System.Collections.Generic using System.Linq using System.Text using System.Threading.Tasks using Cassandra.Mapping using Cassandra.Tasks using Cassandra.Tests.Mapping.Pocos using Cassandra.Tests.Mapping.TestData using Moq using NUnit.Framework using class attribute Cassandra.Tests.Mapping.BatchTests super super MappingTestBase var private private < < < = if == = decl_stmt var = new < call var.Setup() call var.Setup() call var.Setup() call var.Setup() call var.Setup() < call var.Setup() call var.Setup() call var.Setup() call var.Setup() call var.Setup() < return var var BatchStatement var public public decl_stmt var = new = = = = = == = = = = < = < ? = < = < decl_stmt Cassandra.BatchStatement = decl_stmt var = new = decl_stmt var = call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Execute() call var.Execute() call var.Execute() call var.Execute() call var.Execute() var var int Guid ICqlBatch Guid var public public decl_stmt int const const = decl_stmt var = new = = = = = == = = = = < = < ? = < = < decl_stmt Guid = decl_stmt Guid = decl_stmt var = new decl_stmt Cassandra.Mapping.ICqlBatch = call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() < < decl_stmt var = call ICqlBatch.Statements() call ICqlBatch.Statements() call ICqlBatch.Statements() call ICqlBatch.Statements() call ICqlBatch.Statements() call ICqlBatch.Statements() call ICqlBatch.Statements() call ICqlBatch.Statements() call ICqlBatch.Statements() + + + call var.Execute() call var.Execute() call var.Execute() call var.Execute() call var.Execute() var var var BatchStatement var public public decl_stmt Cassandra.BatchStatement = decl_stmt var = new = decl_stmt var = call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() new = = call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() new = call var.Execute() call var.Execute() call var.Execute() call var.Execute() call var.Execute() decl_stmt var = call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() decl_stmt var = call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() var var int var BatchStatement var public public decl_stmt Cassandra.BatchStatement = decl_stmt var = new = decl_stmt var = call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() new = = decl_stmt int const const = call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() new = call var.Execute() call var.Execute() call var.Execute() call var.Execute() call var.Execute() decl_stmt var = call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() decl_stmt var = call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() call var.Statements() var var var public public decl_stmt var = new decl_stmt var = call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() < < decl_stmt var = < var var var var public public decl_stmt var = new new decl_stmt var = decl_stmt var = call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.InsertIfNotExists() call var.InsertIfNotExists() call var.InsertIfNotExists() call var.InsertIfNotExists() call var.InsertIfNotExists() new call var.InsertIfNotExists() call var.InsertIfNotExists() call var.InsertIfNotExists() call var.InsertIfNotExists() call var.InsertIfNotExists() new decl_stmt var = < var var var var var public public decl_stmt var = decl_stmt var = new new decl_stmt var = decl_stmt var = call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() < call var.Insert() call var.Insert() call var.Insert() call var.Insert() call var.Insert() new decl_stmt var = < var var ICqlBatch public public decl_stmt var = new = = = = = == = = = = < = < ? = < = < decl_stmt var = new decl_stmt Cassandra.Mapping.ICqlBatch = call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call var.ExecuteAsync() call var.ExecuteAsync() call var.ExecuteAsync() call var.ExecuteAsync() call var.ExecuteAsync() var var int Guid ICqlBatch Guid public public decl_stmt int const const = decl_stmt var = new = = = = = == = = = = < = < ? = < = < decl_stmt Guid = decl_stmt Guid = decl_stmt var = new decl_stmt Cassandra.Mapping.ICqlBatch = call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call var.CreateBatch() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() call ICqlBatch.Insert() < < call var.ExecuteAsync() call var.ExecuteAsync() call var.ExecuteAsync() call var.ExecuteAsync() call var.ExecuteAsync()