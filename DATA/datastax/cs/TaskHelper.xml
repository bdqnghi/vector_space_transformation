Cassandra.Tasks System.Reflection using class Cassandra.Tasks.TaskHelper MethodInfo decl Action decl Task return var public static < public static < public static < < this this this < if == if != return decl_stmt var = new < if call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() else if call var.TrySetCanceled() call var.TrySetCanceled() call var.TrySetCanceled() call var.TrySetCanceled() call var.TrySetCanceled() else call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() if != return var public static < public static < public static < < decl_stmt var = new < call var.SetException() call var.SetException() call var.SetException() call var.SetException() call var.SetException() return public static public static public static < < = return public static public static = try catch = if == throw throw if != throw new public static public static public static < this this this < if != else private static private static return public static < public static < public static < < this this this < < < if ! return return TaskContinuationOptions var public static < public static < public static < < this this this < < decl_stmt TaskContinuationOptions const const = decl_stmt var = new < if return return var var private static < private static < private static < < < < < decl_stmt var = new < try decl_stmt var = call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() catch call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() return private static private static private static < < < < try if && != return if return catch TaskContinuationOptions var public static < public static < public static < < this this this < < < decl_stmt TaskContinuationOptions const const = decl_stmt var = new < if return return private static private static private static < < < < < if && != return if return try if && != return if return try catch catch private static private static private static < < var public static < public static < public static < < decl_stmt var = new < call var.SetResult() call var.SetResult() call var.SetResult() call var.SetResult() call var.SetResult() return TimerCallback var Timer public static < public static < public static < < < decl_stmt var = new < decl_stmt System.Threading.Tasks.Dataflow.Internal.Threading.Timer = decl_stmt TimerCallback = call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) try call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() catch catch call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() = new call var.Task() call var.Task() call var.Task() call var.Task() call var.Task() call var.Task() call var.Task() call var.Task() call var.Task() call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) return var var public static < public static < public static < < < decl_stmt var = new < decl_stmt var = < try call var.SetResult() call var.SetResult() call var.SetResult() call var.SetResult() call var.SetResult() catch call var.SetException() call var.SetException() call var.SetException() call var.SetException() call var.SetException() return