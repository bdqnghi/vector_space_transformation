Cassandra System using System.Collections.Generic using System.Threading using class Cassandra.RetryLoadBalancingPolicy super super ILoadBalancingPolicy ILoadBalancingPolicy decl EventHandler IReconnectionPolicy public public call Cassandra.ILoadBalancingPolicy.Initialize(ICluster) call Cassandra.ILoadBalancingPolicy.Initialize(ICluster) call Cassandra.ILoadBalancingPolicy.Initialize(ICluster) call Cassandra.ILoadBalancingPolicy.Initialize(ICluster) call Cassandra.ILoadBalancingPolicy.Initialize(ICluster) public public return call ILoadBalancingPolicy.Distance() call ILoadBalancingPolicy.Distance() call ILoadBalancingPolicy.Distance() call ILoadBalancingPolicy.Distance() call ILoadBalancingPolicy.Distance() var decl IEnumerable IReconnectionSchedule public < public < decl_stmt IReconnectionSchedule = call IReconnectionPolicy.NewSchedule() call IReconnectionPolicy.NewSchedule() call IReconnectionPolicy.NewSchedule() call IReconnectionPolicy.NewSchedule() call IReconnectionPolicy.NewSchedule() while decl_stmt System.Collections.Generic.IEnumerable < = call Cassandra.ILoadBalancingPolicy.NewQueryPlan(string,IStatement) call Cassandra.ILoadBalancingPolicy.NewQueryPlan(string,IStatement) call Cassandra.ILoadBalancingPolicy.NewQueryPlan(string,IStatement) call Cassandra.ILoadBalancingPolicy.NewQueryPlan(string,IStatement) call Cassandra.ILoadBalancingPolicy.NewQueryPlan(string,IStatement) foreach in yield if != decl_stmt var = new call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() if break else int call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs()