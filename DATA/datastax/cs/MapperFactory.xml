Cassandra.Mapping System using System.Collections.Concurrent using System.Collections.Generic using System.Linq using System.Linq.Expressions using System.Reflection using Cassandra.Mapping.TypeConversion using class Cassandra.Mapping.MapperFactory BindingFlags decl ConcurrentDictionary PocoDataFactory TypeConverter MethodInfo MethodInfo decl ConcurrentDictionary Type Type Type return return decl Tuple Delegate public < public < public < < decl_stmt System.Tuple < = typeof decl_stmt System.Delegate = call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() < return < Delegate decl Tuple public < public < public < < = = decl_stmt System.Tuple < = typeof decl_stmt System.Delegate = call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() < return < var private < private < private < < decl_stmt var = < if == && ! && ! call var.Columns() call var.Columns() call var.Columns() call var.Columns() call var.Columns() call var.Columns() call var.Columns() call var.Columns() call var.Columns() return < return < public public public < return < var PocoData ParameterExpression PocoColumn var var Expression var decl IList private < private < private < < decl_stmt Cassandra.Mapping.PocoData = < decl_stmt var = new < decl_stmt Microsoft.Scripting.Ast.ParameterExpression = decl_stmt System.Collections.Generic.IList < = if = call Cassandra.Mapping.PocoData.GetPrimaryKeyColumns() call Cassandra.Mapping.PocoData.GetPrimaryKeyColumns() call Cassandra.Mapping.PocoData.GetPrimaryKeyColumns() call Cassandra.Mapping.PocoData.GetPrimaryKeyColumns() call Cassandra.Mapping.PocoData.GetPrimaryKeyColumns() if decl_stmt var = call Cassandra.Mapping.PocoData.GetPrimaryKeyColumns() call Cassandra.Mapping.PocoData.GetPrimaryKeyColumns() call Cassandra.Mapping.PocoData.GetPrimaryKeyColumns() call Cassandra.Mapping.PocoData.GetPrimaryKeyColumns() call Cassandra.Mapping.PocoData.GetPrimaryKeyColumns() = call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() decl_stmt var = typeof call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() for = < ++ decl_stmt Cassandra.Mapping.PocoColumn = decl_stmt Microsoft.Scripting.Ast.Expression = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() decl_stmt var = new return < < CqlColumn Expression ParameterExpression private < private < private < < decl_stmt Microsoft.Scripting.Ast.ParameterExpression = decl_stmt CqlColumn = decl_stmt Microsoft.Scripting.Ast.Expression = return < < BlockExpression var BinaryExpression var var var var Expression var var PocoColumn var Expression var var Expression ParameterExpression private < private < private < < decl_stmt var = new < decl_stmt Microsoft.Scripting.Ast.ParameterExpression = decl_stmt var = if != call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() else decl_stmt var = call var.GetParameters() call var.GetParameters() call var.GetParameters() call var.GetParameters() call var.GetParameters() == if == throw new decl_stmt var = call var.GetParameters() call var.GetParameters() call var.GetParameters() call var.GetParameters() call var.GetParameters() decl_stmt var = new < for = < ++ decl_stmt var = decl_stmt var = decl_stmt var = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() decl_stmt var = new < foreach in decl_stmt Cassandra.Mapping.PocoColumn if out == continue decl_stmt Microsoft.Scripting.Ast.Expression = decl_stmt Microsoft.Scripting.Ast.BinaryExpression = decl_stmt Microsoft.Scripting.Ast.Expression = decl_stmt Microsoft.Scripting.Ast.Expression if out = decl_stmt var = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() decl_stmt Microsoft.Scripting.Ast.BlockExpression = return < < Delegate Expression private private decl_stmt Microsoft.Scripting.Ast.Expression = if == return decl_stmt System.Delegate = call Cassandra.Mapping.TypeConversion.TypeConverter.GetToDbConverter(Type,Type) call Cassandra.Mapping.TypeConversion.TypeConverter.GetToDbConverter(Type,Type) call Cassandra.Mapping.TypeConversion.TypeConverter.GetToDbConverter(Type,Type) call Cassandra.Mapping.TypeConversion.TypeConverter.GetToDbConverter(Type,Type) call Cassandra.Mapping.TypeConversion.TypeConverter.GetToDbConverter(Type,Type) if == return return == : var public public if == return decl_stmt var = call Cassandra.Mapping.TypeConversion.TypeConverter.GetToDbConverter(Type,Type) call Cassandra.Mapping.TypeConversion.TypeConverter.GetToDbConverter(Type,Type) call Cassandra.Mapping.TypeConversion.TypeConverter.GetToDbConverter(Type,Type) call Cassandra.Mapping.TypeConversion.TypeConverter.GetToDbConverter(Type,Type) call Cassandra.Mapping.TypeConversion.TypeConverter.GetToDbConverter(Type,Type) if == return return call var.DynamicInvoke() call var.DynamicInvoke() call var.DynamicInvoke() call var.DynamicInvoke() call var.DynamicInvoke() Delegate MethodCallExpression Expression ConstantExpression var Expression private private decl_stmt Microsoft.Scripting.Ast.ConstantExpression = decl_stmt Microsoft.Scripting.Ast.MethodCallExpression = call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) if == return decl_stmt Microsoft.Scripting.Ast.Expression decl_stmt System.Delegate = call TypeConverter.GetFromDbConverter() call TypeConverter.GetFromDbConverter() call TypeConverter.GetFromDbConverter() call TypeConverter.GetFromDbConverter() call TypeConverter.GetFromDbConverter() if == try = catch decl_stmt var = throw new else = == : decl_stmt Microsoft.Scripting.Ast.Expression if ! out = return Type Type Type Type private static private static out out = if == return if == if = return if try = return catch return else if == return decl_stmt System.Type = if == typeof <,> decl_stmt System.Type = typeof <,> = return if == typeof <> decl_stmt System.Type = typeof <> = return if == typeof <> || == typeof <> || == typeof <> decl_stmt System.Type = typeof <> = return return private static private static return == || == || == private static private static return && == typeof <> !=