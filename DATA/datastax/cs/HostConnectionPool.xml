Cassandra System using System.Collections.Generic using System.Linq using System.Threading using System.Threading.Tasks using Cassandra.Collections using Cassandra.Serialization using Cassandra.Tasks using class Cassandra.HostConnectionPool super super IDisposable Serializer int Configuration bool decl TaskCompletionSource HashedWheelTimer decl Connection int decl ITimeout decl HashedWheelTimer int HostDistance Host Logger decl CopyOnWriteList bool return var public < public < return if == return decl_stmt var = ref return var var var public static public static ref ref if == return decl_stmt var = ref if > ref decl_stmt var = decl_stmt var = - if < return return var internal virtual < internal virtual < call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) + decl_stmt var = new return call var.Open() call var.Open() call var.Open() call var.Open() call var.Open() if == if call Cassandra.Configuration.GetPoolingOptions(byte) call Cassandra.Configuration.GetPoolingOptions(byte) call Cassandra.Configuration.GetPoolingOptions(byte) call Cassandra.Configuration.GetPoolingOptions(byte) call Cassandra.Configuration.GetPoolingOptions(byte) > += return call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() if != call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) throw throw new private private call Cassandra.Host.SetDown(bool) call Cassandra.Host.SetDown(bool) call Cassandra.Host.SetDown(bool) call Cassandra.Host.SetDown(bool) call Cassandra.Host.SetDown(bool) var internal internal if ! call Cassandra.Host.SetAttemptingReconnection() call Cassandra.Host.SetAttemptingReconnection() call Cassandra.Host.SetAttemptingReconnection() call Cassandra.Host.SetAttemptingReconnection() call Cassandra.Host.SetAttemptingReconnection() return decl_stmt var = call Cassandra.Tasks.HashedWheelTimer.NewTimeout(Action,object,long) call Cassandra.Tasks.HashedWheelTimer.NewTimeout(Action,object,long) call Cassandra.Tasks.HashedWheelTimer.NewTimeout(Action,object,long) call Cassandra.Tasks.HashedWheelTimer.NewTimeout(Action,object,long) call Cassandra.Tasks.HashedWheelTimer.NewTimeout(Action,object,long) var var internal internal = if return decl_stmt var = new < decl_stmt var = ref if != || > return call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) if == if return call decl CopyOnWriteList.Add() call decl CopyOnWriteList.Add() call decl CopyOnWriteList.Add() call decl CopyOnWriteList.Add() call decl CopyOnWriteList.Add() call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Host.BringUpIfDown() call Cassandra.Host.BringUpIfDown() call Cassandra.Host.BringUpIfDown() call Cassandra.Host.BringUpIfDown() call Cassandra.Host.BringUpIfDown() new return