Microsoft.IO Cassandra.Collections using System using System.IO using System.Collections.Generic using class Microsoft.IO.RecyclableMemoryStream super super MemoryStream decl List decl List RecyclableMemoryStreamManager bool long int string string decl byte int decl byte Guid string return return return return return string = protected override = protected override if decl_stmt string = if = return if = if = else if return if != if != foreach in public override public override if != return if > return * return return return if < throw new if > throw new + = int return ! return ! return return ! var public override public override if != return if == return decl_stmt var = = if > && return var public override public override decl_stmt var = new return int public override public override if == throw new if < throw new if < throw new if + > throw new decl_stmt int = += return int long int decl byte int var long int int public override public override if == throw new if < throw new if < throw new if + > throw new decl_stmt int = decl_stmt long = long + if > throw new decl_stmt long = + - / if * > throw new int if == decl_stmt int = decl_stmt int = decl_stmt var = while > decl_stmt byte = decl_stmt int = - decl_stmt int = + -= += ++ = else = int = public override public override return public override public override = var byte public override public override if == return - decl_stmt byte = if == decl_stmt var = = else = ++ return public override public override if < || || throw new + int = int if > = int int public override public override if > throw new + decl_stmt int switch case = int break case = int + break case = int + break default: throw new if < throw new = return int int int public override public override if == throw new if == decl_stmt int = decl_stmt int = while > decl_stmt int = -= ++ else private private if throw new int var int int private private if - <= return if == decl_stmt var = decl_stmt int = decl_stmt int = - while > decl_stmt int = - + += -= ++ = return else decl_stmt int = - return var private private decl_stmt var = return new / var private private if > && > throw new + + + if != if > decl_stmt var = = else while < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() private private if else if == = new < = var var var var var var public < < public < < if != return new < < new new < if == return new < < new new < decl_stmt var = decl_stmt var = if == - && == -- decl_stmt var = new < decl_stmt var = for = < ++ decl_stmt var = decl_stmt var = = new < -= return new < <