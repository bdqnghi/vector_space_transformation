Cassandra.Mapping.TypeConversion System using System.Collections.Concurrent using System.Collections.Generic using System.Linq using System.Linq.Expressions using System.Reflection using class Cassandra.Mapping.TypeConversion.TypeConverter BindingFlags BindingFlags MethodInfo decl ConcurrentDictionary MethodInfo MethodInfo decl ConcurrentDictionary MethodInfo MethodInfo MethodInfo var internal internal internal < decl_stmt var = < typeof typeof if == throw new typeof typeof return internal internal return call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) internal internal return call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call decl ConcurrentDictionary.GetOrAdd() call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) decl Func Delegate Type Type decl Type decl Func var Type private private private < decl_stmt System.Delegate = < if != return decl_stmt System.Type = typeof decl_stmt System.Type = typeof if == typeof string if decl_stmt Func < = < < return decl_stmt var = if != && decl_stmt Func < = < < return if == typeof if == typeof decl_stmt Func < = return if == typeof decl_stmt Func < ? = return if && || decl_stmt System.Type = call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() decl_stmt System.Type = call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() if == typeof <,> && == typeof <,> return call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) if == typeof <> if == typeof <> return call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) if == typeof <> || == typeof <> return call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) if == typeof <> || == typeof <> return call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) call System.Reflection.MethodInfo.MakeGenericMethod(Type) return Type decl Func Delegate Type Type private private private < decl_stmt System.Delegate = < if != return decl_stmt System.Type = typeof decl_stmt System.Type = typeof if == typeof string if decl_stmt Func < = return decl_stmt System.Type = if != && decl_stmt Func < = < < return return private static < private static < private static < < < return new < private static < private static < private static < < < return new < private static < private static < private static < < < return new < private static < private static < private static < < < return new <