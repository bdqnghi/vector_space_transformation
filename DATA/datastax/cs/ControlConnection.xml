Cassandra System using System.Linq using System.Collections.Generic using System.Net using System.Threading using System.Net.Sockets using System.Threading.Tasks using Cassandra.Tasks using Cassandra.Requests using Cassandra.Responses using Cassandra.Serialization using class Cassandra.ControlConnection super super IMetadataQueryProvider super IDisposable Connection Serializer Configuration string Logger IReconnectionPolicy int IPAddress Metadata Host Timer string decl Task int IReconnectionSchedule CassandraEventType int return return = if == return return return public public var internal internal call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) decl_stmt var = * * try call Cassandra.Metadata.RefreshKeyspaces(bool) call Cassandra.Metadata.RefreshKeyspaces(bool) call Cassandra.Metadata.RefreshKeyspaces(bool) call Cassandra.Metadata.RefreshKeyspaces(bool) call Cassandra.Metadata.RefreshKeyspaces(bool) catch call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) decl IEnumerable private < private < decl_stmt System.Collections.Generic.IEnumerable < = if ! call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) = call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() call Configuration.Policies() return call decl IEnumerable.GetEnumerator() call decl IEnumerable.GetEnumerator() call decl IEnumerable.GetEnumerator() call decl IEnumerable.GetEnumerator() call decl IEnumerable.GetEnumerator() new < var var var var var private < private < < < decl_stmt var = if ! return < new decl_stmt var = decl_stmt var = new return call var.Open() call var.Open() call var.Open() call var.Open() call var.Open() if == = = call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) return if && != decl_stmt var = if is decl_stmt var = call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() if < throw new return call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() return throw new var var var internal < internal < decl_stmt var = new < decl_stmt var = ref if != return if ref > if != return if != ref call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() decl_stmt var = call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) + try call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) catch return try call Cassandra.Metadata.RefreshKeyspaces(bool) call Cassandra.Metadata.RefreshKeyspaces(bool) call Cassandra.Metadata.RefreshKeyspaces(bool) call Cassandra.Metadata.RefreshKeyspaces(bool) call Cassandra.Metadata.RefreshKeyspaces(bool) = call IReconnectionPolicy.NewSchedule() call IReconnectionPolicy.NewSchedule() call IReconnectionPolicy.NewSchedule() call IReconnectionPolicy.NewSchedule() call IReconnectionPolicy.NewSchedule() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() ref call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) catch ref call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() try call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() call IReconnectionSchedule.NextDelayMs() catch return var internal internal if ref != ref return decl_stmt var = try call Cassandra.Metadata.RefreshKeyspaces(bool) call Cassandra.Metadata.RefreshKeyspaces(bool) call Cassandra.Metadata.RefreshKeyspaces(bool) call Cassandra.Metadata.RefreshKeyspaces(bool) call Cassandra.Metadata.RefreshKeyspaces(bool) = call IReconnectionPolicy.NewSchedule() call IReconnectionPolicy.NewSchedule() call IReconnectionPolicy.NewSchedule() call IReconnectionPolicy.NewSchedule() call IReconnectionPolicy.NewSchedule() catch call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) = catch call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) finally ref if var public public if ref != return decl_stmt var = if != call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) var private private += += decl_stmt var = call Connection.Send() call Connection.Send() call Connection.Send() call Connection.Send() call Connection.Send() new if ! is throw new + call var.Result() call var.Result() call var.Result() call var.Result() call var.Result() call var.Result() call var.Result() call var.Result() call var.Result() var var private private decl_stmt var = decl_stmt var = if != -= if != -= private private -= call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) var var var var private private if is decl_stmt var = if == || == return if is decl_stmt var = decl_stmt var = call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call var.What() call var.What() call var.What() call var.What() call var.What() call var.What() call var.What() call var.What() call var.What() if == call Cassandra.Metadata.BringUpHost(IPEndPoint,object) call Cassandra.Metadata.BringUpHost(IPEndPoint,object) call Cassandra.Metadata.BringUpHost(IPEndPoint,object) call Cassandra.Metadata.BringUpHost(IPEndPoint,object) call Cassandra.Metadata.BringUpHost(IPEndPoint,object) return if == call Cassandra.Metadata.SetDownHost(IPEndPoint,object) call Cassandra.Metadata.SetDownHost(IPEndPoint,object) call Cassandra.Metadata.SetDownHost(IPEndPoint,object) call Cassandra.Metadata.SetDownHost(IPEndPoint,object) call Cassandra.Metadata.SetDownHost(IPEndPoint,object) return if is decl_stmt var = if ! call Cassandra.Metadata.RefreshTable(string,string) call Cassandra.Metadata.RefreshTable(string,string) call Cassandra.Metadata.RefreshTable(string,string) call Cassandra.Metadata.RefreshTable(string,string) call Cassandra.Metadata.RefreshTable(string,string) call Cassandra.Metadata.RefreshView(string,string) call Cassandra.Metadata.RefreshView(string,string) call Cassandra.Metadata.RefreshView(string,string) call Cassandra.Metadata.RefreshView(string,string) call Cassandra.Metadata.RefreshView(string,string) return if != call Cassandra.Metadata.ClearFunction(string,string,string) call Cassandra.Metadata.ClearFunction(string,string,string) call Cassandra.Metadata.ClearFunction(string,string,string) call Cassandra.Metadata.ClearFunction(string,string,string) call Cassandra.Metadata.ClearFunction(string,string,string) return if != call Cassandra.Metadata.ClearAggregate(string,string,string) call Cassandra.Metadata.ClearAggregate(string,string,string) call Cassandra.Metadata.ClearAggregate(string,string,string) call Cassandra.Metadata.ClearAggregate(string,string,string) call Cassandra.Metadata.ClearAggregate(string,string,string) return if != return if == call Cassandra.Metadata.RemoveKeyspace(string) call Cassandra.Metadata.RemoveKeyspace(string) call Cassandra.Metadata.RemoveKeyspace(string) call Cassandra.Metadata.RemoveKeyspace(string) call Cassandra.Metadata.RemoveKeyspace(string) return call Cassandra.Metadata.RefreshSingleKeyspace(bool,string) call Cassandra.Metadata.RefreshSingleKeyspace(bool,string) call Cassandra.Metadata.RefreshSingleKeyspace(bool,string) call Cassandra.Metadata.RefreshSingleKeyspace(bool,string) call Cassandra.Metadata.RefreshSingleKeyspace(bool,string) == private private return call Configuration.AddressTranslator() call Configuration.AddressTranslator() call Configuration.AddressTranslator() call Configuration.AddressTranslator() call Configuration.AddressTranslator() call Configuration.AddressTranslator() call Configuration.AddressTranslator() call Configuration.AddressTranslator() call Configuration.AddressTranslator() var var private private call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) decl_stmt var = decl_stmt var = if == call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) return = < call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) var var internal internal decl_stmt var = decl_stmt var = < if != = call var.SetLocationInfo() call var.SetLocationInfo() call var.SetLocationInfo() call var.SetLocationInfo() call var.SetLocationInfo() < < = < < ?? new call Cassandra.Metadata.SetCassandraVersion(Version) call Cassandra.Metadata.SetCassandraVersion(Version) call Cassandra.Metadata.SetCassandraVersion(Version) call Cassandra.Metadata.SetCassandraVersion(Version) call Cassandra.Metadata.SetCassandraVersion(Version) var var var internal internal < decl_stmt var = new < foreach in decl_stmt var = if == call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) continue call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() decl_stmt var = call Cassandra.Metadata.GetHost(IPEndPoint) call Cassandra.Metadata.GetHost(IPEndPoint) call Cassandra.Metadata.GetHost(IPEndPoint) call Cassandra.Metadata.GetHost(IPEndPoint) call Cassandra.Metadata.GetHost(IPEndPoint) if == = call Cassandra.Metadata.AddHost(IPEndPoint) call Cassandra.Metadata.AddHost(IPEndPoint) call Cassandra.Metadata.AddHost(IPEndPoint) call Cassandra.Metadata.AddHost(IPEndPoint) call Cassandra.Metadata.AddHost(IPEndPoint) call var.SetLocationInfo() call var.SetLocationInfo() call var.SetLocationInfo() call var.SetLocationInfo() call var.SetLocationInfo() < < = < < ?? new foreach in call Cassandra.Metadata.AllReplicas() call Cassandra.Metadata.AllReplicas() call Cassandra.Metadata.AllReplicas() call Cassandra.Metadata.AllReplicas() call Cassandra.Metadata.AllReplicas() if ! call var.Equals() call var.Equals() call var.Equals() call var.Equals() call var.Equals() && ! call var.Contains() call var.Contains() call var.Contains() call var.Contains() call var.Contains() call Cassandra.Metadata.RemoveHost(IPEndPoint) call Cassandra.Metadata.RemoveHost(IPEndPoint) call Cassandra.Metadata.RemoveHost(IPEndPoint) call Cassandra.Metadata.RemoveHost(IPEndPoint) call Cassandra.Metadata.RemoveHost(IPEndPoint) var internal static internal static try decl_stmt var = < if != = call var.Split() call var.Split() call var.Split() call var.Split() call var.Split() catch call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) var internal static internal static decl_stmt var = < if == return if call System.Net.IPAddress.Equals(object) call System.Net.IPAddress.Equals(object) call System.Net.IPAddress.Equals(object) call System.Net.IPAddress.Equals(object) call System.Net.IPAddress.Equals(object) && ! = < call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) return new public < public < = return string var var var public < < public < < = decl_stmt var = new decl_stmt var = call Connection.Send() call Connection.Send() call Connection.Send() call Connection.Send() call Connection.Send() if ! return return call var.ContinueWith() call var.ContinueWith() call var.ContinueWith() call var.ContinueWith() call var.ContinueWith() decl_stmt var = != : if is decl_stmt string const const = call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) return return var public static < public static < if == throw new if ! is throw new + decl_stmt var = if ! is throw new + call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() return