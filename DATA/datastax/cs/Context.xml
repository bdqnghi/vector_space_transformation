Cassandra.Data.EntityContext System.Threading.Tasks using Cassandra.Data.Linq using System using System.Collections.Generic using System.Linq using System.Reflection using System.Text using Cassandra using class Cassandra.Data.EntityContext.Context decl Dictionary ISession decl Dictionary decl List string return private private if == return = = public public foreach < in try catch internal static internal static if != return + + return string var public < public < public < < = = where where class decl_stmt string = < < if call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() return new < < decl_stmt var = new < call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() new < return new < string public public public < = = where where class decl_stmt string = < < return call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() string public < public < public < < = = where where class decl_stmt string = < < return new < < var internal internal decl_stmt var = call Cassandra.ISession.Prepare(string) call Cassandra.ISession.Prepare(string) call Cassandra.ISession.Prepare(string) call Cassandra.ISession.Prepare(string) call Cassandra.ISession.Prepare(string) return call Cassandra.ISession.Execute(string) call Cassandra.ISession.Execute(string) call Cassandra.ISession.Execute(string) call Cassandra.ISession.Execute(string) call Cassandra.ISession.Execute(string) call var.Bind() call var.Bind() call var.Bind() call var.Bind() call var.Bind() internal internal return call Cassandra.ISession.EndExecute(IAsyncResult) call Cassandra.ISession.EndExecute(IAsyncResult) call Cassandra.ISession.EndExecute(IAsyncResult) call Cassandra.ISession.EndExecute(IAsyncResult) call Cassandra.ISession.EndExecute(IAsyncResult) string public public decl_stmt string if > return return out string public override public override decl_stmt string out return var var var bool var var var var decl List bool Type private private out out = if == throw new decl_stmt var = new < foreach < in decl_stmt bool = decl_stmt System.Collections.Generic.List < = foreach in decl_stmt System.Type = if typeof as != = break call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() : decl_stmt var = new < if & == decl_stmt bool = decl_stmt var = new foreach < in if == |= foreach in if == call var.AppendLine() call var.AppendLine() call var.AppendLine() call var.AppendLine() call var.AppendLine() + |= else if == call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if != = + + decl_stmt var = new decl_stmt var = call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) decl_stmt var = new = = = return if & == decl_stmt bool = decl_stmt var = new foreach < in if == |= foreach in if == |= call var.AppendLine() call var.AppendLine() call var.AppendLine() call var.AppendLine() call var.AppendLine() + else if == call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if != = + call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() + decl_stmt var = new decl_stmt var = call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) decl_stmt var = new = = = return return var var bool var var var var decl List bool Type private private if == throw new decl_stmt var = new < foreach < in decl_stmt bool = decl_stmt System.Collections.Generic.List < = foreach in decl_stmt System.Type = if typeof as != = break call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() : decl_stmt var = new < if & == decl_stmt bool = decl_stmt var = new foreach < in if == |= foreach in if == call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() |= else if == call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if ! decl_stmt var = call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call var.SetBatchType() call var.SetBatchType() call var.SetBatchType() call var.SetBatchType() call var.SetBatchType() decl_stmt var = new = = = return if & == decl_stmt bool = decl_stmt var = new foreach < in if == |= foreach in if == |= call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() else if == call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if ! decl_stmt var = call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call Cassandra.ISession.ExecuteAsync(IStatement) call var.SetBatchType() call var.SetBatchType() call var.SetBatchType() call var.SetBatchType() call var.SetBatchType() decl_stmt var = new = = = return return var public public decl_stmt var = < call var.Wait() call var.Wait() call var.Wait() call var.Wait() call var.Wait() var private < private < < return decl_stmt var = foreach in if == = return public public = = public public = = call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() call ISession.Cluster() IAsyncResult var private private decl_stmt var = new < if == foreach < in if & == && == || & == && == foreach in if & == if == else if == call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() else if & == if == else if == call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() else if decl_stmt System.IAsyncResult = if != if decl_stmt System.IAsyncResult = if != = public public call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() public public public < < = as < public < public < return public public public < < return as < public public public < < = = as < public public public < < as < public public public < < as < public public public < < = as < var public static < public static < public static < < < if == if != return decl_stmt var = new < if call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() else if call var.TrySetCanceled() call var.TrySetCanceled() call var.TrySetCanceled() call var.TrySetCanceled() call var.TrySetCanceled() else call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() if != return