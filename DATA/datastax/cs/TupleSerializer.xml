Cassandra.Serialization System using System.Collections using System.Collections.Generic using System.Linq using System.Text using class Cassandra.Serialization.TupleSerializer super return var var var var var var public override public override decl_stmt var = decl_stmt var = decl_stmt var = new decl_stmt var = + for = < ++ decl_stmt var = if >= break decl_stmt var = += if < continue = += return var Type internal internal decl_stmt var = decl_stmt System.Type switch case = typeof <> break case = typeof <,> break case = typeof <,,> break case = typeof <,,,> break case = typeof <,,,,> break case = typeof <,,,,,> break case = typeof <,,,,,,> break default: return typeof return call System.Type.MakeGenericType(Type) call System.Type.MakeGenericType(Type) call System.Type.MakeGenericType(Type) call System.Type.MakeGenericType(Type) call System.Type.MakeGenericType(Type) call var.Elements() call var.Elements() call var.Elements() call var.Elements() call var.Elements() call var.Elements() call var.Elements() call var.Elements() call var.Elements() var var var var var var public override public override decl_stmt var = decl_stmt var = call var.GetGenericArguments() call var.GetGenericArguments() call var.GetGenericArguments() call var.GetGenericArguments() call var.GetGenericArguments() decl_stmt var = new < decl_stmt var = for = <= ++ decl_stmt var = call var.GetProperty() call var.GetProperty() call var.GetProperty() call var.GetProperty() call var.GetProperty() + if != decl_stmt var = call var.GetValue() call var.GetValue() call var.GetValue() call var.GetValue() call var.GetValue() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if != += return