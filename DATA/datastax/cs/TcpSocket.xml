Cassandra System.IO using System.Net using System.Net.Security using System.Net.Sockets using Microsoft.IO using class Cassandra.TcpSocket super super IDisposable Logger Socket Action bool decl byte SocketAsyncEventArgs Stream SocketAsyncEventArgs public public = new = if != call System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,int) call System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,int) call System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,int) call System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,int) call System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,int) if != call System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,int) call System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,int) call System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,int) call System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,int) call System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,int) new if != = if != = if != = = new var var var var public < public < decl_stmt var = new < decl_stmt var = decl_stmt var = new = decl_stmt var = new call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() new int call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() += if != call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() new int return call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() try call System.Net.Sockets.Socket.ConnectAsync(string,int) call System.Net.Sockets.Socket.ConnectAsync(string,int) call System.Net.Sockets.Socket.ConnectAsync(string,int) call System.Net.Sockets.Socket.ConnectAsync(string,int) call System.Net.Sockets.Socket.ConnectAsync(string,int) catch return < try call var.Change() call var.Change() call var.Change() call var.Change() call var.Change() catch if == && ! return call var.ContinueSync() call var.ContinueSync() call var.ContinueSync() call var.ContinueSync() call var.ContinueSync() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() = new call System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(byte,int,int) call System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(byte,int,int) call System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(byte,int,int) call System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(byte,int,int) call System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(byte,int,int) += = new += return if == return call var.ContinueSync() call var.ContinueSync() call var.ContinueSync() call var.ContinueSync() call var.ContinueSync() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() = new return return call var.Then() call var.Then() call var.Then() call var.Then() call var.Then() var var var private < private < call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() decl_stmt var = return try = catch call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) return call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() decl_stmt var = < new decl_stmt var = new new = try call var.BeginAuthenticateAsClient() call var.BeginAuthenticateAsClient() call var.BeginAuthenticateAsClient() call var.BeginAuthenticateAsClient() call var.BeginAuthenticateAsClient() try call var.EndAuthenticateAsClient() call var.EndAuthenticateAsClient() call var.EndAuthenticateAsClient() call var.EndAuthenticateAsClient() call var.EndAuthenticateAsClient() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() call var.TrySetResult() catch call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() catch call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() call var.TrySetException() return call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() return var protected virtual protected virtual if != decl_stmt var = try = call System.Net.Sockets.Socket.ReceiveAsync(IList,SocketFlags) call System.Net.Sockets.Socket.ReceiveAsync(IList,SocketFlags) call System.Net.Sockets.Socket.ReceiveAsync(IList,SocketFlags) call System.Net.Sockets.Socket.ReceiveAsync(IList,SocketFlags) call System.Net.Sockets.Socket.ReceiveAsync(IList,SocketFlags) catch if ! else call System.IO.Stream.BeginRead(byte,int,int,AsyncCallback,Object) call System.IO.Stream.BeginRead(byte,int,int,AsyncCallback,Object) call System.IO.Stream.BeginRead(byte,int,int,AsyncCallback,Object) call System.IO.Stream.BeginRead(byte,int,int,AsyncCallback,Object) call System.IO.Stream.BeginRead(byte,int,int,AsyncCallback,Object) protected virtual protected virtual ? = if != protected protected if != return if == return if != var protected protected try decl_stmt var = call System.IO.Stream.EndRead(IAsyncResult) call System.IO.Stream.EndRead(IAsyncResult) call System.IO.Stream.EndRead(IAsyncResult) call System.IO.Stream.EndRead(IAsyncResult) call System.IO.Stream.EndRead(IAsyncResult) if == return if != catch if is && is else protected protected if != if != protected protected try call System.IO.Stream.EndWrite(IAsyncResult) call System.IO.Stream.EndWrite(IAsyncResult) call System.IO.Stream.EndWrite(IAsyncResult) call System.IO.Stream.EndWrite(IAsyncResult) call System.IO.Stream.EndWrite(IAsyncResult) catch if is && is else if != protected protected = if != if != call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() else if != call System.IO.Stream.Dispose() call System.IO.Stream.Dispose() call System.IO.Stream.Dispose() call System.IO.Stream.Dispose() call System.IO.Stream.Dispose() = var private private decl_stmt var = ref if != var var public public ref if new int return if != = decl_stmt var = try = call System.Net.Sockets.Socket.SendAsync(SocketAsyncEventArgs) call System.Net.Sockets.Socket.SendAsync(SocketAsyncEventArgs) call System.Net.Sockets.Socket.SendAsync(SocketAsyncEventArgs) call System.Net.Sockets.Socket.SendAsync(SocketAsyncEventArgs) call System.Net.Sockets.Socket.SendAsync(SocketAsyncEventArgs) catch if ! else decl_stmt var = int call System.IO.Stream.BeginWrite(byte,int,int,AsyncCallback,Object) call System.IO.Stream.BeginWrite(byte,int,int,AsyncCallback,Object) call System.IO.Stream.BeginWrite(byte,int,int,AsyncCallback,Object) call System.IO.Stream.BeginWrite(byte,int,int,AsyncCallback,Object) call System.IO.Stream.BeginWrite(byte,int,int,AsyncCallback,Object) internal internal call System.Net.Sockets.Socket.Shutdown(SocketShutdown) call System.Net.Sockets.Socket.Shutdown(SocketShutdown) call System.Net.Sockets.Socket.Shutdown(SocketShutdown) call System.Net.Sockets.Socket.Shutdown(SocketShutdown) call System.Net.Sockets.Socket.Shutdown(SocketShutdown) public public if == return = try call System.Net.Sockets.Socket.Shutdown(SocketShutdown) call System.Net.Sockets.Socket.Shutdown(SocketShutdown) call System.Net.Sockets.Socket.Shutdown(SocketShutdown) call System.Net.Sockets.Socket.Shutdown(SocketShutdown) call System.Net.Sockets.Socket.Shutdown(SocketShutdown) call System.Net.Sockets.Socket.Close() call System.Net.Sockets.Socket.Close() call System.Net.Sockets.Socket.Close() call System.Net.Sockets.Socket.Close() call System.Net.Sockets.Socket.Close() catch if != call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose() call System.Net.Sockets.SocketAsyncEventArgs.Dispose()