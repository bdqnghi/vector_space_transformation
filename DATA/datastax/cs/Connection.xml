Cassandra System using System.Collections.Concurrent using System.Collections.Generic using System.IO using System.Linq using System.Net using System.Net.Sockets using System.Threading using System.Threading.Tasks using Cassandra.Tasks using Cassandra.Compression using Cassandra.Requests using Cassandra.Responses using Cassandra.Serialization using Microsoft.IO using class Cassandra.Connection super super IDisposable int string Timer TcpSocket int Logger decl ConcurrentDictionary Serializer string decl ConcurrentStack byte MemoryStream int decl Task SemaphoreSlim AutoResetEvent long decl ConcurrentQueue bool object int decl byte return return ref return ref return return ref > return if < return return return var var var var var var var private < private < decl_stmt var = decl_stmt var = == && ! is && == if < && ! if == throw new decl_stmt var = decl_stmt var = call var.GetAuthInfos() call var.GetAuthInfos() call var.GetAuthInfos() call var.GetAuthInfos() call var.GetAuthInfos() decl_stmt var = new return if ! is throw new + return if is decl_stmt var = decl_stmt var = call var.InitialResponse() call var.InitialResponse() call var.InitialResponse() call var.InitialResponse() call var.InitialResponse() ?? new return var var private < private < decl_stmt var = new return if is decl_stmt var = as if != call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() return if is = if == return return throw new + OperationState internal internal ? = lock = call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) ref if != call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() if && if != call AutoResetEvent.Set() call AutoResetEvent.Set() call AutoResetEvent.Set() call AutoResetEvent.Set() call AutoResetEvent.Set() return if == || is if != = new int else = new int decl_stmt Cassandra.OperationState while call decl ConcurrentQueue.TryDequeue() call decl ConcurrentQueue.TryDequeue() call decl ConcurrentQueue.TryDequeue() call decl ConcurrentQueue.TryDequeue() call decl ConcurrentQueue.TryDequeue() out call OperationState.InvokeCallback() call OperationState.InvokeCallback() call OperationState.InvokeCallback() call OperationState.InvokeCallback() call OperationState.InvokeCallback() foreach in call decl ConcurrentDictionary.Clear() call decl ConcurrentDictionary.Clear() call decl ConcurrentDictionary.Clear() call decl ConcurrentDictionary.Clear() call decl ConcurrentDictionary.Clear() ref if != call AutoResetEvent.Set() call AutoResetEvent.Set() call AutoResetEvent.Set() call AutoResetEvent.Set() call AutoResetEvent.Set() var public virtual public virtual if ref != return call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call Cassandra.TcpSocket.Dispose() call Cassandra.TcpSocket.Dispose() call Cassandra.TcpSocket.Dispose() call Cassandra.TcpSocket.Dispose() call Cassandra.TcpSocket.Dispose() call System.Threading.SemaphoreSlim.Dispose() call System.Threading.SemaphoreSlim.Dispose() call System.Threading.SemaphoreSlim.Dispose() call System.Threading.SemaphoreSlim.Dispose() call System.Threading.SemaphoreSlim.Dispose() decl_stmt var = ref if != call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() private private if ! is call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) call Cassandra.Logger.Error(string,object) + return if != var private private if if ! call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) if != new int return call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() call Logger.Verbose() decl_stmt var = new if == return call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) call Cassandra.Logger.Warning(string,object) + if is && != var public < public < = new < short = new < = new < if != = else if == = new else if == = new call Cassandra.TcpSocket.Init() call Cassandra.TcpSocket.Init() call Cassandra.TcpSocket.Init() call Cassandra.TcpSocket.Init() call Cassandra.TcpSocket.Init() += += += += decl_stmt var = return call Cassandra.TcpSocket.Connect() call Cassandra.TcpSocket.Connect() call Cassandra.TcpSocket.Connect() call Cassandra.TcpSocket.Connect() call Cassandra.TcpSocket.Connect() = if is if throw new