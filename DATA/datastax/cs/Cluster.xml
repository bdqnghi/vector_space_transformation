Cassandra System using System.Collections.Concurrent using System.Collections.Generic using System.Net using System.Threading using Cassandra.Serialization using Cassandra.Tasks using Microsoft.IO using class Cassandra.Cluster super super ICluster Serializer Exception Logger bool Metadata int ControlConnection decl ConcurrentBag object internal internal return public static public static if == throw new return new public static public static return new return = return var private private if return lock if return if != throw decl_stmt var = byte if != && < = = new * * = new = try call Cassandra.ControlConnection.Init() call Cassandra.ControlConnection.Init() call Cassandra.ControlConnection.Init() call Cassandra.ControlConnection.Init() call Cassandra.ControlConnection.Init() = catch throw catch = throw = new call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) + + = += += public < public < return call Cassandra.Metadata.AllHosts() call Cassandra.Metadata.AllHosts() call Cassandra.Metadata.AllHosts() call Cassandra.Metadata.AllHosts() call Cassandra.Metadata.AllHosts() public public return var public public decl_stmt var = new call var.Init() call var.Init() call var.Init() call var.Init() call var.Init() call decl ConcurrentBag.Add() call decl ConcurrentBag.Add() call decl ConcurrentBag.Add() call decl ConcurrentBag.Add() call decl ConcurrentBag.Add() call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call var.GetHashCode() call var.GetHashCode() call var.GetHashCode() call var.GetHashCode() call var.GetHashCode() return var public public < = = decl_stmt var = call var.CreateKeyspaceIfNotExists() call var.CreateKeyspaceIfNotExists() call var.CreateKeyspaceIfNotExists() call var.CreateKeyspaceIfNotExists() call var.CreateKeyspaceIfNotExists() call var.ChangeKeyspace() call var.ChangeKeyspace() call var.ChangeKeyspace() call var.ChangeKeyspace() call var.ChangeKeyspace() return public public public public return public < public < return public < public < return private private if != private private if != public public = = return Session public public = if ! return decl_stmt Cassandra.Session while call decl ConcurrentBag.TryTake() call decl ConcurrentBag.TryTake() call decl ConcurrentBag.TryTake() call decl ConcurrentBag.TryTake() call decl ConcurrentBag.TryTake() out call Cassandra.Session.WaitForAllPendingActions(int) call Cassandra.Session.WaitForAllPendingActions(int) call Cassandra.Session.WaitForAllPendingActions(int) call Cassandra.Session.WaitForAllPendingActions(int) call Cassandra.Session.WaitForAllPendingActions(int) call Session.Dispose() call Session.Dispose() call Session.Dispose() call Session.Dispose() call Session.Dispose() call Cassandra.Metadata.ShutDown(int) call Cassandra.Metadata.ShutDown(int) call Cassandra.Metadata.ShutDown(int) call Cassandra.Metadata.ShutDown(int) call Cassandra.Metadata.ShutDown(int) call Cassandra.ControlConnection.Dispose() call Cassandra.ControlConnection.Dispose() call Cassandra.ControlConnection.Dispose() call Cassandra.ControlConnection.Dispose() call Cassandra.ControlConnection.Dispose() call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) call Cassandra.Logger.Info(string,object) + +