Cassandra.Tasks System using System.Collections using System.Collections.Concurrent using System.Collections.Generic using System.Linq using System.Threading using Cassandra.Collections using class Cassandra.Tasks.HashedWheelTimer super super IDisposable int int Timer int int decl ConcurrentQueue int decl Bucket decl ConcurrentQueue var var private private decl_stmt var = decl_stmt var = while != if == call var.Expire() call var.Expire() call var.Expire() call var.Expire() call var.Expire() call var.Remove() call var.Remove() call var.Remove() call var.Remove() call var.Remove() else if call var.Remove() call var.Remove() call var.Remove() call var.Remove() call var.Remove() else -- = = + try call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Change(long,long) catch public public if ref != return call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) call System.Threading.Tasks.Dataflow.Internal.Threading.Timer.Dispose(bool) var public public < if < = decl_stmt var = new call decl ConcurrentQueue.Enqueue() call decl ConcurrentQueue.Enqueue() call decl ConcurrentQueue.Enqueue() call decl ConcurrentQueue.Enqueue() call decl ConcurrentQueue.Enqueue() return decl Tuple private private decl_stmt System.Tuple < while call decl ConcurrentQueue.TryDequeue() call decl ConcurrentQueue.TryDequeue() call decl ConcurrentQueue.TryDequeue() call decl ConcurrentQueue.TryDequeue() call decl ConcurrentQueue.TryDequeue() out var var var private private if return decl_stmt var = / + - decl_stmt var = decl_stmt var = / if > && < -- = TimeoutItem private private decl_stmt TimeoutItem while call decl ConcurrentQueue.TryDequeue() call decl ConcurrentQueue.TryDequeue() call decl ConcurrentQueue.TryDequeue() call decl ConcurrentQueue.TryDequeue() call decl ConcurrentQueue.TryDequeue() out call TimeoutItem.Bucket() call TimeoutItem.Bucket() call TimeoutItem.Bucket() call TimeoutItem.Bucket() call TimeoutItem.Bucket() call TimeoutItem.Bucket() call TimeoutItem.Bucket() call TimeoutItem.Bucket() call TimeoutItem.Bucket() internal internal = if == = = return = = = = internal internal if == = if == = return = return = if == if != throw new = = return = var public < public < if == yield decl_stmt var = yield while = != yield return return == public public if ref == if != call Timer._cancelledTimeouts() call Timer._cancelledTimeouts() call Timer._cancelledTimeouts() call Timer._cancelledTimeouts() call Timer._cancelledTimeouts() call Timer._cancelledTimeouts() call Timer._cancelledTimeouts() call Timer._cancelledTimeouts() call Timer._cancelledTimeouts() return return public public if ref != return public public private private = = = = = =