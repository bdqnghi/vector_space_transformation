Cassandra.Data.Linq System using System.Collections using System.Collections.Generic using System.Collections.ObjectModel using System.Linq using System.Linq.Expressions using System.Reflection using System.Text using Cassandra.Mapping using Cassandra.Mapping.Utils using class Cassandra.Data.Linq.CqlExpressionVisitor super super ExpressionVisitor decl Dictionary decl HashSet string decl List decl VisitingParam decl VisitingParam PocoData decl Dictionary int decl List string decl VisitingParam bool decl VisitingParam decl List string decl Tuple decl Tuple var var public public out out decl_stmt var = new decl_stmt var = new < call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() == call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() call PocoData.Columns() : call decl List.Select() call decl List.Select() call decl List.Select() call decl List.Select() call decl List.Select() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call decl List.Select() call decl List.Select() call decl List.Select() call decl List.Select() call decl List.Select() + : if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if || call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() = call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() return call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() private private if ! return return + + var var public public out out ? decl_stmt var = new decl_stmt var = new < call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() if != call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() - / if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() if call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() if > if throw new call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() if > throw new = call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() return call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() var var var var var var string public public out out ? ? decl_stmt var = new decl_stmt var = new < call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() if != || != call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() if != call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if != call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() if != call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() - / call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() decl_stmt var = new < foreach in decl_stmt var = decl_stmt var = decl_stmt var = decl_stmt string switch case = + + call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() break case = + call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() break case = + + call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() break case = + + break case = + + break default: = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() break call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() + if == throw new call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() = call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() return call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() var var public public out out decl_stmt var = new decl_stmt var = new < call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() call var.AddRange() if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() = call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() return call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() string private private decl_stmt string = if != = + += return public public protected override protected override if call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() != throw new call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() foreach in if ! is continue using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() as return protected override protected override protected override < < if call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() != return using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() return var var string protected override protected override if call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() != throw new call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() for = < ++ decl_stmt var = if == throw new call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() if == return decl_stmt string if != && < = else decl_stmt var = as if == throw new call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() = using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() return protected override protected override switch case using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() return case using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() if != call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() return case case using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() if != call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() call decl Tuple.Item1() using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() return case using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() return case case using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() return case case using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() return case case if == using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() = return case = return if call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() == return if call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() == if return return throw new call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() var private private = decl_stmt var = if == = call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() if == throw new call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return var var private private decl_stmt var = if != if == typeof = if return decl_stmt var = call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() return Expression var var Expression var var var var var var var private private decl_stmt var = call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() decl_stmt var = call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() switch case decl_stmt Microsoft.Scripting.Ast.Expression = decl_stmt Microsoft.Scripting.Ast.Expression = if == = = else = = decl_stmt var = decl_stmt var = new foreach in call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() == : call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return case decl_stmt var = decl_stmt var = string decl_stmt var = + call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return case call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() return case call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return case case call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() decl_stmt var = for = < ++ decl_stmt var = if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return case case call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return return var ExpressionType object private private if != typeof return decl_stmt var = call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() decl_stmt object = decl_stmt ExpressionType switch case = break case = break case = break default: return call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return private static private static if is && == && && == return as return var var var protected override protected override if call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() == decl_stmt var = call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() decl_stmt var = call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() if call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() + call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() else if == else decl_stmt var = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return if call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() == if == && == return throw new call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() var private static private static if == decl_stmt var = as if != && == return return var private static private static if == decl_stmt var = as if == || ! is int return if as == return return var var protected override protected override if call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() == if call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() if if using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() return else if if using call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() call decl VisitingParam.Set() return else call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() + + return else if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() decl_stmt var = call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() return else if call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() == decl_stmt var = call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() if == throw new call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return throw new call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() var var var protected override protected override if is return switch call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() case call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() return case decl_stmt var = call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() if == break decl_stmt var = if if ! is long || is int throw new = > : call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return case = int return case case decl_stmt var = call Cassandra.Mapping.PocoData.GetColumnNameByMemberName(string) call Cassandra.Mapping.PocoData.GetColumnNameByMemberName(string) call Cassandra.Mapping.PocoData.GetColumnNameByMemberName(string) call Cassandra.Mapping.PocoData.GetColumnNameByMemberName(string) call Cassandra.Mapping.PocoData.GetColumnNameByMemberName(string) string if == break call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() == return throw new call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() var var PocoColumn var var var protected override protected override switch call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() case decl_stmt var = call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() decl_stmt var = call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() if == decl_stmt var = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return if == decl_stmt var = call Cassandra.Mapping.PocoData.GetColumnName(MemberInfo) call Cassandra.Mapping.PocoData.GetColumnName(MemberInfo) call Cassandra.Mapping.PocoData.GetColumnName(MemberInfo) call Cassandra.Mapping.PocoData.GetColumnName(MemberInfo) call Cassandra.Mapping.PocoData.GetColumnName(MemberInfo) if == throw new call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return if == decl_stmt var = if is call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() decl_stmt var = new foreach in as call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() == : call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() else call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return if == decl_stmt var = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return break case decl_stmt Cassandra.Mapping.PocoColumn if == || != = call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return = call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() call PocoData.GetColumnByMemberName() if == throw new + call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() object call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return case case decl_stmt var = call Cassandra.Mapping.PocoData.GetColumnName(MemberInfo) call Cassandra.Mapping.PocoData.GetColumnName(MemberInfo) call Cassandra.Mapping.PocoData.GetColumnName(MemberInfo) call Cassandra.Mapping.PocoData.GetColumnName(MemberInfo) call Cassandra.Mapping.PocoData.GetColumnName(MemberInfo) if == throw new call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() == if is return if == return break throw new call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get() call decl VisitingParam.Get()