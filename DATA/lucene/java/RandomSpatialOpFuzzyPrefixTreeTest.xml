org.apache.lucene.spatial.prefix java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.Iterator import java.util.LinkedHashMap import java.util.LinkedHashSet import java.util.List import java.util.Map import java.util.Set import com.carrotsearch.randomizedtesting.annotations.Repeat import org.locationtech.spatial4j.context.SpatialContext import org.locationtech.spatial4j.context.SpatialContextFactory import org.locationtech.spatial4j.shape.Point import org.locationtech.spatial4j.shape.Rectangle import org.locationtech.spatial4j.shape.Shape import org.locationtech.spatial4j.shape.ShapeCollection import org.locationtech.spatial4j.shape.SpatialRelation import org.locationtech.spatial4j.shape.impl.RectangleImpl import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.StoredField import org.apache.lucene.document.StringField import org.apache.lucene.search.Query import org.apache.lucene.spatial.StrategyTestCase import org.apache.lucene.spatial.prefix.tree.Cell import org.apache.lucene.spatial.prefix.tree.CellIterator import org.apache.lucene.spatial.prefix.tree.GeohashPrefixTree import org.apache.lucene.spatial.prefix.tree.PackedQuadPrefixTree import org.apache.lucene.spatial.prefix.tree.QuadPrefixTree import org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree import org.apache.lucene.spatial.query.SpatialArgs import org.apache.lucene.spatial.query.SpatialOperation import org.junit.Test import static static com.carrotsearch.randomizedtesting.RandomizedTest.randomBoolean import static static com.carrotsearch.randomizedtesting.RandomizedTest.randomInt import static static com.carrotsearch.randomizedtesting.RandomizedTest.randomIntBetween import static static org.locationtech.spatial4j.shape.SpatialRelation.CONTAINS import static static org.locationtech.spatial4j.shape.SpatialRelation.DISJOINT import static static org.locationtech.spatial4j.shape.SpatialRelation.INTERSECTS import static static org.locationtech.spatial4j.shape.SpatialRelation.WITHIN import class org.apache.lucene.spatial.prefix.RandomSpatialOpFuzzyPrefixTreeTest super super extends SpatialContext SpatialPrefixTree int public public throws if else if instanceof if == - && + SpatialContextFactory private private if ! = decl_stmt SpatialContextFactory = new = = = call SpatialContextFactory.newSpatialContext() call SpatialContextFactory.newSpatialContext() call SpatialContextFactory.newSpatialContext() call SpatialContextFactory.newSpatialContext() call SpatialContextFactory.newSpatialContext() SpatialContextFactory private private decl_stmt SpatialContextFactory = new = = new - = call SpatialContextFactory.newSpatialContext() call SpatialContextFactory.newSpatialContext() call SpatialContextFactory.newSpatialContext() call SpatialContextFactory.newSpatialContext() call SpatialContextFactory.newSpatialContext() if == - = if = new else = new = public public = if == - = = new = protected protected return new = public = public throws - = public = public throws - = public = public throws - Query SearchResults public public throws new - - decl_stmt org.apache.lucene.search.Query = new - decl_stmt SearchResults = Query SearchResults public public throws new - - decl_stmt org.apache.lucene.search.Query = new decl_stmt SearchResults = == public public throws - new - == new - == Shape Shape public public = decl_stmt java.awt.Shape = new - - - - - decl_stmt java.awt.Shape = - - call Shape.relate() call Shape.relate() call Shape.relate() call Shape.relate() call Shape.relate() decl Collection Document protected protected decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new if != decl_stmt java.util.Collection < if instanceof = new <> call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() else = for : for : call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) if call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new return Shape Query decl Map String Shape SearchResults int boolean decl Set SearchResults decl Iterator Shape Shape Shape SpatialArgs decl Set boolean int int int boolean decl Map boolean decl Set boolean Shape private private final final throws decl_stmt org.apache.lucene.search.Query = new decl_stmt SearchResults = decl_stmt boolean final final = == decl_stmt java.util.Map < = new <> decl_stmt java.util.Map < = new <> decl_stmt int final final = decl_stmt boolean = decl_stmt boolean final final = for = < ++ decl_stmt java.lang.String = + decl_stmt java.awt.Shape decl_stmt int = if == = else if == || = else if <= = = else = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if == decl_stmt java.util.Iterator < = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if == call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl_stmt int final final = for = < ++ decl_stmt int = call SpatialPrefixTree.getMaxLevels() call SpatialPrefixTree.getMaxLevels() call SpatialPrefixTree.getMaxLevels() call SpatialPrefixTree.getMaxLevels() call SpatialPrefixTree.getMaxLevels() decl_stmt java.awt.Shape final final switch case = break case if ! call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() decl_stmt java.awt.Shape = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if instanceof || instanceof = break default: = decl_stmt java.awt.Shape final final = decl_stmt boolean final final = == decl_stmt java.util.Set < = new <> decl_stmt java.util.Set < = new <> for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = decl_stmt java.awt.Shape = if == continue decl_stmt java.awt.Shape = if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = if ! call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else if ! if == = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = else if == = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() else if == = if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt org.apache.lucene.spatial.query.SpatialArgs = new if instanceof call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) decl_stmt org.apache.lucene.search.Query = decl_stmt SearchResults = decl_stmt java.util.Set < = new <> for : decl_stmt java.lang.String = decl_stmt boolean = call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() if ! && ! && ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() if call decl Set.removeAll() call decl Set.removeAll() call decl Set.removeAll() call decl Set.removeAll() call decl Set.removeAll() if ! call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() decl_stmt java.lang.String = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() Rectangle Rectangle private private decl_stmt org.apache.lucene.geo.Rectangle = decl_stmt org.apache.lucene.geo.Rectangle = return new private private < < + + + + + + + + + ShapePair double double CellIterator Cell decl List int protected protected if == return if instanceof decl_stmt ShapePair = return new if instanceof = decl_stmt double = decl_stmt double = decl_stmt int = call SpatialPrefixTree.getLevelForDistance() call SpatialPrefixTree.getLevelForDistance() call SpatialPrefixTree.getLevelForDistance() call SpatialPrefixTree.getLevelForDistance() call SpatialPrefixTree.getLevelForDistance() decl_stmt org.apache.lucene.spatial.prefix.tree.CellIterator = call org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree.getTreeCellIterator(Shape,int) call org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree.getTreeCellIterator(Shape,int) call org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree.getTreeCellIterator(Shape,int) call org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree.getTreeCellIterator(Shape,int) call org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree.getTreeCellIterator(Shape,int) decl_stmt java.util.List < = new <> while call CellIterator.hasNext() call CellIterator.hasNext() call CellIterator.hasNext() call CellIterator.hasNext() call CellIterator.hasNext() decl_stmt org.apache.lucene.spatial.prefix.tree.Cell = call org.apache.lucene.spatial.prefix.tree.CellIterator.next() call org.apache.lucene.spatial.prefix.tree.CellIterator.next() call org.apache.lucene.spatial.prefix.tree.CellIterator.next() call org.apache.lucene.spatial.prefix.tree.CellIterator.next() call org.apache.lucene.spatial.prefix.tree.CellIterator.next() if ! call org.apache.lucene.spatial.prefix.tree.Cell.isLeaf() call org.apache.lucene.spatial.prefix.tree.Cell.isLeaf() call org.apache.lucene.spatial.prefix.tree.Cell.isLeaf() call org.apache.lucene.spatial.prefix.tree.Cell.isLeaf() call org.apache.lucene.spatial.prefix.tree.Cell.isLeaf() continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.lucene.spatial.prefix.tree.Cell.getShape() call org.apache.lucene.spatial.prefix.tree.Cell.getShape() call org.apache.lucene.spatial.prefix.tree.Cell.getShape() call org.apache.lucene.spatial.prefix.tree.Cell.getShape() call org.apache.lucene.spatial.prefix.tree.Cell.getShape() return new <> Rectangle private private if ! return if instanceof decl_stmt org.apache.lucene.geo.Rectangle = if call Rectangle.getCrossesDateLine() call Rectangle.getCrossesDateLine() call Rectangle.getCrossesDateLine() call Rectangle.getCrossesDateLine() call Rectangle.getCrossesDateLine() return new call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() - call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() else return call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() return Rectangle boolean SpatialRelation public public decl_stmt SpatialRelation = if == return if == return if == && ! return decl_stmt boolean = if ! return decl_stmt org.apache.lucene.geo.Rectangle = if call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() && call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMinX() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() && call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() call Rectangle.getMinY() && call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxX() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() call Rectangle.getMaxY() return return Shape private private decl_stmt java.awt.Shape = call SpatialContext.makePoint() call SpatialContext.makePoint() call SpatialContext.makePoint() call SpatialContext.makePoint() call SpatialContext.makePoint() return || private private if if == || || == || return if == && == return else if == || && == || return if == || == return if || return return public public return + + + +