org.apache.solr.common java.util.ArrayList import java.util.Collection import java.util.Iterator import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Set import class org.apache.solr.common.SolrInputDocument super super extends super implements decl List decl Map float public public if != call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() = public public SolrInputField Object public public decl_stmt org.apache.solr.common.SolrInputField = decl_stmt java.lang.Object = if != = call org.apache.solr.common.SolrInputField.getFirstValue() call org.apache.solr.common.SolrInputField.getFirstValue() call org.apache.solr.common.SolrInputField.getFirstValue() call org.apache.solr.common.SolrInputField.getFirstValue() call org.apache.solr.common.SolrInputField.getFirstValue() return SolrInputField public < public < decl_stmt org.apache.solr.common.SolrInputField = if != return call SolrInputField.getValues() call SolrInputField.getValues() call SolrInputField.getValues() call SolrInputField.getValues() call SolrInputField.getValues() return public < public < return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() public public SolrInputField public public decl_stmt org.apache.solr.common.SolrInputField = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.common.SolrInputField.setValue(Object,float) call org.apache.solr.common.SolrInputField.setValue(Object,float) call org.apache.solr.common.SolrInputField.setValue(Object,float) call org.apache.solr.common.SolrInputField.setValue(Object,float) call org.apache.solr.common.SolrInputField.setValue(Object,float) SolrInputField public public decl_stmt org.apache.solr.common.SolrInputField = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == || == else call org.apache.solr.common.SolrInputField.addValue(Object,float) call org.apache.solr.common.SolrInputField.addValue(Object,float) call org.apache.solr.common.SolrInputField.addValue(Object,float) call org.apache.solr.common.SolrInputField.addValue(Object,float) call org.apache.solr.common.SolrInputField.addValue(Object,float) public public return call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() public < public < return call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() public public return public public = public public return + call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() + == : + + SolrInputDocument decl Set public public decl_stmt org.apache.solr.common.SolrInputDocument = new decl_stmt java.util.Set < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() for < : call SolrInputDocument._fields() call SolrInputDocument._fields() call SolrInputDocument._fields() call SolrInputDocument._fields() call SolrInputDocument._fields() call SolrInputDocument._fields() call SolrInputDocument._fields() call SolrInputDocument._fields() call SolrInputDocument._fields() = if != = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call SolrInputDocument._childDocuments() call SolrInputDocument._childDocuments() call SolrInputDocument._childDocuments() call SolrInputDocument._childDocuments() call SolrInputDocument._childDocuments() call SolrInputDocument._childDocuments() call SolrInputDocument._childDocuments() call SolrInputDocument._childDocuments() call SolrInputDocument._childDocuments() return public public return call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() public public return call decl Map.containsValue() call decl Map.containsValue() call decl Map.containsValue() call decl Map.containsValue() call decl Map.containsValue() public < < public < < return call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() public public return call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() public < public < return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() public public return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public < extends extends extends extends call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() public public return call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() public public return call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() public < public < return call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() public public if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public < for : public < public < return boolean public public decl_stmt boolean = == || call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return ! public public return call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() :