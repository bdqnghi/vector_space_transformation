org.apache.solr.handler.extraction java.lang.invoke.MethodHandles import java.util.ArrayDeque import java.util.Collection import java.util.Collections import java.util.Date import java.util.Deque import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.Map import java.util.Set import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.params.SolrParams import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.SchemaField import org.apache.solr.schema.TrieDateField import org.apache.tika.metadata.Metadata import org.apache.tika.metadata.TikaMetadataKeys import org.slf4j.Logger import org.slf4j.LoggerFactory import org.xml.sax.Attributes import org.xml.sax.SAXException import org.xml.sax.helpers.DefaultHandler import class org.apache.solr.handler.extraction.SolrContentHandler super super extends super implements StringBuilder IndexSchema String Logger decl Deque decl Set boolean decl Collection decl Map boolean SolrParams boolean String SolrInputDocument String Metadata public public if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return String protected protected for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if > decl_stmt java.lang.String = if && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() continue protected protected if && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl Iterator String String protected protected decl_stmt java.util.Iterator < = call SolrParams.getParameterNamesIterator() call SolrParams.getParameterNamesIterator() call SolrParams.getParameterNamesIterator() call SolrParams.getParameterNamesIterator() call SolrParams.getParameterNamesIterator() = new <> while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if ! call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) continue decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call SolrParams.getParams() call SolrParams.getParams() call SolrParams.getParams() call SolrParams.getParams() call SolrParams.getParams() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl String protected protected for : call Metadata.names() call Metadata.names() call Metadata.names() call Metadata.names() call Metadata.names() if && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() continue decl_stmt java.lang.String = call Metadata.getValues() call Metadata.getValues() call Metadata.getValues() call Metadata.getValues() call Metadata.getValues() char String StringBuilder StringBuilder float SchemaField boolean protected protected if decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt char = if ! = else = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.lang.String = decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) if == && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > = + = call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) else if == && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) == = = call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) if == && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == && == return if != && == = = if != && ! call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() && != decl_stmt java.lang.StringBuilder = new decl_stmt boolean = for : if = else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() = decl_stmt float = if != call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) if != for : call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) StringBuilder public public throws decl_stmt java.lang.StringBuilder = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() if == for = < ++ else for = < ++ call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() StringBuilder public public throws decl_stmt java.lang.StringBuilder = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call decl Deque.removeLast() call decl Deque.removeLast() call decl Deque.removeLast() call decl Deque.removeLast() call decl Deque.removeLast() assert call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() >= call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() public public throws call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() public public throws Date String protected protected decl_stmt java.lang.String = if != && instanceof try decl_stmt java.util.Date = = call Date.toInstant() call Date.toInstant() call Date.toInstant() call Date.toInstant() call Date.toInstant() catch return protected protected return call org.apache.solr.common.params.SolrParams.getFloat(String) call org.apache.solr.common.params.SolrParams.getFloat(String) call org.apache.solr.common.params.SolrParams.getFloat(String) call org.apache.solr.common.params.SolrParams.getFloat(String) call org.apache.solr.common.params.SolrParams.getFloat(String) + protected protected return call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() +