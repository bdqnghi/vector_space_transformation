org.apache.lucene.codecs.blocktree java.io.IOException import java.io.PrintStream import org.apache.lucene.codecs.BlockTermState import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.TermState import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.IndexInput import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.Util import class org.apache.lucene.codecs.blocktree.SegmentTermsEnum super super extends FieldReader boolean SegmentTermsEnumFrame decl BytesReader ByteArrayDataInput decl FST BytesRefBuilder int int boolean IndexInput decl SegmentTermsEnumFrame SegmentTermsEnumFrame if == = call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() long decl FST Stats public public throws decl_stmt org.apache.lucene.codecs.blocktree.Stats = new if != = call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() = decl_stmt org.apache.lucene.util.fst.FST < if != = call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() assert call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() else = = = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() = call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) ! while while == call Stats.endBlock() call Stats.endBlock() call Stats.endBlock() call Stats.endBlock() call Stats.endBlock() if ! call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) break else if == break break decl_stmt long final final = = - assert == while if call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.next() = call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) call org.apache.lucene.codecs.blocktree.Stats.startBlock(SegmentTermsEnumFrame,boolean) ! else call org.apache.lucene.codecs.blocktree.Stats.term(BytesRef) call org.apache.lucene.codecs.blocktree.Stats.term(BytesRef) call org.apache.lucene.codecs.blocktree.Stats.term(BytesRef) call org.apache.lucene.codecs.blocktree.Stats.term(BytesRef) call org.apache.lucene.codecs.blocktree.Stats.term(BytesRef) call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() break call org.apache.lucene.codecs.blocktree.Stats.finish() call org.apache.lucene.codecs.blocktree.Stats.finish() call org.apache.lucene.codecs.blocktree.Stats.finish() call org.apache.lucene.codecs.blocktree.Stats.finish() call org.apache.lucene.codecs.blocktree.Stats.finish() = if != = call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() assert call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() else = = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() = call org.apache.lucene.util.BytesRefBuilder.clear() call org.apache.lucene.util.BytesRefBuilder.clear() call org.apache.lucene.util.BytesRefBuilder.clear() call org.apache.lucene.util.BytesRefBuilder.clear() call org.apache.lucene.util.BytesRefBuilder.clear() return decl SegmentTermsEnumFrame private private throws if >= decl_stmt org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame final final final = new + for = < ++ = new = assert == return decl FST private < private < if >= decl_stmt org.apache.lucene.util.fst.FST final final final final final final final < = new + for = < ++ = new <> = return long long SegmentTermsEnumFrame < throws call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) decl_stmt long final final = call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() decl_stmt long final final = >>> decl_stmt org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame final final = + = & != = = & != if call SegmentTermsEnumFrame.setFloorData() call SegmentTermsEnumFrame.setFloorData() call SegmentTermsEnumFrame.setFloorData() call SegmentTermsEnumFrame.setFloorData() call SegmentTermsEnumFrame.setFloorData() return SegmentTermsEnumFrame < throws decl_stmt org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame final final = + = if == && != - if > call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() else assert == else = - = = = = = - return private private = return private private = return int int SegmentTermsEnumFrame int int int decl FST decl FST SeekStatus BytesRef int public public throws if == throw new call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) + assert decl_stmt org.apache.lucene.util.fst.FST < decl_stmt int decl_stmt org.apache.lucene.util.BytesRef = if != = assert call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() = = decl_stmt org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame = assert <= call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() decl_stmt int final final = decl_stmt int = while < = call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) & - + & if != break = + assert == + & : + char + + + & if != = if call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() = + ++ if == decl_stmt int final final = decl_stmt int final final = call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() while < = call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) & - + & if != break ++ if == = call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() - = if < = else if > = = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() else assert call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() == if return else else = - = call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() assert call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() assert != = = = = while < decl_stmt int final final = + & decl_stmt org.apache.lucene.util.fst.FST final final final final final final final < = call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() + if == = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) if ! = call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) byte call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) + return call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() decl_stmt SeekStatus final final = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) if == return else return else = call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) byte assert != if != = ++ if call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() = = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) if ! = call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) return call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() decl_stmt SeekStatus final final = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) if == return else return int int SegmentTermsEnumFrame int int int decl FST decl FST SeekStatus BytesRef int public public throws if == throw new call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) + assert decl_stmt org.apache.lucene.util.fst.FST < decl_stmt int decl_stmt org.apache.lucene.util.BytesRef = if != = assert call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() = = decl_stmt org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame = assert <= call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() decl_stmt int final final = decl_stmt int = while < = call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) & - + & if != break = + assert == + & : + char + + + & if != = if call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() = + ++ if == decl_stmt int final final = decl_stmt int final final = call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() while < = call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) & - + & if != break ++ if == = call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() - = if < = else if > = = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() else assert call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() == if return else else = - = call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() assert call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() assert != = = = = while < decl_stmt int final final = + & decl_stmt org.apache.lucene.util.fst.FST final final final final final final final < = call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() + if == = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() decl_stmt SeekStatus final final = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) if == call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) = if != return else return else return else call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) call org.apache.lucene.util.BytesRefBuilder.setByteAt(int,byte) byte = assert != if != = ++ if call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() = = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() decl_stmt SeekStatus final final = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(BytesRef,boolean) if == call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) = if != return else return else return long SegmentTermsEnumFrame BytesRef boolean ByteArrayDataInput long BytesRef int private private throws if == else decl_stmt int = decl_stmt boolean = while decl_stmt org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame = assert != decl_stmt org.apache.lucene.util.BytesRef final final = new call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() if == - + : + + + + + + + : + + + + + == - : + + + + + + + + << + : + : + + + + + + call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() else + : + + + + + + + : + + + + + + + == - : + + + + + + + + << + : + : + + + + + + + + call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() if != assert ! || != : + + + if > && && != call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) - & + char + + call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) - & throw new decl_stmt org.apache.lucene.util.BytesRef = if == throw new else if && ! decl_stmt org.apache.lucene.store.ByteArrayDataInput final final = new decl_stmt long final final = call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() decl_stmt long final final = << | : | : if != + + + throw new if == break if == = ++ decl FST long boolean public public throws if == decl_stmt org.apache.lucene.util.fst.FST final final final final final final final < if != = call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() call FieldReader.index() assert call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() else = = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() = assert ! if == decl_stmt boolean final final = call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() assert while == if ! call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadNextFloorBlock() break else if == assert call org.apache.lucene.util.BytesRefBuilder.clear() call org.apache.lucene.util.BytesRefBuilder.clear() call org.apache.lucene.util.BytesRefBuilder.clear() call org.apache.lucene.util.BytesRefBuilder.clear() call org.apache.lucene.util.BytesRefBuilder.clear() = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.rewind() = return decl_stmt long final final = = - if == - || != call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(BytesRef) call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToSubBlock(long) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToSubBlock(long) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToSubBlock(long) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToSubBlock(long) call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToSubBlock(long) = while if call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.next() = call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.loadBlock() else return call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() public public assert ! return call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() public public throws assert ! call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() return public public throws assert ! call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() return public public throws assert ! call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() return call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() call FieldReader.parent() public public assert if call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() != || ! assert != && instanceof = call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) = call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd() assert > = else TermState public public throws assert ! call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData() decl_stmt org.apache.lucene.index.TermState = call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() call SegmentTermsEnumFrame.state() return public public throw new public public throw new