org.apache.lucene.expressions.js java.io.PrintWriter import java.io.StringWriter import java.lang.reflect.Method import java.text.ParseException import java.util.Collections import java.util.HashMap import java.util.Map import org.apache.lucene.expressions.Expression import org.apache.lucene.util.LuceneTestCase import org.objectweb.asm.ClassWriter import org.objectweb.asm.Opcodes import org.objectweb.asm.Type import org.objectweb.asm.commons.GeneratorAdapter import class org.apache.lucene.expressions.js.TestCustomFunctions super super extends String double ParseException decl Map public public throws decl_stmt java.util.Map < = decl_stmt org.apache.lucene.queryparser.surround.parser.ParseException = call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call ParseException.getErrorOffset() call ParseException.getErrorOffset() call ParseException.getErrorOffset() call ParseException.getErrorOffset() call ParseException.getErrorOffset() Expression decl Map public public throws decl_stmt java.util.Map < = decl_stmt org.apache.solr.analytics.expression.Expression = call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() public static public static return Expression decl Map public public throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.analytics.expression.Expression = call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() public static public static return + Expression decl Map public public throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.analytics.expression.Expression = call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() public static public static return + + Expression decl Map public public throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.analytics.expression.Expression = call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() Expression decl Map public public throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.analytics.expression.Expression = call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() ParseException public public decl_stmt org.apache.lucene.queryparser.surround.parser.ParseException = call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call ParseException.getErrorOffset() call ParseException.getErrorOffset() call ParseException.getErrorOffset() call ParseException.getErrorOffset() call ParseException.getErrorOffset() = call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call ParseException.getErrorOffset() call ParseException.getErrorOffset() call ParseException.getErrorOffset() call ParseException.getErrorOffset() call ParseException.getErrorOffset() = call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call com.sun.jmx.snmp.IPAcl.ParseException.getMessage() call ParseException.getErrorOffset() call ParseException.getErrorOffset() call ParseException.getErrorOffset() call ParseException.getErrorOffset() call ParseException.getErrorOffset() public static public static return IllegalArgumentException decl Map public public throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt IllegalArgumentException = call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() public static public static return IllegalArgumentException decl Map public public throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt IllegalArgumentException = call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() public public return IllegalArgumentException decl Map public public throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt IllegalArgumentException = call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() static static return IllegalArgumentException decl Map public public throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt IllegalArgumentException = call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() public static public static return IllegalArgumentException decl Map public public throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt IllegalArgumentException = call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() decl commons decl org String decl objectweb decl asm ClassWriter public < public < decl_stmt java.lang.String = + decl_stmt com.sun.java.util.jar.pack.ClassWriter = new | call ClassWriter.visit() call ClassWriter.visit() call ClassWriter.visit() call ClassWriter.visit() call ClassWriter.visit() | | | call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) decl_stmt com.sun.jdi.Method = decl_stmt GeneratorAdapter = new | call decl objectweb.loadThis() call decl objectweb.loadThis() call decl objectweb.loadThis() call decl objectweb.loadThis() call decl objectweb.loadThis() call decl objectweb.loadArgs() call decl objectweb.loadArgs() call decl objectweb.loadArgs() call decl objectweb.loadArgs() call decl objectweb.loadArgs() call decl objectweb.invokeConstructor() call decl objectweb.invokeConstructor() call decl objectweb.invokeConstructor() call decl objectweb.invokeConstructor() call decl objectweb.invokeConstructor() call decl objectweb.returnValue() call decl objectweb.returnValue() call decl objectweb.returnValue() call decl objectweb.returnValue() call decl objectweb.returnValue() call decl objectweb.endMethod() call decl objectweb.endMethod() call decl objectweb.endMethod() call decl objectweb.endMethod() call decl objectweb.endMethod() decl_stmt GeneratorAdapter = new | | call decl asm.push() call decl asm.push() call decl asm.push() call decl asm.push() call decl asm.push() call decl asm.returnValue() call decl asm.returnValue() call decl asm.returnValue() call decl asm.returnValue() call decl asm.returnValue() call decl asm.endMethod() call decl asm.endMethod() call decl asm.endMethod() call decl asm.endMethod() call decl asm.endMethod() decl_stmt byte = call ClassWriter.toByteArray() call ClassWriter.toByteArray() call ClassWriter.toByteArray() call ClassWriter.toByteArray() call ClassWriter.toByteArray() return decl Map Expression ClassLoader Loader IllegalArgumentException decl Class Method decl Map public public throws decl_stmt java.lang.ClassLoader = decl_stmt Loader = new decl_stmt java.lang.Class < = call Loader.createFakeClass() call Loader.createFakeClass() call Loader.createFakeClass() call Loader.createFakeClass() call Loader.createFakeClass() decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() decl_stmt java.util.Map < = call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() decl_stmt org.apache.solr.analytics.expression.Expression = call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() decl_stmt IllegalArgumentException = call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() decl_stmt java.util.Map < = new <> call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() = call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() = call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() = call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() public static public static throw new decl Map PrintWriter Expression StringWriter String ArithmeticException public public throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.String = decl_stmt org.apache.solr.analytics.expression.Expression = decl_stmt ArithmeticException = call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call ArithmeticException.getMessage() call ArithmeticException.getMessage() call ArithmeticException.getMessage() call ArithmeticException.getMessage() call ArithmeticException.getMessage() decl_stmt StringWriter = new decl_stmt PrintWriter = new call ArithmeticException.printStackTrace() call ArithmeticException.printStackTrace() call ArithmeticException.printStackTrace() call ArithmeticException.printStackTrace() call ArithmeticException.printStackTrace() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() + + String decl Map Expression public public throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.String = decl_stmt org.apache.solr.analytics.expression.Expression = call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate() call Expression.evaluate()