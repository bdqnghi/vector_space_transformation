org.apache.solr.handler java.io.IOException import java.lang.invoke.MethodHandles import java.time.Instant import java.util.ArrayList import java.util.Date import java.util.HashMap import java.util.Iterator import java.util.LinkedList import java.util.List import java.util.Locale import java.util.Map import org.apache.solr.client.solrj.impl.CloudSolrClient import org.apache.solr.update.CdcrUpdateLog import org.apache.solr.update.UpdateLog import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.handler.CdcrReplicatorState decl FixedQueue String long decl Map CloudSolrClient decl CdcrLogReader BenchmarkTimer decl CdcrUpdateLog String final final final final final = if != call decl CdcrUpdateLog.close() call decl CdcrUpdateLog.close() call decl CdcrUpdateLog.close() call decl CdcrUpdateLog.close() call decl CdcrUpdateLog.close() = return return return return try call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() catch call BenchmarkTimer.warn() call BenchmarkTimer.warn() call BenchmarkTimer.warn() call BenchmarkTimer.warn() call BenchmarkTimer.warn() if ! call long.containsKey() call long.containsKey() call long.containsKey() call long.containsKey() call long.containsKey() call long.put() call long.put() call long.put() call long.put() call long.put() call long.put() call long.put() call long.put() call long.put() call long.put() call long.get() call long.get() call long.get() call long.get() call long.get() + call decl Map.add() call decl Map.add() call decl Map.add() call decl Map.add() call decl Map.add() new new ++ = return if call long.containsKey() call long.containsKey() call long.containsKey() call long.containsKey() call long.containsKey() return call long.get() call long.get() call long.get() call long.get() call long.get() else return ErrorQueueEntry decl Iterator decl List < < decl_stmt java.util.List < = new <> synchronized decl_stmt java.util.Iterator < = call decl Map.iterator() call decl Map.iterator() call decl Map.iterator() call decl Map.iterator() call decl Map.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt ErrorQueueEntry = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call ErrorQueueEntry.timestamp() call ErrorQueueEntry.timestamp() call ErrorQueueEntry.timestamp() call ErrorQueueEntry.timestamp() call ErrorQueueEntry.timestamp() call ErrorQueueEntry.timestamp() call ErrorQueueEntry.timestamp() call ErrorQueueEntry.timestamp() call ErrorQueueEntry.timestamp() call ErrorQueueEntry.type() call ErrorQueueEntry.type() call ErrorQueueEntry.type() call ErrorQueueEntry.type() call ErrorQueueEntry.type() call ErrorQueueEntry.type() call ErrorQueueEntry.type() call ErrorQueueEntry.type() call ErrorQueueEntry.type() return if != && call decl CdcrUpdateLog.getLastVersion() call decl CdcrUpdateLog.getLastVersion() call decl CdcrUpdateLog.getLastVersion() call decl CdcrUpdateLog.getLastVersion() call decl CdcrUpdateLog.getLastVersion() != - return call decl CdcrUpdateLog.getLastVersion() call decl CdcrUpdateLog.getLastVersion() call decl CdcrUpdateLog.getLastVersion() call decl CdcrUpdateLog.getLastVersion() call decl CdcrUpdateLog.getLastVersion() >> return return public public return = += - = - final final switch case case case if ! + return default: long decl_stmt long = if != - += - return double long decl_stmt long = for : += decl_stmt double = double / return / double long decl_stmt long = != : decl_stmt double = double / return / double long decl_stmt long = != : += != : decl_stmt double = double / return / public synchronized public synchronized if > return