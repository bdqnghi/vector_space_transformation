org.apache.solr.client.solrj.io.stream java.io.IOException import java.util.ArrayList import java.util.LinkedList import java.util.List import java.util.Locale import org.apache.solr.client.solrj.io.Tuple import org.apache.solr.client.solrj.io.comp.FieldComparator import org.apache.solr.client.solrj.io.comp.StreamComparator import org.apache.solr.client.solrj.io.stream.expr.Expressible import org.apache.solr.client.solrj.io.stream.expr.StreamExpression import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionNamedParameter import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionValue import org.apache.solr.client.solrj.io.stream.expr.StreamFactory import class org.apache.solr.client.solrj.io.stream.SortStream super super extends super implements Worker TupleStream long StreamComparator decl LinkedList Tuple Tuple private private throws = = = new decl_stmt java.util.LinkedList private < = new < decl_stmt org.apache.solr.client.solrj.io.Tuple private public public throws decl_stmt org.apache.solr.client.solrj.io.Tuple = call TupleStream.read() call TupleStream.read() call TupleStream.read() call TupleStream.read() call TupleStream.read() while ! call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() = call TupleStream.read() call TupleStream.read() call TupleStream.read() call TupleStream.read() call TupleStream.read() = public public call decl LinkedList.sort() call decl LinkedList.sort() call decl LinkedList.sort() call decl LinkedList.sort() call decl LinkedList.sort() public public if call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() return return call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() Tuple public public throws decl_stmt org.apache.solr.client.solrj.io.Tuple = call TupleStream.read() call TupleStream.read() call TupleStream.read() call TupleStream.read() call TupleStream.read() while ! = call TupleStream.read() call TupleStream.read() call TupleStream.read() call TupleStream.read() call TupleStream.read() = public public public public if return return StreamExpression public public throws decl_stmt org.apache.solr.client.solrj.io.stream.expr.StreamExpression = new if instanceof call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) else throw new if instanceof call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new else throw new return public public decl List public < public < decl_stmt java.util.List < = new < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public throws call TupleStream.open() call TupleStream.open() call TupleStream.open() call TupleStream.open() call TupleStream.open() call Worker.readStream() call Worker.readStream() call Worker.readStream() call Worker.readStream() call Worker.readStream() call org.apache.solr.client.solrj.io.stream.Worker.sort() call org.apache.solr.client.solrj.io.stream.Worker.sort() call org.apache.solr.client.solrj.io.stream.Worker.sort() call org.apache.solr.client.solrj.io.stream.Worker.sort() call org.apache.solr.client.solrj.io.stream.Worker.sort() public public throws call TupleStream.close() call TupleStream.close() call TupleStream.close() call TupleStream.close() call TupleStream.close() public public throws return call org.apache.solr.client.solrj.io.stream.Worker.read() call org.apache.solr.client.solrj.io.stream.Worker.read() call org.apache.solr.client.solrj.io.stream.Worker.read() call org.apache.solr.client.solrj.io.stream.Worker.read() call org.apache.solr.client.solrj.io.stream.Worker.read() public public return public public return