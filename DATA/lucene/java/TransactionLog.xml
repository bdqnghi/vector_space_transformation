org.apache.solr.update java.io.Closeable import java.io.File import java.io.IOException import java.io.OutputStream import java.io.RandomAccessFile import java.lang.invoke.MethodHandles import java.nio.ByteBuffer import java.nio.channels.Channels import java.nio.channels.FileChannel import java.nio.file.Files import java.util.ArrayList import java.util.Collection import java.util.HashMap import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.concurrent.atomic.AtomicInteger import org.apache.lucene.util.BytesRef import org.apache.solr.common.SolrException import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.util.DataInputInputStream import org.apache.solr.common.util.FastInputStream import org.apache.solr.common.util.FastOutputStream import org.apache.solr.common.util.JavaBinCodec import org.apache.solr.common.util.ObjectReleaseTracker import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.update.TransactionLog super super implements RandomAccessFile decl Map Logger boolean FastOutputStream AtomicInteger boolean int decl ObjectResolver long File int String decl JavaBinCodec boolean decl List OutputStream long FileChannel BytesRef public public throws if instanceof decl_stmt org.apache.lucene.util.BytesRef = return throw new + + Integer public public throws if == return decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == else int public public throws decl_stmt int = if != return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() - else throw new public public synchronized return ChannelFastInputStream decl byte long long public public throws decl_stmt long synchronized call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() = call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() decl_stmt byte = new call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() decl_stmt long = - call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - if < return decl_stmt ChannelFastInputStream = new call ChannelFastInputStream.read() call ChannelFastInputStream.read() call ChannelFastInputStream.read() call ChannelFastInputStream.read() call ChannelFastInputStream.read() for = < ++ if != call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) return return public public synchronized = call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() = return public public throws synchronized assert == call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call RandomAccessFile.setLength() call RandomAccessFile.setLength() call RandomAccessFile.setLength() call RandomAccessFile.setLength() call RandomAccessFile.setLength() call org.apache.solr.common.util.FastOutputStream.setWritten(long) call org.apache.solr.common.util.FastOutputStream.setWritten(long) call org.apache.solr.common.util.FastOutputStream.setWritten(long) call org.apache.solr.common.util.FastOutputStream.setWritten(long) call org.apache.solr.common.util.FastOutputStream.setWritten(long) assert call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() == = LogCodec long public public decl_stmt LogCodec = new try decl_stmt long = call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.writeVal() call LogCodec.writeVal() call LogCodec.writeVal() call LogCodec.writeVal() call LogCodec.writeVal() return catch throw new Map LogCodec private private throws = != : new decl_stmt LogCodec = new decl_stmt java.util.Map = call LogCodec.unmarshal() call LogCodec.unmarshal() call LogCodec.unmarshal() call LogCodec.unmarshal() call LogCodec.unmarshal() synchronized = < call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + int Integer protected protected < if == return decl_stmt int = call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for : decl_stmt java.lang.Integer = if > = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() assert call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < < synchronized return new <> Map long protected protected throws decl_stmt long = call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() assert == decl_stmt java.util.Map = new < call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) protected protected throws call org.apache.solr.common.util.FastOutputStream.writeInt(int) call org.apache.solr.common.util.FastOutputStream.writeInt(int) call org.apache.solr.common.util.FastOutputStream.writeInt(int) call org.apache.solr.common.util.FastOutputStream.writeInt(int) call org.apache.solr.common.util.FastOutputStream.writeInt(int) call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() - ++ private private throws if call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() != return synchronized if call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() != return if != int LogCodec MemOutputStream long SolrInputDocument public public decl_stmt LogCodec = new decl_stmt org.apache.solr.common.SolrInputDocument = try decl_stmt int = = * + >> + decl_stmt org.apache.solr.update.MemOutputStream = new new call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() | call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeSolrInputDocument() call LogCodec.writeSolrInputDocument() call LogCodec.writeSolrInputDocument() call LogCodec.writeSolrInputDocument() call LogCodec.writeSolrInputDocument() = int call MemOutputStream.size() call MemOutputStream.size() call MemOutputStream.size() call MemOutputStream.size() call MemOutputStream.size() synchronized decl_stmt long = call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() assert != call MemOutputStream.writeAll() call MemOutputStream.writeAll() call MemOutputStream.writeAll() call MemOutputStream.writeAll() call MemOutputStream.writeAll() return catch throw new LogCodec long BytesRef MemOutputStream public public decl_stmt LogCodec = new try decl_stmt org.apache.lucene.util.BytesRef = decl_stmt org.apache.solr.update.MemOutputStream = new new + call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() | call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeByteArray() call LogCodec.writeByteArray() call LogCodec.writeByteArray() call LogCodec.writeByteArray() call LogCodec.writeByteArray() synchronized decl_stmt long = call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() assert != call MemOutputStream.writeAll() call MemOutputStream.writeAll() call MemOutputStream.writeAll() call MemOutputStream.writeAll() call MemOutputStream.writeAll() return catch throw new LogCodec long MemOutputStream public public decl_stmt LogCodec = new try decl_stmt org.apache.solr.update.MemOutputStream = new new + call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() | call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeStr() call LogCodec.writeStr() call LogCodec.writeStr() call LogCodec.writeStr() call LogCodec.writeStr() synchronized decl_stmt long = call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call MemOutputStream.writeAll() call MemOutputStream.writeAll() call MemOutputStream.writeAll() call MemOutputStream.writeAll() call MemOutputStream.writeAll() return catch throw new LogCodec long public public decl_stmt LogCodec = new synchronized try decl_stmt long = call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() if == = call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() | call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeStr() call LogCodec.writeStr() call LogCodec.writeStr() call LogCodec.writeStr() call LogCodec.writeStr() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() assert call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() == call FileChannel.size() call FileChannel.size() call FileChannel.size() call FileChannel.size() call FileChannel.size() return catch throw new ChannelFastInputStream LogCodec public public if < return try synchronized call org.apache.solr.common.util.FastOutputStream.flushBuffer() call org.apache.solr.common.util.FastOutputStream.flushBuffer() call org.apache.solr.common.util.FastOutputStream.flushBuffer() call org.apache.solr.common.util.FastOutputStream.flushBuffer() call org.apache.solr.common.util.FastOutputStream.flushBuffer() decl_stmt ChannelFastInputStream = new decl_stmt LogCodec = new return call LogCodec.readVal() call LogCodec.readVal() call LogCodec.readVal() call LogCodec.readVal() call LogCodec.readVal() catch throw new int public public decl_stmt int = call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() if <= throw new + public public return call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() > public public if call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() == public public synchronized return call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() public public if == return try synchronized call org.apache.solr.common.util.FastOutputStream.flushBuffer() call org.apache.solr.common.util.FastOutputStream.flushBuffer() call org.apache.solr.common.util.FastOutputStream.flushBuffer() call org.apache.solr.common.util.FastOutputStream.flushBuffer() call org.apache.solr.common.util.FastOutputStream.flushBuffer() if == call java.io.RandomAccessFile.getFD() call java.io.RandomAccessFile.getFD() call java.io.RandomAccessFile.getFD() call java.io.RandomAccessFile.getFD() call java.io.RandomAccessFile.getFD() catch throw new public public try if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + synchronized call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.flush() call org.apache.solr.common.util.FastOutputStream.close() call org.apache.solr.common.util.FastOutputStream.close() call org.apache.solr.common.util.FastOutputStream.close() call org.apache.solr.common.util.FastOutputStream.close() call org.apache.solr.common.util.FastOutputStream.close() if try call File.toPath() call File.toPath() call File.toPath() call File.toPath() call File.toPath() catch catch throw new finally assert public public if call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() > call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) public public return + call File.toString() call File.toString() call File.toString() call File.toString() call File.toString() + + call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() + public public if != return call File.length() call File.length() call File.length() call File.length() call File.length() return public public return new public public throws return new long Object int public public throws decl_stmt long = synchronized if call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + + + call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() if >= call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() return call org.apache.solr.common.util.FastOutputStream.flushBuffer() call org.apache.solr.common.util.FastOutputStream.flushBuffer() call org.apache.solr.common.util.FastOutputStream.flushBuffer() call org.apache.solr.common.util.FastOutputStream.flushBuffer() call org.apache.solr.common.util.FastOutputStream.flushBuffer() if == synchronized if >= call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() return = decl_stmt java.lang.Object = decl_stmt int = assert == - - return public public public public synchronized return + + + + + + call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() + public public return public public throws return call FileChannel.size() call FileChannel.size() call FileChannel.size() call FileChannel.size() call FileChannel.size() public public return long Object int long long long public public throws if <= return decl_stmt long = decl_stmt int = decl_stmt long = - = - if <= return decl_stmt long = if >= else decl_stmt long = - = = = decl_stmt java.lang.Object = return public public return + public public public public synchronized return + + + + + + call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() call org.apache.solr.common.util.FastOutputStream.size() +