org.apache.solr.morphlines.solr com.codahale.metrics.MetricRegistry import com.google.common.base.Joiner import com.google.common.io.Files import com.typesafe.config.Config import org.apache.commons.io.FileUtils import org.apache.lucene.util.Constants import org.apache.solr.SolrTestCaseJ4 import org.apache.solr.client.solrj.SolrClient import org.apache.solr.client.solrj.SolrQuery import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.impl.XMLResponseParser import org.apache.solr.client.solrj.response.QueryResponse import org.apache.solr.common.SolrDocument import org.junit.After import org.junit.AfterClass import org.junit.Before import org.junit.BeforeClass import org.kitesdk.morphline.api.Collector import org.kitesdk.morphline.api.Command import org.kitesdk.morphline.api.MorphlineContext import org.kitesdk.morphline.api.Record import org.kitesdk.morphline.base.Compiler import org.kitesdk.morphline.base.FaultTolerance import org.kitesdk.morphline.base.Fields import org.kitesdk.morphline.base.Notifications import org.kitesdk.morphline.stdlib.PipeBuilder import org.slf4j.Logger import org.slf4j.LoggerFactory import java.io.ByteArrayInputStream import java.io.File import java.io.IOException import java.lang.invoke.MethodHandles import java.util.Arrays import java.util.Calendar import java.util.Collection import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.Locale import java.util.Map import java.util.Map.Entry import java.util.TimeZone import java.util.concurrent.atomic.AtomicInteger import class org.apache.solr.morphlines.solr.AbstractSolrMorphlineTestBase super super extends String boolean DocumentLoader AtomicInteger Command Object String Locale SolrClient String String Collector AtomicInteger Logger public static public static throws = new public static public static throws if != = Joiner protected static protected static throws decl_stmt Joiner = call Joiner.join() call Joiner.join() call Joiner.join() call Joiner.join() call Joiner.join() int public public throws = new if != = new else if = new else throw new decl_stmt int = call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() == : = new = public public throws = call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() = decl byte Integer Record File decl Map int Record protected protected < < < throws decl_stmt int = for = < ++ for : decl_stmt File = new decl_stmt byte = decl_stmt Record = new call Record.getFields() call Record.getFields() call Record.getFields() call Record.getFields() call Record.getFields() new call Record.getFields() call Record.getFields() call Record.getFields() call Record.getFields() call Record.getFields() call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() call Record.getFields() call Record.getFields() call Record.getFields() call Record.getFields() call Record.getFields() call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() call Collector.reset() call Collector.reset() call Collector.reset() call Collector.reset() call Collector.reset() decl_stmt java.lang.Integer = if != += else ++ + decl_stmt java.util.Map < = if != decl_stmt Record = call Collector.getFirstRecord() call Collector.getFirstRecord() call Collector.getFirstRecord() call Collector.getFirstRecord() call Collector.getFirstRecord() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if == call Record.getFirstValue() call Record.getFirstValue() call Record.getFirstValue() call Record.getFirstValue() call Record.getFirstValue() > else if == + call Record.get() call Record.get() call Record.get() call Record.get() call Record.get() else + call Record.get() call Record.get() call Record.get() call Record.get() call Record.get() private private return call Command.process() call Command.process() call Command.process() call Command.process() call Command.process() int QueryResponse int protected protected try call DocumentLoader.commitTransaction() call DocumentLoader.commitTransaction() call DocumentLoader.commitTransaction() call DocumentLoader.commitTransaction() call DocumentLoader.commitTransaction() call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) decl_stmt org.apache.solr.client.solrj.response.QueryResponse = call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) new call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() decl_stmt int = for : call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() ++ decl_stmt int = call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() return catch throw new SolrClient private private throws call Collector.reset() call Collector.reset() call Collector.reset() call Collector.reset() call Collector.reset() decl_stmt org.apache.solr.client.solrj.SolrClient = call org.apache.solr.client.solrj.SolrClient.deleteByQuery(String,String,int) call org.apache.solr.client.solrj.SolrClient.deleteByQuery(String,String,int) call org.apache.solr.client.solrj.SolrClient.deleteByQuery(String,String,int) call org.apache.solr.client.solrj.SolrClient.deleteByQuery(String,String,int) call org.apache.solr.client.solrj.SolrClient.deleteByQuery(String,String,int) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) protected protected throws return new private private return new new new SolrLocator File Config private private throws decl_stmt org.apache.solr.morphlines.solr.SolrLocator = new call org.apache.solr.morphlines.solr.SolrLocator.setSolrHomeDir(String) call org.apache.solr.morphlines.solr.SolrLocator.setSolrHomeDir(String) call org.apache.solr.morphlines.solr.SolrLocator.setSolrHomeDir(String) call org.apache.solr.morphlines.solr.SolrLocator.setSolrHomeDir(String) call org.apache.solr.morphlines.solr.SolrLocator.setSolrHomeDir(String) + decl_stmt File if new = new + else = new + + + decl_stmt org.apache.solr.core.Config = new call org.apache.solr.morphlines.solr.SolrLocator.toConfig(String) call org.apache.solr.morphlines.solr.SolrLocator.toConfig(String) call org.apache.solr.morphlines.solr.SolrLocator.toConfig(String) call org.apache.solr.morphlines.solr.SolrLocator.toConfig(String) call org.apache.solr.morphlines.solr.SolrLocator.toConfig(String) = call Config.getConfigList() call Config.getConfigList() call Config.getConfigList() call Config.getConfigList() call Config.getConfigList() return protected protected decl CompareType decl ExpectedResult boolean String decl Collection QueryResponse protected protected < throws decl_stmt org.apache.solr.client.solrj.response.QueryResponse = call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) new for < : decl_stmt java.lang.String = for : decl_stmt CompareType = decl_stmt boolean = for : call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() decl_stmt java.util.Collection < = if == if != && call boolean.contains() call boolean.contains() call boolean.contains() call boolean.contains() call boolean.contains() = break else for < = call boolean.iterator() call boolean.iterator() call boolean.iterator() call boolean.iterator() call boolean.iterator() decl_stmt java.lang.String = if != && call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() = break assert public < public < return public public return String public static public static throws decl_stmt java.lang.String = new + + + = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) new if = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) new + + + new + + +