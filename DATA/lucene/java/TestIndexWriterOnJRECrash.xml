org.apache.lucene.index java.io.IOException import java.io.InputStream import java.io.OutputStream import java.io.PrintStream import java.lang.ProcessBuilder.Redirect import java.lang.reflect.Field import java.lang.reflect.Method import java.nio.file.FileVisitResult import java.nio.file.Files import java.nio.file.Path import java.nio.file.Paths import java.nio.file.SimpleFileVisitor import java.util.ArrayList import java.util.List import java.util.Locale import java.util.concurrent.atomic.AtomicBoolean import org.apache.lucene.store.BaseDirectoryWrapper import org.apache.lucene.util.Constants import org.apache.lucene.util.SuppressForbidden import org.apache.lucene.util.TestUtil import com.carrotsearch.randomizedtesting.SeedUtils import class org.apache.lucene.index.TestIndexWriterOnJRECrash super super extends Path public public throws new = Thread int public public throws if == for = < ++ if return else decl_stmt int final final = decl_stmt java.lang.Thread = new public public try catch call java.lang.Thread.setPriority(int) call java.lang.Thread.setPriority(int) call java.lang.Thread.setPriority(int) call java.lang.Thread.setPriority(int) call java.lang.Thread.setPriority(int) call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() for = < ++ public public try catch ProcessBuilder Process Thread decl List PrintStream = public = public throws decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.lang.ProcessBuilder = new call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() decl_stmt Process = call java.lang.ProcessBuilder.start() call java.lang.ProcessBuilder.start() call java.lang.ProcessBuilder.start() call java.lang.ProcessBuilder.start() call java.lang.ProcessBuilder.start() decl_stmt java.io.PrintStream = decl_stmt java.lang.Thread = call Process.getInputStream() call Process.getInputStream() call Process.getInputStream() call Process.getInputStream() call Process.getInputStream() if call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call Process.waitFor() call Process.waitFor() call Process.waitFor() call Process.waitFor() call Process.waitFor() call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) if call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) decl byte Thread int public static public static final final final final decl_stmt java.lang.Thread = new public public try decl_stmt byte = new decl_stmt int while = != - if catch + call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() return decl byte int public public try decl_stmt byte = new decl_stmt int while = != - if catch + AtomicBoolean public public throws decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new new < public public throws if != throw else try = if if + if > call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) return return call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() public public throws if != throw else try = if if + if > return boolean String Method Object decl Class Field = public = public decl_stmt java.lang.String final final = decl_stmt boolean final final = call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) || call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) || call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) try if try decl_stmt java.lang.Class < = decl_stmt org.apache.solr.handler.dataimport.config.Field = call decl Class.getDeclaredField() call decl Class.getDeclaredField() call decl Class.getDeclaredField() call decl Class.getDeclaredField() call decl Class.getDeclaredField() call Field.setAccessible() call Field.setAccessible() call Field.setAccessible() call Field.setAccessible() call Field.setAccessible() decl_stmt java.lang.Object = call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) call com.sun.jdi.Field.get(Object) decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch - catch