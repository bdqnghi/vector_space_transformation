org.apache.lucene.index java.io.Closeable import java.io.IOException import java.nio.file.DirectoryStream import java.nio.file.Files import java.nio.file.Path import java.util.ArrayList import java.util.Collections import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.atomic.AtomicLong import java.util.regex.Pattern import org.apache.lucene.document.LongPoint import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.NumericDocValuesField import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.MatchAllDocsQuery import org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.Sort import org.apache.lucene.search.SortField import org.apache.lucene.search.TopDocs import org.apache.lucene.store.Directory import org.apache.lucene.store.FSDirectory import org.apache.lucene.store.IOContext import org.apache.lucene.store.MockDirectoryWrapper.Throttling import org.apache.lucene.store.MockDirectoryWrapper import org.apache.lucene.util.Bits import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.StringHelper import org.apache.lucene.util.TestUtil import class org.apache.lucene.index.TestDemoParallelLeafReader super super extends boolean Pattern for < : + + + + + public public throws if + + protected protected throws protected protected throws return public public throws LeafReader LeafReader throws decl_stmt org.apache.lucene.index.LeafReader = if != instanceof instanceof decl_stmt org.apache.lucene.index.LeafReader = new public public return public public return call LeafReader.decRef() call LeafReader.decRef() call LeafReader.decRef() call LeafReader.decRef() call LeafReader.decRef() return else return public public return public public return public public try return catch throw new protected protected throws return new Throwable protected protected throws decl_stmt java.lang.Throwable = for final final : if instanceof try catch if == = try catch if == = public public throws if + String boolean SegmentIDAndGen decl Set private private throws decl_stmt java.util.Set < = new < for : decl_stmt java.lang.String = call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() for : call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl_stmt boolean = for : decl_stmt SegmentIDAndGen = new if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() == if + + = public public return * SegmentIDAndGen public public if instanceof decl_stmt SegmentIDAndGen = return && == else return public public return + + public public try synchronized if + + + + catch + throw new SegmentInfo LeafReader SegmentInfos Path SegmentIDAndGen long LeafReader Directory final final throws assert instanceof decl_stmt org.apache.lucene.index.SegmentInfo = decl_stmt long = if + + + + + + + + if == if + + + return if > throw new + + + + decl_stmt SegmentIDAndGen final final = new call org.apache.lucene.index.SegmentInfo.getId() call org.apache.lucene.index.SegmentInfo.getId() call org.apache.lucene.index.SegmentInfo.getId() call org.apache.lucene.index.SegmentInfo.getId() call org.apache.lucene.index.SegmentInfo.getId() while synchronized decl_stmt org.apache.lucene.index.LeafReader = assert || == if == decl_stmt java.nio.file.Path = call SegmentIDAndGen.toString() call SegmentIDAndGen.toString() call SegmentIDAndGen.toString() call SegmentIDAndGen.toString() call SegmentIDAndGen.toString() decl_stmt org.apache.lucene.store.Directory final final = if == if + + + + + + call org.apache.lucene.index.SegmentInfo.getDiagnostics() call org.apache.lucene.index.SegmentInfo.getDiagnostics() call org.apache.lucene.index.SegmentInfo.getDiagnostics() call org.apache.lucene.index.SegmentInfo.getDiagnostics() call org.apache.lucene.index.SegmentInfo.getDiagnostics() + + if call Directory.listAll() call Directory.listAll() call Directory.listAll() call Directory.listAll() call Directory.listAll() != if + + call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() else if + + + + + + call org.apache.lucene.index.SegmentInfo.getDiagnostics() call org.apache.lucene.index.SegmentInfo.getDiagnostics() call org.apache.lucene.index.SegmentInfo.getDiagnostics() call org.apache.lucene.index.SegmentInfo.getDiagnostics() call org.apache.lucene.index.SegmentInfo.getDiagnostics() + + if + + decl_stmt org.apache.lucene.index.SegmentInfos = assert call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() == decl_stmt org.apache.lucene.index.LeafReader final final = new call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) if + + if call LeafReader.addReaderClosedListener() call LeafReader.addReaderClosedListener() call LeafReader.addReaderClosedListener() call LeafReader.addReaderClosedListener() call LeafReader.addReaderClosedListener() new else if + call LeafReader.getRefCount() call LeafReader.getRefCount() call LeafReader.getRefCount() call LeafReader.getRefCount() call LeafReader.getRefCount() call LeafReader.decRef() call LeafReader.decRef() call LeafReader.decRef() call LeafReader.decRef() call LeafReader.decRef() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() = = else if call LeafReader.tryIncRef() call LeafReader.tryIncRef() call LeafReader.tryIncRef() call LeafReader.tryIncRef() call LeafReader.tryIncRef() == if + + + = continue if + + + + call LeafReader.getRefCount() call LeafReader.getRefCount() call LeafReader.getRefCount() call LeafReader.getRefCount() call LeafReader.getRefCount() return protected protected return String SegmentIDAndGen decl Set long SegmentInfos private private throws decl_stmt org.apache.lucene.index.SegmentInfos = if decl_stmt java.util.Set < = new < for : decl_stmt java.lang.String = call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt long = if for : if decl_stmt SegmentIDAndGen = new assert <= if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() == && || && < if + try catch if + + + decl List public < public < throws if == = new <> for : decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return Throwable public public throws decl_stmt java.lang.Throwable = for : if instanceof try catch if == = public public public public final final return public public new public public return + + MergeSpecification decl_stmt MergeSpecification = if != = new for : call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() return public public throws return public public < throws return public public throws return public public throws return public public return + + String static static decl_stmt java.lang.String = if == return - else return TieredMergePolicy IndexWriterConfig Document int long Document IndexWriter MockDirectoryWrapper private private throws return new protected protected throws decl_stmt org.apache.lucene.index.IndexWriterConfig = decl_stmt org.apache.lucene.index.TieredMergePolicy = new call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) return protected protected throws decl_stmt org.apache.lucene.store.MockDirectoryWrapper = call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) return protected protected throws decl_stmt org.apache.lucene.index.IndexWriterConfig = call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) new decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt int = for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.document.Document = new decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() protected protected return TieredMergePolicy IndexWriterConfig protected protected throws decl_stmt org.apache.lucene.index.IndexWriterConfig = decl_stmt org.apache.lucene.index.TieredMergePolicy = new call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) return MockDirectoryWrapper protected protected throws decl_stmt org.apache.lucene.store.MockDirectoryWrapper = call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) return IndexWriterConfig IndexWriter int long Document Document protected protected throws decl_stmt org.apache.lucene.index.IndexWriterConfig = call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) new decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt int = for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.document.Document = new decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() protected protected return TieredMergePolicy NumericDocValues IndexWriterConfig Document int boolean long Document String NumericDocValues IndexWriter MockDirectoryWrapper private private final final throws return new protected protected throws decl_stmt org.apache.lucene.index.IndexWriterConfig = decl_stmt org.apache.lucene.index.TieredMergePolicy = new call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) return protected protected throws decl_stmt org.apache.lucene.store.MockDirectoryWrapper = call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) return protected protected throws decl_stmt org.apache.lucene.index.IndexWriterConfig = call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) new decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt int = if <= for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.document.Document = new decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) else decl_stmt NumericDocValues = + + for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() protected protected return protected protected throws decl_stmt java.lang.String = + if + + + + + + decl_stmt NumericDocValues = if == return decl_stmt int = decl_stmt boolean = for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) if != call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() if + + + + + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + = else if if + + + + + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + + TieredMergePolicy IndexWriterConfig protected protected throws decl_stmt org.apache.lucene.index.IndexWriterConfig = decl_stmt org.apache.lucene.index.TieredMergePolicy = new call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) return MockDirectoryWrapper protected protected throws decl_stmt org.apache.lucene.store.MockDirectoryWrapper = call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) return NumericDocValues IndexWriterConfig IndexWriter int long Document Document protected protected throws decl_stmt org.apache.lucene.index.IndexWriterConfig = call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) new decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt int = if <= for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.document.Document = new decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) else decl_stmt NumericDocValues = + + for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() protected protected return int Document long boolean String NumericDocValues protected protected throws decl_stmt java.lang.String = + if + + + + + + decl_stmt NumericDocValues = if == return decl_stmt int = decl_stmt boolean = for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) if != call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() if + + + + + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + = else if if + + + + + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + + TieredMergePolicy NumericDocValues IndexWriterConfig Document int boolean long Document NumericDocValues IndexWriter MockDirectoryWrapper private private final final final final throws return new protected protected throws decl_stmt org.apache.lucene.index.IndexWriterConfig = decl_stmt org.apache.lucene.index.TieredMergePolicy = new call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) if call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) return protected protected throws decl_stmt org.apache.lucene.store.MockDirectoryWrapper = call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) return protected protected throws decl_stmt org.apache.lucene.index.IndexWriterConfig = call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) new decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt int = if <= for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.document.Document = new decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new * call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) else decl_stmt NumericDocValues = + for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new * call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() / call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() protected protected return protected protected return protected protected throws if + + + + decl_stmt NumericDocValues = if == return decl_stmt int = decl_stmt boolean = for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) *= if != call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + + + + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + = else if + + + + + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + TieredMergePolicy IndexWriterConfig protected protected throws decl_stmt org.apache.lucene.index.IndexWriterConfig = decl_stmt org.apache.lucene.index.TieredMergePolicy = new call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) if call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) return MockDirectoryWrapper protected protected throws decl_stmt org.apache.lucene.store.MockDirectoryWrapper = call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setUseSlowOpenClosers(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) return NumericDocValues IndexWriterConfig IndexWriter int long Document Document protected protected throws decl_stmt org.apache.lucene.index.IndexWriterConfig = call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) new decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt int = if <= for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.document.Document = new decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new * call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) else decl_stmt NumericDocValues = + for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new * call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() / call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() protected protected return protected protected return boolean long NumericDocValues int Document protected protected throws if + + + + decl_stmt NumericDocValues = if == return decl_stmt int = decl_stmt boolean = for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) *= if != call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + + + + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + = else if + + + + + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + Path DirectoryReader AtomicLong ReindexingReader Document public public throws decl_stmt java.util.concurrent.atomic.AtomicLong = new decl_stmt java.nio.file.Path = decl_stmt ReindexingReader = call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) + call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() if + call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() decl_stmt org.apache.lucene.index.DirectoryReader = call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if + + try + call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() finally call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if + if + call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) + call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() if call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() = call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if + try + call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() finally call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() if call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() = call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if + try + call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() finally call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() int ReindexingReader int Document AtomicLong int DirectoryReader String int Path String public public throws decl_stmt java.util.concurrent.atomic.AtomicLong = new decl_stmt ReindexingReader = decl_stmt int = : decl_stmt int = decl_stmt java.nio.file.Path = decl_stmt int = decl_stmt int = for = < ++ if == = decl_stmt org.apache.lucene.document.Document = new decl_stmt java.lang.String decl_stmt java.lang.String if > && == = + = else = + ++ = call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) + if == call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() else call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() new if == if + + + + call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() decl_stmt org.apache.lucene.index.DirectoryReader = call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if + + try + call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() finally call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if call ReindexingReader.printRefCounts() call ReindexingReader.printRefCounts() call ReindexingReader.printRefCounts() call ReindexingReader.printRefCounts() call ReindexingReader.printRefCounts() = * if == call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if + + if > && == call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() new + if == if + + + + call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() = * if == if + + + + call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() = = * if != call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() int ReindexingReader int int Document AtomicLong long int long DirectoryReader String NumericDocValues LeafReader int Path String AtomicLong public public throws decl_stmt java.util.concurrent.atomic.AtomicLong = new decl_stmt java.util.concurrent.atomic.AtomicLong = new decl_stmt ReindexingReader = decl_stmt int = : decl_stmt int = decl_stmt java.nio.file.Path = decl_stmt int = decl_stmt int = for = < ++ if == if + = decl_stmt org.apache.lucene.document.Document = new decl_stmt java.lang.String decl_stmt java.lang.String if > && == = + = else = + ++ = call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) + - if == call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() else call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() new if == if + + + + call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() decl_stmt org.apache.lucene.index.DirectoryReader = call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if + + try int call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() finally call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if call ReindexingReader.printRefCounts() call ReindexingReader.printRefCounts() call ReindexingReader.printRefCounts() call ReindexingReader.printRefCounts() call ReindexingReader.printRefCounts() = * if == call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if + + if call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if + + if > && == call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() new + if == if + + + + call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() = * if == if + + + + call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() = = * if != call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() try = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) = for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.index.LeafReader = decl_stmt NumericDocValues = call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() if != decl_stmt int = call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() for = < ++ decl_stmt org.apache.lucene.document.Document = call LeafReader.document() call LeafReader.document() call LeafReader.document() call LeafReader.document() call LeafReader.document() decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) decl_stmt long = call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() if == else == / <= call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() Document IndexSearcher DirectoryReader ReindexingReader Path public public throws decl_stmt java.nio.file.Path = decl_stmt ReindexingReader = call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) + call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() if call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() decl_stmt org.apache.lucene.index.DirectoryReader = call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if + try decl_stmt org.apache.lucene.search.IndexSearcher = finally call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) + call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() if call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() = call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if + try decl_stmt org.apache.lucene.search.IndexSearcher = finally call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() if call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() if call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() = call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if + try decl_stmt org.apache.lucene.search.IndexSearcher = finally call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() int ReindexingReader int Document int IndexSearcher DirectoryReader String int Path String public public throws decl_stmt java.nio.file.Path = decl_stmt ReindexingReader = decl_stmt int = : decl_stmt int = decl_stmt int = decl_stmt int = for = < ++ if == = decl_stmt org.apache.lucene.document.Document = new decl_stmt java.lang.String decl_stmt java.lang.String if > && == = + = else = + ++ = call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) + if == call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() else call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() new if == if + + + call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() decl_stmt org.apache.lucene.index.DirectoryReader = call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() if + try decl_stmt org.apache.lucene.search.IndexSearcher = finally call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() call ReindexingReader.mgr() = * if > && == call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() call ReindexingReader.w() new + if == if + + + call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() call ReindexingReader.commit() = * if == if + + + call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() = = * if != call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() call ReindexingReader.close() private static private static throws int Document long boolean long NumericDocValues private static private static throws decl_stmt NumericDocValues = decl_stmt int = decl_stmt boolean = decl_stmt long = for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt long = * call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) if != call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + + + + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + = else if + + + + + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() if if instanceof == for : + if + + + else + + + TopDocs long NumericDocValues long private static private static throws decl_stmt org.apache.lucene.search.TopDocs = new new new decl_stmt NumericDocValues = decl_stmt long = for : decl_stmt long = >= call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() = TopDocs long long long NumericDocValues long private static private static throws decl_stmt NumericDocValues = for = < ++ decl_stmt long = decl_stmt long = if > decl_stmt long = = = decl_stmt org.apache.lucene.search.TopDocs = for : decl_stmt long = >= <= call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() decl List private static < private static < throws decl_stmt java.util.List < = new <> try < = for : if && call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return