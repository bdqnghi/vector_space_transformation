org.apache.lucene.facet java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import org.apache.lucene.document.BinaryDocValuesField import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.SortedSetDocValuesField import org.apache.lucene.document.StringField import org.apache.lucene.facet.sortedset.SortedSetDocValuesFacetField import org.apache.lucene.facet.taxonomy.AssociationFacetField import org.apache.lucene.facet.taxonomy.FacetLabel import org.apache.lucene.facet.taxonomy.FloatAssociationFacetField import org.apache.lucene.facet.taxonomy.IntAssociationFacetField import org.apache.lucene.facet.taxonomy.TaxonomyWriter import org.apache.lucene.index.IndexableField import org.apache.lucene.index.IndexableFieldType import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import class org.apache.lucene.facet.FacetsConfig DimConfig decl Map char String char decl Map protected protected return DimConfig public public decl_stmt DimConfig = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = return DimConfig public synchronized public synchronized decl_stmt DimConfig = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = DimConfig public synchronized public synchronized decl_stmt DimConfig = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = DimConfig public synchronized public synchronized decl_stmt DimConfig = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = DimConfig public synchronized public synchronized decl_stmt DimConfig = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = public < public < return private static private static < if throw new + + public public throws return String decl Map String decl List decl Map decl Set AssociationFacetField String decl Map decl List decl FacetsConfig decl DimConfig public public throws decl_stmt java.util.Map < < = new <> decl_stmt java.util.Map < < = new <> decl_stmt java.util.Map < < = new <> decl_stmt java.util.Set < = new <> for : if == decl_stmt org.apache.lucene.facet.FacetField = decl_stmt DimConfig = if == decl_stmt java.lang.String = decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl FacetsConfig.add() call decl FacetsConfig.add() call decl FacetsConfig.add() call decl FacetsConfig.add() call decl FacetsConfig.add() if == decl_stmt org.apache.lucene.facet.sortedset.SortedSetDocValuesFacetField = decl_stmt DimConfig = if == decl_stmt java.lang.String = decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl FacetsConfig.add() call decl FacetsConfig.add() call decl FacetsConfig.add() call decl FacetsConfig.add() call decl FacetsConfig.add() if == decl_stmt org.apache.lucene.facet.taxonomy.AssociationFacetField = decl_stmt DimConfig = if == if throw new + + if throw new + + decl_stmt java.lang.String = decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl FacetsConfig.add() call decl FacetsConfig.add() call decl FacetsConfig.add() call decl FacetsConfig.add() call decl FacetsConfig.add() decl_stmt java.lang.String if instanceof = else if instanceof = else = decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) throw new + + + + + + decl_stmt org.apache.lucene.document.Document = new for : decl_stmt org.apache.lucene.index.IndexableFieldType = if != && != && != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return FacetLabel decl FacetsConfig int IntsRefBuilder String decl DimConfig private private < < throws for < < : decl_stmt java.lang.String = decl_stmt org.apache.lucene.util.IntsRefBuilder = new for : decl_stmt DimConfig = if > && == throw new + + + + decl_stmt org.apache.lucene.facet.taxonomy.FacetLabel = new decl_stmt int = call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) if && || decl_stmt int = while > call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) = if == call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() - for = <= ++ new new call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() String FacetLabel String private private < < throws for < < : decl_stmt java.lang.String = for : decl_stmt org.apache.lucene.facet.taxonomy.FacetLabel = new decl_stmt java.lang.String = new new new new int int FacetLabel decl byte String private private < < throws for < < : decl_stmt byte = new decl_stmt int = decl_stmt java.lang.String = for : decl_stmt org.apache.lucene.facet.taxonomy.FacetLabel = new decl_stmt int = if + > = + ++ = >> ++ = >> ++ = >> ++ = byte if + > = + += for = <= ++ new new new int int decl byte int int protected protected decl_stmt byte = new * decl_stmt int = - decl_stmt int = for = < ++ decl_stmt int = + if > decl_stmt int if == - = else = - if & ~ == = byte ++ else if & ~ == = | & >> + = & += else if & ~ == = | & >> + = | & >> + = & += else if & ~ == = | & >> + = | & >> + = | & >> + = & += else = | & >> + = | & >> + = | & >> + = | & >> + = & += = return new private private if == throw new decl String public static public static decl_stmt java.lang.String = new + = return public static public static return StringBuilder String char int public static public static if == return decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt java.lang.String = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == throw new decl_stmt int = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() for = < ++ decl_stmt char = call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) if == || == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() - return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() int char decl char int decl List boolean public static public static decl_stmt java.util.List < = new <> decl_stmt int = if == return new decl_stmt char = new decl_stmt int = decl_stmt boolean = for = < ++ decl_stmt char = if ++ = = else if == = else if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new = else ++ = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new assert ! return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size()