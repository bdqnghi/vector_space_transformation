org.apache.lucene.codecs.blocktree java.io.IOException import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.TermState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.IndexInput import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.StringHelper import org.apache.lucene.util.automaton.Automaton import org.apache.lucene.util.automaton.RunAutomaton import org.apache.lucene.util.automaton.Transition import org.apache.lucene.util.fst.ByteSequenceOutputs import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.Outputs import class org.apache.lucene.codecs.blocktree.IntersectTermsEnum super super extends decl FST BytesRef Automaton BytesRef FieldReader decl FST Transition decl Outputs boolean BytesRef boolean decl BytesReader IndexInput RunAutomaton decl IntersectTermsEnumFrame IntersectTermsEnumFrame int private private = == : return public public throws call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() return call IntersectTermsEnumFrame.termState() call IntersectTermsEnumFrame.termState() call IntersectTermsEnumFrame.termState() call IntersectTermsEnumFrame.termState() call IntersectTermsEnumFrame.termState() call IntersectTermsEnumFrame.termState() call IntersectTermsEnumFrame.termState() call IntersectTermsEnumFrame.termState() call IntersectTermsEnumFrame.termState() decl IntersectTermsEnumFrame private private throws if >= decl_stmt org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame final final final = new + for = < ++ = new = assert == return decl FST private < private < if >= decl_stmt org.apache.lucene.util.fst.FST final final final final final final final < = new + for = < ++ = new <> = return BytesRef decl FST int int IntersectTermsEnumFrame private private throws assert != decl_stmt org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame final final = == : + = = = + call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.setState(int) call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.setState(int) call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.setState(int) call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.setState(int) call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.setState(int) decl_stmt org.apache.lucene.util.fst.FST < = decl_stmt int = assert > decl_stmt org.apache.lucene.util.BytesRef = while < decl_stmt int final final = & = call boolean.index() call boolean.index() call boolean.index() call boolean.index() call boolean.index() call boolean.index() call boolean.index() call boolean.index() call boolean.index() + assert != = call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() ++ = = assert call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.load(BytesRef) call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.load(BytesRef) call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.load(BytesRef) call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.load(BytesRef) call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.load(BytesRef) call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() return public public return public public throws call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() return public public throws call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() return public public throws call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData() return call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() call boolean.parent() int private private decl_stmt int = for = < ++ = call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) + & assert != - return decl FST int int int int int long boolean int boolean private private throws assert == if < = decl_stmt org.apache.lucene.util.fst.FST < = assert == for = <= ++ while decl_stmt int final final = decl_stmt int final final = call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() decl_stmt int final final = decl_stmt int final final = decl_stmt long final final = decl_stmt int final final = decl_stmt boolean final final = decl_stmt boolean final final = call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() = + if < = if && = break else decl_stmt int final final = call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() if < if == if ! call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() continue else return continue else if == if == && continue return else if || == = = = = call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() call IntersectTermsEnumFrame.suffixesReader() = = = + return assert long private private throws while == if ! call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() break else if == throw decl_stmt long final final = = - = assert == return call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() int int int boolean private private throws assert = = decl_stmt int = decl_stmt boolean if == - decl_stmt int = decl_stmt int = if == if == throw = - = return else while if == if == call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() else if == throw else = - = return = call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() for = < ++ if + != + break break else decl_stmt int = decl_stmt int = if == - ++ if == if == throw = - = = = - else while if == if == call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() call IntersectTermsEnumFrame.loadNextFloorBlock() else if == throw else = - = return = call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() for = < - ++ if + != + break break if >= && + - & > break return public public return public public throws try return catch = return decl byte int decl byte int int int decl byte int int int int int int int int boolean private private throws decl_stmt boolean if = assert == else = while assert == decl_stmt int decl_stmt int if != decl_stmt byte final final final = decl_stmt int final final = & if < decl_stmt int = while < = call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() if & >= continue continue = continue continue while > if >= - if == = return = - = = continue continue ++ call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) if < decl_stmt int = while < = call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next() if & >= continue continue = continue continue if != && ! decl_stmt int final final = + if < = continue continue decl_stmt byte final final final = decl_stmt int final final = - assert == decl_stmt int decl_stmt int = if > decl_stmt byte final final final = decl_stmt int = - assert >= decl_stmt int final final = while < if ++ != ++ = continue continue = else = + - decl_stmt int final final = while < if ++ != ++ = continue continue = = decl_stmt int = + for = + < ++ = = call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) & if == - = continue continue else = = if = = = else if if if == - = == else if == - if call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) = else = if = return else else else if call RunAutomaton.isAccept() call RunAutomaton.isAccept() call RunAutomaton.isAccept() call RunAutomaton.isAccept() call RunAutomaton.isAccept() assert == || call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() > : + call int.utf8ToString() call int.utf8ToString() call int.utf8ToString() call int.utf8ToString() call int.utf8ToString() + + call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() return else = int private private decl_stmt int = call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) for = < ++ call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) if >= && <= && == return return static static try return + + catch return int private private decl_stmt int final final = + if < = = public public throw new public public throw new public public throw new public public throw new