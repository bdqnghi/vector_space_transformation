org.apache.solr.cloud.overseer java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.HashMap import java.util.LinkedHashMap import java.util.List import java.util.Locale import java.util.Map import java.util.Set import org.apache.commons.lang.StringUtils import org.apache.solr.cloud.Assign import org.apache.solr.cloud.Overseer import org.apache.solr.cloud.OverseerCollectionMessageHandler import org.apache.solr.common.SolrException import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.DocCollection import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.ZkNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.util.Utils import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.COLL_PROP_PREFIX import static static org.apache.solr.cloud.overseer.CollectionMutator.checkCollectionKeyExistence import static static org.apache.solr.cloud.overseer.CollectionMutator.checkKeyExistence import static static org.apache.solr.common.params.CommonParams.NAME import class org.apache.solr.cloud.overseer.ReplicaMutator ZkStateReader Logger decl Map protected protected assert != assert != if return decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return new decl Map protected protected assert != if ! return decl_stmt java.util.Map < = new <> call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() return new protected protected return protected protected return protected protected assert != return String String decl Map Slice boolean String Replica String String String DocCollection public public if == || == || == || == || == throw new + + + + + + + + + + decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = if == = + = call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt boolean = if if && == throw new + + + + + = else = decl_stmt org.apache.solr.common.cloud.Replica = if == throw new + + + + + + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + + + + if call Replica.getStr() call Replica.getStr() call Replica.getStr() call Replica.getStr() call Replica.getStr() return decl_stmt java.util.Map < = if == call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() else for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if else decl_stmt org.apache.solr.common.cloud.Slice = new decl_stmt org.apache.solr.common.cloud.DocCollection = return new String Slice String Replica DocCollection String String String DocCollection public public if == || == || == || == throw new + + + + + + + + decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = if == = + decl_stmt org.apache.solr.common.cloud.Replica = if == throw new + + + + + + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + + + + + + decl_stmt java.lang.String = call Replica.getStr() call Replica.getStr() call Replica.getStr() call Replica.getStr() call Replica.getStr() if == return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + + + + + + decl_stmt org.apache.solr.common.cloud.DocCollection = decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) decl_stmt org.apache.solr.common.cloud.DocCollection = return new public public if call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() return else return decl List boolean ClusterState DocCollection Integer String decl Map ZkWriteCommand protected protected final final decl_stmt java.lang.String final final = if ! return decl_stmt java.lang.Integer = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.util.List < = new <> decl_stmt org.apache.solr.cloud.overseer.ZkWriteCommand = decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt boolean = if ! && != decl_stmt java.util.Map < = call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() = new new decl_stmt org.apache.solr.common.cloud.DocCollection = = return != : decl Map Slice String Replica String decl Map decl Set DocCollection String String String Replica decl Map decl List DocCollection private private final final decl_stmt java.lang.String = decl_stmt java.lang.String = if == = if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + else = if == = if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + if == if = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt org.apache.solr.common.cloud.Slice = decl_stmt java.util.Map < = new <> call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() if != decl_stmt org.apache.solr.common.cloud.Replica = call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() if != if call Replica.containsKey() call Replica.containsKey() call Replica.containsKey() call Replica.containsKey() call Replica.containsKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call Replica.get() call Replica.get() call Replica.get() call Replica.get() call Replica.get() for < : call Replica.getProperties() call Replica.getProperties() call Replica.getProperties() call Replica.getProperties() call Replica.getProperties() if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl_stmt java.util.Set < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.util.List < = new <> for < : if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl_stmt java.lang.String = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl_stmt java.lang.String = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl_stmt java.lang.String = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl_stmt org.apache.solr.common.cloud.Replica = new decl_stmt java.util.Map < = decl_stmt java.util.Map < decl_stmt org.apache.solr.common.cloud.DocCollection = if != = = = call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) = call Slice.getProperties() call Slice.getProperties() call Slice.getProperties() call Slice.getProperties() call Slice.getProperties() = call org.apache.solr.common.cloud.Slice.getReplicasCopy() call org.apache.solr.common.cloud.Slice.getReplicasCopy() call org.apache.solr.common.cloud.Slice.getReplicasCopy() call org.apache.solr.common.cloud.Slice.getReplicasCopy() call org.apache.solr.common.cloud.Slice.getReplicasCopy() else = new <> = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() = new decl_stmt org.apache.solr.common.cloud.DocCollection = return new String Slice String protected protected final final decl_stmt java.lang.String = if ! return decl_stmt java.lang.String = if == || == call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return decl_stmt org.apache.solr.common.cloud.Slice = if == call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return return decl Map Slice ZkNodeProps Slice boolean decl Map decl List decl Map String private private decl_stmt org.apache.solr.common.cloud.Slice = decl_stmt java.util.Map < = call Slice.getProperties() call Slice.getProperties() call Slice.getProperties() call Slice.getProperties() call Slice.getProperties() if call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt boolean = for < : call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() if continue if != = break if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.util.Map < = new <> decl_stmt java.util.List < = new <> for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if continue decl_stmt org.apache.solr.common.cloud.Slice = if call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() == if call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() != && call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() call org.apache.solr.common.cloud.Slice.getParent() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() for < : call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() if != = break break call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.lang.String = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new return new return