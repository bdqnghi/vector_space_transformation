org.apache.lucene.search.spans java.io.IOException import java.util.Map import java.util.Objects import java.util.Set import java.util.TreeMap import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.search.BoostQuery import org.apache.lucene.search.Explanation import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.Scorer import class org.apache.lucene.search.spans.SpanBoostQuery super super extends SpanQuery float public public return public public return SpanBoostQuery public public if == return decl_stmt org.apache.lucene.search.spans.SpanBoostQuery = return call SpanQuery.equals() call SpanQuery.equals() call SpanQuery.equals() call SpanQuery.equals() call SpanQuery.equals() && == int public public decl_stmt int = = * + call SpanQuery.hashCode() call SpanQuery.hashCode() call SpanQuery.hashCode() call SpanQuery.hashCode() call SpanQuery.hashCode() = * + return SpanQuery SpanBoostQuery public public throws if == return decl_stmt org.apache.lucene.search.spans.SpanQuery final final = call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() if != return new if call SpanQuery.getClass() call SpanQuery.getClass() call SpanQuery.getClass() call SpanQuery.getClass() call SpanQuery.getClass() == decl_stmt org.apache.lucene.search.spans.SpanBoostQuery = return new * return StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public return call SpanQuery.getField() call SpanQuery.getField() call SpanQuery.getField() call SpanQuery.getField() call SpanQuery.getField() decl Map SpanWeight public public throws decl_stmt org.apache.lucene.search.spans.SpanWeight final final = call SpanQuery.createWeight() call SpanQuery.createWeight() call SpanQuery.createWeight() call SpanQuery.createWeight() call SpanQuery.createWeight() if == return decl_stmt java.util.Map < = new <> call SpanWeight.extractTermContexts() call SpanWeight.extractTermContexts() call SpanWeight.extractTermContexts() call SpanWeight.extractTermContexts() call SpanWeight.extractTermContexts() call org.apache.lucene.search.spans.SpanWeight.normalize(float,float) call org.apache.lucene.search.spans.SpanWeight.normalize(float,float) call org.apache.lucene.search.spans.SpanWeight.normalize(float,float) call org.apache.lucene.search.spans.SpanWeight.normalize(float,float) call org.apache.lucene.search.spans.SpanWeight.normalize(float,float) return new public public < call SpanWeight.extractTerms() call SpanWeight.extractTerms() call SpanWeight.extractTerms() call SpanWeight.extractTerms() call SpanWeight.extractTerms() public public throws return call SpanWeight.explain() call SpanWeight.explain() call SpanWeight.explain() call SpanWeight.explain() call SpanWeight.explain() public public throws return call org.apache.lucene.search.spans.SpanWeight.getValueForNormalization() call org.apache.lucene.search.spans.SpanWeight.getValueForNormalization() call org.apache.lucene.search.spans.SpanWeight.getValueForNormalization() call org.apache.lucene.search.spans.SpanWeight.getValueForNormalization() call org.apache.lucene.search.spans.SpanWeight.getValueForNormalization() public public call org.apache.lucene.search.spans.SpanWeight.normalize(float,float) call org.apache.lucene.search.spans.SpanWeight.normalize(float,float) call org.apache.lucene.search.spans.SpanWeight.normalize(float,float) call org.apache.lucene.search.spans.SpanWeight.normalize(float,float) call org.apache.lucene.search.spans.SpanWeight.normalize(float,float) * public public throws return call SpanWeight.getSpans() call SpanWeight.getSpans() call SpanWeight.getSpans() call SpanWeight.getSpans() call SpanWeight.getSpans() public public throws return call org.apache.lucene.search.spans.SpanWeight.scorer(LeafReaderContext) call org.apache.lucene.search.spans.SpanWeight.scorer(LeafReaderContext) call org.apache.lucene.search.spans.SpanWeight.scorer(LeafReaderContext) call org.apache.lucene.search.spans.SpanWeight.scorer(LeafReaderContext) call org.apache.lucene.search.spans.SpanWeight.scorer(LeafReaderContext) public public < call SpanWeight.extractTermContexts() call SpanWeight.extractTermContexts() call SpanWeight.extractTermContexts() call SpanWeight.extractTermContexts() call SpanWeight.extractTermContexts() public public < public public throws return public public throws return public public * public public throws return public public throws return public public <