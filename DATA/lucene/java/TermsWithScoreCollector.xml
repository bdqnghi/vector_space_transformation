org.apache.lucene.search.join java.io.IOException import java.util.Arrays import org.apache.lucene.index.BinaryDocValues import org.apache.lucene.index.SortedSetDocValues import org.apache.lucene.search.Scorer import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRefHash import class super super extends super implements int ScoreMode BytesRefHash Scorer decl float public public return public public return public public throws = static < static < if switch case return new default: return new else switch case return new default: return new float int int float public public throws decl_stmt int = call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) if < = - - else if >= decl_stmt int = = if == else if == decl_stmt float = call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() decl_stmt float = if == = else switch case = + break case if < = break case if > = break default: throw new + float int float public public throws decl_stmt int = call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) if < = - - else if >= = = decl_stmt float = call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() decl_stmt float = if == = = else = + ++ public public if != for = < ++ = / = return long int int public public throws decl_stmt long while = != decl_stmt int = call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) if < = - - else if >= decl_stmt int = = if == else if == switch case += call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() break case = call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() break case = call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() break default: throw new + long int public public throws decl_stmt long while = != decl_stmt int = call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) if < = - - else if >= = = += call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() ++ public public if != for = < ++ = / = return public public return