org.apache.lucene.search.suggest.fst java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.List import java.util.Set import org.apache.lucene.search.suggest.InputIterator import org.apache.lucene.search.suggest.Lookup import org.apache.lucene.search.suggest.SortedInputIterator import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.ByteArrayDataOutput import org.apache.lucene.store.DataInput import org.apache.lucene.store.DataOutput import org.apache.lucene.store.Directory import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.OfflineSorter.ByteSequencesWriter import org.apache.lucene.util.fst.Builder import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.FST.Arc import org.apache.lucene.util.fst.FST.BytesReader import org.apache.lucene.util.fst.PositiveIntOutputs import org.apache.lucene.util.fst.Util import org.apache.lucene.util.fst.Util.Result import org.apache.lucene.util.fst.Util.TopResults import class org.apache.lucene.search.suggest.fst.WFSTCompletionLookup super super extends super implements long String decl FST Directory boolean decl Comparator BytesRef decl Builder InputIterator long PositiveIntOutputs IntsRefBuilder BytesRefBuilder public public throws if throw new if throw new = decl_stmt org.apache.lucene.util.BytesRef = new decl_stmt org.apache.lucene.search.suggest.InputIterator = new decl_stmt org.apache.lucene.util.IntsRefBuilder = new decl_stmt org.apache.lucene.util.BytesRefBuilder = decl_stmt org.apache.lucene.util.fst.PositiveIntOutputs = decl_stmt org.apache.lucene.util.fst.Builder < = new <> while = call InputIterator.next() call InputIterator.next() call InputIterator.next() call InputIterator.next() call InputIterator.next() != decl_stmt long = call org.apache.lucene.search.suggest.InputIterator.weight() call org.apache.lucene.search.suggest.InputIterator.weight() call org.apache.lucene.search.suggest.InputIterator.weight() call org.apache.lucene.search.suggest.InputIterator.weight() call org.apache.lucene.search.suggest.InputIterator.weight() if == = new else if call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() continue call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) ++ = call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() public public throws if == return call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() return public public throws = = new <> return BytesRefBuilder decl TopResults Long BytesRefBuilder decl List decl Arc CharsRefBuilder int public < public < < if != throw new assert > if throw new if == return decl_stmt org.apache.lucene.util.BytesRefBuilder = new call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) decl_stmt int = call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() decl_stmt Arc < = new <> decl_stmt java.lang.Long = try = call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() catch throw new if == return decl_stmt java.util.List < = new <> decl_stmt org.apache.lucene.util.CharsRefBuilder = new if && call decl Arc.isFinal() call decl Arc.isFinal() call decl Arc.isFinal() call decl Arc.isFinal() call decl Arc.isFinal() call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() + if -- == return decl_stmt TopResults < = try = ! assert catch throw new decl_stmt org.apache.lucene.util.BytesRefBuilder = new for < : call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() return long int decl byte int BytesReader private private < throws assert == call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() decl_stmt long = decl_stmt BytesReader = call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getFirstArc() call decl FST.getFirstArc() call decl FST.getFirstArc() call decl FST.getFirstArc() call decl FST.getFirstArc() decl_stmt byte = decl_stmt int = decl_stmt int = + while < if call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() ++ & == return else += return decl Arc Long public public if == return decl_stmt Arc < = new <> decl_stmt java.lang.Long = try = new catch throw new if == || ! call decl Arc.isFinal() call decl Arc.isFinal() call decl Arc.isFinal() call decl Arc.isFinal() call decl Arc.isFinal() return else return + private static private static return - private static private static if < || || throw new + return - int protected protected < throws if + >= = + protected protected -= + return public public return public public return == : call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() public < public < if == return else return public public return