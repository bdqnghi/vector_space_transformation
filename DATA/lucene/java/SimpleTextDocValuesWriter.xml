org.apache.lucene.codecs.simpletext java.io.IOException import java.math.BigInteger import java.text.DecimalFormat import java.text.DecimalFormatSymbols import java.util.HashSet import java.util.Iterator import java.util.Locale import java.util.Set import org.apache.lucene.codecs.DocValuesConsumer import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.index.DocValuesType import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.IOUtils import class org.apache.lucene.codecs.simpletext.SimpleTextDocValuesWriter super super extends BytesRef BytesRef BytesRef decl Set BytesRef BytesRef BytesRef BytesRefBuilder IndexOutput BytesRef int BytesRef BytesRef private private assert ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() : + + call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return BigInteger BigInteger Number String long long long String BigInteger long int StringBuilder DecimalFormat int public public < throws assert assert == || decl_stmt long = decl_stmt long = for : decl_stmt long = == : = = decl_stmt java.math.BigInteger = decl_stmt java.math.BigInteger = decl_stmt java.math.BigInteger = call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) decl_stmt int = call java.math.BigInteger.toString() call java.math.BigInteger.toString() call java.math.BigInteger.toString() call java.math.BigInteger.toString() call java.math.BigInteger.toString() decl_stmt java.lang.StringBuilder = new for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.lang.String final final = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.text.DecimalFormat final final = new new decl_stmt int = for : decl_stmt long = == : assert >= decl_stmt java.lang.Number = decl_stmt java.lang.String = call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) assert call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() if == else ++ assert <= assert == : + + + public public < throws assert assert == int DecimalFormat int StringBuilder int int private private < throws decl_stmt int = for : decl_stmt int final final = == : = decl_stmt int = decl_stmt java.lang.StringBuilder = new for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.text.DecimalFormat final final = new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() new decl_stmt int = for : decl_stmt int final final = == : call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) if != call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() for = < ++ call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() byte if == else ++ assert == StringBuilder int DecimalFormat DecimalFormat int int int int public public < < throws assert assert == decl_stmt int = decl_stmt int = - for : = ++ decl_stmt int = decl_stmt java.lang.StringBuilder = new for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.text.DecimalFormat final final = new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() new decl_stmt int = + call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.text.DecimalFormat final final = new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() new decl_stmt int = for : call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() for = < ++ call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() byte ++ assert <= assert == for : call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) + long BytesRefBuilder StringBuilder decl Iterator decl Iterator public public final final final < final final final < throws assert assert == new < public < public < decl_stmt java.lang.StringBuilder final final = new decl_stmt org.apache.lucene.util.BytesRefBuilder final final = new decl_stmt java.util.Iterator final final final < = decl_stmt java.util.Iterator final final final < = return new < public public return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() decl_stmt long = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) return call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() public public throw new long BytesRefBuilder StringBuilder decl Iterator decl Iterator public < public < decl_stmt java.lang.StringBuilder final final = new decl_stmt org.apache.lucene.util.BytesRefBuilder final final = new decl_stmt java.util.Iterator final final final < = decl_stmt java.util.Iterator final final final < = return new < public public return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() decl_stmt long = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) return call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() public public throw new public public return long public public decl_stmt long = for = < ++ if > call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) return call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() public public throw new StringBuilder int int decl Iterator int int DecimalFormat long long StringBuilder int long public public < < < throws assert assert == decl_stmt long = decl_stmt int = for : = ++ decl_stmt int = decl_stmt java.lang.StringBuilder = new for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.text.DecimalFormat final final = new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() new decl_stmt int = decl_stmt java.lang.StringBuilder = new decl_stmt java.util.Iterator < = for : call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() decl_stmt int = for = < ++ decl_stmt long = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt long = for : call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call java.text.DecimalFormat.format(double,StringBuffer,FieldDelegate) call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() for = < ++ call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() byte ++ assert <= assert == = for : call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() decl_stmt int = for = < ++ decl_stmt long = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int = - call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() private private throws boolean public public throws if != decl_stmt boolean = try assert ! call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() = finally if else =