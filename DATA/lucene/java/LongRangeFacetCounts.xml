org.apache.lucene.facet.range java.io.IOException import java.util.Collections import java.util.List import org.apache.lucene.facet.Facets import org.apache.lucene.facet.FacetsCollector.MatchingDocs import org.apache.lucene.facet.FacetsCollector import org.apache.lucene.index.IndexReaderContext import org.apache.lucene.index.ReaderUtil import org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.queries.function.valuesource.LongFieldSource import org.apache.lucene.search.DocIdSet import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.Scorer import org.apache.lucene.search.Weight import class org.apache.lucene.facet.range.LongRangeFacetCounts super super extends IndexSearcher FunctionValues int LongRangeCounter DocIdSetIterator Weight decl LongRange Scorer int DocIdSetIterator IndexReaderContext int private private < throws decl_stmt org.apache.lucene.facet.range.LongRange = decl_stmt org.apache.lucene.facet.range.LongRangeCounter = new decl_stmt int = for : decl_stmt org.apache.lucene.queries.function.FunctionValues = += decl_stmt org.apache.lucene.search.DocIdSetIterator final final if != decl_stmt IndexReaderContext final final = decl_stmt org.apache.lucene.search.IndexSearcher final final = new call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) decl_stmt org.apache.lucene.search.Weight final final = call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) decl_stmt org.apache.lucene.search.Scorer = call Weight.scorer() call Weight.scorer() call Weight.scorer() call Weight.scorer() call Weight.scorer() if == continue = call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() else = decl_stmt org.apache.lucene.search.DocIdSetIterator = for = call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() != if != decl_stmt int = call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() if < = call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) if != = call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) continue if call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.facet.range.LongRangeCounter.add(long) call org.apache.lucene.facet.range.LongRangeCounter.add(long) call org.apache.lucene.facet.range.LongRangeCounter.add(long) call org.apache.lucene.facet.range.LongRangeCounter.add(long) call org.apache.lucene.facet.range.LongRangeCounter.add(long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) else ++ = call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() decl_stmt int = call org.apache.lucene.facet.range.LongRangeCounter.fillCounts(int) call org.apache.lucene.facet.range.LongRangeCounter.fillCounts(int) call org.apache.lucene.facet.range.LongRangeCounter.fillCounts(int) call org.apache.lucene.facet.range.LongRangeCounter.fillCounts(int) call org.apache.lucene.facet.range.LongRangeCounter.fillCounts(int) += -=