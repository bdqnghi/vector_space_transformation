org.apache.solr.uima.processor java.io.IOException import java.lang.invoke.MethodHandles import java.util.Map import java.util.Map.Entry import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.SolrInputDocument import org.apache.solr.schema.SchemaField import org.apache.solr.uima.processor.SolrUIMAConfiguration.MapField import org.apache.solr.update.AddUpdateCommand import org.apache.solr.update.processor.UpdateRequestProcessor import org.apache.uima.analysis_engine.AnalysisEngine import org.apache.uima.analysis_engine.AnalysisEngineProcessException import org.apache.uima.jcas.JCas import org.apache.uima.resource.ResourceInitializationException import org.apache.uima.util.JCasPool import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.uima.processor.UIMAUpdateRequestProcessor super super extends AnalysisEngine Logger JCasPool SolrUIMAConfiguration String String String int SchemaField decl String UIMAToSolrMapper JCas decl Map String SolrInputDocument public public throws decl_stmt java.lang.String = try decl_stmt org.apache.solr.common.SolrInputDocument = decl_stmt java.lang.String = for : = if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > decl_stmt JCas = call JCasPool.getJCas() call JCasPool.getJCas() call JCasPool.getJCas() call JCasPool.getJCas() call JCasPool.getJCas() try decl_stmt org.apache.solr.uima.processor.UIMAToSolrMapper = new decl_stmt java.util.Map < < = call org.apache.solr.uima.processor.SolrUIMAConfiguration.getTypesFeaturesFieldsMapping() call org.apache.solr.uima.processor.SolrUIMAConfiguration.getTypesFeaturesFieldsMapping() call org.apache.solr.uima.processor.SolrUIMAConfiguration.getTypesFeaturesFieldsMapping() call org.apache.solr.uima.processor.SolrUIMAConfiguration.getTypesFeaturesFieldsMapping() call org.apache.solr.uima.processor.SolrUIMAConfiguration.getTypesFeaturesFieldsMapping() for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call UIMAToSolrMapper.map() call UIMAToSolrMapper.map() call UIMAToSolrMapper.map() call UIMAToSolrMapper.map() call UIMAToSolrMapper.map() finally call JCasPool.releaseJCas() call JCasPool.releaseJCas() call JCasPool.releaseJCas() call JCasPool.releaseJCas() call JCasPool.releaseJCas() catch decl_stmt java.lang.String = call org.apache.solr.uima.processor.SolrUIMAConfiguration.getLogField() call org.apache.solr.uima.processor.SolrUIMAConfiguration.getLogField() call org.apache.solr.uima.processor.SolrUIMAConfiguration.getLogField() call org.apache.solr.uima.processor.SolrUIMAConfiguration.getLogField() call org.apache.solr.uima.processor.SolrUIMAConfiguration.getLogField() if == decl_stmt org.apache.solr.schema.SchemaField = if != = call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() decl_stmt java.lang.String = == : + + + + decl_stmt int decl_stmt java.lang.String if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() = + call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + else = if call SolrUIMAConfiguration.isIgnoreErrors() call SolrUIMAConfiguration.isIgnoreErrors() call SolrUIMAConfiguration.isIgnoreErrors() call SolrUIMAConfiguration.isIgnoreErrors() call SolrUIMAConfiguration.isIgnoreErrors() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() new else throw new + + + StringBuilder boolean decl Object decl String decl String private private decl_stmt java.lang.String = call org.apache.solr.uima.processor.SolrUIMAConfiguration.getFieldsToAnalyze() call org.apache.solr.uima.processor.SolrUIMAConfiguration.getFieldsToAnalyze() call org.apache.solr.uima.processor.SolrUIMAConfiguration.getFieldsToAnalyze() call org.apache.solr.uima.processor.SolrUIMAConfiguration.getFieldsToAnalyze() call org.apache.solr.uima.processor.SolrUIMAConfiguration.getFieldsToAnalyze() decl_stmt boolean = call org.apache.solr.uima.processor.SolrUIMAConfiguration.isFieldsMerging() call org.apache.solr.uima.processor.SolrUIMAConfiguration.isFieldsMerging() call org.apache.solr.uima.processor.SolrUIMAConfiguration.isFieldsMerging() call org.apache.solr.uima.processor.SolrUIMAConfiguration.isFieldsMerging() call org.apache.solr.uima.processor.SolrUIMAConfiguration.isFieldsMerging() decl_stmt java.lang.String if decl_stmt java.lang.StringBuilder = new for : if != decl_stmt java.lang.Object = for : if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = new = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() else = new for = < ++ if != decl_stmt java.lang.Object = for : += return private private throws if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call AnalysisEngine.process() call AnalysisEngine.process() call AnalysisEngine.process() call AnalysisEngine.process() call AnalysisEngine.process() if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() public public return