org.apache.lucene.spatial.prefix.tree java.io.PrintStream import java.text.NumberFormat import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.List import java.util.Locale import org.locationtech.spatial4j.context.SpatialContext import org.locationtech.spatial4j.shape.Point import org.locationtech.spatial4j.shape.Rectangle import org.locationtech.spatial4j.shape.Shape import org.locationtech.spatial4j.shape.SpatialRelation import org.apache.lucene.util.BytesRef import class org.apache.lucene.spatial.prefix.tree.QuadPrefixTree super super extends double double decl double decl int double double decl int int double decl double double double int double QuadPrefixTree protected protected decl_stmt org.apache.lucene.spatial.prefix.tree.QuadPrefixTree = new return call QuadPrefixTree.getLevelForDistance() call QuadPrefixTree.getLevelForDistance() call QuadPrefixTree.getLevelForDistance() call QuadPrefixTree.getLevelForDistance() call QuadPrefixTree.getLevelForDistance() protected protected return new != : public public return new NumberFormat public public decl_stmt java.text.NumberFormat = call java.text.NumberFormat.setMaximumFractionDigits(int) call java.text.NumberFormat.setMaximumFractionDigits(int) call java.text.NumberFormat.setMaximumFractionDigits(int) call java.text.NumberFormat.setMaximumFractionDigits(int) call java.text.NumberFormat.setMaximumFractionDigits(int) call java.text.NumberFormat.setMinimumFractionDigits(int) call java.text.NumberFormat.setMinimumFractionDigits(int) call java.text.NumberFormat.setMinimumFractionDigits(int) call java.text.NumberFormat.setMinimumFractionDigits(int) call java.text.NumberFormat.setMinimumFractionDigits(int) call java.text.NumberFormat.setMinimumIntegerDigits(int) call java.text.NumberFormat.setMinimumIntegerDigits(int) call java.text.NumberFormat.setMinimumIntegerDigits(int) call java.text.NumberFormat.setMinimumIntegerDigits(int) call java.text.NumberFormat.setMinimumIntegerDigits(int) for = < ++ + + call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) + + call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) + + + + * public public if == return for = < - ++ if > && > return + return decl List public public decl_stmt java.util.List < = new <> new + return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() double double private private < assert == decl_stmt double = / decl_stmt double = / - + + + - - + - double double SpatialRelation int int Rectangle protected protected < assert == assert == decl_stmt double = / decl_stmt double = / decl_stmt int = decl_stmt org.apache.lucene.geo.Rectangle = - + - + decl_stmt SpatialRelation = if == ++ = byte new call SpatialRelation.transpose() call SpatialRelation.transpose() call SpatialRelation.transpose() call SpatialRelation.transpose() call SpatialRelation.transpose() else if == else ++ = byte decl_stmt int = + if >= new call SpatialRelation.transpose() call SpatialRelation.transpose() call SpatialRelation.transpose() call SpatialRelation.transpose() call SpatialRelation.transpose() else = protected protected return protected protected return BytesRef decl List protected < protected < decl_stmt org.apache.lucene.util.BytesRef = decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new byte call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new byte call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new byte call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new byte return decl byte BytesRef protected protected decl_stmt byte final final final = + + decl_stmt org.apache.lucene.util.BytesRef = new = ++ = return public public return protected protected return + public public if == = return byte int double BytesRef double double protected protected decl_stmt org.apache.lucene.util.BytesRef = decl_stmt double = decl_stmt double = for = < ++ decl_stmt byte = + switch case += break case += += break case break case += break default: throw new + decl_stmt int = decl_stmt double if > = - = - else = = return + +