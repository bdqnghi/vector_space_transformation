org.apache.lucene.search java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.List import org.apache.lucene.index.LeafReaderContext import class org.apache.lucene.search.MultiCollector super super implements boolean decl Collector public static public static return decl Collector Collector int public static public static < extends extends decl_stmt int = for : if != ++ if == throw new else if == decl_stmt org.apache.lucene.search.Collector = for : if != = break return else decl_stmt org.apache.lucene.search.Collector = new = for : if != ++ = return new public public for : if return return LeafCollector decl List public public throws decl_stmt java.util.List final final final < = new <> for : decl_stmt org.apache.lucene.search.LeafCollector final final try = catch continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() switch call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() case throw new case return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() default: return new LeafCollector public public throws if = new for = < ++ decl_stmt org.apache.lucene.search.LeafCollector final final = call LeafCollector.setScorer() call LeafCollector.setScorer() call LeafCollector.setScorer() call LeafCollector.setScorer() call LeafCollector.setScorer() private private + - - -- = int LeafCollector decl LeafCollector public public throws decl_stmt org.apache.lucene.search.LeafCollector final final final = decl_stmt int = for = < decl_stmt org.apache.lucene.search.LeafCollector final final = try call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) ++ catch = if == throw new