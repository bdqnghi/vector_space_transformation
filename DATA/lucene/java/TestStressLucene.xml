org.apache.solr.search java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import java.util.Random import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.atomic.AtomicLong import java.util.concurrent.locks.Lock import java.util.concurrent.locks.ReentrantLock import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.FieldType import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.IndexReader import org.apache.lucene.index.RandomIndexWriter import org.apache.lucene.index.Term import org.apache.lucene.search.TermQuery import org.apache.lucene.store.Directory import org.junit.Test import static static org.apache.solr.core.SolrCore.verbose import class org.apache.solr.search.TestStressLucene super super extends DirectoryReader AtomicLong Random DirectoryReader int Object Lock int boolean FieldType int long decl Map RandomIndexWriter long AtomicInteger long int DirectoryReader int int long boolean boolean int int decl List Lock boolean int DocInfo FieldType Document Thread Document int IndexReader Directory int public public throws decl_stmt int final final = + decl_stmt int final final = + decl_stmt int final final = + decl_stmt int final final = + decl_stmt int final final = + : decl_stmt int = + decl_stmt int final final = decl_stmt java.util.concurrent.atomic.AtomicLong final final = new decl_stmt int = + decl_stmt boolean final final = decl_stmt boolean final final = decl_stmt java.util.concurrent.atomic.AtomicInteger final final = new decl_stmt java.util.List < = new <> decl_stmt org.apache.solr.schema.FieldType final final = new call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) decl_stmt org.apache.solr.schema.FieldType final final = new call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) decl_stmt java.util.concurrent.locks.Lock final final = new : decl_stmt java.util.concurrent.locks.Lock final final = new : decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.RandomIndexWriter final final = new new call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) = for = < ++ decl_stmt java.lang.Thread = new + decl_stmt java.util.Random = new public public try while call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() > decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) if < if call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() <= decl_stmt java.util.Map < decl_stmt long decl_stmt org.apache.lucene.index.DirectoryReader decl_stmt boolean = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < if ! if != call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() if != call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() synchronized = new <> = ++ = call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() if ! decl_stmt org.apache.lucene.index.DirectoryReader if = else = if == call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() = call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() synchronized assert call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() > assert call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() > if call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() > call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() = if >= = = else call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() if != call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() if ! if != call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() continue decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt java.lang.Object = decl_stmt boolean = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if = synchronized decl_stmt DocInfo = decl_stmt long = decl_stmt long = + if < + if decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) new + call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) new new - else if < + + if decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) new + call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) new new new - else decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) new if call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) new + new if ! = catch throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for = < ++ decl_stmt java.lang.Thread = new + decl_stmt java.util.Random = new public public try while call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() >= decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < : call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt DocInfo synchronized = decl_stmt long = decl_stmt org.apache.lucene.index.IndexReader synchronized = call org.apache.lucene.index.IndexReader.incRef() call org.apache.lucene.index.IndexReader.incRef() call org.apache.lucene.index.IndexReader.incRef() call org.apache.lucene.index.IndexReader.incRef() call org.apache.lucene.index.IndexReader.incRef() decl_stmt int = new if < && = new + if < if == - call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() continue + + + if < && ! else if < >= decl_stmt org.apache.lucene.document.Document = call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) if < >= call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() catch call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) - throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() for : call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() int DocInfo DirectoryReader Document long long decl Map Object int long DirectoryReader boolean boolean public public try while > decl_stmt int = if < if <= decl_stmt java.util.Map < decl_stmt long decl_stmt org.apache.lucene.index.DirectoryReader decl_stmt boolean = < if ! if != if != synchronized = new <> = ++ = call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() if ! decl_stmt org.apache.lucene.index.DirectoryReader if = else = if == call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() = call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() synchronized assert call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() > assert call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() > if call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() > call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() = if >= = = else call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() if != if ! if != continue decl_stmt int = decl_stmt java.lang.Object = decl_stmt boolean = if = synchronized decl_stmt DocInfo = decl_stmt long = decl_stmt long = + if < + if decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new new + new new - else if < + + if decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new new + new new new - else decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new new if new + new if ! = catch throw new DocInfo int long Document long IndexReader int public public try while >= decl_stmt int = < : decl_stmt DocInfo synchronized = decl_stmt long = decl_stmt org.apache.lucene.index.IndexReader synchronized = call org.apache.lucene.index.IndexReader.incRef() call org.apache.lucene.index.IndexReader.incRef() call org.apache.lucene.index.IndexReader.incRef() call org.apache.lucene.index.IndexReader.incRef() call org.apache.lucene.index.IndexReader.incRef() decl_stmt int = new if < && = new + if < if == - call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() continue + + + if < && ! else if < >= decl_stmt org.apache.lucene.document.Document = call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) if < >= call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() call org.apache.lucene.index.IndexReader.decRef() catch - throw new