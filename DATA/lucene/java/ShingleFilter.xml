org.apache.lucene.analysis.shingle java.io.IOException import java.util.Iterator import java.util.LinkedList import org.apache.lucene.analysis.TokenFilter import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.OffsetAttribute import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute import org.apache.lucene.analysis.tokenattributes.TypeAttribute import org.apache.lucene.util.AttributeSource import class org.apache.lucene.analysis.shingle.ShingleFilter super super extends int String boolean StringBuilder decl char decl LinkedList CircularSequence String boolean OffsetAttribute TypeAttribute AttributeSource PositionLengthAttribute State int String int boolean int boolean PositionIncrementAttribute boolean int String String CharTermAttribute boolean public public = public public = = new public public = public public if < throw new = public public if < throw new if > throw new = = new public public = == : public public = == new : call decl char.toCharArray() call decl char.toCharArray() call decl char.toCharArray() call decl char.toCharArray() call decl char.toCharArray() InputWindowToken int boolean decl Iterator boolean public public throws decl_stmt boolean = decl_stmt int = if call CircularSequence.atMinValue() call CircularSequence.atMinValue() call CircularSequence.atMinValue() call CircularSequence.atMinValue() call CircularSequence.atMinValue() || call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() < call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() else = call CircularSequence.getPreviousValue() call CircularSequence.getPreviousValue() call CircularSequence.getPreviousValue() call CircularSequence.getPreviousValue() call CircularSequence.getPreviousValue() if call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() >= call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() decl_stmt boolean = decl_stmt InputWindowToken = decl_stmt java.util.Iterator < = call decl LinkedList.iterator() call decl LinkedList.iterator() call decl LinkedList.iterator() call decl LinkedList.iterator() call decl LinkedList.iterator() for = call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() && < call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() ++ = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if < if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() ++ if && if == call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.advance() call CircularSequence.advance() call CircularSequence.advance() call CircularSequence.advance() call CircularSequence.advance() else = if ! && == call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call decl LinkedList.getFirst() call decl LinkedList.getFirst() call decl LinkedList.getFirst() call decl LinkedList.getFirst() call decl LinkedList.getFirst() call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) : call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() if call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() call CircularSequence.getValue() > call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) = call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) = call CircularSequence.advance() call CircularSequence.advance() call CircularSequence.advance() call CircularSequence.advance() call CircularSequence.advance() = return OffsetAttribute InputWindowToken private private throws decl_stmt InputWindowToken = if > if == = new call org.apache.lucene.util.AttributeSource.cloneAttributes() call org.apache.lucene.util.AttributeSource.cloneAttributes() call org.apache.lucene.util.AttributeSource.cloneAttributes() call org.apache.lucene.util.AttributeSource.cloneAttributes() call org.apache.lucene.util.AttributeSource.cloneAttributes() else call org.apache.lucene.util.AttributeSource.copyTo(AttributeSource) call org.apache.lucene.util.AttributeSource.copyTo(AttributeSource) call org.apache.lucene.util.AttributeSource.copyTo(AttributeSource) call org.apache.lucene.util.AttributeSource.copyTo(AttributeSource) call org.apache.lucene.util.AttributeSource.copyTo(AttributeSource) call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() = -- else if if == = new call org.apache.lucene.util.AttributeSource.cloneAttributes() call org.apache.lucene.util.AttributeSource.cloneAttributes() call org.apache.lucene.util.AttributeSource.cloneAttributes() call org.apache.lucene.util.AttributeSource.cloneAttributes() call org.apache.lucene.util.AttributeSource.cloneAttributes() else call org.apache.lucene.util.AttributeSource.copyTo(AttributeSource) call org.apache.lucene.util.AttributeSource.copyTo(AttributeSource) call org.apache.lucene.util.AttributeSource.copyTo(AttributeSource) call org.apache.lucene.util.AttributeSource.copyTo(AttributeSource) call org.apache.lucene.util.AttributeSource.copyTo(AttributeSource) = = else if ! if if == = new else if call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() > = call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() - - if == = else = call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call InputWindowToken.offsetAtt() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() call InputWindowToken.termAtt() = -- else = else = = = call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() - if > = new call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) decl_stmt org.apache.lucene.analysis.tokenattributes.OffsetAttribute = call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() return else = else = return public public throws if ! else InputWindowToken InputWindowToken private private throws decl_stmt InputWindowToken = if call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() > = call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() while call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() < if != if != call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() = else break else decl_stmt InputWindowToken = if != call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() else break if && && > && call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() < = call CircularSequence.reset() call CircularSequence.reset() call CircularSequence.reset() call CircularSequence.reset() call CircularSequence.reset() = public public throws call CircularSequence.reset() call CircularSequence.reset() call CircularSequence.reset() call CircularSequence.reset() call CircularSequence.reset() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() = = = = = = = if && ! = public public return public public = if == = else if == else ++ public public = = public public return == public public return