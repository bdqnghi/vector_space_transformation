org.apache.solr.util java.io.IOException import java.io.Reader import java.io.StringReader import java.io.StringWriter import java.io.UnsupportedEncodingException import java.util.ArrayList import java.util.Collections import java.util.LinkedHashMap import java.util.List import java.util.Map import org.apache.commons.io.input.CharSequenceReader import org.apache.lucene.util.IOUtils import org.apache.solr.common.SolrException import org.apache.solr.common.util.ContentStream import org.apache.solr.common.util.StrUtils import org.apache.solr.common.util.Utils import org.apache.solr.response.SolrQueryResponse import org.noggit.JSONParser import org.noggit.ObjectBuilder import static static java.util.Collections.emptyMap import static static java.util.Collections.singletonList import static static java.util.Collections.singletonMap import static static org.apache.solr.common.util.StrUtils.formatString import static static org.apache.solr.common.util.Utils.toJSON import class org.apache.solr.util.CommandOperation decl List String Object String String String Object Object public public if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt java.lang.Object = return == : decl_stmt java.lang.Object = return == : String public public decl_stmt java.lang.String = return == : public public = public < public < if instanceof return < return private private if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return return public public return String Map private private if if instanceof return if instanceof decl_stmt java.util.Map = return call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) else decl_stmt java.lang.String = + if ! call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl List public < public < decl_stmt java.util.List < = if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public decl ArrayList Object public < public < < decl_stmt java.lang.Object = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = else = if == return else if instanceof decl_stmt java.util.ArrayList < = new <> for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() if call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() return return else return String Object public public if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt java.lang.Object = if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return == : decl_stmt java.lang.String = if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return private private return public public return ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() public public if call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() return call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl LinkedHashMap public < public < if return decl_stmt java.util.LinkedHashMap < = new <> < if == return for : call decl LinkedHashMap.remove() call decl LinkedHashMap.remove() call decl LinkedHashMap.remove() call decl LinkedHashMap.remove() call decl LinkedHashMap.remove() return public < public < return decl List public static < public static < < decl_stmt java.util.List < = new <> for : if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl List Object JSONParser List ObjectBuilder Object int public static < public static < throws decl_stmt JSONParser = new decl_stmt ObjectBuilder = new if call JSONParser.lastEvent() call JSONParser.lastEvent() call JSONParser.lastEvent() call JSONParser.lastEvent() call JSONParser.lastEvent() != throw new decl_stmt java.util.List < = new <> for decl_stmt int = call JSONParser.nextEvent() call JSONParser.nextEvent() call JSONParser.nextEvent() call JSONParser.nextEvent() call JSONParser.nextEvent() if == return decl_stmt java.lang.Object = call ObjectBuilder.getKey() call ObjectBuilder.getKey() call ObjectBuilder.getKey() call ObjectBuilder.getKey() call ObjectBuilder.getKey() = call JSONParser.nextEvent() call JSONParser.nextEvent() call JSONParser.nextEvent() call JSONParser.nextEvent() call JSONParser.nextEvent() decl_stmt java.lang.Object = call ObjectBuilder.getVal() call ObjectBuilder.getVal() call ObjectBuilder.getVal() call ObjectBuilder.getVal() call ObjectBuilder.getVal() if instanceof decl_stmt java.util.List = for : if ! instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new break else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new public public return new Object public public decl_stmt java.lang.Object = if == return if ! instanceof return else return public public try return new catch return decl List decl ArrayList public static < public static < < throws if == throw new decl_stmt java.util.ArrayList < = new <> for : call decl ArrayList.addAll() call decl ArrayList.addAll() call decl ArrayList.addAll() call decl ArrayList.addAll() call decl ArrayList.addAll() decl_stmt java.util.List < = if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return return decl List public static < public static < < decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return Number Object public public decl_stmt java.lang.Object = if == return if instanceof decl_stmt java.lang.Number = return call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() else try return call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() catch return Object public public decl_stmt java.lang.Object = if == return return