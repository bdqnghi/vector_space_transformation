org.apache.lucene.codecs.blocktree java.io.IOException import org.apache.lucene.codecs.BlockTermState import org.apache.lucene.index.IndexOptions import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.automaton.Transition import org.apache.lucene.util.fst.FST import class org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame int int decl long int IntersectTermsEnum int decl FST int long ByteArrayDataInput int boolean ByteArrayDataInput int boolean ByteArrayDataInput int int long decl byte decl byte long int decl byte int long int boolean int boolean BytesRef int Transition decl byte BlockTermState ByteArrayDataInput int throws assert > : + do = + call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() >>> -- if != = call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() & else = != && <= public public = = = call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() if != call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() call IntersectTermsEnum.automaton() else = - = - int int throws if != call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) decl_stmt long final final = call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() if & != = call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() = call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() & if call IntersectTermsEnum.runAutomaton() call IntersectTermsEnum.runAutomaton() call IntersectTermsEnum.runAutomaton() call IntersectTermsEnum.runAutomaton() call IntersectTermsEnum.runAutomaton() call IntersectTermsEnum.runAutomaton() call IntersectTermsEnum.runAutomaton() call IntersectTermsEnum.runAutomaton() call IntersectTermsEnum.runAutomaton() == && != assert == : + while != && <= = + call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() >>> -- if != = call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() & else = call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() decl_stmt int = call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() = >>> assert > = & != = call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() = & != decl_stmt int = >>> if < = new call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) = call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() if < = new call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) = = = = call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() if < = new call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) if ! = call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() call IntersectTermsEnum.in() = public public if return else return public public assert != - && < : + + + + + ++ = call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() = call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) int IntersectTermsEnumFrame public public assert != - && < : + + + + + ++ decl_stmt int final final = call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() if == = >>> = call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) if & == ++ return else = - call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() return else = >>> = call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) switch & case = ++ return case = = - call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() return case = - ++ = call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() & if == = - = return case if == assert > decl_stmt org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame = - = + - & else = + - & ++ = = call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() & return default: assert return public public return : int boolean public public throws decl_stmt int final final = decl_stmt boolean = == assert > while < = call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() if call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() != = + call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() for = < ++ = call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() call IntersectTermsEnum.fr() ++ = =