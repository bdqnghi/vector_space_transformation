org.apache.solr.common.cloud org.apache.solr.common.SolrException import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.Hash import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.List import class org.apache.solr.common.cloud.CompositeIdRouter super super extends int int String String String Object public public decl_stmt java.lang.String = if != && != decl_stmt java.lang.Object = if == throw new + + = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() if < return return new int public public if < decl_stmt int = return new return new Range decl List Range String public < public < if == return decl_stmt java.lang.String = if < return call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() decl_stmt org.apache.lucene.facet.range.Range = new decl_stmt java.util.List < = new <> for : decl_stmt org.apache.lucene.facet.range.Range = if != && call Range.overlaps() call Range.overlaps() call Range.overlaps() call Range.overlaps() call Range.overlaps() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return Range decl List public < public < decl_stmt java.util.List < = new <> decl_stmt org.apache.lucene.facet.range.Range = if ! call Range.overlaps() call Range.overlaps() call Range.overlaps() call Range.overlaps() call Range.overlaps() throw new if call Range.equals() call Range.equals() call Range.equals() call Range.equals() call Range.equals() return else if call Range.isSubsetOf() call Range.isSubsetOf() call Range.isSubsetOf() call Range.isSubsetOf() call Range.isSubsetOf() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new + else if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new + else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return long long long long int int long int boolean decl List long long int long public < public < decl_stmt int = decl_stmt int = assert >= if == return decl_stmt long = long - long decl_stmt long = / decl_stmt java.util.List < = new <> decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt int = decl_stmt boolean = >= << * while < = + = if && & != decl_stmt int = << decl_stmt long = | - decl_stmt long = | + if - < - - && - - && = else = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == - = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new int int = + = + return Range int int decl_stmt int decl_stmt int if = & | & = | else = & = | if == && ! || == && == && = = decl_stmt org.apache.lucene.facet.range.Range = new return decl int private private decl_stmt int if = else = return decl int private private decl_stmt int = new = == : - << - = + == : - << - - = ^ = + == : ~ | return char int private private decl_stmt int = for = + < ++ decl_stmt char = if < || || return - = * + - return > - : decl int private private decl_stmt int = new = == : - << - = == : - >>> return int decl_stmt int = & for = < ++ = | & return