org.apache.lucene.store java.io.IOException import java.nio.charset.StandardCharsets import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.Map import java.util.Set import java.util.TreeMap import java.util.TreeSet import org.apache.lucene.util.BitUtil import class org.apache.lucene.store.DataInput super super implements int decl byte public public throws public public throws return & << | & public public throws return & << | & << | & << | & int byte public public throws decl_stmt byte = if >= return decl_stmt int = & = |= & << if >= return = |= & << if >= return = |= & << if >= return = |= & << if & == return throw new public public throws return public public throws return long << | & public public throws return long byte private private throws decl_stmt byte = if >= return decl_stmt long = & = |= & << if >= return = |= & << if >= return = |= & << if >= return = |= & << if >= return = |= & << if >= return = |= & << if >= return = |= & << if >= return = |= & << if >= return if = |= & << if == || == return throw new else throw new public public throws return int decl byte public public throws decl_stmt int = decl_stmt byte final final final = new return new public public try return catch throw new int decl Map String String public < public < throws decl_stmt java.util.Map final final final < = new <> decl_stmt int final final = for = < ++ decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return int decl Map String String public < public < throws decl_stmt int = if == return else if == return else decl_stmt java.util.Map < = > new <> : new <> for = < ++ decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return int decl Set public < public < throws decl_stmt java.util.Set final final final < = new <> decl_stmt int final final = for = < ++ call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return int decl Set public < public < throws decl_stmt int = if == return else if == return else decl_stmt java.util.Set < = > new <> : new <> for = < ++ call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return int public public final final throws if < throw new + if == = new assert == for = < decl_stmt int final final = int - +=