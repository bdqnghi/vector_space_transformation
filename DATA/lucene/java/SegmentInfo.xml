org.apache.lucene.index java.util.Arrays import java.util.Collection import java.util.Collections import java.util.HashSet import java.util.Locale import java.util.Map import java.util.Objects import java.util.Set import java.util.regex.Matcher import org.apache.lucene.codecs.Codec import org.apache.lucene.store.Directory import org.apache.lucene.store.TrackingDirectoryWrapper import org.apache.lucene.util.StringHelper import org.apache.lucene.util.Version import class org.apache.lucene.index.SegmentInfo String int int decl Set Codec Version decl Map decl Map int decl byte Directory boolean < = public < public < return = public public return public public assert == if == throw new = public public return public public if == - throw new return if != - throw new + + + = public < public < if == throw new return public public return StringBuilder String char String public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) == : decl_stmt char = : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() SegmentInfo public public if == return if instanceof decl_stmt org.apache.lucene.index.SegmentInfo final final = return == && call SegmentInfo.name() call SegmentInfo.name() call SegmentInfo.name() call SegmentInfo.name() call SegmentInfo.name() call SegmentInfo.name() call SegmentInfo.name() call SegmentInfo.name() call SegmentInfo.name() else return public public return call Directory.hashCode() call Directory.hashCode() call Directory.hashCode() call Directory.hashCode() call Directory.hashCode() + call java.lang.String.hashCode() call java.lang.String.hashCode() call java.lang.String.hashCode() call java.lang.String.hashCode() call java.lang.String.hashCode() public public return public public return call decl byte.clone() call decl byte.clone() call decl byte.clone() call decl byte.clone() call decl byte.clone() public public < = new <> public public < for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() public public call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() Matcher private private < decl_stmt java.util.regex.Matcher = for : call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) if ! call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() throw new + + + if throw new + + return + public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() public public return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public < public < return