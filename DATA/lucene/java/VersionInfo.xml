org.apache.solr.update java.io.IOException import java.lang.invoke.MethodHandles import java.util.Map import java.util.concurrent.locks.ReadWriteLock import java.util.concurrent.locks.ReentrantReadWriteLock import org.apache.lucene.index.LeafReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.SlowCompositeReaderWrapper import org.apache.lucene.index.Terms import org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.search.IndexSearcher import org.apache.lucene.util.BitUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.LegacyNumericUtils import org.apache.solr.common.SolrException import org.apache.solr.common.util.SuppressForbidden import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.SchemaField import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.util.RefCounted import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.update.VersionInfo UpdateLog SchemaField Logger ReadWriteLock decl VersionBucket String long SchemaField Object String SchemaField public static public static throws decl_stmt java.lang.String final final = + decl_stmt org.apache.solr.schema.SchemaField = if == throw new + + + if ! call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() && ! call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() throw new + + + if ! call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() && ! call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() throw new + + + if call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() throw new + + + return public public public public return public public call java.util.concurrent.locks.ReadWriteLock.readLock() call java.util.concurrent.locks.ReadWriteLock.readLock() call java.util.concurrent.locks.ReadWriteLock.readLock() call java.util.concurrent.locks.ReadWriteLock.readLock() call java.util.concurrent.locks.ReadWriteLock.readLock() public public call java.util.concurrent.locks.ReadWriteLock.readLock() call java.util.concurrent.locks.ReadWriteLock.readLock() call java.util.concurrent.locks.ReadWriteLock.readLock() call java.util.concurrent.locks.ReadWriteLock.readLock() call java.util.concurrent.locks.ReadWriteLock.readLock() public public call ReadWriteLock.writeLock() call ReadWriteLock.writeLock() call ReadWriteLock.writeLock() call ReadWriteLock.writeLock() call ReadWriteLock.writeLock() public public call ReadWriteLock.writeLock() call ReadWriteLock.writeLock() call ReadWriteLock.writeLock() call ReadWriteLock.writeLock() call ReadWriteLock.writeLock() long long = public = public synchronized decl_stmt long = decl_stmt long = << if <= = + = return public public synchronized return public public synchronized = int public public decl_stmt int = & - return public public return call org.apache.solr.update.UpdateLog.lookupVersion(BytesRef) call org.apache.solr.update.UpdateLog.lookupVersion(BytesRef) call org.apache.solr.update.UpdateLog.lookupVersion(BytesRef) call org.apache.solr.update.UpdateLog.lookupVersion(BytesRef) call org.apache.solr.update.UpdateLog.lookupVersion(BytesRef) SolrIndexSearcher long decl RefCounted FunctionValues ValueSource long Map public public decl_stmt org.apache.solr.util.RefCounted < = call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() call UpdateLog.uhandler() try decl_stmt org.apache.solr.search.SolrIndexSearcher = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() decl_stmt long = call org.apache.solr.search.SolrIndexSearcher.lookupId(BytesRef) call org.apache.solr.search.SolrIndexSearcher.lookupId(BytesRef) call org.apache.solr.search.SolrIndexSearcher.lookupId(BytesRef) call org.apache.solr.search.SolrIndexSearcher.lookupId(BytesRef) call org.apache.solr.search.SolrIndexSearcher.lookupId(BytesRef) if < return decl_stmt org.apache.lucene.queries.function.ValueSource = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() decl_stmt java.util.Map = call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) decl_stmt org.apache.lucene.queries.function.FunctionValues = call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() >> decl_stmt long = call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) int return catch throw new finally if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() Map String FunctionValues int Long long ValueSource long Terms LeafReader public public throws decl_stmt java.lang.String = call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt long = if call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() decl_stmt org.apache.lucene.index.LeafReader = decl_stmt org.apache.lucene.index.Terms = call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) decl_stmt java.lang.Long = != : if != = call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else decl_stmt org.apache.lucene.queries.function.ValueSource = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() decl_stmt java.util.Map = call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) for : decl_stmt int = decl_stmt org.apache.lucene.queries.function.FunctionValues = call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() for = < ++ decl_stmt long = call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) = return public public for = < ++ synchronized if < =