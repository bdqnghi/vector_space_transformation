org.apache.solr.schema javax.xml.parsers.DocumentBuilder import javax.xml.parsers.DocumentBuilderFactory import javax.xml.xpath.XPath import javax.xml.xpath.XPathConstants import javax.xml.xpath.XPathFactory import java.io.File import java.io.InputStream import java.nio.charset.StandardCharsets import java.time.Instant import java.time.LocalDateTime import java.time.Month import java.time.ZoneOffset import java.util.Arrays import java.util.HashSet import java.util.Set import java.util.regex.Pattern import org.apache.commons.io.FileUtils import org.apache.lucene.util.IOUtils import org.apache.lucene.util.TestUtil import org.apache.solr.core.AbstractBadConfigTestBase import org.apache.solr.util.DOMUtil import org.junit.After import org.junit.Before import org.junit.Test import org.w3c.dom.Document import org.w3c.dom.NodeList import org.xml.sax.InputSource import class org.apache.solr.schema.TestUseDocValuesAsStored super super extends Pattern long decl String String String Pattern String long File File int File private private throws = = new decl_stmt File = new new new new new call File.getPath() call File.getPath() call File.getPath() call File.getPath() call File.getPath() private private throws public public return public public throws + + + + + + + + + + decl int public public throws for = < * ++ decl_stmt int = new for = < ++ = : + + + + + + + + + + + + private private return > : private static private static return call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) String String private private decl_stmt java.lang.String = + > : decl_stmt java.lang.String = if && = else if && ! = else if ! && ! = else return + decl String long String private private throws decl_stmt java.lang.String = new for = < ++ switch case = break case = break case = break case = break case = - break case decl_stmt java.lang.String = = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) break case decl_stmt long = = break default: throw new + + return public public throws + + + + + + + IndexSchema IndexSchema StrField SchemaField SchemaField public public throws decl_stmt org.apache.solr.schema.IndexSchema = decl_stmt org.apache.solr.schema.StrField = new call StrField.setTypeName() call StrField.setTypeName() call StrField.setTypeName() call StrField.setTypeName() call StrField.setTypeName() decl_stmt org.apache.solr.schema.SchemaField = new | decl_stmt org.apache.solr.schema.SchemaField = new | | decl_stmt org.apache.solr.schema.IndexSchema = call org.apache.solr.schema.IndexSchema.addField(SchemaField) call org.apache.solr.schema.IndexSchema.addField(SchemaField) call org.apache.solr.schema.IndexSchema.addField(SchemaField) call org.apache.solr.schema.IndexSchema.addField(SchemaField) call org.apache.solr.schema.IndexSchema.addField(SchemaField) + decl String decl String String String decl Set private private decl_stmt java.lang.String = + ++ decl_stmt java.lang.String = new + if > decl_stmt java.util.Set < = new <> call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() decl_stmt java.lang.String = new * + = = for = < ++ * + = * + = = + + + + + + = + + + + + : call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() + else = + + + + + + = + + + + decl_stmt java.lang.String = + + + = + + + + = + - + + + = + + + = + + + + = + + public public throws try catch