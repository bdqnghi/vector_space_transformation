org.apache.solr.cloud java.lang.invoke.MethodHandles import java.util.Collections import java.util.List import java.util.NoSuchElementException import java.util.SortedSet import java.util.TreeSet import java.util.concurrent.TimeUnit import java.util.concurrent.locks.Condition import java.util.concurrent.locks.ReentrantLock import com.google.common.annotations.VisibleForTesting import com.google.common.base.Preconditions import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkCmdExecutor import org.apache.solr.util.stats.TimerContext import org.apache.zookeeper.CreateMode import org.apache.zookeeper.KeeperException import org.apache.zookeeper.WatchedEvent import org.apache.zookeeper.Watcher import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.cloud.DistributedQueue Condition decl Overseer Logger decl TreeSet SolrZkClient ChildWatcher decl Stats String Object ReentrantLock String TimerContext public public throws decl_stmt org.apache.solr.util.stats.TimerContext = call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() + try return finally call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() public public throws return : long decl byte TimerContext public public throws > decl_stmt org.apache.solr.util.stats.TimerContext if == = call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() + else = call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() + + call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() try decl_stmt long = while > decl_stmt byte = if != return = call decl TreeSet.awaitNanos() call decl TreeSet.awaitNanos() call decl TreeSet.awaitNanos() call decl TreeSet.awaitNanos() call decl TreeSet.awaitNanos() return finally call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() TimerContext public public throws decl_stmt org.apache.solr.util.stats.TimerContext = call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() + try return finally call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() decl byte TimerContext public public throws decl_stmt org.apache.solr.util.stats.TimerContext = call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() + try decl_stmt byte = if == throw new return finally call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() decl byte TimerContext public public throws decl_stmt org.apache.solr.util.stats.TimerContext = call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() + call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() try while decl_stmt byte = if != return call decl TreeSet.await() call decl TreeSet.await() call decl TreeSet.await() call decl TreeSet.await() call decl TreeSet.await() finally call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() TimerContext public public throws decl_stmt org.apache.solr.util.stats.TimerContext = call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() + try while try call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) + + return catch try call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) new catch finally call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() public public return ChildWatcher private private throws call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() try if ! call ReentrantLock.isEmpty() call ReentrantLock.isEmpty() call ReentrantLock.isEmpty() call ReentrantLock.isEmpty() call ReentrantLock.isEmpty() return call ReentrantLock.pollFirst() call ReentrantLock.pollFirst() call ReentrantLock.pollFirst() call ReentrantLock.pollFirst() call ReentrantLock.pollFirst() : call ReentrantLock.first() call ReentrantLock.first() call ReentrantLock.first() call ReentrantLock.first() call ReentrantLock.first() if != && ! return decl_stmt ChildWatcher = new = = = if call ReentrantLock.isEmpty() call ReentrantLock.isEmpty() call ReentrantLock.isEmpty() call ReentrantLock.isEmpty() call ReentrantLock.isEmpty() return call decl TreeSet.signalAll() call decl TreeSet.signalAll() call decl TreeSet.signalAll() call decl TreeSet.signalAll() call decl TreeSet.signalAll() return call ReentrantLock.pollFirst() call ReentrantLock.pollFirst() call ReentrantLock.pollFirst() call ReentrantLock.pollFirst() call ReentrantLock.pollFirst() : call ReentrantLock.first() call ReentrantLock.first() call ReentrantLock.first() call ReentrantLock.first() call ReentrantLock.first() finally call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() decl List decl TreeSet < < throws while try decl_stmt java.util.TreeSet < = new <> decl_stmt java.util.List < = call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call decl Overseer.setQueueLength() call decl Overseer.setQueueLength() call decl Overseer.setQueueLength() call decl Overseer.setQueueLength() call decl Overseer.setQueueLength() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : if ! call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + continue call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() return catch call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) long < < throws decl_stmt long = while > call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() try if ! call ReentrantLock.isEmpty() call ReentrantLock.isEmpty() call ReentrantLock.isEmpty() call ReentrantLock.isEmpty() call ReentrantLock.isEmpty() return new <> = call decl TreeSet.awaitNanos() call decl TreeSet.awaitNanos() call decl TreeSet.awaitNanos() call decl TreeSet.awaitNanos() call decl TreeSet.awaitNanos() finally call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() return String private private throws while decl_stmt java.lang.String = if == return try return call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) + + catch call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() try call ReentrantLock.remove() call ReentrantLock.remove() call ReentrantLock.remove() call ReentrantLock.remove() call ReentrantLock.remove() finally call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() String decl byte String private private throws while decl_stmt java.lang.String = if == return try decl_stmt java.lang.String = + + decl_stmt byte = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) - return catch call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() try call ReentrantLock.remove() call ReentrantLock.remove() call ReentrantLock.remove() call ReentrantLock.remove() call ReentrantLock.remove() finally call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() throws call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() call decl Stats.lockInterruptibly() try return != finally call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() public public if && ! return call decl Stats.lock() call decl Stats.lock() call decl Stats.lock() call decl Stats.lock() call decl Stats.lock() try if == = = call decl TreeSet.signalAll() call decl TreeSet.signalAll() call decl TreeSet.signalAll() call decl TreeSet.signalAll() call decl TreeSet.signalAll() finally call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock() call decl Stats.unlock()