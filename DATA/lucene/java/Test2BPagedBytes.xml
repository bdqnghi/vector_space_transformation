org.apache.lucene.util java.util.Random import org.apache.lucene.store.BaseDirectoryWrapper import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.IndexOutput import org.apache.lucene.store.MockDirectoryWrapper import org.apache.lucene.util.LuceneTestCase.Monster import org.junit.Ignore import class annotation org.apache.lucene.util.Test2BPagedBytes super super extends long long long Random int IndexOutput PagedBytes decl Reader long BytesRef decl PagedBytes decl byte IndexInput BaseDirectoryWrapper public public throws decl_stmt org.apache.lucene.store.BaseDirectoryWrapper = if instanceof decl_stmt org.apache.lucene.util.PagedBytes = new decl_stmt org.apache.lucene.store.IndexOutput = call BaseDirectoryWrapper.createOutput() call BaseDirectoryWrapper.createOutput() call BaseDirectoryWrapper.createOutput() call BaseDirectoryWrapper.createOutput() call BaseDirectoryWrapper.createOutput() decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt java.util.Random = new while < * decl_stmt int = decl_stmt byte = new call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() decl_stmt long = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() assert == + = += call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput = call BaseDirectoryWrapper.openInput() call BaseDirectoryWrapper.openInput() call BaseDirectoryWrapper.openInput() call BaseDirectoryWrapper.openInput() call BaseDirectoryWrapper.openInput() call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() decl_stmt java.io.Reader = call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) = new = while < * decl_stmt int = decl_stmt byte = new call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) decl_stmt org.apache.lucene.util.BytesRef = new decl_stmt org.apache.lucene.util.BytesRef = new call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() += call org.apache.lucene.store.BaseDirectoryWrapper.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() call org.apache.lucene.store.BaseDirectoryWrapper.close()