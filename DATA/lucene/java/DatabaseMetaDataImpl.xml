org.apache.solr.client.solrj.io.sql java.io.IOException import java.sql.Connection import java.sql.DatabaseMetaData import java.sql.ResultSet import java.sql.RowIdLifetime import java.sql.SQLException import java.sql.Statement import java.util.Set import org.apache.solr.client.solrj.SolrClient import org.apache.solr.client.solrj.SolrQuery import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.impl.CloudSolrClient import org.apache.solr.client.solrj.impl.HttpSolrClient.Builder import org.apache.solr.client.solrj.response.QueryResponse import org.apache.solr.common.util.SimpleOrderedMap import class org.apache.solr.client.solrj.io.sql.DatabaseMetaDataImpl super super implements ConnectionImpl Statement decl String private private if != try decl_stmt java.lang.String = return catch return else return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return String decl Set SolrQuery CloudSolrClient SolrClient QueryResponse public public throws decl_stmt org.apache.solr.client.solrj.SolrQuery = new call org.apache.solr.client.solrj.SolrQuery.setRequestHandler(String) call org.apache.solr.client.solrj.SolrQuery.setRequestHandler(String) call org.apache.solr.client.solrj.SolrQuery.setRequestHandler(String) call org.apache.solr.client.solrj.SolrQuery.setRequestHandler(String) call org.apache.solr.client.solrj.SolrQuery.setRequestHandler(String) decl_stmt org.apache.solr.client.solrj.impl.CloudSolrClient = decl_stmt java.util.Set < = call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() decl_stmt org.apache.solr.client.solrj.SolrClient = for : try decl_stmt java.lang.String = call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() = new decl_stmt org.apache.solr.client.solrj.response.QueryResponse = call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) return call QueryResponse.getResponse() call QueryResponse.getResponse() call QueryResponse.getResponse() call QueryResponse.getResponse() call QueryResponse.getResponse() catch return finally if != try call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() catch return public public throws return public public throws return public public throws return public public throws return public public try return catch return public public try return catch return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws throw new public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public public throws return public < public < < throws return public public < throws return