org.apache.lucene.util java.io.BufferedReader import java.io.Closeable import java.io.IOException import java.io.InputStream import java.io.InputStreamReader import java.nio.channels.Channels import java.nio.channels.SeekableByteChannel import java.nio.charset.CharsetDecoder import java.nio.charset.CodingErrorAction import java.nio.charset.StandardCharsets import java.nio.file.Files import java.nio.file.Path import java.nio.file.Paths import java.util.Random import java.util.concurrent.atomic.AtomicInteger import java.util.zip.GZIPInputStream import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.FieldType import org.apache.lucene.document.IntPoint import org.apache.lucene.document.IntPoint import org.apache.lucene.document.NumericDocValuesField import org.apache.lucene.document.SortedDocValuesField import org.apache.lucene.document.StringField import org.apache.lucene.document.TextField import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.IndexableField import class org.apache.lucene.util.LineFileDocs super super implements decl CloseableThreadLocal char Random BufferedReader String int AtomicInteger public synchronized public synchronized throws = private private if == || <= return return call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() & / boolean CharsetDecoder InputStream SeekableByteChannel Path int long private synchronized private synchronized throws decl_stmt java.io.InputStream = decl_stmt boolean = decl_stmt long = = if == decl_stmt java.nio.file.Path = = if call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) = else = decl_stmt java.nio.channels.SeekableByteChannel final final = if + + call int.position() call int.position() call int.position() call int.position() call int.position() = = else = call InputStream.available() call InputStream.available() call InputStream.available() call InputStream.available() call InputStream.available() if call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) = new *= if = if + + call java.io.InputStream.skip(long) call java.io.InputStream.skip(long) call java.io.InputStream.skip(long) call java.io.InputStream.skip(long) call java.io.InputStream.skip(long) if > decl_stmt int do = call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) >= && != && != decl_stmt CharsetDecoder = = new new if > call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) public synchronized public synchronized throws call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() = call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) String int Document int int int DocState String public public throws decl_stmt java.lang.String synchronized = call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) if == if call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() = = call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) decl_stmt DocState = call decl CloseableThreadLocal.get() call decl CloseableThreadLocal.get() call decl CloseableThreadLocal.get() call decl CloseableThreadLocal.get() call decl CloseableThreadLocal.get() if == = new call decl CloseableThreadLocal.set() call decl CloseableThreadLocal.set() call decl CloseableThreadLocal.set() call decl CloseableThreadLocal.set() call decl CloseableThreadLocal.set() decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if == - throw new + + decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) + if == - throw new + + call DocState.body() call DocState.body() call DocState.body() call DocState.body() call DocState.body() call DocState.body() call DocState.body() call DocState.body() call DocState.body() call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() decl_stmt java.lang.String final final = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call DocState.title() call DocState.title() call DocState.title() call DocState.title() call DocState.title() call DocState.title() call DocState.title() call DocState.title() call DocState.title() if != call DocState.titleDV() call DocState.titleDV() call DocState.titleDV() call DocState.titleDV() call DocState.titleDV() call DocState.titleDV() call DocState.titleDV() call DocState.titleDV() call DocState.titleDV() new call DocState.titleTokenized() call DocState.titleTokenized() call DocState.titleTokenized() call DocState.titleTokenized() call DocState.titleTokenized() call DocState.titleTokenized() call DocState.titleTokenized() call DocState.titleTokenized() call DocState.titleTokenized() call DocState.date() call DocState.date() call DocState.date() call DocState.date() call DocState.date() call DocState.date() call DocState.date() call DocState.date() call DocState.date() call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + decl_stmt int final final = call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call DocState.id() call DocState.id() call DocState.id() call DocState.id() call DocState.id() call DocState.id() call DocState.id() call DocState.id() call DocState.id() call DocState.idNum() call DocState.idNum() call DocState.idNum() call DocState.idNum() call DocState.idNum() call DocState.idNum() call DocState.idNum() call DocState.idNum() call DocState.idNum() if != call DocState.idNumDV() call DocState.idNumDV() call DocState.idNumDV() call DocState.idNumDV() call DocState.idNumDV() call DocState.idNumDV() call DocState.idNumDV() call DocState.idNumDV() call DocState.idNumDV() if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == decl_stmt org.apache.lucene.document.Document = new for : call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() return