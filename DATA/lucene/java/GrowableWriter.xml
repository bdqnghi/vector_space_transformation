org.apache.lucene.util.packed java.io.IOException import org.apache.lucene.store.DataOutput import org.apache.lucene.util.RamUsageEstimator import class org.apache.lucene.util.packed.GrowableWriter super super extends long decl PackedInts decl Mutable private static private static return == ~ : public public return call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() public public return call decl PackedInts.size() call decl PackedInts.size() call decl PackedInts.size() call decl PackedInts.size() call decl PackedInts.size() public public return call decl PackedInts.getBitsPerValue() call decl PackedInts.getBitsPerValue() call decl PackedInts.getBitsPerValue() call decl PackedInts.getBitsPerValue() call decl PackedInts.getBitsPerValue() public public return int decl PackedInts int private private if & == return decl_stmt int final final = assert > call decl PackedInts.getBitsPerValue() call decl PackedInts.getBitsPerValue() call decl PackedInts.getBitsPerValue() call decl PackedInts.getBitsPerValue() call decl PackedInts.getBitsPerValue() decl_stmt int final final = decl_stmt Mutable = = = call decl PackedInts.getBitsPerValue() call decl PackedInts.getBitsPerValue() call decl PackedInts.getBitsPerValue() call decl PackedInts.getBitsPerValue() call decl PackedInts.getBitsPerValue() public public call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() public public call decl PackedInts.clear() call decl PackedInts.clear() call decl PackedInts.clear() call decl PackedInts.clear() call decl PackedInts.clear() int GrowableWriter public public decl_stmt org.apache.lucene.util.packed.GrowableWriter = new decl_stmt int final final = return public public return call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() long public public decl_stmt long = for = = + < ++ |= return call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() public public call decl PackedInts.fill() call decl PackedInts.fill() call decl PackedInts.fill() call decl PackedInts.fill() call decl PackedInts.fill() public public return + + + + call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() public public throws call decl PackedInts.save() call decl PackedInts.save() call decl PackedInts.save() call decl PackedInts.save() call decl PackedInts.save()