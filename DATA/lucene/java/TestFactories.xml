org.apache.lucene.analysis.core java.io.IOException import java.io.Reader import java.lang.reflect.Constructor import java.lang.reflect.InvocationTargetException import java.util.HashMap import java.util.Map import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.BaseTokenStreamTestCase import org.apache.lucene.analysis.MockTokenizer import org.apache.lucene.analysis.Tokenizer import org.apache.lucene.analysis.util.AbstractAnalysisFactory import org.apache.lucene.analysis.util.CharFilterFactory import org.apache.lucene.analysis.util.MultiTermAwareComponent import org.apache.lucene.analysis.util.ResourceLoaderAware import org.apache.lucene.analysis.util.StringMockResourceLoader import org.apache.lucene.analysis.util.TokenFilterFactory import org.apache.lucene.analysis.util.TokenizerFactory import org.apache.lucene.util.AttributeFactory import org.apache.lucene.util.Version import class org.apache.lucene.analysis.core.TestFactories super super extends TokenizerFactory public public throws for : for : for : decl Class AbstractAnalysisFactory TokenizerFactory Analyzer private private throws decl_stmt java.lang.Class < extends extends = decl_stmt org.apache.lucene.analysis.util.TokenizerFactory = if != if instanceof decl_stmt org.apache.lucene.analysis.util.AbstractAnalysisFactory = instanceof decl_stmt org.apache.lucene.analysis.Analyzer = new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() decl Class AbstractAnalysisFactory TokenFilterFactory Analyzer private private throws decl_stmt java.lang.Class < extends extends = decl_stmt org.apache.lucene.analysis.util.TokenFilterFactory = if != if instanceof decl_stmt org.apache.lucene.analysis.util.AbstractAnalysisFactory = instanceof decl_stmt org.apache.lucene.analysis.Analyzer = new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() decl Class AbstractAnalysisFactory CharFilterFactory Analyzer private private throws decl_stmt java.lang.Class < extends extends = decl_stmt org.apache.lucene.analysis.util.CharFilterFactory = if != if instanceof decl_stmt org.apache.lucene.analysis.util.AbstractAnalysisFactory = instanceof decl_stmt org.apache.lucene.analysis.Analyzer = new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() decl Map AbstractAnalysisFactory decl Constructor private private < extends extends throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.reflect.Constructor < extends extends try = catch throw new + + decl_stmt org.apache.lucene.analysis.util.AbstractAnalysisFactory = try = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch throw new catch if instanceof return if instanceof try new catch catch return public public return new Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = if != return new else return new protected protected if != return else return