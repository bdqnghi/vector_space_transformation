org.apache.lucene.search.grouping java.io.IOException import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.FieldComparator import org.apache.lucene.search.LeafCollector import org.apache.lucene.search.LeafFieldComparator import org.apache.lucene.search.Scorer import org.apache.lucene.search.SimpleCollector import org.apache.lucene.search.Sort import org.apache.lucene.search.SortField import org.apache.lucene.search.TopDocs import org.apache.lucene.search.TopDocsCollector import org.apache.lucene.search.TopFieldCollector import org.apache.lucene.search.TopScoreDocCollector import org.apache.lucene.search.Weight import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.PriorityQueue import class org.apache.lucene.search.grouping.BlockGroupingCollector super super extends int Sort boolean Scorer boolean decl float Weight int decl LeafFieldComparator boolean int int int int int GroupQueue DocIdSetIterator LeafReaderContext int int decl int decl int int int protected protected final final final final assert != assert != decl_stmt int final final = for = < ++ decl_stmt int final final = * if != return > return > OneGroup decl int decl float OneGroup private private ++ if if ! decl_stmt OneGroup final final = new = = + = = new if = = new = = decl_stmt OneGroup final final = call boolean.add() call boolean.add() call boolean.add() call boolean.add() call boolean.add() = call boolean.size() call boolean.size() call boolean.size() call boolean.size() call boolean.size() == if = for = < ++ else = call boolean.size() call boolean.size() call boolean.size() call boolean.size() call boolean.size() else decl_stmt OneGroup final final = call boolean.top() call boolean.top() call boolean.top() call boolean.top() call boolean.top() assert != = = + decl_stmt int final final final = = = if decl_stmt float final final final = = = = = call boolean.updateTop() call boolean.updateTop() call boolean.updateTop() call boolean.updateTop() call boolean.updateTop() for = < ++ = TopDocs decl TopDocsCollector float int OneGroup decl Object int FakeScorer LeafCollector public < public < throws if != if >= call boolean.size() call boolean.size() call boolean.size() call boolean.size() call boolean.size() return decl_stmt int = decl_stmt org.apache.lucene.search.FakeScorer final final = new decl_stmt float = if != if >= call boolean.size() call boolean.size() call boolean.size() call boolean.size() call boolean.size() return decl_stmt int = decl_stmt org.apache.lucene.search.FakeScorer final final = new decl_stmt float = for = call boolean.size() call boolean.size() call boolean.size() call boolean.size() call boolean.size() - - >= -- decl_stmt OneGroup final final = call boolean.pop() call boolean.pop() call boolean.pop() call boolean.pop() call boolean.pop() decl_stmt org.apache.lucene.search.TopDocsCollector final final final < if if ! throw new = else = decl_stmt org.apache.lucene.search.LeafCollector = call LeafCollector.getLeafCollector() call LeafCollector.getLeafCollector() call LeafCollector.getLeafCollector() call LeafCollector.getLeafCollector() call LeafCollector.getLeafCollector() call int.setScorer() call int.setScorer() call int.setScorer() call int.setScorer() call int.setScorer() for = < ++ decl_stmt int final final = = if = call int.collect() call int.collect() call int.collect() call int.collect() call int.collect() += decl_stmt java.lang.Object final final final if = new < for = < ++ = else = decl_stmt org.apache.lucene.search.TopDocs final final = call LeafCollector.topDocs() call LeafCollector.topDocs() call LeafCollector.topDocs() call LeafCollector.topDocs() call LeafCollector.topDocs() = new <> = return new <> new <> call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() public public throws = for : int public public throws if > if != = call Scorer.advance() call Scorer.advance() call Scorer.advance() call Scorer.advance() call Scorer.advance() = = ! ++ if == = = if if == = = call GroupQueue.score() call GroupQueue.score() call GroupQueue.score() call GroupQueue.score() call GroupQueue.score() ++ if if == assert ! for : = else for = ++ decl_stmt int final final = * if < return else if > break else if == return for : = else for = ++ decl_stmt int final final = * if < return else if > break else if == return = for : = Scorer protected protected throws if != = = decl_stmt org.apache.lucene.search.Scorer = call Weight.scorer() call Weight.scorer() call Weight.scorer() call Weight.scorer() call Weight.scorer() if == = else = call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() = - = for = < ++ = public public return