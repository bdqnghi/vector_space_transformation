org.apache.solr.spelling java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Arrays import java.util.Iterator import java.util.List import org.apache.lucene.analysis.Token import org.apache.lucene.index.IndexReader import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.DisMaxParams import org.apache.solr.common.params.GroupParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.params.SpellingParams import org.apache.solr.common.util.NamedList import org.apache.solr.handler.component.QueryComponent import org.apache.solr.handler.component.ResponseBuilder import org.apache.solr.handler.component.SearchComponent import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.search.EarlyTerminatingCollectorException import org.apache.solr.search.SolrIndexSearcher import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.spelling.SpellCheckCollator int Logger int int int boolean decl RankedSpellPossibility int ModifiableSolrParams decl String String int int SolrParams SpellCheckCollation IndexReader decl Iterator decl List int int int decl PossibilityIterator int QueryComponent String ResponseBuilder PossibilityIterator int boolean public < public < decl_stmt java.util.List < = new <> decl_stmt org.apache.solr.handler.component.QueryComponent = if != for : if instanceof = break decl_stmt boolean = decl_stmt int = decl_stmt int = if < = = = if == && call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = = = > : decl_stmt int = - if && > decl_stmt org.apache.lucene.index.IndexReader = = call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() decl_stmt int = decl_stmt int = decl_stmt org.apache.solr.spelling.PossibilityIterator = new while < && < && call org.apache.solr.spelling.PossibilityIterator.hasNext() call org.apache.solr.spelling.PossibilityIterator.hasNext() call org.apache.solr.spelling.PossibilityIterator.hasNext() call org.apache.solr.spelling.PossibilityIterator.hasNext() call org.apache.solr.spelling.PossibilityIterator.hasNext() decl_stmt RankedSpellPossibility = call org.apache.solr.spelling.PossibilityIterator.next() call org.apache.solr.spelling.PossibilityIterator.next() call org.apache.solr.spelling.PossibilityIterator.next() call org.apache.solr.spelling.PossibilityIterator.next() call org.apache.solr.spelling.PossibilityIterator.next() decl_stmt java.lang.String = decl_stmt int = if ++ decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new decl_stmt java.util.Iterator < = call int.getParameterNamesIterator() call int.getParameterNamesIterator() call int.getParameterNamesIterator() call int.getParameterNamesIterator() call int.getParameterNamesIterator() decl_stmt int = while call ModifiableSolrParams.hasNext() call ModifiableSolrParams.hasNext() call ModifiableSolrParams.hasNext() call ModifiableSolrParams.hasNext() call ModifiableSolrParams.hasNext() decl_stmt java.lang.String = call ModifiableSolrParams.next() call ModifiableSolrParams.next() call ModifiableSolrParams.next() call ModifiableSolrParams.next() call ModifiableSolrParams.next() if call int.startsWith() call int.startsWith() call int.startsWith() call int.startsWith() call int.startsWith() && call int.length() call int.length() call int.length() call int.length() call int.length() > decl_stmt java.lang.String = call int.getParams() call int.getParams() call int.getParams() call int.getParams() call int.getParams() if == && == call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call int.substring() call int.substring() call int.substring() call int.substring() call int.substring() else call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call int.substring() call int.substring() call int.substring() call int.substring() call int.substring() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() + call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.set() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() call SolrParams.remove() decl_stmt org.apache.solr.handler.component.ResponseBuilder = new new new > call decl String.setQparser() call decl String.setQparser() call decl String.setQparser() call decl String.setQparser() call decl String.setQparser() call decl String.setFilters() call decl String.setFilters() call decl String.setFilters() call decl String.setFilters() call decl String.setFilters() call decl String.setQueryString() call decl String.setQueryString() call decl String.setQueryString() call decl String.setQueryString() call decl String.setQueryString() = > try call org.apache.solr.handler.component.QueryComponent.prepare(ResponseBuilder) call org.apache.solr.handler.component.QueryComponent.prepare(ResponseBuilder) call org.apache.solr.handler.component.QueryComponent.prepare(ResponseBuilder) call org.apache.solr.handler.component.QueryComponent.prepare(ResponseBuilder) call org.apache.solr.handler.component.QueryComponent.prepare(ResponseBuilder) if > decl_stmt int = call decl String.getFieldFlags() call decl String.getFieldFlags() call decl String.getFieldFlags() call decl String.getFieldFlags() call decl String.getFieldFlags() call decl String.setFieldFlags() call decl String.setFieldFlags() call decl String.setFieldFlags() call decl String.setFieldFlags() call decl String.setFieldFlags() |= call org.apache.solr.handler.component.QueryComponent.process(ResponseBuilder) call org.apache.solr.handler.component.QueryComponent.process(ResponseBuilder) call org.apache.solr.handler.component.QueryComponent.process(ResponseBuilder) call org.apache.solr.handler.component.QueryComponent.process(ResponseBuilder) call org.apache.solr.handler.component.QueryComponent.process(ResponseBuilder) = call decl String.rsp() call decl String.rsp() call decl String.rsp() call decl String.rsp() call decl String.rsp() call decl String.rsp() call decl String.rsp() call decl String.rsp() call decl String.rsp() catch assert > assert < assert < if == = else = * / float catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() finally call decl String.req() call decl String.req() call decl String.req() call decl String.req() call decl String.req() call decl String.req() call decl String.req() call decl String.req() call decl String.req() if > || ! ++ decl_stmt org.apache.solr.spelling.SpellCheckCollation = new call int.setCollationQuery() call int.setCollationQuery() call int.setCollationQuery() call int.setCollationQuery() call int.setCollationQuery() call int.setHits() call int.setHits() call int.setHits() call int.setHits() call int.setHits() call int.setInternalRank() call int.setInternalRank() call int.setInternalRank() call int.setInternalRank() call int.setInternalRank() * + : decl_stmt org.apache.solr.common.util.NamedList < = new <> for : call SpellCheckCollation.add() call SpellCheckCollation.add() call SpellCheckCollation.add() call SpellCheckCollation.add() call SpellCheckCollation.add() call int.setMisspellingsAndCorrections() call int.setMisspellingsAndCorrections() call int.setMisspellingsAndCorrections() call int.setMisspellingsAndCorrections() call int.setMisspellingsAndCorrections() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + + : return int int int boolean SpellCheckCorrection StringBuilder Token int int String int StringBuilder Character char private private < decl_stmt java.lang.StringBuilder = new decl_stmt int = decl_stmt java.lang.String = for = < ++ decl_stmt org.apache.solr.spelling.SpellCheckCorrection = decl_stmt org.apache.lucene.queryparser.surround.parser.Token = call org.apache.solr.spelling.SpellCheckCorrection.getOriginal() call org.apache.solr.spelling.SpellCheckCorrection.getOriginal() call org.apache.solr.spelling.SpellCheckCorrection.getOriginal() call org.apache.solr.spelling.SpellCheckCorrection.getOriginal() call org.apache.solr.spelling.SpellCheckCorrection.getOriginal() if call Token.getPositionIncrement() call Token.getPositionIncrement() call Token.getPositionIncrement() call Token.getPositionIncrement() call Token.getPositionIncrement() == continue = call org.apache.solr.spelling.SpellCheckCorrection.getCorrection() call org.apache.solr.spelling.SpellCheckCorrection.getCorrection() call org.apache.solr.spelling.SpellCheckCorrection.getCorrection() call org.apache.solr.spelling.SpellCheckCorrection.getCorrection() call org.apache.solr.spelling.SpellCheckCorrection.getCorrection() decl_stmt boolean = decl_stmt java.lang.Character = decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) decl_stmt java.lang.StringBuilder = new decl_stmt int = while > - && < call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - = decl_stmt char = call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.startOffset() > call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.startOffset() - : if == || == call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) + if == = ++ else if call org.apache.lucene.queryparser.surround.parser.Token.getFlags() call org.apache.lucene.queryparser.surround.parser.Token.getFlags() call org.apache.lucene.queryparser.surround.parser.Token.getFlags() call org.apache.lucene.queryparser.surround.parser.Token.getFlags() call org.apache.lucene.queryparser.surround.parser.Token.getFlags() & == call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) + += = call org.apache.solr.spelling.SpellCheckCorrection.getCorrection() call org.apache.solr.spelling.SpellCheckCorrection.getCorrection() call org.apache.solr.spelling.SpellCheckCorrection.getCorrection() call org.apache.solr.spelling.SpellCheckCorrection.getCorrection() call org.apache.solr.spelling.SpellCheckCorrection.getCorrection() + decl_stmt int = if if != call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) ++ call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt int = call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.startOffset() + - decl_stmt int = call Token.endOffset() call Token.endOffset() call Token.endOffset() call Token.endOffset() call Token.endOffset() + call java.lang.StringBuilder.replace(int,int,String) call java.lang.StringBuilder.replace(int,int,String) call java.lang.StringBuilder.replace(int,int,String) call java.lang.StringBuilder.replace(int,int,String) call java.lang.StringBuilder.replace(int,int,String) += call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - - call Token.endOffset() call Token.endOffset() call Token.endOffset() call Token.endOffset() call Token.endOffset() - call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.startOffset() return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public = return public public = return public public = return public public = return public public = return