org.apache.lucene.document java.io.IOException import java.util.ArrayList import java.util.Comparator import java.util.List import java.util.PriorityQueue import org.apache.lucene.geo.Rectangle import org.apache.lucene.index.PointValues.IntersectVisitor import org.apache.lucene.index.PointValues.Relation import org.apache.lucene.util.Bits import org.apache.lucene.util.SloppyMath import org.apache.lucene.util.bkd.BKDReader import static static org.apache.lucene.geo.GeoEncodingUtils.decodeLatitude import static static org.apache.lucene.geo.GeoEncodingUtils.decodeLongitude import class org.apache.lucene.document.NearestNeighbor public public return double double double double public public decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = return + + + + + + + + + + + + public public throw new Rectangle NearestHit private private if < || & == decl_stmt NearestHit = decl_stmt org.apache.lucene.geo.Rectangle = = = if call org.apache.lucene.geo.Rectangle.crossesDateline() call org.apache.lucene.geo.Rectangle.crossesDateline() call org.apache.lucene.geo.Rectangle.crossesDateline() call org.apache.lucene.geo.Rectangle.crossesDateline() call org.apache.lucene.geo.Rectangle.crossesDateline() = = = else = = = ++ NearestHit double int double double public public if != && == return decl_stmt double = decl_stmt double = if < || || return if < || || && < return decl_stmt double = decl_stmt int = + if == decl_stmt NearestHit = if < || == && < = = else decl_stmt NearestHit = new = = public public throw new public public return + + + + decl List decl NearestHit decl byte double double decl byte decl PriorityQueue NearestVisitor Cell int decl PriorityQueue double decl byte double BKDReader int public static public static < < < final final throws decl_stmt org.apache.lucene.util.PriorityQueue final final final < = new <> new < public public decl_stmt int = if != return - return - decl_stmt org.apache.lucene.util.PriorityQueue < = new <> decl_stmt NearestVisitor = new decl_stmt java.util.List < = new <> for = < ++ decl_stmt org.apache.lucene.util.bkd.BKDReader = decl_stmt byte = call org.apache.lucene.util.bkd.BKDReader.getMinPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMinPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMinPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMinPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMinPackedValue() decl_stmt byte = call org.apache.lucene.util.bkd.BKDReader.getMaxPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMaxPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMaxPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMaxPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMaxPackedValue() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.lucene.util.bkd.BKDReader.getIntersectState(IntersectVisitor) call org.apache.lucene.util.bkd.BKDReader.getIntersectState(IntersectVisitor) call org.apache.lucene.util.bkd.BKDReader.getIntersectState(IntersectVisitor) call org.apache.lucene.util.bkd.BKDReader.getIntersectState(IntersectVisitor) call org.apache.lucene.util.bkd.BKDReader.getIntersectState(IntersectVisitor) call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() new call org.apache.lucene.util.bkd.BKDReader.getMinPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMinPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMinPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMinPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMinPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMaxPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMaxPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMaxPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMaxPackedValue() call org.apache.lucene.util.bkd.BKDReader.getMaxPackedValue() while call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() > decl_stmt org.apache.lucene.spatial.prefix.tree.Cell = call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() decl_stmt org.apache.lucene.util.bkd.BKDReader = if call org.apache.lucene.util.bkd.BKDReader.isLeafNode(int) call org.apache.lucene.util.bkd.BKDReader.isLeafNode(int) call org.apache.lucene.util.bkd.BKDReader.isLeafNode(int) call org.apache.lucene.util.bkd.BKDReader.isLeafNode(int) call org.apache.lucene.util.bkd.BKDReader.isLeafNode(int) = = call org.apache.lucene.util.bkd.BKDReader.visitLeafBlockValues(int,IntersectState) call org.apache.lucene.util.bkd.BKDReader.visitLeafBlockValues(int,IntersectState) call org.apache.lucene.util.bkd.BKDReader.visitLeafBlockValues(int,IntersectState) call org.apache.lucene.util.bkd.BKDReader.visitLeafBlockValues(int,IntersectState) call org.apache.lucene.util.bkd.BKDReader.visitLeafBlockValues(int,IntersectState) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = if < || < || < || < && < continue decl_stmt byte = call Cell.maxPacked() call Cell.maxPacked() call Cell.maxPacked() call Cell.maxPacked() call Cell.maxPacked() call Cell.maxPacked() call Cell.maxPacked() call Cell.maxPacked() call Cell.maxPacked() call org.apache.lucene.util.bkd.BKDReader.copySplitValue(int,byte) call org.apache.lucene.util.bkd.BKDReader.copySplitValue(int,byte) call org.apache.lucene.util.bkd.BKDReader.copySplitValue(int,byte) call org.apache.lucene.util.bkd.BKDReader.copySplitValue(int,byte) call org.apache.lucene.util.bkd.BKDReader.copySplitValue(int,byte) call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() new * = call Cell.minPacked() call Cell.minPacked() call Cell.minPacked() call Cell.minPacked() call Cell.minPacked() call Cell.minPacked() call Cell.minPacked() call Cell.minPacked() call Cell.minPacked() call org.apache.lucene.util.bkd.BKDReader.copySplitValue(int,byte) call org.apache.lucene.util.bkd.BKDReader.copySplitValue(int,byte) call org.apache.lucene.util.bkd.BKDReader.copySplitValue(int,byte) call org.apache.lucene.util.bkd.BKDReader.copySplitValue(int,byte) call org.apache.lucene.util.bkd.BKDReader.copySplitValue(int,byte) call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() new * + decl_stmt NearestHit = new call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() decl_stmt int = call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() - while call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() != = call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() -- return int public public decl_stmt int = if != return - return - double double double double private static private static decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = return double double double double private static private static if >= && <= && >= && <= return decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = return