org.apache.lucene.analysis.miscellaneous org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.BaseTokenStreamTestCase import org.apache.lucene.analysis.MockTokenizer import org.apache.lucene.analysis.Token import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.Tokenizer import org.apache.lucene.analysis.core.KeywordTokenizer import org.apache.lucene.analysis.synonym.SynonymFilter import org.apache.lucene.analysis.synonym.SynonymMap import org.apache.lucene.analysis.tokenattributes.OffsetAttribute import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.util.CharsRef import org.apache.lucene.util.TestUtil import java.io.IOException import java.util.Iterator import java.util.Arrays import class org.apache.lucene.analysis.miscellaneous.TestRemoveDuplicatesTokenFilter super super extends Token public static public static decl_stmt org.apache.lucene.queryparser.surround.parser.Token = new call Token.setPositionIncrement() call Token.setPositionIncrement() call Token.setPositionIncrement() call Token.setPositionIncrement() call Token.setPositionIncrement() return public static public static return decl Iterator PositionIncrementAttribute TokenStream Token CharTermAttribute OffsetAttribute public public final final final final throws decl_stmt java.util.Iterator final final final < = decl_stmt org.apache.lucene.analysis.TokenStream final final = new new decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute = decl_stmt org.apache.lucene.analysis.tokenattributes.OffsetAttribute = decl_stmt org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute = public public if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.apache.lucene.queryparser.surround.parser.Token = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.endOffset() call Token.endOffset() call Token.endOffset() call Token.endOffset() call Token.endOffset() call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call Token.getPositionIncrement() call Token.getPositionIncrement() call Token.getPositionIncrement() call Token.getPositionIncrement() call Token.getPositionIncrement() return else return Token public public if decl_stmt org.apache.lucene.queryparser.surround.parser.Token = call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.startOffset() call Token.endOffset() call Token.endOffset() call Token.endOffset() call Token.endOffset() call Token.endOffset() call Token.getPositionIncrement() call Token.getPositionIncrement() call Token.getPositionIncrement() call Token.getPositionIncrement() call Token.getPositionIncrement() return else return public public throws public public throws public public throws String private private while decl_stmt java.lang.String final final = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() != && call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) == - return private private new new int decl SynonymMap Tokenizer Analyzer decl Builder boolean SynonymMap int public public throws decl_stmt int final final = for = < ++ decl_stmt org.apache.lucene.util.fst.Builder = new decl_stmt int final final = for = < ++ decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt boolean final final = decl_stmt org.apache.lucene.analysis.Analyzer final final = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new decl_stmt org.apache.lucene.analysis.TokenStream = new return new new call boolean.close() call boolean.close() call boolean.close() call boolean.close() call boolean.close() TokenStream Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new decl_stmt org.apache.lucene.analysis.TokenStream = new return new new Analyzer Tokenizer public public throws decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new