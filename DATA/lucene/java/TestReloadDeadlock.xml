org.apache.solr.search com.carrotsearch.randomizedtesting.annotations.TimeoutSuite import org.apache.lucene.util.LuceneTestCase.Nightly import org.apache.lucene.util.TimeUnits import org.junit.BeforeClass import org.junit.Test import org.slf4j.Logger import org.slf4j.LoggerFactory import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import java.util.Random import java.util.concurrent.atomic.AtomicBoolean import java.util.concurrent.atomic.AtomicLong import static static org.apache.solr.update.processor.DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM import class annotation annotation org.apache.solr.search.TestReloadDeadlock super super extends Logger public static public static throws StringBuilder public static public static if decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) == : call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() int Random AtomicLong long Thread long AtomicBoolean DocInfo decl Map int int AtomicLong int long decl List boolean int int public public throws decl_stmt int final final = + decl_stmt int final final = + decl_stmt int final final = + : decl_stmt int = + decl_stmt java.util.concurrent.atomic.AtomicLong final final = new decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new decl_stmt java.util.List < = new <> decl_stmt java.util.concurrent.atomic.AtomicLong final final = new for = < ++ decl_stmt java.lang.Thread = new + decl_stmt java.util.Random = new public public try while call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() > decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) if < if call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) call java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean) decl_stmt java.util.Map < decl_stmt long synchronized = new <> = ++ synchronized if >= + = = call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) continue decl_stmt int if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) else = decl_stmt boolean = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if = decl_stmt DocInfo = decl_stmt long = decl_stmt long = + decl_stmt long = call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if < + else if ! = catch call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) - call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() while call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() > + call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() try for : call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) catch for : + call java.lang.Thread.getName() call java.lang.Thread.getName() call java.lang.Thread.getName() call java.lang.Thread.getName() call java.lang.Thread.getName() + call Thread.isAlive() call Thread.isAlive() call Thread.isAlive() call Thread.isAlive() call Thread.isAlive() int DocInfo long long decl Map long int boolean public public try while > decl_stmt int = if < if decl_stmt java.util.Map < decl_stmt long synchronized = new <> = ++ synchronized if >= + = = continue decl_stmt int if = else = decl_stmt boolean = if = decl_stmt DocInfo = decl_stmt long = decl_stmt long = + decl_stmt long = if if < + else if ! = catch - call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new DocInfo Long private private throws decl_stmt java.lang.Long = if != call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new DocInfo Long private private throws decl_stmt java.lang.Long = + - if != - call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new -