org.apache.lucene.benchmark.quality.utils java.io.IOException import java.nio.file.Paths import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.IndexReader import org.apache.lucene.index.TermsEnum import org.apache.lucene.index.Terms import org.apache.lucene.index.MultiFields import org.apache.lucene.store.Directory import org.apache.lucene.store.FSDirectory import org.apache.lucene.util.PriorityQueue import class org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder String Directory String QualityQueriesFinder public static public static throws if < decl_stmt org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder = new decl_stmt java.lang.String = call org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.bestQueries(String,int) call org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.bestQueries(String,int) call org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.bestQueries(String,int) call org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.bestQueries(String,int) call org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.bestQueries(String,int) for = < ++ + String int int private private throws decl_stmt java.lang.String = * decl_stmt int = decl_stmt int = / decl_stmt java.lang.String = new for = < ++ = + + + + + - - - + + - - return private static private static return + + + + + + + == : + + + + + == : + + + + + == : + + + decl PriorityQueue Terms TermsEnum int IndexReader TermDf String int String int private private throws decl_stmt org.apache.lucene.util.PriorityQueue < = new decl_stmt org.apache.lucene.index.IndexReader = try decl_stmt int = call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() / decl_stmt org.apache.lucene.index.Terms = if != decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() while call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != decl_stmt int = call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() if < decl_stmt java.lang.String = call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() new finally call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() decl_stmt java.lang.String = new call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() decl_stmt int = while call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() > decl_stmt TermDf = call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() ++ = + + + + return protected protected return <