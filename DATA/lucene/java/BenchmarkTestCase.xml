org.apache.lucene.benchmark java.io.IOException import java.io.InputStream import java.io.StringReader import java.nio.file.Files import java.nio.file.Path import org.apache.lucene.benchmark.byTask.Benchmark import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.LuceneTestCase.SuppressSysoutChecks import org.junit.AfterClass import org.junit.BeforeClass import class annotation org.apache.lucene.benchmark.BenchmarkTestCase super super extends String String Path public static public static = public static public static = public public return Path public public throws decl_stmt java.nio.file.Path = try = public public return public public return String Benchmark public public throws decl_stmt java.lang.String = decl_stmt org.apache.lucene.benchmark.byTask.Benchmark = new new call org.apache.lucene.benchmark.byTask.Benchmark.execute() call org.apache.lucene.benchmark.byTask.Benchmark.execute() call org.apache.lucene.benchmark.byTask.Benchmark.execute() call org.apache.lucene.benchmark.byTask.Benchmark.execute() call org.apache.lucene.benchmark.byTask.Benchmark.execute() return StringBuilder String private private decl_stmt java.lang.String = decl_stmt java.lang.StringBuilder = new for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() private static private static if ! return