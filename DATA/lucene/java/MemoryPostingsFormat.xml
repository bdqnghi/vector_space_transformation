org.apache.lucene.codecs.memory java.io.IOException import java.util.Collection import java.util.Collections import java.util.Iterator import java.util.Map import java.util.SortedMap import java.util.TreeMap import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.FieldsConsumer import org.apache.lucene.codecs.FieldsProducer import org.apache.lucene.codecs.PostingsFormat import org.apache.lucene.codecs.TermStats import org.apache.lucene.index.CorruptIndexException import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.Fields import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.SegmentReadState import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.ChecksumIndexInput import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.IndexOutput import org.apache.lucene.store.RAMOutputStream import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.IOUtils import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.fst.Builder import org.apache.lucene.util.fst.ByteSequenceOutputs import org.apache.lucene.util.fst.BytesRefFSTEnum import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.Util import org.apache.lucene.util.packed.PackedInts import class org.apache.lucene.codecs.memory.MemoryPostingsFormat super super extends int String float boolean String int public public return + + + + int public public throws decl_stmt int final final = - assert == || > = ++ if == else if == << | else << assert > = = int int int int public public throws assert == || decl_stmt int final final = - assert >= = decl_stmt int = if = == : if != = << | else << else if >= decl_stmt int = - decl_stmt int = - if != << | else << = = if > public public assert == = = = = - return int int private private throws if == return assert == assert == if != - decl_stmt int = int decl_stmt int final final = + int if > = = = ++ decl FST public public throws if > if != decl_stmt org.apache.lucene.util.fst.FST < = call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() boolean int TermsWriter int long BytesRef PostingsEnum long long int IndexOptions PostingsEnum Terms int int FixedBitSet boolean FieldInfo int BytesRef int TermsEnum boolean boolean public public throws for : decl_stmt org.apache.lucene.index.Terms = if == continue decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.index.FieldInfo = decl_stmt TermsWriter = new decl_stmt org.apache.lucene.util.FixedBitSet = new decl_stmt long = decl_stmt long = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt int decl_stmt IndexOptions = call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() decl_stmt boolean = call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() >= decl_stmt boolean = call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() >= decl_stmt boolean = call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() >= decl_stmt boolean = call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() if == = else if == = else if == if = else = else if = | else = while decl_stmt org.apache.lucene.util.BytesRef = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == break call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() if = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) = else = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) = decl_stmt int = decl_stmt long = while decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() if == break call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) ++ decl_stmt int if = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() += else = - call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() if for = < ++ decl_stmt int = call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() decl_stmt org.apache.lucene.util.BytesRef = call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() : decl_stmt int decl_stmt int if = call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() = call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() else = - = - call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.postingsWriter() call TermsWriter.finishTerm() call TermsWriter.finishTerm() call TermsWriter.finishTerm() call TermsWriter.finishTerm() call TermsWriter.finishTerm() new += += call TermsWriter.finish() call TermsWriter.finish() call TermsWriter.finish() call TermsWriter.finish() call TermsWriter.finish() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() public public throws if return = try = public public throws return new public public return == && == public public assert > if < = = - = = = = = return int int public public if == return = ++ if == += else decl_stmt int final final = += >>> if & != = else = assert > if == for = < ++ if ! else decl_stmt int final final = if & != = else if == for = < ++ decl_stmt int = if && & != = if & != if return = public public return public public throws return public public return public public return public public throws return - public public throws return - public public throws return - public public throws return public public return == && == public public assert > if < = - = - = = = = = = = : - = return int public public while > while if == return = ++ decl_stmt int final final = += >>> if & != = else = assert > = = : - = return = int int public public assert > -- if ! += else decl_stmt int final final = += >>> if & != = if decl_stmt int = if & != = += >>> if = = return public public return public public return + public public return > : public public return public public throws return public public return public public return private private if ! = if != = + else = - = = = - - = public public throws = = return != public public throws = if == return else = if return else return boolean FSTPostingsEnum boolean FSTDocsEnum public public decl_stmt boolean = >= if && decl_stmt boolean = >= decl_stmt FSTPostingsEnum if == || ! instanceof = new else = if ! call FSTPostingsEnum.canReuse() call FSTPostingsEnum.canReuse() call FSTPostingsEnum.canReuse() call FSTPostingsEnum.canReuse() call FSTPostingsEnum.canReuse() = new return call FSTPostingsEnum.reset() call FSTPostingsEnum.reset() call FSTPostingsEnum.reset() call FSTPostingsEnum.reset() call FSTPostingsEnum.reset() decl_stmt FSTDocsEnum if == || ! instanceof = new else = if ! call FSTDocsEnum.canReuse() call FSTDocsEnum.canReuse() call FSTDocsEnum.canReuse() call FSTDocsEnum.canReuse() call FSTDocsEnum.canReuse() = new return call FSTDocsEnum.reset() call FSTDocsEnum.reset() call FSTDocsEnum.reset() call FSTDocsEnum.reset() call FSTDocsEnum.reset() public public return public public throws = if == return = return public public return public public return public public throw new public public throw new public public return public public return public public return public public return public public return new public public return >= public public return >= public public return >= public public return public public return != : public < public < if == return else return public public return + + + + + + + + long decl SortedMap String int TermsReader Throwable public public throws decl_stmt java.lang.String final final = decl_stmt java.util.SortedMap final final final < = new <> try = decl_stmt java.lang.Throwable = try while decl_stmt int final final = if == break decl_stmt TermsReader final final = new call decl SortedMap.put() call decl SortedMap.put() call decl SortedMap.put() call decl SortedMap.put() call decl SortedMap.put() catch = finally return new public < public < return call decl SortedMap.keySet() call decl SortedMap.keySet() call decl SortedMap.keySet() call decl SortedMap.keySet() call decl SortedMap.keySet() public public return call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() public public return call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() public public for : call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() = public public decl_stmt long = for < : call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() += * += return public < public < return public public return + call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() + public public throws public < public < return public public return public public return public public for : = long public public decl_stmt long = for < : += * += return public < public < return public public return + + public public throws