org.apache.lucene.search java.io.IOException import java.util.* import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.LeafReader import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexReaderContext import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.index.TermState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.similarities.Similarity.SimScorer import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.PriorityQueue import class org.apache.lucene.search.MultiPhraseQuery super super extends String decl Term int decl int public public if < throw new = return public public return new int public public decl_stmt int = if call decl int.size() call decl int.size() call decl int.size() call decl int.size() call decl int.size() > = call decl int.get() call decl int.get() call decl int.get() call decl int.get() call decl int.get() call decl int.size() call decl int.size() call decl int.size() call decl int.size() call decl int.size() - + return public public if call decl Term.size() call decl Term.size() call decl Term.size() call decl Term.size() call decl Term.size() == = for : if ! throw new + + + call decl Term.add() call decl Term.add() call decl Term.add() call decl Term.add() call decl Term.add() call decl int.add() call decl int.add() call decl int.add() call decl int.add() call decl int.add() return decl Term decl int public public decl_stmt int = new for = < ++ = decl_stmt org.apache.lucene.index.Term = call decl Term.toArray() call decl Term.toArray() call decl Term.toArray() call decl Term.toArray() call decl Term.toArray() new call decl Term.size() call decl Term.size() call decl Term.size() call decl Term.size() call decl Term.size() return new public public return public public return public public return public public < for final final final : public public return public public float Terms TermsEnum decl PhraseQuery LeafReader decl List decl Term TermState decl PostingsAndFreq public public throws assert != decl_stmt org.apache.lucene.index.LeafReader final final = decl_stmt PostingsAndFreq = new decl_stmt org.apache.lucene.index.Terms final final = call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) if == return if call decl PostingsAndFreq.hasPositions() call decl PostingsAndFreq.hasPositions() call decl PostingsAndFreq.hasPositions() call decl PostingsAndFreq.hasPositions() call decl PostingsAndFreq.hasPositions() == throw new + + + + + decl_stmt org.apache.lucene.index.TermsEnum final final = call decl PostingsAndFreq.iterator() call decl PostingsAndFreq.iterator() call decl PostingsAndFreq.iterator() call decl PostingsAndFreq.iterator() call decl PostingsAndFreq.iterator() decl_stmt float = for = < ++ decl_stmt org.apache.lucene.index.Term = decl_stmt java.util.List < = new <> for : decl_stmt org.apache.lucene.index.TermState = if != call Terms.seekExact() call Terms.seekExact() call Terms.seekExact() call Terms.seekExact() call Terms.seekExact() call decl Term.add() call decl Term.add() call decl Term.add() call decl Term.add() call decl Term.add() call Terms.postings() call Terms.postings() call Terms.postings() call Terms.postings() call Terms.postings() += if call decl Term.isEmpty() call decl Term.isEmpty() call decl Term.isEmpty() call decl Term.isEmpty() call decl Term.isEmpty() return decl_stmt org.apache.lucene.index.PostingsEnum final final if call decl Term.size() call decl Term.size() call decl Term.size() call decl Term.size() call decl Term.size() == = call decl Term.get() call decl Term.get() call decl Term.get() call decl Term.get() call decl Term.get() else = new = new if == if == return new else return new Scorer SimScorer Explanation int float Explanation public public throws decl_stmt org.apache.lucene.search.Scorer = if != decl_stmt int = call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() if == decl_stmt float = == call Scorer.freq() call Scorer.freq() call Scorer.freq() call Scorer.freq() call Scorer.freq() : decl_stmt SimScorer = decl_stmt org.apache.lucene.search.Explanation = + decl_stmt org.apache.lucene.search.Explanation = call SimScorer.explain() call SimScorer.explain() call SimScorer.explain() call SimScorer.explain() call SimScorer.explain() return call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() + + + + + + return decl BooleanQuery decl Term public public throws if == return new else if == decl_stmt org.apache.lucene.index.Term = decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() for : call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new return call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() else return public public throws return new StringBuilder int decl Term int public final public final decl_stmt java.lang.StringBuilder = new if == || ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int = - for = < ++ decl_stmt org.apache.lucene.index.Term = decl_stmt int = if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < - ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if < - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() MultiPhraseQuery public public if == return decl_stmt org.apache.lucene.search.MultiPhraseQuery = return == && && public public return ^ ^ ^ int private private decl_stmt int = for final final final : = * + == : return decl Term decl Term private private if != return for = < ++ decl_stmt org.apache.lucene.index.Term = decl_stmt org.apache.lucene.index.Term = if ! == == : return return int int public public throws decl_stmt int = if != for : if == decl_stmt int = for = < ++ = return public public throws return public public return int PostingsEnum public public throws decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt int = call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() do call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() = call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() == return call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() PostingsEnum public public throws decl_stmt org.apache.lucene.index.PostingsEnum = do call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() = call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() < return call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() public public return public public throws return - public public throws return - public public throws return public final public final return < if == ++ = return ++ = = return decl int private private decl_stmt int = new * = *=