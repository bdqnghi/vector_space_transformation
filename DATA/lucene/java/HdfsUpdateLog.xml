org.apache.solr.update java.io.FileNotFoundException import java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Arrays import java.util.List import java.util.Locale import java.util.concurrent.atomic.AtomicLong import org.apache.hadoop.conf.Configuration import org.apache.hadoop.fs.FileStatus import org.apache.hadoop.fs.FileSystem import org.apache.hadoop.fs.Path import org.apache.hadoop.fs.PathFilter import org.apache.hadoop.ipc.RemoteException import org.apache.lucene.util.BytesRef import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.util.IOUtils import org.apache.solr.core.PluginInfo import org.apache.solr.core.SolrCore import org.apache.solr.util.HdfsUtil import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.update.HdfsUpdateLog super super extends Object FileSystem Integer String Path AtomicLong boolean Logger public public try if != return if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + synchronized if != = &= ~ finally return public public = if == = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) Configuration private private decl_stmt Configuration = new if != call Configuration.setBoolean() call Configuration.setBoolean() call Configuration.setBoolean() call Configuration.setBoolean() call Configuration.setBoolean() return TransactionLog boolean Path Update String String long decl List DeleteUpdate public public decl_stmt java.lang.String = = synchronized if == if != = if == || == = if ! try = catch throw new try = new catch throw new else if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + return = new while try if ! call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() decl_stmt boolean = call FileSystem.mkdirs() call FileSystem.mkdirs() call FileSystem.mkdirs() call FileSystem.mkdirs() call FileSystem.mkdirs() if ! throw new + else call FileSystem.mkdirs() call FileSystem.mkdirs() call FileSystem.mkdirs() call FileSystem.mkdirs() call FileSystem.mkdirs() break catch if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() try catch continue throw new + catch throw new + = = + if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + + + decl_stmt org.apache.solr.update.TransactionLog = for : decl_stmt java.nio.file.Path = new try = new catch call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() + try call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() catch throw new for : if >= break try = new catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + throw new + try = = = for = - >= -- decl_stmt DeleteUpdate = new new - for = - >= -- decl_stmt Update = decl_stmt java.util.List < = < call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() decl_stmt long = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() public public return call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() decl FileStatus String decl String public static public static decl_stmt java.lang.String final final = + assert != decl_stmt FileStatus try = call FileSystem.listStatus() call FileSystem.listStatus() call FileSystem.listStatus() call FileSystem.listStatus() call FileSystem.listStatus() new public public return catch throw new decl_stmt java.lang.String = new for = < ++ = return public public return public public public public try finally HdfsTransactionLog String protected protected if == decl_stmt java.lang.String = decl_stmt org.apache.solr.update.HdfsTransactionLog = new new = if != = call HdfsTransactionLog.decref() call HdfsTransactionLog.decref() call HdfsTransactionLog.decref() call HdfsTransactionLog.decref() call HdfsTransactionLog.decref() call HdfsTransactionLog.forceClose() call HdfsTransactionLog.forceClose() call HdfsTransactionLog.forceClose() call HdfsTransactionLog.forceClose() call HdfsTransactionLog.forceClose() Path decl String boolean Path public public if == return decl_stmt java.nio.file.Path = new try if != && call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() decl_stmt java.lang.String = for : decl_stmt java.nio.file.Path = new decl_stmt boolean = call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() if ! call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + catch throw new public public = call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() decl FileStatus String decl List public public throws decl_stmt java.lang.String final final = + decl_stmt FileStatus = call FileSystem.listStatus() call FileSystem.listStatus() call FileSystem.listStatus() call FileSystem.listStatus() call FileSystem.listStatus() new public public return decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new public public return public public return + + + +