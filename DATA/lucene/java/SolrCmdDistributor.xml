org.apache.solr.update org.apache.http.HttpResponse import org.apache.solr.client.solrj.SolrClient import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.impl.BinaryResponseParser import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrClient import org.apache.solr.client.solrj.request.AbstractUpdateRequest import org.apache.solr.client.solrj.request.UpdateRequest import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.cloud.ZkCoreNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.core.Diagnostics import org.apache.solr.update.processor.DistributedUpdateProcessor.RequestReplicationTracker import org.slf4j.Logger import org.slf4j.LoggerFactory import java.io.IOException import java.io.InputStream import java.lang.invoke.MethodHandles import java.net.ConnectException import java.util.ArrayList import java.util.Collections import java.util.HashSet import java.util.List import java.util.Set import java.util.concurrent.CompletionService import java.util.concurrent.ExecutorCompletionService import java.util.concurrent.ExecutorService import java.util.concurrent.Future import class org.apache.solr.update.SolrCmdDistributor decl List Logger decl CompletionService decl List StreamingSolrClients decl Diagnostics int boolean decl Set int int ExecutorService public public try assert ! : = finally call StreamingSolrClients.shutdown() call StreamingSolrClients.shutdown() call StreamingSolrClients.shutdown() call StreamingSolrClients.shutdown() call StreamingSolrClients.shutdown() boolean decl List boolean int String decl List private private decl_stmt java.util.List < = new <> call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call org.apache.solr.update.StreamingSolrClients.getErrors() call org.apache.solr.update.StreamingSolrClients.getErrors() call org.apache.solr.update.StreamingSolrClients.getErrors() call org.apache.solr.update.StreamingSolrClients.getErrors() call org.apache.solr.update.StreamingSolrClients.getErrors() decl_stmt java.util.List < = new <> for : try decl_stmt java.lang.String = decl_stmt boolean = decl_stmt boolean = decl_stmt int = if != if if == || == || == = if instanceof if instanceof = if instanceof = if < && ++ + + + + + + + + + try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call org.apache.solr.update.StreamingSolrClients.clearErrors() call org.apache.solr.update.StreamingSolrClients.clearErrors() call org.apache.solr.update.StreamingSolrClients.clearErrors() call org.apache.solr.update.StreamingSolrClients.clearErrors() call org.apache.solr.update.StreamingSolrClients.clearErrors() for : if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > public public < throws UpdateRequest public public < throws for : decl_stmt org.apache.solr.client.solrj.request.UpdateRequest = new call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setCommitWithin() call UpdateRequest.setCommitWithin() call UpdateRequest.setCommitWithin() call UpdateRequest.setCommitWithin() call UpdateRequest.setCommitWithin() if call org.apache.solr.client.solrj.request.UpdateRequest.deleteById(String,String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteById(String,String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteById(String,String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteById(String,String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteById(String,String) else call org.apache.solr.client.solrj.request.UpdateRequest.deleteByQuery(String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteByQuery(String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteByQuery(String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteByQuery(String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteByQuery(String) new public public < throws public public < throws UpdateRequest public public < throws for : decl_stmt org.apache.solr.client.solrj.request.UpdateRequest = new if call org.apache.solr.client.solrj.request.UpdateRequest.lastDocInBatch() call org.apache.solr.client.solrj.request.UpdateRequest.lastDocInBatch() call org.apache.solr.client.solrj.request.UpdateRequest.lastDocInBatch() call org.apache.solr.client.solrj.request.UpdateRequest.lastDocInBatch() call org.apache.solr.client.solrj.request.UpdateRequest.lastDocInBatch() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) new UpdateRequest public public < throws decl_stmt org.apache.solr.client.solrj.request.UpdateRequest = new call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() for : new decl Future public public call org.apache.solr.update.StreamingSolrClients.blockUntilFinished() call org.apache.solr.update.StreamingSolrClients.blockUntilFinished() call org.apache.solr.update.StreamingSolrClients.blockUntilFinished() call org.apache.solr.update.StreamingSolrClients.blockUntilFinished() call org.apache.solr.update.StreamingSolrClients.blockUntilFinished() while != && call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > decl_stmt java.util.concurrent.Future < = try = call decl CompletionService.take() call decl CompletionService.take() call decl CompletionService.take() call decl CompletionService.take() call decl CompletionService.take() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() if == break call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() if == return : private private final final if try = new call org.apache.solr.update.StreamingSolrClients.getHttpClient() call org.apache.solr.update.StreamingSolrClients.getHttpClient() call org.apache.solr.update.StreamingSolrClients.getHttpClient() call org.apache.solr.update.StreamingSolrClients.getHttpClient() call org.apache.solr.update.StreamingSolrClients.getHttpClient() catch throw new + + + return if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + + + + + if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl CompletionService.submit() call decl CompletionService.submit() call decl CompletionService.submit() call decl CompletionService.submit() call decl CompletionService.submit() return else Error SolrClient private private final final try decl_stmt org.apache.solr.client.solrj.SolrClient = call org.apache.solr.update.StreamingSolrClients.getSolrClient(SolrCmdDistributor,Req) call org.apache.solr.update.StreamingSolrClients.getSolrClient(SolrCmdDistributor,Req) call org.apache.solr.update.StreamingSolrClients.getSolrClient(SolrCmdDistributor,Req) call org.apache.solr.update.StreamingSolrClients.getSolrClient(SolrCmdDistributor,Req) call org.apache.solr.update.StreamingSolrClients.getSolrClient(SolrCmdDistributor,Req) call org.apache.solr.client.solrj.SolrClient.request(SolrRequest) call org.apache.solr.client.solrj.SolrClient.request(SolrRequest) call org.apache.solr.client.solrj.SolrClient.request(SolrRequest) call org.apache.solr.client.solrj.SolrClient.request(SolrRequest) call org.apache.solr.client.solrj.SolrClient.request(SolrRequest) catch decl_stmt Error = new = = if instanceof = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl NamedList Object decl NamedList Object BinaryResponseParser Integer InputStream public public if != decl_stmt java.lang.Integer = if != decl_stmt java.io.InputStream = try = decl_stmt org.apache.solr.client.solrj.impl.BinaryResponseParser = new decl_stmt org.apache.solr.common.util.NamedList < = call org.apache.solr.client.solrj.impl.BinaryResponseParser.processResponse(InputStream,String) call org.apache.solr.client.solrj.impl.BinaryResponseParser.processResponse(InputStream,String) call org.apache.solr.client.solrj.impl.BinaryResponseParser.processResponse(InputStream,String) call org.apache.solr.client.solrj.impl.BinaryResponseParser.processResponse(InputStream,String) call org.apache.solr.client.solrj.impl.BinaryResponseParser.processResponse(InputStream,String) decl_stmt java.lang.Object = call decl NamedList.get() call decl NamedList.get() call decl NamedList.get() call decl NamedList.get() call decl NamedList.get() if != && instanceof decl_stmt org.apache.solr.common.util.NamedList < = < decl_stmt java.lang.Object = call decl NamedList.get() call decl NamedList.get() call decl NamedList.get() call decl NamedList.get() call decl NamedList.get() if != && instanceof = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + finally if != try call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() catch StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public return public public return public public return public public return + + public public return public public return public public return int String String int String public public decl_stmt int final final = decl_stmt int = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = = * + == : call java.lang.String.hashCode() call java.lang.String.hashCode() call java.lang.String.hashCode() call java.lang.String.hashCode() call java.lang.String.hashCode() = * + == : call java.lang.String.hashCode() call java.lang.String.hashCode() call java.lang.String.hashCode() call java.lang.String.hashCode() call java.lang.String.hashCode() = * + == : call java.lang.String.hashCode() call java.lang.String.hashCode() call java.lang.String.hashCode() call java.lang.String.hashCode() call java.lang.String.hashCode() return String StdNode String String public public if == return if == return if != return decl_stmt StdNode = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = if == if call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() != return else if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() return if == if call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() != return else if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() return if == if call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() != return else if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() call StdNode.nodeProps() return return public public return ZkCoreNodeProps public public decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps try = new catch return catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return = return int int public public decl_stmt int final final = decl_stmt int = = * + == : = * + == : return RetryNode public public if == return if ! return if != return decl_stmt RetryNode = if == if call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() != return else if ! call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() call RetryNode.nodeProps() return return public < public < return