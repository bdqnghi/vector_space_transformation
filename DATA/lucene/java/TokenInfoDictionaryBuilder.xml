org.apache.lucene.analysis.ja.util java.io.BufferedReader import java.io.File import java.io.FileInputStream import java.io.FilenameFilter import java.io.IOException import java.io.InputStreamReader import java.nio.charset.Charset import java.nio.charset.CharsetDecoder import java.nio.charset.CodingErrorAction import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.Comparator import java.util.List import org.apache.lucene.analysis.ja.util.DictionaryBuilder.DictionaryFormat import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.fst.Builder import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.PositiveIntOutputs import org.apache.lucene.util.packed.PackedInts import com.ibm.icu.text.Normalizer2 import class org.apache.lucene.analysis.ja.util.TokenInfoDictionaryBuilder DictionaryFormat Normalizer2 String boolean int FilenameFilter decl ArrayList public public throws decl_stmt java.io.FilenameFilter = new public public return decl_stmt java.util.ArrayList < = new <> for : new call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return public public return String TokenInfoDictionaryWriter long IntsRefBuilder decl Builder BufferedReader decl List decl String FileInputStream String decl FST PositiveIntOutputs decl String CharsetDecoder Charset decl String String int InputStreamReader public public < throws decl_stmt org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter = new * * decl_stmt java.util.List < = new <> for : decl_stmt FileInputStream = new decl_stmt java.nio.charset.Charset = decl_stmt CharsetDecoder = call Charset.newDecoder() call Charset.newDecoder() call Charset.newDecoder() call Charset.newDecoder() call Charset.newDecoder() decl_stmt InputStreamReader = new decl_stmt java.io.BufferedReader = new decl_stmt java.lang.String = while = call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) != decl_stmt java.lang.String = if < + continue decl_stmt java.lang.String = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if if call Normalizer2.isNormalized() call Normalizer2.isNormalized() call Normalizer2.isNormalized() call Normalizer2.isNormalized() call Normalizer2.isNormalized() continue decl_stmt java.lang.String = new for = < ++ = call Normalizer2.normalize() call Normalizer2.normalize() call Normalizer2.normalize() call Normalizer2.normalize() call Normalizer2.normalize() = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new < public public return decl_stmt org.apache.lucene.util.fst.PositiveIntOutputs = decl_stmt org.apache.lucene.util.fst.Builder < = new <> decl_stmt org.apache.lucene.util.IntsRefBuilder = new decl_stmt long = - decl_stmt java.lang.String = for : decl_stmt int = call TokenInfoDictionaryWriter.put() call TokenInfoDictionaryWriter.put() call TokenInfoDictionaryWriter.put() call TokenInfoDictionaryWriter.put() call TokenInfoDictionaryWriter.put() if == + continue decl_stmt java.lang.String = if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) ++ = call org.apache.lucene.util.IntsRefBuilder.grow(int) call org.apache.lucene.util.IntsRefBuilder.grow(int) call org.apache.lucene.util.IntsRefBuilder.grow(int) call org.apache.lucene.util.IntsRefBuilder.grow(int) call org.apache.lucene.util.IntsRefBuilder.grow(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() for = < call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() ++ call org.apache.lucene.util.IntsRefBuilder.setIntAt(int,int) call org.apache.lucene.util.IntsRefBuilder.setIntAt(int,int) call org.apache.lucene.util.IntsRefBuilder.setIntAt(int,int) call org.apache.lucene.util.IntsRefBuilder.setIntAt(int,int) call org.apache.lucene.util.IntsRefBuilder.setIntAt(int,int) int call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call TokenInfoDictionaryWriter.addMapping() call TokenInfoDictionaryWriter.addMapping() call TokenInfoDictionaryWriter.addMapping() call TokenInfoDictionaryWriter.addMapping() call TokenInfoDictionaryWriter.addMapping() int = decl_stmt org.apache.lucene.util.fst.FST final final final < = call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() + call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() + + call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() + + call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() + call org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.setFST(FST) call org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.setFST(FST) call org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.setFST(FST) call org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.setFST(FST) call org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.setFST(FST) return public public return decl String public public if == return else decl_stmt java.lang.String = new = = = = = = = = = = = if == = = else = = return