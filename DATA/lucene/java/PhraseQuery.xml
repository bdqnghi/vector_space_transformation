org.apache.lucene.search java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.List import java.util.Set import org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat import org.apache.lucene.codecs.lucene50.Lucene50PostingsReader import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexReaderContext import org.apache.lucene.index.LeafReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.index.TermState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.search.similarities.Similarity.SimScorer import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import class org.apache.lucene.search.PhraseQuery super super extends int int int decl int String decl Term public public = return public public return call decl int.isEmpty() call decl int.isEmpty() call decl int.isEmpty() call decl int.isEmpty() call decl int.isEmpty() : + call decl int.get() call decl int.get() call decl int.get() call decl int.get() call decl int.get() call decl int.size() call decl int.size() call decl int.size() call decl int.size() call decl int.size() - int public public if < throw new + if call decl int.isEmpty() call decl int.isEmpty() call decl int.isEmpty() call decl int.isEmpty() call decl int.isEmpty() == decl_stmt int final final = call decl int.get() call decl int.get() call decl int.get() call decl int.get() call decl int.get() call decl int.size() call decl int.size() call decl int.size() call decl int.size() call decl int.size() - if < throw new + + + if call decl Term.isEmpty() call decl Term.isEmpty() call decl Term.isEmpty() call decl Term.isEmpty() call decl Term.isEmpty() == && call decl Term.get() call decl Term.get() call decl Term.get() call decl Term.get() call decl Term.get() == throw new + + + call decl Term.get() call decl Term.get() call decl Term.get() call decl Term.get() call decl Term.get() call decl Term.add() call decl Term.add() call decl Term.add() call decl Term.add() call decl Term.add() call decl int.add() call decl int.add() call decl int.add() call decl int.add() call decl int.add() return decl int decl Term public public decl_stmt org.apache.lucene.index.Term = new decl_stmt int = new for = < ++ = return new decl int private static private static decl_stmt int = new for = < ++ = return decl Term private static private static decl_stmt org.apache.lucene.index.Term = new for = < ++ = new return decl Term private static private static decl_stmt org.apache.lucene.index.Term = new for = < ++ = new return public public return public public return public public return decl int public public throws if == return new else if == return new else if != decl_stmt int = new for = < ++ = - return new else return int public public if != return - if != return - if == return for = < ++ decl_stmt int = if != return return int int public public decl_stmt int final final = decl_stmt int = = * + for = < ++ = * + return PostingsAndFreq public public if == return if == return if != return decl_stmt PostingsAndFreq = if != return if == return == return public public < public public return + + public public return public public float decl PostingsAndFreq TermState Term LeafReader TermsEnum PostingsEnum Terms public public throws assert > decl_stmt org.apache.lucene.index.LeafReader final final = decl_stmt PostingsAndFreq = new decl_stmt org.apache.lucene.index.Terms final final = call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) if == return if call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() == throw new + + + + decl_stmt org.apache.lucene.index.TermsEnum final final = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt float = for = < ++ decl_stmt org.apache.lucene.index.Term final final = decl_stmt org.apache.lucene.index.TermState final final = if == assert : return call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.Term.bytes() call org.apache.lucene.index.Term.bytes() call org.apache.lucene.index.Term.bytes() call org.apache.lucene.index.Term.bytes() call org.apache.lucene.index.Term.bytes() decl_stmt org.apache.lucene.index.PostingsEnum = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) = new += if == if == return new else return new private private throws return == Scorer SimScorer Explanation int float Explanation public public throws decl_stmt org.apache.lucene.search.Scorer = if != decl_stmt int = call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() if == decl_stmt float = == call Scorer.freq() call Scorer.freq() call Scorer.freq() call Scorer.freq() call Scorer.freq() : decl_stmt SimScorer = decl_stmt org.apache.lucene.search.Explanation = + decl_stmt org.apache.lucene.search.Explanation = call SimScorer.explain() call SimScorer.explain() call SimScorer.explain() call SimScorer.explain() call SimScorer.explain() return call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() + + + + + + return long float int static static throws decl_stmt int = assert > decl_stmt long = decl_stmt float = < : / float return + * public public throws return new StringBuilder int String int decl String public public decl_stmt java.lang.StringBuilder = new if != && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int final final if == = - else = - decl_stmt java.lang.String = new + for = < ++ decl_stmt int = decl_stmt java.lang.String = if == = else = + + = for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() PhraseQuery public public if == return decl_stmt org.apache.lucene.search.PhraseQuery = return == && && int public public decl_stmt int = = * + = * + = * + return