org.apache.lucene.queryparser.complexPhrase java.io.IOException import java.util.ArrayList import java.util.Iterator import java.util.List import org.apache.lucene.analysis.Analyzer import org.apache.lucene.index.IndexReader import org.apache.lucene.index.Term import org.apache.lucene.queryparser.classic.ParseException import org.apache.lucene.queryparser.classic.QueryParser import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.BoostQuery import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.MultiTermQuery import org.apache.lucene.search.Query import org.apache.lucene.search.TermQuery import org.apache.lucene.search.TermRangeQuery import org.apache.lucene.search.spans.SpanBoostQuery import org.apache.lucene.search.spans.SpanNearQuery import org.apache.lucene.search.spans.SpanNotQuery import org.apache.lucene.search.spans.SpanOrQuery import org.apache.lucene.search.spans.SpanQuery import org.apache.lucene.search.spans.SpanTermQuery import class org.apache.lucene.queryparser.complexPhrase.ComplexPhraseQueryParser super super extends boolean decl ArrayList boolean ComplexPhraseQuery public public final final = ComplexPhraseQuery protected protected decl_stmt ComplexPhraseQuery = new call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return decl RewriteMethod decl MultiTermQuery public public throws if decl_stmt RewriteMethod = try return finally = new <> decl_stmt org.apache.lucene.search.Query = = try for < = call decl ArrayList.iterator() call decl ArrayList.iterator() call decl ArrayList.iterator() call decl ArrayList.iterator() call decl ArrayList.iterator() = call ComplexPhraseQuery.parsePhraseElements() call ComplexPhraseQuery.parsePhraseElements() call ComplexPhraseQuery.parsePhraseElements() call ComplexPhraseQuery.parsePhraseElements() call ComplexPhraseQuery.parsePhraseElements() finally = return protected protected if try catch throw new return private private throws if ! throw new + + + + + protected protected throws if return protected protected throws if return TermRangeQuery protected protected if decl_stmt org.apache.lucene.search.TermRangeQuery = call TermRangeQuery.setRewriteMethod() call TermRangeQuery.setRewriteMethod() call TermRangeQuery.setRewriteMethod() call TermRangeQuery.setRewriteMethod() call TermRangeQuery.setRewriteMethod() return return protected protected throws if return String protected protected throws decl_stmt java.lang.String = try = = finally = int int decl ArrayList SpanNotQuery TermQuery Query decl SpanQuery BooleanQuery decl ArrayList SpanNearQuery SpanQuery Query decl SpanQuery public public throws decl_stmt org.apache.lucene.search.Query final final = if instanceof return decl_stmt int = if ! instanceof throw new + call Query.getClass() call Query.getClass() call Query.getClass() call Query.getClass() call Query.getClass() + + + decl_stmt org.apache.lucene.search.BooleanQuery = decl_stmt org.apache.lucene.search.spans.SpanQuery = new call org.apache.lucene.search.BooleanQuery.clauses() call org.apache.lucene.search.BooleanQuery.clauses() call org.apache.lucene.search.BooleanQuery.clauses() call org.apache.lucene.search.BooleanQuery.clauses() call org.apache.lucene.search.BooleanQuery.clauses() decl_stmt int = for : decl_stmt org.apache.lucene.search.Query = = new if ++ while instanceof = if instanceof decl_stmt java.util.ArrayList < = new <> if call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() > = call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() else = new new else if instanceof decl_stmt org.apache.lucene.search.TermQuery = = new call org.apache.lucene.search.TermQuery.getTerm() call org.apache.lucene.search.TermQuery.getTerm() call org.apache.lucene.search.TermQuery.getTerm() call org.apache.lucene.search.TermQuery.getTerm() call org.apache.lucene.search.TermQuery.getTerm() else throw new + call Query.getClass() call Query.getClass() call Query.getClass() call Query.getClass() call Query.getClass() + + + += if == return new decl_stmt java.util.ArrayList < = new <> = for : if ! call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() += decl_stmt org.apache.lucene.search.spans.SpanQuery = call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() decl_stmt org.apache.lucene.search.spans.SpanQuery = if == = else = new + decl_stmt org.apache.lucene.search.spans.SpanNearQuery = new decl_stmt org.apache.lucene.search.spans.SpanNotQuery = new return Query decl ArrayList SpanOrQuery decl ArrayList TermQuery SpanOrQuery BooleanQuery BoostQuery SpanNotQuery decl ArrayList float SpanQuery private private < decl_stmt java.util.ArrayList < = new <> decl_stmt java.util.ArrayList < = new <> for : decl_stmt org.apache.lucene.search.Query = decl_stmt float = while instanceof decl_stmt org.apache.lucene.search.BoostQuery = *= call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() = call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() decl_stmt java.util.ArrayList < = if == = if instanceof decl_stmt org.apache.lucene.search.TermQuery = decl_stmt org.apache.lucene.search.spans.SpanQuery = new call org.apache.lucene.search.TermQuery.getTerm() call org.apache.lucene.search.TermQuery.getTerm() call org.apache.lucene.search.TermQuery.getTerm() call org.apache.lucene.search.TermQuery.getTerm() call org.apache.lucene.search.TermQuery.getTerm() if != = new call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() else if instanceof decl_stmt org.apache.lucene.search.BooleanQuery = else throw new + call Query.getClass() call Query.getClass() call Query.getClass() call Query.getClass() call Query.getClass() if call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() == return decl_stmt org.apache.lucene.search.spans.SpanOrQuery = new call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() if call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() == else decl_stmt org.apache.lucene.search.spans.SpanOrQuery = new call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() decl_stmt org.apache.lucene.search.spans.SpanNotQuery = new public public if == return + + else return + + + + int int public public decl_stmt int final final = decl_stmt int = = * + == : = * + == : = * + = * + : return ComplexPhraseQuery public public if == return if == return if != return if ! return decl_stmt ComplexPhraseQuery = if == if != return else if ! return if == if != return else if ! return if != return return ==