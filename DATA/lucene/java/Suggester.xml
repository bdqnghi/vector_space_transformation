org.apache.solr.spelling.suggest java.io.Closeable import java.io.File import java.io.FileInputStream import java.io.FileOutputStream import java.io.IOException import java.io.InputStreamReader import java.io.UnsupportedEncodingException import java.lang.invoke.MethodHandles import java.nio.charset.StandardCharsets import java.util.Collections import java.util.List import org.apache.lucene.analysis.Token import org.apache.lucene.index.IndexReader import org.apache.lucene.search.spell.Dictionary import org.apache.lucene.search.spell.HighFrequencyDictionary import org.apache.lucene.search.spell.SuggestMode import org.apache.lucene.search.suggest.FileDictionary import org.apache.lucene.search.suggest.Lookup import org.apache.lucene.search.suggest.Lookup.LookupResult import org.apache.lucene.search.suggest.analyzing.AnalyzingSuggester import org.apache.lucene.search.suggest.fst.WFSTCompletionLookup import org.apache.lucene.util.CharsRef import org.apache.lucene.util.IOUtils import org.apache.solr.common.util.NamedList import org.apache.solr.core.CloseHook import org.apache.solr.core.SolrCore import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.spelling.SolrSpellChecker import org.apache.solr.spelling.SpellingOptions import org.apache.solr.spelling.SpellingResult import org.apache.solr.spelling.suggest.fst.FSTLookupFactory import org.apache.solr.spelling.suggest.jaspell.JaspellLookupFactory import org.apache.solr.spelling.suggest.tst.TSTLookupFactory import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.spelling.suggest.Suggester super super extends SolrCore String Logger Dictionary String LookupFactory float String String Lookup String IndexReader File String SpellingResult String String public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt java.lang.String = = == : = = if == || = else if = else if = = call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() = call LookupFactory.create() call LookupFactory.create() call LookupFactory.create() call LookupFactory.create() call LookupFactory.create() call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) new public public if != && instanceof try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() public public decl_stmt java.lang.String = if != = new if ! call File.isAbsolute() call File.isAbsolute() call File.isAbsolute() call File.isAbsolute() call File.isAbsolute() = new call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() + + if ! call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() else try call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) new new call LookupFactory.storeFileName() call LookupFactory.storeFileName() call LookupFactory.storeFileName() call LookupFactory.storeFileName() call LookupFactory.storeFileName() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return public public if != && instanceof try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() public public File public public throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if == = = new else try = new new call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call org.apache.lucene.search.suggest.Lookup.build(Dictionary) call org.apache.lucene.search.suggest.Lookup.build(Dictionary) call org.apache.lucene.search.suggest.Lookup.build(Dictionary) call org.apache.lucene.search.suggest.Lookup.build(Dictionary) call org.apache.lucene.search.suggest.Lookup.build(Dictionary) if != decl_stmt File = new call LookupFactory.storeFileName() call LookupFactory.storeFileName() call LookupFactory.storeFileName() call LookupFactory.storeFileName() call LookupFactory.storeFileName() if ! call org.apache.lucene.search.suggest.Lookup.store(OutputStream) call org.apache.lucene.search.suggest.Lookup.store(OutputStream) call org.apache.lucene.search.suggest.Lookup.store(OutputStream) call org.apache.lucene.search.suggest.Lookup.store(OutputStream) call org.apache.lucene.search.suggest.Lookup.store(OutputStream) new if == assert != && != call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() + else call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() FileInputStream public public throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if == && != decl_stmt FileInputStream = new new call LookupFactory.storeFileName() call LookupFactory.storeFileName() call LookupFactory.storeFileName() call LookupFactory.storeFileName() call LookupFactory.storeFileName() try if call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) return finally call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() SpellingResult boolean decl List CharsRef public public throws call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return decl_stmt org.apache.solr.spelling.SpellingResult = new decl_stmt org.apache.lucene.util.CharsRef = new for : = = = decl_stmt boolean = == && ! instanceof && ! instanceof decl_stmt java.util.List < = call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) if == continue if != for : call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) int return