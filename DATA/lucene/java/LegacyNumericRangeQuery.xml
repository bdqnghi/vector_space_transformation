org.apache.lucene.search java.io.IOException import java.util.LinkedList import java.util.Objects import org.apache.lucene.document.DoublePoint import org.apache.lucene.document.FieldType import org.apache.lucene.document.FieldType.LegacyNumericType import org.apache.lucene.document.FloatPoint import org.apache.lucene.document.IntPoint import org.apache.lucene.document.LongPoint import org.apache.lucene.index.FilteredTermsEnum import org.apache.lucene.index.PointValues import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.util.AttributeSource import org.apache.lucene.util.BytesRef import org.apache.lucene.util.LegacyNumericUtils import org.apache.lucene.util.NumericUtils import org.apache.lucene.index.Term import class annotation super super extends int decl LegacyNumericType decl FieldType T int boolean long long int public static < public static < final final final final final final final final return new <> public static < public static < final final final final final final return new <> public static < public static < final final final final final final final final return new <> public static < public static < final final final final final final return new <> public static < public static < final final final final final final final final return new <> public static < public static < final final final final final final return new <> public static < public static < final final final final final final final final return new <> public static < public static < final final final final final final return new <> protected protected final final throws if != && != && < > return return new public public return public public return public public return public public return public public return StringBuilder public public final final decl_stmt java.lang.StringBuilder final final = new if ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) : == : call decl LegacyNumericType.toString() call decl LegacyNumericType.toString() call decl LegacyNumericType.toString() call decl LegacyNumericType.toString() call decl LegacyNumericType.toString() == : call T.toString() call T.toString() call T.toString() call T.toString() call T.toString() : LegacyNumericRangeQuery public final public final final final if == return if ! return if instanceof decl_stmt org.apache.lucene.search.LegacyNumericRangeQuery final final = return == == : call LegacyNumericRangeQuery.min() call LegacyNumericRangeQuery.min() call LegacyNumericRangeQuery.min() call LegacyNumericRangeQuery.min() call LegacyNumericRangeQuery.min() call LegacyNumericRangeQuery.min() call LegacyNumericRangeQuery.min() call LegacyNumericRangeQuery.min() call LegacyNumericRangeQuery.min() && == == : call LegacyNumericRangeQuery.max() call LegacyNumericRangeQuery.max() call LegacyNumericRangeQuery.max() call LegacyNumericRangeQuery.max() call LegacyNumericRangeQuery.max() call LegacyNumericRangeQuery.max() call LegacyNumericRangeQuery.max() call LegacyNumericRangeQuery.max() call LegacyNumericRangeQuery.max() && == && == && == return int public final public final decl_stmt int = = * + = * + = * + = * + = * + return public final public final public final public final private private assert == = assert == || <= : = protected final protected final while >= if != && > continue return != && > : assert = = return protected final protected final while == || > if return if < return return