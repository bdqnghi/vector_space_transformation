org.apache.lucene.codecs.blocktreeords java.io.IOException import org.apache.lucene.codecs.BlockTermState import org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.Output import org.apache.lucene.index.IndexOptions import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.automaton.Transition import org.apache.lucene.util.fst.FST import class org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame int int decl long int OrdsIntersectTermsEnum int decl FST int long ByteArrayDataInput int ByteArrayDataInput int boolean ByteArrayDataInput int long decl byte decl byte long int decl byte int long decl byte long int BlockTermState int boolean Output Transition long ByteArrayDataInput int throws assert > do = + call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() >>> -- if != = call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() & += call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() else = != && <= public public = = = call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() if != call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() call OrdsIntersectTermsEnum.compiledAutomaton() = else = - int int BytesRef throws if != && != && != decl_stmt org.apache.lucene.util.BytesRef = if < = new call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) decl_stmt long final final = call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() if & != = call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() = call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() & = + call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() if ! call OrdsIntersectTermsEnum.runAutomaton() call OrdsIntersectTermsEnum.runAutomaton() call OrdsIntersectTermsEnum.runAutomaton() call OrdsIntersectTermsEnum.runAutomaton() call OrdsIntersectTermsEnum.runAutomaton() call OrdsIntersectTermsEnum.runAutomaton() call OrdsIntersectTermsEnum.runAutomaton() call OrdsIntersectTermsEnum.runAutomaton() call OrdsIntersectTermsEnum.runAutomaton() assert == : + while != && <= = + call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() >>> -- if != = call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() & += call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() else = call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() decl_stmt int = call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() = >>> assert > = & != = call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() = & != decl_stmt int = >>> if < = new call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) = call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() if < = new call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) = = = = call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() if == = new = new else if < = new call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) if ! = call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() call OrdsIntersectTermsEnum.in() public public return : public public assert != - && < : + + + + + ++ = call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() = call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) return int public public assert != - && < : + + + + + ++ decl_stmt int final final = call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() = >>> = call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.getPosition() call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) if & == ++ return else = - call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() return public public return : int boolean public public throws decl_stmt int final final = decl_stmt boolean = == assert > while < = call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() if call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() != = + call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() for = < ++ = call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() call OrdsIntersectTermsEnum.fr() ++ = =