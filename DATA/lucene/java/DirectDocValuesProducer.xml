org.apache.lucene.codecs.memory java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.List import java.util.Map import java.util.concurrent.atomic.AtomicLong import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.DocValuesProducer import org.apache.lucene.index.BinaryDocValues import org.apache.lucene.index.CorruptIndexException import org.apache.lucene.index.DocValues import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.NumericDocValues import org.apache.lucene.index.RandomAccessOrds import org.apache.lucene.index.SegmentReadState import org.apache.lucene.index.SortedDocValues import org.apache.lucene.index.SortedNumericDocValues import org.apache.lucene.index.SortedSetDocValues import org.apache.lucene.store.ChecksumIndexInput import org.apache.lucene.store.IndexInput import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.IOUtils import org.apache.lucene.util.RamUsageEstimator import class org.apache.lucene.codecs.memory.DirectDocValuesProducer super super extends int byte byte byte decl Map byte byte decl Map decl Map decl Map decl Map decl Map decl Map int AtomicLong decl Map int int byte IndexInput int decl Map byte boolean decl Map decl Map NumericEntry private private throws decl_stmt NumericEntry = new = = = if != - = else = = return BinaryEntry private private throws decl_stmt BinaryEntry = new = = = = if != - = else = return SortedEntry private private throws decl_stmt SortedEntry = new = = return SortedSetEntry private private throws decl_stmt SortedSetEntry = new if == = = = return SortedNumericEntry private private throws decl_stmt SortedNumericEntry = new if == = = return FieldInfo SortedNumericEntry int int int private private throws decl_stmt int = decl_stmt int = while != - ++ decl_stmt org.apache.lucene.index.FieldInfo = decl_stmt int = if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == decl_stmt SortedEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == decl_stmt SortedSetEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == decl_stmt SortedSetEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == decl_stmt SortedNumericEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == decl_stmt SortedNumericEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else throw new + + + = return public public return call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() decl List public synchronized < public synchronized < decl_stmt java.util.List < = new <> call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return public public return + + + public public throws call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() NumericRawValues public synchronized public synchronized throws decl_stmt NumericRawValues = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call NumericRawValues.ramBytesUsed() call NumericRawValues.ramBytesUsed() call NumericRawValues.ramBytesUsed() call NumericRawValues.ramBytesUsed() call NumericRawValues.ramBytesUsed() return decl long IndexInput NumericRawValues private private throws decl_stmt NumericRawValues = new decl_stmt org.apache.lucene.store.IndexInput = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() + switch case decl_stmt byte final final final = new call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() = = new public public return return case decl_stmt short final final final = new for = < ++ = call org.apache.lucene.store.IndexInput.readShort(long) call org.apache.lucene.store.IndexInput.readShort(long) call org.apache.lucene.store.IndexInput.readShort(long) call org.apache.lucene.store.IndexInput.readShort(long) call org.apache.lucene.store.IndexInput.readShort(long) = = new public public return return case decl_stmt int final final final = new for = < ++ = call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) = = new public public return return case decl_stmt long final final final = new for = < ++ = call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) = = new public public return return default: throw new public public return public public return public public return public public return BinaryRawValues BytesRef decl byte decl int public synchronized public synchronized throws decl_stmt BinaryRawValues = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call BinaryRawValues.ramBytesUsed() call BinaryRawValues.ramBytesUsed() call BinaryRawValues.ramBytesUsed() call BinaryRawValues.ramBytesUsed() call BinaryRawValues.ramBytesUsed() decl_stmt byte final final final = decl_stmt int final final final = return new decl_stmt org.apache.lucene.util.BytesRef final final = new public public = = = + - return public public = = = + - return BinaryRawValues decl byte IndexInput decl int private private throws decl_stmt org.apache.lucene.store.IndexInput = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt byte final final final = new call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() + + decl_stmt int final final final = new + for = < ++ = call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) = call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) decl_stmt BinaryRawValues = new = = return SortedEntry SortedRawValues public public throws decl_stmt SortedEntry final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt SortedRawValues synchronized = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call SortedRawValues.ramBytesUsed() call SortedRawValues.ramBytesUsed() call SortedRawValues.ramBytesUsed() call SortedRawValues.ramBytesUsed() call SortedRawValues.ramBytesUsed() return private private final final final final final final return new public public return int public public return public public return public public return int public public return public public return SortedEntry SortedRawValues NumericRawValues private private throws decl_stmt SortedEntry final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt NumericRawValues final final = decl_stmt SortedRawValues final final = new = return Bits NumericDocValues int int SortedNumericRawValues NumericDocValues NumericDocValues SortedNumericEntry public synchronized public synchronized throws decl_stmt SortedNumericRawValues = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt SortedNumericEntry final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call SortedNumericRawValues.ramBytesUsed() call SortedNumericRawValues.ramBytesUsed() call SortedNumericRawValues.ramBytesUsed() call SortedNumericRawValues.ramBytesUsed() call SortedNumericRawValues.ramBytesUsed() if == decl_stmt NumericDocValues final final = decl_stmt org.apache.lucene.util.Bits final final = return else decl_stmt NumericDocValues final final = decl_stmt NumericDocValues final final = return new decl_stmt int decl_stmt int public public = int call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() = int call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + public public return call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + public public return - public public = int = int + public public return + public public return - SortedNumericRawValues private private throws decl_stmt SortedNumericRawValues = new if != = = return NumericDocValues SortedSetRawValues BinaryDocValues int SortedSetEntry SortedDocValues int int NumericDocValues public synchronized public synchronized throws decl_stmt SortedSetRawValues = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt SortedSetEntry final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call SortedSetRawValues.ramBytesUsed() call SortedSetRawValues.ramBytesUsed() call SortedSetRawValues.ramBytesUsed() call SortedSetRawValues.ramBytesUsed() call SortedSetRawValues.ramBytesUsed() if == decl_stmt org.apache.lucene.index.SortedDocValues = return else decl_stmt NumericDocValues final final = decl_stmt NumericDocValues final final = decl_stmt BinaryDocValues final final = return new decl_stmt int decl_stmt int decl_stmt int public public if == return else return call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() ++ public public = = int call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() = int call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + public public return call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() int public public return public public return call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + public public return - public public if == return else return ++ public public = = int = int + public public return int public public return public public return + public public return - SortedSetRawValues private private throws decl_stmt SortedSetRawValues = new if != = = return FixedBitSet long IndexInput private private final final final final throws if == - return new else decl_stmt org.apache.lucene.util.FixedBitSet synchronized = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == decl_stmt org.apache.lucene.store.IndexInput = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() assert == decl_stmt long = new int >> for = < ++ = call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) = new if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call org.apache.lucene.util.FixedBitSet.ramBytesUsed() call org.apache.lucene.util.FixedBitSet.ramBytesUsed() call org.apache.lucene.util.FixedBitSet.ramBytesUsed() call org.apache.lucene.util.FixedBitSet.ramBytesUsed() call org.apache.lucene.util.FixedBitSet.ramBytesUsed() return BinaryEntry NumericEntry public public throws switch case return case return case return case decl_stmt BinaryEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return case decl_stmt NumericEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return default: throw new public synchronized public synchronized throws return new public public throws call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() long public public decl_stmt long = if != += return decl List public < public < decl_stmt java.util.List < = new <> if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return public public return public public return public public return public < public < return public public return long public public decl_stmt long = if != += return decl List public < public < decl_stmt java.util.List < = new <> if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return long public public decl_stmt long = if != += return decl List public < public < decl_stmt java.util.List < = new <> if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return