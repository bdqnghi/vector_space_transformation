org.apache.lucene.search java.io.Closeable import java.io.IOException import java.util.List import java.util.concurrent.CopyOnWriteArrayList import java.util.concurrent.locks.Lock import java.util.concurrent.locks.ReentrantLock import org.apache.lucene.store.AlreadyClosedException import class super super implements String G decl List Lock private private if == throw new G private synchronized private synchronized throws decl_stmt G final final = = G public final public final throws decl_stmt G do if = == throw new if return if == && == assert != throw new public final synchronized public final synchronized throws if != protected protected throws G G boolean private private throws call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() decl_stmt boolean = try decl_stmt G final final = try decl_stmt G = if != assert != : try = finally if ! finally finally call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() boolean public final public final throws decl_stmt boolean final final = call java.util.concurrent.locks.Lock.tryLock() call java.util.concurrent.locks.Lock.tryLock() call java.util.concurrent.locks.Lock.tryLock() call java.util.concurrent.locks.Lock.tryLock() call java.util.concurrent.locks.Lock.tryLock() if try finally call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() return public final public final throws call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() try finally call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() protected protected throws public final public final throws assert != private private throws for : private private throws for : public public if == throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public if == throw new call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove()