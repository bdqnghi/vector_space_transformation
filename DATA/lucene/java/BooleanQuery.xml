org.apache.lucene.search java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.EnumMap import java.util.HashSet import java.util.Iterator import java.util.List import java.util.Map import java.util.Objects import java.util.Set import org.apache.lucene.index.IndexReader import org.apache.lucene.search.BooleanClause.Occur import org.apache.lucene.search.similarities.Similarity import class org.apache.lucene.search.BooleanQuery super super extends super implements decl Map boolean int int int decl List public static public static return public static public static if < throw new = public public = return public public = return public public return public public if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() >= throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return public public return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new public public return public public return public < public < return < < return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() public final < public final < return call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() decl BooleanQuery private private decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.setMinimumNumberShouldMatch() call decl BooleanQuery.setMinimumNumberShouldMatch() call decl BooleanQuery.setMinimumNumberShouldMatch() call decl BooleanQuery.setMinimumNumberShouldMatch() call decl BooleanQuery.setMinimumNumberShouldMatch() for : if == call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() else call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() return call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() BooleanQuery public public throws decl_stmt org.apache.lucene.search.BooleanQuery = if == = return new BooleanClause float boolean Query Occur decl Builder decl BooleanQuery decl Collection boolean decl Builder decl Collection decl BooleanQuery Query public public throws if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == decl_stmt org.apache.lucene.search.BooleanClause = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.search.Query = call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() if == && call org.apache.lucene.search.BooleanClause.getOccur() call org.apache.lucene.search.BooleanClause.getOccur() call org.apache.lucene.search.BooleanClause.getOccur() call org.apache.lucene.search.BooleanClause.getOccur() call org.apache.lucene.search.BooleanClause.getOccur() == return else if == switch call org.apache.lucene.search.BooleanClause.getOccur() call org.apache.lucene.search.BooleanClause.getOccur() call org.apache.lucene.search.BooleanClause.getOccur() call org.apache.lucene.search.BooleanClause.getOccur() call org.apache.lucene.search.BooleanClause.getOccur() case case return case return new new case return new default: throw new decl_stmt org.apache.lucene.util.fst.Builder = new call Query.setDisableCoord() call Query.setDisableCoord() call Query.setDisableCoord() call Query.setDisableCoord() call Query.setDisableCoord() call Query.setMinimumNumberShouldMatch() call Query.setMinimumNumberShouldMatch() call Query.setMinimumNumberShouldMatch() call Query.setMinimumNumberShouldMatch() call Query.setMinimumNumberShouldMatch() decl_stmt boolean = for : decl_stmt org.apache.lucene.search.Query = decl_stmt org.apache.lucene.search.Query = call boolean.rewrite() call boolean.rewrite() call boolean.rewrite() call boolean.rewrite() call boolean.rewrite() if != = call Query.add() call Query.add() call Query.add() call Query.add() call Query.add() if return call Query.build() call Query.build() call Query.build() call Query.build() call Query.build() decl_stmt int = for < : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() += if != call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.lucene.util.fst.Builder = new call float.setDisableCoord() call float.setDisableCoord() call float.setDisableCoord() call float.setDisableCoord() call float.setDisableCoord() call float.setMinimumNumberShouldMatch() call float.setMinimumNumberShouldMatch() call float.setMinimumNumberShouldMatch() call float.setMinimumNumberShouldMatch() call float.setMinimumNumberShouldMatch() for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt Occur final final = for : call float.add() call float.add() call float.add() call float.add() call float.add() return call float.build() call float.build() call float.build() call float.build() call float.build() if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() > && call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() > decl_stmt java.util.Set final final final < = new < call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt boolean = call decl BooleanQuery.remove() call decl BooleanQuery.remove() call decl BooleanQuery.remove() call decl BooleanQuery.remove() call decl BooleanQuery.remove() new |= call decl BooleanQuery.removeAll() call decl BooleanQuery.removeAll() call decl BooleanQuery.removeAll() call decl BooleanQuery.removeAll() call decl BooleanQuery.removeAll() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if decl_stmt org.apache.lucene.util.fst.Builder = new call Query.setDisableCoord() call Query.setDisableCoord() call Query.setDisableCoord() call Query.setDisableCoord() call Query.setDisableCoord() call Query.setMinimumNumberShouldMatch() call Query.setMinimumNumberShouldMatch() call Query.setMinimumNumberShouldMatch() call Query.setMinimumNumberShouldMatch() call Query.setMinimumNumberShouldMatch() for : if != call Query.add() call Query.add() call Query.add() call Query.add() call Query.add() for : call Query.add() call Query.add() call Query.add() call Query.add() call Query.add() return call Query.build() call Query.build() call Query.build() call Query.build() call Query.build() decl_stmt java.util.Collection final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.util.Collection final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call boolean.size() call boolean.size() call boolean.size() call boolean.size() call boolean.size() == && call decl BooleanQuery.size() call decl BooleanQuery.size() call decl BooleanQuery.size() call decl BooleanQuery.size() call decl BooleanQuery.size() > decl_stmt org.apache.lucene.search.Query = call boolean.iterator() call boolean.iterator() call boolean.iterator() call boolean.iterator() call boolean.iterator() decl_stmt float = if instanceof decl_stmt org.apache.lucene.search.BoostQuery = = call decl Collection.getQuery() call decl Collection.getQuery() call decl Collection.getQuery() call decl Collection.getQuery() call decl Collection.getQuery() = call decl Collection.getBoost() call decl Collection.getBoost() call decl Collection.getBoost() call decl Collection.getBoost() call decl Collection.getBoost() if call decl Builder.getClass() call decl Builder.getClass() call decl Builder.getClass() call decl Builder.getClass() call decl Builder.getClass() == decl_stmt org.apache.lucene.util.fst.Builder = new for : switch case case call Query.add() call Query.add() call Query.add() call Query.add() call Query.add() break default: break decl_stmt org.apache.lucene.search.Query = call Query.build() call Query.build() call Query.build() call Query.build() call Query.build() = new if != = new = new for : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call Query.add() call Query.add() call Query.add() call Query.add() call Query.add() = call Query.build() call Query.build() call Query.build() call Query.build() call Query.build() return return StringBuilder boolean Query int public public decl_stmt java.lang.StringBuilder = new decl_stmt boolean = > if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int = for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt org.apache.lucene.search.Query = if instanceof call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() if != call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) += if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() BooleanQuery public public if == return decl_stmt org.apache.lucene.search.BooleanQuery = return == call org.apache.lucene.search.BooleanQuery.getMinimumNumberShouldMatch() call org.apache.lucene.search.BooleanQuery.getMinimumNumberShouldMatch() call org.apache.lucene.search.BooleanQuery.getMinimumNumberShouldMatch() call org.apache.lucene.search.BooleanQuery.getMinimumNumberShouldMatch() call org.apache.lucene.search.BooleanQuery.getMinimumNumberShouldMatch() && == && call decl Map.equals() call decl Map.equals() call decl Map.equals() call decl Map.equals() call decl Map.equals() int private private decl_stmt int = * + if == = return public public if == = assert != assert == return