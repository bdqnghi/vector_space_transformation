org.apache.solr.handler.component java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.List import java.util.Set import org.apache.lucene.search.Query import org.apache.solr.common.SolrException import org.apache.solr.common.params.FacetParams.FacetRangeMethod import org.apache.solr.common.params.FacetParams.FacetRangeOther import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.request.IntervalFacets import org.apache.solr.request.SimpleFacets import org.apache.solr.request.SolrQueryRequest import org.apache.solr.schema.FieldType import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.SchemaField import org.apache.solr.schema.TrieField import org.apache.solr.search.DocSet import org.apache.solr.search.SyntaxError import class org.apache.solr.handler.component.RangeFacetProcessor super super extends decl List decl FacetComponent decl NamedList public < public < throws decl_stmt org.apache.solr.common.util.NamedList final final final < = new <> decl_stmt java.util.List < = try decl_stmt FacetContext = = call decl FacetComponent.getAllRangeFacetRequests() call decl FacetComponent.getAllRangeFacetRequests() call decl FacetComponent.getAllRangeFacetRequests() call decl FacetComponent.getAllRangeFacetRequests() call decl FacetComponent.getAllRangeFacetRequests() catch throw new if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return for : return FieldType String FacetRangeMethod String SchemaField IndexSchema public public < throws decl_stmt org.apache.solr.schema.IndexSchema final final = decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = decl_stmt FacetRangeMethod = decl_stmt org.apache.solr.schema.SchemaField final final = call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) decl_stmt org.apache.solr.schema.FieldType final final = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() if call FacetRangeMethod.equals() call FacetRangeMethod.equals() call FacetRangeMethod.equals() call FacetRangeMethod.equals() call FacetRangeMethod.equals() assert instanceof else int decl NamedList decl NamedList DocSet private < extends extends extends < private < extends extends extends < final final throws decl_stmt org.apache.solr.common.util.NamedList final final final < = new <> decl_stmt org.apache.solr.common.util.NamedList final final final < = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt org.apache.solr.search.DocSet = for : if != call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() else decl_stmt int final final = if >= call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() return FacetRangeOther int decl FacetInterval decl NamedList boolean decl IntervalFacets decl IntervalFacets decl FacetInterval decl ArrayList boolean decl Set boolean int decl NamedList SchemaField private < extends extends extends < < private < extends extends extends < < throws decl_stmt org.apache.solr.schema.SchemaField = decl_stmt org.apache.solr.common.util.NamedList final final final < = new <> decl_stmt org.apache.solr.common.util.NamedList final final final < = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt java.util.ArrayList < = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt int final final = decl_stmt boolean = decl_stmt boolean = decl_stmt boolean = decl_stmt java.util.Set < = if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() || call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() || call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() || call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() = decl_stmt FacetInterval = for : try decl_stmt FacetRangeOther = if != switch case assert == call decl ArrayList.set() call decl ArrayList.set() call decl ArrayList.set() call decl ArrayList.set() call decl ArrayList.set() new break case assert == = new break case call decl ArrayList.set() call decl ArrayList.set() call decl ArrayList.set() call decl ArrayList.set() call decl ArrayList.set() : new break continue catch call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() new if assert != call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() decl_stmt FacetInterval = call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() = new decl_stmt int = decl_stmt int = - if call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() ++ if call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() ++ if call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() -- while <= decl_stmt FacetInterval = if call int.getCount() call int.getCount() call int.getCount() call int.getCount() call int.getCount() >= call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call int.getKey() call int.getKey() call int.getKey() call int.getKey() call int.getKey() call int.getCount() call int.getCount() call int.getCount() call int.getCount() call int.getCount() ++ call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() return Query SchemaField protected protected throws decl_stmt org.apache.solr.schema.SchemaField = decl_stmt org.apache.lucene.search.Query = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() if return else return