org.apache.solr.analytics.accumulator java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.Comparator import java.util.Date import java.util.HashSet import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Map.Entry import java.util.Set import java.util.TreeMap import com.google.common.collect.Iterables import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.search.BooleanClause.Occur import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.Query import org.apache.solr.analytics.accumulator.facet.FacetValueAccumulator import org.apache.solr.analytics.accumulator.facet.FieldFacetAccumulator import org.apache.solr.analytics.accumulator.facet.QueryFacetAccumulator import org.apache.solr.analytics.accumulator.facet.RangeFacetAccumulator import org.apache.solr.analytics.expression.Expression import org.apache.solr.analytics.expression.ExpressionFactory import org.apache.solr.analytics.request.AnalyticsContentHandler import org.apache.solr.analytics.request.AnalyticsRequest import org.apache.solr.analytics.request.FieldFacetRequest import org.apache.solr.analytics.request.FieldFacetRequest.FacetSortSpecification import org.apache.solr.analytics.request.QueryFacetRequest import org.apache.solr.analytics.request.RangeFacetRequest import org.apache.solr.analytics.statistics.StatsCollector import org.apache.solr.analytics.util.AnalyticsParams import org.apache.solr.analytics.util.RangeEndpointCalculator import org.apache.solr.analytics.util.RangeEndpointCalculator.FacetRange import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.util.NamedList import org.apache.solr.request.SolrQueryRequest import org.apache.solr.schema.SchemaField import org.apache.solr.search.DocSet import org.apache.solr.search.Filter import org.apache.solr.search.QParser import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.search.SyntaxError import class org.apache.solr.analytics.accumulator.FacetingAccumulator super super extends super implements decl Map boolean AnalyticsRequest LeafReaderContext decl Set String decl Map decl Map decl List decl List long decl Map SolrQueryRequest int decl Map decl Map decl List public static public static throws return new protected protected throws for < : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : for : for : public public throws for < : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : for : public public throws for < : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : for : public public throws for : decl Map decl StatsCollector public public throws decl_stmt java.util.Map < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.solr.analytics.statistics.StatsCollector = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for : for : decl Map decl StatsCollector public public throws decl_stmt java.util.Map < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.solr.analytics.statistics.StatsCollector = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for : for : decl Map decl StatsCollector public public throws decl_stmt java.util.Map < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.solr.analytics.statistics.StatsCollector = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for : for : public public < < return public public if ! for < : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : for : = decl Map public public decl_stmt java.util.Map < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : decl Map public public decl_stmt java.util.Map < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : decl String decl Expression Comparable public public if && ! try decl_stmt java.lang.String = + if == = else if == = else throw new + + catch throw new + + if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() != decl_stmt org.apache.solr.analytics.expression.Expression = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for = < ++ if decl_stmt java.lang.Comparable = if call Comparable.getClass() call Comparable.getClass() call Comparable.getClass() call Comparable.getClass() call Comparable.getClass() return else return call Comparable.toString() call Comparable.toString() call Comparable.toString() call Comparable.toString() call Comparable.toString() throw new + + decl String decl Expression Comparable public public if && ! try decl_stmt java.lang.String = + if == = else if == = else throw new + + catch throw new + + if try decl_stmt java.lang.String = + if == = else if == = else throw new + + catch throw new + + if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() != decl_stmt org.apache.solr.analytics.expression.Expression = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for = < ++ if decl_stmt java.lang.Comparable = if call Comparable.getClass() call Comparable.getClass() call Comparable.getClass() call Comparable.getClass() call Comparable.getClass() return else return call Comparable.toString() call Comparable.toString() call Comparable.toString() call Comparable.toString() call Comparable.toString() throw new + + FacetSortSpecification FieldFacetRequest int String decl List decl Comparator decl Map decl NamedList boolean decl Iterable decl NamedList decl NamedList int int Expression public < public < decl_stmt org.apache.solr.common.util.NamedList final final final < = < decl_stmt org.apache.solr.common.util.NamedList < < = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() for : decl_stmt java.lang.String final final = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() continue decl_stmt java.util.Map final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.solr.common.util.NamedList final final final < = new <> decl_stmt java.lang.Iterable < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt org.apache.solr.analytics.request.FieldFacetRequest final final = decl_stmt FacetSortSpecification final final = call org.apache.solr.analytics.request.FieldFacetRequest.getSort() call org.apache.solr.analytics.request.FieldFacetRequest.getSort() call org.apache.solr.analytics.request.FieldFacetRequest.getSort() call org.apache.solr.analytics.request.FieldFacetRequest.getSort() call org.apache.solr.analytics.request.FieldFacetRequest.getSort() decl_stmt int final final = call org.apache.solr.analytics.request.FieldFacetRequest.getLimit() call org.apache.solr.analytics.request.FieldFacetRequest.getLimit() call org.apache.solr.analytics.request.FieldFacetRequest.getLimit() call org.apache.solr.analytics.request.FieldFacetRequest.getLimit() call org.apache.solr.analytics.request.FieldFacetRequest.getLimit() decl_stmt int final final = call org.apache.solr.analytics.request.FieldFacetRequest.getOffset() call org.apache.solr.analytics.request.FieldFacetRequest.getOffset() call org.apache.solr.analytics.request.FieldFacetRequest.getOffset() call org.apache.solr.analytics.request.FieldFacetRequest.getOffset() call org.apache.solr.analytics.request.FieldFacetRequest.getOffset() decl_stmt boolean final final = call org.apache.solr.analytics.request.FieldFacetRequest.showsMissing() call org.apache.solr.analytics.request.FieldFacetRequest.showsMissing() call org.apache.solr.analytics.request.FieldFacetRequest.showsMissing() call org.apache.solr.analytics.request.FieldFacetRequest.showsMissing() call org.apache.solr.analytics.request.FieldFacetRequest.showsMissing() if ! call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != && call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() decl_stmt int = call FacetSortSpecification.getStatistic() call FacetSortSpecification.getStatistic() call FacetSortSpecification.getStatistic() call FacetSortSpecification.getStatistic() call FacetSortSpecification.getStatistic() decl_stmt org.apache.solr.analytics.expression.Expression final final = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() decl_stmt java.util.Comparator final final final < = < call Expression.comparator() call Expression.comparator() call Expression.comparator() call Expression.comparator() call Expression.comparator() call FacetSortSpecification.getDirection() call FacetSortSpecification.getDirection() call FacetSortSpecification.getDirection() call FacetSortSpecification.getDirection() call FacetSortSpecification.getDirection() decl_stmt java.util.List final final final < < = new <> call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() new = if > if > = = for < : call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() for : decl_stmt java.lang.String final final = decl_stmt java.util.Map final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.solr.common.util.NamedList final final final < = new <> decl_stmt java.lang.Iterable < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() for < : call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() for : decl_stmt java.lang.String final final = decl_stmt java.util.Map final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.solr.common.util.NamedList final final final < = new <> decl_stmt java.lang.Iterable < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() for < : call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() return decl NamedList public < public < decl_stmt org.apache.solr.common.util.NamedList < = new <> for = < ++ if ! call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() return Filter public public throws for < : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : for : = decl_stmt org.apache.solr.search.Filter final final = if != if != QueryFacetAccumulator decl String Query Query public public final final throws for : for : if && ! try decl_stmt java.lang.String = + if == = else if == = else throw new + + catch throw new + + else if try decl_stmt java.lang.String = + if == = else throw new + + catch throw new + + decl_stmt org.apache.solr.analytics.accumulator.facet.QueryFacetAccumulator = new decl_stmt org.apache.lucene.search.Query final final try = catch throw new + + decl_stmt org.apache.lucene.search.Query = new ++ public public return String String String Query String Query String decl String RangeFacetAccumulator String decl RangeEndpointCalculator decl String SchemaField public public final final throws for : decl_stmt java.lang.String decl_stmt java.lang.String = if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) throw new else if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) try = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) + call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if == else if == else throw new + + catch throw new + + decl_stmt java.lang.String = if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) throw new else if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) try = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) + call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if == else if == else throw new + + catch throw new + + decl_stmt java.lang.String = for = < ++ decl_stmt java.lang.String = if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) throw new else if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) try = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) + call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if == = else if == = else throw new + + catch throw new + + decl_stmt org.apache.solr.analytics.util.RangeEndpointCalculator final final final < extends extends extends < = decl_stmt org.apache.solr.schema.SchemaField final final = for : call decl RangeEndpointCalculator.getRanges() call decl RangeEndpointCalculator.getRanges() call decl RangeEndpointCalculator.getRanges() call decl RangeEndpointCalculator.getRanges() call decl RangeEndpointCalculator.getRanges() decl_stmt java.lang.String final final decl_stmt java.lang.String final final decl_stmt java.lang.String = if == = = else = = : + += if == = += else = += + : decl_stmt org.apache.lucene.search.Query = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() decl_stmt org.apache.solr.analytics.accumulator.facet.RangeFacetAccumulator = new decl_stmt org.apache.lucene.search.Query = new call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName()