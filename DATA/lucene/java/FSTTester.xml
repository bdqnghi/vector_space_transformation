org.apache.lucene.util.fst java.io.IOException import java.io.OutputStreamWriter import java.io.Writer import java.nio.charset.Charset import java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.List import java.util.Map import java.util.Random import java.util.Set import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import org.apache.lucene.util.UnicodeUtil import org.apache.lucene.util.packed.PackedInts import static static org.junit.Assert.assertEquals import static static org.junit.Assert.assertFalse import static static org.junit.Assert.assertNotNull import static static org.junit.Assert.assertNull import static static org.junit.Assert.assertTrue import class decl List decl Outputs Random boolean int long long Directory static static return static static if ! return else if == return + + else return + + int BytesRef private static private static decl_stmt org.apache.lucene.util.BytesRef = new for = < ++ decl_stmt int = + assert >= && <= = byte = return String static static decl_stmt java.lang.String final final if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() = else = return decl char int static static decl_stmt int final final = if == return decl_stmt char final final final = new for = < ++ = char return new static static return new static static if == return new else return int int int int static static decl_stmt int final final = decl_stmt int = decl_stmt int = while < + decl_stmt int final final = += ++ return static static for = < ++ + & return public public < if instanceof return else throw new public public throws if + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl FST T decl FST T decl BytesReader private private < throws assert == || == decl_stmt org.apache.lucene.util.fst.FST final final final final final final final < = new < decl_stmt T final final = decl_stmt T = decl_stmt BytesReader final final final final final = for = <= ++ decl_stmt int final final if == = else = + if == if != = return else return = if != = return decl FST T decl FST T decl List private private < throws decl_stmt org.apache.lucene.util.fst.FST < = new < decl_stmt java.util.List final final final < < = new <> decl_stmt T final final = decl_stmt T = decl_stmt BytesReader final final final final final = while call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new < while ! call decl FST.isLast() call decl FST.isLast() call decl FST.isLast() call decl FST.isLast() call decl FST.isLast() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new < = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() = if == break return decl List boolean decl Builder decl Builder decl FST IOContext IndexInput Writer IndexOutput < < throws if + + + decl_stmt boolean final final = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt org.apache.lucene.util.fst.Builder final final final < = new <> == : == && == call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() : : if if else for < : if instanceof decl_stmt java.util.List < = < decl_stmt org.apache.lucene.util.fst.Builder final final final < = < for : call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() else call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() decl_stmt org.apache.lucene.util.fst.FST < = call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() && != && ! decl_stmt org.apache.lucene.store.IOContext = decl_stmt org.apache.lucene.store.IndexOutput = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() try = new <> finally call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() if && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() <= && != decl_stmt Writer final final = new call Writer.flush() call Writer.flush() call Writer.flush() call Writer.flush() call Writer.flush() if if == else + call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() + + call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() + if == && == else = call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() = call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() return protected protected return int IntsRef Long int IntsRef long decl FST decl Set int long decl IntsRefFSTEnum int IntsRefBuilder decl IntsRefFSTEnum decl FST decl IntsRefFSTEnum decl InputOutput T decl Map boolean int private private < throws decl_stmt org.apache.lucene.util.fst.FST final final final < decl_stmt java.util.Set final final final < decl_stmt long = decl_stmt long = if decl_stmt org.apache.lucene.util.fst.FST < = < = = new <> for < : decl_stmt java.lang.Long = = = call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else = = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return if + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + for < : + + + call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() if decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum < = new <> for < : decl_stmt org.apache.lucene.util.IntsRef = if + + + decl_stmt T = + + decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum < = call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() + + + call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() decl_stmt java.util.Map final final final < = new <> for < : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if && > - + decl_stmt int final final = for = < ++ decl_stmt java.lang.Long = decl_stmt org.apache.lucene.util.IntsRef = call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() || == if decl_stmt org.apache.lucene.util.IntsRefBuilder final final = new decl_stmt int = for = < ++ decl_stmt T = + call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() + call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() if decl_stmt org.apache.lucene.util.IntsRef = call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() if decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum < = new <> = for = < ++ if + if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() while decl_stmt org.apache.lucene.util.IntsRef final final = decl_stmt int = new < if < = - + decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum final final final final final final final < if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == if + = call decl IntsRefFSTEnum.seekExact() call decl IntsRefFSTEnum.seekExact() call decl IntsRefFSTEnum.seekExact() call decl IntsRefFSTEnum.seekExact() call decl IntsRefFSTEnum.seekExact() = - else if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if + = call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() -- else if + = call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() if != - && < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if + + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else + == : if break else decl_stmt InputOutput < = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum final final final final final final final < if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == if + = call decl IntsRefFSTEnum.seekExact() call decl IntsRefFSTEnum.seekExact() call decl IntsRefFSTEnum.seekExact() call decl IntsRefFSTEnum.seekExact() call decl IntsRefFSTEnum.seekExact() else if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if + = call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() else if + = call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() + + + if = for = < ++ if + = new <> decl_stmt int = - while decl_stmt boolean = if == call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - || call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() ++ if = call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() == else if != - && < * call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() && call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt int = for < ++ decl_stmt org.apache.lucene.util.IntsRef = if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() && call org.apache.lucene.util.IntsRef.compareTo(IntsRef) call org.apache.lucene.util.IntsRef.compareTo(IntsRef) call org.apache.lucene.util.IntsRef.compareTo(IntsRef) call org.apache.lucene.util.IntsRef.compareTo(IntsRef) call org.apache.lucene.util.IntsRef.compareTo(IntsRef) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() > decl_stmt int = new < assert < = - + if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() -- != - if + + = call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() == else if + + = call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() == break if == continue else decl_stmt int final final = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - - += if == - = if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + = call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl IntsRefFSTEnum.seekCeil() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() == else if + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + = call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl IntsRefFSTEnum.seekFloor() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() == if if ! + call decl IntsRefFSTEnum.current() call decl IntsRefFSTEnum.current() call decl IntsRefFSTEnum.current() call decl IntsRefFSTEnum.current() call decl IntsRefFSTEnum.current() else if == call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() break else call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl IntsRefFSTEnum.current() call decl IntsRefFSTEnum.current() call decl IntsRefFSTEnum.current() call decl IntsRefFSTEnum.current() call decl IntsRefFSTEnum.current() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl IntsRefFSTEnum.current() call decl IntsRefFSTEnum.current() call decl IntsRefFSTEnum.current() call decl IntsRefFSTEnum.current() call decl IntsRefFSTEnum.current() decl CountMinOutput decl IntsRefFSTEnum decl int T IntsRefBuilder T decl Iterator boolean decl Map IntsRef decl Map decl IntsRefFSTEnum T decl CountMinOutput private private < throws if + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + for < : + + + call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() decl_stmt java.util.Map final final final < < = new <> decl_stmt org.apache.lucene.util.IntsRefBuilder final final = new for < : call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) for = <= ++ call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() decl_stmt CountMinOutput < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() if == = new <> = = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.lucene.util.IntsRefBuilder.toIntsRef() call org.apache.lucene.util.IntsRefBuilder.toIntsRef() call org.apache.lucene.util.IntsRefBuilder.toIntsRef() call org.apache.lucene.util.IntsRefBuilder.toIntsRef() call org.apache.lucene.util.IntsRefBuilder.toIntsRef() else ++ decl_stmt T = if call T.equals() call T.equals() call T.equals() call T.equals() call T.equals() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() = call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() decl_stmt T = if call T.equals() call T.equals() call T.equals() call T.equals() call T.equals() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() = call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() = call decl Outputs.common() call decl Outputs.common() call decl Outputs.common() call decl Outputs.common() call decl Outputs.common() if == = = if decl_stmt java.util.Iterator final final final < < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.util.Map < < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt org.apache.lucene.util.IntsRef final final = call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() decl_stmt CountMinOutput final final final < = call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() if + + + + + + + call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() + + decl_stmt boolean final final if > = >= else assert > if > && >= = else if > call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() - call org.apache.lucene.util.IntsRefBuilder.ints() call org.apache.lucene.util.IntsRefBuilder.ints() call org.apache.lucene.util.IntsRefBuilder.ints() call org.apache.lucene.util.IntsRefBuilder.ints() call org.apache.lucene.util.IntsRefBuilder.ints() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() decl_stmt CountMinOutput final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() = != && > && >= || == && >= || <= else if >= = else = if ! call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() else call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() - while call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() >= decl_stmt CountMinOutput final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() if != = call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() - if for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() + call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() + + call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() + + call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() if call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() + call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() <= return if decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum < = new <> decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum < while = call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() != if + + + call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() decl_stmt CountMinOutput final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() || if else if decl_stmt int final final final = new for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() > decl_stmt CountMinOutput final final final < = call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() decl_stmt T final final = call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() if + call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() + + call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() if else call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey()