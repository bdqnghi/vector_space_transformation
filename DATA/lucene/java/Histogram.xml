org.apache.solr.util.stats java.util.concurrent.atomic.AtomicLong import java.util.concurrent.atomic.AtomicReference import static static java.lang.Math.sqrt import class org.apache.solr.util.stats.Histogram AtomicLong AtomicLong AtomicLong AtomicLong Sample int double decl AtomicReference public public return new public public return new public public call org.apache.solr.util.stats.Sample.clear() call org.apache.solr.util.stats.Sample.clear() call org.apache.solr.util.stats.Sample.clear() call org.apache.solr.util.stats.Sample.clear() call org.apache.solr.util.stats.Sample.clear() call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() new - public public long public public call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call org.apache.solr.util.stats.Sample.update(long) call org.apache.solr.util.stats.Sample.update(long) call org.apache.solr.util.stats.Sample.update(long) call org.apache.solr.util.stats.Sample.update(long) call org.apache.solr.util.stats.Sample.update(long) call java.util.concurrent.atomic.AtomicLong.getAndAdd(long) call java.util.concurrent.atomic.AtomicLong.getAndAdd(long) call java.util.concurrent.atomic.AtomicLong.getAndAdd(long) call java.util.concurrent.atomic.AtomicLong.getAndAdd(long) call java.util.concurrent.atomic.AtomicLong.getAndAdd(long) public public return call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() public public if > return call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() return public public if > return call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() return public public if > return call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() / double return public public if > return return public public return double call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() public public return call org.apache.solr.util.stats.Sample.getSnapshot() call org.apache.solr.util.stats.Sample.getSnapshot() call org.apache.solr.util.stats.Sample.getSnapshot() call org.apache.solr.util.stats.Sample.getSnapshot() call org.apache.solr.util.stats.Sample.getSnapshot() private private if <= return return call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() / - long boolean private private decl_stmt boolean = while ! decl_stmt long final final = call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() = >= || call java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long) call java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long) call java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long) call java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long) call java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long) boolean long private private decl_stmt boolean = while ! decl_stmt long final final = call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() = <= || call java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long) call java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long) call java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long) call java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long) call java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long) decl double double decl double double double double private private while decl_stmt double final final final = call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() decl_stmt double final final final = new if == - = = else decl_stmt double final final = decl_stmt double final final = decl_stmt double final final = + - / decl_stmt double final final = + - * - = = if call decl AtomicReference.compareAndSet() call decl AtomicReference.compareAndSet() call decl AtomicReference.compareAndSet() call decl AtomicReference.compareAndSet() call decl AtomicReference.compareAndSet() return