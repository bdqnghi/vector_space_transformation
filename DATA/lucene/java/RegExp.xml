org.apache.lucene.util.automaton java.io.IOException import java.util.ArrayList import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import class org.apache.lucene.util.automaton.RegExp String int int int int int String int int int RegExp int int int int Kind int public public return public public throws return public public throws return public public < throws return private private < throws try return catch throw new Automaton Automaton decl List private private < throws decl_stmt java.util.List < decl_stmt org.apache.lucene.util.automaton.Automaton = switch case = new <> = = break case = new <> = = break case = call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call String.toAutomatonInternal() call String.toAutomatonInternal() call String.toAutomatonInternal() call String.toAutomatonInternal() call String.toAutomatonInternal() = break case = call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) = break case = call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) = break case = call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) = break case = call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) = break case = call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) call org.apache.lucene.util.automaton.RegExp.toAutomatonInternal(Map,AutomatonProvider,int) = break case = break case = break case = break case = break case = break case = break case decl_stmt org.apache.lucene.util.automaton.Automaton = if != = if == && != try = catch throw new if == throw new + + = break case = break return private private < < if == else public public return StringBuilder public public decl_stmt java.lang.StringBuilder = new return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() String String switch case call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call String.toStringBuilder() call String.toStringBuilder() call String.toStringBuilder() call String.toStringBuilder() call String.toStringBuilder() break case call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call String.toStringBuilder() call String.toStringBuilder() call String.toStringBuilder() call String.toStringBuilder() call String.toStringBuilder() break case call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call String.toStringBuilder() call String.toStringBuilder() call String.toStringBuilder() call String.toStringBuilder() call String.toStringBuilder() break case call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) break case call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) break case call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) break case call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) break case call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) call org.apache.lucene.util.automaton.RegExp.toStringBuilder(StringBuilder) break case break case break case break case break case break case break case break case decl_stmt java.lang.String = decl_stmt java.lang.String = if > for = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() < ++ if > for = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() < ++ break StringBuilder public public decl_stmt java.lang.StringBuilder = new return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() String String switch case case case call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) + call String.toStringTree() call String.toStringTree() call String.toStringTree() call String.toStringTree() call String.toStringTree() + break case case case call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) + break case call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) + break case call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) call org.apache.lucene.util.automaton.RegExp.toStringTree(StringBuilder,String) + break case break case break case case break case break case break case break case decl_stmt java.lang.String = decl_stmt java.lang.String = if > for = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() < ++ if > for = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() < ++ break decl HashSet public < public < decl_stmt java.util.HashSet < = new <> return < switch case case case call org.apache.lucene.util.automaton.RegExp.getIdentifiers(Set) call org.apache.lucene.util.automaton.RegExp.getIdentifiers(Set) call org.apache.lucene.util.automaton.RegExp.getIdentifiers(Set) call org.apache.lucene.util.automaton.RegExp.getIdentifiers(Set) call org.apache.lucene.util.automaton.RegExp.getIdentifiers(Set) call String.getIdentifiers() call String.getIdentifiers() call String.getIdentifiers() call String.getIdentifiers() call String.getIdentifiers() break case case case case case call org.apache.lucene.util.automaton.RegExp.getIdentifiers(Set) call org.apache.lucene.util.automaton.RegExp.getIdentifiers(Set) call org.apache.lucene.util.automaton.RegExp.getIdentifiers(Set) call org.apache.lucene.util.automaton.RegExp.getIdentifiers(Set) call org.apache.lucene.util.automaton.RegExp.getIdentifiers(Set) break case break default: RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = = = return RegExp static static if == || == && == || == return decl_stmt org.apache.lucene.util.automaton.RegExp = new = if == && == || == && == || == = = else if == || == && == && == || == = = else = = return StringBuilder static private static private decl_stmt java.lang.StringBuilder = new if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = = = return RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = = return RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = = return RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = = = return RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = = = = return RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = = return RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = = return RegExp static static if > throw new + + + + decl_stmt org.apache.lucene.util.automaton.RegExp = new = = = return RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = return RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = return RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = = return RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = return RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = = return RegExp static static decl_stmt org.apache.lucene.util.automaton.RegExp = new = = = = return private private return && call int.indexOf() call int.indexOf() call int.indexOf() call int.indexOf() call int.indexOf() call java.lang.String.codePointAt(int) call java.lang.String.codePointAt(int) call java.lang.String.codePointAt(int) call java.lang.String.codePointAt(int) call java.lang.String.codePointAt(int) != - private private if >= call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() return if call java.lang.String.codePointAt(int) call java.lang.String.codePointAt(int) call java.lang.String.codePointAt(int) call java.lang.String.codePointAt(int) call java.lang.String.codePointAt(int) == += return return private private return < call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() int private private throws if ! throw new decl_stmt int = call java.lang.String.codePointAt(int) call java.lang.String.codePointAt(int) call java.lang.String.codePointAt(int) call java.lang.String.codePointAt(int) call java.lang.String.codePointAt(int) += return private private return & != RegExp final final throws decl_stmt org.apache.lucene.util.automaton.RegExp = if = return RegExp final final throws decl_stmt org.apache.lucene.util.automaton.RegExp = if && = return RegExp final final throws decl_stmt org.apache.lucene.util.automaton.RegExp = if && ! && ! || ! = return int RegExp int int final final throws decl_stmt org.apache.lucene.util.automaton.RegExp = while if = else if = else if = else if decl_stmt int = while if == throw new + decl_stmt int = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt int = - if = while if != = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) else = if ! throw new + if == - = else = return final final throws if && return else return boolean RegExp final final throws if decl_stmt boolean = if = decl_stmt org.apache.lucene.util.automaton.RegExp = if = if ! throw new + return else return RegExp final final throws decl_stmt org.apache.lucene.util.automaton.RegExp = while && ! = return int final final throws decl_stmt int = if return else return int int RegExp int String int int String String int final final throws if return else if && return else if && return else if decl_stmt int = while && ! if ! throw new + return call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) - else if if return decl_stmt org.apache.lucene.util.automaton.RegExp = if ! throw new + return else if || && decl_stmt int = while && ! if ! throw new + decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) - decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if == - if ! throw new + - return else if ! throw new + - try if == || == call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - || != call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) throw new decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() decl_stmt int = decl_stmt int = decl_stmt int if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() else = if > decl_stmt int = = = return catch throw new + - else return final final throws return