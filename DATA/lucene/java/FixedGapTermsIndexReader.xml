org.apache.lucene.codecs.blockterms java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.List import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.index.CorruptIndexException import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.SegmentReadState import org.apache.lucene.store.IndexInput import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.PagedBytes import org.apache.lucene.util.packed.MonotonicBlockPackedReader import class org.apache.lucene.codecs.blockterms.FixedGapTermsIndexReader super super extends decl PagedBytes long int int int decl Reader public public return long long long int long int public public decl_stmt long = decl_stmt long = - while >= decl_stmt long = + >>> decl_stmt long final final = decl_stmt int final final = + - call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() + decl_stmt int = if < = - else if > = + else assert >= = * return + if < assert == - = decl_stmt long final final = decl_stmt int final final = + - call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() + = * return + int long long public public decl_stmt long final final = + / if >= return - += decl_stmt long final final = decl_stmt int final final = + - call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() + return + public public return int long long public public decl_stmt long = / assert < decl_stmt long final final = decl_stmt int final final = + - call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() + = * return + public public return public public return != : + != : decl List public < public < decl_stmt java.util.List < = new <> if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return + + public public return new call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() public public throws long private private throws - - decl_stmt long = long public public decl_stmt long = != call decl PagedBytes.ramBytesUsed() call decl PagedBytes.ramBytesUsed() call decl PagedBytes.ramBytesUsed() call decl PagedBytes.ramBytesUsed() call decl PagedBytes.ramBytesUsed() : for : call decl Reader.values() call decl Reader.values() call decl Reader.values() call decl Reader.values() call decl Reader.values() += return public < public < return public public return + + call decl Reader.size() call decl Reader.size() call decl Reader.size() call decl Reader.size() call decl Reader.size() + + +