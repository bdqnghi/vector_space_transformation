org.apache.lucene.queries.function java.io.IOException import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.BinaryDocValuesField import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.NumericDocValuesField import org.apache.lucene.document.SortedDocValuesField import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.DocValuesType import org.apache.lucene.index.IndexWriterConfig import org.apache.lucene.index.RandomIndexWriter import org.apache.lucene.queries.function.valuesource.BytesRefFieldSource import org.apache.lucene.queries.function.valuesource.LongFieldSource import org.apache.lucene.store.Directory import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import org.apache.lucene.util.packed.PackedInts import com.carrotsearch.randomizedtesting.generators.RandomInts import class org.apache.lucene.queries.function.TestDocValuesFieldSources super super extends DirectoryReader Directory Field BytesRefBuilder FunctionValues RandomIndexWriter int Object int ValueSource FunctionValues decl Object Document Field IndexWriterConfig public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.IndexWriterConfig = new decl_stmt int final final = decl_stmt org.apache.solr.handler.dataimport.config.Field final final = new decl_stmt org.apache.solr.handler.dataimport.config.Field final final switch case = new new break case = new new break case = new break default: throw new decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) decl_stmt java.lang.Object final final final = new decl_stmt org.apache.lucene.index.RandomIndexWriter = new for = < ++ call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) switch case case do = call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) new break case decl_stmt int final final = = long int call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) break call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) if && == call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() decl_stmt org.apache.lucene.index.DirectoryReader = for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.queries.function.FunctionValues final final = new decl_stmt org.apache.lucene.queries.function.ValueSource final final switch case case = new break case = new break default: throw new decl_stmt org.apache.lucene.queries.function.FunctionValues final final = call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() decl_stmt org.apache.lucene.util.BytesRefBuilder = new for = < ++ call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) if instanceof call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) instanceof else if instanceof call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) instanceof call org.apache.lucene.queries.function.FunctionValues.bytesVal(int,BytesRefBuilder) call org.apache.lucene.queries.function.FunctionValues.bytesVal(int,BytesRefBuilder) call org.apache.lucene.queries.function.FunctionValues.bytesVal(int,BytesRefBuilder) call org.apache.lucene.queries.function.FunctionValues.bytesVal(int,BytesRefBuilder) call org.apache.lucene.queries.function.FunctionValues.bytesVal(int,BytesRefBuilder) else throw new decl_stmt java.lang.Object = call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) switch case call org.apache.lucene.queries.function.FunctionValues.ordVal(int) call org.apache.lucene.queries.function.FunctionValues.ordVal(int) call org.apache.lucene.queries.function.FunctionValues.ordVal(int) call org.apache.lucene.queries.function.FunctionValues.ordVal(int) call org.apache.lucene.queries.function.FunctionValues.ordVal(int) call org.apache.lucene.queries.function.FunctionValues.numOrd() call org.apache.lucene.queries.function.FunctionValues.numOrd() call org.apache.lucene.queries.function.FunctionValues.numOrd() call org.apache.lucene.queries.function.FunctionValues.numOrd() call org.apache.lucene.queries.function.FunctionValues.numOrd() >= case call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.bytesVal(int,BytesRefBuilder) call org.apache.lucene.queries.function.FunctionValues.bytesVal(int,BytesRefBuilder) call org.apache.lucene.queries.function.FunctionValues.bytesVal(int,BytesRefBuilder) call org.apache.lucene.queries.function.FunctionValues.bytesVal(int,BytesRefBuilder) call org.apache.lucene.queries.function.FunctionValues.bytesVal(int,BytesRefBuilder) new call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() break case call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) break call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() public public throws for : if != && != && !=