org.apache.lucene.benchmark.byTask.feeds java.util.AbstractMap import java.util.HashMap import java.util.Map import java.util.Random import java.util.Set import org.locationtech.spatial4j.context.SpatialContext import org.locationtech.spatial4j.context.SpatialContextFactory import org.locationtech.spatial4j.shape.Point import org.locationtech.spatial4j.shape.Shape import org.apache.lucene.benchmark.byTask.utils.Config import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.spatial.SpatialStrategy import org.apache.lucene.spatial.composite.CompositeSpatialStrategy import org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy import org.apache.lucene.spatial.prefix.tree.PackedQuadPrefixTree import org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree import org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory import org.apache.lucene.spatial.serialized.SerializedDVStrategy import class org.apache.lucene.benchmark.byTask.feeds.SpatialDocMaker super super extends String decl Map ShapeConverter SpatialStrategy SpatialStrategy public static public static decl_stmt org.apache.lucene.spatial.SpatialStrategy = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new return decl Map SpatialContext protected protected final final decl_stmt java.util.Map < = new < public < < public < < throw new public public return + decl_stmt SpatialContext = return public < < public < < throw new public public return + String protected protected final final < decl_stmt java.lang.String final final = switch case return case return default: throw new + double int boolean SpatialPrefixTree RecursivePrefixTreeStrategy protected protected < decl_stmt org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree = decl_stmt org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy = new call RecursivePrefixTreeStrategy.setPointsOnly() call RecursivePrefixTreeStrategy.setPointsOnly() call RecursivePrefixTreeStrategy.setPointsOnly() call RecursivePrefixTreeStrategy.setPointsOnly() call RecursivePrefixTreeStrategy.setPointsOnly() decl_stmt boolean final final = if instanceof call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPruneLeafyBranches(boolean) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPruneLeafyBranches(boolean) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPruneLeafyBranches(boolean) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPruneLeafyBranches(boolean) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPruneLeafyBranches(boolean) else call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPruneLeafyBranches(boolean) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPruneLeafyBranches(boolean) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPruneLeafyBranches(boolean) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPruneLeafyBranches(boolean) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPruneLeafyBranches(boolean) decl_stmt int = - if < = call SpatialPrefixTree.getMaxLevels() call SpatialPrefixTree.getMaxLevels() call SpatialPrefixTree.getMaxLevels() call SpatialPrefixTree.getMaxLevels() call SpatialPrefixTree.getMaxLevels() + call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPrefixGridScanLevel(int) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPrefixGridScanLevel(int) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPrefixGridScanLevel(int) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPrefixGridScanLevel(int) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPrefixGridScanLevel(int) decl_stmt double = call RecursivePrefixTreeStrategy.setDistErrPct() call RecursivePrefixTreeStrategy.setDistErrPct() call RecursivePrefixTreeStrategy.setDistErrPct() call RecursivePrefixTreeStrategy.setDistErrPct() call RecursivePrefixTreeStrategy.setDistErrPct() return protected protected < return new CompositeSpatialStrategy protected protected < decl_stmt org.apache.lucene.spatial.composite.CompositeSpatialStrategy final final = new + + call org.apache.lucene.spatial.composite.CompositeSpatialStrategy.setOptimizePredicates(boolean) call org.apache.lucene.spatial.composite.CompositeSpatialStrategy.setOptimizePredicates(boolean) call org.apache.lucene.spatial.composite.CompositeSpatialStrategy.setOptimizePredicates(boolean) call org.apache.lucene.spatial.composite.CompositeSpatialStrategy.setOptimizePredicates(boolean) call org.apache.lucene.spatial.composite.CompositeSpatialStrategy.setOptimizePredicates(boolean) return SpatialStrategy public public decl_stmt org.apache.lucene.spatial.SpatialStrategy = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = + double Point double Random double boolean public static public static final final decl_stmt double final final = + decl_stmt double final final = + decl_stmt boolean final final = + return new public public if instanceof && != || != decl_stmt java.awt.Point = decl_stmt double = if > decl_stmt java.util.Random = new call Point.hashCode() call Point.hashCode() call Point.hashCode() call Point.hashCode() call Point.hashCode() += call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() * * - = = if = return Random double Point public public if instanceof && != || != decl_stmt java.awt.Point = decl_stmt double = if > decl_stmt java.util.Random = new call Point.hashCode() call Point.hashCode() call Point.hashCode() call Point.hashCode() call Point.hashCode() += call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() * * - = = if = return String DocState Shape DocData Document public public throws decl_stmt DocState = decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.benchmark.byTask.feeds.DocData = decl_stmt java.lang.String = call Document.getField() call Document.getField() call Document.getField() call Document.getField() call Document.getField() decl_stmt java.awt.Shape = call org.apache.lucene.benchmark.byTask.feeds.DocData.getName() call org.apache.lucene.benchmark.byTask.feeds.DocData.getName() call org.apache.lucene.benchmark.byTask.feeds.DocData.getName() call org.apache.lucene.benchmark.byTask.feeds.DocData.getName() call org.apache.lucene.benchmark.byTask.feeds.DocData.getName() if != = call ShapeConverter.convert() call ShapeConverter.convert() call ShapeConverter.convert() call ShapeConverter.convert() call ShapeConverter.convert() for : call SpatialStrategy.createIndexableFields() call SpatialStrategy.createIndexableFields() call SpatialStrategy.createIndexableFields() call SpatialStrategy.createIndexableFields() call SpatialStrategy.createIndexableFields() call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) return public static public static if != && > try return call org.apache.lucene.spatial.SpatialStrategy.getSpatialContext() call org.apache.lucene.spatial.SpatialStrategy.getSpatialContext() call org.apache.lucene.spatial.SpatialStrategy.getSpatialContext() call org.apache.lucene.spatial.SpatialStrategy.getSpatialContext() call org.apache.lucene.spatial.SpatialStrategy.getSpatialContext() catch + + + + return return public public throws throw new