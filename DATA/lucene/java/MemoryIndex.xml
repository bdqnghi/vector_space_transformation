org.apache.lucene.index.memory java.io.IOException import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.Iterator import java.util.Locale import java.util.Map import java.util.SortedMap import java.util.TreeMap import java.util.stream.Collectors import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.OffsetAttribute import org.apache.lucene.analysis.tokenattributes.PayloadAttribute import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute import org.apache.lucene.document.Document import org.apache.lucene.index.* import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.Scorer import org.apache.lucene.search.SimpleCollector import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.store.RAMDirectory import org.apache.lucene.util.* import org.apache.lucene.util.BytesRefHash.DirectBytesStartArray import org.apache.lucene.util.IntBlockPool.SliceReader import org.apache.lucene.util.IntBlockPool.SliceWriter import class org.apache.lucene.index.memory.MemoryIndex boolean BytesRefArray Counter decl SortedMap boolean IntBlockPool boolean decl SliceWriter boolean ByteBlockPool decl IntBlockPool TokenStream public public if == throw new if == throw new if == throw new decl_stmt org.apache.lucene.analysis.TokenStream = public static public static < extends extends return public static public static < extends extends return MemoryIndex public static public static < extends extends decl_stmt org.apache.lucene.index.memory.MemoryIndex = new for : call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) return String T decl Iterator int CharTermAttribute OffsetAttribute public < public < final final final < if == throw new return new decl_stmt java.util.Iterator private < = decl_stmt int private = decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute private final final = decl_stmt org.apache.lucene.analysis.tokenattributes.OffsetAttribute private final final = public public if ! call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() return decl_stmt T = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if == throw new decl_stmt java.lang.String = call T.toString() call T.toString() call T.toString() call T.toString() call T.toString() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) + call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() += call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() + return String T public public if ! return decl_stmt T = if == throw new decl_stmt java.lang.String = call T.toString() call T.toString() call T.toString() call T.toString() call T.toString() + += call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() + return public public public public int int Object BytesRef DocValuesType TokenStream public public decl_stmt int decl_stmt org.apache.lucene.analysis.TokenStream decl_stmt int if != = = = else = = = decl_stmt DocValuesType = decl_stmt java.lang.Object switch case = break case case case = break case case = break default: throw new + + decl_stmt org.apache.lucene.util.BytesRef = if > = public public public public public public Info FieldInfo IndexOptions private private if throw new if == throw new if <= throw new decl_stmt javax.sound.sampled.Info = call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() if == decl_stmt IndexOptions = : decl_stmt org.apache.lucene.index.FieldInfo = new call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() - call decl SortedMap.put() call decl SortedMap.put() call decl SortedMap.put() call decl SortedMap.put() call decl SortedMap.put() = new if > if != if != private private if == = new = + ++ = DocValuesType String private private decl_stmt java.lang.String = decl_stmt DocValuesType = if == = new - else if != throw new + + + + + + switch case if != throw new + + + + = new long ++ break case if == = new = + ++ = long break case if != throw new + + + + = new break case if != throw new + + + + = new break case if == = new break default: throw new + + PositionIncrementAttribute int int int TermToBytesRefAttribute PayloadAttribute int int OffsetAttribute BytesRef private private decl_stmt int = - decl_stmt int = if == = else if > = + = + *= try = decl_stmt org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute = decl_stmt org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute = decl_stmt org.apache.lucene.analysis.tokenattributes.OffsetAttribute = decl_stmt org.apache.lucene.analysis.tokenattributes.PayloadAttribute = : while ++ decl_stmt int final final = call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() if == ++ += decl_stmt int = call TermToBytesRefAttribute.getBytesRef() call TermToBytesRefAttribute.getBytesRef() call TermToBytesRefAttribute.getBytesRef() call TermToBytesRefAttribute.getBytesRef() call TermToBytesRefAttribute.getBytesRef() if < = - - call decl IntBlockPool.reset() call decl IntBlockPool.reset() call decl IntBlockPool.reset() call decl IntBlockPool.reset() call decl IntBlockPool.reset() else = call decl IntBlockPool.startNewSlice() call decl IntBlockPool.startNewSlice() call decl IntBlockPool.startNewSlice() call decl IntBlockPool.startNewSlice() call decl IntBlockPool.startNewSlice() ++ ++ call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() if call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() + call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() + if decl_stmt org.apache.lucene.util.BytesRef final final = call org.apache.lucene.analysis.tokenattributes.PayloadAttribute.getPayload() call org.apache.lucene.analysis.tokenattributes.PayloadAttribute.getPayload() call org.apache.lucene.analysis.tokenattributes.PayloadAttribute.getPayload() call org.apache.lucene.analysis.tokenattributes.PayloadAttribute.getPayload() call org.apache.lucene.analysis.tokenattributes.PayloadAttribute.getPayload() decl_stmt int final final if == || == = - else = call decl SliceWriter.append() call decl SliceWriter.append() call decl SliceWriter.append() call decl SliceWriter.append() call decl SliceWriter.append() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() = call decl IntBlockPool.getCurrentOffset() call decl IntBlockPool.getCurrentOffset() call decl IntBlockPool.getCurrentOffset() call decl IntBlockPool.getCurrentOffset() call decl IntBlockPool.getCurrentOffset() if > = = call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() + catch throw new public public if throw new if == return = for : call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() = IndexSearcher MemoryIndexReader public public decl_stmt MemoryIndexReader = new decl_stmt org.apache.lucene.search.IndexSearcher = new call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) return public public = for : call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() IndexSearcher float Scorer decl float public public if == throw new decl_stmt org.apache.lucene.search.IndexSearcher = try decl_stmt float final final final = new call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new decl_stmt org.apache.lucene.search.Scorer private public public throws = call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() public public = public public return decl_stmt float = return catch throw new finally public public throws = public public = public public return Info int int String StringBuilder int BytesRef int SliceByteStartArray int int SliceReader public public decl_stmt java.lang.StringBuilder = new decl_stmt int = decl_stmt int = decl_stmt org.apache.lucene.util.BytesRef final final = new for < : call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() decl_stmt java.lang.String = decl_stmt javax.sound.sampled.Info = call Info.sortTerms() call Info.sortTerms() call Info.sortTerms() call Info.sortTerms() call Info.sortTerms() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + decl_stmt SliceByteStartArray = decl_stmt int = decl_stmt SliceReader = new for = < call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() ++ decl_stmt int = call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() decl_stmt int = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + + + call SliceReader.reset() call SliceReader.reset() call SliceReader.reset() call SliceReader.reset() call SliceReader.reset() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int final final = : while ! call SliceReader.endOfSlice() call SliceReader.endOfSlice() call SliceReader.endOfSlice() call SliceReader.endOfSlice() call SliceReader.endOfSlice() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call SliceReader.readInt() call SliceReader.readInt() call SliceReader.readInt() call SliceReader.readInt() call SliceReader.readInt() if < - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if ! call SliceReader.endOfSlice() call SliceReader.endOfSlice() call SliceReader.endOfSlice() call SliceReader.endOfSlice() call SliceReader.endOfSlice() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) += call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) += += call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call Info.terms() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if == = int int DocValuesType int BytesRef if == decl_stmt DocValuesType = if == || == if == || == || == if != assert == : decl_stmt int final final = decl_stmt int final final = = = for = < ++ decl_stmt org.apache.lucene.util.BytesRef = assert == : for = < ++ decl_stmt int = * if < if > = FieldInvertState long if == decl_stmt org.apache.lucene.index.FieldInvertState = new decl_stmt long final final = call boolean.computeNorm() call boolean.computeNorm() call boolean.computeNorm() call boolean.computeNorm() call boolean.computeNorm() if + + + + + = new public public if != throw new else return return public public if != throw new else return public public return public public return public public return private private = private private return public public return public public public public return public public return private private public public public public Info private private if == return decl_stmt javax.sound.sampled.Info = call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() if == return if call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() != return return public public return int decl FieldInfo public public decl_stmt org.apache.lucene.index.FieldInfo = new call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() decl_stmt int = for : call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() ++ = return new Info public public decl_stmt javax.sound.sampled.Info = if != return else return public public return public public return Info private private decl_stmt javax.sound.sampled.Info = if != return else return Info public public decl_stmt javax.sound.sampled.Info = if != return else return Info int public public decl_stmt javax.sound.sampled.Info = if != return new decl_stmt int = public public if >= call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() return return ++ public public = public public return call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() int public public return call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() call Info.binaryProducer() else return public public if >= return return ++ public public = public public return int public public return Info public public throws decl_stmt javax.sound.sampled.Info = call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() if != && call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() call Info.fieldInfo() != return new else return public public return public public throws decl Map public public decl_stmt java.util.Map < = call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() > :: :: throw new