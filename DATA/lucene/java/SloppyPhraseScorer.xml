org.apache.lucene.search java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Comparator import java.util.HashMap import java.util.HashSet import java.util.LinkedHashMap import org.apache.lucene.index.Term import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.util.FixedBitSet import class org.apache.lucene.search.SloppyPhraseScorer super super extends int decl SimScorer float decl Similarity decl PhrasePositions boolean int int boolean decl PhrasePositions int PhraseQueue ConjunctionDISI boolean decl PhrasePositions boolean int float int PhrasePositions int private private throws if ! return decl_stmt float = = decl_stmt org.apache.lucene.search.PhrasePositions = call int.pop() call int.pop() call int.pop() call int.pop() call int.pop() decl_stmt int = - decl_stmt int = call int.top() call int.top() call int.top() call int.top() call int.top() while if && ! break if > if <= += call decl Similarity.computeSlopFactor() call decl Similarity.computeSlopFactor() call decl Similarity.computeSlopFactor() call decl Similarity.computeSlopFactor() call decl Similarity.computeSlopFactor() ++ if ! return call int.add() call int.add() call int.add() call int.add() call int.add() = call int.pop() call int.pop() call int.pop() call int.pop() call int.pop() = call int.top() call int.top() call int.top() call int.top() call int.top() = - else decl_stmt int = - if < = if <= += call decl Similarity.computeSlopFactor() call decl Similarity.computeSlopFactor() call decl Similarity.computeSlopFactor() call decl Similarity.computeSlopFactor() call decl Similarity.computeSlopFactor() ++ return private private throws if ! return if > = return int int PhrasePositions decl PhrasePositions int FixedBitSet int private private throws if < return decl_stmt org.apache.lucene.search.PhrasePositions = decl_stmt org.apache.lucene.util.FixedBitSet = new decl_stmt int = decl_stmt int while = >= = if ! return if != = call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) decl_stmt int = decl_stmt int = call org.apache.lucene.util.FixedBitSet.length() call org.apache.lucene.util.FixedBitSet.length() call org.apache.lucene.util.FixedBitSet.length() call org.apache.lucene.util.FixedBitSet.length() call org.apache.lucene.util.FixedBitSet.length() while call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() > decl_stmt org.apache.lucene.search.PhrasePositions = call int.pop() call int.pop() call int.pop() call int.pop() call int.pop() ++ = if >= && < && call org.apache.lucene.util.FixedBitSet.get(int) call org.apache.lucene.util.FixedBitSet.get(int) call org.apache.lucene.util.FixedBitSet.get(int) call org.apache.lucene.util.FixedBitSet.get(int) call org.apache.lucene.util.FixedBitSet.get(int) call org.apache.lucene.util.FixedBitSet.clear(int) call org.apache.lucene.util.FixedBitSet.clear(int) call org.apache.lucene.util.FixedBitSet.clear(int) call org.apache.lucene.util.FixedBitSet.clear(int) call org.apache.lucene.util.FixedBitSet.clear(int) for = - >= -- call int.add() call int.add() call int.add() call int.add() call int.add() return private private if < || == && < return return PhrasePositions decl PhrasePositions int private private decl_stmt int = decl_stmt org.apache.lucene.search.PhrasePositions = for = < ++ decl_stmt org.apache.lucene.search.PhrasePositions = if != && == return return - private private throws = if ! return if ! return return private private throws call int.clear() call int.clear() call int.clear() call int.clear() call int.clear() for : if > = call int.add() call int.add() call int.add() call int.add() call int.add() private private throws if ! return return private private throws for : private private call int.clear() call int.clear() call int.clear() call int.clear() call int.clear() for : if > = call int.add() call int.add() call int.add() call int.add() call int.add() int int PhrasePositions PhrasePositions private private throws for : if decl_stmt int for = < += = decl_stmt org.apache.lucene.search.PhrasePositions = decl_stmt int while = >= decl_stmt org.apache.lucene.search.PhrasePositions = if ! return if < = break else for = < ++ for = < ++ if ! return return decl ArrayList decl LinkedHashMap private private throws = decl_stmt java.util.LinkedHashMap < = = ! call decl LinkedHashMap.isEmpty() call decl LinkedHashMap.isEmpty() call decl LinkedHashMap.isEmpty() call decl LinkedHashMap.isEmpty() call decl LinkedHashMap.isEmpty() if = new decl_stmt java.util.ArrayList < < = if ! return return decl PhrasePositions decl Comparator private private < < = new decl_stmt java.util.Comparator < = new < public public return - for = < ++ decl_stmt org.apache.lucene.search.PhrasePositions = new = for = < ++ = public public return - decl ArrayList decl PhrasePositions PhrasePositions decl ArrayList int decl ArrayList decl HashSet int PhrasePositions decl ArrayList decl HashMap private < < private < < < throws decl_stmt org.apache.lucene.search.PhrasePositions = decl_stmt java.util.ArrayList < < = new <> if ! for = < ++ decl_stmt org.apache.lucene.search.PhrasePositions = if >= continue decl_stmt int = for = + < ++ decl_stmt org.apache.lucene.search.PhrasePositions = if >= || == || != continue decl_stmt int = if < = call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() = decl_stmt java.util.ArrayList < = new <> call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() = call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() else decl_stmt java.util.ArrayList < < = new <> decl_stmt java.util.ArrayList < = decl_stmt HashMap < = decl_stmt java.util.HashSet < = new <> call decl HashMap.values() call decl HashMap.values() call decl HashMap.values() call decl HashMap.values() call decl HashMap.values() for = < call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() ++ call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() new < for : for : if decl_stmt int = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() assert == - || == = for < : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() new <> return private final private final return + decl LinkedHashMap Integer Integer decl HashMap private < private < decl_stmt java.util.LinkedHashMap < = new <> decl_stmt HashMap < = new <> for : for : decl_stmt java.lang.Integer = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() decl_stmt java.lang.Integer = == new : new + call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() if == call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.size() call decl LinkedHashMap.size() call decl LinkedHashMap.size() call decl LinkedHashMap.size() call decl LinkedHashMap.size() return decl ArrayList private private < decl_stmt java.util.ArrayList < = new <> for : for : if call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() |= > break return call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new Integer FixedBitSet decl ArrayList private < private < < decl_stmt java.util.ArrayList < = new <> for : decl_stmt org.apache.lucene.util.FixedBitSet = new decl_stmt java.lang.Integer for : if = != call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return int int private private < decl_stmt int for = < - += = decl_stmt int = + while < if = else ++ decl HashMap FixedBitSet decl Term private < private < < < throws decl_stmt HashMap < = new <> decl_stmt org.apache.lucene.index.Term = new for = < ++ decl_stmt org.apache.lucene.util.FixedBitSet = for = call org.apache.lucene.util.FixedBitSet.nextSetBit(int) call org.apache.lucene.util.FixedBitSet.nextSetBit(int) call org.apache.lucene.util.FixedBitSet.nextSetBit(int) call org.apache.lucene.util.FixedBitSet.nextSetBit(int) call org.apache.lucene.util.FixedBitSet.nextSetBit(int) != = + >= call org.apache.lucene.util.FixedBitSet.length() call org.apache.lucene.util.FixedBitSet.length() call org.apache.lucene.util.FixedBitSet.length() call org.apache.lucene.util.FixedBitSet.length() call org.apache.lucene.util.FixedBitSet.length() : call org.apache.lucene.util.FixedBitSet.nextSetBit(int) call org.apache.lucene.util.FixedBitSet.nextSetBit(int) call org.apache.lucene.util.FixedBitSet.nextSetBit(int) call org.apache.lucene.util.FixedBitSet.nextSetBit(int) call org.apache.lucene.util.FixedBitSet.nextSetBit(int) + call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() return public public return return public public return call org.apache.lucene.search.ConjunctionDISI.docID() call org.apache.lucene.search.ConjunctionDISI.docID() call org.apache.lucene.search.ConjunctionDISI.docID() call org.apache.lucene.search.ConjunctionDISI.docID() call org.apache.lucene.search.ConjunctionDISI.docID() public public return call decl Similarity.score() call decl Similarity.score() call decl Similarity.score() call decl Similarity.score() call decl Similarity.score() public public return + + public public return new public public throws = return != public public return public public return + + public public throws = return != public public return public public return + + public public return