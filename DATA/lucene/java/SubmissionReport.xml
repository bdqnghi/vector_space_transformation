org.apache.lucene.benchmark.quality.utils java.io.IOException import java.io.PrintWriter import java.text.NumberFormat import java.util.Locale import org.apache.lucene.benchmark.quality.QualityQuery import org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.TopDocs import class org.apache.lucene.benchmark.quality.utils.SubmissionReport PrintWriter String NumberFormat String String ScoreDoc DocNameExtractor String public public throws if == return decl_stmt org.apache.lucene.search.ScoreDoc = decl_stmt java.lang.String = decl_stmt org.apache.lucene.benchmark.quality.utils.DocNameExtractor = new for = < ++ decl_stmt java.lang.String = call org.apache.lucene.benchmark.quality.utils.DocNameExtractor.docName(IndexSearcher,int) call org.apache.lucene.benchmark.quality.utils.DocNameExtractor.docName(IndexSearcher,int) call org.apache.lucene.benchmark.quality.utils.DocNameExtractor.docName(IndexSearcher,int) call org.apache.lucene.benchmark.quality.utils.DocNameExtractor.docName(IndexSearcher,int) call org.apache.lucene.benchmark.quality.utils.DocNameExtractor.docName(IndexSearcher,int) call PrintWriter.println() call PrintWriter.println() call PrintWriter.println() call PrintWriter.println() call PrintWriter.println() + + + + + + + + + call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) + + public public if != call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() call PrintWriter.flush() int private private = == : decl_stmt int = return +