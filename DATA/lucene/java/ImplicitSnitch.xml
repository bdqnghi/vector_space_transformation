org.apache.solr.cloud.rule java.io.IOException import java.lang.invoke.MethodHandles import java.net.InetAddress import java.nio.file.Files import java.nio.file.Paths import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import java.util.Set import java.util.regex.Matcher import java.util.regex.Pattern import com.google.common.collect.ImmutableList import com.google.common.collect.ImmutableSet import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.core.CoreContainer import org.apache.solr.handler.admin.CoreAdminHandler import org.apache.solr.request.SolrQueryRequest import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.cloud.rule.ImplicitSnitch super super extends super implements String String Logger decl Set String String decl List Pattern String String String Matcher ModifiableSolrParams public public < if if decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) if decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new if call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) if call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) for : if call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() if call ModifiableSolrParams.size() call ModifiableSolrParams.size() call ModifiableSolrParams.size() call ModifiableSolrParams.size() call ModifiableSolrParams.size() > long long static static throws decl_stmt long = decl_stmt long = / / / return CoreContainer long decl Map decl String public < public < decl_stmt java.util.Map < = new <> if - == decl_stmt org.apache.solr.core.CoreContainer = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.core.CoreContainer.getCoreNames() call org.apache.solr.core.CoreContainer.getCoreNames() call org.apache.solr.core.CoreContainer.getCoreNames() call org.apache.solr.core.CoreContainer.getCoreNames() call org.apache.solr.core.CoreContainer.getCoreNames() if - == try decl_stmt long final final = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() catch decl_stmt java.lang.String = if != && > for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + return public public return call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() || decl List decl String int String String private private < decl_stmt java.util.List < = new <> for : if call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return decl_stmt java.lang.String = if == return decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ decl_stmt java.lang.String = decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() - - if call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() Matcher String String private private decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) decl_stmt java.lang.String = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) if != decl_stmt java.lang.String = if != return call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call java.util.regex.Pattern.pattern() call java.util.regex.Pattern.pattern() call java.util.regex.Pattern.pattern() call java.util.regex.Pattern.pattern() call java.util.regex.Pattern.pattern() return InetAddress protected protected try decl_stmt java.net.InetAddress = return call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return