org.apache.lucene.search java.io.IOException import java.util.BitSet import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.IndexReader import org.apache.lucene.index.RandomIndexWriter import org.apache.lucene.index.Term import org.apache.lucene.search.TimeLimitingCollector.TimeExceededException import org.apache.lucene.search.TimeLimitingCollector.TimerThread import org.apache.lucene.store.Directory import org.apache.lucene.util.Counter import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.LuceneTestCase.SuppressSysoutChecks import org.apache.lucene.util.TestUtil import org.apache.lucene.util.ThreadInterruptedException import class annotation org.apache.lucene.search.TestTimeLimitingCollector super super extends IndexSearcher int long TimerThread Counter double IndexReader Directory Query int String int String decl Builder decl BooleanQuery RandomIndexWriter public public throws = = new call TimerThread.start() call TimerThread.start() call TimerThread.start() call TimerThread.start() call TimerThread.start() decl_stmt java.lang.String final final = = decl_stmt org.apache.lucene.index.RandomIndexWriter = new new for = < ++ = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() = decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new for = < ++ decl_stmt java.lang.String = for : call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new = call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) public public throws call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call TimerThread.stopTimer() call TimerThread.stopTimer() call TimerThread.stopTimer() call TimerThread.stopTimer() call TimerThread.stopTimer() call TimerThread.join() call TimerThread.join() call TimerThread.join() call TimerThread.join() call TimerThread.join() Document private private throws decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) private private throws call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) public public int long Collector MyHitCollector long int private private decl_stmt int = decl_stmt int = try decl_stmt MyHitCollector = new = call MyHitCollector.hitCount() call MyHitCollector.hitCount() call MyHitCollector.hitCount() call MyHitCollector.hitCount() call MyHitCollector.hitCount() = new decl_stmt long = decl_stmt long = decl_stmt org.apache.lucene.search.Collector = = call MyHitCollector.hitCount() call MyHitCollector.hitCount() call MyHitCollector.hitCount() call MyHitCollector.hitCount() call MyHitCollector.hitCount() catch + TimeLimitingCollector private private decl_stmt org.apache.lucene.search.TimeLimitingCollector = new call org.apache.lucene.search.TimeLimitingCollector.setGreedy(boolean) call org.apache.lucene.search.TimeLimitingCollector.setGreedy(boolean) call org.apache.lucene.search.TimeLimitingCollector.setGreedy(boolean) call org.apache.lucene.search.TimeLimitingCollector.setGreedy(boolean) call org.apache.lucene.search.TimeLimitingCollector.setGreedy(boolean) return public public public public MyHitCollector TimeExceededException int Collector int private private decl_stmt MyHitCollector = new call MyHitCollector.setSlowDown() call MyHitCollector.setSlowDown() call MyHitCollector.setSlowDown() call MyHitCollector.setSlowDown() call MyHitCollector.setSlowDown() decl_stmt org.apache.lucene.search.Collector = decl_stmt TimeExceededException = decl_stmt int = call TimeExceededException.getLastDocCollected() call TimeExceededException.getLastDocCollected() call TimeExceededException.getLastDocCollected() call TimeExceededException.getLastDocCollected() call TimeExceededException.getLastDocCollected() decl_stmt int = call MyHitCollector.getLastDocCollected() call MyHitCollector.getLastDocCollected() call MyHitCollector.getLastDocCollected() call MyHitCollector.getLastDocCollected() call MyHitCollector.getLastDocCollected() if != - + > if + + + + + == call MyHitCollector.hitCount() call MyHitCollector.hitCount() call MyHitCollector.hitCount() call MyHitCollector.hitCount() call MyHitCollector.hitCount() > else + + + + + > call TimeExceededException.getTimeAllowed() call TimeExceededException.getTimeAllowed() call TimeExceededException.getTimeAllowed() call TimeExceededException.getTimeAllowed() call TimeExceededException.getTimeAllowed() + call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() + + - call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() > - call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() if call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() > + + + + + call TimeExceededException.getTimeAllowed() call TimeExceededException.getTimeAllowed() call TimeExceededException.getTimeAllowed() call TimeExceededException.getTimeAllowed() call TimeExceededException.getTimeAllowed() + + call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() call TimeExceededException.getTimeElapsed() + + long private private decl_stmt long = * call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() + + if *= return String private private decl_stmt java.lang.String = + + + call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() + + + + + if = + + return + + long public public try decl_stmt long = * call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() = call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() = call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() call TimerThread.getResolution() finally call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.setResolution() call TimerThread.setResolution() MyHitCollector Collector decl BooleanQuery public public throws decl_stmt MyHitCollector = new decl_stmt org.apache.lucene.search.Collector = - decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() - call MyHitCollector.getLastDocCollected() call MyHitCollector.getLastDocCollected() call MyHitCollector.getLastDocCollected() call MyHitCollector.getLastDocCollected() call MyHitCollector.getLastDocCollected() public public throws public public throws int decl Thread BitSet private private final final throws decl_stmt java.lang.Thread = new decl_stmt org.apache.lucene.util.BitSet final final = new for = < ++ decl_stmt int final final = = new public public if else synchronized call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) for = < ++ for = < ++ call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() public public if else synchronized public public = public public return public public return public public throws int public public final final throws decl_stmt int = + if > try catch throw new assert >= : + + + = protected protected throws = public public return