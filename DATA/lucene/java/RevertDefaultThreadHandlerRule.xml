org.apache.solr.util java.lang.Thread.UncaughtExceptionHandler import java.util.concurrent.atomic.AtomicBoolean import org.apache.zookeeper.server.NIOServerCnxnFactory import org.junit.rules.TestRule import org.junit.runner.Description import org.junit.runners.model.Statement import com.carrotsearch.randomizedtesting.rules.StatementAdapter import class org.apache.solr.util.RevertDefaultThreadHandlerRule super super implements AtomicBoolean UncaughtExceptionHandler decl Class public public return new protected protected throws if ! call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() decl_stmt java.lang.UncaughtExceptionHandler = try decl_stmt java.lang.Class < = call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() finally if == UncaughtExceptionHandler decl Class protected protected throws if ! call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() decl_stmt java.lang.UncaughtExceptionHandler = try decl_stmt java.lang.Class < = call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() finally if ==