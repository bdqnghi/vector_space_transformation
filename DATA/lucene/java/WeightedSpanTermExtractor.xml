org.apache.lucene.search.highlight java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.List import java.util.Map import java.util.Set import org.apache.lucene.analysis.CachingTokenFilter import org.apache.lucene.analysis.TokenStream import org.apache.lucene.index.BinaryDocValues import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.Fields import org.apache.lucene.index.FilterLeafReader import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.NumericDocValues import org.apache.lucene.index.SortedDocValues import org.apache.lucene.index.Term import org.apache.lucene.index.Terms import org.apache.lucene.index.memory.MemoryIndex import org.apache.lucene.queries.CommonTermsQuery import org.apache.lucene.queries.CustomScoreQuery import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.BoostQuery import org.apache.lucene.search.ConstantScoreQuery import org.apache.lucene.search.DisjunctionMaxQuery import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.MatchAllDocsQuery import org.apache.lucene.search.MultiPhraseQuery import org.apache.lucene.search.MultiTermQuery import org.apache.lucene.search.PhraseQuery import org.apache.lucene.search.Query import org.apache.lucene.search.TermQuery import org.apache.lucene.search.join.ToChildBlockJoinQuery import org.apache.lucene.search.join.ToParentBlockJoinQuery import org.apache.lucene.search.spans.FieldMaskingSpanQuery import org.apache.lucene.search.spans.SpanFirstQuery import org.apache.lucene.search.spans.SpanNearQuery import org.apache.lucene.search.spans.SpanNotQuery import org.apache.lucene.search.spans.SpanOrQuery import org.apache.lucene.search.spans.SpanQuery import org.apache.lucene.search.spans.Spans import org.apache.lucene.search.spans.SpanTermQuery import org.apache.lucene.search.spans.SpanWeight import org.apache.lucene.util.Bits import org.apache.lucene.util.IOUtils import class org.apache.lucene.search.highlight.WeightedSpanTermExtractor boolean int LeafReader boolean String String boolean TokenStream boolean PhraseQuery decl SpanQuery int int decl int int Query Query MultiPhraseQuery Query decl Term IndexReader decl List decl List BoostQuery decl Term SpanNearQuery decl Term int boolean protected protected < throws if instanceof decl_stmt org.apache.lucene.search.BoostQuery = call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() * call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() else if instanceof for : if ! else if instanceof decl_stmt org.apache.lucene.search.PhraseQuery = decl_stmt org.apache.lucene.index.Term = call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() decl_stmt org.apache.lucene.search.spans.SpanQuery = new for = < ++ = new decl_stmt int = decl_stmt int = call org.apache.lucene.search.PhraseQuery.getPositions() call org.apache.lucene.search.PhraseQuery.getPositions() call org.apache.lucene.search.PhraseQuery.getPositions() call org.apache.lucene.search.PhraseQuery.getPositions() call org.apache.lucene.search.PhraseQuery.getPositions() if >= = - - - + decl_stmt boolean = call org.apache.lucene.search.PhraseQuery.getSlop() call org.apache.lucene.search.PhraseQuery.getSlop() call org.apache.lucene.search.PhraseQuery.getSlop() call org.apache.lucene.search.PhraseQuery.getSlop() call org.apache.lucene.search.PhraseQuery.getSlop() == decl_stmt org.apache.lucene.search.spans.SpanNearQuery = new call org.apache.lucene.search.PhraseQuery.getSlop() call org.apache.lucene.search.PhraseQuery.getSlop() call org.apache.lucene.search.PhraseQuery.getSlop() call org.apache.lucene.search.PhraseQuery.getSlop() call org.apache.lucene.search.PhraseQuery.getSlop() + else if instanceof else if instanceof else if instanceof decl_stmt org.apache.lucene.search.Query final final = if != else if instanceof else if instanceof for < = else if instanceof else if instanceof else if instanceof decl_stmt org.apache.lucene.search.MultiPhraseQuery final final = decl_stmt org.apache.lucene.index.Term final final final = call org.apache.lucene.search.MultiPhraseQuery.getTermArrays() call org.apache.lucene.search.MultiPhraseQuery.getTermArrays() call org.apache.lucene.search.MultiPhraseQuery.getTermArrays() call org.apache.lucene.search.MultiPhraseQuery.getTermArrays() call org.apache.lucene.search.MultiPhraseQuery.getTermArrays() decl_stmt int final final final = call org.apache.lucene.search.MultiPhraseQuery.getPositions() call org.apache.lucene.search.MultiPhraseQuery.getPositions() call org.apache.lucene.search.MultiPhraseQuery.getPositions() call org.apache.lucene.search.MultiPhraseQuery.getPositions() call org.apache.lucene.search.MultiPhraseQuery.getPositions() if > decl_stmt int = - for = < - ++ if > = decl_stmt int = - for = < - ++ if > = decl_stmt int = for = < ++ decl_stmt org.apache.lucene.index.Term final final final = decl_stmt java.util.List < = if == = = new <> ++ for = < ++ call int.add() call int.add() call int.add() call int.add() call int.add() new decl_stmt int = decl_stmt int = decl_stmt org.apache.lucene.search.spans.SpanQuery final final final = new for = < ++ decl_stmt java.util.List < = if != ++ = new call int.toArray() call int.toArray() call int.toArray() call int.toArray() call int.toArray() new call int.size() call int.size() call int.size() call int.size() call int.size() else ++ decl_stmt int final final = call org.apache.lucene.search.MultiPhraseQuery.getSlop() call org.apache.lucene.search.MultiPhraseQuery.getSlop() call org.apache.lucene.search.MultiPhraseQuery.getSlop() call org.apache.lucene.search.MultiPhraseQuery.getSlop() call org.apache.lucene.search.MultiPhraseQuery.getSlop() decl_stmt boolean final final = == decl_stmt org.apache.lucene.search.spans.SpanNearQuery = new + else if instanceof else if instanceof else decl_stmt org.apache.lucene.search.Query = decl_stmt org.apache.lucene.index.IndexReader final final = decl_stmt org.apache.lucene.search.Query if instanceof if ! return = else = call IndexReader.rewrite() call IndexReader.rewrite() call IndexReader.rewrite() call IndexReader.rewrite() call IndexReader.rewrite() if != else protected protected < throws IndexSearcher Spans SpanWeight boolean decl List decl Set decl Set SpanQuery WeightedSpanTerm LeafReaderContext decl Map Bits SpanQuery protected protected < throws decl_stmt java.util.Set < if == = new <> else = new <> call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if != call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt java.util.Map < = new <> decl_stmt java.util.Set < = new <> decl_stmt boolean final final = decl_stmt org.apache.lucene.search.IndexSearcher final final = new call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) if for final final : decl_stmt org.apache.lucene.search.spans.SpanQuery final final = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call SpanQuery.createWeight() call SpanQuery.createWeight() call SpanQuery.createWeight() call SpanQuery.createWeight() call SpanQuery.createWeight() else decl_stmt java.util.List < = new <> for final final : decl_stmt org.apache.lucene.search.spans.SpanQuery final final if = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() else = decl_stmt org.apache.lucene.index.LeafReaderContext = decl_stmt org.apache.lucene.search.spans.SpanWeight = call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) decl_stmt org.apache.lucene.util.Bits = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() decl_stmt org.apache.lucene.search.spans.Spans final final = call SpanWeight.getSpans() call SpanWeight.getSpans() call SpanWeight.getSpans() call SpanWeight.getSpans() call SpanWeight.getSpans() if == return while call Spans.nextDoc() call Spans.nextDoc() call Spans.nextDoc() call Spans.nextDoc() call Spans.nextDoc() != if != && call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() == continue while call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() - if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return for final final : if decl_stmt org.apache.lucene.search.highlight.WeightedSpanTerm = if == = new call org.apache.lucene.search.highlight.WeightedSpanTerm.addPositionSpans(List) call org.apache.lucene.search.highlight.WeightedSpanTerm.addPositionSpans(List) call org.apache.lucene.search.highlight.WeightedSpanTerm.addPositionSpans(List) call org.apache.lucene.search.highlight.WeightedSpanTerm.addPositionSpans(List) call org.apache.lucene.search.highlight.WeightedSpanTerm.addPositionSpans(List) = else if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > call org.apache.lucene.search.highlight.WeightedSpanTerm.addPositionSpans(List) call org.apache.lucene.search.highlight.WeightedSpanTerm.addPositionSpans(List) call org.apache.lucene.search.highlight.WeightedSpanTerm.addPositionSpans(List) call org.apache.lucene.search.highlight.WeightedSpanTerm.addPositionSpans(List) call org.apache.lucene.search.highlight.WeightedSpanTerm.addPositionSpans(List) IndexSearcher WeightedSpanTerm decl Set protected protected < throws decl_stmt java.util.Set < = new <> decl_stmt org.apache.lucene.search.IndexSearcher final final = new call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) for final final : if decl_stmt org.apache.lucene.search.highlight.WeightedSpanTerm = new boolean protected protected decl_stmt boolean = == || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return IndexSearcher boolean MemoryIndex Terms protected protected throws if == decl_stmt boolean = && ! instanceof if instanceof = decl_stmt org.apache.lucene.index.Terms = if call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() && call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() = new if == decl_stmt org.apache.lucene.index.memory.MemoryIndex final final = new if assert ! = new new = call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) else call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) call org.apache.lucene.index.memory.MemoryIndex.addField(IndexableField,Analyzer) new decl_stmt org.apache.lucene.search.IndexSearcher final final = call org.apache.lucene.index.memory.MemoryIndex.createSearcher() call org.apache.lucene.index.memory.MemoryIndex.createSearcher() call org.apache.lucene.index.memory.MemoryIndex.createSearcher() call org.apache.lucene.index.memory.MemoryIndex.createSearcher() call org.apache.lucene.index.memory.MemoryIndex.createSearcher() = call org.apache.lucene.search.IndexSearcher.getTopReaderContext() call org.apache.lucene.search.IndexSearcher.getTopReaderContext() call org.apache.lucene.search.IndexSearcher.getTopReaderContext() call org.apache.lucene.search.IndexSearcher.getTopReaderContext() call org.apache.lucene.search.IndexSearcher.getTopReaderContext() = new return call org.apache.lucene.index.LeafReader.getContext() call org.apache.lucene.index.LeafReader.getContext() call org.apache.lucene.index.LeafReader.getContext() call org.apache.lucene.index.LeafReader.getContext() call org.apache.lucene.index.LeafReader.getContext() public public throw new public public throws return new public public throws return public < public < return public public return public public throws return public < public < return public public return public public throws return public public throws return public public throws return public public throws return public public throws return public < public < throws return decl Map public < public < throws if != = else = decl_stmt java.util.Map < = new <> = try finally return int decl Map WeightedSpanTerm decl Iterator decl Set int float public < public < throws if != = else = = decl_stmt java.util.Map < = new <> decl_stmt int = decl_stmt java.util.Set < = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt java.util.Iterator < = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() try while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.apache.lucene.search.highlight.WeightedSpanTerm = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt int = new decl_stmt float = / + + *= finally return protected protected < if instanceof else if instanceof else if instanceof for final final : else if instanceof else if instanceof for final final : else SpanNotQuery protected protected if ! return else if instanceof return else if instanceof return else if instanceof for final final : if return return else if instanceof decl_stmt org.apache.lucene.search.spans.SpanNotQuery = return call org.apache.lucene.search.spans.SpanNotQuery.getInclude() call org.apache.lucene.search.spans.SpanNotQuery.getInclude() call org.apache.lucene.search.spans.SpanNotQuery.getInclude() call org.apache.lucene.search.spans.SpanNotQuery.getInclude() call org.apache.lucene.search.spans.SpanNotQuery.getInclude() || call org.apache.lucene.search.spans.SpanNotQuery.getExclude() call org.apache.lucene.search.spans.SpanNotQuery.getExclude() call org.apache.lucene.search.spans.SpanNotQuery.getExclude() call org.apache.lucene.search.spans.SpanNotQuery.getExclude() call org.apache.lucene.search.spans.SpanNotQuery.getExclude() else if instanceof for final final : if return return else if instanceof return else return public public < extends extends extends extends for < extends extends extends extends : WeightedSpanTerm WeightedSpanTerm WeightedSpanTerm public public decl_stmt org.apache.lucene.search.highlight.WeightedSpanTerm = if == return decl_stmt org.apache.lucene.search.highlight.WeightedSpanTerm = decl_stmt org.apache.lucene.search.highlight.WeightedSpanTerm = if ! = return public public return public public = public public return public public = public public return public public assert != return public public = protected final protected final =