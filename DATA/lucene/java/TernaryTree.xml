org.apache.lucene.analysis.compound.hyphenation java.io.PrintStream import java.util.Enumeration import java.util.Stack import class org.apache.lucene.analysis.compound.hyphenation.TernaryTree super super implements char decl char int decl char CharVector decl char char int decl char protected protected = = = = new = new = new = new = new char int public public decl_stmt int = + if + > + decl_stmt char = new -- = = int public public decl_stmt int = + if + > + = char char int private private decl_stmt int = if == = ++ = ++ = if > = = char call org.apache.lucene.analysis.compound.hyphenation.CharVector.alloc(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.alloc(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.alloc(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.alloc(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.alloc(int) + call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() else = = return if == decl_stmt char = ++ = = = if > = call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) = ++ if call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) == = = = else = else = = = = ++ return decl_stmt char = if < = else if == if != = + else = else = return public static public static for == ++ , ++ if == return return - int public static public static decl_stmt int = for = < ++ = int - + if != return if + == return if + != return - + return public static public static while != ++ = ++ = int public static public static decl_stmt int = for = < && != ++ ++ return public static public static return char int public public decl_stmt int = decl_stmt char = new + = return int char char int public public decl_stmt int decl_stmt char = decl_stmt int = decl_stmt char while != if == if call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() == return else return - = = - if == if == return ++ = else if < = else = return - public public return >= decl char int private private decl_stmt int = < : decl_stmt char = new = = new = = new = = new = public public return TernaryTree public public decl_stmt org.apache.lucene.analysis.compound.hyphenation.TernaryTree = new = = = = = = = = return int protected protected decl_stmt int if < return = >> + + + + - - int decl char Iterator decl String public public decl_stmt int = = decl_stmt java.lang.String = new decl_stmt char = new decl_stmt java.util.Iterator = new while = ++ = TernaryTree CharVector public public decl_stmt org.apache.lucene.analysis.compound.hyphenation.CharVector = new call org.apache.lucene.analysis.compound.hyphenation.CharVector.alloc(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.alloc(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.alloc(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.alloc(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.alloc(int) decl_stmt org.apache.lucene.analysis.compound.hyphenation.TernaryTree = new = call CharVector.trimToSize() call CharVector.trimToSize() call CharVector.trimToSize() call CharVector.trimToSize() call CharVector.trimToSize() int private private decl_stmt int if == return if == = call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() if < = call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() + call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray() char = char else if != public < public < return new public public return new public public = String public public decl_stmt java.lang.String = new = return public public if >= return return public public return != - Item int boolean private private decl_stmt Item = new decl_stmt int = if return - if != && == return decl_stmt boolean = while = ++ switch case if != = call Item.clone() call Item.clone() call Item.clone() call Item.clone() call Item.clone() else ++ call Item.clone() call Item.clone() call Item.clone() call Item.clone() call Item.clone() = = break case = call Item.clone() call Item.clone() call Item.clone() call Item.clone() call Item.clone() if > - = break default: if return - = break return StringBuilder boolean int private private if == - return - decl_stmt boolean = while while != if == = break new char if == = break = if break = if == - return - decl_stmt java.lang.StringBuilder = new if == decl_stmt int = while call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int) ++ = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return public public + + + call org.apache.lucene.analysis.compound.hyphenation.CharVector.length() call org.apache.lucene.analysis.compound.hyphenation.CharVector.length() call org.apache.lucene.analysis.compound.hyphenation.CharVector.length() call org.apache.lucene.analysis.compound.hyphenation.CharVector.length() call org.apache.lucene.analysis.compound.hyphenation.CharVector.length()