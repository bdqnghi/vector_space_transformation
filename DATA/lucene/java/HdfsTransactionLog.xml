org.apache.solr.update java.io.IOException import java.lang.invoke.MethodHandles import java.util.Collection import java.util.HashMap import java.util.List import java.util.Map import org.apache.hadoop.fs.FSDataInputStream import org.apache.hadoop.fs.FSDataOutputStream import org.apache.hadoop.fs.FileSystem import org.apache.hadoop.fs.Path import org.apache.solr.common.SolrException import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.util.DataInputInputStream import org.apache.solr.common.util.FastInputStream import org.apache.solr.common.util.FastOutputStream import org.apache.solr.common.util.JavaBinCodec import org.apache.solr.common.util.ObjectReleaseTracker import org.apache.solr.util.FSHDFSUtils import org.apache.solr.util.FSHDFSUtils.CallerInfo import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.update.HdfsTransactionLog super super extends boolean FileSystem Logger boolean Path FSDataOutputStream boolean public public return FSDataFastInputStream decl byte long long public public throws decl_stmt long synchronized call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() = decl_stmt byte = new decl_stmt long = - - if < return decl_stmt FSDataFastInputStream = new call FileSystem.open() call FileSystem.open() call FileSystem.open() call FileSystem.open() call FileSystem.open() try call FSDataFastInputStream.read() call FSDataFastInputStream.read() call FSDataFastInputStream.read() call FSDataFastInputStream.read() call FSDataFastInputStream.read() for = < ++ if != return finally call FSDataFastInputStream.close() call FSDataFastInputStream.close() call FSDataFastInputStream.close() call FSDataFastInputStream.close() call FSDataFastInputStream.close() return public public throws synchronized assert == call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() assert == = Map LogCodec boolean private private throws decl_stmt boolean = if == = = != : new call FileSystem.open() call FileSystem.open() call FileSystem.open() call FileSystem.open() call FileSystem.open() decl_stmt java.util.Map = try decl_stmt LogCodec = new = call LogCodec.unmarshal() call LogCodec.unmarshal() call LogCodec.unmarshal() call LogCodec.unmarshal() call LogCodec.unmarshal() finally if != && synchronized = < call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) = new <> for = < ++ + LogCodec long public public decl_stmt LogCodec = new synchronized try decl_stmt long = if == = call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.init() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeTag() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() call LogCodec.writeInt() | call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeLong() call LogCodec.writeStr() call LogCodec.writeStr() call LogCodec.writeStr() call LogCodec.writeStr() call LogCodec.writeStr() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() return catch throw new LogCodec FSDataFastInputStream public public if < return try synchronized call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() decl_stmt FSDataFastInputStream = new call FileSystem.open() call FileSystem.open() call FileSystem.open() call FileSystem.open() call FileSystem.open() try call FSDataFastInputStream.seek() call FSDataFastInputStream.seek() call FSDataFastInputStream.seek() call FSDataFastInputStream.seek() call FSDataFastInputStream.seek() decl_stmt LogCodec = new return call LogCodec.readVal() call LogCodec.readVal() call LogCodec.readVal() call LogCodec.readVal() call LogCodec.readVal() new finally call FSDataFastInputStream.close() call FSDataFastInputStream.close() call FSDataFastInputStream.close() call FSDataFastInputStream.close() call FSDataFastInputStream.close() catch throw new + public public if == return try synchronized if == call FSDataOutputStream.hsync() call FSDataOutputStream.hsync() call FSDataOutputStream.hsync() call FSDataOutputStream.hsync() call FSDataOutputStream.hsync() else call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() catch throw new public public try if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + synchronized call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.close() call FSDataOutputStream.close() call FSDataOutputStream.close() call FSDataOutputStream.close() call FSDataOutputStream.close() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new finally = assert if try call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() catch throw new public public return + call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() + + + public public return new public public throws return new Object long FSDataInputStream int public public throws decl_stmt long = synchronized if call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + + + if >= return if >= call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) synchronized = call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() call FSDataOutputStream.hflush() decl_stmt FSDataInputStream = call FileSystem.open() call FileSystem.open() call FileSystem.open() call FileSystem.open() call FileSystem.open() = new if == synchronized if >= return = decl_stmt java.lang.Object = decl_stmt int = assert == - - return public public try catch throw new public public synchronized return + + + + + + + public public return public public return public public return long Object int long long long public public throws if <= return decl_stmt long = decl_stmt int = decl_stmt long = - = - if <= return decl_stmt long = if >= else decl_stmt long = - = = = decl_stmt java.lang.Object = return public public return + public public try catch throw new public public synchronized return + + + + + + +