org.apache.solr.cloud java.io.File import java.io.IOException import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicReference import org.apache.lucene.util.LuceneTestCase.Nightly import org.apache.solr.SolrTestCaseJ4 import org.apache.solr.client.solrj.SolrClient import org.apache.solr.client.solrj.SolrQuery import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.request.CollectionAdminRequest import org.apache.solr.client.solrj.response.CollectionAdminResponse import org.apache.solr.util.TimeOut import org.apache.zookeeper.KeeperException import org.junit.After import org.junit.Before import class annotation org.apache.solr.cloud.ConcurrentDeleteAndCreateCollectionTest super super extends MiniSolrCloudCluster public public throws = new public public throws call org.apache.solr.cloud.MiniSolrCloudCluster.shutdown() call org.apache.solr.cloud.MiniSolrCloudCluster.shutdown() call org.apache.solr.cloud.MiniSolrCloudCluster.shutdown() call org.apache.solr.cloud.MiniSolrCloudCluster.shutdown() call org.apache.solr.cloud.MiniSolrCloudCluster.shutdown() String String decl AtomicReference int decl Thread SolrClient File public public decl_stmt File final final = decl_stmt java.util.concurrent.atomic.AtomicReference final final final < = new <> decl_stmt int final final = decl_stmt java.lang.Thread final final final = new for = < ++ decl_stmt java.lang.String final final = + decl_stmt java.lang.String final final = call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() decl_stmt org.apache.solr.client.solrj.SolrClient final final = = new + + call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() String String String decl AtomicReference int decl Thread SolrClient File public public decl_stmt java.lang.String final final = decl_stmt File final final = decl_stmt java.lang.String final final = call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() decl_stmt org.apache.solr.client.solrj.SolrClient final final = decl_stmt java.util.concurrent.atomic.AtomicReference final final final < = new <> decl_stmt int final final = decl_stmt java.lang.Thread final final final = new for = < ++ decl_stmt java.lang.String final final = + = new + + call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() try call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() catch throw new private private try call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) catch throw new private private final final final for : try catch throw new private private final final final for : TimeOut public public decl_stmt org.apache.solr.util.TimeOut final final = new while ! call org.apache.solr.util.TimeOut.hasTimedOut() call org.apache.solr.util.TimeOut.hasTimedOut() call org.apache.solr.util.TimeOut.hasTimedOut() call org.apache.solr.util.TimeOut.hasTimedOut() call org.apache.solr.util.TimeOut.hasTimedOut() && == protected protected protected protected synchronized if != else CollectionAdminResponse private private try decl_stmt org.apache.solr.client.solrj.response.CollectionAdminResponse final final = new if call CollectionAdminResponse.getStatus() call CollectionAdminResponse.getStatus() call CollectionAdminResponse.getStatus() call CollectionAdminResponse.getStatus() call CollectionAdminResponse.getStatus() != new + catch decl CollectionAdminRequest decl Delete private private try decl_stmt Delete final final final final final = new decl_stmt org.apache.solr.client.solrj.response.CollectionAdminResponse final final = call decl CollectionAdminRequest.process() call decl CollectionAdminRequest.process() call decl CollectionAdminRequest.process() call decl CollectionAdminRequest.process() call decl CollectionAdminRequest.process() if call decl Delete.getStatus() call decl Delete.getStatus() call decl Delete.getStatus() call decl Delete.getStatus() call decl Delete.getStatus() != new + catch protected protected private private try new catch if ! && !