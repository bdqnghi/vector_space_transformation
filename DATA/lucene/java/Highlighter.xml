org.apache.lucene.search.highlight java.io.IOException import java.util.ArrayList import java.util.Iterator import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.OffsetAttribute import org.apache.lucene.util.PriorityQueue import class org.apache.lucene.search.highlight.Highlighter int int Encoder Fragmenter Formatter Scorer TokenStream public final public final throws decl_stmt org.apache.lucene.analysis.TokenStream = return decl String public final public final throws decl_stmt java.lang.String = if > return return TokenStream public final public final throws decl_stmt org.apache.lucene.analysis.TokenStream = return decl TextFragment decl ArrayList public final public final throws = decl_stmt org.apache.lucene.search.highlight.TextFragment = decl_stmt java.util.ArrayList < = new <> for = < ++ if != && > call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new decl ArrayList int decl ArrayList int String FragmentQueue TextFragment TokenStream CharTermAttribute String int StringBuilder OffsetAttribute TextFragment TokenGroup public final public final throws decl_stmt java.util.ArrayList < = new <> decl_stmt java.lang.StringBuilder = new decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute = decl_stmt org.apache.lucene.analysis.tokenattributes.OffsetAttribute = decl_stmt org.apache.lucene.search.highlight.TextFragment = new call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() if instanceof decl_stmt org.apache.lucene.analysis.TokenStream = call org.apache.lucene.search.Scorer.init(TokenStream) call org.apache.lucene.search.Scorer.init(TokenStream) call org.apache.lucene.search.Scorer.init(TokenStream) call org.apache.lucene.search.Scorer.init(TokenStream) call org.apache.lucene.search.Scorer.init(TokenStream) if != = call org.apache.lucene.search.Scorer.startFragment(TextFragment) call org.apache.lucene.search.Scorer.startFragment(TextFragment) call org.apache.lucene.search.Scorer.startFragment(TextFragment) call org.apache.lucene.search.Scorer.startFragment(TextFragment) call org.apache.lucene.search.Scorer.startFragment(TextFragment) call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() decl_stmt FragmentQueue = new try decl_stmt java.lang.String decl_stmt int decl_stmt int decl_stmt int = call Fragmenter.start() call Fragmenter.start() call Fragmenter.start() call Fragmenter.start() call Fragmenter.start() decl_stmt org.apache.lucene.search.highlight.TokenGroup = new for = && call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() < = if call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() > || call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() > throw new + call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() + + if call org.apache.lucene.search.highlight.TokenGroup.getNumTokens() call org.apache.lucene.search.highlight.TokenGroup.getNumTokens() call org.apache.lucene.search.highlight.TokenGroup.getNumTokens() call org.apache.lucene.search.highlight.TokenGroup.getNumTokens() call org.apache.lucene.search.highlight.TokenGroup.getNumTokens() > && call org.apache.lucene.search.highlight.TokenGroup.isDistinct() call org.apache.lucene.search.highlight.TokenGroup.isDistinct() call org.apache.lucene.search.highlight.TokenGroup.isDistinct() call org.apache.lucene.search.highlight.TokenGroup.isDistinct() call org.apache.lucene.search.highlight.TokenGroup.isDistinct() = call org.apache.lucene.search.highlight.TokenGroup.getStartOffset() call org.apache.lucene.search.highlight.TokenGroup.getStartOffset() call org.apache.lucene.search.highlight.TokenGroup.getStartOffset() call org.apache.lucene.search.highlight.TokenGroup.getStartOffset() call org.apache.lucene.search.highlight.TokenGroup.getStartOffset() = call org.apache.lucene.search.highlight.TokenGroup.getEndOffset() call org.apache.lucene.search.highlight.TokenGroup.getEndOffset() call org.apache.lucene.search.highlight.TokenGroup.getEndOffset() call org.apache.lucene.search.highlight.TokenGroup.getEndOffset() call org.apache.lucene.search.highlight.TokenGroup.getEndOffset() = decl_stmt java.lang.String = call Formatter.highlightTerm() call Formatter.highlightTerm() call Formatter.highlightTerm() call Formatter.highlightTerm() call Formatter.highlightTerm() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call org.apache.lucene.search.highlight.TokenGroup.clear() call org.apache.lucene.search.highlight.TokenGroup.clear() call org.apache.lucene.search.highlight.TokenGroup.clear() call org.apache.lucene.search.highlight.TokenGroup.clear() call org.apache.lucene.search.highlight.TokenGroup.clear() if call org.apache.lucene.search.highlight.Fragmenter.isNewFragment() call org.apache.lucene.search.highlight.Fragmenter.isNewFragment() call org.apache.lucene.search.highlight.Fragmenter.isNewFragment() call org.apache.lucene.search.highlight.Fragmenter.isNewFragment() call org.apache.lucene.search.highlight.Fragmenter.isNewFragment() call org.apache.lucene.search.highlight.TextFragment.setScore(float) call org.apache.lucene.search.highlight.TextFragment.setScore(float) call org.apache.lucene.search.highlight.TextFragment.setScore(float) call org.apache.lucene.search.highlight.TextFragment.setScore(float) call org.apache.lucene.search.highlight.TextFragment.setScore(float) call Scorer.getFragmentScore() call Scorer.getFragmentScore() call Scorer.getFragmentScore() call Scorer.getFragmentScore() call Scorer.getFragmentScore() = call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() = new call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call org.apache.lucene.search.Scorer.startFragment(TextFragment) call org.apache.lucene.search.Scorer.startFragment(TextFragment) call org.apache.lucene.search.Scorer.startFragment(TextFragment) call org.apache.lucene.search.Scorer.startFragment(TextFragment) call org.apache.lucene.search.Scorer.startFragment(TextFragment) call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call org.apache.lucene.search.highlight.TokenGroup.addToken(float) call org.apache.lucene.search.highlight.TokenGroup.addToken(float) call org.apache.lucene.search.highlight.TokenGroup.addToken(float) call org.apache.lucene.search.highlight.TokenGroup.addToken(float) call org.apache.lucene.search.highlight.TokenGroup.addToken(float) call org.apache.lucene.search.Scorer.getTokenScore() call org.apache.lucene.search.Scorer.getTokenScore() call org.apache.lucene.search.Scorer.getTokenScore() call org.apache.lucene.search.Scorer.getTokenScore() call org.apache.lucene.search.Scorer.getTokenScore() call org.apache.lucene.search.highlight.TextFragment.setScore(float) call org.apache.lucene.search.highlight.TextFragment.setScore(float) call org.apache.lucene.search.highlight.TextFragment.setScore(float) call org.apache.lucene.search.highlight.TextFragment.setScore(float) call org.apache.lucene.search.highlight.TextFragment.setScore(float) call Scorer.getFragmentScore() call Scorer.getFragmentScore() call Scorer.getFragmentScore() call Scorer.getFragmentScore() call Scorer.getFragmentScore() if call org.apache.lucene.search.highlight.TokenGroup.getNumTokens() call org.apache.lucene.search.highlight.TokenGroup.getNumTokens() call org.apache.lucene.search.highlight.TokenGroup.getNumTokens() call org.apache.lucene.search.highlight.TokenGroup.getNumTokens() call org.apache.lucene.search.highlight.TokenGroup.getNumTokens() > = call org.apache.lucene.search.highlight.TokenGroup.getStartOffset() call org.apache.lucene.search.highlight.TokenGroup.getStartOffset() call org.apache.lucene.search.highlight.TokenGroup.getStartOffset() call org.apache.lucene.search.highlight.TokenGroup.getStartOffset() call org.apache.lucene.search.highlight.TokenGroup.getStartOffset() = call org.apache.lucene.search.highlight.TokenGroup.getEndOffset() call org.apache.lucene.search.highlight.TokenGroup.getEndOffset() call org.apache.lucene.search.highlight.TokenGroup.getEndOffset() call org.apache.lucene.search.highlight.TokenGroup.getEndOffset() call org.apache.lucene.search.highlight.TokenGroup.getEndOffset() = decl_stmt java.lang.String = call Formatter.highlightTerm() call Formatter.highlightTerm() call Formatter.highlightTerm() call Formatter.highlightTerm() call Formatter.highlightTerm() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = if < && <= call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() = call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() for < = call decl ArrayList.iterator() call decl ArrayList.iterator() call decl ArrayList.iterator() call decl ArrayList.iterator() call decl ArrayList.iterator() = call FragmentQueue.insertWithOverflow() call FragmentQueue.insertWithOverflow() call FragmentQueue.insertWithOverflow() call FragmentQueue.insertWithOverflow() call FragmentQueue.insertWithOverflow() decl_stmt org.apache.lucene.search.highlight.TextFragment = new call FragmentQueue.size() call FragmentQueue.size() call FragmentQueue.size() call FragmentQueue.size() call FragmentQueue.size() for = - >= -- = call FragmentQueue.pop() call FragmentQueue.pop() call FragmentQueue.pop() call FragmentQueue.pop() call FragmentQueue.pop() if decl_stmt java.util.ArrayList < = new <> for = < ++ if != && > call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() = call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new return finally if != try catch int int boolean TextFragment TextFragment int int private private decl_stmt boolean if > do = for = < ++ if == continue for = < ++ if == continue if == break decl_stmt org.apache.lucene.search.highlight.TextFragment = decl_stmt org.apache.lucene.search.highlight.TextFragment = decl_stmt int = decl_stmt int = decl_stmt int decl_stmt int if = = = = else if = = = = if != if call org.apache.lucene.search.highlight.TextFragment.getScore() call org.apache.lucene.search.highlight.TextFragment.getScore() call org.apache.lucene.search.highlight.TextFragment.getScore() call org.apache.lucene.search.highlight.TextFragment.getScore() call org.apache.lucene.search.highlight.TextFragment.getScore() > call org.apache.lucene.search.highlight.TextFragment.getScore() call org.apache.lucene.search.highlight.TextFragment.getScore() call org.apache.lucene.search.highlight.TextFragment.getScore() call org.apache.lucene.search.highlight.TextFragment.getScore() call org.apache.lucene.search.highlight.TextFragment.getScore() = = else = = call TextFragment.merge() call TextFragment.merge() call TextFragment.merge() call TextFragment.merge() call TextFragment.merge() = = = String StringBuilder public final public final throws decl_stmt java.lang.String = decl_stmt java.lang.StringBuilder = new for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public return public public = public public return public public = public public return public public = public public return public public =