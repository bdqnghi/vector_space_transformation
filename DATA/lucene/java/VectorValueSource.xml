org.apache.lucene.queries.function.valuesource org.apache.lucene.index.LeafReaderContext import org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.search.IndexSearcher import java.io.IOException import java.util.List import java.util.Map import class org.apache.lucene.queries.function.valuesource.VectorValueSource super super extends decl List public < public < return public public return call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() public public return boolean decl FunctionValues StringBuilder FunctionValues FunctionValues int public public throws decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if == decl_stmt org.apache.lucene.queries.function.FunctionValues final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.queries.function.FunctionValues final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return new public public = call org.apache.lucene.queries.function.FunctionValues.byteVal(int) call org.apache.lucene.queries.function.FunctionValues.byteVal(int) call org.apache.lucene.queries.function.FunctionValues.byteVal(int) call org.apache.lucene.queries.function.FunctionValues.byteVal(int) call org.apache.lucene.queries.function.FunctionValues.byteVal(int) = call org.apache.lucene.queries.function.FunctionValues.byteVal(int) call org.apache.lucene.queries.function.FunctionValues.byteVal(int) call org.apache.lucene.queries.function.FunctionValues.byteVal(int) call org.apache.lucene.queries.function.FunctionValues.byteVal(int) call org.apache.lucene.queries.function.FunctionValues.byteVal(int) public public = call org.apache.lucene.queries.function.FunctionValues.shortVal(int) call org.apache.lucene.queries.function.FunctionValues.shortVal(int) call org.apache.lucene.queries.function.FunctionValues.shortVal(int) call org.apache.lucene.queries.function.FunctionValues.shortVal(int) call org.apache.lucene.queries.function.FunctionValues.shortVal(int) = call org.apache.lucene.queries.function.FunctionValues.shortVal(int) call org.apache.lucene.queries.function.FunctionValues.shortVal(int) call org.apache.lucene.queries.function.FunctionValues.shortVal(int) call org.apache.lucene.queries.function.FunctionValues.shortVal(int) call org.apache.lucene.queries.function.FunctionValues.shortVal(int) public public = call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) = call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) call org.apache.lucene.queries.function.FunctionValues.intVal(int,int) public public = call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) = call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) public public = call org.apache.lucene.queries.function.FunctionValues.floatVal(int) call org.apache.lucene.queries.function.FunctionValues.floatVal(int) call org.apache.lucene.queries.function.FunctionValues.floatVal(int) call org.apache.lucene.queries.function.FunctionValues.floatVal(int) call org.apache.lucene.queries.function.FunctionValues.floatVal(int) = call org.apache.lucene.queries.function.FunctionValues.floatVal(int) call org.apache.lucene.queries.function.FunctionValues.floatVal(int) call org.apache.lucene.queries.function.FunctionValues.floatVal(int) call org.apache.lucene.queries.function.FunctionValues.floatVal(int) call org.apache.lucene.queries.function.FunctionValues.floatVal(int) public public = call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) = call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) public public = call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) = call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) call org.apache.lucene.queries.function.FunctionValues.strVal(int,String) public public return + + call FunctionValues.toString() call FunctionValues.toString() call FunctionValues.toString() call FunctionValues.toString() call FunctionValues.toString() + + call FunctionValues.toString() call FunctionValues.toString() call FunctionValues.toString() call FunctionValues.toString() call FunctionValues.toString() + decl_stmt org.apache.lucene.queries.function.FunctionValues final final final = new for = < ++ = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return new public public for = < ++ = public public for = < ++ = public public for = < ++ = public public for = < ++ = public public for = < ++ = public public for = < ++ = public public for = < ++ = public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt boolean = for : if = else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public = = public public = = public public = = public public = = public public = = public public = = public public = = public public return + + + + + public public for = < ++ = public public for = < ++ = public public for = < ++ = public public for = < ++ = public public for = < ++ = public public for = < ++ = public public for = < ++ = StringBuilder boolean public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt boolean = for : if = else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public throws for : StringBuilder boolean public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt boolean = for : if = else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() VectorValueSource public public if == return if ! instanceof return decl_stmt org.apache.lucene.queries.function.valuesource.VectorValueSource = return call decl List.equals() call decl List.equals() call decl List.equals() call decl List.equals() call decl List.equals() public public return call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() call decl List.hashCode()