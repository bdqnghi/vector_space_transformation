org.apache.lucene.analysis.synonym java.io.BufferedReader import java.io.IOException import java.io.LineNumberReader import java.io.Reader import java.text.ParseException import java.util.ArrayList import org.apache.lucene.analysis.Analyzer import org.apache.lucene.util.CharsRef import org.apache.lucene.util.CharsRefBuilder import class org.apache.lucene.analysis.synonym.SolrSynonymParser super super extends boolean ParseException LineNumberReader public public throws decl_stmt java.io.LineNumberReader = new try catch decl_stmt org.apache.lucene.queryparser.surround.parser.ParseException = new + call java.io.LineNumberReader.getLineNumber() call java.io.LineNumberReader.getLineNumber() call java.io.LineNumberReader.getLineNumber() call java.io.LineNumberReader.getLineNumber() call java.io.LineNumberReader.getLineNumber() call ParseException.initCause() call ParseException.initCause() call ParseException.initCause() call ParseException.initCause() call ParseException.initCause() throw finally call LineNumberReader.close() call LineNumberReader.close() call LineNumberReader.close() call LineNumberReader.close() call LineNumberReader.close() decl CharsRef String String decl CharsRef private private throws decl_stmt java.lang.String = while = != if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == || call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == continue decl_stmt java.lang.String = if > if != throw new decl_stmt java.lang.String = decl_stmt org.apache.lucene.util.CharsRef = new for = < ++ = new decl_stmt java.lang.String = decl_stmt org.apache.lucene.util.CharsRef = new for = < ++ = new for = < ++ for = < ++ else decl_stmt java.lang.String = decl_stmt org.apache.lucene.util.CharsRef = new for = < ++ = new if for = < ++ for = < ++ if != else for = < ++ StringBuilder char decl ArrayList int private static private static decl_stmt java.util.ArrayList < = new <> decl_stmt java.lang.StringBuilder = new decl_stmt int = = while < if if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() = new += continue decl_stmt char = ++ if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if >= break = ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() StringBuilder char private private if >= decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt char = if == && < - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) ++ else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return