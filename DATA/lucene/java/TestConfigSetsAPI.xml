org.apache.solr.cloud java.io.ByteArrayInputStream import java.io.File import java.io.InputStreamReader import java.nio.charset.StandardCharsets import java.util.Collection import java.util.HashSet import java.util.Iterator import java.util.Map import java.util.Properties import java.util.Set import com.google.common.collect.ImmutableMap import org.apache.commons.io.FileUtils import org.apache.solr.SolrTestCaseJ4 import org.apache.solr.client.solrj.SolrClient import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.request.ConfigSetAdminRequest import org.apache.solr.client.solrj.request.ConfigSetAdminRequest.Create import org.apache.solr.client.solrj.request.ConfigSetAdminRequest.Delete import org.apache.solr.client.solrj.request.ConfigSetAdminRequest.List import org.apache.solr.client.solrj.response.ConfigSetAdminResponse import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkConfigManager import org.apache.solr.common.params.ConfigSetParams import org.apache.solr.common.params.ConfigSetParams.ConfigSetAction import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.Utils import org.apache.solr.core.ConfigSetProperties import org.apache.zookeeper.KeeperException import org.junit.After import org.junit.Assert import org.junit.Before import org.junit.Test import static static org.apache.solr.cloud.OverseerConfigSetMessageHandler.BASE_CONFIGSET import static static org.apache.solr.common.params.CommonParams.NAME import static static org.apache.solr.core.ConfigSetProperties.DEFAULT_FILENAME import class org.apache.solr.cloud.TestConfigSetsAPI super super extends MiniSolrCloudCluster public public throws = new public public throws call org.apache.solr.cloud.MiniSolrCloudCluster.shutdown() call org.apache.solr.cloud.MiniSolrCloudCluster.shutdown() call org.apache.solr.cloud.MiniSolrCloudCluster.shutdown() call org.apache.solr.cloud.MiniSolrCloudCluster.shutdown() call org.apache.solr.cloud.MiniSolrCloudCluster.shutdown() CreateNoErrorChecking CreateNoErrorChecking String Create SolrClient Create File public public throws decl_stmt java.lang.String final final = call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() decl_stmt org.apache.solr.client.solrj.SolrClient final final = decl_stmt File final final = call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) decl_stmt CreateNoErrorChecking = new call CreateNoErrorChecking.setAction() call CreateNoErrorChecking.setAction() call CreateNoErrorChecking.setAction() call CreateNoErrorChecking.setAction() call CreateNoErrorChecking.setAction() decl_stmt CreateNoErrorChecking = new call CreateNoErrorChecking.setConfigSetName() call CreateNoErrorChecking.setConfigSetName() call CreateNoErrorChecking.setConfigSetName() call CreateNoErrorChecking.setConfigSetName() call CreateNoErrorChecking.setConfigSetName() decl_stmt Create = new call Create.setConfigSetName() call Create.setConfigSetName() call Create.setConfigSetName() call Create.setConfigSetName() call Create.setConfigSetName() decl_stmt Create = new call Create.setConfigSetName() call Create.setConfigSetName() call Create.setConfigSetName() call Create.setConfigSetName() call Create.setConfigSetName() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() public public throws > > > > File File private private < throws decl_stmt File final final = decl_stmt File final final = call File.deleteOnExit() call File.deleteOnExit() call File.deleteOnExit() call File.deleteOnExit() call File.deleteOnExit() if != new call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) Create String Properties ZkConfigManager SolrClient SolrZkClient ConfigSetAdminResponse private private < < throws decl_stmt java.lang.String final final = call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() decl_stmt org.apache.solr.client.solrj.SolrClient final final = decl_stmt org.apache.solr.common.cloud.SolrZkClient = new call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() try decl_stmt org.apache.solr.common.cloud.ZkConfigManager = new call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) decl_stmt Create = new call Create.setBaseConfigSetName() call Create.setBaseConfigSetName() call Create.setBaseConfigSetName() call Create.setBaseConfigSetName() call Create.setBaseConfigSetName() if != decl_stmt java.util.Properties = new call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Create.setNewConfigSetProperties() call Create.setNewConfigSetProperties() call Create.setNewConfigSetProperties() call Create.setNewConfigSetProperties() call Create.setNewConfigSetProperties() decl_stmt org.apache.solr.client.solrj.response.ConfigSetAdminResponse = call Create.process() call Create.process() call Create.process() call Create.process() call Create.process() call ConfigSetAdminResponse.getResponse() call ConfigSetAdminResponse.getResponse() call ConfigSetAdminResponse.getResponse() call ConfigSetAdminResponse.getResponse() call ConfigSetAdminResponse.getResponse() call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) finally call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() InputStreamReader decl byte private private throws decl_stmt byte = try = catch if != decl_stmt InputStreamReader = new new try return finally call InputStreamReader.close() call InputStreamReader.close() call InputStreamReader.close() call InputStreamReader.close() call InputStreamReader.close() return decl Map String NamedList String decl Iterator private private < < throws decl_stmt org.apache.solr.common.util.NamedList = + + + + if == && == return if != for < : call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() if != for < : call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() decl_stmt java.util.Iterator < < = call org.apache.solr.common.util.NamedList.iterator() call org.apache.solr.common.util.NamedList.iterator() call org.apache.solr.common.util.NamedList.iterator() call org.apache.solr.common.util.NamedList.iterator() call org.apache.solr.common.util.NamedList.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.util.Map < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.lang.String = != call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() : decl_stmt java.lang.String = != call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() : if != call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() else if != call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() else assert File DeleteNoErrorChecking String File SolrClient public public throws decl_stmt java.lang.String final final = call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() decl_stmt org.apache.solr.client.solrj.SolrClient final final = decl_stmt File final final = decl_stmt File final final = call File.deleteOnExit() call File.deleteOnExit() call File.deleteOnExit() call File.deleteOnExit() call File.deleteOnExit() new > call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) decl_stmt DeleteNoErrorChecking = new call DeleteNoErrorChecking.setConfigSetName() call DeleteNoErrorChecking.setConfigSetName() call DeleteNoErrorChecking.setConfigSetName() call DeleteNoErrorChecking.setConfigSetName() call DeleteNoErrorChecking.setConfigSetName() call DeleteNoErrorChecking.setConfigSetName() call DeleteNoErrorChecking.setConfigSetName() call DeleteNoErrorChecking.setConfigSetName() call DeleteNoErrorChecking.setConfigSetName() call DeleteNoErrorChecking.setConfigSetName() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() private private throws try catch + + + String String ZkConfigManager SolrClient SolrZkClient ConfigSetAdminResponse File Delete public public throws decl_stmt java.lang.String final final = call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() decl_stmt org.apache.solr.client.solrj.SolrClient final final = decl_stmt File final final = decl_stmt java.lang.String final final = call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) decl_stmt org.apache.solr.common.cloud.SolrZkClient = new call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() try decl_stmt org.apache.solr.common.cloud.ZkConfigManager = new call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) decl_stmt Delete = new call Delete.setConfigSetName() call Delete.setConfigSetName() call Delete.setConfigSetName() call Delete.setConfigSetName() call Delete.setConfigSetName() decl_stmt org.apache.solr.client.solrj.response.ConfigSetAdminResponse = call Delete.process() call Delete.process() call Delete.process() call Delete.process() call Delete.process() call ConfigSetAdminResponse.getResponse() call ConfigSetAdminResponse.getResponse() call ConfigSetAdminResponse.getResponse() call ConfigSetAdminResponse.getResponse() call ConfigSetAdminResponse.getResponse() call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) call org.apache.solr.common.cloud.ZkConfigManager.configExists(String) finally call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() decl List decl Set List String SolrClient SolrZkClient decl ConfigSetAdminResponse decl Collection File public public throws decl_stmt java.lang.String final final = call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() call org.apache.solr.cloud.MiniSolrCloudCluster.getJettySolrRunners() decl_stmt org.apache.solr.client.solrj.SolrClient final final = decl_stmt org.apache.solr.common.cloud.SolrZkClient = new call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() call org.apache.solr.cloud.MiniSolrCloudCluster.getZkServer() try decl_stmt java.util.List = new decl_stmt java.util.List = call List.process() call List.process() call List.process() call List.process() call List.process() decl_stmt java.util.Collection < = call decl ConfigSetAdminResponse.getConfigSets() call decl ConfigSetAdminResponse.getConfigSets() call decl ConfigSetAdminResponse.getConfigSets() call decl ConfigSetAdminResponse.getConfigSets() call decl ConfigSetAdminResponse.getConfigSets() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt File final final = decl_stmt java.util.Set < = new < for = < ++ decl_stmt java.lang.String = + call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call org.apache.solr.cloud.MiniSolrCloudCluster.uploadConfigDir(File,String) call File.add() call File.add() call File.add() call File.add() call File.add() = call List.process() call List.process() call List.process() call List.process() call List.process() = call decl ConfigSetAdminResponse.getConfigSets() call decl ConfigSetAdminResponse.getConfigSets() call decl ConfigSetAdminResponse.getConfigSets() call decl ConfigSetAdminResponse.getConfigSets() call decl ConfigSetAdminResponse.getConfigSets() call File.size() call File.size() call File.size() call File.size() call File.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call File.containsAll() call File.containsAll() call File.containsAll() call File.containsAll() call File.containsAll() finally call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() private private < return new new public public return ModifiableSolrParams public public decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new if != call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) if != call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) if != call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) return public public return ModifiableSolrParams public public decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new if != call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) if != call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) return