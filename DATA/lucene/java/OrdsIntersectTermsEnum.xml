org.apache.lucene.codecs.blocktreeords java.io.IOException import org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.Output import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.TermState import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.IndexInput import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.StringHelper import org.apache.lucene.util.automaton.CompiledAutomaton import org.apache.lucene.util.automaton.RunAutomaton import org.apache.lucene.util.fst.FST import class org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnum super super extends BytesRef decl FST decl FST decl BytesReader CompiledAutomaton IndexInput RunAutomaton decl OrdsIntersectTermsEnumFrame OrdsIntersectTermsEnumFrame OrdsFieldReader private private = == : return public public throws call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() return call OrdsIntersectTermsEnumFrame.termState() call OrdsIntersectTermsEnumFrame.termState() call OrdsIntersectTermsEnumFrame.termState() call OrdsIntersectTermsEnumFrame.termState() call OrdsIntersectTermsEnumFrame.termState() call OrdsIntersectTermsEnumFrame.termState() call OrdsIntersectTermsEnumFrame.termState() call OrdsIntersectTermsEnumFrame.termState() call OrdsIntersectTermsEnumFrame.termState() decl OrdsIntersectTermsEnumFrame private private throws if >= decl_stmt org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame final final final = new + for = < ++ = new = assert == return decl FST private < private < if >= decl_stmt org.apache.lucene.util.fst.FST final final final final final final final < = new + for = < ++ = new <> = return Output decl FST int int OrdsIntersectTermsEnumFrame private private throws decl_stmt org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame final final = == : + = = = + call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.setState(int) call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.setState(int) call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.setState(int) call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.setState(int) call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.setState(int) decl_stmt org.apache.lucene.util.fst.FST < = decl_stmt int = assert > decl_stmt Output = while < decl_stmt int final final = & = call decl BytesReader.index() call decl BytesReader.index() call decl BytesReader.index() call decl BytesReader.index() call decl BytesReader.index() call decl BytesReader.index() call decl BytesReader.index() call decl BytesReader.index() call decl BytesReader.index() + assert != = ++ = = assert call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.load(Output) call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.load(Output) call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.load(Output) call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.load(Output) call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.load(Output) return public public return public public throws call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() return public public throws call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() return public public throws call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.decodeMetaData() return call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() call decl BytesReader.parent() int private private decl_stmt int = for = < ++ = call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) + & assert != - return decl FST int int int int long int boolean private private throws assert == if < = decl_stmt org.apache.lucene.util.fst.FST < = assert == for = <= ++ while decl_stmt int final final = call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() decl_stmt int final final = decl_stmt int final final = decl_stmt long final final = decl_stmt int final final = decl_stmt boolean final final = call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.next() = + if < = if && = break else decl_stmt int final final = call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() if < if == if ! call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.loadNextFloorBlock() continue else return continue else if == return else -- = = = call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() call OrdsIntersectTermsEnumFrame.suffixesReader() = = + return assert decl byte int decl byte int long int decl byte int int int int int int boolean public public throws while while == if ! call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.loadNextFloorBlock() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.loadNextFloorBlock() else if == return decl_stmt long final final = = - assert == decl_stmt boolean final final = call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.next() call org.apache.lucene.codecs.blocktreeords.OrdsIntersectTermsEnumFrame.next() if != decl_stmt int final final = & while > if >= - = = continue continue ++ call CompiledAutomaton.automaton() call CompiledAutomaton.automaton() call CompiledAutomaton.automaton() call CompiledAutomaton.automaton() call CompiledAutomaton.automaton() call CompiledAutomaton.automaton() call CompiledAutomaton.automaton() call CompiledAutomaton.automaton() call CompiledAutomaton.automaton() = if != && ! decl_stmt int final final = + if < continue continue decl_stmt byte final final final = decl_stmt byte final final final = decl_stmt int final final = - assert == decl_stmt int decl_stmt int = if > decl_stmt byte final final final = decl_stmt int = - assert >= decl_stmt int final final = while < if ++ != ++ continue continue = else = + - decl_stmt int final final = while < if ++ != ++ continue continue decl_stmt int = for = < ++ = call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) + & if == - continue continue else if = else if call RunAutomaton.isAccept() call RunAutomaton.isAccept() call RunAutomaton.isAccept() call RunAutomaton.isAccept() call RunAutomaton.isAccept() assert == || call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() > : + call OrdsFieldReader.utf8ToString() call OrdsFieldReader.utf8ToString() call OrdsFieldReader.utf8ToString() call OrdsFieldReader.utf8ToString() call OrdsFieldReader.utf8ToString() + + call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() return else int private private decl_stmt int final final = + if < = = public public throw new public public throw new public public throw new public public throw new