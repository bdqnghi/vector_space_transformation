org.apache.lucene.search.vectorhighlight java.io.IOException import java.util.Collection import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.LinkedHashSet import java.util.List import java.util.Map import java.util.Set import org.apache.lucene.index.IndexReader import org.apache.lucene.index.Term import org.apache.lucene.queries.CustomScoreQuery import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.BoostQuery import org.apache.lucene.search.ConstantScoreQuery import org.apache.lucene.search.DisjunctionMaxQuery import org.apache.lucene.search.MultiTermQuery import org.apache.lucene.search.PhraseQuery import org.apache.lucene.search.Query import org.apache.lucene.search.TermQuery import org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo import class org.apache.lucene.search.vectorhighlight.FieldQuery int int boolean decl Map decl Map PhraseQuery Query Query DisjunctionMaxQuery BooleanQuery Query < throws while instanceof decl_stmt org.apache.lucene.search.BoostQuery = = call BooleanQuery.getQuery() call BooleanQuery.getQuery() call BooleanQuery.getQuery() call BooleanQuery.getQuery() call BooleanQuery.getQuery() *= call BooleanQuery.getBoost() call BooleanQuery.getBoost() call BooleanQuery.getBoost() call BooleanQuery.getBoost() call BooleanQuery.getBoost() if instanceof decl_stmt org.apache.lucene.search.BooleanQuery = for : if ! else if instanceof decl_stmt org.apache.lucene.search.DisjunctionMaxQuery = for : else if instanceof if != = new if ! else if instanceof decl_stmt org.apache.lucene.search.PhraseQuery = if call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() == = new call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() if != = new else if instanceof decl_stmt org.apache.lucene.search.Query final final = if != else if instanceof decl_stmt org.apache.lucene.search.Query final final = if != else if != decl_stmt org.apache.lucene.search.Query = decl_stmt org.apache.lucene.search.Query if instanceof = new else = call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) if != decl Set float BoostQuery Query Query float < < < decl_stmt java.util.Set < = new <> for < = decl_stmt org.apache.lucene.search.Query = call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt float = while instanceof decl_stmt org.apache.lucene.search.BoostQuery = *= call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() = call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() if ! instanceof continue for < = decl_stmt org.apache.lucene.search.Query = decl_stmt float = while instanceof decl_stmt org.apache.lucene.search.BoostQuery = *= call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() = call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() if ! instanceof continue return decl Term decl Term private private < if != return decl_stmt org.apache.lucene.index.Term = decl_stmt org.apache.lucene.index.Term = if && ! return decl Builder boolean decl PhraseQuery private private < for = < ++ decl_stmt boolean = for = < ++ if - < && ! - = break if && - < decl_stmt org.apache.lucene.util.fst.Builder = new for : call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() for = - < ++ call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() new call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() decl_stmt org.apache.lucene.search.Query = call decl PhraseQuery.build() call decl PhraseQuery.build() call decl PhraseQuery.build() call decl PhraseQuery.build() call decl PhraseQuery.build() if != = new if ! QueryPhraseMap String decl_stmt java.lang.String = decl_stmt QueryPhraseMap = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return PhraseQuery decl Term private private if ! return while instanceof = if instanceof return else if instanceof decl_stmt org.apache.lucene.search.PhraseQuery = decl_stmt org.apache.lucene.index.Term = call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() return else if instanceof return else throw new + + decl Set BooleanQuery < throws for : while instanceof = decl_stmt java.util.Set < = if instanceof call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else if instanceof for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else if instanceof && != decl_stmt org.apache.lucene.search.BooleanQuery = for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else throw new + + decl Set String private < private < decl_stmt java.lang.String = decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return < < return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() : QueryPhraseMap public public decl_stmt QueryPhraseMap = return == : call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() QueryPhraseMap public public final final final < decl_stmt QueryPhraseMap = if == return return call QueryPhraseMap.searchPhrase() call QueryPhraseMap.searchPhrase() call QueryPhraseMap.searchPhrase() call QueryPhraseMap.searchPhrase() call QueryPhraseMap.searchPhrase() private private return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() : return ++ QueryPhraseMap decl_stmt QueryPhraseMap = call QueryPhraseMap.markTerminal() call QueryPhraseMap.markTerminal() call QueryPhraseMap.markTerminal() call QueryPhraseMap.markTerminal() call QueryPhraseMap.markTerminal() QueryPhraseMap private private < decl_stmt QueryPhraseMap = if == = new return decl Map PhraseQuery decl Term QueryPhraseMap BoostQuery float decl_stmt float = while instanceof decl_stmt org.apache.lucene.search.BoostQuery = = call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() = call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() if instanceof else if instanceof decl_stmt org.apache.lucene.search.PhraseQuery = decl_stmt org.apache.lucene.index.Term = call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() decl_stmt java.util.Map < = decl_stmt QueryPhraseMap = for : = = call QueryPhraseMap.markTerminal() call QueryPhraseMap.markTerminal() call QueryPhraseMap.markTerminal() call QueryPhraseMap.markTerminal() call QueryPhraseMap.markTerminal() call org.apache.lucene.search.PhraseQuery.getSlop() call org.apache.lucene.search.PhraseQuery.getSlop() call org.apache.lucene.search.PhraseQuery.getSlop() call org.apache.lucene.search.PhraseQuery.getSlop() call org.apache.lucene.search.PhraseQuery.getSlop() else throw new + + public public return private private private private = = = = public public return public public return public public return public public return QueryPhraseMap public public final final final < decl_stmt QueryPhraseMap = for : = call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() call QueryPhraseMap.subMap() if == return return call QueryPhraseMap.isValidTermOrPhrase() call QueryPhraseMap.isValidTermOrPhrase() call QueryPhraseMap.isValidTermOrPhrase() call QueryPhraseMap.isValidTermOrPhrase() call QueryPhraseMap.isValidTermOrPhrase() : int int public public final final final < if ! return if == return decl_stmt int = for = < ++ decl_stmt int = if - - > return = return