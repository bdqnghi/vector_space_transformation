org.apache.lucene.codecs.blockterms java.io.IOException import java.util.Collection import java.util.Collections import java.util.HashMap import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.index.CorruptIndexException import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.SegmentReadState import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.fst.BytesRefFSTEnum import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.PositiveIntOutputs import class org.apache.lucene.codecs.blockterms.VariableGapTermsIndexReader super super extends decl HashMap PositiveIntOutputs public public if == return else return public public throws = return public public throws = if == return - else return public public throw new public public throw new public public return public public return == : public < public < if == return else return public public return FieldIndexData public public decl_stmt FieldIndexData final final = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() if == return else return new public public throws long private private throws - - decl_stmt long = long public public decl_stmt long = for : call decl HashMap.values() call decl HashMap.values() call decl HashMap.values() call decl HashMap.values() call decl HashMap.values() += return public < public < return public public return + + call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() +