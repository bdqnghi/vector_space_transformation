org.apache.solr.update.processor java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.List import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.tika.language.LanguageIdentifier import org.apache.solr.common.SolrInputDocument import org.slf4j.Logger import org.slf4j.LoggerFactory import java.util.Collection import class org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessor super super extends Logger String DetectedLanguage Double Double decl List LanguageIdentifier protected < protected < decl_stmt java.util.List < = new <> decl_stmt java.lang.String = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() != decl_stmt LanguageIdentifier = new decl_stmt java.lang.Double = call LanguageIdentifier.toString() call LanguageIdentifier.toString() call LanguageIdentifier.toString() call LanguageIdentifier.toString() call LanguageIdentifier.toString() decl_stmt java.lang.Double = - * = < : decl_stmt org.apache.solr.update.processor.DetectedLanguage = new call LanguageIdentifier.getLanguage() call LanguageIdentifier.getLanguage() call LanguageIdentifier.getLanguage() call LanguageIdentifier.getLanguage() call LanguageIdentifier.getLanguage() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + call org.apache.solr.update.processor.DetectedLanguage.getCertainty() call org.apache.solr.update.processor.DetectedLanguage.getCertainty() call org.apache.solr.update.processor.DetectedLanguage.getCertainty() call org.apache.solr.update.processor.DetectedLanguage.getCertainty() call org.apache.solr.update.processor.DetectedLanguage.getCertainty() + + call LanguageIdentifier.toString() call LanguageIdentifier.toString() call LanguageIdentifier.toString() call LanguageIdentifier.toString() call LanguageIdentifier.toString() + else call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return StringBuilder decl Collection String protected protected decl_stmt java.lang.StringBuilder = new for : call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + if decl_stmt java.util.Collection < = if != for : if instanceof decl_stmt java.lang.String = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() break else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() int decl Collection private private decl_stmt int = for : decl_stmt java.util.Collection < = for : if instanceof += = return