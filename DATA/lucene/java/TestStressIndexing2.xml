org.apache.lucene.index java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.Comparator import java.util.HashMap import java.util.Iterator import java.util.List import java.util.Map import java.util.Random import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.FieldType import org.apache.lucene.document.TextField import org.apache.lucene.index.IndexWriterConfig.OpenMode import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.TermQuery import org.apache.lucene.store.Directory import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import class org.apache.lucene.index.TestStressIndexing2 super super extends int Term decl Comparator int int int decl IndexingThread boolean int DocsAndWriter Directory DirectoryReader public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt DocsAndWriter = decl_stmt org.apache.lucene.index.DirectoryReader = call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call DocsAndWriter.writer() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() Directory Directory decl Map boolean public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.store.Directory = decl_stmt boolean = decl_stmt java.util.Map < = call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() Directory Directory int boolean decl Map int int int public public throws decl_stmt int = for = < ++ if + = = + = + decl_stmt boolean = ++ decl_stmt int = + decl_stmt int = + decl_stmt int = + decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.store.Directory = if + + + + + + + + + + + + + decl_stmt java.util.Map < = if if call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() public public return LogMergePolicy decl Map IndexingThread IndexWriter DocsAndWriter public public throws decl_stmt java.util.Map < = new <> decl_stmt org.apache.lucene.index.IndexWriter = new call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) decl_stmt org.apache.lucene.index.LogMergePolicy = call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call LogMergePolicy.setNoCFSRatio() call LogMergePolicy.setNoCFSRatio() call LogMergePolicy.setNoCFSRatio() call LogMergePolicy.setNoCFSRatio() call LogMergePolicy.setNoCFSRatio() call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) = new for = < ++ decl_stmt IndexingThread = new = = * = = = for = < ++ for = < ++ for = < ++ decl_stmt IndexingThread = synchronized call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() decl_stmt DocsAndWriter = new = = return LogMergePolicy decl Map IndexingThread IndexWriter public < public < throws decl_stmt java.util.Map < = new <> decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt org.apache.lucene.index.LogMergePolicy = call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call LogMergePolicy.setNoCFSRatio() call LogMergePolicy.setNoCFSRatio() call LogMergePolicy.setNoCFSRatio() call LogMergePolicy.setNoCFSRatio() call LogMergePolicy.setNoCFSRatio() call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) = new for = < ++ decl_stmt IndexingThread = new = = * = = = for = < ++ for = < ++ call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() for = < ++ decl_stmt IndexingThread = synchronized call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() return decl ArrayList Document decl Iterator IndexWriter Document public static public static < throws decl_stmt org.apache.lucene.index.IndexWriter = new new decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.apache.lucene.document.Document = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.util.ArrayList < = new <> call decl ArrayList.addAll() call decl ArrayList.addAll() call decl ArrayList.addAll() call decl ArrayList.addAll() call decl ArrayList.addAll() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() decl_stmt org.apache.lucene.document.Document = new for = < call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() ++ call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() DirectoryReader public public throws decl_stmt org.apache.lucene.index.DirectoryReader = call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() DirectoryReader DirectoryReader public public throws decl_stmt org.apache.lucene.index.DirectoryReader = decl_stmt org.apache.lucene.index.DirectoryReader = call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() Document LeafReader Bits private static private static throws for : decl_stmt org.apache.lucene.index.LeafReader = decl_stmt org.apache.lucene.util.Bits = call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() + for = < call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() ++ decl_stmt org.apache.lucene.document.Document = call LeafReader.document() call LeafReader.document() call LeafReader.document() call LeafReader.document() call LeafReader.document() if == || call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() + + + call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) else + + + call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) int private static private static throws decl_stmt int = while != && != && == = return Fields PostingsEnum PostingsEnum PostingsEnum decl long int int decl long BytesRef boolean int int decl Iterator int Terms TermsEnum String int decl int Terms Bits Bits Terms Fields Fields int Terms PostingsEnum Fields Fields decl Iterator int BytesRef int Terms TermsEnum Fields Bits PostingsEnum TermsEnum TermsEnum PostingsEnum public public throws if if != assert : + + + decl_stmt boolean = ! == && == decl_stmt int = new decl_stmt Fields final final = if == return decl_stmt org.apache.lucene.index.Terms final final = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() if == == || == return decl_stmt org.apache.lucene.index.TermsEnum final final = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.util.Bits final final = decl_stmt org.apache.lucene.util.Bits final final = decl_stmt Fields = decl_stmt org.apache.lucene.index.Terms = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() if call Fields.size() call Fields.size() call Fields.size() call Fields.size() call Fields.size() == || == decl_stmt org.apache.lucene.util.Bits = decl_stmt org.apache.lucene.index.PostingsEnum = while call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != = while != return decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = while decl_stmt org.apache.lucene.util.BytesRef = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == break = if call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) = else = if == == || == continue decl_stmt int = call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() != decl_stmt int = call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() = try catch + + + + + + + + + throw try catch + + + + + decl_stmt Fields = + if != decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = for : + + decl_stmt org.apache.lucene.index.Terms = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.util.BytesRef while = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != + call int.utf8ToString() call int.utf8ToString() call int.utf8ToString() call int.utf8ToString() call int.utf8ToString() + + call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) if call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() != decl_stmt int final final = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() + call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() + + for = < ++ + call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() else = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() != decl_stmt int final final = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() + call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() + + decl_stmt Fields = + if != decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = for : + + decl_stmt org.apache.lucene.index.Terms = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.util.BytesRef while = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != + call int.utf8ToString() call int.utf8ToString() call int.utf8ToString() call int.utf8ToString() call int.utf8ToString() + + call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) if != call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() != decl_stmt int final final = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() + call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() + + for = < ++ + call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() else = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() != decl_stmt int final final = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() + call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() + + throw decl_stmt Fields final final = decl_stmt java.util.Iterator final final final < = call Fields.iterator() call Fields.iterator() call Fields.iterator() call Fields.iterator() call Fields.iterator() decl_stmt Fields final final = decl_stmt java.util.Iterator final final final < = call Fields.iterator() call Fields.iterator() call Fields.iterator() call Fields.iterator() call Fields.iterator() decl_stmt java.lang.String = = decl_stmt org.apache.lucene.index.TermsEnum = = decl_stmt org.apache.lucene.index.PostingsEnum = = decl_stmt long = new decl_stmt long = new for decl_stmt org.apache.lucene.util.BytesRef = = decl_stmt int for = if == if ! call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() break = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt org.apache.lucene.index.Terms = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() if == continue = call int.iterator() call int.iterator() call int.iterator() call int.iterator() call int.iterator() = call PostingsEnum.next() call PostingsEnum.next() call PostingsEnum.next() call PostingsEnum.next() call PostingsEnum.next() if == = continue = while call decl long.nextDoc() call decl long.nextDoc() call decl long.nextDoc() call decl long.nextDoc() call decl long.nextDoc() != decl_stmt int = call decl long.docID() call decl long.docID() call decl long.docID() call decl long.docID() call decl long.docID() if != && call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() == continue decl_stmt int = call decl long.freq() call decl long.freq() call decl long.freq() call decl long.freq() call decl long.freq() = long << | ++ if > break decl_stmt int for = if == if ! call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() break = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt org.apache.lucene.index.Terms = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() if == continue = call int.iterator() call int.iterator() call int.iterator() call int.iterator() call int.iterator() = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == = continue = while call decl long.nextDoc() call decl long.nextDoc() call decl long.nextDoc() call decl long.nextDoc() call decl long.nextDoc() != if != && call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call decl long.docID() call decl long.docID() call decl long.docID() call decl long.docID() call decl long.docID() == continue decl_stmt int = call decl long.docID() call decl long.docID() call decl long.docID() call decl long.docID() call decl long.docID() decl_stmt int = call decl long.freq() call decl long.freq() call decl long.freq() call decl long.freq() call decl long.freq() = long << | ++ if > break if == break if ! call PostingsEnum.docFreq() call PostingsEnum.docFreq() call PostingsEnum.docFreq() call PostingsEnum.docFreq() call PostingsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() + + + + + for = < ++ + + + + + >>> + + & + + >>> + + & + + + + call Terms.utf8ToString() call Terms.utf8ToString() call Terms.utf8ToString() call Terms.utf8ToString() call Terms.utf8ToString() IndexableField IndexableField String String decl List decl List public static public static decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.apache.lucene.index.IndexableField = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.index.IndexableField = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call org.apache.lucene.index.IndexableField.binaryValue() call org.apache.lucene.index.IndexableField.binaryValue() call org.apache.lucene.index.IndexableField.binaryValue() call org.apache.lucene.index.IndexableField.binaryValue() call org.apache.lucene.index.IndexableField.binaryValue() != assert call org.apache.lucene.index.IndexableField.binaryValue() call org.apache.lucene.index.IndexableField.binaryValue() call org.apache.lucene.index.IndexableField.binaryValue() call org.apache.lucene.index.IndexableField.binaryValue() call org.apache.lucene.index.IndexableField.binaryValue() != else decl_stmt java.lang.String = call org.apache.lucene.index.IndexableField.stringValue() call org.apache.lucene.index.IndexableField.stringValue() call org.apache.lucene.index.IndexableField.stringValue() call org.apache.lucene.index.IndexableField.stringValue() call org.apache.lucene.index.IndexableField.stringValue() decl_stmt java.lang.String = call org.apache.lucene.index.IndexableField.stringValue() call org.apache.lucene.index.IndexableField.stringValue() call org.apache.lucene.index.IndexableField.stringValue() call org.apache.lucene.index.IndexableField.stringValue() call org.apache.lucene.index.IndexableField.stringValue() + + int decl Iterator BytesRef BytesRef String PostingsEnum PostingsEnum PostingsEnum int TermsEnum TermsEnum Terms int Terms PostingsEnum int int public static public static throws if == == || == return != decl_stmt java.util.Iterator < = for : decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt org.apache.lucene.index.Terms = decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.index.Terms = decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.util.BytesRef while = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != decl_stmt org.apache.lucene.util.BytesRef = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) if call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() != decl_stmt int = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() decl_stmt int = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() for = < ++ decl_stmt int = call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() decl_stmt int = call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() if call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() else = = decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() != decl_stmt int = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() decl_stmt int = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public return public public return + - decl char int int private private decl_stmt int final final = + if < + decl_stmt char = new + * = for = < ++ decl_stmt int = if == && < - ++ = char = char else if <= = char else if == = char else if == = char else if == = char = return + decl char public public = != : + if return decl_stmt char = new * for = < ++ * = + * + = return new int public public decl_stmt int = char for = < ++ = return new public public return + Field FieldType Document decl ArrayList decl Map FieldType String String FieldType int FieldType public public throws decl_stmt org.apache.lucene.document.Document = new decl_stmt org.apache.solr.schema.FieldType = new call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) decl_stmt java.util.ArrayList < = new <> decl_stmt java.lang.String = decl_stmt org.apache.solr.handler.dataimport.config.Field = call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() decl_stmt java.util.Map < = new <> decl_stmt int = for = < ++ decl_stmt java.lang.String = + decl_stmt org.apache.solr.schema.FieldType decl_stmt org.apache.solr.schema.FieldType = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != = new else = new switch case break case call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) break case call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) break case call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) break decl_stmt org.apache.solr.schema.FieldType = new call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() switch case call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() break case call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() break case call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() break case call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() break if else call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() for = < call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() ++ call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() if + + new String public public throws decl_stmt java.lang.String = if + + new String public public throws decl_stmt java.lang.String = if + + new new int public public try = new + + for = < ++ decl_stmt int = if < else if < else catch throw new synchronized