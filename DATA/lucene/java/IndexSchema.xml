org.apache.solr.schema java.io.IOException import java.io.Writer import java.lang.invoke.MethodHandles import java.util.* import java.util.regex.Pattern import javax.xml.xpath.XPath import javax.xml.xpath.XPathConstants import javax.xml.xpath.XPathExpressionException import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.DelegatingAnalyzerWrapper import org.apache.lucene.index.DocValuesType import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexableField import org.apache.lucene.index.IndexableField import org.apache.lucene.index.MultiFields import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.uninverting.UninvertingReader import org.apache.lucene.util.Version import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.SolrException import org.apache.solr.common.params.MapSolrParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.core.Config import org.apache.solr.core.SolrConfig import org.apache.solr.core.SolrResourceLoader import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.response.SchemaXmlWriter import org.apache.solr.response.SolrQueryResponse import org.apache.solr.search.similarities.ClassicSimilarityFactory import org.apache.solr.search.similarities.SchemaSimilarityFactory import org.apache.solr.util.DOMUtil import org.apache.solr.util.plugin.SolrCoreAware import org.slf4j.Logger import org.slf4j.LoggerFactory import org.w3c.dom.Document import org.w3c.dom.Element import org.w3c.dom.NamedNodeMap import org.w3c.dom.Node import org.w3c.dom.NodeList import org.xml.sax.InputSource import static static java.util.Collections.singletonList import static static java.util.Collections.singletonMap import class org.apache.solr.schema.IndexSchema String String String String float String String String String boolean SolrResourceLoader decl Map decl DynamicCopy String String decl Map SchemaField decl Map Logger String SolrConfig String String String SimilarityFactory String String String boolean decl DynamicField String String String String FieldType String String String Analyzer String String Analyzer Similarity decl List String String String String String decl Map String String String String decl Collection String String decl List String public public return public < < public < < return public public return public public return public public return public public = public public return public public return public public return public < public < return public < public < return public < public < return public < public < return public public if == = call SimilarityFactory.getSimilarity() call SimilarityFactory.getSimilarity() call SimilarityFactory.getSimilarity() call SimilarityFactory.getSimilarity() call SimilarityFactory.getSimilarity() return public public return public public return public public return public public return public public return public public return public public return IndexableField public public decl_stmt org.apache.lucene.index.IndexableField = return == : call org.apache.solr.schema.FieldType.toExternal(IndexableField) call org.apache.solr.schema.FieldType.toExternal(IndexableField) call org.apache.solr.schema.FieldType.toExternal(IndexableField) call org.apache.solr.schema.FieldType.toExternal(IndexableField) call org.apache.solr.schema.FieldType.toExternal(IndexableField) SchemaField private private decl_stmt org.apache.solr.schema.SchemaField = if == throw new + + if ! call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() throw new + + + return public public = new = new decl Map decl UninvertingReader SchemaField public < public < decl_stmt java.util.Map < = new <> for : if == && != decl_stmt org.apache.solr.schema.SchemaField = if != decl_stmt sun.tools.java.Type = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return LocalSolrQueryRequest SchemaXmlWriter NamedList SolrQueryResponse throws decl_stmt org.apache.solr.response.SolrQueryResponse final final = new call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) decl_stmt org.apache.solr.common.util.NamedList final final = new > decl_stmt org.apache.solr.request.LocalSolrQueryRequest final final = new decl_stmt org.apache.solr.response.SchemaXmlWriter final final = new call org.apache.solr.response.SchemaXmlWriter.setEmitManagedSchemaDoNotEditWarning(boolean) call org.apache.solr.response.SchemaXmlWriter.setEmitManagedSchemaDoNotEditWarning(boolean) call org.apache.solr.response.SchemaXmlWriter.setEmitManagedSchemaDoNotEditWarning(boolean) call org.apache.solr.response.SchemaXmlWriter.setEmitManagedSchemaDoNotEditWarning(boolean) call org.apache.solr.response.SchemaXmlWriter.setEmitManagedSchemaDoNotEditWarning(boolean) call org.apache.solr.response.SchemaXmlWriter.writeResponse() call org.apache.solr.response.SchemaXmlWriter.writeResponse() call org.apache.solr.response.SchemaXmlWriter.writeResponse() call org.apache.solr.response.SchemaXmlWriter.writeResponse() call org.apache.solr.response.SchemaXmlWriter.writeResponse() call SchemaXmlWriter.close() call SchemaXmlWriter.close() call SchemaXmlWriter.close() call SchemaXmlWriter.close() call SchemaXmlWriter.close() public public return decl HashMap Analyzer protected < protected < decl_stmt HashMap < = new <> for : decl_stmt org.apache.lucene.analysis.Analyzer = call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() return Analyzer protected protected decl_stmt org.apache.lucene.analysis.Analyzer = return != : decl HashMap Analyzer protected < protected < decl_stmt HashMap < = new <> for : decl_stmt org.apache.lucene.analysis.Analyzer = call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() return Analyzer protected protected decl_stmt org.apache.lucene.analysis.Analyzer = return != : XPath Node boolean Class decl Map FieldTypePluginLoader Node Config SchemaField String StringBuilder NodeList Document String protected protected try decl_stmt org.apache.solr.core.Config = new + + decl_stmt org.apache.lucene.document.Document = call org.apache.solr.core.Config.getDocument() call org.apache.solr.core.Config.getDocument() call org.apache.solr.core.Config.getDocument() call org.apache.solr.core.Config.getDocument() call org.apache.solr.core.Config.getDocument() decl_stmt XPath final final = call org.apache.solr.core.Config.getXPath() call org.apache.solr.core.Config.getXPath() call org.apache.solr.core.Config.getXPath() call org.apache.solr.core.Config.getXPath() call org.apache.solr.core.Config.getXPath() decl_stmt java.lang.String = + decl_stmt org.apache.lucene.replicator.nrt.Node = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call org.apache.solr.core.SolrResourceLoader.getCoreProperties() call org.apache.solr.core.SolrResourceLoader.getCoreProperties() call org.apache.solr.core.SolrResourceLoader.getCoreProperties() call org.apache.solr.core.SolrResourceLoader.getCoreProperties() call org.apache.solr.core.SolrResourceLoader.getCoreProperties() != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.solr.core.SolrResourceLoader.getCoreProperties() call org.apache.solr.core.SolrResourceLoader.getCoreProperties() call org.apache.solr.core.SolrResourceLoader.getCoreProperties() call org.apache.solr.core.SolrResourceLoader.getCoreProperties() call org.apache.solr.core.SolrResourceLoader.getCoreProperties() else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() else = call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() = + = call org.apache.solr.core.Config.getFloat(String) call org.apache.solr.core.Config.getFloat(String) call org.apache.solr.core.Config.getFloat(String) call org.apache.solr.core.Config.getFloat(String) call org.apache.solr.core.Config.getFloat(String) decl_stmt org.apache.solr.schema.FieldTypePluginLoader final final = new = decl_stmt NodeList = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call FieldTypePluginLoader.load() call FieldTypePluginLoader.load() call FieldTypePluginLoader.load() call FieldTypePluginLoader.load() call FieldTypePluginLoader.load() decl_stmt java.util.Map < = = decl_stmt org.apache.lucene.replicator.nrt.Node = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() = if == decl_stmt boolean final final = decl_stmt java.lang.Class final final = : = call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call java.lang.Class.getName() call java.lang.Class.getName() call java.lang.Class.getName() call java.lang.Class.getName() call java.lang.Class.getName() call org.apache.solr.schema.SimilarityFactory.init(SolrParams) call org.apache.solr.schema.SimilarityFactory.init(SolrParams) call org.apache.solr.schema.SimilarityFactory.init(SolrParams) call org.apache.solr.schema.SimilarityFactory.init(SolrParams) call org.apache.solr.schema.SimilarityFactory.init(SolrParams) new else = if ! instanceof for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if != decl_stmt java.lang.String = + + + call SimilarityFactory.getClass() call SimilarityFactory.getClass() call SimilarityFactory.getClass() call SimilarityFactory.getClass() call SimilarityFactory.getClass() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new = = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() if == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() else = call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() if != decl_stmt org.apache.solr.schema.SchemaField = if == || ! call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() decl_stmt java.lang.String = + + throw new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + = + = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() if == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() else = = call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + = = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + else = call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() if != call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() decl_stmt java.lang.String = + + + + call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new if ! call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + if call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() decl_stmt java.lang.String = + + + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new = call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + if != call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() = new catch throw new + call org.apache.solr.core.SolrResourceLoader.resourceLocation(String) call org.apache.solr.core.SolrResourceLoader.resourceLocation(String) call org.apache.solr.core.SolrResourceLoader.resourceLocation(String) call org.apache.solr.core.SolrResourceLoader.resourceLocation(String) call org.apache.solr.core.SolrResourceLoader.resourceLocation(String) + + catch throw new + call org.apache.solr.core.SolrResourceLoader.resourceLocation(String) call org.apache.solr.core.SolrResourceLoader.resourceLocation(String) call org.apache.solr.core.SolrResourceLoader.resourceLocation(String) call org.apache.solr.core.SolrResourceLoader.resourceLocation(String) call org.apache.solr.core.SolrResourceLoader.resourceLocation(String) + + protected protected for : Node FieldType String SchemaField String decl Map decl ArrayList NamedNodeMap String String SchemaField NodeList decl Map protected synchronized < protected synchronized < throws decl_stmt java.util.Map < = new <> decl_stmt java.util.ArrayList < = new <> decl_stmt java.lang.String = + + + + + + decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt org.apache.lucene.replicator.nrt.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt NamedNodeMap = call Node.getAttributes() call Node.getAttributes() call Node.getAttributes() call Node.getAttributes() call Node.getAttributes() decl_stmt java.lang.String = call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + decl_stmt java.lang.String = + decl_stmt org.apache.solr.schema.FieldType = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + + + + + decl_stmt java.util.Map < = if != call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.solr.schema.SchemaField = if call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() decl_stmt org.apache.solr.schema.SchemaField = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() if != decl_stmt java.lang.String = + call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() + + call org.apache.solr.schema.SchemaField.toString() call org.apache.solr.schema.SchemaField.toString() call org.apache.solr.schema.SchemaField.toString() call org.apache.solr.schema.SchemaField.toString() call org.apache.solr.schema.SchemaField.toString() + + call org.apache.solr.schema.SchemaField.toString() call org.apache.solr.schema.SchemaField.toString() call org.apache.solr.schema.SchemaField.toString() call org.apache.solr.schema.SchemaField.toString() call org.apache.solr.schema.SchemaField.toString() + throw new call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + if call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() != call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call org.apache.solr.schema.SchemaField.getDefaultValue() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call org.apache.solr.schema.SchemaField.isRequired() call org.apache.solr.schema.SchemaField.isRequired() call org.apache.solr.schema.SchemaField.isRequired() call org.apache.solr.schema.SchemaField.isRequired() call org.apache.solr.schema.SchemaField.isRequired() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() else if call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() if else throw new call decl Collection.addAll() call decl Collection.addAll() call decl Collection.addAll() call decl Collection.addAll() call decl Collection.addAll() = return decl DynamicField protected static protected static < decl_stmt DynamicField = new call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + return Node String String int String NamedNodeMap String NodeList String protected synchronized protected synchronized throws decl_stmt java.lang.String = + decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt org.apache.lucene.replicator.nrt.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt NamedNodeMap = call Node.getAttributes() call Node.getAttributes() call Node.getAttributes() call Node.getAttributes() call Node.getAttributes() decl_stmt java.lang.String = + decl_stmt java.lang.String = + decl_stmt java.lang.String = decl_stmt int = if != try = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + + + + + + if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt java.lang.String = + + + + + + + + + + + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if > && ! call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + + + + + StringBuilder private private decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() int protected static protected static if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) || call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) decl_stmt int = for = < call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() && - != = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) ++ ++ if == return return String String protected protected < decl_stmt java.lang.String = if != throw new + + if throw new + + if ! decl_stmt java.lang.String = + + throw new if decl_stmt java.lang.String = + + throw new return decl List public public decl_stmt java.util.List < = new <> for : if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + else call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + = private private < new call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + protected protected < for : if return return public public boolean DynamicField boolean Pattern String boolean DynamicField SchemaField SchemaField String DynamicField public public call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + + + + + + + + + + decl_stmt DynamicField = decl_stmt org.apache.solr.schema.SchemaField = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.solr.schema.SchemaField = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt DynamicField = decl_stmt DynamicField = decl_stmt boolean = decl_stmt boolean = decl_stmt java.lang.String final final = + decl_stmt boolean final final = if && ! decl_stmt java.lang.String = + + + throw new if && ! decl_stmt java.lang.String = + + + throw new if == && decl_stmt java.util.regex.Pattern = for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) = break if == || == && ! for : if == && ! && ! if = if ! = if == if = = else if = = new = if != && != || || break if == && ! && ! decl_stmt java.lang.String = + + throw new if == decl_stmt java.lang.String = + + throw new if if != new else = new new else if if != new else = else if != if instanceof new else decl_stmt java.lang.String = + throw new else decl List protected protected decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new private private call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() + : decl DynamicCopy private private if == = new else decl_stmt DynamicCopy = new + - = = call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + SimilarityFactory Object decl NamedList String SolrParams static static if == return else decl_stmt org.apache.solr.schema.SimilarityFactory decl_stmt java.lang.String final final = decl_stmt java.lang.Object final final = call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) if instanceof decl_stmt org.apache.solr.common.util.NamedList final final final < = call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt org.apache.solr.common.params.SolrParams = = call org.apache.solr.schema.SimilarityFactory.init(SolrParams) call org.apache.solr.schema.SimilarityFactory.init(SolrParams) call org.apache.solr.schema.SimilarityFactory.init(SolrParams) call org.apache.solr.schema.SimilarityFactory.init(SolrParams) call org.apache.solr.schema.SimilarityFactory.init(SolrParams) else = new public public return return public public return static static if return new else if return new else return new public public return return call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) return call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) return + return call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) return call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - return + return return return public public return public public return - public public return public public return return new public public return public public return public public return public public return public public return public public return String String public public decl_stmt java.lang.String = decl_stmt java.lang.String = return public public return decl SchemaField public public decl_stmt org.apache.solr.schema.SchemaField = new for = < ++ = return public public for : if return return public public if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() return for : if return return public public if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() return for : if return return SchemaField public public decl_stmt org.apache.solr.schema.SchemaField = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return for : if return return SchemaField public public decl_stmt org.apache.solr.schema.SchemaField = if != return throw new + + SchemaField public public decl_stmt org.apache.solr.schema.SchemaField = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() return public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() SchemaField public public decl_stmt org.apache.solr.schema.SchemaField = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() return public public for : if return throw new + private private for : if return return decl List SchemaField public < public < decl_stmt org.apache.solr.schema.SchemaField = if ! return decl_stmt java.util.List < = new <> for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() for : if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if != for : if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl List decl List public < public < final final decl_stmt java.util.List final final final < = new <> if != for : if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return public public return call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() public < public < return new decl List decl List decl SortedSet decl SimpleOrderedMap decl SortedMap decl SimpleOrderedMap public < public < decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call org.apache.solr.schema.SimilarityFactory.getNamedPropertyValues() call org.apache.solr.schema.SimilarityFactory.getNamedPropertyValues() call org.apache.solr.schema.SimilarityFactory.getNamedPropertyValues() call org.apache.solr.schema.SimilarityFactory.getNamedPropertyValues() call org.apache.solr.schema.SimilarityFactory.getNamedPropertyValues() decl_stmt java.util.List < < = new <> decl_stmt java.util.SortedMap < = new <> for : call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() decl_stmt java.util.List < < = new <> decl_stmt java.util.SortedSet < = new <> call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() return decl List private < < private < < decl_stmt java.util.List < < = new <> for : if ! call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return String decl List String decl IndexSchema decl List decl SortedMap decl DynamicField Pattern decl SimpleOrderedMap decl SimpleOrderedMap public < < public < < < < decl_stmt java.util.List < < = new <> decl_stmt java.util.SortedMap < < = new <> for < : call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() call decl SortedMap.values() = new <> return for : decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = if == || && == || decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if != for : decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = if == || && == || decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if decl_stmt DynamicField = if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl IndexSchema.getRegex() call decl IndexSchema.getRegex() call decl IndexSchema.getRegex() call decl IndexSchema.getRegex() call decl IndexSchema.getRegex() else if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) decl_stmt java.util.List < = new <> decl_stmt java.util.regex.Pattern = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if call decl List.matcher() call decl List.matcher() call decl List.matcher() call decl List.matcher() call decl List.matcher() call decl DynamicField.add() call decl DynamicField.add() call decl DynamicField.add() call decl DynamicField.add() call decl DynamicField.add() if call decl DynamicField.size() call decl DynamicField.size() call decl DynamicField.size() call decl DynamicField.size() call decl DynamicField.size() > call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if decl_stmt DynamicField = if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call Pattern.getRegex() call Pattern.getRegex() call Pattern.getRegex() call Pattern.getRegex() call Pattern.getRegex() if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return public public return public public < return public public < return < > String public public < < < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < < < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String public public < decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new String protected protected decl_stmt java.lang.String = call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) + + + + call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) + + return