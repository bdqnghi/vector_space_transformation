org.apache.lucene.facet java.io.IOException import java.util.Arrays import java.util.Comparator import java.util.Objects import java.util.Set import org.apache.lucene.facet.DrillSidewaysScorer.DocsAndCost import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.Term import org.apache.lucene.search.BulkScorer import org.apache.lucene.search.Collector import org.apache.lucene.search.ConstantScoreScorer import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.Explanation import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.Scorer import org.apache.lucene.search.Weight import class org.apache.lucene.facet.DrillSidewaysQuery super super extends Query decl Collector decl Query Collector boolean public public return Query Query public public throws decl_stmt org.apache.lucene.search.Query = while decl_stmt org.apache.lucene.search.Query = call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) if == break = if == return else return new decl Weight decl DocsAndCost Scorer decl DrillSidewaysScorer int Weight public public throws decl_stmt org.apache.lucene.search.Weight final final = call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) decl_stmt org.apache.lucene.search.Weight final final final = new for = < ++ = return new public public < public public throws return call Weight.explain() call Weight.explain() call Weight.explain() call Weight.explain() call Weight.explain() public public throws return call Weight.getValueForNormalization() call Weight.getValueForNormalization() call Weight.getValueForNormalization() call Weight.getValueForNormalization() call Weight.getValueForNormalization() public public call Weight.normalize() call Weight.normalize() call Weight.normalize() call Weight.normalize() call Weight.normalize() public public throws throw new public public throws decl_stmt org.apache.lucene.search.Scorer = call Weight.scorer() call Weight.scorer() call Weight.scorer() call Weight.scorer() call Weight.scorer() decl_stmt DocsAndCost = new decl_stmt int = for = < ++ decl_stmt org.apache.lucene.search.Scorer = if == ++ = new = new if > return new < public public return if == return return new public public < public public throws return public public throws return public public public public throws throw new decl DrillSidewaysScorer Scorer int decl DocsAndCost public public throws decl_stmt org.apache.lucene.search.Scorer = decl_stmt DocsAndCost = new decl_stmt int = for = < ++ decl_stmt org.apache.lucene.search.Scorer = if == ++ = new = new if > return new < public public return if == return return new public public return int int public public decl_stmt int final final = decl_stmt int = = * + == : call org.apache.lucene.search.Query.hashCode() call org.apache.lucene.search.Query.hashCode() call org.apache.lucene.search.Query.hashCode() call org.apache.lucene.search.Query.hashCode() call org.apache.lucene.search.Query.hashCode() = * + == : call Collector.hashCode() call Collector.hashCode() call Collector.hashCode() call Collector.hashCode() call Collector.hashCode() = * + = * + return DrillSidewaysQuery public public if == return if ! return if != return decl_stmt org.apache.lucene.facet.DrillSidewaysQuery = if == if != return else if ! call Query.equals() call Query.equals() call Query.equals() call Query.equals() call Query.equals() return if == if != return else if ! call Collector.equals() call Collector.equals() call Collector.equals() call Collector.equals() call Collector.equals() return if ! return if ! return return