org.apache.lucene.index java.io.IOException import java.util.HashSet import java.util.Random import java.util.Set import java.util.concurrent.CountDownLatch import java.util.concurrent.atomic.AtomicInteger import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.BinaryDocValuesField import org.apache.lucene.document.Document import org.apache.lucene.document.Field.Store import org.apache.lucene.document.NumericDocValuesField import org.apache.lucene.document.StringField import org.apache.lucene.store.Directory import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.LuceneTestCase.Nightly import org.apache.lucene.util.TestUtil import com.carrotsearch.randomizedtesting.generators.RandomPicks import class org.apache.lucene.index.TestMixedDocValuesUpdates super super extends DirectoryReader Random String IndexWriterConfig boolean int IndexWriter BinaryDocValues int int Bits int LogMergePolicy DirectoryReader int int decl long int int String Document Bits LeafReader Directory NumericDocValues public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt java.util.Random final final = decl_stmt org.apache.lucene.index.IndexWriterConfig = new decl_stmt org.apache.lucene.index.LogMergePolicy = call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt boolean final final = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt org.apache.lucene.index.DirectoryReader if = else call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) = decl_stmt int final final = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + decl_stmt int final final = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) / + decl_stmt long final final final = new for = < ++ = decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = for = < ++ decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new for = < ++ if < call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + else call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) ++ decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt java.lang.String = + if < call org.apache.lucene.index.IndexWriter.updateNumericDocValue(Term,String,long) call org.apache.lucene.index.IndexWriter.updateNumericDocValue(Term,String,long) call org.apache.lucene.index.IndexWriter.updateNumericDocValue(Term,String,long) call org.apache.lucene.index.IndexWriter.updateNumericDocValue(Term,String,long) call org.apache.lucene.index.IndexWriter.updateNumericDocValue(Term,String,long) new ++ else call org.apache.lucene.index.IndexWriter.updateBinaryDocValue(Term,String,BytesRef) call org.apache.lucene.index.IndexWriter.updateBinaryDocValue(Term,String,BytesRef) call org.apache.lucene.index.IndexWriter.updateBinaryDocValue(Term,String,BytesRef) call org.apache.lucene.index.IndexWriter.updateBinaryDocValue(Term,String,BytesRef) call org.apache.lucene.index.IndexWriter.updateBinaryDocValue(Term,String,BytesRef) new ++ if call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() < decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) new + if ! call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) decl_stmt org.apache.lucene.index.DirectoryReader = call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() = call DirectoryReader.numDocs() call DirectoryReader.numDocs() call DirectoryReader.numDocs() call DirectoryReader.numDocs() call DirectoryReader.numDocs() > for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.index.LeafReader = decl_stmt org.apache.lucene.util.Bits = call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() for = < ++ decl_stmt java.lang.String = + decl_stmt BinaryDocValues = call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() decl_stmt NumericDocValues = call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() decl_stmt org.apache.lucene.util.Bits = call LeafReader.getDocsWithField() call LeafReader.getDocsWithField() call LeafReader.getDocsWithField() call LeafReader.getDocsWithField() call LeafReader.getDocsWithField() if < else decl_stmt int = call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() for = < ++ if == || call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() if < + + + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() else + + + + + call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() NumericDocValues Bits int Random String DirectoryReader long CountDownLatch IndexWriterConfig long long double IndexWriter int BinaryDocValues int DirectoryReader Bits decl Thread Bits int String boolean String AtomicInteger int BytesRef long LeafReader Term Directory public public throws decl_stmt org.apache.lucene.store.Directory final final = decl_stmt org.apache.lucene.index.IndexWriterConfig = new decl_stmt org.apache.lucene.index.IndexWriter final final = new decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = for = < ++ decl_stmt org.apache.lucene.document.Document = new call int.add() call int.add() call int.add() call int.add() call int.add() new + decl_stmt double = decl_stmt java.lang.String if < = else if < = else if < = else = call int.add() call int.add() call int.add() call int.add() call int.add() new for = < ++ decl_stmt long = call int.add() call int.add() call int.add() call int.add() call int.add() new + call int.add() call int.add() call int.add() call int.add() call int.add() new + * call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) decl_stmt java.util.concurrent.CountDownLatch final final = new decl_stmt java.util.concurrent.atomic.AtomicInteger final final = new decl_stmt java.lang.Thread = new for = < ++ = new + public public decl_stmt org.apache.lucene.index.DirectoryReader = decl_stmt boolean = try decl_stmt java.util.Random = while call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() > decl_stmt double = call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() decl_stmt org.apache.lucene.index.Term if < = new else if < = new else if < = new else = new decl_stmt int = decl_stmt java.lang.String final final = + decl_stmt java.lang.String final final = + decl_stmt long = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) new new * if call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() < decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) new + if call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() < call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) if call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() < if == = else decl_stmt org.apache.lucene.index.DirectoryReader = if != call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() = = catch throw new finally if != try call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() catch if throw new call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() for : call Term.start() call Term.start() call Term.start() call Term.start() call Term.start() call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() decl_stmt org.apache.lucene.index.DirectoryReader = decl_stmt org.apache.lucene.util.BytesRef = new for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.index.LeafReader = for = < ++ decl_stmt BinaryDocValues = call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() + decl_stmt NumericDocValues = call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() + decl_stmt org.apache.lucene.util.Bits = call LeafReader.getDocsWithField() call LeafReader.getDocsWithField() call LeafReader.getDocsWithField() call LeafReader.getDocsWithField() call LeafReader.getDocsWithField() + decl_stmt org.apache.lucene.util.Bits = call LeafReader.getDocsWithField() call LeafReader.getDocsWithField() call LeafReader.getDocsWithField() call LeafReader.getDocsWithField() call LeafReader.getDocsWithField() + decl_stmt org.apache.lucene.util.Bits = call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() for = < call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() ++ if == || call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() decl_stmt long = call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() decl_stmt long = * call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() long double DirectoryReader boolean String int Random String int Term DirectoryReader public public decl_stmt org.apache.lucene.index.DirectoryReader = decl_stmt boolean = try decl_stmt java.util.Random = while > decl_stmt double = call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() decl_stmt org.apache.lucene.index.Term if < = new else if < = new else if < = new else = new decl_stmt int = decl_stmt java.lang.String final final = + decl_stmt java.lang.String final final = + decl_stmt long = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) new new * if call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() < decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) new + if call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() < if call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() < if == = else decl_stmt org.apache.lucene.index.DirectoryReader = if != call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() = = catch throw new finally if != try call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() catch if throw new int IndexWriter BinaryDocValues long LeafReader NumericDocValues int IndexWriterConfig DirectoryReader int Directory Term public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.IndexWriterConfig = new call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt int final final = for = < ++ decl_stmt org.apache.lucene.document.Document = new call int.add() call int.add() call int.add() call int.add() call int.add() new + decl_stmt long = call int.add() call int.add() call int.add() call int.add() call int.add() new call int.add() call int.add() call int.add() call int.add() call int.add() new * call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) decl_stmt int = for = < ++ decl_stmt int = decl_stmt org.apache.lucene.index.Term = new + decl_stmt long = call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) new new * decl_stmt org.apache.lucene.index.DirectoryReader = for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.index.LeafReader = decl_stmt BinaryDocValues = call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() decl_stmt NumericDocValues = call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() for = < call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() ++ call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() * call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() LeafReader Random long int BinaryDocValues int Document IndexWriter NumericDocValues long Term int decl Set IndexWriterConfig DirectoryReader int int int Directory public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt java.util.Random final final = decl_stmt org.apache.lucene.index.IndexWriterConfig = new call org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double) call org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double) call org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double) call org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double) call org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = decl_stmt java.util.Set < = new <> while call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() for = < ++ decl_stmt org.apache.lucene.document.Document = new decl_stmt int = / for = < ++ call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new for = < ++ decl_stmt long = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + * call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() / / decl_stmt int final final = for = < ++ decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt org.apache.lucene.index.Term = new decl_stmt long = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) call org.apache.lucene.index.IndexWriter.updateDocValues(Term,Field) new + new + * call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() decl_stmt org.apache.lucene.index.DirectoryReader = for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() for = < ++ decl_stmt org.apache.lucene.index.LeafReader = decl_stmt BinaryDocValues = call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() + decl_stmt NumericDocValues = call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() + for = < call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() ++ + + + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() * call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close()