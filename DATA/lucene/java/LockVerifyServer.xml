org.apache.lucene.store java.io.IOException import java.io.InputStream import java.io.OutputStream import java.net.InetSocketAddress import java.net.ServerSocket import java.net.Socket import java.util.concurrent.CountDownLatch import org.apache.lucene.util.IOUtils import org.apache.lucene.util.SuppressForbidden import class org.apache.lucene.store.LockVerifyServer decl int InetSocketAddress CountDownLatch String int int int int Socket decl Thread int Object = public static = public static throws if != decl_stmt int = decl_stmt java.lang.String final final = ++ decl_stmt int final final = ++ try final final = new new decl_stmt java.net.InetSocketAddress final final = + + call java.net.InetSocketAddress.getPort() call java.net.InetSocketAddress.getPort() call java.net.InetSocketAddress.getPort() call java.net.InetSocketAddress.getPort() call java.net.InetSocketAddress.getPort() decl_stmt java.lang.Object final final = new decl_stmt int final final final = new = - decl_stmt java.util.concurrent.CountDownLatch final final = new decl_stmt java.lang.Thread final final final = new for = < ++ decl_stmt java.net.Socket final final = = new public public try = call java.net.Socket.getInputStream() call java.net.Socket.getInputStream() call java.net.Socket.getInputStream() call java.net.Socket.getInputStream() call java.net.Socket.getInputStream() = call java.net.Socket.getOutputStream() call java.net.Socket.getOutputStream() call java.net.Socket.getOutputStream() call java.net.Socket.getOutputStream() call java.net.Socket.getOutputStream() decl_stmt int final final = if < throw new call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) while decl_stmt int final final = if < return synchronized decl_stmt int final final = if == - return switch case if != - = - throw new + + + + = break case if != = - throw new + + + + = - break default: throw new + catch throw catch throw new finally call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() for : int int int public public try = = decl_stmt int final final = if < throw new while decl_stmt int final final = if < return synchronized decl_stmt int final final = if == - return switch case if != - = - throw new + + + + = break case if != = - throw new + + + + = - break default: throw new + catch throw catch throw new finally