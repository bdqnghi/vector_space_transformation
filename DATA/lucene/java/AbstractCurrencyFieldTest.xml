org.apache.solr.schema java.util.Currency import java.util.List import java.util.Random import java.util.Set import org.apache.lucene.index.IndexableField import org.apache.solr.SolrTestCaseJ4 import org.apache.solr.core.SolrCore import org.apache.solr.util.RTimer import org.junit.Assume import org.junit.BeforeClass import org.junit.Ignore import org.junit.Test import class annotation org.apache.solr.schema.AbstractCurrencyFieldTest super super extends Currency public static public static try for : decl_stmt java.util.Currency = catch public static public static throws boolean boolean SchemaField decl SchemaField IndexSchema public public throws decl_stmt org.apache.solr.schema.IndexSchema = decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.SchemaField.isPolyField() call org.apache.solr.schema.SchemaField.isPolyField() call org.apache.solr.schema.SchemaField.isPolyField() call org.apache.solr.schema.SchemaField.isPolyField() call org.apache.solr.schema.SchemaField.isPolyField() decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.schema.IndexSchema.getDynamicFieldPrototypes() call org.apache.solr.schema.IndexSchema.getDynamicFieldPrototypes() call org.apache.solr.schema.IndexSchema.getDynamicFieldPrototypes() call org.apache.solr.schema.IndexSchema.getDynamicFieldPrototypes() call org.apache.solr.schema.IndexSchema.getDynamicFieldPrototypes() decl_stmt boolean = decl_stmt boolean = for : if + + = if + + = FieldType SolrCore decl List boolean ExchangeRateProvider SchemaField String decl Set IndexSchema public public throws decl_stmt org.apache.solr.core.SolrCore = decl_stmt org.apache.solr.schema.IndexSchema = call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) + call org.apache.solr.schema.SchemaField.isPolyField() call org.apache.solr.schema.SchemaField.isPolyField() call org.apache.solr.schema.SchemaField.isPolyField() call org.apache.solr.schema.SchemaField.isPolyField() call org.apache.solr.schema.SchemaField.isPolyField() decl_stmt org.apache.solr.schema.FieldType = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() instanceof decl_stmt java.lang.String = decl_stmt java.util.List < = call org.apache.solr.schema.SchemaField.createFields(Object,float) call org.apache.solr.schema.SchemaField.createFields(Object,float) call org.apache.solr.schema.SchemaField.createFields(Object,float) call org.apache.solr.schema.SchemaField.createFields(Object,float) call org.apache.solr.schema.SchemaField.createFields(Object,float) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ decl_stmt boolean = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() != || call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() != || call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() != + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.solr.schema.IndexSchema.getFieldTypeByName(String) call org.apache.solr.schema.IndexSchema.getFieldTypeByName(String) call org.apache.solr.schema.IndexSchema.getFieldTypeByName(String) call org.apache.solr.schema.IndexSchema.getFieldTypeByName(String) call org.apache.solr.schema.IndexSchema.getFieldTypeByName(String) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.solr.schema.ExchangeRateProvider = decl_stmt java.util.Set < = call org.apache.solr.schema.ExchangeRateProvider.listAvailableCurrencies() call org.apache.solr.schema.ExchangeRateProvider.listAvailableCurrencies() call org.apache.solr.schema.ExchangeRateProvider.listAvailableCurrencies() call org.apache.solr.schema.ExchangeRateProvider.listAvailableCurrencies() call org.apache.solr.schema.ExchangeRateProvider.listAvailableCurrencies() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() assert call org.apache.solr.schema.ExchangeRateProvider.reload() call org.apache.solr.schema.ExchangeRateProvider.reload() call org.apache.solr.schema.ExchangeRateProvider.reload() call org.apache.solr.schema.ExchangeRateProvider.reload() call org.apache.solr.schema.ExchangeRateProvider.reload() == assert call ExchangeRateProvider.getExchangeRate() call ExchangeRateProvider.getExchangeRate() call ExchangeRateProvider.getExchangeRate() call ExchangeRateProvider.getExchangeRate() call ExchangeRateProvider.getExchangeRate() == SolrCore SchemaField decl Set ExchangeRateProvider IndexSchema public public throws decl_stmt org.apache.solr.core.SolrCore = decl_stmt org.apache.solr.schema.IndexSchema = call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) decl_stmt org.apache.solr.schema.ExchangeRateProvider = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() decl_stmt java.util.Set < = call org.apache.solr.schema.ExchangeRateProvider.listAvailableCurrencies() call org.apache.solr.schema.ExchangeRateProvider.listAvailableCurrencies() call org.apache.solr.schema.ExchangeRateProvider.listAvailableCurrencies() call org.apache.solr.schema.ExchangeRateProvider.listAvailableCurrencies() call org.apache.solr.schema.ExchangeRateProvider.listAvailableCurrencies() assert call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() == assert call org.apache.solr.schema.ExchangeRateProvider.reload() call org.apache.solr.schema.ExchangeRateProvider.reload() call org.apache.solr.schema.ExchangeRateProvider.reload() call org.apache.solr.schema.ExchangeRateProvider.reload() call org.apache.solr.schema.ExchangeRateProvider.reload() == assert call ExchangeRateProvider.getExchangeRate() call ExchangeRateProvider.getExchangeRate() call ExchangeRateProvider.getExchangeRate() call ExchangeRateProvider.getExchangeRate() call ExchangeRateProvider.getExchangeRate() == int int public public throws decl_stmt int final final = decl_stmt int final final = for = <= + ++ + for = <= ++ + + for = <= + ++ + for = - > - - -- + + + + + + + + + + + + + + + + + + + + + + + + + + + + + public public throws + public public throws + + + + + + + + + double Random RTimer int public public throws decl_stmt java.util.Random = decl_stmt int = for = <= ++ + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + + if == for = < ++ decl_stmt double = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + + + + + + + + + + + + + for = < ++ decl_stmt org.apache.solr.util.RTimer final final = new for = < ++ decl_stmt double = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + + + + + + - * + call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() for = < ++ decl_stmt org.apache.solr.util.RTimer final final = new for = < ++ decl_stmt double = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + + + + + + - * + call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() public public throws + + + + + + + public public throws for = <= ++ + float / + for = <= ++ + + + + + + + + + + public public throws