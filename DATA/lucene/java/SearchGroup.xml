org.apache.lucene.search.grouping org.apache.lucene.search.FieldComparator import org.apache.lucene.search.Sort import org.apache.lucene.search.SortField import java.io.IOException import java.util.* import class GROUP_VALUE_TYPE decl Object public public return + + + + decl SearchGroup public public if == return if == || != return decl_stmt org.apache.lucene.search.grouping.SearchGroup < = < if == if != return else if ! call GROUP_VALUE_TYPE.equals() call GROUP_VALUE_TYPE.equals() call GROUP_VALUE_TYPE.equals() call GROUP_VALUE_TYPE.equals() call GROUP_VALUE_TYPE.equals() return return public public return != call GROUP_VALUE_TYPE.hashCode() call GROUP_VALUE_TYPE.hashCode() call GROUP_VALUE_TYPE.hashCode() call GROUP_VALUE_TYPE.hashCode() call GROUP_VALUE_TYPE.hashCode() : decl SearchGroup public < public < assert decl_stmt org.apache.lucene.search.grouping.SearchGroup final final final < = if == throw new return public public return + + decl MergedGroup private private if instanceof decl_stmt MergedGroup < = < if == assert != else assert ! call GROUP_VALUE_TYPE.equals() call GROUP_VALUE_TYPE.equals() call GROUP_VALUE_TYPE.equals() call GROUP_VALUE_TYPE.equals() call GROUP_VALUE_TYPE.equals() return decl MergedGroup public public assert if instanceof decl_stmt MergedGroup < = < if == return == else return call GROUP_VALUE_TYPE.equals() call GROUP_VALUE_TYPE.equals() call GROUP_VALUE_TYPE.equals() call GROUP_VALUE_TYPE.equals() call GROUP_VALUE_TYPE.equals() else return public public if == return else return call GROUP_VALUE_TYPE.hashCode() call GROUP_VALUE_TYPE.hashCode() call GROUP_VALUE_TYPE.hashCode() call GROUP_VALUE_TYPE.hashCode() call GROUP_VALUE_TYPE.hashCode() decl Object int decl Object public public < < if == return decl_stmt java.lang.Object final final final = decl_stmt java.lang.Object final final final = for = < ++ decl_stmt int final final = * if != return assert != return - decl MergedGroup int decl MergedGroup boolean boolean private private < while decl_stmt org.apache.lucene.search.grouping.SearchGroup final final final < = decl_stmt MergedGroup < = decl_stmt boolean final final = == if = new <> = assert != = = else if continue else decl_stmt boolean = for = < ++ decl_stmt int final final = * if < = break else if > break else if == - if < = if if = = = call decl MergedGroup.shards() call decl MergedGroup.shards() call decl MergedGroup.shards() call decl MergedGroup.shards() call decl MergedGroup.shards() call decl MergedGroup.shards() call decl MergedGroup.shards() call decl MergedGroup.shards() call decl MergedGroup.shards() break while > decl_stmt MergedGroup final final final < = = int decl SearchGroup decl MergedGroup decl Collection int decl List public < < public < < < < < decl_stmt int final final = + for = < ++ decl_stmt java.util.Collection final final final < < = if ! call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() new <> decl_stmt java.util.List final final final < < = new <> decl_stmt int = while != decl_stmt MergedGroup final final final < = = if ++ >= decl_stmt org.apache.lucene.search.grouping.SearchGroup final final final < = new <> = = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == break for < : if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return else return public static < < < public static < < < < < < throws if == return else return new <