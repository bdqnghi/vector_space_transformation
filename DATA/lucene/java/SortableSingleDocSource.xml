org.apache.lucene.benchmark.byTask.feeds java.util.Properties import java.util.Random import org.apache.lucene.benchmark.byTask.utils.Config import class org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource super super extends int Random decl String decl char int Properties public public throws = decl_stmt java.util.Properties = new call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt int = decl_stmt char = new for = < ++ = char call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() new call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) return private private return + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - public public = = new