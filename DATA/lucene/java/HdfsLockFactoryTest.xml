org.apache.solr.store.hdfs java.io.IOException import org.apache.hadoop.conf.Configuration import org.apache.hadoop.fs.Path import org.apache.hadoop.hdfs.MiniDFSCluster import org.apache.lucene.store.Lock import org.apache.lucene.store.LockObtainFailedException import org.apache.solr.SolrTestCaseJ4 import org.apache.solr.cloud.hdfs.HdfsTestUtil import org.apache.solr.util.BadHdfsThreadsFilter import org.junit.AfterClass import org.junit.BeforeClass import org.junit.Test import com.carrotsearch.randomizedtesting.annotations.ThreadLeakFilters import class annotation org.apache.solr.store.hdfs.HdfsLockFactoryTest super super extends MiniDFSCluster public static public static throws = public static public static throws = Path HdfsDirectory String Configuration public public throws decl_stmt java.lang.String = decl_stmt java.nio.file.Path = new decl_stmt Configuration = decl_stmt org.apache.solr.store.hdfs.HdfsDirectory = new try = call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() assert != try = call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() assert != catch try = call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() assert != try = call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() call HdfsDirectory.obtainLock() assert != catch call org.apache.solr.store.hdfs.HdfsDirectory.close() call org.apache.solr.store.hdfs.HdfsDirectory.close() call org.apache.solr.store.hdfs.HdfsDirectory.close() call org.apache.solr.store.hdfs.HdfsDirectory.close() call org.apache.solr.store.hdfs.HdfsDirectory.close()