org.apache.solr.analytics.util.valuesource java.io.IOException import java.util.Map import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.queries.function.docvalues.DoubleDocValues import class org.apache.solr.analytics.util.valuesource.SingleDoubleFunction super super extends ValueSource public public return + + call ValueSource.description() call ValueSource.description() call ValueSource.description() call ValueSource.description() call ValueSource.description() + FunctionValues public public throws decl_stmt org.apache.lucene.queries.function.FunctionValues final final = call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() return new public public return public public return call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) public public return + + call FunctionValues.toString() call FunctionValues.toString() call FunctionValues.toString() call FunctionValues.toString() call FunctionValues.toString() + public public return public public return public public return + + + SingleDoubleFunction public public if != return decl_stmt org.apache.solr.analytics.util.valuesource.SingleDoubleFunction = return public public return call ValueSource.hashCode() call ValueSource.hashCode() call ValueSource.hashCode() call ValueSource.hashCode() call ValueSource.hashCode() +