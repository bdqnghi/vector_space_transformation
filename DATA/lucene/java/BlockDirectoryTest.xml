org.apache.solr.store.blockcache java.io.File import java.io.IOException import java.util.Map import java.util.Random import com.github.benmanes.caffeine.cache.Caffeine import org.apache.lucene.store.Directory import org.apache.lucene.store.FSDirectory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.IndexOutput import org.apache.lucene.store.MergeInfo import org.apache.lucene.util.IOUtils import org.apache.solr.SolrTestCaseJ4 import org.junit.After import org.junit.Before import org.junit.Test import class org.apache.solr.store.blockcache.BlockDirectoryTest super super extends int File int int Random MapperCache int int int BlockDirectory decl byte int decl byte public public decl_stmt byte = + if != decl_stmt int = + decl_stmt byte = new = else = + decl byte private private decl_stmt byte = new + return decl byte public public decl_stmt byte = + if == return return public public public public return public public public public FSDirectory public public throws = decl_stmt org.apache.lucene.store.FSDirectory = new = new = new = public public throws call org.apache.solr.store.blockcache.BlockDirectory.close() call org.apache.solr.store.blockcache.BlockDirectory.close() call org.apache.solr.store.blockcache.BlockDirectory.close() call org.apache.solr.store.blockcache.BlockDirectory.close() call org.apache.solr.store.blockcache.BlockDirectory.close() long Directory String long public public throws decl_stmt org.apache.lucene.store.Directory = new decl_stmt java.lang.String = decl_stmt long = call Directory.fileLength() call Directory.fileLength() call Directory.fileLength() call Directory.fileLength() call Directory.fileLength() decl_stmt long = call BlockDirectory.fileLength() call BlockDirectory.fileLength() call BlockDirectory.fileLength() call BlockDirectory.fileLength() call BlockDirectory.fileLength() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() IndexInput private private throws decl_stmt org.apache.lucene.store.IndexInput = call org.apache.solr.store.blockcache.BlockDirectory.openInput(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.openInput(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.openInput(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.openInput(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.openInput(String,IOContext) new try call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() try call org.apache.lucene.store.IndexInput.readByte(long) call org.apache.lucene.store.IndexInput.readByte(long) call org.apache.lucene.store.IndexInput.readByte(long) call org.apache.lucene.store.IndexInput.readByte(long) call org.apache.lucene.store.IndexInput.readByte(long) catch finally call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() int Directory long String long public public throws decl_stmt long = decl_stmt int = try for < ++ decl_stmt org.apache.lucene.store.Directory = new decl_stmt java.lang.String = catch + + decl_stmt long = + - / + public public throws = < , > decl byte int IndexInput int int int int IndexInput decl byte int private private throws decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt org.apache.lucene.store.IndexInput = new decl_stmt org.apache.lucene.store.IndexInput = new call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() decl_stmt int = int call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() for = < ++ decl_stmt int if == = else = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - decl_stmt byte = new + decl_stmt byte = new decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - decl_stmt int if == = else = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() for = < ++ if != + + call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() int int IndexOutput int IndexOutput int decl byte private private throws decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - + decl_stmt org.apache.lucene.store.IndexOutput = decl_stmt org.apache.lucene.store.IndexOutput = for = < ++ decl_stmt byte = new call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - + call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() private private return call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() public static public static try call File.toPath() call File.toPath() call File.toPath() call File.toPath() call File.toPath() catch IOContext BlockDirectory public public throws decl_stmt org.apache.lucene.store.IOContext = new new decl_stmt org.apache.solr.store.blockcache.BlockDirectory = call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) = new call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) = new call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useReadCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext) call org.apache.solr.store.blockcache.BlockDirectory.useWriteCache(String,IOContext)