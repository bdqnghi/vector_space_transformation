org.apache.solr.cloud java.io.IOException import java.io.InputStream import java.io.OutputStream import java.lang.invoke.MethodHandles import java.net.InetSocketAddress import java.net.ServerSocket import java.net.Socket import java.net.SocketException import java.net.SocketTimeoutException import java.net.URI import java.util.ArrayList import java.util.LinkedList import java.util.List import java.util.concurrent.CountDownLatch import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicReference import javax.net.ssl.SSLServerSocketFactory import javax.net.ssl.SSLSocketFactory import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.cloud.SocketProxy URI int int int boolean boolean decl List int ServerSocket URI CountDownLatch int Acceptor Logger public public throws = = public public return + + + public public = public public = private private throws = new if call Acceptor.pause() call Acceptor.pause() call Acceptor.pause() call Acceptor.pause() call Acceptor.pause() new + call java.net.ServerSocket.getLocalPort() call java.net.ServerSocket.getLocalPort() call java.net.ServerSocket.getLocalPort() call java.net.ServerSocket.getLocalPort() call java.net.ServerSocket.getLocalPort() = new public public return private private throws if return return new private private throws if return return new public public return decl List public public decl_stmt java.util.List < synchronized = new < call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + + + for : call Acceptor.close() call Acceptor.close() call Acceptor.close() call Acceptor.close() call Acceptor.close() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() decl List public public decl_stmt java.util.List < synchronized = new < call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : public public throws return call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + try if == throw new = call java.net.ServerSocket.setReuseAddress(boolean) call java.net.ServerSocket.setReuseAddress(boolean) call java.net.ServerSocket.setReuseAddress(boolean) call java.net.ServerSocket.setReuseAddress(boolean) call java.net.ServerSocket.setReuseAddress(boolean) if > call java.net.ServerSocket.setReceiveBufferSize(int) call java.net.ServerSocket.setReceiveBufferSize(int) call java.net.ServerSocket.setReceiveBufferSize(int) call java.net.ServerSocket.setReceiveBufferSize(int) call java.net.ServerSocket.setReceiveBufferSize(int) call java.net.ServerSocket.bind(SocketAddress,int) call java.net.ServerSocket.bind(SocketAddress,int) call java.net.ServerSocket.bind(SocketAddress,int) call java.net.ServerSocket.bind(SocketAddress,int) call java.net.ServerSocket.bind(SocketAddress,int) new call java.net.URI.getPort() call java.net.URI.getPort() call java.net.URI.getPort() call java.net.URI.getPort() call java.net.URI.getPort() catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + public public synchronized call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call Acceptor.pause() call Acceptor.pause() call Acceptor.pause() call Acceptor.pause() call Acceptor.pause() for : public public synchronized call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call Acceptor.goOn() call Acceptor.goOn() call Acceptor.goOn() call Acceptor.goOn() call Acceptor.goOn() private private try catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + private private try catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + public public return public public = public public return public public = int private private throws decl_stmt int = call java.net.ServerSocket.getLocalPort() call java.net.ServerSocket.getLocalPort() call java.net.ServerSocket.getLocalPort() call java.net.ServerSocket.getLocalPort() call java.net.ServerSocket.getLocalPort() return new public public public public public public throws synchronized call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() public public throws private private = new = new public public new public public OutputStream decl byte int InputStream public public decl_stmt byte = new try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + throw new decl_stmt java.io.InputStream = decl_stmt java.io.OutputStream = try = = while decl_stmt int = - try = call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + if == - call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + break if > call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + try if ! catch finally if != try call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + if != try call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + public public new public public Socket public public try while ! try decl_stmt java.net.Socket = if > call java.net.Socket.setReceiveBufferSize(int) call java.net.Socket.setReceiveBufferSize(int) call java.net.Socket.setReceiveBufferSize(int) call java.net.Socket.setReceiveBufferSize(int) call java.net.Socket.setReceiveBufferSize(int) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + call java.net.Socket.getReceiveBufferSize() call java.net.Socket.getReceiveBufferSize() call java.net.Socket.getReceiveBufferSize() call java.net.Socket.getReceiveBufferSize() call java.net.Socket.getReceiveBufferSize() synchronized call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new catch catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + public public try call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() catch