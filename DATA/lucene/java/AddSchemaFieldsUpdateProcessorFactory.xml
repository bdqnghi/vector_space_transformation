org.apache.solr.update.processor org.apache.solr.common.SolrException import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.SolrInputField import org.apache.solr.common.util.NamedList import org.apache.solr.core.SolrCore import org.apache.solr.core.SolrResourceLoader import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.ManagedIndexSchema import org.apache.solr.schema.SchemaField import org.apache.solr.update.AddUpdateCommand import org.apache.solr.update.processor.FieldMutatingUpdateProcessorFactory.SelectorParams import org.apache.solr.update.processor.FieldMutatingUpdateProcessor.FieldNameSelector import org.apache.solr.util.plugin.SolrCoreAware import org.slf4j.Logger import org.slf4j.LoggerFactory import java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import static static org.apache.solr.common.SolrException.ErrorCode.BAD_REQUEST import static static org.apache.solr.common.SolrException.ErrorCode.SERVER_ERROR import static static org.apache.solr.core.ConfigSetProperties.IMMUTABLE_CONFIGSET_ARG import class org.apache.solr.update.processor.AddSchemaFieldsUpdateProcessorFactory super super extends super implements String String String String SelectorParams decl List String SolrResourceLoader decl Collection Logger public public return new Object public public = = = for : decl_stmt java.lang.Object = if == throw new + + else if ! instanceof throw new + + = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() = public public = for : decl List decl Collection String decl List NamedList Object private static < private static < decl_stmt java.util.List < = new <> decl_stmt java.util.List < = for : if == throw new + + if ! instanceof throw new + + decl_stmt org.apache.solr.common.util.NamedList = decl_stmt java.lang.Object = call org.apache.solr.common.util.NamedList.remove(int) call org.apache.solr.common.util.NamedList.remove(int) call org.apache.solr.common.util.NamedList.remove(int) call org.apache.solr.common.util.NamedList.remove(int) call org.apache.solr.common.util.NamedList.remove(int) if == throw new + + + + if ! instanceof throw new + + if != call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) throw new + + + + decl_stmt java.lang.String = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() decl_stmt java.util.Collection < = call org.apache.solr.common.util.NamedList.removeConfigArgs(String) call org.apache.solr.common.util.NamedList.removeConfigArgs(String) call org.apache.solr.common.util.NamedList.removeConfigArgs(String) call org.apache.solr.common.util.NamedList.removeConfigArgs(String) call org.apache.solr.common.util.NamedList.removeConfigArgs(String) if call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() throw new + + + + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new if != call org.apache.solr.common.util.NamedList.size() call org.apache.solr.common.util.NamedList.size() call org.apache.solr.common.util.NamedList.size() call org.apache.solr.common.util.NamedList.size() call org.apache.solr.common.util.NamedList.size() throw new + + + call org.apache.solr.common.util.NamedList.toString() call org.apache.solr.common.util.NamedList.toString() call org.apache.solr.common.util.NamedList.toString() call org.apache.solr.common.util.NamedList.toString() call org.apache.solr.common.util.NamedList.toString() + return private private if ! throw new if ! throw new if != throw new ClassLoader IndexSchema public public decl_stmt org.apache.solr.schema.IndexSchema = decl_stmt java.lang.ClassLoader = if == call org.apache.solr.schema.IndexSchema.getFieldTypeByName(String) call org.apache.solr.schema.IndexSchema.getFieldTypeByName(String) call org.apache.solr.schema.IndexSchema.getFieldTypeByName(String) call org.apache.solr.schema.IndexSchema.getFieldTypeByName(String) call org.apache.solr.schema.IndexSchema.getFieldTypeByName(String) throw new + + = new <> for : try call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) catch throw new + + + + SolrCore boolean String SolrInputDocument StringBuilder FieldNameSelector decl List String decl Map String IndexSchema IndexSchema public public throws if ! decl_stmt java.lang.String final final = throw new decl_stmt org.apache.solr.common.SolrInputDocument final final = decl_stmt org.apache.solr.core.SolrCore final final = decl_stmt org.apache.solr.schema.IndexSchema = for decl_stmt java.util.List < = new <> decl_stmt org.apache.solr.update.processor.FieldNameSelector = decl_stmt java.util.Map < < = new <> for final final final final final final final < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = decl_stmt java.lang.String = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.solr.schema.IndexSchema.newField(String,String,Map) call org.apache.solr.schema.IndexSchema.newField(String,String,Map) call org.apache.solr.schema.IndexSchema.newField(String,String,Map) call org.apache.solr.schema.IndexSchema.newField(String,String,Map) call org.apache.solr.schema.IndexSchema.newField(String,String,Map) > if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() break else if decl_stmt java.lang.String final final = throw new if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt boolean = for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) : = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() synchronized call org.apache.solr.schema.IndexSchema.getSchemaUpdateLock() call org.apache.solr.schema.IndexSchema.getSchemaUpdateLock() call org.apache.solr.schema.IndexSchema.getSchemaUpdateLock() call org.apache.solr.schema.IndexSchema.getSchemaUpdateLock() call org.apache.solr.schema.IndexSchema.getSchemaUpdateLock() try decl_stmt org.apache.solr.schema.IndexSchema = call org.apache.solr.schema.IndexSchema.addFields(Collection,Map,boolean) call org.apache.solr.schema.IndexSchema.addFields(Collection,Map,boolean) call org.apache.solr.schema.IndexSchema.addFields(Collection,Map,boolean) call org.apache.solr.schema.IndexSchema.addFields(Collection,Map,boolean) call org.apache.solr.schema.IndexSchema.addFields(Collection,Map,boolean) if != call org.apache.solr.core.SolrCore.setLatestSchema(IndexSchema) call org.apache.solr.core.SolrCore.setLatestSchema(IndexSchema) call org.apache.solr.core.SolrCore.setLatestSchema(IndexSchema) call org.apache.solr.core.SolrCore.setLatestSchema(IndexSchema) call org.apache.solr.core.SolrCore.setLatestSchema(IndexSchema) call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() break else throw new catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() = call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() = call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() decl List decl List private private < < for final final : if decl_stmt java.util.List < = if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.util.List < = if != for : private private < for : for : for : for < : if continue continue continue continue return return private private final final return new public public final final return == public public final final return == FieldNameSelector private private decl_stmt org.apache.solr.update.processor.FieldNameSelector = for : = return NamedList Object private private decl_stmt org.apache.solr.common.util.NamedList = decl_stmt java.lang.Object = != call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) : return != call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() :