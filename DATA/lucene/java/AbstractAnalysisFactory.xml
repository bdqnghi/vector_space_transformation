org.apache.lucene.analysis.util java.io.IOException import java.io.InputStream import java.io.InputStreamReader import java.io.Reader import java.nio.charset.CharsetDecoder import java.nio.charset.CodingErrorAction import java.nio.charset.StandardCharsets import java.text.ParseException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import java.util.regex.Matcher import java.util.regex.Pattern import java.util.regex.PatternSyntaxException import org.apache.lucene.analysis.core.StopFilter import org.apache.lucene.util.IOUtils import org.apache.lucene.util.Version import class org.apache.lucene.analysis.util.AbstractAnalysisFactory decl Map String Pattern boolean String Version public final < public final < return public final public final return String public public < decl_stmt java.lang.String = if == throw new + + return public public < < return String public public < < decl_stmt java.lang.String = if == throw new + + else for : if if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) return throw new + + + public public < return String public public < decl_stmt java.lang.String = return == : public public < < return public public < < return String public public < < decl_stmt java.lang.String = if == return else for : if if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) return throw new + + + protected final protected final < return String protected final protected final < decl_stmt java.lang.String = return == : protected final protected final < return String protected final protected final < decl_stmt java.lang.String = return == : protected final protected final < return String protected final protected final < decl_stmt java.lang.String = return == : public public < return String public public < decl_stmt java.lang.String = if == return else if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() != throw new + + + else return call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) Matcher String decl Set public < public < < decl_stmt java.lang.String = if == return else decl_stmt java.util.Set < = decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) = new <> call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) while call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) return protected final protected final < try return catch throw new + + + decl List decl List CharArraySet protected final protected final throws decl_stmt java.util.List < = decl_stmt org.apache.lucene.analysis.util.CharArraySet = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() * for : decl_stmt java.util.List < = call CharArraySet.addAll() call CharArraySet.addAll() call CharArraySet.addAll() call CharArraySet.addAll() call CharArraySet.addAll() return protected final < protected final < throws return decl List CharsetDecoder InputStream CharArraySet Reader protected final protected final throws decl_stmt java.util.List < = decl_stmt org.apache.lucene.analysis.util.CharArraySet = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() * for : decl_stmt java.io.InputStream = decl_stmt java.io.Reader = try = decl_stmt CharsetDecoder = = new finally return decl List protected final < protected final < if == return > decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return String public public if != decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return return public public return public public =