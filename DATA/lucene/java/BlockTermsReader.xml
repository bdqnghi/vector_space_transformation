org.apache.lucene.codecs.blockterms java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.Iterator import java.util.List import java.util.TreeMap import org.apache.lucene.codecs.BlockTermState import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.FieldsProducer import org.apache.lucene.codecs.PostingsReaderBase import org.apache.lucene.index.CorruptIndexException import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.SegmentReadState import org.apache.lucene.index.TermState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.IndexInput import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.RamUsageEstimator import class org.apache.lucene.codecs.blockterms.BlockTermsReader super super extends long TermsIndexReaderBase decl TreeMap long IndexInput PostingsReaderBase FieldAndTerm public public decl_stmt FieldAndTerm = return call FieldAndTerm.field() call FieldAndTerm.field() call FieldAndTerm.field() call FieldAndTerm.field() call FieldAndTerm.field() call FieldAndTerm.field() call FieldAndTerm.field() call FieldAndTerm.field() call FieldAndTerm.field() && public public return new public public return * + long private private throws - - decl_stmt long = public public throws try try if != call TermsIndexReaderBase.close() call TermsIndexReaderBase.close() call TermsIndexReaderBase.close() call TermsIndexReaderBase.close() call TermsIndexReaderBase.close() finally = if != call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() finally if != call PostingsReaderBase.close() call PostingsReaderBase.close() call PostingsReaderBase.close() call PostingsReaderBase.close() call PostingsReaderBase.close() public < public < return call decl TreeMap.keySet() call decl TreeMap.keySet() call decl TreeMap.keySet() call decl TreeMap.keySet() call decl TreeMap.keySet() public public throws assert != return call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() public public return call decl TreeMap.size() call decl TreeMap.size() call decl TreeMap.size() call decl TreeMap.size() call decl TreeMap.size() public public return public public throws return new public public return >= public public return >= public public return >= public public return public public return public public return public public throws return public public throws return boolean int int boolean int int int int int boolean public public final final throws if == throw new if if == else decl_stmt boolean = if decl_stmt int final final = if == return else if < if ! if == - = else = = if == || < = if call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt boolean = assert = = if = - else if == && ! = return = decl_stmt int = while if < decl_stmt int final final = & - + & if < if < while < - ++ ++ decl_stmt int final final = + ++ if ! = return = else if > assert == decl_stmt int final final = + return else ++ continue while ++ ++ decl_stmt int final final = decl_stmt int final final = + decl_stmt int = decl_stmt boolean = decl_stmt int final final = + < : decl_stmt int = + while < decl_stmt int final final = ++ & - ++ & if < = break else if > + return if ! && <= + if == return else return if == + break else assert if ! = return = BytesRef int boolean long public public throws if assert ! call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt int final final = decl_stmt boolean = decl_stmt long final final = assert while < decl_stmt org.apache.lucene.util.BytesRef = assert != = = return int private private throws if == && ! = return decl_stmt int final final = + ++ ++ return public public return public public throws return public public throws return public public throws return call PostingsReaderBase.postings() call PostingsReaderBase.postings() call PostingsReaderBase.postings() call PostingsReaderBase.postings() call PostingsReaderBase.postings() public public assert != && instanceof assert ! || < = = TermState public public throws decl_stmt org.apache.lucene.index.TermState = return BytesRef boolean int public public throws if == throw new assert < call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt boolean = assert = = = = - assert >= - : + call BytesRef.copyBytes() call BytesRef.copyBytes() call BytesRef.copyBytes() call BytesRef.copyBytes() call BytesRef.copyBytes() decl_stmt int = - while > decl_stmt org.apache.lucene.util.BytesRef final final = assert != -- assert public public if ! throw new return int private private throws = call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if == return = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() decl_stmt int = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if < = new call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if < = new call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if == = new = new else if < = new call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() = = = return int boolean private private throws if ! decl_stmt int final final = decl_stmt boolean = == while < = if != = + for = < ++ = call PostingsReaderBase.decodeTerm() call PostingsReaderBase.decodeTerm() call PostingsReaderBase.decodeTerm() call PostingsReaderBase.decodeTerm() call PostingsReaderBase.decodeTerm() ++ = else long public public decl_stmt long = += != call PostingsReaderBase.ramBytesUsed() call PostingsReaderBase.ramBytesUsed() call PostingsReaderBase.ramBytesUsed() call PostingsReaderBase.ramBytesUsed() call PostingsReaderBase.ramBytesUsed() : += != call TermsIndexReaderBase.ramBytesUsed() call TermsIndexReaderBase.ramBytesUsed() call TermsIndexReaderBase.ramBytesUsed() call TermsIndexReaderBase.ramBytesUsed() call TermsIndexReaderBase.ramBytesUsed() : += call decl TreeMap.size() call decl TreeMap.size() call decl TreeMap.size() call decl TreeMap.size() call decl TreeMap.size() * * for : call decl TreeMap.values() call decl TreeMap.values() call decl TreeMap.values() call decl TreeMap.values() call decl TreeMap.values() += return decl List public < public < decl_stmt java.util.List < = new <> if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return + + + + + public public throws call PostingsReaderBase.checkIntegrity() call PostingsReaderBase.checkIntegrity() call PostingsReaderBase.checkIntegrity() call PostingsReaderBase.checkIntegrity() call PostingsReaderBase.checkIntegrity()