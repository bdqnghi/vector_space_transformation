org.apache.lucene.index org.apache.lucene.codecs.Codec import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.DocValuesFormat import org.apache.lucene.codecs.FieldInfosFormat import org.apache.lucene.codecs.LiveDocsFormat import org.apache.lucene.store.ChecksumIndexInput import org.apache.lucene.store.DataInput import org.apache.lucene.store.DataOutput import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.IOUtils import org.apache.lucene.util.StringHelper import org.apache.lucene.util.Version import java.io.IOException import java.io.PrintStream import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.List import java.util.Map.Entry import java.util.Map import java.util.Set import class org.apache.lucene.index.SegmentInfos super super implements Version decl Map Version long decl List int long int int int long decl List PrintStream decl byte boolean int public public return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() long long public static public static decl_stmt long = - for : if && ! decl_stmt long = if > = return public static public static throws return public static public static return public static public static throws return public public return public static public static if return else if return + else throw new + + private private if == - return else return + public public return call decl byte.clone() call decl byte.clone() call decl byte.clone() call decl byte.clone() call decl byte.clone() long public static final public static final throws decl_stmt long = try = return SegmentInfo String byte int Version int int SegmentCommitInfo int long long byte Codec decl Map long decl Map long int SegmentInfos public static final public static final throws decl_stmt int = if != throw new decl_stmt int = decl_stmt byte = new decl_stmt org.apache.lucene.index.SegmentInfos = new = = = if >= = if call SegmentInfos.luceneVersion() call SegmentInfos.luceneVersion() call SegmentInfos.luceneVersion() call SegmentInfos.luceneVersion() call SegmentInfos.luceneVersion() call SegmentInfos.luceneVersion() call SegmentInfos.luceneVersion() call SegmentInfos.luceneVersion() call SegmentInfos.luceneVersion() == throw new + + else throw new + + = = decl_stmt int = if < throw new + if > = else decl_stmt long = for = < ++ decl_stmt java.lang.String = decl_stmt byte final final decl_stmt byte = if == = new else if == throw new else throw new + decl_stmt org.apache.lucene.codecs.Codec = < decl_stmt org.apache.lucene.index.SegmentInfo = call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call org.apache.lucene.index.SegmentInfo.setCodec(Codec) call org.apache.lucene.index.SegmentInfo.setCodec(Codec) call org.apache.lucene.index.SegmentInfo.setCodec(Codec) call org.apache.lucene.index.SegmentInfo.setCodec(Codec) call org.apache.lucene.index.SegmentInfo.setCodec(Codec) += call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() decl_stmt long = decl_stmt int = if < || || call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() throw new + + + call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() decl_stmt long = decl_stmt long = decl_stmt org.apache.lucene.index.SegmentCommitInfo = new if >= call org.apache.lucene.index.SegmentCommitInfo.setFieldInfosFiles(Set) call org.apache.lucene.index.SegmentCommitInfo.setFieldInfosFiles(Set) call org.apache.lucene.index.SegmentCommitInfo.setFieldInfosFiles(Set) call org.apache.lucene.index.SegmentCommitInfo.setFieldInfosFiles(Set) call org.apache.lucene.index.SegmentCommitInfo.setFieldInfosFiles(Set) else call org.apache.lucene.index.SegmentCommitInfo.setFieldInfosFiles(Set) call org.apache.lucene.index.SegmentCommitInfo.setFieldInfosFiles(Set) call org.apache.lucene.index.SegmentCommitInfo.setFieldInfosFiles(Set) call org.apache.lucene.index.SegmentCommitInfo.setFieldInfosFiles(Set) call org.apache.lucene.index.SegmentCommitInfo.setFieldInfosFiles(Set) decl_stmt java.util.Map final final final < < decl_stmt int final final = if == = else decl_stmt java.util.Map < < = new <> for = < ++ if >= call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = call org.apache.lucene.index.SegmentCommitInfo.setDocValuesUpdatesFiles(Map) call org.apache.lucene.index.SegmentCommitInfo.setDocValuesUpdatesFiles(Map) call org.apache.lucene.index.SegmentCommitInfo.setDocValuesUpdatesFiles(Map) call org.apache.lucene.index.SegmentCommitInfo.setDocValuesUpdatesFiles(Map) call org.apache.lucene.index.SegmentCommitInfo.setDocValuesUpdatesFiles(Map) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) decl_stmt org.apache.lucene.util.Version = call org.apache.lucene.index.SegmentInfo.getVersion() call org.apache.lucene.index.SegmentInfo.getVersion() call org.apache.lucene.index.SegmentInfo.getVersion() call org.apache.lucene.index.SegmentInfo.getVersion() call org.apache.lucene.index.SegmentInfo.getVersion() if call org.apache.lucene.util.Version.onOrAfter(Version) call org.apache.lucene.util.Version.onOrAfter(Version) call org.apache.lucene.util.Version.onOrAfter(Version) call org.apache.lucene.util.Version.onOrAfter(Version) call org.apache.lucene.util.Version.onOrAfter(Version) == throw new + + + + + if >= = else = if > throw new + + + return String IOException private static private static throws decl_stmt java.lang.String final final = try return catch if call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() assert decl_stmt IOException = new + + call IOException.initCause() call IOException.initCause() call IOException.initCause() call IOException.initCause() call IOException.initCause() throw if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) throw new + + throw public static final public static final throws return new < protected protected throws return protected protected throws return String boolean IndexOutput long private private throws decl_stmt long = decl_stmt java.lang.String = = decl_stmt org.apache.lucene.store.IndexOutput = decl_stmt boolean = try = call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() = finally if = else int decl Map Version Version byte SegmentInfo public public throws if > decl_stmt org.apache.lucene.util.Version = for : decl_stmt org.apache.lucene.util.Version = if == || call org.apache.lucene.util.Version.onOrAfter(Version) call org.apache.lucene.util.Version.onOrAfter(Version) call org.apache.lucene.util.Version.onOrAfter(Version) call org.apache.lucene.util.Version.onOrAfter(Version) call org.apache.lucene.util.Version.onOrAfter(Version) == = for : decl_stmt org.apache.lucene.index.SegmentInfo = decl_stmt byte = call org.apache.lucene.index.SegmentInfo.getId() call org.apache.lucene.index.SegmentInfo.getId() call org.apache.lucene.index.SegmentInfo.getId() call org.apache.lucene.index.SegmentInfo.getId() call org.apache.lucene.index.SegmentInfo.getId() if == byte else if != throw new + + + byte call SegmentInfo.getCodec() call SegmentInfo.getCodec() call SegmentInfo.getCodec() call SegmentInfo.getCodec() call SegmentInfo.getCodec() decl_stmt int = if < || || call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() throw new + + + call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() call org.apache.lucene.index.SegmentInfo.maxDoc() + + decl_stmt java.util.Map final final final < < = call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() SegmentInfos public public try decl_stmt org.apache.lucene.index.SegmentInfos final final = = new <> for final final : assert != call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) = new <> return catch throw new public public return public public return public public return public static public static = public static public static return private static private static call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) + + + public public throws return IOException String String T long long public public throws if != if != throw new return decl_stmt long = - decl_stmt long = - decl_stmt IOException = for = decl_stmt java.lang.String = decl_stmt java.lang.String = if ! continue = if != + if == - throw new + + + else if > decl_stmt java.lang.String = try decl_stmt T = if != + return catch if == = if != + + + + + else throw public public = = = = public public if < throw new + + + = String final final if = decl_stmt java.lang.String final final = final final throws if throw new decl HashSet SegmentCommitInfo String int public < public < throws decl_stmt java.util.HashSet < = new <> if decl_stmt java.lang.String final final = if != call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() decl_stmt int final final = for = < ++ decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() return String String boolean final final throws if == throw new decl_stmt boolean = decl_stmt java.lang.String final final try decl_stmt java.lang.String final final = = = finally if ! = = return public final public final throws StringBuilder int SegmentCommitInfo public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int final final = for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.lucene.index.SegmentCommitInfo.toString() call org.apache.lucene.index.SegmentCommitInfo.toString() call org.apache.lucene.index.SegmentCommitInfo.toString() call org.apache.lucene.index.SegmentCommitInfo.toString() call org.apache.lucene.index.SegmentCommitInfo.toString() return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public < public < return public public < if == = , > else = if = long public public decl_stmt long = for : += assert <= return public public ++ if < throw new + + + + = SegmentCommitInfo boolean decl Set int decl_stmt java.util.Set final final final < = new <> decl_stmt boolean = decl_stmt int = for = = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < ++ assert >= decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() if ! && ! call decl List.set() call decl List.set() call decl List.set() call decl List.set() call decl List.set() = ++ else call decl List.set() call decl List.set() call decl List.set() call decl List.set() call decl List.set() ++ call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if ! && ! call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl List < < decl_stmt java.util.List final final final < = new <> for final final : assert != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return < public < public < return public < public < return public public return call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() public public call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public < for final final : public public call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() public public call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() return call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() return call decl List.indexOf() call decl List.indexOf() call decl List.indexOf() call decl List.indexOf() call decl List.indexOf() public public return public public return