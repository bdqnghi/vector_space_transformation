org.apache.lucene.util java.io.Closeable import java.io.EOFException import java.io.IOException import java.util.ArrayList import java.util.Comparator import java.util.List import java.util.Locale import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.store.ChecksumIndexInput import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.IndexOutput import org.apache.lucene.store.TrackingDirectoryWrapper import class org.apache.lucene.util.OfflineSorter decl Comparator long String long SortableBytesRefArray Counter String decl Comparator SortInfo BufferSize long long int int Directory int public static public static return new * Runtime long long long long long long public static public static decl_stmt java.lang.Runtime = decl_stmt long final final = call Runtime.maxMemory() call Runtime.maxMemory() call Runtime.maxMemory() call Runtime.maxMemory() call Runtime.maxMemory() decl_stmt long final final = call Runtime.totalMemory() call Runtime.totalMemory() call Runtime.totalMemory() call Runtime.totalMemory() call Runtime.totalMemory() decl_stmt long final final = call Runtime.freeMemory() call Runtime.freeMemory() call Runtime.freeMemory() call Runtime.freeMemory() call Runtime.freeMemory() decl_stmt long final final = - + decl_stmt long = / decl_stmt long final final = * if < || || * if / > = / else = return new long public public return / / / / double / public public return public public return boolean decl List TrackingDirectoryWrapper decl int int String int public public throws = new = decl_stmt java.util.List < = new <> decl_stmt int = new decl_stmt org.apache.lucene.store.TrackingDirectoryWrapper = new decl_stmt boolean = try = call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) decl_stmt int while = > call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() ++ += ++ decl_stmt int = while == if + > = + + ++ = ++ while call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt java.lang.String if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() try = call TrackingDirectoryWrapper.createTempOutput() call TrackingDirectoryWrapper.createTempOutput() call TrackingDirectoryWrapper.createTempOutput() call TrackingDirectoryWrapper.createTempOutput() call TrackingDirectoryWrapper.createTempOutput() = else = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() assert call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() == && call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() = - = return finally if == call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() long BytesRef BytesRefIterator protected protected throws try = = decl_stmt org.apache.lucene.util.BytesRef decl_stmt long = decl_stmt org.apache.lucene.util.BytesRefIterator = call org.apache.lucene.util.SortableBytesRefArray.iterator(Comparator) call org.apache.lucene.util.SortableBytesRefArray.iterator(Comparator) call org.apache.lucene.util.SortableBytesRefArray.iterator(Comparator) call org.apache.lucene.util.SortableBytesRefArray.iterator(Comparator) call org.apache.lucene.util.SortableBytesRefArray.iterator(Comparator) += - while = call BytesRefIterator.next() call BytesRefIterator.next() call BytesRefIterator.next() call BytesRefIterator.next() call BytesRefIterator.next() != assert <= call SortableBytesRefArray.clear() call SortableBytesRefArray.clear() call SortableBytesRefArray.clear() call SortableBytesRefArray.clear() call SortableBytesRefArray.clear() return private private throws try = call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) String BytesRef FileAndTop decl List decl PriorityQueue long decl ByteSequencesReader < throws decl_stmt long = decl_stmt java.util.List < if > = - else = decl_stmt org.apache.lucene.util.PriorityQueue < = new < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() protected protected return call decl Comparator.compare() call decl Comparator.compare() call decl Comparator.compare() call decl Comparator.compare() call decl Comparator.compare() < decl_stmt ByteSequencesReader = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.lang.String = try = = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ = call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.util.BytesRef = try = catch assert != call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() new decl_stmt FileAndTop while = call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() != try = catch if != call decl PriorityQueue.updateTop() call decl PriorityQueue.updateTop() call decl PriorityQueue.updateTop() call decl PriorityQueue.updateTop() call decl PriorityQueue.updateTop() else call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() for : += - ++ finally call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() ++ protected protected return call decl Comparator.compare() call decl Comparator.compare() call decl Comparator.compare() call decl Comparator.compare() call decl Comparator.compare() < long int BytesRef throws decl_stmt long = if != - decl_stmt int = / for = < ++ decl_stmt org.apache.lucene.util.BytesRef = try = catch if == break call org.apache.lucene.util.SortableBytesRefArray.append(BytesRef) call org.apache.lucene.util.SortableBytesRefArray.append(BytesRef) call org.apache.lucene.util.SortableBytesRefArray.append(BytesRef) call org.apache.lucene.util.SortableBytesRefArray.append(BytesRef) call org.apache.lucene.util.SortableBytesRefArray.append(BytesRef) else while decl_stmt org.apache.lucene.util.BytesRef = try = catch if == break call org.apache.lucene.util.SortableBytesRefArray.append(BytesRef) call org.apache.lucene.util.SortableBytesRefArray.append(BytesRef) call org.apache.lucene.util.SortableBytesRefArray.append(BytesRef) call org.apache.lucene.util.SortableBytesRefArray.append(BytesRef) call org.apache.lucene.util.SortableBytesRefArray.append(BytesRef) if call Counter.get() call Counter.get() call Counter.get() call Counter.get() call Counter.get() > break += - return call org.apache.lucene.util.SortableBytesRefArray.size() call org.apache.lucene.util.SortableBytesRefArray.size() call org.apache.lucene.util.SortableBytesRefArray.size() call org.apache.lucene.util.SortableBytesRefArray.size() call org.apache.lucene.util.SortableBytesRefArray.size() protected protected throws return new protected protected throws return new public final public final throws assert != public final public final throws public public throws assert != assert >= && + <= assert >= if > throw new + + + short public public throws short public public throws if >= return decl_stmt short = return public public throws public < public < return