org.apache.solr.client.solrj java.util.ArrayList import java.util.Collections import java.util.Date import java.util.List import java.util.Locale import java.util.regex.Pattern import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.FacetParams import org.apache.solr.common.params.HighlightParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.StatsParams import org.apache.solr.common.params.TermsParams import class org.apache.solr.client.solrj.SolrQuery super super extends decl List Pattern String public public return == : public public if else return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return - public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public if == throw new if == throw new for : return public public while return public public return boolean public public decl_stmt boolean = if == && == return public public if else return public public return public public + + + return public public return public public return boolean public public decl_stmt boolean = if == && == return public public return public public return public public return public public return public public return public public return public public return public public return boolean public public decl_stmt boolean = if == return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public = return public public < = new <> return public < public < if == return else return public public return new public public return public public return new public public if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return new SortClause public public if != for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt SortClause = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call SortClause.getItem() call SortClause.getItem() call SortClause.getItem() call SortClause.getItem() call SortClause.getItem() call decl List.set() call decl List.set() call decl List.set() call decl List.set() call decl List.set() return return public public return public public if != for : if call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() = break return StringBuilder private private if == || call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() else decl_stmt java.lang.StringBuilder = new for : if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public public public public public public public if == else for : + + + public public if == else + + + public public return public public return public public return public public return public public return public public if else return StringBuilder public public if == || == return decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return public public return String public public decl_stmt java.lang.String = if != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = return String public public decl_stmt java.lang.String = if if ! call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) + else call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) return public public return public public return public public if == else return public public return public public public public public public if == else return public public return public public return public public return public public return public public return SolrQuery public public decl_stmt org.apache.solr.client.solrj.SolrQuery = new for : call org.apache.solr.client.solrj.SolrQuery.setParam(String,boolean) call org.apache.solr.client.solrj.SolrQuery.setParam(String,boolean) call org.apache.solr.client.solrj.SolrQuery.setParam(String,boolean) call org.apache.solr.client.solrj.SolrQuery.setParam(String,boolean) call org.apache.solr.client.solrj.SolrQuery.setParam(String,boolean) return public public if == else return public public return private private return + + StringBuilder private private decl_stmt java.lang.StringBuilder = new if != && > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != && > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() String private private decl_stmt java.lang.String = = return StringBuilder private private decl_stmt java.lang.StringBuilder = new for = < ++ if ! if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public static public static return new public static public static return new public static public static return new public static public static return new public public return public public return SortClause public public if == return if ! instanceof return decl_stmt SortClause final final = return call SortClause.getItem() call SortClause.getItem() call SortClause.getItem() call SortClause.getItem() call SortClause.getItem() && call SortClause.getOrder() call SortClause.getOrder() call SortClause.getOrder() call SortClause.getOrder() call SortClause.getOrder() public public return public public return + + + + + +