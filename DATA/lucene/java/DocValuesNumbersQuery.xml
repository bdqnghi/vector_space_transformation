org.apache.lucene.search org.apache.lucene.document.NumericDocValuesField import org.apache.lucene.document.SortedNumericDocValuesField import org.apache.lucene.index.DocValues import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.SortedNumericDocValues import org.apache.lucene.util.Bits import java.io.IOException import java.util.Arrays import java.util.HashSet import java.util.Objects import java.util.Set import class org.apache.lucene.search.DocValuesNumbersQuery super super extends String decl Set DocValuesNumbersQuery public public if ! return decl_stmt org.apache.lucene.search.DocValuesNumbersQuery = if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return return call decl Set.equals() call decl Set.equals() call decl Set.equals() call decl Set.equals() call decl Set.equals() public public return * + public public return public < public < return StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() - return call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) int SortedNumericDocValues public public throws return new protected protected throws decl_stmt SortedNumericDocValues final final = return new public public call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() decl_stmt int = call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() for = < ++ if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() return return public public return int SortedNumericDocValues protected protected throws decl_stmt SortedNumericDocValues final final = return new public public call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() decl_stmt int = call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() for = < ++ if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() return return public public return int public public decl_stmt int = for = < ++ if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return return public public return