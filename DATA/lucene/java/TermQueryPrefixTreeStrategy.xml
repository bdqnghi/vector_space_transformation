org.apache.lucene.spatial.prefix java.util.ArrayList import java.util.List import org.locationtech.spatial4j.shape.Point import org.locationtech.spatial4j.shape.Shape import org.apache.lucene.queries.TermsQuery import org.apache.lucene.search.Query import org.apache.lucene.spatial.prefix.tree.Cell import org.apache.lucene.spatial.prefix.tree.CellIterator import org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree import org.apache.lucene.spatial.query.SpatialArgs import org.apache.lucene.spatial.query.SpatialOperation import org.apache.lucene.spatial.query.UnsupportedSpatialOperation import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import class org.apache.lucene.spatial.prefix.TermQueryPrefixTreeStrategy super super extends boolean protected protected return new public public if ! return return public public if ! return return BytesRef decl List CellIterator Cell Shape int int BytesRefBuilder SpatialOperation public public decl_stmt org.apache.lucene.spatial.query.SpatialOperation final final = if != throw new decl_stmt java.awt.Shape = decl_stmt int = decl_stmt int final final if instanceof = else = decl_stmt org.apache.lucene.util.BytesRefBuilder = new decl_stmt java.util.List < = new <> decl_stmt org.apache.lucene.spatial.prefix.tree.CellIterator = while call CellIterator.hasNext() call CellIterator.hasNext() call CellIterator.hasNext() call CellIterator.hasNext() call CellIterator.hasNext() decl_stmt org.apache.lucene.spatial.prefix.tree.Cell = call org.apache.lucene.spatial.prefix.tree.CellIterator.next() call org.apache.lucene.spatial.prefix.tree.CellIterator.next() call org.apache.lucene.spatial.prefix.tree.CellIterator.next() call org.apache.lucene.spatial.prefix.tree.CellIterator.next() call org.apache.lucene.spatial.prefix.tree.CellIterator.next() if ! call org.apache.lucene.spatial.prefix.tree.Cell.isLeaf() call org.apache.lucene.spatial.prefix.tree.Cell.isLeaf() call org.apache.lucene.spatial.prefix.tree.Cell.isLeaf() call org.apache.lucene.spatial.prefix.tree.Cell.isLeaf() call org.apache.lucene.spatial.prefix.tree.Cell.isLeaf() continue decl_stmt org.apache.lucene.util.BytesRef = call Cell.getTokenBytesNoLeaf() call Cell.getTokenBytesNoLeaf() call Cell.getTokenBytesNoLeaf() call Cell.getTokenBytesNoLeaf() call Cell.getTokenBytesNoLeaf() call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() + call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) = = call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : = call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() return new