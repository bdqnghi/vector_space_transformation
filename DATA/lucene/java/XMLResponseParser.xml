org.apache.solr.client.solrj.impl javax.xml.stream.XMLInputFactory import javax.xml.stream.XMLStreamConstants import javax.xml.stream.XMLStreamException import javax.xml.stream.XMLStreamReader import java.io.InputStream import java.io.Reader import java.lang.invoke.MethodHandles import java.time.Instant import java.util.ArrayList import java.util.Date import java.util.List import java.util.Locale import org.apache.solr.client.solrj.ResponseParser import org.apache.solr.common.EmptyEntityResolver import org.apache.solr.common.SolrDocument import org.apache.solr.common.SolrDocumentList import org.apache.solr.common.SolrException import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.common.util.XMLErrorLogger import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.client.solrj.impl.XMLResponseParser super super extends XMLErrorLogger String Logger XMLInputFactory public public return public public return XMLStreamReader public < public < decl_stmt XMLStreamReader = try = call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() catch throw new return XMLStreamReader public < public < decl_stmt XMLStreamReader = try = call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() catch throw new return decl NamedList String private < private < try decl_stmt org.apache.solr.common.util.NamedList < = for = != = switch case if != throw new decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return new <> else throw new + + break return catch throw new finally try catch public public return public public return public public return public public return public public return public public return public public return public public try return new catch return public public return public public return public public return public public return public static public static if != try return catch return int decl NamedList String StringBuilder int KnownType protected < protected < throws if != throw new + decl_stmt java.lang.StringBuilder = new decl_stmt org.apache.solr.common.util.NamedList < = new <> decl_stmt KnownType = decl_stmt java.lang.String = decl_stmt int = while switch case ++ call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() = if == throw new + = decl_stmt int = for = < ++ if = break if ! switch case call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() -- continue case call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() -- continue case call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() -- continue case call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() -- continue throw new break case if -- < return call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call KnownType.read() call KnownType.read() call KnownType.read() call KnownType.read() call KnownType.read() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() break case case case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break Object StringBuilder int KnownType decl List KnownType protected < protected < throws if != throw new + if ! throw new + decl_stmt java.lang.StringBuilder = new decl_stmt KnownType = decl_stmt java.util.List < = new <> decl_stmt int = while switch case ++ decl_stmt KnownType = if == throw new + if == = = call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() if ! switch case call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() -- continue case call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() -- continue case call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() -- continue case call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() -- continue throw new break case if -- < return decl_stmt java.lang.Object = call KnownType.read() call KnownType.read() call KnownType.read() call KnownType.read() call KnownType.read() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if == && != throw new + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() break case case case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break SolrDocumentList String int String protected protected throws decl_stmt org.apache.solr.common.SolrDocumentList = new for = < ++ decl_stmt java.lang.String = decl_stmt java.lang.String = if call org.apache.solr.common.SolrDocumentList.setNumFound(long) call org.apache.solr.common.SolrDocumentList.setNumFound(long) call org.apache.solr.common.SolrDocumentList.setNumFound(long) call org.apache.solr.common.SolrDocumentList.setNumFound(long) call org.apache.solr.common.SolrDocumentList.setNumFound(long) else if call org.apache.solr.common.SolrDocumentList.setStart(long) call org.apache.solr.common.SolrDocumentList.setStart(long) call org.apache.solr.common.SolrDocumentList.setStart(long) call org.apache.solr.common.SolrDocumentList.setStart(long) call org.apache.solr.common.SolrDocumentList.setStart(long) else if call org.apache.solr.common.SolrDocumentList.setMaxScore(Float) call org.apache.solr.common.SolrDocumentList.setMaxScore(Float) call org.apache.solr.common.SolrDocumentList.setMaxScore(Float) call org.apache.solr.common.SolrDocumentList.setMaxScore(Float) call org.apache.solr.common.SolrDocumentList.setMaxScore(Float) decl_stmt int while = if == if ! throw new + + + call SolrDocumentList.add() call SolrDocumentList.add() call SolrDocumentList.add() call SolrDocumentList.add() call SolrDocumentList.add() else if == return int String Object SolrDocument StringBuilder int KnownType int protected protected throws if != throw new + if ! throw new + decl_stmt org.apache.solr.common.SolrDocument = new decl_stmt java.lang.StringBuilder = new decl_stmt KnownType = decl_stmt java.lang.String = decl_stmt int = while switch case ++ call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() = if == throw new + = decl_stmt int = for = < ++ if = break while == call org.apache.solr.common.SolrDocument.addChildDocument(SolrDocument) call org.apache.solr.common.SolrDocument.addChildDocument(SolrDocument) call org.apache.solr.common.SolrDocument.addChildDocument(SolrDocument) call org.apache.solr.common.SolrDocument.addChildDocument(SolrDocument) call org.apache.solr.common.SolrDocument.addChildDocument(SolrDocument) decl_stmt int = if == return if == throw new + if == for : call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) -- else if == call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) -- else if ! + throw new break case if -- < return decl_stmt java.lang.Object = call KnownType.read() call KnownType.read() call KnownType.read() call KnownType.read() call KnownType.read() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if == throw new + call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) break case case case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break