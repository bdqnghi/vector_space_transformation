org.apache.solr.schema java.io.IOException import java.io.Reader import java.io.StringReader import java.lang.invoke.MethodHandles import java.lang.reflect.Constructor import java.util.Iterator import java.util.LinkedList import java.util.List import java.util.Map import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.Tokenizer import org.apache.lucene.document.Field import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.IndexableField import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.queries.function.valuesource.SortedSetFieldSource import org.apache.lucene.search.SortField import org.apache.lucene.uninverting.UninvertingReader.Type import org.apache.lucene.util.AttributeFactory import org.apache.lucene.util.AttributeSource import org.apache.lucene.util.AttributeSource.State import org.apache.solr.analysis.SolrAnalyzer import org.apache.solr.response.TextResponseWriter import org.apache.solr.search.QParser import org.apache.solr.search.Sorting import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.common.params.CommonParams.JSON import class org.apache.solr.schema.PreAnalyzedField super super extends String String PreAnalyzedParser Logger PreAnalyzedAnalyzer decl Constructor decl Class String public public < decl_stmt java.lang.String = if == = new else if = new else if = new else try decl_stmt java.lang.Class < extends extends = decl_stmt java.lang.reflect.Constructor < = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() new < = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() new catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + = new = new public public return Analyzer public public decl_stmt org.apache.lucene.analysis.Analyzer = return instanceof : IndexableField public public decl_stmt org.apache.lucene.index.IndexableField = try = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + return return public public return public public return new public public return public public throws public public throws return call org.apache.solr.schema.PreAnalyzedParser.toFormattedString(Field) call org.apache.solr.schema.PreAnalyzedParser.toFormattedString(Field) call org.apache.solr.schema.PreAnalyzedParser.toFormattedString(Field) call org.apache.solr.schema.PreAnalyzedParser.toFormattedString(Field) call org.apache.solr.schema.PreAnalyzedParser.toFormattedString(Field) decl org decl apache public static public static if ! && ! if call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + return decl_stmt org.apache.solr.schema.FieldType = new call decl org.setTokenized() call decl org.setTokenized() call decl org.setTokenized() call decl org.setTokenized() call decl org.setTokenized() call decl org.setStored() call decl org.setStored() call decl org.setStored() call decl org.setStored() call decl org.setStored() call decl org.setOmitNorms() call decl org.setOmitNorms() call decl org.setOmitNorms() call decl org.setOmitNorms() call decl org.setOmitNorms() decl_stmt IndexOptions = if = else if = else if = call decl org.setIndexOptions() call decl org.setIndexOptions() call decl org.setIndexOptions() call decl org.setIndexOptions() call decl org.setIndexOptions() call decl org.setStoreTermVectors() call decl org.setStoreTermVectors() call decl org.setStoreTermVectors() call decl org.setStoreTermVectors() call decl org.setStoreTermVectors() call decl org.setStoreTermVectorOffsets() call decl org.setStoreTermVectorOffsets() call decl org.setStoreTermVectorOffsets() call decl org.setStoreTermVectorOffsets() call decl org.setStoreTermVectorOffsets() call decl org.setStoreTermVectorPositions() call decl org.setStoreTermVectorPositions() call decl org.setStoreTermVectorPositions() call decl org.setStoreTermVectorPositions() call decl org.setStoreTermVectorPositions() call decl org.setStoreTermVectorPayloads() call decl org.setStoreTermVectorPayloads() call decl org.setStoreTermVectorPayloads() call decl org.setStoreTermVectorPayloads() call decl org.setStoreTermVectorPayloads() return PreAnalyzedTokenizer decl apache decl org Reader public public throws if == || == return decl_stmt PreAnalyzedTokenizer = new decl_stmt java.io.Reader = new call PreAnalyzedTokenizer.setReader() call PreAnalyzedTokenizer.setReader() call PreAnalyzedTokenizer.setReader() call PreAnalyzedTokenizer.setReader() call PreAnalyzedTokenizer.setReader() call PreAnalyzedTokenizer.decodeInput() call PreAnalyzedTokenizer.decodeInput() call PreAnalyzedTokenizer.decodeInput() call PreAnalyzedTokenizer.decodeInput() call PreAnalyzedTokenizer.decodeInput() call PreAnalyzedTokenizer.reset() call PreAnalyzedTokenizer.reset() call PreAnalyzedTokenizer.reset() call PreAnalyzedTokenizer.reset() call PreAnalyzedTokenizer.reset() decl_stmt org.apache.solr.schema.FieldType = if == call PreAnalyzedTokenizer.close() call PreAnalyzedTokenizer.close() call PreAnalyzedTokenizer.close() call PreAnalyzedTokenizer.close() call PreAnalyzedTokenizer.close() return decl_stmt org.apache.solr.handler.dataimport.config.Field = if call PreAnalyzedTokenizer.getStringValue() call PreAnalyzedTokenizer.getStringValue() call PreAnalyzedTokenizer.getStringValue() call PreAnalyzedTokenizer.getStringValue() call PreAnalyzedTokenizer.getStringValue() != if = new call PreAnalyzedTokenizer.getStringValue() call PreAnalyzedTokenizer.getStringValue() call PreAnalyzedTokenizer.getStringValue() call PreAnalyzedTokenizer.getStringValue() call PreAnalyzedTokenizer.getStringValue() else call decl org.setStored() call decl org.setStored() call decl org.setStored() call decl org.setStored() call decl org.setStored() else if call PreAnalyzedTokenizer.getBinaryValue() call PreAnalyzedTokenizer.getBinaryValue() call PreAnalyzedTokenizer.getBinaryValue() call PreAnalyzedTokenizer.getBinaryValue() call PreAnalyzedTokenizer.getBinaryValue() != if = new call PreAnalyzedTokenizer.getBinaryValue() call PreAnalyzedTokenizer.getBinaryValue() call PreAnalyzedTokenizer.getBinaryValue() call PreAnalyzedTokenizer.getBinaryValue() call PreAnalyzedTokenizer.getBinaryValue() else call decl org.setStored() call decl org.setStored() call decl org.setStored() call decl org.setStored() call decl org.setStored() if call PreAnalyzedTokenizer.hasTokenStream() call PreAnalyzedTokenizer.hasTokenStream() call PreAnalyzedTokenizer.hasTokenStream() call PreAnalyzedTokenizer.hasTokenStream() call PreAnalyzedTokenizer.hasTokenStream() if call decl org.setTokenized() call decl org.setTokenized() call decl org.setTokenized() call decl org.setTokenized() call decl org.setTokenized() if != call decl apache.setTokenStream() call decl apache.setTokenStream() call decl apache.setTokenStream() call decl apache.setTokenStream() call decl apache.setTokenStream() else = new else if != call decl apache.fieldType() call decl apache.fieldType() call decl apache.fieldType() call decl apache.fieldType() call decl apache.fieldType() call decl apache.fieldType() call decl apache.fieldType() call decl apache.fieldType() call decl apache.fieldType() call decl apache.fieldType() if != call decl apache.setBoost() call decl apache.setBoost() call decl apache.setBoost() call decl apache.setBoost() call decl apache.setBoost() return public public return ! public public return public public return decl AttributeSource public final public final if ! return decl_stmt sun.security.provider.certpath.State = call decl AttributeSource.clone() call decl AttributeSource.clone() call decl AttributeSource.clone() call decl AttributeSource.clone() call decl AttributeSource.clone() return IOException public final public final throws if != decl_stmt IOException = new = throw = private private = ParseResult private private throws = = try decl_stmt ParseResult = call PreAnalyzedParser.parse() call PreAnalyzedParser.parse() call PreAnalyzedParser.parse() call PreAnalyzedParser.parse() call PreAnalyzedParser.parse() if != = = if != catch throw PreAnalyzedTokenizer protected protected decl_stmt PreAnalyzedTokenizer final final = new return new protected protected final final try call PreAnalyzedTokenizer.decodeInput() call PreAnalyzedTokenizer.decodeInput() call PreAnalyzedTokenizer.decodeInput() call PreAnalyzedTokenizer.decodeInput() call PreAnalyzedTokenizer.decodeInput() catch call PreAnalyzedTokenizer.setReaderConsumptionException() call PreAnalyzedTokenizer.setReaderConsumptionException() call PreAnalyzedTokenizer.setReaderConsumptionException() call PreAnalyzedTokenizer.setReaderConsumptionException() call PreAnalyzedTokenizer.setReaderConsumptionException() protected protected final final try catch