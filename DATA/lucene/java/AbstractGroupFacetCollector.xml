org.apache.lucene.search.grouping org.apache.lucene.search.Collector import org.apache.lucene.search.Scorer import org.apache.lucene.search.SimpleCollector import org.apache.lucene.util.BytesRef import org.apache.lucene.util.PriorityQueue import java.io.IOException import java.util.* import class org.apache.lucene.search.grouping.AbstractGroupFacetCollector super super extends String decl List int String int int BytesRef decl int int BytesRef GroupedFacetResult SegmentResultPriorityQueue SegmentResult int int public public throws if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = decl_stmt int = decl_stmt int = decl_stmt SegmentResultPriorityQueue = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : += if >= continue += call SegmentResultPriorityQueue.add() call SegmentResultPriorityQueue.add() call SegmentResultPriorityQueue.add() call SegmentResultPriorityQueue.add() call SegmentResultPriorityQueue.add() decl_stmt GroupedFacetResult = new while call SegmentResultPriorityQueue.size() call SegmentResultPriorityQueue.size() call SegmentResultPriorityQueue.size() call SegmentResultPriorityQueue.size() call SegmentResultPriorityQueue.size() > decl_stmt SegmentResult = call SegmentResultPriorityQueue.top() call SegmentResultPriorityQueue.top() call SegmentResultPriorityQueue.top() call SegmentResultPriorityQueue.top() call SegmentResultPriorityQueue.top() decl_stmt org.apache.lucene.util.BytesRef = decl_stmt int = do += ++ if < call SegmentResult.nextTerm() call SegmentResult.nextTerm() call SegmentResult.nextTerm() call SegmentResult.nextTerm() call SegmentResult.nextTerm() = call SegmentResultPriorityQueue.updateTop() call SegmentResultPriorityQueue.updateTop() call SegmentResultPriorityQueue.updateTop() call SegmentResultPriorityQueue.updateTop() call SegmentResultPriorityQueue.updateTop() else call SegmentResultPriorityQueue.pop() call SegmentResultPriorityQueue.pop() call SegmentResultPriorityQueue.pop() call SegmentResultPriorityQueue.pop() call SegmentResultPriorityQueue.pop() = call SegmentResultPriorityQueue.top() call SegmentResultPriorityQueue.top() call SegmentResultPriorityQueue.top() call SegmentResultPriorityQueue.top() call SegmentResultPriorityQueue.top() if == break call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRef.equals(Object) call GroupedFacetResult.addFacetCount() call GroupedFacetResult.addFacetCount() call GroupedFacetResult.addFacetCount() call GroupedFacetResult.addFacetCount() call GroupedFacetResult.addFacetCount() return public public throws public public return int public public decl_stmt int = - if != return return public public return FacetEntry public public if < return decl_stmt FacetEntry = new if == if == return if == = int int decl List public < public < decl_stmt java.util.List < = new <> decl_stmt int = decl_stmt int = for : if < ++ continue if ++ >= break call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return public public return FacetEntry public public if == return if == || != return decl_stmt FacetEntry = if != return if ! return return int public public decl_stmt int = = * + return public public return + + + + + public public return public public return protected protected return <