org.apache.solr.hadoop java.io.File import java.io.FileInputStream import java.io.FileOutputStream import java.io.IOException import java.io.InputStream import java.lang.invoke.MethodHandles import java.net.URI import java.nio.charset.StandardCharsets import java.nio.file.Files import java.util.Arrays import java.util.HashSet import java.util.Locale import java.util.Set import java.util.UUID import java.util.zip.ZipEntry import java.util.zip.ZipOutputStream import org.apache.hadoop.conf.Configuration import org.apache.hadoop.filecache.DistributedCache import org.apache.hadoop.fs.FileSystem import org.apache.hadoop.fs.Path import org.apache.hadoop.mapreduce.Job import org.apache.hadoop.mapreduce.JobContext import org.apache.hadoop.mapreduce.RecordWriter import org.apache.hadoop.mapreduce.TaskAttemptContext import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat import org.slf4j.Logger import org.slf4j.LoggerFactory import class super super extends String Logger String String int int String String String int String String public static public static return public static public static public static public static return public static public static public static public static return public static public static return public static public static public static public static return public static public static return public public throws if == throw new int Path public < public < throws decl_stmt java.nio.file.Path = decl_stmt int = return new <> File public static public static throws decl_stmt File = public static public static throws return File private static private static throws if == || ! && throw new + decl_stmt File = return Configuration FileSystem String URI Path public static public static throws decl_stmt java.lang.String = + + decl_stmt Configuration = call Configuration.set() call Configuration.set() call Configuration.set() call Configuration.set() call Configuration.set() decl_stmt java.nio.file.Path = new decl_stmt java.io.FileSystem = call FileSystem.copyFromLocalFile() call FileSystem.copyFromLocalFile() call FileSystem.copyFromLocalFile() call FileSystem.copyFromLocalFile() call FileSystem.copyFromLocalFile() new decl_stmt java.net.URI final final = call FileSystem.getUri() call FileSystem.getUri() call FileSystem.getUri() call FileSystem.getUri() call FileSystem.getUri() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() + + call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Configuration.set() call Configuration.set() call Configuration.set() call Configuration.set() call Configuration.set() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() decl HashSet int ZipEntry InputStream boolean int ZipOutputStream decl byte File private static private static throws decl_stmt java.util.HashSet < = new <> for : decl_stmt File = new decl_stmt boolean if ! = call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() && throw new if ! continue decl_stmt int = decl_stmt java.util.zip.ZipOutputStream = new new decl_stmt byte = new for : decl_stmt java.util.zip.ZipEntry = new call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) decl_stmt java.io.InputStream = new decl_stmt int while = call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) call java.io.InputStream.read(byte) >= call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call ZipOutputStream.flush() call ZipOutputStream.flush() call ZipOutputStream.flush() call ZipOutputStream.flush() call ZipOutputStream.flush() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() decl_stmt java.util.zip.ZipEntry = new call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.putNextEntry(ZipEntry) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call java.util.zip.ZipOutputStream.write(byte,int,int) call ZipOutputStream.flush() call ZipOutputStream.flush() call ZipOutputStream.flush() call ZipOutputStream.flush() call ZipOutputStream.flush() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.closeEntry() call java.util.zip.ZipOutputStream.close() call java.util.zip.ZipOutputStream.close() call java.util.zip.ZipOutputStream.close() call java.util.zip.ZipOutputStream.close() call java.util.zip.ZipOutputStream.close() decl File private static private static < throws decl_stmt File = if == && return for : if else public static public static return public static public static