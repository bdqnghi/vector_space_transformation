org.apache.solr.handler.clustering.carrot2 java.util.Collection import java.util.Set import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.util.CharArraySet import org.apache.lucene.analysis.util.TokenFilterFactory import org.apache.lucene.analysis.commongrams.CommonGramsFilterFactory import org.apache.lucene.analysis.core.StopFilterFactory import org.apache.solr.analysis.TokenizerChain import org.apache.solr.core.SolrCore import org.carrot2.core.LanguageCode import org.carrot2.core.attribute.Init import org.carrot2.core.attribute.Processing import org.carrot2.text.linguistic.DefaultLexicalDataFactory import org.carrot2.text.linguistic.ILexicalData import org.carrot2.text.linguistic.ILexicalDataFactory import org.carrot2.text.util.MutableCharArray import org.carrot2.util.attribute.Attribute import org.carrot2.util.attribute.Bindable import org.carrot2.util.attribute.Input import com.google.common.collect.HashMultimap import com.google.common.collect.Multimap import class annotation org.apache.solr.handler.clustering.carrot2.SolrStopwordsCarrot2LexicalDataFactory super super implements SolrCore DefaultLexicalDataFactory decl Multimap decl Set decl TokenFilterFactory Analyzer private < private < if ! call decl Multimap.containsKey() call decl Multimap.containsKey() call decl Multimap.containsKey() call decl Multimap.containsKey() call decl Multimap.containsKey() decl_stmt org.apache.lucene.analysis.Analyzer final final = call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() if instanceof decl_stmt org.apache.lucene.analysis.util.TokenFilterFactory final final final = for : if instanceof call decl Multimap.put() call decl Multimap.put() call decl Multimap.put() call decl Multimap.put() call decl Multimap.put() if instanceof call decl Multimap.put() call decl Multimap.put() call decl Multimap.put() call decl Multimap.put() call decl Multimap.put() return call decl Multimap.get() call decl Multimap.get() call decl Multimap.get() call decl Multimap.get() call decl Multimap.get() ILexicalData public public decl_stmt ILexicalData final final = call DefaultLexicalDataFactory.getLexicalData() call DefaultLexicalDataFactory.getLexicalData() call DefaultLexicalDataFactory.getLexicalData() call DefaultLexicalDataFactory.getLexicalData() call DefaultLexicalDataFactory.getLexicalData() return new public public return call ILexicalData.isStopLabel() call ILexicalData.isStopLabel() call ILexicalData.isStopLabel() call ILexicalData.isStopLabel() call ILexicalData.isStopLabel() public public for : for : if return return call ILexicalData.isCommonWord() call ILexicalData.isCommonWord() call ILexicalData.isCommonWord() call ILexicalData.isCommonWord() call ILexicalData.isCommonWord() public public return public public for : for : if return return