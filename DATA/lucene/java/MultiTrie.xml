org.egothor.stemmer java.io.DataInput import java.io.DataOutput import java.io.IOException import java.io.PrintStream import java.util.ArrayList import java.util.List import class org.egothor.stemmer.MultiTrie super super extends decl List String int char CharSequence StringBuilder public public decl_stmt java.lang.StringBuilder = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() * for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt java.lang.CharSequence = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if == || call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() == && call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) == return call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return CharSequence StringBuilder public public decl_stmt java.lang.StringBuilder = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() * for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt java.lang.CharSequence = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if == || call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() == && call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) == return call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return public public throws call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : int public public if == return decl_stmt int = / while >= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new for = < ++ call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() * * + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl List MultiTrie public public decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt org.egothor.stemmer.MultiTrie = new = return int public public decl_stmt int = for : + + ++ +