org.apache.lucene.queries.function.valuesource org.apache.lucene.index.LeafReaderContext import org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.util.BytesRefBuilder import java.io.IOException import java.util.List import java.util.Map import class org.apache.lucene.queries.function.valuesource.DefFunction super super extends protected protected return int FunctionValues public public throws return new decl_stmt int final final = - private private for = < ++ decl_stmt org.apache.lucene.queries.function.FunctionValues = if call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) return return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public for : if call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) return return public public return FunctionValues private private for = < ++ decl_stmt org.apache.lucene.queries.function.FunctionValues = if call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) return return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public for : if return return public public return