org.apache.lucene.store java.io.EOFException import java.io.IOException import java.nio.BufferUnderflowException import java.nio.ByteBuffer import java.util.Iterator import org.apache.lucene.util.WeakIdentityMap import class org.apache.lucene.store.ByteBufferIndexInput super super extends super implements BufferCleaner boolean long ByteBuffer int int long decl WeakIdentityMap decl ByteBuffer decl WeakIdentityMap public static public static decl_stmt org.apache.lucene.util.WeakIdentityMap final final final < = : if == return new else return new public final public final throws try return call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() catch do ++ if >= throw new + = call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() ! call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() call ByteBuffer.hasRemaining() return call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() catch throw new + int public final public final throws try call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() catch decl_stmt int = call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() while > call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() -= += ++ if >= throw new + = call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() = call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() catch throw new + public final public final throws try return call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() catch return catch throw new + public final public final throws try return call ByteBuffer.getInt() call ByteBuffer.getInt() call ByteBuffer.getInt() call ByteBuffer.getInt() call ByteBuffer.getInt() catch return catch throw new + public final public final throws try return call ByteBuffer.getLong() call ByteBuffer.getLong() call ByteBuffer.getLong() call ByteBuffer.getLong() call ByteBuffer.getLong() catch return catch throw new + public public try return long << + call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() catch throw new + ByteBuffer int public public throws decl_stmt int final final = >> try if == call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() & else decl_stmt ByteBuffer final final = call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() & = = catch throw new + catch throw new + int public public throws try decl_stmt int final final = >> return & catch throw new + catch throw new + ByteBuffer private private throws try decl_stmt ByteBuffer final final = call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() & = = catch throw new + catch throw new + int public public throws decl_stmt int final final = >> try return & catch return catch throw new + int public public throws decl_stmt int final final = >> try return & catch return catch throw new + int public public throws decl_stmt int final final = >> try return & catch return catch throw new + public final public final return ByteBufferIndexInput public final public final decl_stmt org.apache.lucene.store.ByteBufferIndexInput final final = try call org.apache.lucene.store.ByteBufferIndexInput.seek(long) call org.apache.lucene.store.ByteBufferIndexInput.seek(long) call org.apache.lucene.store.ByteBufferIndexInput.seek(long) call org.apache.lucene.store.ByteBufferIndexInput.seek(long) call org.apache.lucene.store.ByteBufferIndexInput.seek(long) catch throw new return public final public final if < || < || || + || || + throw new + + + + + + + + + return int ByteBuffer ByteBufferIndexInput protected protected if == throw new + decl_stmt ByteBuffer final final = decl_stmt int final final = & decl_stmt org.apache.lucene.store.ByteBufferIndexInput final final = = if != return protected protected if == return new else return new int int ByteBuffer long private private decl_stmt long final final = + decl_stmt int final final = >>> decl_stmt int final final = >>> decl_stmt ByteBuffer final final = new - + for = < ++ = + - & return decl ByteBuffer ByteBufferIndexInput public final public final throws try if == return decl_stmt ByteBuffer final final final = if != call decl WeakIdentityMap.remove() call decl WeakIdentityMap.remove() call decl WeakIdentityMap.remove() call decl WeakIdentityMap.remove() call decl WeakIdentityMap.remove() if return if != for < = decl_stmt org.apache.lucene.store.ByteBufferIndexInput final final = assert call org.apache.lucene.store.ByteBufferIndexInput.unsetBuffers() call org.apache.lucene.store.ByteBufferIndexInput.unsetBuffers() call org.apache.lucene.store.ByteBufferIndexInput.unsetBuffers() call org.apache.lucene.store.ByteBufferIndexInput.unsetBuffers() call org.apache.lucene.store.ByteBufferIndexInput.unsetBuffers() for final final : finally private private = = = private private throws if != call BufferCleaner.freeBuffer() call BufferCleaner.freeBuffer() call BufferCleaner.freeBuffer() call BufferCleaner.freeBuffer() call BufferCleaner.freeBuffer() public public throws try call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() int catch if < throw new + else throw new + catch throw new + public public try return call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() catch throw new + public public throws try return call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() int catch if < throw new + else throw new + catch throw new + public public throws try return call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() int catch if < throw new + else throw new + catch throw new + public public throws try return call ByteBuffer.getInt() call ByteBuffer.getInt() call ByteBuffer.getInt() call ByteBuffer.getInt() call ByteBuffer.getInt() int catch if < throw new + else throw new + catch throw new + public public throws try return call ByteBuffer.getLong() call ByteBuffer.getLong() call ByteBuffer.getLong() call ByteBuffer.getLong() call ByteBuffer.getLong() int catch if < throw new + else throw new + catch throw new + public public throws assert >= + public public return - public public throws return + public public throws return + public public throws return + public public throws return + protected protected return +