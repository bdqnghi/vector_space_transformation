org.apache.lucene.expressions java.io.IOException import java.util.Arrays import java.util.HashMap import java.util.Map import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.search.SortField import class annotation org.apache.lucene.expressions.ExpressionValueSource super super extends ValueSource Expression boolean String decl FunctionValues FunctionValues decl Map public public throws decl_stmt java.util.Map < = < if == = new <> = new decl_stmt org.apache.lucene.queries.function.FunctionValues = new for = < ++ decl_stmt java.lang.String = decl_stmt org.apache.lucene.queries.function.FunctionValues = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = if == throw new + + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = return new public public return new public public return + + int int public public decl_stmt int final final = decl_stmt int = = * + == : call Expression.hashCode() call Expression.hashCode() call Expression.hashCode() call Expression.hashCode() call Expression.hashCode() = * + : = * + return ExpressionValueSource public public if == return if == return if != return decl_stmt org.apache.lucene.expressions.ExpressionValueSource = if == if != return else if ! call sun.tools.tree.Expression.equals(int) call sun.tools.tree.Expression.equals(int) call sun.tools.tree.Expression.equals(int) call sun.tools.tree.Expression.equals(int) call sun.tools.tree.Expression.equals(int) return if != return if ! return return return