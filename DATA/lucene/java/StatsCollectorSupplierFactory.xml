org.apache.solr.analytics.statistics java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import java.util.TreeMap import com.google.common.base.Supplier import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.queries.function.valuesource.BytesRefFieldSource import org.apache.lucene.queries.function.valuesource.DoubleFieldSource import org.apache.lucene.queries.function.valuesource.FloatFieldSource import org.apache.lucene.queries.function.valuesource.IntFieldSource import org.apache.lucene.queries.function.valuesource.LongFieldSource import org.apache.solr.analytics.expression.ExpressionFactory import org.apache.solr.analytics.request.ExpressionRequest import org.apache.solr.analytics.util.AnalyticsParams import org.apache.solr.analytics.util.valuesource.AbsoluteValueDoubleFunction import org.apache.solr.analytics.util.valuesource.AddDoubleFunction import org.apache.solr.analytics.util.valuesource.ConcatStringFunction import org.apache.solr.analytics.util.valuesource.ConstDateSource import org.apache.solr.analytics.util.valuesource.ConstDoubleSource import org.apache.solr.analytics.util.valuesource.ConstStringSource import org.apache.solr.analytics.util.valuesource.DateFieldSource import org.apache.solr.analytics.util.valuesource.DateMathFunction import org.apache.solr.analytics.util.valuesource.DivDoubleFunction import org.apache.solr.analytics.util.valuesource.DualDoubleFunction import org.apache.solr.analytics.util.valuesource.FilterFieldSource import org.apache.solr.analytics.util.valuesource.LogDoubleFunction import org.apache.solr.analytics.util.valuesource.MultiDateFunction import org.apache.solr.analytics.util.valuesource.MultiDoubleFunction import org.apache.solr.analytics.util.valuesource.MultiplyDoubleFunction import org.apache.solr.analytics.util.valuesource.NegateDoubleFunction import org.apache.solr.analytics.util.valuesource.PowDoubleFunction import org.apache.solr.analytics.util.valuesource.ReverseStringFunction import org.apache.solr.analytics.util.valuesource.SingleDoubleFunction import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.schema.FieldType import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.SchemaField import org.apache.solr.schema.StrField import org.apache.solr.schema.TrieDateField import org.apache.solr.schema.TrieDoubleField import org.apache.solr.schema.TrieFloatField import org.apache.solr.schema.TrieIntField import org.apache.solr.schema.TrieLongField import org.apache.solr.util.DateMathParser import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.analytics.statistics.StatsCollectorSupplierFactory int Logger int int int int decl ValueSource String decl boolean decl Set int decl boolean decl Set decl Set decl double decl String decl boolean ValueSource decl String decl Map decl boolean String int decl Map decl Map String StatsCollector String decl Set StatsCollector decl StatsCollector decl String public static < public static < < decl_stmt java.util.Map final final final < < = new <> decl_stmt java.util.Map final final final < < = new <> decl_stmt java.util.Map final final final < = new <> for : decl_stmt java.lang.String = decl_stmt java.util.Set < = if == continue for : decl_stmt java.lang.String decl_stmt java.lang.String try = = + catch throw new + + decl_stmt java.lang.String = decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if < throw new + + + + else if > throw new + + + + = decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() try decl_stmt int = if > && < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else throw new + + catch throw new + + else if > throw new + + + + else if == throw new + + + + decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() + + else call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt java.lang.String = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() new for : decl_stmt org.apache.lucene.queries.function.ValueSource = if == throw new + + decl_stmt java.lang.String = call ValueSource.toString() call ValueSource.toString() call ValueSource.toString() call ValueSource.toString() call ValueSource.toString() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt java.util.Set < = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.util.Set < = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for : if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == return new < public public return new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() + + call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() + + call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() decl_stmt java.util.Map final final final < < = new <> decl_stmt java.util.Map final final final < < = new <> decl_stmt java.util.Map final final final < = new <> for : decl_stmt java.lang.String = decl_stmt java.util.Set < = if == continue for : decl_stmt java.lang.String decl_stmt java.lang.String try = = + catch throw new + + decl_stmt java.lang.String = decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if < throw new + + + + else if > throw new + + + + = decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() try decl_stmt int = if > && < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else throw new + + catch throw new + + else if > throw new + + + + else if == throw new + + + + decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() + + else call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt java.lang.String = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() new for : decl_stmt org.apache.lucene.queries.function.ValueSource = if == throw new + + decl_stmt java.lang.String = call ValueSource.toString() call ValueSource.toString() call ValueSource.toString() call ValueSource.toString() call ValueSource.toString() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt java.util.Set < = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.util.Set < = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for : if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == return new < public public return new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() + + call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() + + call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() decl_stmt org.apache.lucene.queries.function.ValueSource final final final = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() new decl_stmt boolean final final final = new decl_stmt boolean final final final = new decl_stmt boolean final final final = new decl_stmt boolean final final final = new decl_stmt double final final final = new decl_stmt java.lang.String final final final = new for = < ++ = = = || || || = instanceof | instanceof | instanceof decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != = new call int.size() call int.size() call int.size() call int.size() call int.size() = new call int.size() call int.size() call int.size() call int.size() call int.size() decl_stmt int = for : = / ++ = + + return new < public public decl_stmt org.apache.solr.analytics.statistics.StatsCollector = new for = < ++ if decl_stmt org.apache.solr.analytics.statistics.StatsCollector = new if = new if = new if != = new = else if decl_stmt org.apache.solr.analytics.statistics.StatsCollector = new if = new if = new if != = new = else decl_stmt org.apache.solr.analytics.statistics.StatsCollector = new if = new if = new if != = new = return public public return new StatsCollector decl StatsCollector public public decl_stmt org.apache.solr.analytics.statistics.StatsCollector = new for = < ++ if decl_stmt org.apache.solr.analytics.statistics.StatsCollector = new if = new if = new if != = new = else if decl_stmt org.apache.solr.analytics.statistics.StatsCollector = new if = new if = new if != = new = else decl_stmt org.apache.solr.analytics.statistics.StatsCollector = new if = new if = new if != = new = return int decl HashSet String String decl String decl Set public static < public static < decl_stmt java.util.HashSet < = new <> decl_stmt int = if > decl_stmt java.lang.String = if call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() else if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt java.lang.String = + decl_stmt java.lang.String = for : decl_stmt java.util.Set < = if != call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() if call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() == return return private static private static return int private static private static decl_stmt int = if != && != && != && != return switch case return case return case return case return case return + default: throw new + int String private static private static decl_stmt int = if < return decl_stmt java.lang.String = if return else if return else if return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return throw new + + + + FieldType SchemaField private static private static decl_stmt org.apache.solr.schema.SchemaField try = catch throw new + + decl_stmt org.apache.solr.schema.FieldType = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() if instanceof if != && != return return new public public return else if instanceof if != && != return return new public public return else if instanceof if != && != return return new public public return else if instanceof if != && != return return new public public return else if instanceof if != && != return return new public public return else if instanceof if != && != return return new public public return throw new call org.apache.solr.schema.FieldType.toString() call org.apache.solr.schema.FieldType.toString() call org.apache.solr.schema.FieldType.toString() call org.apache.solr.schema.FieldType.toString() call org.apache.solr.schema.FieldType.toString() + public public return public public return public public return public public return public public return public public return ValueSource ValueSource Object decl String private static private static decl_stmt java.lang.String = if != throw new + + decl_stmt org.apache.lucene.queries.function.ValueSource = if == return decl_stmt java.lang.Object decl_stmt org.apache.lucene.queries.function.ValueSource = if instanceof = if instanceof try = new catch throw new + + else if instanceof || instanceof = else if instanceof try = new catch throw new + + else if instanceof try = new catch throw new + + else if instanceof || instanceof || instanceof || instanceof try = new catch throw new + + else = return new String ValueSource decl String int String decl List private static private static decl_stmt int = decl_stmt java.lang.String decl_stmt java.lang.String if < return else try = + catch throw new + + = decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if != throw new + + return new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if != throw new + + decl_stmt org.apache.lucene.queries.function.ValueSource = if == throw new + + + + return new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if != throw new + + decl_stmt org.apache.lucene.queries.function.ValueSource = if == throw new + + + + return new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return decl_stmt java.util.List < = new <> for : decl_stmt org.apache.lucene.queries.function.ValueSource = if == throw new + + + + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() != throw new + + return new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() != throw new + + return new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() != throw new + + return new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if || return throw new + + String ValueSource decl String int String decl List boolean private static private static decl_stmt int = decl_stmt java.lang.String if < return else = + decl_stmt java.lang.String = decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if != throw new + + return new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt java.util.List < = new <> decl_stmt boolean = for : decl_stmt org.apache.lucene.queries.function.ValueSource if = = if == throw new + + + + else = if == throw new + + + + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new if || return throw new + + int String decl String String decl List private static private static decl_stmt int = decl_stmt java.lang.String if < return else = + decl_stmt java.lang.String = decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = + return new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if != throw new + + + + return new decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new if return else if return throw new + +