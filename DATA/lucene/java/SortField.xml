org.apache.lucene.search java.io.IOException import java.util.Comparator import java.util.Objects import org.apache.lucene.util.BytesRef import class org.apache.lucene.search.SortField boolean Object Object SortField String SortField Object FieldComparatorSource Type decl Comparator public public return public public return public public return public public if == || == if != && != throw new else if == if != && call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() != throw new + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() else if == if != && call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() != throw new + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() else if == if != && call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() != throw new + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() else if == if != && call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() != throw new + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() else throw new = private private = if == if != && != throw new else = public public return public public return public public return public public return StringBuilder public public decl_stmt java.lang.StringBuilder = new switch case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break default: call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() SortField public public if == return if ! instanceof return decl_stmt org.apache.lucene.search.SortField final final = return && == && == && && public public return public public < = public < public < return public < public < final final final final throws switch case return new case return new case return new case return new case return new case return new case assert != return call FieldComparatorSource.newComparator() call FieldComparatorSource.newComparator() call FieldComparatorSource.newComparator() call FieldComparatorSource.newComparator() call FieldComparatorSource.newComparator() case return new == case return new == case throw new default: throw new + public public throws return public public return ==