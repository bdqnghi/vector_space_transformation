org.apache.lucene.analysis.charfilter java.io.IOException import java.io.Reader import java.util.Map import org.apache.lucene.analysis.CharFilter import org.apache.lucene.analysis.util.RollingCharBuffer import org.apache.lucene.util.CharsRef import org.apache.lucene.util.fst.CharSequenceOutputs import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.Outputs import class org.apache.lucene.analysis.charfilter.MappingCharFilter super super extends decl FST int decl FST decl BytesReader decl Outputs decl FST RollingCharBuffer CharsRef decl Map public public throws call decl BytesReader.reset() call decl BytesReader.reset() call decl BytesReader.reset() call decl BytesReader.reset() call decl BytesReader.reset() = = int int int int int CharsRef decl FST int int int CharsRef public public throws while if != && < return + ++ decl_stmt int = - decl_stmt org.apache.lucene.util.CharsRef = decl_stmt int final final = call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() if != - decl_stmt org.apache.lucene.util.fst.FST < = call decl FST.get() call decl FST.get() call decl FST.get() call decl FST.get() call decl FST.get() char if != if ! assert call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() = = else decl_stmt int = decl_stmt org.apache.lucene.util.CharsRef = while ++ if call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() = = call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() if ! break decl_stmt int = call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() + if == - break if = call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() == break = call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() if != += decl_stmt int final final = - if != decl_stmt int final final = if > - - + else decl_stmt int final final = - for = < - ++ + - - = = else decl_stmt int final final = call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() if != - ++ call decl BytesReader.freeBefore() call decl BytesReader.freeBefore() call decl BytesReader.freeBefore() call decl BytesReader.freeBefore() call decl BytesReader.freeBefore() return int int public public throws decl_stmt int = for = < + ++ decl_stmt int = if == - break = char ++ return == - :