org.apache.solr.handler.dataimport com.sun.mail.imap.IMAPMessage import org.apache.solr.handler.data.config.ConfigNameConstants import org.apache.solr.util.RTimer import org.apache.tika.Tika import org.apache.tika.metadata.Metadata import org.slf4j.Logger import org.slf4j.LoggerFactory import javax.mail.* import javax.mail.internet.AddressException import javax.mail.internet.ContentType import javax.mail.internet.InternetAddress import javax.mail.internet.MimeMessage import javax.mail.search.* import java.io.InputStream import java.lang.invoke.MethodHandles import java.text.ParseException import java.text.SimpleDateFormat import java.util.* import com.sun.mail.gimap.GmailFolder import com.sun.mail.gimap.GmailRawSearchTerm import class org.apache.solr.handler.dataimport.MailEntityProcessor super super extends String Logger SimpleDateFormat String int String decl List String decl List String int String Date String String String decl List FolderIterator boolean FetchProfile int String boolean String String Store String String boolean String String SimpleDateFormat String String String boolean MessageIterator boolean boolean String String int String String String String String String Object String String String public public = = = = = if == || == || == || == || == throw new = call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() decl_stmt java.lang.String = if != && ! call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() decl_stmt java.lang.String = if != && ! call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) = = if != call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() = = decl_stmt java.lang.String = decl_stmt java.lang.String = if ! throw new + + decl_stmt java.lang.String = decl_stmt java.lang.String = + + + + decl_stmt java.lang.Object = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + if != && ! && ! decl_stmt java.util.Date = try = call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) if call String.getTime() call String.getTime() call String.getTime() call String.getTime() call String.getTime() == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + + + if == = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + if == || = + + = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + if != && instanceof = if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == = if == = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + = if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > try = call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + catch throw new + = * = * = * decl_stmt java.lang.String = = != && call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() = = != && call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() = String private private = decl_stmt java.lang.String = if == = if != = else = Message decl Map public < public < decl_stmt org.apache.lucene.queryparser.flexible.messages.Message = decl_stmt java.util.Map < = do = if != = if != && call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call Message.getFolder() call Message.getFolder() call Message.getFolder() call Message.getFolder() call Message.getFolder() == && != return Folder private private if ! if ! return = if == = new while == || ! call MessageIterator.hasNext() call MessageIterator.hasNext() call MessageIterator.hasNext() call MessageIterator.hasNext() call MessageIterator.hasNext() decl_stmt Folder = call FolderIterator.hasNext() call FolderIterator.hasNext() call FolderIterator.hasNext() call FolderIterator.hasNext() call FolderIterator.hasNext() call FolderIterator.next() call FolderIterator.next() call FolderIterator.next() call FolderIterator.next() call FolderIterator.next() : if == return = new return call MessageIterator.next() call MessageIterator.next() call MessageIterator.next() call MessageIterator.next() call MessageIterator.next() decl Map private < private < decl_stmt java.util.Map < = new <> try return catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + return int String decl List InputStream ContentType Metadata String Multipart String decl List String public public < throws if instanceof decl_stmt java.lang.String = decl_stmt ContentType = new if decl_stmt java.lang.Object = if != && instanceof decl_stmt Multipart = decl_stmt int = call Multipart.getCount() call Multipart.getCount() call Multipart.getCount() call Multipart.getCount() call Multipart.getCount() if = for = < ++ call Multipart.getBodyPart() call Multipart.getBodyPart() call Multipart.getBodyPart() call Multipart.getBodyPart() call Multipart.getBodyPart() else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + != call String.getClass() call String.getClass() call String.getClass() call String.getClass() call String.getClass() : + else if else decl_stmt java.lang.String = if && ! != && call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) decl_stmt java.io.InputStream = decl_stmt Metadata = new call Metadata.set() call Metadata.set() call Metadata.set() call Metadata.set() call Metadata.set() call ContentType.getBaseType() call ContentType.getBaseType() call ContentType.getBaseType() call ContentType.getBaseType() call ContentType.getBaseType() decl_stmt java.lang.String = new if == new < decl_stmt java.util.List < = < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() if ! || == || ! call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) return decl_stmt java.io.InputStream = decl_stmt java.lang.String = decl_stmt Metadata = new call Metadata.set() call Metadata.set() call Metadata.set() call Metadata.set() call Metadata.set() call ContentType.getBaseType() call ContentType.getBaseType() call ContentType.getBaseType() call ContentType.getBaseType() call ContentType.getBaseType() decl_stmt java.lang.String = new if == || call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() == return if == new < decl_stmt java.util.List < = < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() if == new < decl_stmt java.util.List < = < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() Date decl List decl List MimeMessage decl Address decl String private private < throws decl_stmt MimeMessage = decl_stmt Address if = call MimeMessage.getFrom() call MimeMessage.getFrom() call MimeMessage.getFrom() call MimeMessage.getFrom() call MimeMessage.getFrom() != && > decl_stmt java.util.List < = new <> if = call MimeMessage.getRecipients() call MimeMessage.getRecipients() call MimeMessage.getRecipients() call MimeMessage.getRecipients() call MimeMessage.getRecipients() != if = call MimeMessage.getRecipients() call MimeMessage.getRecipients() call MimeMessage.getRecipients() call MimeMessage.getRecipients() call MimeMessage.getRecipients() != if = call MimeMessage.getRecipients() call MimeMessage.getRecipients() call MimeMessage.getRecipients() call MimeMessage.getRecipients() call MimeMessage.getRecipients() != if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > call MimeMessage.getMessageID() call MimeMessage.getMessageID() call MimeMessage.getMessageID() call MimeMessage.getMessageID() call MimeMessage.getMessageID() call MimeMessage.getSubject() call MimeMessage.getSubject() call MimeMessage.getSubject() call MimeMessage.getSubject() call MimeMessage.getSubject() decl_stmt java.util.Date = call MimeMessage.getSentDate() call MimeMessage.getSentDate() call MimeMessage.getSentDate() call MimeMessage.getSentDate() call MimeMessage.getSentDate() if != decl_stmt java.util.List < = new <> for : call MimeMessage.getFlags() call MimeMessage.getFlags() call MimeMessage.getFlags() call MimeMessage.getFlags() call MimeMessage.getFlags() if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call MimeMessage.getFlags() call MimeMessage.getFlags() call MimeMessage.getFlags() call MimeMessage.getFlags() call MimeMessage.getFlags() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.lang.String = call MimeMessage.getHeader() call MimeMessage.getHeader() call MimeMessage.getHeader() call MimeMessage.getHeader() call MimeMessage.getHeader() if != InternetAddress decl InternetAddress private private < throws for : decl_stmt InternetAddress = if call InternetAddress.isGroup() call InternetAddress.isGroup() call InternetAddress.isGroup() call InternetAddress.isGroup() call InternetAddress.isGroup() decl_stmt InternetAddress = call InternetAddress.getGroup() call InternetAddress.getGroup() call InternetAddress.getGroup() call InternetAddress.getGroup() call InternetAddress.getGroup() for : int String Session Properties int String private private try decl_stmt java.util.Properties = new if != call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() if || && call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() decl_stmt java.lang.String = call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) : call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() + + + call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() + + + call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() + + + decl_stmt int = - decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if != - = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt sun.security.pkcs11.Session = = call Session.getStore() call Session.getStore() call Session.getStore() call Session.getStore() call Session.getStore() if != - call Store.connect() call Store.connect() call Store.connect() call Store.connect() call Store.connect() else call Store.connect() call Store.connect() call Store.connect() call Store.connect() call Store.connect() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + return catch decl_stmt java.lang.String = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new Object Class private private if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new if != && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) try decl_stmt java.lang.Class = decl_stmt java.lang.Object = call java.lang.Class.newInstance() call java.lang.Class.newInstance() call java.lang.Class.newInstance() call java.lang.Class.newInstance() call java.lang.Class.newInstance() if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch throw new StringBuffer String private private if ! call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() return decl_stmt java.lang.String = decl_stmt java.lang.StringBuffer = new call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > : call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() public public return ! String Folder decl Folder boolean public public try decl_stmt boolean = decl_stmt Folder do if != = if call Store.close() call Store.close() call Store.close() call Store.close() call Store.close() return = if != decl_stmt java.lang.String = call Folder.getFullName() call Folder.getFullName() call Folder.getFullName() call Folder.getFullName() call Folder.getFullName() if ! = call Folder.getType() call Folder.getType() call Folder.getType() call Folder.getType() call Folder.getType() & != call Folder.open() call Folder.open() call Folder.open() call Folder.open() call Folder.open() = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + if && call Folder.getType() call Folder.getType() call Folder.getType() call Folder.getType() call Folder.getType() & != decl_stmt Folder = call Folder.list() call Folder.list() call Folder.list() call Folder.list() call Folder.list() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) for = - >= -- call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) ! return catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return public public throw new private private if != = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) for = != && < ++ try call Store.getFolder() call Store.getFolder() call Store.getFolder() call Store.getFolder() call Store.getFolder() catch if == && == - throw new if == || == try catch throw new decl Folder private private try decl_stmt Folder = call Store.getUserNamespaces() call Store.getUserNamespaces() call Store.getUserNamespaces() call Store.getUserNamespaces() call Store.getUserNamespaces() if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + for : catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + decl Folder private private try decl_stmt Folder = call Store.getSharedNamespaces() call Store.getSharedNamespaces() call Store.getSharedNamespaces() call Store.getSharedNamespaces() call Store.getSharedNamespaces() if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + for : catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + private private for : if return for : if return return call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > int private private throws if != for : if instanceof decl_stmt int = + * = > : = * + = ++ call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + boolean public public decl_stmt boolean = < if ! && && * < try = < catch throw new return public public return ++ : public public throw new CustomFilter SearchTerm SearchTerm private private if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt SearchTerm = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.apache.solr.handler.dataimport.CustomFilter = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt SearchTerm = call CustomFilter.getCustomSearch() call CustomFilter.getCustomSearch() call CustomFilter.getCustomSearch() call CustomFilter.getCustomSearch() call CustomFilter.getCustomSearch() if != = new return public public return Date String boolean String int int public public final final call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) return new decl_stmt int private = decl_stmt int private = public public decl_stmt boolean = ++ try decl_stmt java.util.Date = if == = if != && call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() >= ++ = else decl_stmt java.lang.String = != call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) : decl_stmt java.lang.String = != call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) : call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + + + + catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) return Date String boolean String public public decl_stmt boolean = ++ try decl_stmt java.util.Date = if == = if != && call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() >= ++ = else decl_stmt java.lang.String = != call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) : decl_stmt java.lang.String = != call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) : call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + + + + catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) return String int private private decl_stmt int = try decl_stmt java.lang.String = if != = = catch return String boolean private private decl_stmt boolean = decl_stmt java.lang.String = if != = = return String String private private decl_stmt java.lang.String = decl_stmt java.lang.String = if != = = return