org.apache.lucene.search.suggest.document java.io.IOException import java.util.HashMap import java.util.Map import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.FieldsConsumer import org.apache.lucene.codecs.PostingsFormat import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.Fields import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.IOUtils import static static org.apache.lucene.search.suggest.document.CompletionPostingsFormat.CODEC_NAME import static static org.apache.lucene.search.suggest.document.CompletionPostingsFormat.COMPLETION_VERSION_CURRENT import static static org.apache.lucene.search.suggest.document.CompletionPostingsFormat.DICT_EXTENSION import static static org.apache.lucene.search.suggest.document.CompletionPostingsFormat.INDEX_EXTENSION import class org.apache.lucene.search.suggest.document.CompletionFieldsConsumer super super extends IndexOutput FieldsConsumer decl Map SegmentWriteState boolean String BytesRef Terms CompletionTermWriter long TermsEnum public public throws call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() for : decl_stmt CompletionTermWriter = new decl_stmt org.apache.lucene.index.Terms = decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.util.BytesRef while = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != call CompletionTermWriter.write() call CompletionTermWriter.write() call CompletionTermWriter.write() call CompletionTermWriter.write() call CompletionTermWriter.write() decl_stmt long = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() if call CompletionTermWriter.finish() call CompletionTermWriter.finish() call CompletionTermWriter.finish() call CompletionTermWriter.finish() call CompletionTermWriter.finish() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new FieldInfo CompletionMetaData boolean String public public throws if return = decl_stmt java.lang.String = decl_stmt boolean = try = call SegmentWriteState.directory() call SegmentWriteState.directory() call SegmentWriteState.directory() call SegmentWriteState.directory() call SegmentWriteState.directory() call SegmentWriteState.directory() call SegmentWriteState.directory() call SegmentWriteState.directory() call SegmentWriteState.directory() call FieldsConsumer.close() call FieldsConsumer.close() call FieldsConsumer.close() call FieldsConsumer.close() call FieldsConsumer.close() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt org.apache.lucene.index.FieldInfo = call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() decl_stmt CompletionMetaData = = finally if == boolean public public throws decl_stmt boolean = assert || == : + + if == = return int long int int ByteArrayDataInput byte BytesRef public public throws = decl_stmt int = while != decl_stmt int = for = < ++ assert != decl_stmt org.apache.lucene.util.BytesRef = decl_stmt org.apache.lucene.store.ByteArrayDataInput = new decl_stmt int = call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call org.apache.lucene.store.ByteArrayDataInput.readBytes(byte,int,int) call org.apache.lucene.store.ByteArrayDataInput.readBytes(byte,int,int) call org.apache.lucene.store.ByteArrayDataInput.readBytes(byte,int,int) call org.apache.lucene.store.ByteArrayDataInput.readBytes(byte,int,int) call org.apache.lucene.store.ByteArrayDataInput.readBytes(byte,int,int) decl_stmt long = call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() - = = decl_stmt byte = call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() call org.apache.lucene.store.ByteArrayDataInput.readByte() if = = else if != throw new ++ = +