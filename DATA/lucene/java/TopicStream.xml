org.apache.solr.client.solrj.io.stream java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.Random import java.util.Set import java.util.List import java.util.Locale import java.util.Map import java.util.Map.Entry import java.util.TreeSet import java.util.concurrent.ExecutorService import java.util.concurrent.Future import org.apache.solr.client.solrj.impl.CloudSolrClient.Builder import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.io.Tuple import org.apache.solr.client.solrj.io.comp.ComparatorOrder import org.apache.solr.client.solrj.io.comp.FieldComparator import org.apache.solr.client.solrj.io.stream.expr.Expressible import org.apache.solr.client.solrj.io.stream.expr.StreamExpression import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionNamedParameter import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionParameter import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionValue import org.apache.solr.client.solrj.io.stream.expr.StreamFactory import org.apache.solr.client.solrj.request.UpdateRequest import org.apache.solr.common.SolrDocument import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.ZkCoreNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.common.util.SolrjNamedThreadFactory import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.client.solrj.io.stream.TopicStream super super extends super implements long long String int decl Map Logger String long private private < = = = = = = = new if ! StreamExpression String public public throws decl_stmt org.apache.solr.client.solrj.io.stream.expr.StreamExpression = new call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) for < : decl_stmt java.lang.String = = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new return decl List public < public < decl_stmt java.util.List < = new return public public throws = new = new = new if != = else = new if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == decl Future decl List StreamOpener TupleWrapper ExecutorService private private throws decl_stmt java.util.concurrent.ExecutorService = new try decl_stmt java.util.List < < = new for : decl_stmt StreamOpener = new decl_stmt java.util.concurrent.Future < = call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() try for < : decl_stmt TupleWrapper = if != catch throw new finally call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() public public throws = try finally if != for : if == long String Tuple public public throws decl_stmt org.apache.solr.client.solrj.io.Tuple = if if > call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) else call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) return ++ ++ if > - && == decl_stmt long = call org.apache.solr.client.solrj.io.Tuple.getLong(Object) call org.apache.solr.client.solrj.io.Tuple.getLong(Object) call org.apache.solr.client.solrj.io.Tuple.getLong(Object) call org.apache.solr.client.solrj.io.Tuple.getLong(Object) call org.apache.solr.client.solrj.io.Tuple.getLong(Object) decl_stmt java.lang.String = call org.apache.solr.client.solrj.io.Tuple.getString(Object) call org.apache.solr.client.solrj.io.Tuple.getString(Object) call org.apache.solr.client.solrj.io.Tuple.getString(Object) call org.apache.solr.client.solrj.io.Tuple.getString(Object) call org.apache.solr.client.solrj.io.Tuple.getString(Object) call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.client.solrj.io.Tuple.remove(Object) call org.apache.solr.client.solrj.io.Tuple.remove(Object) call org.apache.solr.client.solrj.io.Tuple.remove(Object) call org.apache.solr.client.solrj.io.Tuple.remove(Object) call org.apache.solr.client.solrj.io.Tuple.remove(Object) call org.apache.solr.client.solrj.io.Tuple.remove(Object) call org.apache.solr.client.solrj.io.Tuple.remove(Object) call org.apache.solr.client.solrj.io.Tuple.remove(Object) call org.apache.solr.client.solrj.io.Tuple.remove(Object) call org.apache.solr.client.solrj.io.Tuple.remove(Object) return public public return long ClusterState String ZkStateReader decl Collection private private throws = new decl_stmt org.apache.solr.common.cloud.ZkStateReader = decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl_stmt java.util.Collection < = call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) for : decl_stmt java.lang.String = decl_stmt long = call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() SolrStream Tuple decl Collection long Map String private private < throws decl_stmt java.util.Collection < = decl_stmt long = - decl_stmt java.util.Map = new call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) for : if == && decl_stmt java.lang.String = decl_stmt org.apache.solr.client.solrj.io.stream.SolrStream = new if != call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) try call org.apache.solr.client.solrj.io.stream.SolrStream.open() call org.apache.solr.client.solrj.io.stream.SolrStream.open() call org.apache.solr.client.solrj.io.stream.SolrStream.open() call org.apache.solr.client.solrj.io.stream.SolrStream.open() call org.apache.solr.client.solrj.io.stream.SolrStream.open() decl_stmt org.apache.solr.client.solrj.io.Tuple = call org.apache.solr.client.solrj.io.stream.SolrStream.read() call org.apache.solr.client.solrj.io.stream.SolrStream.read() call org.apache.solr.client.solrj.io.stream.SolrStream.read() call org.apache.solr.client.solrj.io.stream.SolrStream.read() call org.apache.solr.client.solrj.io.stream.SolrStream.read() if return else = call org.apache.solr.client.solrj.io.Tuple.getLong(Object) call org.apache.solr.client.solrj.io.Tuple.getLong(Object) call org.apache.solr.client.solrj.io.Tuple.getLong(Object) call org.apache.solr.client.solrj.io.Tuple.getLong(Object) call org.apache.solr.client.solrj.io.Tuple.getLong(Object) break finally call org.apache.solr.client.solrj.io.stream.SolrStream.close() call org.apache.solr.client.solrj.io.stream.SolrStream.close() call org.apache.solr.client.solrj.io.stream.SolrStream.close() call org.apache.solr.client.solrj.io.stream.SolrStream.close() call org.apache.solr.client.solrj.io.stream.SolrStream.close() return SolrInputDocument UpdateRequest private private throws decl_stmt org.apache.solr.client.solrj.request.UpdateRequest = new call UpdateRequest.setParam() call UpdateRequest.setParam() call UpdateRequest.setParam() call UpdateRequest.setParam() call UpdateRequest.setParam() decl_stmt org.apache.solr.common.SolrInputDocument = new call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) + + call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) try catch throw new decl Set decl Collection SolrDocument decl Collection ClusterState decl List decl String ZkStateReader HttpSolrClient private private throws decl_stmt org.apache.solr.common.cloud.ZkStateReader = decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl_stmt java.util.Collection < = call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) decl_stmt java.util.Set < = call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() for : decl_stmt java.util.Collection < = for : if == && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl_stmt org.apache.solr.client.solrj.impl.HttpSolrClient = try decl_stmt org.apache.solr.common.SolrDocument = call HttpSolrClient.getById() call HttpSolrClient.getById() call HttpSolrClient.getById() call HttpSolrClient.getById() call HttpSolrClient.getById() if != decl_stmt java.util.List < = < call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) for : decl_stmt java.lang.String = catch throw new break break long SolrStream decl Set ZkCoreNodeProps decl Collection String String Replica Random Map ClusterState decl List decl Collection ZkStateReader protected protected throws try decl_stmt org.apache.solr.common.cloud.ZkStateReader = decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl_stmt java.util.Set < = call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() decl_stmt java.util.Collection < = call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) if == for : call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() if = call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) break if == throw new + decl_stmt java.lang.String = if ! call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) += decl_stmt java.util.Random = new for : decl_stmt java.util.Map = new call java.util.Map.putAll(Map) call java.util.Map.putAll(Map) call java.util.Map.putAll(Map) call java.util.Map.putAll(Map) call java.util.Map.putAll(Map) decl_stmt long = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.util.Collection < = decl_stmt java.util.List < = new for : if == && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt org.apache.solr.common.cloud.Replica = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = new decl_stmt java.lang.String = call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() decl_stmt org.apache.solr.client.solrj.io.stream.SolrStream = new call org.apache.solr.client.solrj.io.stream.SolrStream.setSlice(String) call org.apache.solr.client.solrj.io.stream.SolrStream.setSlice(String) call org.apache.solr.client.solrj.io.stream.SolrStream.setSlice(String) call org.apache.solr.client.solrj.io.stream.SolrStream.setSlice(String) call org.apache.solr.client.solrj.io.stream.SolrStream.setSlice(String) call org.apache.solr.client.solrj.io.stream.SolrStream.setCheckpoint(long) call org.apache.solr.client.solrj.io.stream.SolrStream.setCheckpoint(long) call org.apache.solr.client.solrj.io.stream.SolrStream.setCheckpoint(long) call org.apache.solr.client.solrj.io.stream.SolrStream.setCheckpoint(long) call org.apache.solr.client.solrj.io.stream.SolrStream.setCheckpoint(long) call org.apache.solr.client.solrj.io.stream.SolrStream.setTrace(boolean) call org.apache.solr.client.solrj.io.stream.SolrStream.setTrace(boolean) call org.apache.solr.client.solrj.io.stream.SolrStream.setTrace(boolean) call org.apache.solr.client.solrj.io.stream.SolrStream.setTrace(boolean) call org.apache.solr.client.solrj.io.stream.SolrStream.setTrace(boolean) if != call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) catch throw new