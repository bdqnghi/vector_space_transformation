org.apache.lucene.util java.util.ArrayList import java.util.Iterator import java.util.List import java.util.NoSuchElementException import java.util.Random import class org.apache.lucene.util.TestPriorityQueue super super extends int int protected protected if assert != decl_stmt int = decl_stmt int = assert != return < return < decl Object int protected final protected final decl_stmt java.lang.Object = for = <= ++ decl_stmt int = >>> if > public public throws int decl PriorityQueue Integer int int public static public static decl_stmt org.apache.lucene.util.PriorityQueue < = new decl_stmt int = = for = < ++ decl_stmt int = += call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() decl_stmt int = for = < ++ decl_stmt java.lang.Integer = call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call int.intValue() call int.intValue() call int.intValue() call int.intValue() call int.intValue() >= = call int.intValue() call int.intValue() call int.intValue() call int.intValue() call int.intValue() += decl PriorityQueue public public decl_stmt org.apache.lucene.util.PriorityQueue < = new call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.clear() call decl PriorityQueue.clear() call decl PriorityQueue.clear() call decl PriorityQueue.clear() call decl PriorityQueue.clear() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() decl PriorityQueue public public decl_stmt org.apache.lucene.util.PriorityQueue < = new call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() decl PriorityQueue Integer Integer Integer Integer Integer Integer int public public decl_stmt int = decl_stmt org.apache.lucene.util.PriorityQueue < = new decl_stmt java.lang.Integer = decl_stmt java.lang.Integer = decl_stmt java.lang.Integer = decl_stmt java.lang.Integer = decl_stmt java.lang.Integer = decl_stmt java.lang.Integer = call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() == call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() call decl PriorityQueue.insertWithOverflow() == call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() Integer IntegerQueue decl ArrayList Random int Integer Integer Integer int Integer public public decl_stmt java.util.Random = decl_stmt int = decl_stmt IntegerQueue = new decl_stmt java.lang.Integer = decl_stmt java.util.ArrayList < = new < for = < * ++ decl_stmt java.lang.Integer = new call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() decl_stmt java.lang.Integer = call IntegerQueue.insertWithOverflow() call IntegerQueue.insertWithOverflow() call IntegerQueue.insertWithOverflow() call IntegerQueue.insertWithOverflow() call IntegerQueue.insertWithOverflow() call IntegerQueue.checkValidity() call IntegerQueue.checkValidity() call IntegerQueue.checkValidity() call IntegerQueue.checkValidity() call IntegerQueue.checkValidity() if != call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() if != == decl_stmt java.lang.Integer = call IntegerQueue.top() call IntegerQueue.top() call IntegerQueue.top() call IntegerQueue.top() call IntegerQueue.top() if != && != && != <= >= = for = < ++ decl_stmt int = call java.util.Random.nextFloat() call java.util.Random.nextFloat() call java.util.Random.nextFloat() call java.util.Random.nextFloat() call java.util.Random.nextFloat() * call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() - decl_stmt java.lang.Integer = call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() == call IntegerQueue.remove() call IntegerQueue.remove() call IntegerQueue.remove() call IntegerQueue.remove() call IntegerQueue.remove() call IntegerQueue.checkValidity() call IntegerQueue.checkValidity() call IntegerQueue.checkValidity() call IntegerQueue.checkValidity() call IntegerQueue.checkValidity() decl_stmt java.lang.Integer = new call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call IntegerQueue.insertWithOverflow() call IntegerQueue.insertWithOverflow() call IntegerQueue.insertWithOverflow() call IntegerQueue.insertWithOverflow() call IntegerQueue.insertWithOverflow() call IntegerQueue.checkValidity() call IntegerQueue.checkValidity() call IntegerQueue.checkValidity() call IntegerQueue.checkValidity() call IntegerQueue.checkValidity() decl_stmt java.lang.Integer = call IntegerQueue.top() call IntegerQueue.top() call IntegerQueue.top() call IntegerQueue.top() call IntegerQueue.top() if != && != && != <= >= = IntegerQueue decl Iterator public public decl_stmt IntegerQueue = new decl_stmt java.util.Iterator < = call IntegerQueue.iterator() call IntegerQueue.iterator() call IntegerQueue.iterator() call IntegerQueue.iterator() call IntegerQueue.iterator() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() IntegerQueue decl Iterator public public decl_stmt IntegerQueue = new call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() decl_stmt java.util.Iterator < = call IntegerQueue.iterator() call IntegerQueue.iterator() call IntegerQueue.iterator() call IntegerQueue.iterator() call IntegerQueue.iterator() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() IntegerQueue decl Iterator public public decl_stmt IntegerQueue = new call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() decl_stmt java.util.Iterator < = call IntegerQueue.iterator() call IntegerQueue.iterator() call IntegerQueue.iterator() call IntegerQueue.iterator() call IntegerQueue.iterator() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl List int Integer IntegerQueue int decl List public public decl_stmt int final final = decl_stmt IntegerQueue = new decl_stmt int final final = decl_stmt java.util.List final final final < = new <> for = < ++ if call IntegerQueue.size() call IntegerQueue.size() call IntegerQueue.size() call IntegerQueue.size() call IntegerQueue.size() == || call IntegerQueue.size() call IntegerQueue.size() call IntegerQueue.size() call IntegerQueue.size() call IntegerQueue.size() < && decl_stmt java.lang.Integer final final = new call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() call IntegerQueue.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call IntegerQueue.pop() call IntegerQueue.pop() call IntegerQueue.pop() call IntegerQueue.pop() call IntegerQueue.pop() decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add()