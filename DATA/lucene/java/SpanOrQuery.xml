org.apache.lucene.search.spans java.io.IOException import java.util.ArrayList import java.util.Iterator import java.util.List import java.util.Map import java.util.Set import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.search.DisiPriorityQueue import org.apache.lucene.search.DisiWrapper import org.apache.lucene.search.DisjunctionDISIApproximation import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.TwoPhaseIterator import class org.apache.lucene.search.spans.SpanOrQuery super super extends decl List String private final private final if == = else if != && ! throw new public public return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() public public return SpanQuery SpanQuery boolean SpanOrQuery public public throws decl_stmt org.apache.lucene.search.spans.SpanOrQuery = new decl_stmt boolean = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.apache.lucene.search.spans.SpanQuery = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.search.spans.SpanQuery = call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() |= != call org.apache.lucene.search.spans.SpanOrQuery.addClause(SpanQuery) call org.apache.lucene.search.spans.SpanOrQuery.addClause(SpanQuery) call org.apache.lucene.search.spans.SpanOrQuery.addClause(SpanQuery) call org.apache.lucene.search.spans.SpanOrQuery.addClause(SpanQuery) call org.apache.lucene.search.spans.SpanOrQuery.addClause(SpanQuery) if return return StringBuilder decl Iterator SpanQuery public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.util.Iterator < = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.apache.lucene.search.spans.SpanQuery = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() SpanOrQuery public public if ! return decl_stmt org.apache.lucene.search.spans.SpanOrQuery final final = return call decl List.equals() call decl List.equals() call decl List.equals() call decl List.equals() call decl List.equals() int public public decl_stmt int = = * ^ call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() return decl List public public throws decl_stmt java.util.List < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return new : public public < for final final : public public < for : long long DisiWrapper SpanPositionQueue decl ArrayList float int int DisiWrapper Spans float Spans float long DisiPriorityQueue Spans float long public public final final throws decl_stmt java.util.ArrayList < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : decl_stmt org.apache.lucene.search.spans.Spans = if != call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() if call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() == return else if call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() == return new call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() decl_stmt org.apache.lucene.search.DisiPriorityQueue = new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() for : call org.apache.lucene.search.DisiPriorityQueue.add(DisiWrapper) call org.apache.lucene.search.DisiPriorityQueue.add(DisiWrapper) call org.apache.lucene.search.DisiPriorityQueue.add(DisiWrapper) call org.apache.lucene.search.DisiPriorityQueue.add(DisiWrapper) call org.apache.lucene.search.DisiPriorityQueue.add(DisiWrapper) new decl_stmt org.apache.lucene.search.spans.SpanPositionQueue = new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() return new decl_stmt org.apache.lucene.search.spans.Spans = public public throws = decl_stmt DisiWrapper = call org.apache.lucene.search.DisiPriorityQueue.top() call org.apache.lucene.search.DisiPriorityQueue.top() call org.apache.lucene.search.DisiPriorityQueue.top() call org.apache.lucene.search.DisiPriorityQueue.top() call org.apache.lucene.search.DisiPriorityQueue.top() decl_stmt int = do = call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() = call org.apache.lucene.search.DisiPriorityQueue.updateTop() call org.apache.lucene.search.DisiPriorityQueue.updateTop() call org.apache.lucene.search.DisiPriorityQueue.updateTop() call org.apache.lucene.search.DisiPriorityQueue.updateTop() call org.apache.lucene.search.DisiPriorityQueue.updateTop() == return public public throws = decl_stmt DisiWrapper = call org.apache.lucene.search.DisiPriorityQueue.top() call org.apache.lucene.search.DisiPriorityQueue.top() call org.apache.lucene.search.DisiPriorityQueue.top() call org.apache.lucene.search.DisiPriorityQueue.top() call org.apache.lucene.search.DisiPriorityQueue.top() do = call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() = call org.apache.lucene.search.DisiPriorityQueue.updateTop() call org.apache.lucene.search.DisiPriorityQueue.updateTop() call org.apache.lucene.search.DisiPriorityQueue.updateTop() call org.apache.lucene.search.DisiPriorityQueue.updateTop() call org.apache.lucene.search.DisiPriorityQueue.updateTop() < return public public decl_stmt DisiWrapper = call org.apache.lucene.search.DisiPriorityQueue.top() call org.apache.lucene.search.DisiPriorityQueue.top() call org.apache.lucene.search.DisiPriorityQueue.top() call org.apache.lucene.search.DisiPriorityQueue.top() call org.apache.lucene.search.DisiPriorityQueue.top() return public public decl_stmt float = decl_stmt long = for : if != decl_stmt long = <= : += * += if == return decl_stmt float final final = / return new new public public throws return public public return decl_stmt float = - decl_stmt float = decl_stmt long = for : decl_stmt long = <= : += * += = / public public assert > return decl_stmt int = - throws decl_stmt DisiWrapper = call org.apache.lucene.search.DisiPriorityQueue.topList(DisiWrapper,DisiWrapper,int,int) call org.apache.lucene.search.DisiPriorityQueue.topList(DisiWrapper,DisiWrapper,int,int) call org.apache.lucene.search.DisiPriorityQueue.topList(DisiWrapper,DisiWrapper,int,int) call org.apache.lucene.search.DisiPriorityQueue.topList(DisiWrapper,DisiWrapper,int,int) call org.apache.lucene.search.DisiPriorityQueue.topList(DisiWrapper,DisiWrapper,int,int) decl_stmt int final final = while != if call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() = break = = if == return = = return throws assert call SpanPositionQueue.size() call SpanPositionQueue.size() call SpanPositionQueue.size() call SpanPositionQueue.size() call SpanPositionQueue.size() == decl_stmt DisiWrapper = call org.apache.lucene.search.DisiPriorityQueue.topList(DisiWrapper,DisiWrapper,int,int) call org.apache.lucene.search.DisiPriorityQueue.topList(DisiWrapper,DisiWrapper,int,int) call org.apache.lucene.search.DisiPriorityQueue.topList(DisiWrapper,DisiWrapper,int,int) call org.apache.lucene.search.DisiPriorityQueue.topList(DisiWrapper,DisiWrapper,int,int) call org.apache.lucene.search.DisiPriorityQueue.topList(DisiWrapper,DisiWrapper,int,int) while != decl_stmt org.apache.lucene.search.spans.Spans = if == if != if == = else if != if ! call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() = if != assert call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() == assert call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() == - call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() assert call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() != call SpanPositionQueue.add() call SpanPositionQueue.add() call SpanPositionQueue.add() call SpanPositionQueue.add() call SpanPositionQueue.add() = assert call SpanPositionQueue.size() call SpanPositionQueue.size() call SpanPositionQueue.size() call SpanPositionQueue.size() call SpanPositionQueue.size() > public public throws if == call SpanPositionQueue.clear() call SpanPositionQueue.clear() call SpanPositionQueue.clear() call SpanPositionQueue.clear() call SpanPositionQueue.clear() = call SpanPositionQueue.top() call SpanPositionQueue.top() call SpanPositionQueue.top() call SpanPositionQueue.top() call SpanPositionQueue.top() else call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() = call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() return call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() public public return == - : call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() public public return == - : call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() public public return call Spans.width() call Spans.width() call Spans.width() call Spans.width() call Spans.width() public public throws if != call Spans.collect() call Spans.collect() call Spans.collect() call Spans.collect() call Spans.collect() public public return + + + + + + + decl_stmt long = - public public if == - = for : += call Spans.cost() call Spans.cost() call Spans.cost() call Spans.cost() call Spans.cost() return DisiWrapper int public public throws = decl_stmt DisiWrapper = decl_stmt int = do = call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() = == return DisiWrapper public public throws = decl_stmt DisiWrapper = do = call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() call DisiWrapper.iterator() = < return DisiWrapper public public decl_stmt DisiWrapper = return long long float float public public decl_stmt float = decl_stmt long = for : if != decl_stmt long = <= : += * += if == return decl_stmt float final final = / return new new public public throws return public public return public public throws return public public return long float long decl_stmt float = decl_stmt long = for : decl_stmt long = <= : += * += = / public public assert > return DisiWrapper int throws decl_stmt DisiWrapper = decl_stmt int final final = while != if call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() = break = = if == return = = return Spans DisiWrapper throws assert == decl_stmt DisiWrapper = while != decl_stmt org.apache.lucene.search.spans.Spans = if == if != if == = else if != if ! call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() call DisiWrapper.twoPhaseView() = if != assert call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() == assert call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() == - call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() assert call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() != = assert > public public throws if == = else = return public public return == - : public public return == - : public public return public public throws if != public public return + + + + + + + public public if == - = for : += return