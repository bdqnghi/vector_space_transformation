org.apache.lucene.util.automaton java.io.IOException import java.util.ArrayList import java.util.List import org.apache.lucene.index.SingleTermsEnum import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.IntsRef import org.apache.lucene.util.StringHelper import org.apache.lucene.util.UnicodeUtil import class org.apache.lucene.util.automaton.CompiledAutomaton BytesRef Boolean int Transition Automaton BytesRef ByteRunAutomaton AUTOMATON_TYPE int int boolean Transition int private static private static decl_stmt int = call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() decl_stmt org.apache.lucene.util.automaton.Transition = new decl_stmt int = - for = < ++ if call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) decl_stmt int = call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) decl_stmt boolean = for = < ++ call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) if == && == && == = break if = break return int int int private private decl_stmt int = - decl_stmt int = call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) for = < ++ call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) if < = else break assert != - call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) decl_stmt int final final if > - = - else = call BytesRef.grow() call BytesRef.grow() call BytesRef.grow() call BytesRef.grow() call BytesRef.grow() + call BytesRef.setByteAt() call BytesRef.setByteAt() call BytesRef.setByteAt() call BytesRef.setByteAt() call BytesRef.setByteAt() byte = ++ while = call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) if == assert call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call BytesRef.setLength() call BytesRef.setLength() call BytesRef.setLength() call BytesRef.setLength() call BytesRef.setLength() return call BytesRef.get() call BytesRef.get() call BytesRef.get() call BytesRef.get() call BytesRef.get() else call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) - call BytesRef.grow() call BytesRef.grow() call BytesRef.grow() call BytesRef.grow() call BytesRef.grow() + call BytesRef.setByteAt() call BytesRef.setByteAt() call BytesRef.setByteAt() call BytesRef.setByteAt() call BytesRef.setByteAt() byte = ++ public public throws switch case return case return case return new case return default: throw new int int int int int decl List public public decl_stmt int = call ByteRunAutomaton.getInitialState() call ByteRunAutomaton.getInitialState() call ByteRunAutomaton.getInitialState() call ByteRunAutomaton.getInitialState() call ByteRunAutomaton.getInitialState() if == if call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() return else return decl_stmt java.util.List final final final < = new <> decl_stmt int = while decl_stmt int = + & decl_stmt int = call ByteRunAutomaton.step() call ByteRunAutomaton.step() call ByteRunAutomaton.step() call ByteRunAutomaton.step() call ByteRunAutomaton.step() if == - if != - && call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() + byte return else = - if == - while decl_stmt int = call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) if == assert call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() return else call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) if - < if call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() call ByteRunAutomaton.isAccept() return if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return else = call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - -- = + & else break return else + byte call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = ++ int int public public decl_stmt int final final = decl_stmt int = = * + == : call ByteRunAutomaton.hashCode() call ByteRunAutomaton.hashCode() call ByteRunAutomaton.hashCode() call ByteRunAutomaton.hashCode() call ByteRunAutomaton.hashCode() = * + == : call org.apache.lucene.util.BytesRef.hashCode() call org.apache.lucene.util.BytesRef.hashCode() call org.apache.lucene.util.BytesRef.hashCode() call org.apache.lucene.util.BytesRef.hashCode() call org.apache.lucene.util.BytesRef.hashCode() = * + == : call AUTOMATON_TYPE.hashCode() call AUTOMATON_TYPE.hashCode() call AUTOMATON_TYPE.hashCode() call AUTOMATON_TYPE.hashCode() call AUTOMATON_TYPE.hashCode() return CompiledAutomaton public public if == return if == return if != return decl_stmt org.apache.lucene.util.automaton.CompiledAutomaton = if != return if == if ! call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRef.equals(Object) call org.apache.lucene.util.BytesRef.equals(Object) return else if == if ! call ByteRunAutomaton.equals() call ByteRunAutomaton.equals() call ByteRunAutomaton.equals() call ByteRunAutomaton.equals() call ByteRunAutomaton.equals() return return