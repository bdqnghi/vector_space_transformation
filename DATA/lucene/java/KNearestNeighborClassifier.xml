org.apache.lucene.classification java.io.IOException import java.io.StringReader import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.HashMap import java.util.List import java.util.Map import org.apache.lucene.analysis.Analyzer import org.apache.lucene.index.LeafReader import org.apache.lucene.index.IndexableField import org.apache.lucene.index.Term import org.apache.lucene.queries.mlt.MoreLikeThis import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.TopDocs import org.apache.lucene.search.WildcardQuery import org.apache.lucene.search.similarities.ClassicSimilarity import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.util.BytesRef import class org.apache.lucene.classification.KNearestNeighborClassifier super super implements int String decl String IndexSearcher MoreLikeThis Query TopDocs decl List double decl ClassificationResult public < public < throws decl_stmt org.apache.lucene.search.TopDocs = decl_stmt java.util.List < < = decl_stmt org.apache.lucene.classification.ClassificationResult < = decl_stmt double = - for < : if > = = return TopDocs decl List public < < public < < throws decl_stmt org.apache.lucene.search.TopDocs = decl_stmt java.util.List < < = return TopDocs decl List public < < public < < throws decl_stmt org.apache.lucene.search.TopDocs = decl_stmt java.util.List < < = return call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() String decl String decl Builder decl BooleanQuery private private throws decl_stmt org.apache.lucene.util.fst.Builder = new for : decl_stmt java.lang.String = call org.apache.lucene.queries.mlt.MoreLikeThis.setBoost(boolean) call org.apache.lucene.queries.mlt.MoreLikeThis.setBoost(boolean) call org.apache.lucene.queries.mlt.MoreLikeThis.setBoost(boolean) call org.apache.lucene.queries.mlt.MoreLikeThis.setBoost(boolean) call org.apache.lucene.queries.mlt.MoreLikeThis.setBoost(boolean) if decl_stmt java.lang.String = = = if != call org.apache.lucene.queries.mlt.MoreLikeThis.setBoostFactor(float) call org.apache.lucene.queries.mlt.MoreLikeThis.setBoostFactor(float) call org.apache.lucene.queries.mlt.MoreLikeThis.setBoostFactor(float) call org.apache.lucene.queries.mlt.MoreLikeThis.setBoostFactor(float) call org.apache.lucene.queries.mlt.MoreLikeThis.setBoostFactor(float) call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new call org.apache.lucene.queries.mlt.MoreLikeThis.like(Map) call org.apache.lucene.queries.mlt.MoreLikeThis.like(Map) call org.apache.lucene.queries.mlt.MoreLikeThis.like(Map) call org.apache.lucene.queries.mlt.MoreLikeThis.like(Map) call org.apache.lucene.queries.mlt.MoreLikeThis.like(Map) new call org.apache.lucene.queries.mlt.MoreLikeThis.setBoostFactor(float) call org.apache.lucene.queries.mlt.MoreLikeThis.setBoostFactor(float) call org.apache.lucene.queries.mlt.MoreLikeThis.setBoostFactor(float) call org.apache.lucene.queries.mlt.MoreLikeThis.setBoostFactor(float) call org.apache.lucene.queries.mlt.MoreLikeThis.setBoostFactor(float) decl_stmt org.apache.lucene.search.Query = new new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new if != call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() return call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() Integer Double BytesRef Double decl Map int double decl List decl List decl Map float IndexableField protected < < protected < < throws decl_stmt java.util.Map < = new <> decl_stmt java.util.Map < = new <> decl_stmt float = for : decl_stmt org.apache.lucene.index.IndexableField = call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) if != decl_stmt org.apache.lucene.util.BytesRef = new call org.apache.lucene.index.IndexableField.stringValue() call org.apache.lucene.index.IndexableField.stringValue() call org.apache.lucene.index.IndexableField.stringValue() call org.apache.lucene.index.IndexableField.stringValue() call org.apache.lucene.index.IndexableField.stringValue() decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.Double = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt double = / if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.util.List < < = new <> decl_stmt java.util.List < < = new <> decl_stmt int = for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.Integer = decl_stmt java.lang.Double = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() / call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new <> * / double += if < for < : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new <> * / double else = return public public return + + + + + + + + + + + call org.apache.lucene.search.IndexSearcher.getSimilarity(boolean) call org.apache.lucene.search.IndexSearcher.getSimilarity(boolean) call org.apache.lucene.search.IndexSearcher.getSimilarity(boolean) call org.apache.lucene.search.IndexSearcher.getSimilarity(boolean) call org.apache.lucene.search.IndexSearcher.getSimilarity(boolean) +