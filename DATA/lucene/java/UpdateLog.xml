org.apache.solr.update java.io.Closeable import java.io.File import java.io.FileNotFoundException import java.io.FilenameFilter import java.io.IOException import java.lang.invoke.MethodHandles import java.nio.file.Files import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Deque import java.util.HashMap import java.util.LinkedHashMap import java.util.LinkedList import java.util.List import java.util.ListIterator import java.util.Locale import java.util.Map import java.util.concurrent.ExecutorCompletionService import java.util.concurrent.Future import java.util.concurrent.SynchronousQueue import java.util.concurrent.ThreadPoolExecutor import java.util.concurrent.TimeUnit import org.apache.hadoop.fs.FileSystem import org.apache.lucene.util.BytesRef import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.core.PluginInfo import org.apache.solr.core.SolrCore import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.SolrRequestInfo import org.apache.solr.response.SolrQueryResponse import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.update.processor.DistributedUpdateProcessor import org.apache.solr.update.processor.UpdateRequestProcessor import org.apache.solr.update.processor.UpdateRequestProcessorChain import org.apache.solr.util.DefaultSolrThreadFactory import org.apache.solr.util.RTimer import org.apache.solr.util.RefCounted import org.apache.solr.util.TestInjection import org.apache.solr.util.plugin.PluginInfoInitialized import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.update.processor.DistributedUpdateProcessor.DistribPhase.FROMLEADER import static static org.apache.solr.update.processor.DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM import class org.apache.solr.update.UpdateLog super super implements decl Deque decl Map TransactionLog int int TransactionLog int decl LinkedHashMap boolean String int long String VersionInfo Logger int UpdateHandler TransactionLog RecoveryInfo decl LinkedList State Runnable int int SyncLevel String boolean Runnable int int int decl Map ThreadPoolExecutor long decl String TransactionLog int File int decl Map int decl List decl Collection Long decl LinkedList boolean String int public public return public static public static if == return try return catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return public public return + + + + + + + + + + protected protected return > public public return + + + + public public return + + long public public decl_stmt long = synchronized for : += call Logger.getLogSize() call Logger.getLogSize() call Logger.getLogSize() call Logger.getLogSize() call Logger.getLogSize() return public public synchronized return call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() public public return public public return public public return public public return protected static protected static if != return else return public public = = = = = if <= throw new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) File Update TransactionLog String long decl List DeleteUpdate public public = = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + call org.apache.solr.update.VersionInfo.reload() call org.apache.solr.update.VersionInfo.reload() call org.apache.solr.update.VersionInfo.reload() call org.apache.solr.update.VersionInfo.reload() call org.apache.solr.update.VersionInfo.reload() return = = new call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() = = + if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + + + decl_stmt org.apache.solr.update.TransactionLog = for : decl_stmt File = new try = catch + for : call decl LinkedList.addFirst() call decl LinkedList.addFirst() call decl LinkedList.addFirst() call decl LinkedList.addFirst() call decl LinkedList.addFirst() if call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() >= break try = new catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + throw new + try = = = for = - >= -- decl_stmt DeleteUpdate = call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() new new - for = - >= -- decl_stmt Update = decl_stmt java.util.List < = < call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() decl_stmt long = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() public public < return new public public return call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() public < public < return public public return int int TransactionLog protected synchronized protected synchronized if == return += decl_stmt int = if != && != += call org.apache.solr.update.TransactionLog.numRecords() call org.apache.solr.update.TransactionLog.numRecords() call org.apache.solr.update.TransactionLog.numRecords() call org.apache.solr.update.TransactionLog.numRecords() call org.apache.solr.update.TransactionLog.numRecords() while && call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() > decl_stmt org.apache.solr.update.TransactionLog = call decl Deque.peekLast() call decl Deque.peekLast() call decl Deque.peekLast() call decl Deque.peekLast() call decl Deque.peekLast() decl_stmt int = call org.apache.solr.update.TransactionLog.numRecords() call org.apache.solr.update.TransactionLog.numRecords() call org.apache.solr.update.TransactionLog.numRecords() call org.apache.solr.update.TransactionLog.numRecords() call org.apache.solr.update.TransactionLog.numRecords() if - >= || > && call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() >= -= -= call decl Deque.removeLast() call decl Deque.removeLast() call decl Deque.removeLast() call decl Deque.removeLast() call decl Deque.removeLast() continue break call decl Deque.addFirst() call decl Deque.addFirst() call decl Deque.addFirst() call decl Deque.addFirst() call decl Deque.addFirst() String decl String public public decl_stmt java.lang.String final final = + decl_stmt java.lang.String = new public public return if == throw new new return public public return String public public if != - return if == return - decl_stmt java.lang.String = - return call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() + public public long LogPtr public public synchronized decl_stmt long = - if & == = call org.apache.solr.update.TransactionLog.write(AddUpdateCommand,int) call org.apache.solr.update.TransactionLog.write(AddUpdateCommand,int) call org.apache.solr.update.TransactionLog.write(AddUpdateCommand,int) call org.apache.solr.update.TransactionLog.write(AddUpdateCommand,int) call org.apache.solr.update.TransactionLog.write(AddUpdateCommand,int) if ! decl_stmt LogPtr = new if & == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + + + + + + + else if call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + + + + long BytesRef LogPtr public public decl_stmt org.apache.lucene.util.BytesRef = synchronized decl_stmt long = - if & == = call org.apache.solr.update.TransactionLog.writeDelete(DeleteUpdateCommand,int) call org.apache.solr.update.TransactionLog.writeDelete(DeleteUpdateCommand,int) call org.apache.solr.update.TransactionLog.writeDelete(DeleteUpdateCommand,int) call org.apache.solr.update.TransactionLog.writeDelete(DeleteUpdateCommand,int) call org.apache.solr.update.TransactionLog.writeDelete(DeleteUpdateCommand,int) decl_stmt LogPtr = new if & == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() if call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + + + + + + + long LogPtr public public synchronized decl_stmt long = - if & == = call org.apache.solr.update.TransactionLog.writeDeleteByQuery(DeleteUpdateCommand,int) call org.apache.solr.update.TransactionLog.writeDeleteByQuery(DeleteUpdateCommand,int) call org.apache.solr.update.TransactionLog.writeDeleteByQuery(DeleteUpdateCommand,int) call org.apache.solr.update.TransactionLog.writeDeleteByQuery(DeleteUpdateCommand,int) call org.apache.solr.update.TransactionLog.writeDeleteByQuery(DeleteUpdateCommand,int) if & == if decl_stmt LogPtr = new call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + + + + + + + decl RefCounted public public synchronized try decl_stmt org.apache.solr.util.RefCounted < = call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() catch return if != call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() if != call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() if != call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() decl RefCounted public public synchronized try decl_stmt org.apache.solr.util.RefCounted < = call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() catch if != call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() if != call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() if != call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedHashMap.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() DBQ DBQ decl ListIterator = decl_stmt DBQ = new = = synchronized if call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() || call decl LinkedList.getFirst() call decl LinkedList.getFirst() call decl LinkedList.getFirst() call decl LinkedList.getFirst() call decl LinkedList.getFirst() < call decl LinkedList.addFirst() call decl LinkedList.addFirst() call decl LinkedList.addFirst() call decl LinkedList.addFirst() call decl LinkedList.addFirst() else decl_stmt java.util.ListIterator < = call decl LinkedList.listIterator() call decl LinkedList.listIterator() call decl LinkedList.listIterator() call decl LinkedList.listIterator() call decl LinkedList.listIterator() call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() while call decl ListIterator.hasNext() call decl ListIterator.hasNext() call decl ListIterator.hasNext() call decl ListIterator.hasNext() call decl ListIterator.hasNext() decl_stmt DBQ = call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() if < call decl ListIterator.previous() call decl ListIterator.previous() call decl ListIterator.previous() call decl ListIterator.previous() call decl ListIterator.previous() break else if == && call DBQ.q() call DBQ.q() call DBQ.q() call DBQ.q() call DBQ.q() call DBQ.q() call DBQ.q() call DBQ.q() call DBQ.q() return call decl ListIterator.add() call decl ListIterator.add() call decl ListIterator.add() call decl ListIterator.add() call decl ListIterator.add() if call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() > call decl LinkedList.removeLast() call decl LinkedList.removeLast() call decl LinkedList.removeLast() call decl LinkedList.removeLast() call decl LinkedList.removeLast() decl List public < public < synchronized if call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() || call decl LinkedList.getFirst() call decl LinkedList.getFirst() call decl LinkedList.getFirst() call decl LinkedList.getFirst() call decl LinkedList.getFirst() < return decl_stmt java.util.List < = new <> for : if <= break call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return protected protected = = = = = new <> private private = = public public return != public public synchronized if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() if != && & == return if != = call org.apache.solr.update.TransactionLog.getGlobalStrings() call org.apache.solr.update.TransactionLog.getGlobalStrings() call org.apache.solr.update.TransactionLog.getGlobalStrings() call org.apache.solr.update.TransactionLog.getGlobalStrings() call org.apache.solr.update.TransactionLog.getGlobalStrings() = = ++ public public synchronized if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() if != call org.apache.solr.update.TransactionLog.writeCommit(CommitUpdateCommand,int) call org.apache.solr.update.TransactionLog.writeCommit(CommitUpdateCommand,int) call org.apache.solr.update.TransactionLog.writeCommit(CommitUpdateCommand,int) call org.apache.solr.update.TransactionLog.writeCommit(CommitUpdateCommand,int) call org.apache.solr.update.TransactionLog.writeCommit(CommitUpdateCommand,int) = public public = call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() = call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() synchronized if ! return = new <> if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + public public synchronized if + + + LogPtr TransactionLog public public decl_stmt LogPtr decl_stmt org.apache.solr.update.TransactionLog synchronized = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = if == && != = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = if == && != = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = if == return call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() try return call org.apache.solr.update.TransactionLog.lookup(long) call org.apache.solr.update.TransactionLog.lookup(long) call org.apache.solr.update.TransactionLog.lookup(long) call org.apache.solr.update.TransactionLog.lookup(long) call org.apache.solr.update.TransactionLog.lookup(long) finally call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() LogPtr Long TransactionLog public public decl_stmt LogPtr decl_stmt org.apache.solr.update.TransactionLog synchronized = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = if == && != = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = if == && != = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = if != return decl_stmt java.lang.Long = call org.apache.solr.update.VersionInfo.getVersionFromIndex(BytesRef) call org.apache.solr.update.VersionInfo.getVersionFromIndex(BytesRef) call org.apache.solr.update.VersionInfo.getVersionFromIndex(BytesRef) call org.apache.solr.update.VersionInfo.getVersionFromIndex(BytesRef) call org.apache.solr.update.VersionInfo.getVersionFromIndex(BytesRef) if != return synchronized = call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() if != return return TransactionLog public public if == = if == return decl_stmt org.apache.solr.update.TransactionLog synchronized = if == return call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() try call org.apache.solr.update.TransactionLog.finish(UpdateLog,SyncLevel) call org.apache.solr.update.TransactionLog.finish(UpdateLog,SyncLevel) call org.apache.solr.update.TransactionLog.finish(UpdateLog,SyncLevel) call org.apache.solr.update.TransactionLog.finish(UpdateLog,SyncLevel) call org.apache.solr.update.TransactionLog.finish(UpdateLog,SyncLevel) finally call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() decl ExecutorCompletionService LogReplayer decl List public < public < = new decl_stmt java.util.List < = new <> for : if ! continue try if continue catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return decl_stmt java.util.concurrent.ExecutorCompletionService < = new <> decl_stmt LogReplayer = new call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() try = finally call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() return call decl ExecutorCompletionService.submit() call decl ExecutorCompletionService.submit() call decl ExecutorCompletionService.submit() call decl ExecutorCompletionService.submit() call decl ExecutorCompletionService.submit() String protected protected if == decl_stmt java.lang.String = = new CommitUpdateCommand private private if != if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + decl_stmt org.apache.solr.update.CommitUpdateCommand = new new new = public public public public synchronized call java.util.concurrent.ThreadPoolExecutor.shutdown() call java.util.concurrent.ThreadPoolExecutor.shutdown() call java.util.concurrent.ThreadPoolExecutor.shutdown() call java.util.concurrent.ThreadPoolExecutor.shutdown() call java.util.concurrent.ThreadPoolExecutor.shutdown() for : if == || == continue = call Logger.decref() call Logger.decref() call Logger.decref() call Logger.decref() call Logger.decref() call Logger.forceClose() call Logger.forceClose() call Logger.forceClose() call Logger.forceClose() call Logger.forceClose() try catch decl List public < public < decl_stmt java.util.List < = new <> for < : for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if -- <= return return Update public public decl_stmt Update = if == return return call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() call Update.log() Object decl List public < public < decl_stmt java.util.List < = new <> for : if > decl_stmt java.lang.Object = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return int int long decl ReverseReader int decl List decl TransactionLog Object List private private decl_stmt int = = new <> = new <> = new <> = new <> for : decl_stmt java.util.List < = new <> decl_stmt ReverseReader = try = while < decl_stmt java.lang.Object = try = call decl TransactionLog.next() call decl TransactionLog.next() call decl TransactionLog.next() call decl TransactionLog.next() call decl TransactionLog.next() if == break decl_stmt java.util.List = decl_stmt int = call Object.get() call Object.get() call Object.get() call Object.get() call Object.get() if == = decl_stmt int = & decl_stmt long = call Object.get() call Object.get() call Object.get() call Object.get() call Object.get() switch case case case decl_stmt Update = new = = call decl TransactionLog.position() call decl TransactionLog.position() call decl TransactionLog.position() call decl TransactionLog.position() call decl TransactionLog.position() = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if == else if == new call Object.get() call Object.get() call Object.get() call Object.get() call Object.get() break case break default: throw new + catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() break ++ catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() finally if != call decl TransactionLog.close() call decl TransactionLog.close() call decl TransactionLog.close() call decl TransactionLog.close() call decl TransactionLog.close() public public for : call Logger.decref() call Logger.decref() call Logger.decref() call Logger.decref() call Logger.decref() long public public decl_stmt long = if != for : = return decl Deque public public decl_stmt java.util.Deque < synchronized = new <> for : call Logger.incref() call Logger.incref() call Logger.incref() call Logger.incref() call Logger.incref() if != call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call decl Deque.addFirst() call decl Deque.addFirst() call decl Deque.addFirst() call decl Deque.addFirst() call decl Deque.addFirst() if != call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call decl Deque.addFirst() call decl Deque.addFirst() call decl Deque.addFirst() call decl Deque.addFirst() call decl Deque.addFirst() return new public public call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() try if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + else if != call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + return = new if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + synchronized = == : call org.apache.solr.update.TransactionLog.snapshot() call org.apache.solr.update.TransactionLog.snapshot() call org.apache.solr.update.TransactionLog.snapshot() call org.apache.solr.update.TransactionLog.snapshot() call org.apache.solr.update.TransactionLog.snapshot() = |= finally call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() public public call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() try if != return if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + synchronized if != call org.apache.solr.update.TransactionLog.rollback(long) call org.apache.solr.update.TransactionLog.rollback(long) call org.apache.solr.update.TransactionLog.rollback(long) call org.apache.solr.update.TransactionLog.rollback(long) call org.apache.solr.update.TransactionLog.rollback(long) = &= ~ catch return finally call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() return decl ExecutorCompletionService LogReplayer public < public < call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() try = if != return &= ~ if == = return call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() call org.apache.solr.update.TransactionLog.incref() = finally call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() if call java.util.concurrent.ThreadPoolExecutor.isShutdown() call java.util.concurrent.ThreadPoolExecutor.isShutdown() call java.util.concurrent.ThreadPoolExecutor.isShutdown() call java.util.concurrent.ThreadPoolExecutor.isShutdown() call java.util.concurrent.ThreadPoolExecutor.isShutdown() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() throw new decl_stmt java.util.concurrent.ExecutorCompletionService < = new <> decl_stmt LogReplayer = new new return call decl ExecutorCompletionService.submit() call decl ExecutorCompletionService.submit() call decl ExecutorCompletionService.submit() call decl ExecutorCompletionService.submit() call decl ExecutorCompletionService.submit() public public return public public return + + + + TransactionLog ModifiableSolrParams public public decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) = new = new new try for decl_stmt org.apache.solr.update.TransactionLog = if == break catch if == = else ++ catch ++ finally = if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() for : call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() call org.apache.solr.update.TransactionLog.decref() + if != call Runnable.run() call Runnable.run() call Runnable.run() call Runnable.run() call Runnable.run() int decl byte long long CommitUpdateCommand long int SolrInputDocument long long String Object List UpdateRequestProcessorChain long UpdateRequestProcessor long public public try + + + + + decl_stmt long = = decl_stmt org.apache.solr.update.processor.UpdateRequestProcessorChain = decl_stmt org.apache.solr.update.processor.UpdateRequestProcessor = call UpdateRequestProcessorChain.createProcessor() call UpdateRequestProcessorChain.createProcessor() call UpdateRequestProcessorChain.createProcessor() call UpdateRequestProcessorChain.createProcessor() call UpdateRequestProcessorChain.createProcessor() decl_stmt long = decl_stmt int = decl_stmt long = for decl_stmt java.lang.Object = if break try if != call Runnable.run() call Runnable.run() call Runnable.run() call Runnable.run() call Runnable.run() if ++ == decl_stmt long = if - > = decl_stmt long = decl_stmt long = / double * = = if == && if ! call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() = = else catch if == break try decl_stmt java.util.List = = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) decl_stmt int = & decl_stmt long = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) switch case ++ decl_stmt org.apache.solr.common.SolrInputDocument = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() - decl_stmt org.apache.solr.update.AddUpdateCommand = new = call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() | if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + call org.apache.solr.update.processor.UpdateRequestProcessor.processAdd(AddUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processAdd(AddUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processAdd(AddUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processAdd(AddUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processAdd(AddUpdateCommand) break case ++ decl_stmt byte = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) decl_stmt org.apache.solr.update.DeleteUpdateCommand = new call CommitUpdateCommand.setIndexedId() call CommitUpdateCommand.setIndexedId() call CommitUpdateCommand.setIndexedId() call CommitUpdateCommand.setIndexedId() call CommitUpdateCommand.setIndexedId() new call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() | if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) break case ++ decl_stmt java.lang.String = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) decl_stmt org.apache.solr.update.DeleteUpdateCommand = new = call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() | if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) break case = break default: throw new + if != throw catch ++ catch ++ + catch if == throw ++ catch ++ assert decl_stmt org.apache.solr.update.CommitUpdateCommand = new call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() call CommitUpdateCommand.setVersion() = = call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() call CommitUpdateCommand.setFlags() try if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + call UpdateHandler.commit() call UpdateHandler.commit() call UpdateHandler.commit() call UpdateHandler.commit() call UpdateHandler.commit() catch ++ if ! | & ~ try call UpdateRequestProcessor.finish() call UpdateRequestProcessor.finish() call UpdateRequestProcessor.finish() call UpdateRequestProcessor.finish() call UpdateRequestProcessor.finish() catch ++ finally if != public public = boolean public static public static decl_stmt boolean = try = catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + if ! try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + String String protected protected decl_stmt java.lang.String = decl_stmt java.lang.String = if != = if == || call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == = return + + File decl String File public public if == return decl_stmt File = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() decl_stmt java.lang.String = for : decl_stmt File = new try call File.toPath() call File.toPath() call File.toPath() call File.toPath() call File.toPath() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + public public return decl RefCounted if == && != decl_stmt org.apache.solr.util.RefCounted < = != && != call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() call UpdateHandler.core() : if == throw new try = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() return long long RTimer Long long protected protected decl_stmt java.lang.Long = decl_stmt org.apache.solr.util.RTimer final final = new try = decl_stmt long = decl_stmt long = decl_stmt long = if == = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() return public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() try = finally call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates()