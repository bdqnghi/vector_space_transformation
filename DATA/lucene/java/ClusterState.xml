org.apache.solr.common.cloud java.util.Collection import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.LinkedHashMap import java.util.Map import java.util.Map.Entry import java.util.Set import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.util.Utils import org.apache.zookeeper.Watcher import org.noggit.JSONWriter import class org.apache.solr.common.cloud.ClusterState super super implements decl Map decl Set Integer decl Map DocCollection private static < private static < < decl_stmt java.util.Map < = new <> call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt org.apache.solr.common.cloud.DocCollection final final = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new return ClusterState public public decl_stmt org.apache.solr.common.cloud.ClusterState = new new <> if == call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() else call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() call ClusterState.collectionStates() new return DocCollection Slice public public decl_stmt org.apache.solr.common.cloud.DocCollection = if == return decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) if == return return call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() Replica private private if == return for : decl_stmt org.apache.solr.common.cloud.Replica = if != return return public public return != public public final final final final return DocCollection public public decl_stmt org.apache.solr.common.cloud.DocCollection = if == return return call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) DocCollection public < public < decl_stmt org.apache.solr.common.cloud.DocCollection = if == return return call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call org.apache.solr.common.cloud.DocCollection.getSlicesMap() DocCollection public < public < decl_stmt org.apache.solr.common.cloud.DocCollection = if == return return call org.apache.solr.common.cloud.DocCollection.getActiveSlicesMap() call org.apache.solr.common.cloud.DocCollection.getActiveSlicesMap() call org.apache.solr.common.cloud.DocCollection.getActiveSlicesMap() call org.apache.solr.common.cloud.DocCollection.getActiveSlicesMap() call org.apache.solr.common.cloud.DocCollection.getActiveSlicesMap() DocCollection public < public < decl_stmt org.apache.solr.common.cloud.DocCollection = if == return return call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() DocCollection public < public < decl_stmt org.apache.solr.common.cloud.DocCollection = if == return return call org.apache.solr.common.cloud.DocCollection.getActiveSlices() call org.apache.solr.common.cloud.DocCollection.getActiveSlices() call org.apache.solr.common.cloud.DocCollection.getActiveSlices() call org.apache.solr.common.cloud.DocCollection.getActiveSlices() call org.apache.solr.common.cloud.DocCollection.getActiveSlices() DocCollection public public decl_stmt org.apache.solr.common.cloud.DocCollection = if == throw new + return public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() CollectionRef public public decl_stmt CollectionRef = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return == : call CollectionRef.get() call CollectionRef.get() call CollectionRef.get() call CollectionRef.get() call CollectionRef.get() decl Set public < public < decl_stmt java.util.Set < = new <> for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if != call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return public < public < return public public return decl Collection String CollectionRef DocCollection String public public decl_stmt java.util.Collection < = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if != decl_stmt CollectionRef = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != = for : decl_stmt org.apache.solr.common.cloud.DocCollection = if == continue for : call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() for : decl_stmt java.lang.String = decl_stmt java.lang.String = if && return return public public return call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public static public static < return String DocCollection decl Map decl Map public static public static < if == || == return new > decl_stmt java.util.Map < = < decl_stmt java.util.Map < = new <> call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = decl_stmt org.apache.solr.common.cloud.DocCollection = < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new return new decl Map public static public static if == || == return new decl_stmt java.util.Map < < = < < return new decl Map decl Map decl Map Map DocRouter Object private static private static < decl_stmt java.util.Map < decl_stmt java.util.Map < decl_stmt java.util.Map < = < if == = = else = = new <> decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.solr.common.cloud.DocRouter if == = else if instanceof = else decl_stmt java.util.Map = = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) return new decl Map Object String private static < private static < < if == return decl_stmt java.util.Map < = new <> for < : decl_stmt java.lang.String = decl_stmt java.lang.Object = if instanceof call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if instanceof call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < return decl LinkedHashMap DocCollection public public decl_stmt java.util.LinkedHashMap < = new <> for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if == decl_stmt org.apache.solr.common.cloud.DocCollection = if call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() == call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() public public return int int public public decl_stmt int final final = decl_stmt int = = * + == : call java.lang.Integer.hashCode() call java.lang.Integer.hashCode() call java.lang.Integer.hashCode() call java.lang.Integer.hashCode() call java.lang.Integer.hashCode() = * + == : call decl Set.hashCode() call decl Set.hashCode() call decl Set.hashCode() call decl Set.hashCode() call decl Set.hashCode() return ClusterState public public if == return if == return if != return decl_stmt org.apache.solr.common.cloud.ClusterState = if == if != return else if ! call java.lang.Integer.equals(Object) call java.lang.Integer.equals(Object) call java.lang.Integer.equals(Object) call java.lang.Integer.equals(Object) call java.lang.Integer.equals(Object) return if == if != return else if ! call decl Set.equals() call decl Set.equals() call decl Set.equals() call decl Set.equals() call decl Set.equals() return return < = < < return public public return public public return public public if != return else return