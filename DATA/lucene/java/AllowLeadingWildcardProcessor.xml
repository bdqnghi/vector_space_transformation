org.apache.lucene.queryparser.flexible.standard.processors java.util.List import org.apache.lucene.queryparser.flexible.messages.MessageImpl import org.apache.lucene.queryparser.flexible.core.QueryNodeException import org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler import org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages import org.apache.lucene.queryparser.flexible.core.nodes.QueryNode import org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl import org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence import org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler.ConfigurationKeys import org.apache.lucene.queryparser.flexible.standard.nodes.WildcardQueryNode import org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl import class org.apache.lucene.queryparser.flexible.standard.processors.AllowLeadingWildcardProcessor super super extends Boolean public public throws decl_stmt java.lang.Boolean = if != if ! return return WildcardQueryNode protected protected throws if instanceof decl_stmt org.apache.lucene.queryparser.flexible.standard.nodes.WildcardQueryNode = if call WildcardQueryNode.getText() call WildcardQueryNode.getText() call WildcardQueryNode.getText() call WildcardQueryNode.getText() call WildcardQueryNode.getText() > if call WildcardQueryNode.getText() call WildcardQueryNode.getText() call WildcardQueryNode.getText() call WildcardQueryNode.getText() call WildcardQueryNode.getText() return switch call WildcardQueryNode.getText() call WildcardQueryNode.getText() call WildcardQueryNode.getText() call WildcardQueryNode.getText() call WildcardQueryNode.getText() case case throw new new new return protected protected throws return protected < protected < < throws return