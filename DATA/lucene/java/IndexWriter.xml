org.apache.lucene.index java.io.Closeable import java.io.FileNotFoundException import java.io.IOException import java.nio.file.NoSuchFileException import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.Date import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.LinkedList import java.util.List import java.util.Locale import java.util.Map import java.util.Map.Entry import java.util.Queue import java.util.Set import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.atomic.AtomicLong import org.apache.lucene.analysis.Analyzer import org.apache.lucene.codecs.Codec import org.apache.lucene.codecs.FieldInfosFormat import org.apache.lucene.document.Field import org.apache.lucene.index.DocValuesUpdate.BinaryDocValuesUpdate import org.apache.lucene.index.DocValuesUpdate.NumericDocValuesUpdate import org.apache.lucene.index.FieldInfos.FieldNumbers import org.apache.lucene.index.IndexWriterConfig.OpenMode import org.apache.lucene.search.MatchAllDocsQuery import org.apache.lucene.search.Query import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.store.Directory import org.apache.lucene.store.FSDirectory import org.apache.lucene.store.FilterDirectory import org.apache.lucene.store.FlushInfo import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexOutput import org.apache.lucene.store.Lock import org.apache.lucene.store.LockObtainFailedException import org.apache.lucene.store.LockValidatingDirectoryWrapper import org.apache.lucene.store.MMapDirectory import org.apache.lucene.store.MergeInfo import org.apache.lucene.store.RateLimitedIndexOutput import org.apache.lucene.store.TrackingDirectoryWrapper import org.apache.lucene.util.Accountable import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.CloseableThreadLocal import org.apache.lucene.util.Constants import org.apache.lucene.util.IOUtils import org.apache.lucene.util.InfoStream import org.apache.lucene.util.StringHelper import org.apache.lucene.util.ThreadInterruptedException import org.apache.lucene.util.Version import class org.apache.lucene.index.IndexWriter super super implements decl List InfoStream AtomicInteger AtomicLong decl LinkedList Directory String int boolean boolean boolean SegmentInfos decl HashSet int long decl Collection String Codec boolean long Directory LiveIndexWriterConfig MergeScheduler Lock BufferedUpdatesStream String String decl List boolean int Analyzer decl Queue long String Throwable IndexFileDeleter decl Set Object AtomicLong int long decl Map boolean Object ReaderPool DocumentsWriter int decl CloseableThreadLocal Directory boolean FieldNumbers SegmentInfos AtomicInteger int static static if > throw new + + + = static static return throws return boolean DirectoryReader boolean long boolean throws if && == throw new decl_stmt long final final = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() = decl_stmt org.apache.lucene.index.DirectoryReader = decl_stmt boolean = decl_stmt boolean = try decl_stmt boolean = synchronized try = call org.apache.lucene.index.DocumentsWriter.flushAllThreads() call org.apache.lucene.index.DocumentsWriter.flushAllThreads() call org.apache.lucene.index.DocumentsWriter.flushAllThreads() call org.apache.lucene.index.DocumentsWriter.flushAllThreads() call org.apache.lucene.index.DocumentsWriter.flushAllThreads() if ! call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() synchronized |= if call ReaderPool.commit() call ReaderPool.commit() call ReaderPool.commit() call ReaderPool.commit() call ReaderPool.commit() = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() + + = finally call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) if else if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() if call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + - + = catch return finally if ! return public final public final return call org.apache.lucene.index.DocumentsWriter.ramBytesUsed() call org.apache.lucene.index.DocumentsWriter.ramBytesUsed() call org.apache.lucene.index.DocumentsWriter.ramBytesUsed() call org.apache.lucene.index.DocumentsWriter.ramBytesUsed() call org.apache.lucene.index.DocumentsWriter.ramBytesUsed() int public synchronized public synchronized decl_stmt int = call org.apache.lucene.index.SegmentInfos.indexOf(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.indexOf(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.indexOf(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.indexOf(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.indexOf(SegmentCommitInfo) assert != - : + + assert call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) == : + + return ReadersAndUpdates public synchronized public synchronized throws decl_stmt org.apache.lucene.index.ReadersAndUpdates final final = if != assert == call org.apache.lucene.index.ReadersAndUpdates.dropReaders() call org.apache.lucene.index.ReadersAndUpdates.dropReaders() call org.apache.lucene.index.ReadersAndUpdates.dropReaders() call org.apache.lucene.index.ReadersAndUpdates.dropReaders() call org.apache.lucene.index.ReadersAndUpdates.dropReaders() public synchronized public synchronized for : if != return return public synchronized public synchronized throws public synchronized public synchronized throws assert >= if ! && == if assert == || public public throws ReadersAndUpdates decl Iterator Throwable synchronized synchronized throws decl_stmt java.lang.Throwable = decl_stmt java.util.Iterator final final final < < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.apache.lucene.index.ReadersAndUpdates final final = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() try if && call org.apache.lucene.index.ReadersAndUpdates.writeLiveDocs(Directory) call org.apache.lucene.index.ReadersAndUpdates.writeLiveDocs(Directory) call org.apache.lucene.index.ReadersAndUpdates.writeLiveDocs(Directory) call org.apache.lucene.index.ReadersAndUpdates.writeLiveDocs(Directory) call org.apache.lucene.index.ReadersAndUpdates.writeLiveDocs(Directory) assert catch if else if == = call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() try call org.apache.lucene.index.ReadersAndUpdates.dropReaders() call org.apache.lucene.index.ReadersAndUpdates.dropReaders() call org.apache.lucene.index.ReadersAndUpdates.dropReaders() call org.apache.lucene.index.ReadersAndUpdates.dropReaders() call org.apache.lucene.index.ReadersAndUpdates.dropReaders() catch if else if == = assert == ReadersAndUpdates public synchronized public synchronized throws for : decl_stmt org.apache.lucene.index.ReadersAndUpdates final final = if != assert == if call org.apache.lucene.index.ReadersAndUpdates.writeLiveDocs(Directory) call org.apache.lucene.index.ReadersAndUpdates.writeLiveDocs(Directory) call org.apache.lucene.index.ReadersAndUpdates.writeLiveDocs(Directory) call org.apache.lucene.index.ReadersAndUpdates.writeLiveDocs(Directory) call org.apache.lucene.index.ReadersAndUpdates.writeLiveDocs(Directory) assert ReadersAndUpdates public synchronized public synchronized assert == : + + + decl_stmt org.apache.lucene.index.ReadersAndUpdates = if == if ! return = new else assert == : + + + + + + + if call org.apache.lucene.index.ReadersAndUpdates.incRef() call org.apache.lucene.index.ReadersAndUpdates.incRef() call org.apache.lucene.index.ReadersAndUpdates.incRef() call org.apache.lucene.index.ReadersAndUpdates.incRef() call org.apache.lucene.index.ReadersAndUpdates.incRef() assert return decl Set private private decl_stmt java.util.Set < = new <> for : assert ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return ReadersAndUpdates int public public decl_stmt int = decl_stmt org.apache.lucene.index.ReadersAndUpdates final final = call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() if != += call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() return protected final protected final throws if || && throw new protected final protected final throws Codec String FieldInfosFormat static static throws decl_stmt org.apache.lucene.codecs.Codec = decl_stmt FieldInfosFormat = call Codec.fieldInfosFormat() call Codec.fieldInfosFormat() call Codec.fieldInfosFormat() call Codec.fieldInfosFormat() call Codec.fieldInfosFormat() if decl_stmt java.lang.String final final = return call FieldInfosFormat.read() call FieldInfosFormat.read() call FieldInfosFormat.read() call FieldInfosFormat.read() call FieldInfosFormat.read() else if try = call Codec.compoundFormat() call Codec.compoundFormat() call Codec.compoundFormat() call Codec.compoundFormat() call Codec.compoundFormat() return call FieldInfosFormat.read() call FieldInfosFormat.read() call FieldInfosFormat.read() call FieldInfosFormat.read() call FieldInfosFormat.read() else return call FieldInfosFormat.read() call FieldInfosFormat.read() call FieldInfosFormat.read() call FieldInfosFormat.read() call FieldInfosFormat.read() FieldNumbers FieldInfos private private throws decl_stmt FieldNumbers final final = new for : decl_stmt org.apache.lucene.index.FieldInfos = for : call FieldNumbers.addOrGet() call FieldNumbers.addOrGet() call FieldNumbers.addOrGet() call FieldNumbers.addOrGet() call FieldNumbers.addOrGet() return public public return StringBuilder private private if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) && == = call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + + + + + + + call org.apache.lucene.index.LiveIndexWriterConfig.toString() call org.apache.lucene.index.LiveIndexWriterConfig.toString() call org.apache.lucene.index.LiveIndexWriterConfig.toString() call org.apache.lucene.index.LiveIndexWriterConfig.toString() call org.apache.lucene.index.LiveIndexWriterConfig.toString() decl_stmt java.lang.StringBuilder final final = new if ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + boolean private private throws if != throw new if decl_stmt boolean = try if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() = finally if == try catch public public throws if call org.apache.lucene.index.LiveIndexWriterConfig.getCommitOnClose() call org.apache.lucene.index.LiveIndexWriterConfig.getCommitOnClose() call org.apache.lucene.index.LiveIndexWriterConfig.getCommitOnClose() call org.apache.lucene.index.LiveIndexWriterConfig.getCommitOnClose() call org.apache.lucene.index.LiveIndexWriterConfig.getCommitOnClose() else synchronized private synchronized private while if == if == = return else if == return else else return public public return public public return public synchronized public synchronized return call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() + call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() public synchronized public synchronized if call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() < call org.apache.lucene.index.SegmentInfos.setVersion(long) call org.apache.lucene.index.SegmentInfos.setVersion(long) call org.apache.lucene.index.SegmentInfos.setVersion(long) call org.apache.lucene.index.SegmentInfos.setVersion(long) call org.apache.lucene.index.SegmentInfos.setVersion(long) int public synchronized public synchronized decl_stmt int = call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() for final final : += - return public synchronized public synchronized if call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() return if call org.apache.lucene.index.DocumentsWriter.anyDeletions() call org.apache.lucene.index.DocumentsWriter.anyDeletions() call org.apache.lucene.index.DocumentsWriter.anyDeletions() call org.apache.lucene.index.DocumentsWriter.anyDeletions() call org.apache.lucene.index.DocumentsWriter.anyDeletions() return if call ReaderPool.anyPendingDeletes() call ReaderPool.anyPendingDeletes() call ReaderPool.anyPendingDeletes() call ReaderPool.anyPendingDeletes() call ReaderPool.anyPendingDeletes() return for final final : if return return public public < extends extends throws public public < extends extends extends < extends extends throws boolean public public < extends extends extends < extends extends throws try decl_stmt boolean = try if call org.apache.lucene.index.DocumentsWriter.updateDocuments(Iterable,Analyzer,Term) call org.apache.lucene.index.DocumentsWriter.updateDocuments(Iterable,Analyzer,Term) call org.apache.lucene.index.DocumentsWriter.updateDocuments(Iterable,Analyzer,Term) call org.apache.lucene.index.DocumentsWriter.updateDocuments(Iterable,Analyzer,Term) call org.apache.lucene.index.DocumentsWriter.updateDocuments(Iterable,Analyzer,Term) = finally if ! if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() catch SegmentCommitInfo int ReadersAndUpdates decl List LeafReader int public synchronized public synchronized throws decl_stmt org.apache.lucene.index.LeafReader final final if instanceof = else decl_stmt java.util.List < = decl_stmt int = = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() -= call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() assert >= assert < call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() if ! instanceof throw new decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = if call org.apache.lucene.index.SegmentInfos.indexOf(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.indexOf(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.indexOf(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.indexOf(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.indexOf(SegmentCommitInfo) != - decl_stmt org.apache.lucene.index.ReadersAndUpdates = call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() if != synchronized call org.apache.lucene.index.ReadersAndUpdates.initWritableLiveDocs() call org.apache.lucene.index.ReadersAndUpdates.initWritableLiveDocs() call org.apache.lucene.index.ReadersAndUpdates.initWritableLiveDocs() call org.apache.lucene.index.ReadersAndUpdates.initWritableLiveDocs() call org.apache.lucene.index.ReadersAndUpdates.initWritableLiveDocs() if call org.apache.lucene.index.ReadersAndUpdates.delete(int) call org.apache.lucene.index.ReadersAndUpdates.delete(int) call org.apache.lucene.index.ReadersAndUpdates.delete(int) call org.apache.lucene.index.ReadersAndUpdates.delete(int) call org.apache.lucene.index.ReadersAndUpdates.delete(int) decl_stmt int final final = call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() + call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() if == call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() call ReadersAndUpdates.info() if ! call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call org.apache.lucene.index.SegmentInfos.remove(int) call org.apache.lucene.index.SegmentInfos.remove(int) call org.apache.lucene.index.SegmentInfos.remove(int) call org.apache.lucene.index.SegmentInfos.remove(int) call org.apache.lucene.index.SegmentInfos.remove(int) call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() return else else return public public throws try if call org.apache.lucene.index.DocumentsWriter.deleteTerms(Term) call org.apache.lucene.index.DocumentsWriter.deleteTerms(Term) call org.apache.lucene.index.DocumentsWriter.deleteTerms(Term) call org.apache.lucene.index.DocumentsWriter.deleteTerms(Term) call org.apache.lucene.index.DocumentsWriter.deleteTerms(Term) catch public public throws for : if == return try if call org.apache.lucene.index.DocumentsWriter.deleteQueries(Query) call org.apache.lucene.index.DocumentsWriter.deleteQueries(Query) call org.apache.lucene.index.DocumentsWriter.deleteQueries(Query) call org.apache.lucene.index.DocumentsWriter.deleteQueries(Query) call org.apache.lucene.index.DocumentsWriter.deleteQueries(Query) catch boolean public public < extends extends throws try decl_stmt boolean = try if call org.apache.lucene.index.DocumentsWriter.updateDocument(Iterable,Analyzer,Term) call org.apache.lucene.index.DocumentsWriter.updateDocument(Iterable,Analyzer,Term) call org.apache.lucene.index.DocumentsWriter.updateDocument(Iterable,Analyzer,Term) call org.apache.lucene.index.DocumentsWriter.updateDocument(Iterable,Analyzer,Term) call org.apache.lucene.index.DocumentsWriter.updateDocument(Iterable,Analyzer,Term) = finally if ! if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() catch public public throws if ! call FieldNumbers.contains() call FieldNumbers.contains() call FieldNumbers.contains() call FieldNumbers.contains() call FieldNumbers.contains() throw new try if call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) new catch public public throws if == throw new + if ! call FieldNumbers.contains() call FieldNumbers.contains() call FieldNumbers.contains() call FieldNumbers.contains() call FieldNumbers.contains() throw new try if call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) new catch DocValuesType decl DocValuesUpdate Field public public throws decl_stmt org.apache.lucene.index.DocValuesUpdate = new for = < ++ decl_stmt org.apache.solr.handler.dataimport.config.Field final final = decl_stmt DocValuesType final final = call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() if == throw new + call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() + if == throw new + call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() if ! call FieldNumbers.contains() call FieldNumbers.contains() call FieldNumbers.contains() call FieldNumbers.contains() call FieldNumbers.contains() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() throw new + call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() + + switch case = new call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.numericValue() call org.apache.solr.handler.dataimport.config.Field.numericValue() call org.apache.solr.handler.dataimport.config.Field.numericValue() call org.apache.solr.handler.dataimport.config.Field.numericValue() call org.apache.solr.handler.dataimport.config.Field.numericValue() break case = new call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() break default: throw new + call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() + + try if call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) call org.apache.lucene.index.DocumentsWriter.updateDocValues(DocValuesUpdate) catch final synchronized final synchronized return call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() final synchronized final synchronized return call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() final synchronized < final synchronized < throws return call org.apache.lucene.index.SegmentInfos.files(boolean) call org.apache.lucene.index.SegmentInfos.files(boolean) call org.apache.lucene.index.SegmentInfos.files(boolean) call org.apache.lucene.index.SegmentInfos.files(boolean) call org.apache.lucene.index.SegmentInfos.files(boolean) final synchronized final synchronized if >= && < call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() return call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) else return - final final return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() final final return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() final final synchronized call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() return + ++ public public throws decl MergePolicy int public public throws if < throw new + if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() synchronized call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = for final final final final final : = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for final final final final final : = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() if synchronized while if != throw new if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt int final final = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ decl_stmt OneMerge final final final final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if != - throw new + call decl MergePolicy.segString() call decl MergePolicy.segString() call decl MergePolicy.segString() call decl MergePolicy.segString() call decl MergePolicy.segString() call decl MergePolicy.getException() call decl MergePolicy.getException() call decl MergePolicy.getException() call decl MergePolicy.getException() call decl MergePolicy.getException() if else break private synchronized private synchronized for final final final final final : if != - return for final final final final final : if != - return return MergePolicy decl MergeSpecification boolean int decl MergePolicy int decl MergePolicy public public throws if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + decl_stmt org.apache.lucene.index.MergePolicy final final = call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() decl_stmt MergeSpecification decl_stmt boolean = synchronized = call MergePolicy.findForcedDeletesMerges() call MergePolicy.findForcedDeletesMerges() call MergePolicy.findForcedDeletesMerges() call MergePolicy.findForcedDeletesMerges() call MergePolicy.findForcedDeletesMerges() = != if decl_stmt int final final = call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() for = < ++ call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call MergeScheduler.merge() call MergeScheduler.merge() call MergeScheduler.merge() call MergeScheduler.merge() call MergeScheduler.merge() if != && decl_stmt int final final = call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() synchronized decl_stmt boolean = while if != throw new = for = < ++ decl_stmt OneMerge final final final final final = call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() if call decl LinkedList.contains() call decl LinkedList.contains() call decl LinkedList.contains() call decl LinkedList.contains() call decl LinkedList.contains() || call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() = decl_stmt java.lang.Throwable = call boolean.getException() call boolean.getException() call boolean.getException() call boolean.getException() call boolean.getException() if != throw new + call boolean.segString() call boolean.segString() call boolean.segString() call boolean.segString() call boolean.segString() if public public throws public final public final throws call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() boolean private final private final throws decl_stmt boolean = call MergeScheduler.merge() call MergeScheduler.merge() call MergeScheduler.merge() call MergeScheduler.merge() call MergeScheduler.merge() int boolean decl MergePolicy decl MergePolicy private synchronized private synchronized throws assert == - || > assert != if return if != return decl_stmt boolean = decl_stmt MergeSpecification final final final final final if != assert == || == : + = = != if decl_stmt int final final = call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() for = < ++ decl_stmt OneMerge final final final final final = call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() = else = = != if decl_stmt int final final = call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() for = < ++ call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() call decl MergePolicy.merges() return public synchronized < public synchronized < return decl MergePolicy public synchronized public synchronized if call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() == return else decl_stmt OneMerge = call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return public synchronized public synchronized return call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() != public public throws if private private throws synchronized boolean private private throws decl_stmt boolean = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() try call decl CloseableThreadLocal.close() call decl CloseableThreadLocal.close() call decl CloseableThreadLocal.close() call decl CloseableThreadLocal.close() call decl CloseableThreadLocal.close() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call MergeScheduler.close() call MergeScheduler.close() call MergeScheduler.close() call MergeScheduler.close() call MergeScheduler.close() call org.apache.lucene.index.BufferedUpdatesStream.clear() call org.apache.lucene.index.BufferedUpdatesStream.clear() call org.apache.lucene.index.BufferedUpdatesStream.clear() call org.apache.lucene.index.BufferedUpdatesStream.clear() call org.apache.lucene.index.BufferedUpdatesStream.clear() call org.apache.lucene.index.DocumentsWriter.close() call org.apache.lucene.index.DocumentsWriter.close() call org.apache.lucene.index.DocumentsWriter.close() call org.apache.lucene.index.DocumentsWriter.close() call org.apache.lucene.index.DocumentsWriter.close() call org.apache.lucene.index.DocumentsWriter.abort(IndexWriter) call org.apache.lucene.index.DocumentsWriter.abort(IndexWriter) call org.apache.lucene.index.DocumentsWriter.abort(IndexWriter) call org.apache.lucene.index.DocumentsWriter.abort(IndexWriter) call org.apache.lucene.index.DocumentsWriter.abort(IndexWriter) synchronized if != call org.apache.lucene.index.SegmentInfos.rollbackCommit(Directory) call org.apache.lucene.index.SegmentInfos.rollbackCommit(Directory) call org.apache.lucene.index.SegmentInfos.rollbackCommit(Directory) call org.apache.lucene.index.SegmentInfos.rollbackCommit(Directory) call org.apache.lucene.index.SegmentInfos.rollbackCommit(Directory) try call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) finally = call ReaderPool.dropAll() call ReaderPool.dropAll() call ReaderPool.dropAll() call ReaderPool.dropAll() call ReaderPool.dropAll() call org.apache.lucene.index.SegmentInfos.rollbackSegmentInfos(List) call org.apache.lucene.index.SegmentInfos.rollbackSegmentInfos(List) call org.apache.lucene.index.SegmentInfos.rollbackSegmentInfos(List) call org.apache.lucene.index.SegmentInfos.rollbackSegmentInfos(List) call org.apache.lucene.index.SegmentInfos.rollbackSegmentInfos(List) if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + if == call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.refresh() call org.apache.lucene.index.IndexFileDeleter.refresh() call org.apache.lucene.index.IndexFileDeleter.refresh() call org.apache.lucene.index.IndexFileDeleter.refresh() call org.apache.lucene.index.IndexFileDeleter.refresh() call org.apache.lucene.index.IndexFileDeleter.close() call org.apache.lucene.index.IndexFileDeleter.close() call org.apache.lucene.index.IndexFileDeleter.close() call org.apache.lucene.index.IndexFileDeleter.close() call org.apache.lucene.index.IndexFileDeleter.close() = call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() = = = catch finally if == synchronized if == if != try call org.apache.lucene.index.SegmentInfos.rollbackCommit(Directory) call org.apache.lucene.index.SegmentInfos.rollbackCommit(Directory) call org.apache.lucene.index.SegmentInfos.rollbackCommit(Directory) call org.apache.lucene.index.SegmentInfos.rollbackCommit(Directory) call org.apache.lucene.index.SegmentInfos.rollbackCommit(Directory) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) catch = = = = long boolean public public throws decl_stmt boolean = try synchronized decl_stmt long = call org.apache.lucene.index.DocumentsWriter.lockAndAbortAll(IndexWriter) call org.apache.lucene.index.DocumentsWriter.lockAndAbortAll(IndexWriter) call org.apache.lucene.index.DocumentsWriter.lockAndAbortAll(IndexWriter) call org.apache.lucene.index.DocumentsWriter.lockAndAbortAll(IndexWriter) call org.apache.lucene.index.DocumentsWriter.lockAndAbortAll(IndexWriter) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) - synchronized try = call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) - call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.clear() call org.apache.lucene.index.SegmentInfos.clear() call org.apache.lucene.index.SegmentInfos.clear() call org.apache.lucene.index.SegmentInfos.clear() call org.apache.lucene.index.SegmentInfos.clear() call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call ReaderPool.dropAll() call ReaderPool.dropAll() call ReaderPool.dropAll() call ReaderPool.dropAll() call ReaderPool.dropAll() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call FieldNumbers.clear() call FieldNumbers.clear() call FieldNumbers.clear() call FieldNumbers.clear() call FieldNumbers.clear() = finally call org.apache.lucene.index.DocumentsWriter.unlockAllAfterAbortAll(IndexWriter) call org.apache.lucene.index.DocumentsWriter.unlockAllAfterAbortAll(IndexWriter) call org.apache.lucene.index.DocumentsWriter.unlockAllAfterAbortAll(IndexWriter) call org.apache.lucene.index.DocumentsWriter.unlockAllAfterAbortAll(IndexWriter) call org.apache.lucene.index.DocumentsWriter.unlockAllAfterAbortAll(IndexWriter) if ! if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() catch private synchronized private synchronized = for final final final final final : if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() for final final final final final : if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + while call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() != if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() + assert == call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() throws call MergeScheduler.merge() call MergeScheduler.merge() call MergeScheduler.merge() call MergeScheduler.merge() call MergeScheduler.merge() synchronized if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() while call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() > || call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > assert == call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() synchronized synchronized throws call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) synchronized synchronized throws call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) synchronized synchronized call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() synchronized synchronized assert != && synchronized call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) long throws try synchronized synchronized if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() if != && call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) decl_stmt long final final if != && = call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) call org.apache.lucene.index.BufferedUpdatesStream.push(FrozenBufferedUpdates) else = call org.apache.lucene.index.BufferedUpdatesStream.getNextGen() call org.apache.lucene.index.BufferedUpdatesStream.getNextGen() call org.apache.lucene.index.BufferedUpdatesStream.getNextGen() call org.apache.lucene.index.BufferedUpdatesStream.getNextGen() call org.apache.lucene.index.BufferedUpdatesStream.getNextGen() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) finally call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() private synchronized private synchronized = new <> ++ decl HashSet private private decl_stmt java.util.HashSet < = new <> for = < ++ if call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() throw new + + if == throw new call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() decl List boolean Lock private < private < throws decl_stmt java.util.List < = new <> for = < ++ decl_stmt boolean = try decl_stmt java.util.concurrent.locks.Lock = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = finally if == return SegmentInfos FieldInfos String boolean boolean decl List decl List IOContext decl List long public public throws decl_stmt java.util.List < = decl_stmt boolean = try if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() decl_stmt java.util.List < = new <> decl_stmt long = decl_stmt java.util.List < = new <> for : if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + decl_stmt org.apache.lucene.index.SegmentInfos = += call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt boolean = try for : for : assert ! call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() : + + + decl_stmt java.lang.String = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + + + decl_stmt org.apache.lucene.store.IOContext = new new decl_stmt org.apache.lucene.index.FieldInfos = for : call FieldNumbers.addOrGet() call FieldNumbers.addOrGet() call FieldNumbers.addOrGet() call FieldNumbers.addOrGet() call FieldNumbers.addOrGet() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = finally if ! for : synchronized = try = finally if ! for : call org.apache.lucene.index.SegmentInfos.addAll(Iterable) call org.apache.lucene.index.SegmentInfos.addAll(Iterable) call org.apache.lucene.index.SegmentInfos.addAll(Iterable) call org.apache.lucene.index.SegmentInfos.addAll(Iterable) call org.apache.lucene.index.SegmentInfos.addAll(Iterable) = catch finally if else SegmentInfo TrackingDirectoryWrapper SegmentMerger MergePolicy decl Collection TrackingDirectoryWrapper boolean String IOContext SegmentCommitInfo long public public throws decl_stmt long = try if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() decl_stmt java.lang.String = for : += decl_stmt org.apache.lucene.store.IOContext final final = new new - - decl_stmt org.apache.lucene.store.TrackingDirectoryWrapper = new decl_stmt org.apache.lucene.index.SegmentInfo = new - new <> decl_stmt org.apache.lucene.index.SegmentMerger = new call decl CloseableThreadLocal.set() call decl CloseableThreadLocal.set() call decl CloseableThreadLocal.set() call decl CloseableThreadLocal.set() call decl CloseableThreadLocal.set() new if ! call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() return call org.apache.lucene.index.SegmentMerger.merge() call org.apache.lucene.index.SegmentMerger.merge() call org.apache.lucene.index.SegmentMerger.merge() call org.apache.lucene.index.SegmentMerger.merge() call org.apache.lucene.index.SegmentMerger.merge() decl_stmt org.apache.lucene.index.SegmentCommitInfo = new - - - call org.apache.lucene.index.SegmentInfo.setFiles(Collection) call org.apache.lucene.index.SegmentInfo.setFiles(Collection) call org.apache.lucene.index.SegmentInfo.setFiles(Collection) call org.apache.lucene.index.SegmentInfo.setFiles(Collection) call org.apache.lucene.index.SegmentInfo.setFiles(Collection) new <> call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.clearCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.clearCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.clearCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.clearCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.clearCreatedFiles() decl_stmt org.apache.lucene.index.MergePolicy final final = call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() decl_stmt boolean synchronized if call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() return = call org.apache.lucene.index.MergePolicy.useCompoundFile(SegmentInfos,SegmentCommitInfo,IndexWriter) call org.apache.lucene.index.MergePolicy.useCompoundFile(SegmentInfos,SegmentCommitInfo,IndexWriter) call org.apache.lucene.index.MergePolicy.useCompoundFile(SegmentInfos,SegmentCommitInfo,IndexWriter) call org.apache.lucene.index.MergePolicy.useCompoundFile(SegmentInfos,SegmentCommitInfo,IndexWriter) call org.apache.lucene.index.MergePolicy.useCompoundFile(SegmentInfos,SegmentCommitInfo,IndexWriter) if decl_stmt java.util.Collection < = call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() decl_stmt org.apache.lucene.store.TrackingDirectoryWrapper = new try finally call org.apache.lucene.index.SegmentInfo.setUseCompoundFile(boolean) call org.apache.lucene.index.SegmentInfo.setUseCompoundFile(boolean) call org.apache.lucene.index.SegmentInfo.setUseCompoundFile(boolean) call org.apache.lucene.index.SegmentInfo.setUseCompoundFile(boolean) call org.apache.lucene.index.SegmentInfo.setUseCompoundFile(boolean) call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call org.apache.lucene.index.SegmentInfo.addFiles(Collection) call org.apache.lucene.index.SegmentInfo.addFiles(Collection) call org.apache.lucene.index.SegmentInfo.addFiles(Collection) call org.apache.lucene.index.SegmentInfo.addFiles(Collection) call org.apache.lucene.index.SegmentInfo.addFiles(Collection) call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() synchronized if call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() return call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) catch String decl Set SegmentCommitInfo SegmentInfo boolean private private throws decl_stmt org.apache.lucene.index.SegmentInfo = new decl_stmt org.apache.lucene.index.SegmentCommitInfo = new call org.apache.lucene.index.SegmentInfo.setFiles(Collection) call org.apache.lucene.index.SegmentInfo.setFiles(Collection) call org.apache.lucene.index.SegmentInfo.setFiles(Collection) call org.apache.lucene.index.SegmentInfo.setFiles(Collection) call org.apache.lucene.index.SegmentInfo.setFiles(Collection) decl_stmt boolean = decl_stmt java.util.Set < = new <> try for : decl_stmt java.lang.String final final = call org.apache.lucene.index.SegmentInfo.namedForThisSegment(String) call org.apache.lucene.index.SegmentInfo.namedForThisSegment(String) call org.apache.lucene.index.SegmentInfo.namedForThisSegment(String) call org.apache.lucene.index.SegmentInfo.namedForThisSegment(String) call org.apache.lucene.index.SegmentInfo.namedForThisSegment(String) assert ! : + + + call org.apache.lucene.index.SegmentInfo.files() call org.apache.lucene.index.SegmentInfo.files() call org.apache.lucene.index.SegmentInfo.files() call org.apache.lucene.index.SegmentInfo.files() call org.apache.lucene.index.SegmentInfo.files() call Directory.copyFrom() call Directory.copyFrom() call Directory.copyFrom() call Directory.copyFrom() call Directory.copyFrom() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() = finally if ! assert call decl Set.equals() call decl Set.equals() call decl Set.equals() call decl Set.equals() call decl Set.equals() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() return protected protected throws protected protected throws public final public final throws call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() SegmentInfos boolean boolean boolean private private throws = synchronized if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + if != throw new if != throw new decl_stmt org.apache.lucene.index.SegmentInfos = decl_stmt boolean = try synchronized decl_stmt boolean = decl_stmt boolean = try = call org.apache.lucene.index.DocumentsWriter.flushAllThreads() call org.apache.lucene.index.DocumentsWriter.flushAllThreads() call org.apache.lucene.index.DocumentsWriter.flushAllThreads() call org.apache.lucene.index.DocumentsWriter.flushAllThreads() call org.apache.lucene.index.DocumentsWriter.flushAllThreads() if ! call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() = synchronized call ReaderPool.commit() call ReaderPool.commit() call ReaderPool.commit() call ReaderPool.commit() call ReaderPool.commit() if call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() != call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() call org.apache.lucene.index.SegmentInfos.changed() = call org.apache.lucene.index.SegmentInfos.clone() call org.apache.lucene.index.SegmentInfos.clone() call org.apache.lucene.index.SegmentInfos.clone() call org.apache.lucene.index.SegmentInfos.clone() call org.apache.lucene.index.SegmentInfos.clone() = call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() = call org.apache.lucene.index.SegmentInfos.files(boolean) call org.apache.lucene.index.SegmentInfos.files(boolean) call org.apache.lucene.index.SegmentInfos.files(boolean) call org.apache.lucene.index.SegmentInfos.files(boolean) call org.apache.lucene.index.SegmentInfos.files(boolean) call org.apache.lucene.index.IndexFileDeleter.incRef(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.incRef(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.incRef(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.incRef(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.incRef(SegmentInfos,boolean) = finally if ! if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) catch decl_stmt boolean = try if = finally if ! synchronized if != call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) = public final synchronized public final synchronized < public final synchronized public final synchronized < call org.apache.lucene.index.SegmentInfos.setUserData(Map,boolean) call org.apache.lucene.index.SegmentInfos.setUserData(Map,boolean) call org.apache.lucene.index.SegmentInfos.setUserData(Map,boolean) call org.apache.lucene.index.SegmentInfos.setUserData(Map,boolean) call org.apache.lucene.index.SegmentInfos.setUserData(Map,boolean) new <> call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() public final synchronized < public final synchronized < return call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() public final public final throws call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() public final public final return call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() != || call org.apache.lucene.index.DocumentsWriter.anyChanges() call org.apache.lucene.index.DocumentsWriter.anyChanges() call org.apache.lucene.index.DocumentsWriter.anyChanges() call org.apache.lucene.index.DocumentsWriter.anyChanges() call org.apache.lucene.index.DocumentsWriter.anyChanges() || call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() private final private final throws if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() synchronized if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() if == if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() else if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() boolean boolean String private final private final throws decl_stmt boolean = decl_stmt boolean = decl_stmt java.lang.String = try synchronized if != throw new if != try if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() = call org.apache.lucene.index.SegmentInfos.finishCommit(Directory) call org.apache.lucene.index.SegmentInfos.finishCommit(Directory) call org.apache.lucene.index.SegmentInfos.finishCommit(Directory) call org.apache.lucene.index.SegmentInfos.finishCommit(Directory) call org.apache.lucene.index.SegmentInfos.finishCommit(Directory) = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean) call org.apache.lucene.index.SegmentInfos.updateGeneration(SegmentInfos) call org.apache.lucene.index.SegmentInfos.updateGeneration(SegmentInfos) call org.apache.lucene.index.SegmentInfos.updateGeneration(SegmentInfos) call org.apache.lucene.index.SegmentInfos.updateGeneration(SegmentInfos) call org.apache.lucene.index.SegmentInfos.updateGeneration(SegmentInfos) = = call org.apache.lucene.index.SegmentInfos.createBackupSegmentInfos() call org.apache.lucene.index.SegmentInfos.createBackupSegmentInfos() call org.apache.lucene.index.SegmentInfos.createBackupSegmentInfos() call org.apache.lucene.index.SegmentInfos.createBackupSegmentInfos() call org.apache.lucene.index.SegmentInfos.createBackupSegmentInfos() = finally try if call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) else if == call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) finally = = else assert == if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() catch if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + if else if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() - / call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() return public final public final throws final final throws if && call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() boolean boolean boolean private private throws if != throw new decl_stmt boolean = try if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + decl_stmt boolean = synchronized decl_stmt boolean = try = call org.apache.lucene.index.DocumentsWriter.flushAllThreads() call org.apache.lucene.index.DocumentsWriter.flushAllThreads() call org.apache.lucene.index.DocumentsWriter.flushAllThreads() call org.apache.lucene.index.DocumentsWriter.flushAllThreads() call org.apache.lucene.index.DocumentsWriter.flushAllThreads() if ! call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() = finally call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.finishFullFlush(IndexWriter,boolean) synchronized |= = return catch return finally if ! if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() final synchronized final synchronized throws if if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() return else if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call org.apache.lucene.index.BufferedUpdatesStream.numTerms() call org.apache.lucene.index.BufferedUpdatesStream.numTerms() call org.apache.lucene.index.BufferedUpdatesStream.numTerms() call org.apache.lucene.index.BufferedUpdatesStream.numTerms() call org.apache.lucene.index.BufferedUpdatesStream.numTerms() + + call org.apache.lucene.index.BufferedUpdatesStream.ramBytesUsed() call org.apache.lucene.index.BufferedUpdatesStream.ramBytesUsed() call org.apache.lucene.index.BufferedUpdatesStream.ramBytesUsed() call org.apache.lucene.index.BufferedUpdatesStream.ramBytesUsed() call org.apache.lucene.index.BufferedUpdatesStream.ramBytesUsed() return decl BufferedUpdatesStream final synchronized final synchronized throws call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() decl_stmt ApplyDeletesResult final final final final final if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() + call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() call org.apache.lucene.index.SegmentInfos.totalMaxDoc() = call org.apache.lucene.index.BufferedUpdatesStream.applyDeletesAndUpdates(IndexWriter,ReaderPool,List) call org.apache.lucene.index.BufferedUpdatesStream.applyDeletesAndUpdates(IndexWriter,ReaderPool,List) call org.apache.lucene.index.BufferedUpdatesStream.applyDeletesAndUpdates(IndexWriter,ReaderPool,List) call org.apache.lucene.index.BufferedUpdatesStream.applyDeletesAndUpdates(IndexWriter,ReaderPool,List) call org.apache.lucene.index.BufferedUpdatesStream.applyDeletesAndUpdates(IndexWriter,ReaderPool,List) call org.apache.lucene.index.SegmentInfos.asList() call org.apache.lucene.index.SegmentInfos.asList() call org.apache.lucene.index.SegmentInfos.asList() call org.apache.lucene.index.SegmentInfos.asList() call org.apache.lucene.index.SegmentInfos.asList() if if ! && != if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + for : if ! call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call org.apache.lucene.index.SegmentInfos.remove(int) call org.apache.lucene.index.SegmentInfos.remove(int) call org.apache.lucene.index.SegmentInfos.remove(int) call org.apache.lucene.index.SegmentInfos.remove(int) call org.apache.lucene.index.SegmentInfos.remove(int) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) - call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call org.apache.lucene.index.BufferedUpdatesStream.prune(SegmentInfos) call org.apache.lucene.index.BufferedUpdatesStream.prune(SegmentInfos) call org.apache.lucene.index.BufferedUpdatesStream.prune(SegmentInfos) call org.apache.lucene.index.BufferedUpdatesStream.prune(SegmentInfos) call org.apache.lucene.index.BufferedUpdatesStream.prune(SegmentInfos) return return public final synchronized public final synchronized return call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() call org.apache.lucene.index.DocumentsWriter.getNumDocs() private synchronized private synchronized for : if ! call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) throw new + + + private private for : if == assert > : + + + final final throws if == = call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() = assert if && ! = decl DocValuesFieldUpdates decl Iterator int private private throws decl_stmt int = - for = < ++ decl_stmt java.util.Iterator = if call decl DocValuesFieldUpdates.doc() call decl DocValuesFieldUpdates.doc() call decl DocValuesFieldUpdates.doc() call decl DocValuesFieldUpdates.doc() call decl DocValuesFieldUpdates.doc() == if == if == - = decl_stmt org.apache.lucene.index.DocValuesFieldUpdates = call decl Iterator.add() call decl Iterator.add() call decl Iterator.add() call decl Iterator.add() call decl Iterator.add() call decl DocValuesFieldUpdates.value() call decl DocValuesFieldUpdates.value() call decl DocValuesFieldUpdates.value() call decl DocValuesFieldUpdates.value() call decl DocValuesFieldUpdates.value() call decl DocValuesFieldUpdates.nextDoc() call decl DocValuesFieldUpdates.nextDoc() call decl DocValuesFieldUpdates.nextDoc() call decl DocValuesFieldUpdates.nextDoc() call decl DocValuesFieldUpdates.nextDoc() else assert call decl DocValuesFieldUpdates.doc() call decl DocValuesFieldUpdates.doc() call decl DocValuesFieldUpdates.doc() call decl DocValuesFieldUpdates.doc() call decl DocValuesFieldUpdates.doc() > : + + + call decl DocValuesFieldUpdates.doc() call decl DocValuesFieldUpdates.doc() call decl DocValuesFieldUpdates.doc() call decl DocValuesFieldUpdates.doc() call decl DocValuesFieldUpdates.doc() + + decl Container Bits decl DocValuesFieldUpdates long decl DocValuesFieldUpdates SegmentCommitInfo ReadersAndUpdates Bits decl DocValuesFieldUpdates int String decl Iterator int DocValuesFieldUpdates decl List MergedDeletesAndUpdates int decl String decl Map synchronized private synchronized private throws decl_stmt java.util.List final final final < = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + decl_stmt int = decl_stmt long = decl_stmt MergedDeletesAndUpdates final final = new decl_stmt java.awt.Container final final final final final = new for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.apache.lucene.index.SegmentCommitInfo = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call decl Container.getBufferedDeletesGen() call decl Container.getBufferedDeletesGen() call decl Container.getBufferedDeletesGen() call decl Container.getBufferedDeletesGen() call decl Container.getBufferedDeletesGen() decl_stmt int final final = call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() decl_stmt org.apache.lucene.util.Bits final final = decl_stmt org.apache.lucene.index.ReadersAndUpdates final final = call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() assert != : + decl_stmt org.apache.lucene.util.Bits final final = call Bits.getLiveDocs() call Bits.getLiveDocs() call Bits.getLiveDocs() call Bits.getLiveDocs() call Bits.getLiveDocs() decl_stmt java.util.Map final final final < = call Bits.getMergingFieldUpdates() call Bits.getMergingFieldUpdates() call Bits.getMergingFieldUpdates() call Bits.getMergingFieldUpdates() call Bits.getMergingFieldUpdates() decl_stmt java.lang.String final final final decl_stmt org.apache.lucene.index.DocValuesFieldUpdates final final final decl_stmt java.util.Iterator final final final final final if call Bits.isEmpty() call Bits.isEmpty() call Bits.isEmpty() call Bits.isEmpty() call Bits.isEmpty() = = = else = new call Bits.size() call Bits.size() call Bits.size() call Bits.size() call Bits.size() = new call Bits.size() call Bits.size() call Bits.size() call Bits.size() call Bits.size() = new call Bits.size() call Bits.size() call Bits.size() call Bits.size() call Bits.size() decl_stmt int = for < : call Bits.entrySet() call Bits.entrySet() call Bits.entrySet() call Bits.entrySet() call Bits.entrySet() decl_stmt java.lang.String = decl_stmt org.apache.lucene.index.DocValuesFieldUpdates = = = call decl DocValuesFieldUpdates.getUpdates() call decl DocValuesFieldUpdates.getUpdates() call decl DocValuesFieldUpdates.getUpdates() call decl DocValuesFieldUpdates.getUpdates() call decl DocValuesFieldUpdates.getUpdates() if == = call decl DocValuesFieldUpdates.newUpdates() call decl DocValuesFieldUpdates.newUpdates() call decl DocValuesFieldUpdates.newUpdates() call decl DocValuesFieldUpdates.newUpdates() call decl DocValuesFieldUpdates.newUpdates() = call int.iterator() call int.iterator() call int.iterator() call int.iterator() call int.iterator() ++ if != assert != assert call int.length() call int.length() call int.length() call int.length() call int.length() == assert call ReadersAndUpdates.length() call ReadersAndUpdates.length() call ReadersAndUpdates.length() call ReadersAndUpdates.length() call ReadersAndUpdates.length() == if != for = < ++ if ! call int.get() call int.get() call int.get() call int.get() call int.get() assert ! call ReadersAndUpdates.get() call ReadersAndUpdates.get() call ReadersAndUpdates.get() call ReadersAndUpdates.get() call ReadersAndUpdates.get() else if ! call ReadersAndUpdates.get() call ReadersAndUpdates.get() call ReadersAndUpdates.get() call ReadersAndUpdates.get() call ReadersAndUpdates.get() if == || ! call MergedDeletesAndUpdates.init() call MergedDeletesAndUpdates.init() call MergedDeletesAndUpdates.init() call MergedDeletesAndUpdates.init() call MergedDeletesAndUpdates.init() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() if != else if != ++ else if != for = < ++ if call int.get() call int.get() call int.get() call int.get() call int.get() ++ else else += call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() - call decl Container.getDelCount() call decl Container.getDelCount() call decl Container.getDelCount() call decl Container.getDelCount() call decl Container.getDelCount() - call Bits.getPendingDeleteCount() call Bits.getPendingDeleteCount() call Bits.getPendingDeleteCount() call Bits.getPendingDeleteCount() call Bits.getPendingDeleteCount() else if != assert call ReadersAndUpdates.length() call ReadersAndUpdates.length() call ReadersAndUpdates.length() call ReadersAndUpdates.length() call ReadersAndUpdates.length() == for = < ++ if ! call ReadersAndUpdates.get() call ReadersAndUpdates.get() call ReadersAndUpdates.get() call ReadersAndUpdates.get() call ReadersAndUpdates.get() if == || ! call MergedDeletesAndUpdates.init() call MergedDeletesAndUpdates.init() call MergedDeletesAndUpdates.init() call MergedDeletesAndUpdates.init() call MergedDeletesAndUpdates.init() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() call MergedDeletesAndUpdates.docMap() if != else if != ++ else if != for = < ++ ++ else += call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() call decl Container.info() assert == if call decl DocValuesFieldUpdates.any() call decl DocValuesFieldUpdates.any() call decl DocValuesFieldUpdates.any() call decl DocValuesFieldUpdates.any() call decl DocValuesFieldUpdates.any() decl_stmt boolean = try call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() = finally if ! call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) if == call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() else decl_stmt java.lang.String = call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() call MergedDeletesAndUpdates.mergedDeletesAndUpdates() + if call decl DocValuesFieldUpdates.any() call decl DocValuesFieldUpdates.any() call decl DocValuesFieldUpdates.any() call decl DocValuesFieldUpdates.any() call decl DocValuesFieldUpdates.any() += + call decl DocValuesFieldUpdates.size() call decl DocValuesFieldUpdates.size() call decl DocValuesFieldUpdates.size() call decl DocValuesFieldUpdates.size() call decl DocValuesFieldUpdates.size() + += call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() return boolean int boolean boolean ReadersAndUpdates synchronized private synchronized private throws if != throw new if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + assert if if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() return decl_stmt org.apache.lucene.index.ReadersAndUpdates final final = == : assert ! call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) decl_stmt boolean final final = == || == || != && call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() == if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) if call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + : decl_stmt boolean final final = && ! assert > || assert != || || if != decl_stmt boolean = try if call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call ReaderPool.release() call ReaderPool.release() call ReaderPool.release() call ReaderPool.release() call ReaderPool.release() = finally if ! call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call org.apache.lucene.index.SegmentInfos.applyMergeChanges(MergePolicy,OneMerge,boolean) call org.apache.lucene.index.SegmentInfos.applyMergeChanges(MergePolicy,OneMerge,boolean) call org.apache.lucene.index.SegmentInfos.applyMergeChanges(MergePolicy,OneMerge,boolean) call org.apache.lucene.index.SegmentInfos.applyMergeChanges(MergePolicy,OneMerge,boolean) call org.apache.lucene.index.SegmentInfos.applyMergeChanges(MergePolicy,OneMerge,boolean) decl_stmt int = - assert >= call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) - if assert ! call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() decl_stmt boolean = try = finally if else try catch if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + if != - && ! if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return final private final private throws if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + if instanceof if throw else MergePolicy long boolean public public throws decl_stmt boolean = call decl CloseableThreadLocal.set() call decl CloseableThreadLocal.set() call decl CloseableThreadLocal.set() call decl CloseableThreadLocal.set() call decl CloseableThreadLocal.set() decl_stmt long final final = decl_stmt org.apache.lucene.index.MergePolicy final final = call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() try try try if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + = catch finally synchronized if == if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() else if == && != - || ! && ! catch if != && == if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + - + + + double StringBuilder int boolean final synchronized final synchronized throws if return assert > if throw new + decl_stmt boolean = for : if call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + + return if ! call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.contains(SegmentCommitInfo) if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + + return if != = if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() = call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() + = = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() for : if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() assert == assert == for : if > decl_stmt int final final = assert <= decl_stmt double final final = double / += * - += = return boolean final synchronized final synchronized throws decl_stmt boolean = try = finally if ! if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() String decl ApplyDeletesResult decl BufferedUpdatesStream SegmentInfo synchronized private synchronized private throws assert assert == - || > if != throw new if != return if return if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + decl_stmt ApplyDeletesResult final final final final final = call org.apache.lucene.index.BufferedUpdatesStream.applyDeletesAndUpdates(IndexWriter,ReaderPool,List) call org.apache.lucene.index.BufferedUpdatesStream.applyDeletesAndUpdates(IndexWriter,ReaderPool,List) call org.apache.lucene.index.BufferedUpdatesStream.applyDeletesAndUpdates(IndexWriter,ReaderPool,List) call org.apache.lucene.index.BufferedUpdatesStream.applyDeletesAndUpdates(IndexWriter,ReaderPool,List) call org.apache.lucene.index.BufferedUpdatesStream.applyDeletesAndUpdates(IndexWriter,ReaderPool,List) if if ! && != if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + for : call org.apache.lucene.index.SegmentInfos.remove(int) call org.apache.lucene.index.SegmentInfos.remove(int) call org.apache.lucene.index.SegmentInfos.remove(int) call org.apache.lucene.index.SegmentInfos.remove(int) call org.apache.lucene.index.SegmentInfos.remove(int) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) - if call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() decl_stmt java.lang.String final final = decl_stmt org.apache.lucene.index.SegmentInfo = new - new <> decl_stmt java.util.Map < = new <> call SegmentInfo.put() call SegmentInfo.put() call SegmentInfo.put() call SegmentInfo.put() call SegmentInfo.put() + call SegmentInfo.put() call SegmentInfo.put() call SegmentInfo.put() call SegmentInfo.put() call SegmentInfo.put() new - - - call org.apache.lucene.index.BufferedUpdatesStream.prune(SegmentInfos) call org.apache.lucene.index.BufferedUpdatesStream.prune(SegmentInfos) call org.apache.lucene.index.BufferedUpdatesStream.prune(SegmentInfos) call org.apache.lucene.index.BufferedUpdatesStream.prune(SegmentInfos) call org.apache.lucene.index.BufferedUpdatesStream.prune(SegmentInfos) if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + static static decl Map private static private static < decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new if != call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() decl List final synchronized final synchronized if decl_stmt java.util.List final final final < = for : call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() = call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() int ReadersAndUpdates boolean Throwable SegmentReader private final synchronized private final synchronized throws decl_stmt int final final = decl_stmt java.lang.Throwable = decl_stmt boolean = ! for = < ++ decl_stmt org.apache.lucene.index.SegmentReader final final = if != try decl_stmt org.apache.lucene.index.ReadersAndUpdates final final = call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() assert != if call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call org.apache.lucene.index.ReadersAndUpdates.dropChanges() call org.apache.lucene.index.ReadersAndUpdates.dropChanges() else call org.apache.lucene.index.ReadersAndUpdates.dropMergingUpdates() call org.apache.lucene.index.ReadersAndUpdates.dropMergingUpdates() call org.apache.lucene.index.ReadersAndUpdates.dropMergingUpdates() call org.apache.lucene.index.ReadersAndUpdates.dropMergingUpdates() call org.apache.lucene.index.ReadersAndUpdates.dropMergingUpdates() call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call ReaderPool.release() call ReaderPool.release() call ReaderPool.release() call ReaderPool.release() call ReaderPool.release() if call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() call ReaderPool.drop() catch if == = try catch if == = if ! SegmentReader int double double double SegmentMerger MergeState SegmentReader TrackingDirectoryWrapper double ReadersAndUpdates boolean boolean boolean IndexReaderWarmer SegmentCommitInfo int boolean TrackingDirectoryWrapper Bits SegmentReader long IOContext decl Collection decl List private private throws decl_stmt java.util.List < = decl_stmt org.apache.lucene.store.IOContext = new decl_stmt org.apache.lucene.store.TrackingDirectoryWrapper final final = new if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt boolean = try decl_stmt int = while < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.index.ReadersAndUpdates final final = call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() decl_stmt org.apache.lucene.index.SegmentReader decl_stmt org.apache.lucene.util.Bits final final decl_stmt int final final synchronized = call org.apache.lucene.index.ReadersAndUpdates.getReaderForMerge(IOContext) call org.apache.lucene.index.ReadersAndUpdates.getReaderForMerge(IOContext) call org.apache.lucene.index.ReadersAndUpdates.getReaderForMerge(IOContext) call org.apache.lucene.index.ReadersAndUpdates.getReaderForMerge(IOContext) call org.apache.lucene.index.ReadersAndUpdates.getReaderForMerge(IOContext) = call org.apache.lucene.index.ReadersAndUpdates.getReadOnlyLiveDocs() call org.apache.lucene.index.ReadersAndUpdates.getReadOnlyLiveDocs() call org.apache.lucene.index.ReadersAndUpdates.getReadOnlyLiveDocs() call org.apache.lucene.index.ReadersAndUpdates.getReadOnlyLiveDocs() call org.apache.lucene.index.ReadersAndUpdates.getReadOnlyLiveDocs() = call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() + call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() assert != assert call org.apache.lucene.index.ReadersAndUpdates.verifyDocCounts() call org.apache.lucene.index.ReadersAndUpdates.verifyDocCounts() call org.apache.lucene.index.ReadersAndUpdates.verifyDocCounts() call org.apache.lucene.index.ReadersAndUpdates.verifyDocCounts() call org.apache.lucene.index.ReadersAndUpdates.verifyDocCounts() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) if call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() != call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() + + call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() else if call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() != call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() else call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + if call SegmentReader.numDeletedDocs() call SegmentReader.numDeletedDocs() call SegmentReader.numDeletedDocs() call SegmentReader.numDeletedDocs() call SegmentReader.numDeletedDocs() != assert > call SegmentReader.numDeletedDocs() call SegmentReader.numDeletedDocs() call SegmentReader.numDeletedDocs() call SegmentReader.numDeletedDocs() call SegmentReader.numDeletedDocs() decl_stmt org.apache.lucene.index.SegmentReader synchronized = new call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() - decl_stmt boolean = try call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) = finally if ! call SegmentReader.decRef() call SegmentReader.decRef() call SegmentReader.decRef() call SegmentReader.decRef() call SegmentReader.decRef() = assert <= call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() : + + + call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() + + call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() call org.apache.lucene.index.ReadersAndUpdates.getPendingDeleteCount() + + call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() ++ decl_stmt org.apache.lucene.index.SegmentMerger final final = new = if call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.merge() call org.apache.lucene.index.SegmentMerger.merge() call org.apache.lucene.index.SegmentMerger.merge() call org.apache.lucene.index.SegmentMerger.merge() call org.apache.lucene.index.SegmentMerger.merge() decl_stmt org.apache.lucene.index.MergeState = assert == new <> call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) if call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() decl_stmt long = decl_stmt double = - / decl_stmt double = / / decl_stmt double = / decl_stmt double = / call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + + + call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() : + + call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() : + + call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() : + + call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() : + + call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() : + + call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() call MergeState.mergeFieldInfos() : + + / else call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() if call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() call org.apache.lucene.index.SegmentMerger.shouldMerge() == assert == return assert > decl_stmt boolean synchronized = if = decl_stmt java.util.Collection < = decl_stmt org.apache.lucene.store.TrackingDirectoryWrapper = new try = catch synchronized if if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() return else finally if == if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() = synchronized if if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() return else = decl_stmt boolean = try call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() = finally if ! if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() / / / / decl_stmt IndexReaderWarmer final final = call org.apache.lucene.index.LiveIndexWriterConfig.getMergedSegmentWarmer() call org.apache.lucene.index.LiveIndexWriterConfig.getMergedSegmentWarmer() call org.apache.lucene.index.LiveIndexWriterConfig.getMergedSegmentWarmer() call org.apache.lucene.index.LiveIndexWriterConfig.getMergedSegmentWarmer() call org.apache.lucene.index.LiveIndexWriterConfig.getMergedSegmentWarmer() if && != decl_stmt org.apache.lucene.index.ReadersAndUpdates final final = call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() call ReaderPool.get() decl_stmt org.apache.lucene.index.SegmentReader final final = call org.apache.lucene.index.ReadersAndUpdates.getReader(IOContext) call org.apache.lucene.index.ReadersAndUpdates.getReader(IOContext) call org.apache.lucene.index.ReadersAndUpdates.getReader(IOContext) call org.apache.lucene.index.ReadersAndUpdates.getReader(IOContext) call org.apache.lucene.index.ReadersAndUpdates.getReader(IOContext) try call IndexReaderWarmer.warm() call IndexReaderWarmer.warm() call IndexReaderWarmer.warm() call IndexReaderWarmer.warm() call IndexReaderWarmer.warm() finally synchronized call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call org.apache.lucene.index.ReadersAndUpdates.release(SegmentReader) call ReaderPool.release() call ReaderPool.release() call ReaderPool.release() call ReaderPool.release() call ReaderPool.release() if ! return = finally if == return synchronized synchronized assert != if ! call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() && == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() final final return call org.apache.lucene.index.DocumentsWriter.getBufferedDeleteTermsSize() call org.apache.lucene.index.DocumentsWriter.getBufferedDeleteTermsSize() call org.apache.lucene.index.DocumentsWriter.getBufferedDeleteTermsSize() call org.apache.lucene.index.DocumentsWriter.getBufferedDeleteTermsSize() call org.apache.lucene.index.DocumentsWriter.getBufferedDeleteTermsSize() final final return call org.apache.lucene.index.DocumentsWriter.getNumBufferedDeleteTerms() call org.apache.lucene.index.DocumentsWriter.getNumBufferedDeleteTerms() call org.apache.lucene.index.DocumentsWriter.getNumBufferedDeleteTerms() call org.apache.lucene.index.DocumentsWriter.getNumBufferedDeleteTerms() call org.apache.lucene.index.DocumentsWriter.getNumBufferedDeleteTerms() synchronized synchronized return call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() > call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() - : synchronized synchronized return StringBuilder synchronized synchronized < decl_stmt java.lang.StringBuilder final final = new for final final : if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() synchronized synchronized return - private synchronized private synchronized try catch throw new = return decl Collection private private throws decl_stmt java.util.Collection < = for final final : assert : + + + call Directory.listAll() call Directory.listAll() call Directory.listAll() call Directory.listAll() call Directory.listAll() assert call org.apache.lucene.index.IndexFileDeleter.exists(String) call org.apache.lucene.index.IndexFileDeleter.exists(String) call org.apache.lucene.index.IndexFileDeleter.exists(String) call org.apache.lucene.index.IndexFileDeleter.exists(String) call org.apache.lucene.index.IndexFileDeleter.exists(String) : + return decl Map SegmentCommitInfo SegmentInfos synchronized synchronized decl_stmt org.apache.lucene.index.SegmentInfos final final = new decl_stmt java.util.Map final final final < = new <> for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for : decl_stmt org.apache.lucene.index.SegmentCommitInfo = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != = call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) call org.apache.lucene.index.SegmentInfos.add(SegmentCommitInfo) return decl Collection boolean boolean private private final final throws assert == if != throw new try if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() synchronized if > call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() throw new + + + if == if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() try call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) finally = return if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + assert decl_stmt boolean = try synchronized assert == assert call org.apache.lucene.index.SegmentInfos.getGeneration() call org.apache.lucene.index.SegmentInfos.getGeneration() call org.apache.lucene.index.SegmentInfos.getGeneration() call org.apache.lucene.index.SegmentInfos.getGeneration() call org.apache.lucene.index.SegmentInfos.getGeneration() == if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + = = decl_stmt boolean = decl_stmt java.util.Collection final final final < try = call Directory.sync() call Directory.sync() call Directory.sync() call Directory.sync() call Directory.sync() = finally if ! = = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + finally synchronized call org.apache.lucene.index.SegmentInfos.updateGeneration(SegmentInfos) call org.apache.lucene.index.SegmentInfos.updateGeneration(SegmentInfos) call org.apache.lucene.index.SegmentInfos.updateGeneration(SegmentInfos) call org.apache.lucene.index.SegmentInfos.updateGeneration(SegmentInfos) call org.apache.lucene.index.SegmentInfos.updateGeneration(SegmentInfos) if ! if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) call org.apache.lucene.index.IndexFileDeleter.decRefWhileHandlingException(Collection) = catch public static public static throws try call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() return catch return throws if instanceof = call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() assert instanceof == assert == assert != if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call Throwable.getClass() call Throwable.getClass() call Throwable.getClass() call Throwable.getClass() call Throwable.getClass() + + synchronized if != = if public public return public public return == && == private final private final if assert call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() boolean synchronized synchronized decl_stmt boolean = == call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() && ! call org.apache.lucene.index.DocumentsWriter.anyChanges() call org.apache.lucene.index.DocumentsWriter.anyChanges() call org.apache.lucene.index.DocumentsWriter.anyChanges() call org.apache.lucene.index.DocumentsWriter.anyChanges() call org.apache.lucene.index.DocumentsWriter.anyChanges() && ! call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) if == call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + == call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() + + call org.apache.lucene.index.DocumentsWriter.anyChanges() call org.apache.lucene.index.DocumentsWriter.anyChanges() call org.apache.lucene.index.DocumentsWriter.anyChanges() call org.apache.lucene.index.DocumentsWriter.anyChanges() call org.apache.lucene.index.DocumentsWriter.anyChanges() + + call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() call BufferedUpdatesStream.any() return synchronized synchronized return public synchronized public synchronized throws call org.apache.lucene.index.IndexFileDeleter.revisitPolicy() call org.apache.lucene.index.IndexFileDeleter.revisitPolicy() call org.apache.lucene.index.IndexFileDeleter.revisitPolicy() call org.apache.lucene.index.IndexFileDeleter.revisitPolicy() call org.apache.lucene.index.IndexFileDeleter.revisitPolicy() boolean final final final final throws if ! call Directory.getCreatedFiles() call Directory.getCreatedFiles() call Directory.getCreatedFiles() call Directory.getCreatedFiles() call Directory.getCreatedFiles() throw new if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() decl_stmt boolean = try = finally if ! call Directory.getCreatedFiles() call Directory.getCreatedFiles() call Directory.getCreatedFiles() call Directory.getCreatedFiles() call Directory.getCreatedFiles() new <> call Directory.getCreatedFiles() call Directory.getCreatedFiles() call Directory.getCreatedFiles() call Directory.getCreatedFiles() call Directory.getCreatedFiles() synchronized final synchronized final < throws call org.apache.lucene.index.IndexFileDeleter.deleteNewFiles(Collection) call org.apache.lucene.index.IndexFileDeleter.deleteNewFiles(Collection) call org.apache.lucene.index.IndexFileDeleter.deleteNewFiles(Collection) call org.apache.lucene.index.IndexFileDeleter.deleteNewFiles(Collection) call org.apache.lucene.index.IndexFileDeleter.deleteNewFiles(Collection) decl Collection synchronized final synchronized final throws decl_stmt java.util.Collection < try = catch = if != call org.apache.lucene.index.IndexFileDeleter.deleteNewFiles(Collection) call org.apache.lucene.index.IndexFileDeleter.deleteNewFiles(Collection) call org.apache.lucene.index.IndexFileDeleter.deleteNewFiles(Collection) call org.apache.lucene.index.IndexFileDeleter.deleteNewFiles(Collection) call org.apache.lucene.index.IndexFileDeleter.deleteNewFiles(Collection) final final throws return call org.apache.lucene.index.DocumentsWriter.purgeBuffer(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.purgeBuffer(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.purgeBuffer(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.purgeBuffer(IndexWriter,boolean) call org.apache.lucene.index.DocumentsWriter.purgeBuffer(IndexWriter,boolean) final final throws try finally if call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() final final throws try finally if call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() call org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy() public synchronized public synchronized throws call org.apache.lucene.index.IndexFileDeleter.incRef(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.incRef(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.incRef(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.incRef(SegmentInfos,boolean) call org.apache.lucene.index.IndexFileDeleter.incRef(SegmentInfos,boolean) if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() + + public synchronized public synchronized throws call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) call org.apache.lucene.index.IndexFileDeleter.decRef(Collection) if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() call org.apache.lucene.index.SegmentInfos.getVersion() + + private private throws return boolean Event private private < throws decl_stmt boolean = if == decl_stmt org.apache.lucene.index.Event while = != = call Event.process() call Event.process() call Event.process() call Event.process() call Event.process() return static static throws try return catch return private private assert >= if call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) > call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) - private private assert >= if call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() + > private private assert >= throw new + + + call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() + + + MergeRateLimiter private private return new public public throws assert == : + decl_stmt org.apache.lucene.index.MergeRateLimiter = call decl CloseableThreadLocal.get() call decl CloseableThreadLocal.get() call decl CloseableThreadLocal.get() call decl CloseableThreadLocal.get() call decl CloseableThreadLocal.get() assert != return new MergeRateLimiter public public throws assert == : + decl_stmt org.apache.lucene.index.MergeRateLimiter = call decl CloseableThreadLocal.get() call decl CloseableThreadLocal.get() call decl CloseableThreadLocal.get() call decl CloseableThreadLocal.get() call decl CloseableThreadLocal.get() assert != return new