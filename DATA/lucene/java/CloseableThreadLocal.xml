org.apache.lucene.util java.io.Closeable import java.lang.ref.WeakReference import java.util.Iterator import java.util.Map import java.util.WeakHashMap import java.util.concurrent.atomic.AtomicInteger import class super super implements decl Map AtomicInteger decl ThreadLocal int protected protected return decl WeakReference T public public decl_stmt WeakReference < = call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() if == decl_stmt T = if != return else return else return call decl WeakReference.get() call decl WeakReference.get() call decl WeakReference.get() call decl WeakReference.get() call decl WeakReference.get() public public call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() new <> synchronized call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() private private if call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() == int Thread int private private synchronized decl_stmt int = for < = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt java.lang.Thread final final = if ! call Thread.isAlive() call Thread.isAlive() call Thread.isAlive() call Thread.isAlive() call Thread.isAlive() else ++ decl_stmt int = + * if <= = call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) public public = if != call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() =