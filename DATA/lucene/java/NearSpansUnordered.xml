org.apache.lucene.search.spans java.io.IOException import java.util.ArrayList import java.util.List import org.apache.lucene.search.TwoPhaseIterator import org.apache.lucene.util.PriorityQueue import class org.apache.lucene.search.spans.NearSpansUnordered super super extends int int decl List SpansCell SpanPositionQueue private private = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() assert call SpansCell.docID() call SpansCell.docID() call SpansCell.docID() call SpansCell.docID() call SpansCell.docID() == - assert call SpansCell.startPosition() call SpansCell.startPosition() call SpansCell.startPosition() call SpansCell.startPosition() call SpansCell.startPosition() == - call SpanPositionQueue.add() call SpanPositionQueue.add() call SpanPositionQueue.add() call SpanPositionQueue.add() call SpanPositionQueue.add() private private throws call SpanPositionQueue.clear() call SpanPositionQueue.clear() call SpanPositionQueue.clear() call SpanPositionQueue.clear() call SpanPositionQueue.clear() for : assert == - assert != call SpanPositionQueue.add() call SpanPositionQueue.add() call SpanPositionQueue.add() call SpanPositionQueue.add() call SpanPositionQueue.add() int public public throws decl_stmt int = if != return private private if != - -= assert != = - assert >= += private private assert == call SpansCell.docID() call SpansCell.docID() call SpansCell.docID() call SpansCell.docID() call SpansCell.docID() if > call SpansCell.endPosition() call SpansCell.endPosition() call SpansCell.endPosition() call SpansCell.endPosition() call SpansCell.endPosition() = public public return public public return public public return public public throws public public return public public return public public return public public throws return public public throws return public public return public public return + + protected final protected final return int int static static assert == : + + + decl_stmt int = decl_stmt int = return == < : < private private return call SpanPositionQueue.top() call SpanPositionQueue.top() call SpanPositionQueue.top() call SpanPositionQueue.top() call SpanPositionQueue.top() private private assert == call SpansCell.docID() call SpansCell.docID() call SpansCell.docID() call SpansCell.docID() call SpansCell.docID() return call SpansCell.endPosition() call SpansCell.endPosition() call SpansCell.endPosition() call SpansCell.endPosition() call SpansCell.endPosition() - - <= throws while if = = return assert != if != call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() else return public public throws if = return while == - call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() assert != while if == = return call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() call SpanPositionQueue.updateTop() if return public public assert != return - : : public public return - : : call SpansCell.endPosition() call SpansCell.endPosition() call SpansCell.endPosition() call SpansCell.endPosition() call SpansCell.endPosition() public public return call SpansCell.startPosition() call SpansCell.startPosition() call SpansCell.startPosition() call SpansCell.startPosition() call SpansCell.startPosition() - public public throws for :