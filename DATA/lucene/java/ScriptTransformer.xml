org.apache.solr.handler.dataimport static static org.apache.solr.handler.data.DataImportHandlerException.wrapAndThrow import static static org.apache.solr.handler.data.DataImportHandlerException.SEVERE import java.util.Map import javax.script.Invocable import javax.script.ScriptEngine import javax.script.ScriptEngineManager import javax.script.ScriptException import class org.apache.solr.handler.dataimport.ScriptTransformer super super extends Invocable String public public < try if == if == return return call javax.script.Invocable.invokeFunction(String,Object) call javax.script.Invocable.invokeFunction(String,Object) call javax.script.Invocable.invokeFunction(String,Object) call javax.script.Invocable.invokeFunction(String,Object) call javax.script.Invocable.invokeFunction(String,Object) new catch throw catch + return ScriptEngineManager ScriptEngine String String private private decl_stmt java.lang.String = decl_stmt java.lang.String = if == throw new decl_stmt javax.script.ScriptEngineManager = new decl_stmt ScriptEngine = call javax.script.ScriptEngineManager.getEngineByName(String) call javax.script.ScriptEngineManager.getEngineByName(String) call javax.script.ScriptEngineManager.getEngineByName(String) call javax.script.ScriptEngineManager.getEngineByName(String) call javax.script.ScriptEngineManager.getEngineByName(String) if == throw new + if instanceof = else throw new + + + call ScriptEngine.getClass() call ScriptEngine.getClass() call ScriptEngine.getClass() call ScriptEngine.getClass() call ScriptEngine.getClass() try call ScriptEngine.eval() call ScriptEngine.eval() call ScriptEngine.eval() call ScriptEngine.eval() call ScriptEngine.eval() catch + + + public public = public public return