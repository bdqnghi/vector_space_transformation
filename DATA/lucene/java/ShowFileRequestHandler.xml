org.apache.solr.handler.admin org.apache.solr.cloud.ZkSolrResourceLoader import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.ContentStreamBase import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.core.CoreContainer import org.apache.solr.core.SolrCore import org.apache.solr.core.SolrResourceLoader import org.apache.solr.handler.RequestHandlerBase import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.RawResponseWriter import org.apache.solr.response.SolrQueryResponse import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.ManagedIndexSchema import org.apache.zookeeper.KeeperException import org.slf4j.Logger import org.slf4j.LoggerFactory import java.io.File import java.io.IOException import java.io.UnsupportedEncodingException import java.lang.invoke.MethodHandles import java.net.URISyntaxException import java.util.Date import java.util.HashSet import java.util.List import java.util.Locale import java.util.Set import class org.apache.solr.handler.admin.ShowFileRequestHandler super super extends String decl Set String Logger public public = decl Set decl String public static < public static < decl_stmt java.util.Set < = new <> if != decl_stmt java.lang.String = if != for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return CoreContainer public public throws decl_stmt org.apache.solr.core.CoreContainer = if call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() else decl NamedList decl List ContentStreamBase ModifiableSolrParams decl List SolrZkClient String decl SimpleOrderedMap private private throws decl_stmt org.apache.solr.common.cloud.SolrZkClient = decl_stmt java.lang.String = if == return decl_stmt java.util.List < = call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt org.apache.solr.common.util.NamedList < < = new <> for : if continue decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt java.util.List < = call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) + + if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() else call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() else decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) decl_stmt org.apache.solr.common.util.ContentStreamBase = new call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) decl NamedList int ContentStreamBase ModifiableSolrParams String File decl SimpleOrderedMap private private decl_stmt File = if == return if ! call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() + + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() + new + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() + + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() + return if ! call File.canRead() call File.canRead() call File.canRead() call File.canRead() call File.canRead() || call File.isHidden() call File.isHidden() call File.isHidden() call File.isHidden() call File.isHidden() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() + + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() + new + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() + + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() + return if call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() decl_stmt int = call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() + decl_stmt org.apache.solr.common.util.NamedList < < = new <> for : call File.listFiles() call File.listFiles() call File.listFiles() call File.listFiles() call File.listFiles() decl_stmt java.lang.String = = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) if continue decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() if call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() else call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() new else decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) decl_stmt org.apache.solr.common.util.ContentStreamBase = new call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) String public static public static < decl_stmt java.lang.String = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() || call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() if call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + new + return if call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) >= || call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) if call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + new + return return SolrCore String String String ZkSolrResourceLoader public static public static < throws decl_stmt java.lang.String = decl_stmt org.apache.solr.core.SolrCore = decl_stmt org.apache.solr.cloud.ZkSolrResourceLoader final final = call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() decl_stmt java.lang.String = call org.apache.solr.cloud.ZkSolrResourceLoader.getConfigSetZkPath() call org.apache.solr.cloud.ZkSolrResourceLoader.getConfigSetZkPath() call org.apache.solr.cloud.ZkSolrResourceLoader.getConfigSetZkPath() call org.apache.solr.cloud.ZkSolrResourceLoader.getConfigSetZkPath() call org.apache.solr.cloud.ZkSolrResourceLoader.getConfigSetZkPath() decl_stmt java.lang.String = if == = else = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) if return if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) = + + if ! call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + new + return return File String File SolrResourceLoader public static public static < decl_stmt File = decl_stmt org.apache.solr.core.SolrResourceLoader final final = decl_stmt File = new call org.apache.solr.core.SolrResourceLoader.getConfigDir() call org.apache.solr.core.SolrResourceLoader.getConfigDir() call org.apache.solr.core.SolrResourceLoader.getConfigDir() call org.apache.solr.core.SolrResourceLoader.getConfigDir() call org.apache.solr.core.SolrResourceLoader.getConfigDir() if ! call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() try = new call org.apache.solr.core.SolrResourceLoader.getClassLoader() call org.apache.solr.core.SolrResourceLoader.getClassLoader() call org.apache.solr.core.SolrResourceLoader.getClassLoader() call org.apache.solr.core.SolrResourceLoader.getClassLoader() call org.apache.solr.core.SolrResourceLoader.getClassLoader() call org.apache.solr.core.SolrResourceLoader.getConfigDir() call org.apache.solr.core.SolrResourceLoader.getConfigDir() call org.apache.solr.core.SolrResourceLoader.getConfigDir() call org.apache.solr.core.SolrResourceLoader.getConfigDir() call org.apache.solr.core.SolrResourceLoader.getConfigDir() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() new return decl_stmt java.lang.String = if == = else = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call java.lang.String.toUpperCase(Locale) call java.lang.String.toUpperCase(Locale) call java.lang.String.toUpperCase(Locale) call java.lang.String.toUpperCase(Locale) call java.lang.String.toUpperCase(Locale) call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + new + return if call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) >= call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + new + return = new return public final < public final < return public public return