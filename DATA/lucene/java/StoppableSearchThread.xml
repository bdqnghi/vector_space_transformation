org.apache.solr.cloud java.lang.invoke.MethodHandles import java.util.Random import java.util.concurrent.atomic.AtomicInteger import org.apache.lucene.util.LuceneTestCase import org.apache.solr.client.solrj.SolrQuery import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.impl.CloudSolrClient import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.cloud.StoppableSearchThread super super extends AtomicInteger decl String boolean Logger CloudSolrClient int Random public public decl_stmt java.util.Random = decl_stmt int = while && ! ++ try call CloudSolrClient.query() call CloudSolrClient.query() call CloudSolrClient.query() call CloudSolrClient.query() call CloudSolrClient.query() new call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) catch if instanceof call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() try call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + public public = public public return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get()