org.apache.solr.util java.io.FileNotFoundException import java.io.IOException import java.io.InterruptedIOException import java.lang.invoke.MethodHandles import java.lang.reflect.Method import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicLong import org.apache.hadoop.conf.Configuration import org.apache.hadoop.fs.FileSystem import org.apache.hadoop.fs.Path import org.apache.hadoop.hdfs.DistributedFileSystem import org.apache.hadoop.hdfs.server.namenode.LeaseExpiredException import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.util.FSHDFSUtils AtomicLong Logger public static public static final final final final throws if ! instanceof return long InterruptedIOException long long long Method long boolean static static final final final final final final throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt long = decl_stmt long = + decl_stmt long = decl_stmt long = * decl_stmt com.sun.jdi.Method = try = new catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() if != && return decl_stmt boolean = for = ! ++ = if break if || break try if == else decl_stmt long = while - < && ! if != && = break catch decl_stmt InterruptedIOException = new call InterruptedIOException.initCause() call InterruptedIOException.initCause() call InterruptedIOException.initCause() call InterruptedIOException.initCause() call InterruptedIOException.initCause() throw if call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() return static static final final final final final final final final final final if < call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + return return boolean static static final final final final final final final final throws decl_stmt boolean = try = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + catch if instanceof && throw new + else if instanceof throw call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return private static private static final final final final final final return + + + + + - + private static private static final final final final final final try return catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return