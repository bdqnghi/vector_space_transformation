org.apache.solr.handler.loader java.io.IOException import java.io.Reader import java.io.StringReader import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Arrays import java.util.HashMap import java.util.Iterator import java.util.LinkedHashMap import java.util.List import java.util.Locale import java.util.Map import java.util.UUID import org.apache.commons.io.IOUtils import org.apache.solr.common.SolrException import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.SolrInputField import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.params.UpdateParams import org.apache.solr.common.util.ContentStream import org.apache.solr.common.util.JsonRecordReader import org.apache.solr.handler.RequestHandlerUtils import org.apache.solr.handler.UpdateRequestHandler import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.schema.SchemaField import org.apache.solr.update.AddUpdateCommand import org.apache.solr.update.CommitUpdateCommand import org.apache.solr.update.DeleteUpdateCommand import org.apache.solr.update.RollbackUpdateCommand import org.apache.solr.update.processor.UpdateRequestProcessor import org.apache.solr.util.RecordingJSONParser import org.noggit.JSONParser import org.noggit.JSONParser.ParseException import org.noggit.ObjectBuilder import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.common.params.CommonParams.JSON import static static org.apache.solr.common.params.CommonParams.PATH import class org.apache.solr.handler.loader.JsonLoader super super extends String Logger public public return public public throws new String Reader public public throws decl_stmt java.io.Reader = try = if call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() decl_stmt java.lang.String = call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() = new catch throw new + finally decl String CommitUpdateCommand String String String int int throws decl_stmt java.lang.String = if || decl_stmt java.lang.String = decl_stmt java.lang.String = return = new decl_stmt int = while != switch case break case if decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt int = if == else if == else else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt org.apache.solr.update.CommitUpdateCommand = new = else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt org.apache.solr.update.CommitUpdateCommand = new = else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) else throw new + + + + break case case case case case call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + case case case break default: call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + break = ArrayList AddUpdateCommand String boolean JsonRecordReader decl Map boolean private private final final throws if == = if == || == = new decl_stmt boolean final final = decl_stmt java.lang.String final final = decl_stmt boolean final final = if != if ! throw new = new else = new decl_stmt org.apache.solr.common.util.JsonRecordReader = call org.apache.solr.common.util.JsonRecordReader.streamRecords(JSONParser,Handler) call org.apache.solr.common.util.JsonRecordReader.streamRecords(JSONParser,Handler) call org.apache.solr.common.util.JsonRecordReader.streamRecords(JSONParser,Handler) call org.apache.solr.common.util.JsonRecordReader.streamRecords(JSONParser,Handler) call org.apache.solr.common.util.JsonRecordReader.streamRecords(JSONParser,Handler) new decl_stmt java.util.ArrayList = public public < decl_stmt java.util.Map < = if if == = new call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) else decl_stmt org.apache.solr.update.AddUpdateCommand = new = = = new for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() try catch throw new AddUpdateCommand decl Map public public < decl_stmt java.util.Map < = if if == = new else decl_stmt org.apache.solr.update.AddUpdateCommand = new = = = new for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() try catch throw new RecordingJSONParser String String Map Map SchemaField private < private < < decl_stmt java.util.Map = if != && instanceof = new decl_stmt org.apache.solr.util.RecordingJSONParser = call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call org.apache.solr.util.RecordingJSONParser.getBuf() call org.apache.solr.util.RecordingJSONParser.getBuf() call org.apache.solr.util.RecordingJSONParser.getBuf() call org.apache.solr.util.RecordingJSONParser.getBuf() call org.apache.solr.util.RecordingJSONParser.getBuf() call org.apache.solr.util.RecordingJSONParser.resetBuf() call org.apache.solr.util.RecordingJSONParser.resetBuf() call org.apache.solr.util.RecordingJSONParser.resetBuf() call org.apache.solr.util.RecordingJSONParser.resetBuf() call org.apache.solr.util.RecordingJSONParser.resetBuf() if decl_stmt org.apache.solr.schema.SchemaField = if == throw new decl_stmt java.lang.String = if == throw new decl_stmt java.util.Map = new decl_stmt java.lang.String = call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() if == = call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() if != && call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.values() call java.util.Map.values() call java.util.Map.values() call java.util.Map.values() call java.util.Map.values() = return int throws decl_stmt int = switch case break case break default: throws switch case return case case case return case return case return default: throw new + + + + DeleteUpdateCommand String throws if == else decl_stmt org.apache.solr.update.DeleteUpdateCommand = new = decl_stmt java.lang.String = call org.apache.solr.update.DeleteUpdateCommand.setId(String) call org.apache.solr.update.DeleteUpdateCommand.setId(String) call org.apache.solr.update.DeleteUpdateCommand.setId(String) call org.apache.solr.update.DeleteUpdateCommand.setId(String) call org.apache.solr.update.DeleteUpdateCommand.setId(String) throws assert == for = if == return DeleteUpdateCommand String throws assert == decl_stmt org.apache.solr.update.DeleteUpdateCommand = new = while = if == decl_stmt java.lang.String = if if call org.apache.solr.update.DeleteUpdateCommand.setId(String) call org.apache.solr.update.DeleteUpdateCommand.setId(String) call org.apache.solr.update.DeleteUpdateCommand.setId(String) call org.apache.solr.update.DeleteUpdateCommand.setId(String) call org.apache.solr.update.DeleteUpdateCommand.setId(String) else if call DeleteUpdateCommand.setQuery() call DeleteUpdateCommand.setQuery() call DeleteUpdateCommand.setQuery() call DeleteUpdateCommand.setQuery() call DeleteUpdateCommand.setQuery() else if = int else if call DeleteUpdateCommand.setVersion() call DeleteUpdateCommand.setVersion() call DeleteUpdateCommand.setVersion() call DeleteUpdateCommand.setVersion() call DeleteUpdateCommand.setVersion() else if call DeleteUpdateCommand.setRoute() call DeleteUpdateCommand.setRoute() call DeleteUpdateCommand.setRoute() call DeleteUpdateCommand.setRoute() call DeleteUpdateCommand.setRoute() else throw new + + + + else throw new + + + + else if == if call org.apache.solr.update.DeleteUpdateCommand.getId() call org.apache.solr.update.DeleteUpdateCommand.getId() call org.apache.solr.update.DeleteUpdateCommand.getId() call org.apache.solr.update.DeleteUpdateCommand.getId() call org.apache.solr.update.DeleteUpdateCommand.getId() == && call org.apache.solr.update.DeleteUpdateCommand.getQuery() call org.apache.solr.update.DeleteUpdateCommand.getQuery() call org.apache.solr.update.DeleteUpdateCommand.getQuery() call org.apache.solr.update.DeleteUpdateCommand.getQuery() call org.apache.solr.update.DeleteUpdateCommand.getQuery() == throw new + + return else throw new + + + + throws return new decl Map Object SolrParams throws decl_stmt java.util.Map final final final < = decl_stmt org.apache.solr.common.params.SolrParams = new public public decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return == : call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() public public return new public < public < return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() = Object public public decl_stmt java.lang.Object = return == : call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() public public return new public < public < return AddUpdateCommand float String int throws decl_stmt org.apache.solr.update.AddUpdateCommand = new = = decl_stmt float = while decl_stmt int = if == if decl_stmt java.lang.String = if if != throw new + + + = = else if = else if = int else if = else throw new + + + + else throw new + + + else if == if == throw new + + call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() call AddUpdateCommand.solrDoc() return else throw new + + + + AddUpdateCommand int throws while decl_stmt org.apache.solr.update.AddUpdateCommand = new = = decl_stmt int = if == break = int throws decl_stmt int = return if != throw new + + + + + + String SolrInputField SolrInputDocument private private throws assert == decl_stmt org.apache.solr.common.SolrInputDocument = new for = if == return decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = while = != call org.apache.solr.common.SolrInputDocument.addChildDocument(SolrInputDocument) call org.apache.solr.common.SolrInputDocument.addChildDocument(SolrInputDocument) call org.apache.solr.common.SolrInputDocument.addChildDocument(SolrInputDocument) call org.apache.solr.common.SolrInputDocument.addChildDocument(SolrInputDocument) call org.apache.solr.common.SolrInputDocument.addChildDocument(SolrInputDocument) else decl_stmt org.apache.solr.common.SolrInputField = new call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() int Object private private throws decl_stmt int = if == else decl_stmt java.lang.Object = String float Object Object decl Map private private throws assert == decl_stmt float = decl_stmt java.lang.Object = decl_stmt java.util.Map < = for = switch case decl_stmt java.lang.String = if = if != && != && != throw new + + + + + + = float else if = else if == = new <> decl_stmt java.lang.Object = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() break case if != if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else return default: throw new + + + + + + Object private private throws if == decl_stmt java.util.List < = return else decl_stmt java.lang.Object = return private private throws switch case return case return case return case return case return case return case return default: throw new + + + + + + ArrayList Object private < private < throws assert == decl_stmt java.util.ArrayList = new for = if == return decl_stmt java.lang.Object = call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E)