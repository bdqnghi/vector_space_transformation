org.apache.lucene.analysis.morfologik java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.List import java.util.regex.Pattern import morfologik.stemming.Dictionary import morfologik.stemming.DictionaryLookup import morfologik.stemming.IStemmer import morfologik.stemming.WordData import morfologik.stemming.polish.PolishStemmer import org.apache.lucene.analysis.TokenFilter import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.KeywordAttribute import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import org.apache.lucene.analysis.util.CharacterUtils import org.apache.lucene.util.CharsRefBuilder import class org.apache.lucene.analysis.morfologik.MorfologikFilter super super extends Pattern CharsRefBuilder PositionIncrementAttribute int State CharTermAttribute decl List IStemmer MorphosyntacticTagsAttribute TokenStream CharacterUtils decl ArrayList KeywordAttribute StringBuilder WordData CharSequence decl String private private decl_stmt WordData final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() ++ call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call WordData.getStem() call WordData.getStem() call WordData.getStem() call WordData.getStem() call WordData.getStem() decl_stmt java.lang.CharSequence = call WordData.getTag() call WordData.getTag() call WordData.getTag() call WordData.getTag() call WordData.getTag() if != decl_stmt java.lang.String = call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() for = < ++ if call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() <= call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() new decl_stmt java.lang.StringBuilder = call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.lucene.analysis.morfologik.MorphosyntacticTagsAttribute.setTags(List) call org.apache.lucene.analysis.morfologik.MorphosyntacticTagsAttribute.setTags(List) call org.apache.lucene.analysis.morfologik.MorphosyntacticTagsAttribute.setTags(List) call org.apache.lucene.analysis.morfologik.MorphosyntacticTagsAttribute.setTags(List) call org.apache.lucene.analysis.morfologik.MorphosyntacticTagsAttribute.setTags(List) call decl ArrayList.subList() call decl ArrayList.subList() call decl ArrayList.subList() call decl ArrayList.subList() call decl ArrayList.subList() else call org.apache.lucene.analysis.morfologik.MorphosyntacticTagsAttribute.setTags(List) call org.apache.lucene.analysis.morfologik.MorphosyntacticTagsAttribute.setTags(List) call org.apache.lucene.analysis.morfologik.MorphosyntacticTagsAttribute.setTags(List) call org.apache.lucene.analysis.morfologik.MorphosyntacticTagsAttribute.setTags(List) call org.apache.lucene.analysis.morfologik.MorphosyntacticTagsAttribute.setTags(List) > private private = = return call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > public final public final throws if < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) return else if if ! call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() && || = else call MorphosyntacticTagsAttribute.clear() call MorphosyntacticTagsAttribute.clear() call MorphosyntacticTagsAttribute.clear() call MorphosyntacticTagsAttribute.clear() call MorphosyntacticTagsAttribute.clear() return else return int char private private decl_stmt int final final = call org.apache.lucene.util.CharsRefBuilder.setLength(int) call org.apache.lucene.util.CharsRefBuilder.setLength(int) call org.apache.lucene.util.CharsRefBuilder.setLength(int) call org.apache.lucene.util.CharsRefBuilder.setLength(int) call org.apache.lucene.util.CharsRefBuilder.setLength(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) decl_stmt char = call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() for = < += call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) return call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() public public throws = = call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear()