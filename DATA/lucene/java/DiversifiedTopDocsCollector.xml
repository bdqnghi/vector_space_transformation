org.apache.lucene.search java.io.IOException import java.util.HashMap import java.util.Map import java.util.Stack import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.NumericDocValues import org.apache.lucene.search.DiversifiedTopDocsCollector.ScoreDocKey import org.apache.lucene.util.PriorityQueue import class org.apache.lucene.search.DiversifiedTopDocsCollector super super extends decl Stack int int ScoreDocKeyQueue ScoreDocKey decl Map public public return float protected protected if == return decl_stmt float = if == = else for = call ScoreDocKeyQueue.size() call ScoreDocKeyQueue.size() call ScoreDocKeyQueue.size() call ScoreDocKeyQueue.size() call ScoreDocKeyQueue.size() > -- call ScoreDocKeyQueue.pop() call ScoreDocKeyQueue.pop() call ScoreDocKeyQueue.pop() call ScoreDocKeyQueue.pop() call ScoreDocKeyQueue.pop() = call ScoreDocKeyQueue.pop() call ScoreDocKeyQueue.pop() call ScoreDocKeyQueue.pop() call ScoreDocKeyQueue.pop() call ScoreDocKeyQueue.pop() return new ScoreDocKey ScoreDocKeyQueue ScoreDocKey protected protected if call ScoreDocKeyQueue.size() call ScoreDocKeyQueue.size() call ScoreDocKeyQueue.size() call ScoreDocKeyQueue.size() call ScoreDocKeyQueue.size() >= && call ScoreDocKeyQueue.lessThan() call ScoreDocKeyQueue.lessThan() call ScoreDocKeyQueue.lessThan() call ScoreDocKeyQueue.lessThan() call ScoreDocKeyQueue.lessThan() call ScoreDocKeyQueue.top() call ScoreDocKeyQueue.top() call ScoreDocKeyQueue.top() call ScoreDocKeyQueue.top() call ScoreDocKeyQueue.top() return = - decl_stmt ScoreDocKeyQueue = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == if call decl Stack.size() call decl Stack.size() call decl Stack.size() call decl Stack.size() call decl Stack.size() == = new else = call decl Stack.pop() call decl Stack.pop() call decl Stack.pop() call decl Stack.pop() call decl Stack.pop() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt ScoreDocKey = call ScoreDocKeyQueue.insertWithOverflow() call ScoreDocKeyQueue.insertWithOverflow() call ScoreDocKeyQueue.insertWithOverflow() call ScoreDocKeyQueue.insertWithOverflow() call ScoreDocKeyQueue.insertWithOverflow() if == return if == decl_stmt ScoreDocKey = call ScoreDocKeyQueue.insertWithOverflow() call ScoreDocKeyQueue.insertWithOverflow() call ScoreDocKeyQueue.insertWithOverflow() call ScoreDocKeyQueue.insertWithOverflow() call ScoreDocKeyQueue.insertWithOverflow() return call ScoreDocKeyQueue.remove() call ScoreDocKeyQueue.remove() call ScoreDocKeyQueue.remove() call ScoreDocKeyQueue.remove() call ScoreDocKeyQueue.remove() call ScoreDocKeyQueue.add() call ScoreDocKeyQueue.add() call ScoreDocKeyQueue.add() call ScoreDocKeyQueue.add() call ScoreDocKeyQueue.add() return ScoreDocKeyQueue ScoreDocKey private private if == return decl_stmt ScoreDocKeyQueue = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt ScoreDocKey = call ScoreDocKeyQueue.pop() call ScoreDocKeyQueue.pop() call ScoreDocKeyQueue.pop() call ScoreDocKeyQueue.pop() call ScoreDocKeyQueue.pop() assert == if call ScoreDocKeyQueue.size() call ScoreDocKeyQueue.size() call ScoreDocKeyQueue.size() call ScoreDocKeyQueue.size() call ScoreDocKeyQueue.size() == call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Stack.push() call decl Stack.push() call decl Stack.push() call decl Stack.push() call decl Stack.push() int float Scorer NumericDocValues public public throws decl_stmt int final final = decl_stmt NumericDocValues final final = return new decl_stmt org.apache.lucene.search.Scorer public public throws = public public throws decl_stmt float = call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() assert ! ++ += if == = new else = = = public public throws = float public public throws decl_stmt float = assert ! ++ += if == = new else = = = protected final protected final if == return > else return < public public return public public return + + + + +