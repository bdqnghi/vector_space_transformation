org.apache.lucene.analysis.cn.smart.hhmm java.io.DataInputStream import java.io.IOException import java.io.InputStream import java.io.ObjectInputStream import java.io.ObjectOutputStream import java.nio.ByteBuffer import java.nio.ByteOrder import java.nio.file.Files import java.nio.file.Path import java.nio.file.Paths import org.apache.lucene.analysis.cn.smart.AnalyzerProfile import class org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary super super extends int int decl long decl int int BigramDictionary char String public synchronized static public synchronized static if == = new try call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load(String) call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load(String) call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load(String) call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load(String) call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load(String) catch decl_stmt java.lang.String = try call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load(String) call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load(String) call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load(String) call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load(String) call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load(String) catch throw new catch throw new return private private try return catch throw new private private throws try = new = = private private throws try = new InputStream private private throws decl_stmt java.io.InputStream = Path String private private throws decl_stmt java.lang.String = + decl_stmt java.nio.file.Path = + if && else try = new = new for = < ++ = = catch throw new decl int String int long decl byte DataInputStream decl byte int int char String public public throws decl_stmt int = decl_stmt int = new decl_stmt byte = new decl_stmt java.lang.String decl_stmt java.io.DataInputStream = new for = < + ++ decl_stmt java.lang.String = call decl byte.read() call decl byte.read() call decl byte.read() call decl byte.read() call decl byte.read() = if <= continue += decl_stmt int = while < call decl byte.read() call decl byte.read() call decl byte.read() call decl byte.read() call decl byte.read() = call decl byte.read() call decl byte.read() call decl byte.read() call decl byte.read() call decl byte.read() = call decl byte.read() call decl byte.read() call decl byte.read() call decl byte.read() call decl byte.read() = if > decl_stmt byte = new call decl byte.read() call decl byte.read() call decl byte.read() call decl byte.read() call decl byte.read() = new if != + = + decl_stmt char = call int.toCharArray() call int.toCharArray() call int.toCharArray() call int.toCharArray() call int.toCharArray() decl_stmt long = decl_stmt int = if != - if == = += ++ call decl byte.close() call decl byte.close() call decl byte.close() call decl byte.close() call decl byte.close() int int int int private private decl_stmt int = decl_stmt int = if < = + if < = + decl_stmt int = decl_stmt int = while != && != && < = + * ++ if < && == || == return else return - int long int int int private private decl_stmt long = decl_stmt int = decl_stmt int = if < = + if < = + decl_stmt int = decl_stmt int = ++ while != && != && < = + * ++ ++ if > = if < && == return else return - int public public decl_stmt int = if != - return return