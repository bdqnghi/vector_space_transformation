org.apache.lucene.index java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Locale import java.util.Map import java.util.Random import java.util.Set import org.apache.lucene.codecs.DocValuesFormat import org.apache.lucene.codecs.PointsFormat import org.apache.lucene.codecs.PointsReader import org.apache.lucene.codecs.PointsWriter import org.apache.lucene.codecs.PostingsFormat import org.apache.lucene.codecs.asserting.AssertingCodec import org.apache.lucene.codecs.asserting.AssertingDocValuesFormat import org.apache.lucene.codecs.asserting.AssertingPointsFormat import org.apache.lucene.codecs.asserting.AssertingPostingsFormat import org.apache.lucene.codecs.blockterms.LuceneFixedGap import org.apache.lucene.codecs.blockterms.LuceneVarGapDocFreqInterval import org.apache.lucene.codecs.blockterms.LuceneVarGapFixedInterval import org.apache.lucene.codecs.blocktreeords.BlockTreeOrdsPostingsFormat import org.apache.lucene.codecs.bloom.TestBloomFilteredLucenePostings import org.apache.lucene.codecs.lucene60.Lucene60PointsReader import org.apache.lucene.codecs.lucene60.Lucene60PointsWriter import org.apache.lucene.codecs.memory.DirectDocValuesFormat import org.apache.lucene.codecs.memory.DirectPostingsFormat import org.apache.lucene.codecs.memory.FSTOrdPostingsFormat import org.apache.lucene.codecs.memory.FSTPostingsFormat import org.apache.lucene.codecs.memory.MemoryDocValuesFormat import org.apache.lucene.codecs.memory.MemoryPostingsFormat import org.apache.lucene.codecs.mockrandom.MockRandomPostingsFormat import org.apache.lucene.codecs.simpletext.SimpleTextDocValuesFormat import org.apache.lucene.codecs.simpletext.SimpleTextPostingsFormat import org.apache.lucene.index.PointValues.IntersectVisitor import org.apache.lucene.store.Directory import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import org.apache.lucene.util.bkd.BKDWriter import class org.apache.lucene.index.RandomCodec super super extends decl Set decl Map decl Map decl List int decl Set int decl Set decl List double int boolean public public return new new public public throws return new public public throws decl_stmt boolean = == try = new ^ new public public throw new public public throws public public return if > public public throws return new boolean public public throws return new public public throws decl_stmt boolean = == try = new ^ new public public throw new public public throws public public return if > boolean public public throws decl_stmt boolean = == try = new ^ new public public throw new public public throws public public return if > public public throw new public public throws public public return public public throws return new PostingsFormat public public decl_stmt org.apache.lucene.codecs.PostingsFormat = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() ^ call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if instanceof && != = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() ^ call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() assert call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() < : return DocValuesFormat public public decl_stmt org.apache.lucene.codecs.DocValuesFormat = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() ^ call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if instanceof && != = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() ^ call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() assert call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() < : return private final private final < for : if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() private final private final < for : if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() public public return + + call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() + + call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() + + + + private static private static return && new private static private static return > || == && new private static private static return new private static private static return new protected protected return