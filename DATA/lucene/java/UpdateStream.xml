org.apache.solr.client.solrj.io.stream java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Locale import java.util.Map import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.impl.CloudSolrClient import org.apache.solr.client.solrj.impl.CloudSolrClient.Builder import org.apache.solr.client.solrj.io.SolrClientCache import org.apache.solr.client.solrj.io.Tuple import org.apache.solr.client.solrj.io.comp.StreamComparator import org.apache.solr.client.solrj.io.stream.expr.Expressible import org.apache.solr.client.solrj.io.stream.expr.StreamExpression import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionNamedParameter import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionParameter import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionValue import org.apache.solr.client.solrj.io.stream.expr.StreamFactory import org.apache.solr.common.SolrInputDocument import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.client.solrj.io.stream.UpdateStream super super extends super implements Logger long decl List SolrClientCache String String PushBackStream int int CloudSolrClient String private private = = = = new public public throws call org.apache.solr.client.solrj.io.stream.PushBackStream.open() call org.apache.solr.client.solrj.io.stream.PushBackStream.open() call org.apache.solr.client.solrj.io.stream.PushBackStream.open() call org.apache.solr.client.solrj.io.stream.PushBackStream.open() call org.apache.solr.client.solrj.io.stream.PushBackStream.open() int Tuple public public throws for = < ++ decl_stmt org.apache.solr.client.solrj.io.Tuple = call org.apache.solr.client.solrj.io.stream.PushBackStream.read() call org.apache.solr.client.solrj.io.stream.PushBackStream.read() call org.apache.solr.client.solrj.io.stream.PushBackStream.read() call org.apache.solr.client.solrj.io.stream.PushBackStream.read() call org.apache.solr.client.solrj.io.stream.PushBackStream.read() if if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return else call org.apache.solr.client.solrj.io.stream.PushBackStream.pushBack(Tuple) call org.apache.solr.client.solrj.io.stream.PushBackStream.pushBack(Tuple) call org.apache.solr.client.solrj.io.stream.PushBackStream.pushBack(Tuple) call org.apache.solr.client.solrj.io.stream.PushBackStream.pushBack(Tuple) call org.apache.solr.client.solrj.io.stream.PushBackStream.pushBack(Tuple) decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() return call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() return public public throws if == && != call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.io.stream.PushBackStream.close() call org.apache.solr.client.solrj.io.stream.PushBackStream.close() call org.apache.solr.client.solrj.io.stream.PushBackStream.close() call org.apache.solr.client.solrj.io.stream.PushBackStream.close() call org.apache.solr.client.solrj.io.stream.PushBackStream.close() public public return call org.apache.solr.client.solrj.io.stream.PushBackStream.getStreamSort() call org.apache.solr.client.solrj.io.stream.PushBackStream.getStreamSort() call org.apache.solr.client.solrj.io.stream.PushBackStream.getStreamSort() call org.apache.solr.client.solrj.io.stream.PushBackStream.getStreamSort() call org.apache.solr.client.solrj.io.stream.PushBackStream.getStreamSort() decl ArrayList public < public < decl_stmt java.util.ArrayList < = new < call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return StreamExpression public public throws decl_stmt org.apache.solr.client.solrj.io.stream.expr.StreamExpression = new call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new if instanceof call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) else throw new return public public = = private private throws if == throw new StreamExpressionNamedParameter String private private decl_stmt org.apache.solr.client.solrj.io.stream.expr.StreamExpressionNamedParameter = if == decl_stmt java.lang.String = if == return else return else if call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() instanceof return call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() return private private throws if == throw new String StreamExpressionNamedParameter private private throws decl_stmt org.apache.solr.client.solrj.io.stream.expr.StreamExpressionNamedParameter = if == || == call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() || ! call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() instanceof throw new decl_stmt java.lang.String = call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() call StreamExpressionNamedParameter.getParameter() return int private private throws try decl_stmt int = if <= throw new return catch throw new private private if != = else = new SolrInputDocument Object private private decl_stmt org.apache.solr.common.SolrInputDocument = new for : if ! decl_stmt java.lang.Object = if instanceof < else call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return private private < for : String String private private < throws if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return try call CloudSolrClient.add() call CloudSolrClient.add() call CloudSolrClient.add() call CloudSolrClient.add() call CloudSolrClient.add() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() decl_stmt java.lang.String = decl_stmt java.lang.String = throw new Map private private assert > decl_stmt java.util.Map = new += ++ call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) if != call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) return new