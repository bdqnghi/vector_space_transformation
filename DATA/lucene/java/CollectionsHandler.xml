org.apache.solr.handler.admin java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Iterator import java.util.LinkedHashMap import java.util.List import java.util.Locale import java.util.Map import java.util.Set import java.util.concurrent.TimeUnit import com.google.common.collect.ImmutableList import com.google.common.collect.ImmutableSet import org.apache.commons.io.IOUtils import org.apache.commons.lang.StringUtils import org.apache.solr.client.solrj.SolrResponse import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.impl.HttpSolrClient.Builder import org.apache.solr.client.solrj.request.CoreAdminRequest import org.apache.solr.client.solrj.request.CoreAdminRequest.RequestSyncShard import org.apache.solr.client.solrj.response.RequestStatusState import org.apache.solr.client.solrj.util.SolrIdentifierValidator import org.apache.solr.cloud.Overseer import org.apache.solr.cloud.OverseerCollectionMessageHandler import org.apache.solr.cloud.OverseerSolrResponse import org.apache.solr.cloud.OverseerTaskQueue import org.apache.solr.cloud.OverseerTaskQueue.QueueEvent import org.apache.solr.cloud.ZkController import org.apache.solr.cloud.overseer.SliceMutator import org.apache.solr.cloud.rule.ReplicaAssigner import org.apache.solr.cloud.rule.Rule import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.DocCollection import org.apache.solr.common.cloud.ImplicitDocRouter import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Replica.State import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkCmdExecutor import org.apache.solr.common.cloud.ZkCoreNodeProps import org.apache.solr.common.cloud.ZkNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.params.CollectionAdminParams import org.apache.solr.common.params.CollectionParams import org.apache.solr.common.params.CollectionParams.CollectionAction import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.CoreAdminParams import org.apache.solr.common.params.CoreAdminParams.CoreAdminAction import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.common.util.Utils import org.apache.solr.core.CloudConfig import org.apache.solr.core.CoreContainer import org.apache.solr.handler.RequestHandlerBase import org.apache.solr.handler.component.ShardHandler import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.security.AuthorizationContext import org.apache.solr.security.PermissionNameProvider import org.apache.zookeeper.CreateMode import org.apache.zookeeper.KeeperException import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.client.solrj.response.RequestStatusState.COMPLETED import static static org.apache.solr.client.solrj.response.RequestStatusState.FAILED import static static org.apache.solr.client.solrj.response.RequestStatusState.NOT_FOUND import static static org.apache.solr.client.solrj.response.RequestStatusState.RUNNING import static static org.apache.solr.client.solrj.response.RequestStatusState.SUBMITTED import static static org.apache.solr.cloud.Overseer.QUEUE_OPERATION import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.COLL_CONF import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.COLL_PROP_PREFIX import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.CREATE_NODE_SET import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.NUM_SLICES import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.ONLY_ACTIVE_NODES import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.ONLY_IF_DOWN import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.REQUESTID import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.SHARDS_PROP import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.SHARD_UNIQUE import static static org.apache.solr.common.cloud.DocCollection.DOC_ROUTER import static static org.apache.solr.common.cloud.DocCollection.RULE import static static org.apache.solr.common.cloud.DocCollection.SNITCH import static static org.apache.solr.common.cloud.DocCollection.STATE_FORMAT import static static org.apache.solr.common.cloud.ZkStateReader.AUTO_ADD_REPLICAS import static static org.apache.solr.common.cloud.ZkStateReader.COLLECTION_PROP import static static org.apache.solr.common.cloud.ZkStateReader.MAX_SHARDS_PER_NODE import static static org.apache.solr.common.cloud.ZkStateReader.PROPERTY_PROP import static static org.apache.solr.common.cloud.ZkStateReader.PROPERTY_VALUE_PROP import static static org.apache.solr.common.cloud.ZkStateReader.REPLICATION_FACTOR import static static org.apache.solr.common.cloud.ZkStateReader.REPLICA_PROP import static static org.apache.solr.common.cloud.ZkStateReader.SHARD_ID_PROP import static static org.apache.solr.common.params.CollectionParams.CollectionAction.* import static static org.apache.solr.common.params.CommonAdminParams.ASYNC import static static org.apache.solr.common.params.CommonParams.NAME import static static org.apache.solr.common.params.CommonParams.VALUE_LONG import static static org.apache.solr.common.params.CoreAdminParams.DATA_DIR import static static org.apache.solr.common.params.CoreAdminParams.DELETE_DATA_DIR import static static org.apache.solr.common.params.CoreAdminParams.DELETE_INDEX import static static org.apache.solr.common.params.CoreAdminParams.DELETE_INSTANCE_DIR import static static org.apache.solr.common.params.CoreAdminParams.INSTANCE_DIR import static static org.apache.solr.common.params.ShardParams._ROUTE_ import static static org.apache.solr.common.util.StrUtils.formatString import class org.apache.solr.handler.admin.CollectionsHandler super super extends super implements long Logger String decl List decl Set CoreContainer String decl CollectionParams public public decl_stmt java.lang.String = if == return decl_stmt CollectionAction = if == return return : final public final public public public return String String String SolrParams ZkNodeProps decl Map CollectionAction CoreContainer CollectionOperation SolrResponse public public throws decl_stmt org.apache.solr.core.CoreContainer = if == throw new if ! call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() throw new decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if != decl_stmt CollectionAction = if == throw new + decl_stmt CollectionOperation = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call CollectionAction.toLower() call CollectionAction.toLower() call CollectionAction.toLower() call CollectionAction.toLower() call CollectionAction.toLower() decl_stmt org.apache.solr.client.solrj.SolrResponse = decl_stmt java.util.Map < = call CollectionOperation.call() call CollectionOperation.call() call CollectionOperation.call() call CollectionOperation.call() call CollectionOperation.call() decl_stmt java.lang.String = if != if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new if = call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() call CollectionOperation.action() else call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() decl_stmt java.lang.String final final = call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) if call CollectionAction.equals() call CollectionAction.equals() call CollectionAction.equals() call CollectionAction.equals() call CollectionAction.equals() && == if == else throw new throws Integer SolrResponse decl NamedList String SimpleOrderedMap long QueueEvent private private throws decl_stmt long = if && != decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) throw new decl_stmt org.apache.solr.common.util.NamedList < = new <> if call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() || call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() || call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() || call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() else call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt org.apache.solr.client.solrj.SolrResponse = new call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() return decl_stmt QueueEvent = call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() if call QueueEvent.getBytes() call QueueEvent.getBytes() call QueueEvent.getBytes() call QueueEvent.getBytes() call QueueEvent.getBytes() != decl_stmt org.apache.solr.client.solrj.SolrResponse = call QueueEvent.getBytes() call QueueEvent.getBytes() call QueueEvent.getBytes() call QueueEvent.getBytes() call QueueEvent.getBytes() call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() decl_stmt org.apache.solr.common.util.SimpleOrderedMap = call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() if != decl_stmt java.lang.Integer = call SimpleOrderedMap.get() call SimpleOrderedMap.get() call SimpleOrderedMap.get() call SimpleOrderedMap.get() call SimpleOrderedMap.get() new != && != - : call SimpleOrderedMap.get() call SimpleOrderedMap.get() call SimpleOrderedMap.get() call SimpleOrderedMap.get() call SimpleOrderedMap.get() return else if - >= throw new + + / + else if call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() != throw new + + call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() + + call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() + + call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() call QueueEvent.getWatchedEvent() + else throw new + OverseerTaskQueue private private throws decl_stmt org.apache.solr.cloud.OverseerTaskQueue = call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() return call org.apache.solr.cloud.OverseerTaskQueue.containsTaskWithRequestId(String,String) call org.apache.solr.cloud.OverseerTaskQueue.containsTaskWithRequestId(String,String) call org.apache.solr.cloud.OverseerTaskQueue.containsTaskWithRequestId(String,String) call org.apache.solr.cloud.OverseerTaskQueue.containsTaskWithRequestId(String,String) call org.apache.solr.cloud.OverseerTaskQueue.containsTaskWithRequestId(String,String) String decl Iterator private static < private static < < decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) return ModifiableSolrParams public static public static decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new for = < += call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) + return public public return String String decl Map < < throws decl_stmt java.util.Map < = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.String final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.lang.String final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() return String ZkCmdExecutor decl byte SolrZkClient private private throws decl_stmt org.apache.solr.common.cloud.SolrZkClient = call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() decl_stmt org.apache.solr.common.cloud.ZkCmdExecutor = new call SolrZkClient.getZkClientTimeout() call SolrZkClient.getZkClientTimeout() call SolrZkClient.getZkClientTimeout() call SolrZkClient.getZkClientTimeout() call SolrZkClient.getZkClientTimeout() call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) + + try decl_stmt java.lang.String = + + + decl_stmt byte = call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) = + + + = call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) catch throw new < < throws return < < throws return RequestSyncShard String String ZkCoreNodeProps ClusterState ZkNodeProps < < throws decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt org.apache.solr.common.cloud.ZkNodeProps = call org.apache.solr.common.cloud.ClusterState.getLeader(String,String) call org.apache.solr.common.cloud.ClusterState.getLeader(String,String) call org.apache.solr.common.cloud.ClusterState.getLeader(String,String) call org.apache.solr.common.cloud.ClusterState.getLeader(String,String) call org.apache.solr.common.cloud.ClusterState.getLeader(String,String) decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = new try = new call org.apache.solr.common.cloud.ZkCoreNodeProps.getBaseUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getBaseUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getBaseUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getBaseUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getBaseUrl() decl_stmt RequestSyncShard = new call RequestSyncShard.setCollection() call RequestSyncShard.setCollection() call RequestSyncShard.setCollection() call RequestSyncShard.setCollection() call RequestSyncShard.setCollection() call RequestSyncShard.setShard() call RequestSyncShard.setShard() call RequestSyncShard.setShard() call RequestSyncShard.setShard() call RequestSyncShard.setShard() call RequestSyncShard.setCoreName() call RequestSyncShard.setCoreName() call RequestSyncShard.setCoreName() call RequestSyncShard.setCoreName() call RequestSyncShard.setCoreName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreName() return String < < throws decl_stmt java.lang.String final final = return < < throws return decl Map String String String String < < throws decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = if == && == throw new if != && != throw new if != && != throw new decl_stmt java.util.Map < = return decl Map < < throws decl_stmt java.util.Map < = return < < throws return decl Map String ClusterState < < throws decl_stmt java.util.Map < = decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt java.lang.String final final = if ! call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) throw new return decl Map < < throws decl_stmt java.util.Map < = return decl Map < < throws decl_stmt java.util.Map < = return decl Map < < throws decl_stmt java.util.Map < = if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() throw new + return decl Map < < throws decl_stmt java.util.Map < = if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() throw new + return String String < < throws decl_stmt java.lang.String = decl_stmt java.lang.String = return decl byte decl NamedList ZkController CoreContainer String SolrResponse < < throws decl_stmt org.apache.solr.core.CoreContainer final final = decl_stmt java.lang.String final final = decl_stmt org.apache.solr.cloud.ZkController final final = call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() decl_stmt org.apache.solr.common.util.NamedList final final final < = new <> if call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() decl_stmt byte final final final = call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() + + else if call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() decl_stmt byte final final final = call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() + + else if call org.apache.solr.cloud.ZkController.getOverseerRunningMap() call org.apache.solr.cloud.ZkController.getOverseerRunningMap() call org.apache.solr.cloud.ZkController.getOverseerRunningMap() call org.apache.solr.cloud.ZkController.getOverseerRunningMap() call org.apache.solr.cloud.ZkController.getOverseerRunningMap() + + else if + + else + + decl_stmt org.apache.solr.client.solrj.SolrResponse final final = new call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() return decl SimpleOrderedMap private private < decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() CoreContainer Boolean String ZkController < < throws decl_stmt org.apache.solr.core.CoreContainer final final = decl_stmt java.lang.String final final = decl_stmt org.apache.solr.cloud.ZkController final final = call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() decl_stmt java.lang.Boolean = if == && ! throw new if != && throw new if call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() return else if call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() call org.apache.solr.cloud.ZkController.getOverseerCompletedMap() + + else if call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() call org.apache.solr.cloud.ZkController.getOverseerFailureMap() + + else + + return decl Map < < throws decl_stmt java.util.Map < = return < < throws return new <> decl List decl Set decl NamedList SolrResponse < < throws decl_stmt org.apache.solr.common.util.NamedList < = new <> decl_stmt java.util.Set < = decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt org.apache.solr.client.solrj.SolrResponse = new call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() call SolrResponse.getResponse() return decl Map < < throws decl_stmt java.util.Map < = new new return decl Map boolean String < < throws decl_stmt java.util.Map < = decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if ! call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = + decl_stmt boolean = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() && call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) && == throw new + + + + return decl Map < < throws decl_stmt java.util.Map < = return decl Map Boolean String < < throws decl_stmt java.util.Map < = decl_stmt java.lang.Boolean = decl_stmt java.lang.String = if ! = + if ! && ! throw new + + + + + return < < throws new return decl Map < < throws decl_stmt java.util.Map < = call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new if call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() throw new for : return < < throws return public static public static for : if == return throw new + Slice String boolean String ShardHandler ClusterState String ModifiableSolrParams StringBuilder Replica String private static private static decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt java.lang.String = decl_stmt java.lang.String = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) if == if call org.apache.solr.common.cloud.ClusterState.hasCollection(String) call org.apache.solr.common.cloud.ClusterState.hasCollection(String) call org.apache.solr.common.cloud.ClusterState.hasCollection(String) call org.apache.solr.common.cloud.ClusterState.hasCollection(String) call org.apache.solr.common.cloud.ClusterState.hasCollection(String) throw new + + + else throw new + try decl_stmt org.apache.solr.common.cloud.Replica = call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() if != && call org.apache.solr.common.cloud.Replica.getState() call org.apache.solr.common.cloud.Replica.getState() call org.apache.solr.common.cloud.Replica.getState() call org.apache.solr.common.cloud.Replica.getState() call org.apache.solr.common.cloud.Replica.getState() == throw new + decl_stmt java.lang.String = if decl_stmt java.lang.StringBuilder = new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) for : call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() if call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() decl_stmt org.apache.solr.handler.component.ShardHandler = decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) decl_stmt java.lang.String = decl_stmt boolean = for = < ++ = = call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) if call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() != && call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() == = break call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch throw catch throw new + + + decl Collection ZkStateReader CloudConfig decl Collection ClusterState String String String String Integer Boolean private static private static throws if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + return if != decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt org.apache.solr.core.CloudConfig = decl_stmt java.lang.Integer = call org.apache.solr.core.CloudConfig.getCreateCollectionWaitTimeTillActive() call org.apache.solr.core.CloudConfig.getCreateCollectionWaitTimeTillActive() call org.apache.solr.core.CloudConfig.getCreateCollectionWaitTimeTillActive() call org.apache.solr.core.CloudConfig.getCreateCollectionWaitTimeTillActive() call org.apache.solr.core.CloudConfig.getCreateCollectionWaitTimeTillActive() decl_stmt java.lang.Boolean = call org.apache.solr.core.CloudConfig.isCreateCollectionCheckLeaderActive() call org.apache.solr.core.CloudConfig.isCreateCollectionCheckLeaderActive() call org.apache.solr.core.CloudConfig.isCreateCollectionCheckLeaderActive() call org.apache.solr.core.CloudConfig.isCreateCollectionCheckLeaderActive() call org.apache.solr.core.CloudConfig.isCreateCollectionCheckLeaderActive() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + : decl_stmt org.apache.solr.common.cloud.ZkStateReader = for = < ++ decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl_stmt java.util.Collection < = call org.apache.solr.common.cloud.ClusterState.getSlices(String) call org.apache.solr.common.cloud.ClusterState.getSlices(String) call org.apache.solr.common.cloud.ClusterState.getSlices(String) call org.apache.solr.common.cloud.ClusterState.getSlices(String) call org.apache.solr.common.cloud.ClusterState.getSlices(String) if != = for : decl_stmt java.util.Collection < if ! = else = new < call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() for : decl_stmt java.lang.String = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() if ! call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) || ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = = = break if != break if == return if != && != call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) + + : + + + call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() + + else call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + Map List public static public static < decl_stmt java.util.List = if != for : decl_stmt java.util.Map = try new catch throw new + decl ArrayList decl List Object private static < private static < < decl_stmt java.lang.Object = if == return decl_stmt java.util.List < = new <> if instanceof call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt java.util.ArrayList < = new <> for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return private static private static for :