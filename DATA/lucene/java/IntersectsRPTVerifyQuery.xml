org.apache.lucene.spatial.composite java.io.IOException import java.util.Map import org.locationtech.spatial4j.shape.Shape import org.locationtech.spatial4j.shape.SpatialRelation import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.search.ConstantScoreScorer import org.apache.lucene.search.ConstantScoreWeight import org.apache.lucene.search.DocIdSet import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.Scorer import org.apache.lucene.search.TwoPhaseIterator import org.apache.lucene.search.Weight import org.apache.lucene.spatial.prefix.AbstractVisitingPrefixTreeQuery import org.apache.lucene.spatial.prefix.tree.Cell import org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree import org.apache.lucene.util.DocIdSetBuilder import class org.apache.lucene.spatial.composite.IntersectsRPTVerifyQuery super super extends ValueSource IntersectsDifferentiatingQuery public public return + + IntersectsRPTVerifyQuery public public if == return if ! return decl_stmt org.apache.lucene.spatial.composite.IntersectsRPTVerifyQuery = if ! call IntersectsDifferentiatingQuery.equals() call IntersectsDifferentiatingQuery.equals() call IntersectsDifferentiatingQuery.equals() call IntersectsDifferentiatingQuery.equals() call IntersectsDifferentiatingQuery.equals() return return call ValueSource.equals() call ValueSource.equals() call ValueSource.equals() call ValueSource.equals() call ValueSource.equals() int public public decl_stmt int = = * + call IntersectsDifferentiatingQuery.hashCode() call IntersectsDifferentiatingQuery.hashCode() call IntersectsDifferentiatingQuery.hashCode() call IntersectsDifferentiatingQuery.hashCode() call IntersectsDifferentiatingQuery.hashCode() = * + call ValueSource.hashCode() call ValueSource.hashCode() call ValueSource.hashCode() call ValueSource.hashCode() call ValueSource.hashCode() return decl IntersectsDifferentiatingVisitor DocIdSetIterator DocIdSetIterator FunctionValues Map decl IntersectsDifferentiatingQuery TwoPhaseIterator public public throws decl_stmt java.util.Map final final = return new public public throws decl_stmt IntersectsDifferentiatingVisitor final final final final final = call IntersectsDifferentiatingQuery.compute() call IntersectsDifferentiatingQuery.compute() call IntersectsDifferentiatingQuery.compute() call IntersectsDifferentiatingQuery.compute() call IntersectsDifferentiatingQuery.compute() if == return decl_stmt org.apache.lucene.search.DocIdSetIterator final final = call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() if == return decl_stmt org.apache.lucene.search.DocIdSetIterator final final if != if == return new = call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() assert != else = decl_stmt org.apache.lucene.queries.function.FunctionValues final final = call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() decl_stmt org.apache.lucene.search.TwoPhaseIterator final final = new public public throws decl_stmt int final final = call decl IntersectsDifferentiatingVisitor.docID() call decl IntersectsDifferentiatingVisitor.docID() call decl IntersectsDifferentiatingVisitor.docID() call decl IntersectsDifferentiatingVisitor.docID() call decl IntersectsDifferentiatingVisitor.docID() if != if call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() < call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) if call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() == return return call DocIdSetIterator.boolVal() call DocIdSetIterator.boolVal() call DocIdSetIterator.boolVal() call DocIdSetIterator.boolVal() call DocIdSetIterator.boolVal() public public return return new decl IntersectsDifferentiatingVisitor DocIdSetIterator DocIdSetIterator TwoPhaseIterator decl IntersectsDifferentiatingQuery FunctionValues public public throws decl_stmt IntersectsDifferentiatingVisitor final final final final final = call IntersectsDifferentiatingQuery.compute() call IntersectsDifferentiatingQuery.compute() call IntersectsDifferentiatingQuery.compute() call IntersectsDifferentiatingQuery.compute() call IntersectsDifferentiatingQuery.compute() if == return decl_stmt org.apache.lucene.search.DocIdSetIterator final final = call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() call decl IntersectsDifferentiatingQuery.approxDocIdSet() if == return decl_stmt org.apache.lucene.search.DocIdSetIterator final final if != if == return new = call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() call decl IntersectsDifferentiatingQuery.exactDocIdSet() assert != else = decl_stmt org.apache.lucene.queries.function.FunctionValues final final = call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() decl_stmt org.apache.lucene.search.TwoPhaseIterator final final = new public public throws decl_stmt int final final = call decl IntersectsDifferentiatingVisitor.docID() call decl IntersectsDifferentiatingVisitor.docID() call decl IntersectsDifferentiatingVisitor.docID() call decl IntersectsDifferentiatingVisitor.docID() call decl IntersectsDifferentiatingVisitor.docID() if != if call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() < call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) if call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() == return return call DocIdSetIterator.boolVal() call DocIdSetIterator.boolVal() call DocIdSetIterator.boolVal() call DocIdSetIterator.boolVal() call DocIdSetIterator.boolVal() public public return return new int public public throws decl_stmt int final final = if != if < if == return return public public return decl IntersectsDifferentiatingQuery throws decl_stmt IntersectsDifferentiatingVisitor final final final final final = new call decl IntersectsDifferentiatingQuery.getDocIdSet() call decl IntersectsDifferentiatingQuery.getDocIdSet() call decl IntersectsDifferentiatingQuery.getDocIdSet() call decl IntersectsDifferentiatingQuery.getDocIdSet() call decl IntersectsDifferentiatingQuery.getDocIdSet() return protected protected throws protected protected throws if = else = if = else if != = return protected protected throws if == = return else if == = return return protected protected throws if == = else = public public throws throw new public public throw new