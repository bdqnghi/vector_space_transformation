org.apache.lucene.codecs.lucene50 java.io.Closeable import java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.List import java.util.Map import java.util.concurrent.atomic.AtomicLong import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.DocValuesProducer import org.apache.lucene.index.BinaryDocValues import org.apache.lucene.index.CorruptIndexException import org.apache.lucene.index.DocValues import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.NumericDocValues import org.apache.lucene.index.RandomAccessOrds import org.apache.lucene.index.SegmentReadState import org.apache.lucene.index.SortedDocValues import org.apache.lucene.index.SortedNumericDocValues import org.apache.lucene.index.SortedSetDocValues import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.ChecksumIndexInput import org.apache.lucene.store.IndexInput import org.apache.lucene.store.RandomAccessInput import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LongValues import org.apache.lucene.util.PagedBytes import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.packed.DirectReader import org.apache.lucene.util.packed.MonotonicBlockPackedReader import static static org.apache.lucene.codecs.lucene50.Lucene50DocValuesFormat.* import class org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer super super extends super implements decl Map int boolean IndexInput decl Map decl Map decl Map decl Map decl Map int decl Map AtomicLong decl Map decl Map BinaryEntry NumericEntry private private throws if != throw new + + if != throw new + + decl_stmt BinaryEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if != throw new + + if != throw new + + decl_stmt NumericEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() NumericEntry NumericEntry BinaryEntry private private throws if != throw new + + if != throw new + + decl_stmt BinaryEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if != throw new + + if != throw new + + decl_stmt NumericEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if != throw new + + if != throw new + + decl_stmt NumericEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() BinaryEntry NumericEntry private private throws if != throw new + + if != throw new + + decl_stmt BinaryEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if != throw new + + if != throw new + + decl_stmt NumericEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() FieldInfo BinaryEntry SortedSetEntry NumericEntry NumericEntry int int byte private private throws decl_stmt int = decl_stmt int = while != - ++ decl_stmt org.apache.lucene.index.FieldInfo = if == throw new + decl_stmt byte = if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == decl_stmt BinaryEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == else if == decl_stmt SortedSetEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if == else if == else if == if != throw new + + if != throw new + + else throw new else if == decl_stmt SortedSetEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if == if != throw new + + if != throw new + + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if != throw new + + if != throw new + + decl_stmt NumericEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == if != throw new + + if != throw new + + decl_stmt NumericEntry = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == if != throw new + + if != throw new + + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else throw new else throw new + = return NumericEntry int private private throws decl_stmt NumericEntry = new = = = = switch case = if > throw new + break case = = = break case decl_stmt int final final = if > throw new + = new for = < ++ = call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) = break case = = break case = = break default: throw new + + = return BinaryEntry static static throws decl_stmt BinaryEntry = new = = = = = = switch case break case = = = = break case = = = break default: throw new + return SortedSetEntry int int throws decl_stmt SortedSetEntry = new = if == decl_stmt int final final = if > throw new + = new for = < ++ = call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) decl_stmt int final final = if > + throw new + + + + = new + for = < ++ = - + call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) else if != && != throw new + return NumericEntry public public throws decl_stmt NumericEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return public public return call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() decl List public synchronized < public synchronized < decl_stmt java.util.List < = new <> call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return public public throws public public return + + + RandomAccessInput long long LongValues long Bits LongValues long LongValues long throws switch case decl_stmt long final final = decl_stmt org.apache.lucene.util.Bits final final = int return new public public return call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() int : case decl_stmt org.apache.lucene.store.RandomAccessInput = - decl_stmt long final final = decl_stmt org.apache.lucene.util.LongValues final final = return new public public return + call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) case decl_stmt org.apache.lucene.store.RandomAccessInput = - decl_stmt long final final = decl_stmt long final final = decl_stmt org.apache.lucene.util.LongValues final final = return new public public return + * call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) case decl_stmt org.apache.lucene.store.RandomAccessInput = - decl_stmt long final final = decl_stmt org.apache.lucene.util.LongValues final final = return new public public return int call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) default: throw new public public return int : public public return + public public return + * public public return int call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() BinaryEntry public public throws decl_stmt BinaryEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() switch case return case return case return default: throw new decl byte BytesRef IndexInput int private private final final throws decl_stmt org.apache.lucene.store.IndexInput final final = * decl_stmt org.apache.lucene.util.BytesRef final final = new decl_stmt byte final final final = decl_stmt int final final = = return new public public try call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() * call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() return catch throw new public public try call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() * call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() return catch throw new MonotonicBlockPackedReader private synchronized private synchronized throws decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedReader = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = + if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() + return BytesRef MonotonicBlockPackedReader long int byte long IndexInput private private final final throws decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedReader final final = decl_stmt org.apache.lucene.store.IndexInput final final = - decl_stmt org.apache.lucene.util.BytesRef final final = new decl_stmt byte final final = return new public public decl_stmt long = call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) decl_stmt long = call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) + decl_stmt int = - try call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() = return catch throw new long int long public public decl_stmt long = decl_stmt long = + decl_stmt int = - try call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() = return catch throw new MonotonicBlockPackedReader long private synchronized private synchronized throws decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedReader = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt long final final = + >>> = if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() + return ReverseTermsIndex long PagedBytes long private synchronized private synchronized throws decl_stmt ReverseTermsIndex = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt long = + >>> = decl_stmt long = call IndexInput.readVLong() call IndexInput.readVLong() call IndexInput.readVLong() call IndexInput.readVLong() call IndexInput.readVLong() decl_stmt org.apache.lucene.util.PagedBytes = new call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) = call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call ReverseTermsIndex.ramBytesUsed() call ReverseTermsIndex.ramBytesUsed() call ReverseTermsIndex.ramBytesUsed() call ReverseTermsIndex.ramBytesUsed() call ReverseTermsIndex.ramBytesUsed() return ReverseTermsIndex IndexInput MonotonicBlockPackedReader private private final final throws decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedReader final final = decl_stmt ReverseTermsIndex final final = assert call org.apache.lucene.util.packed.MonotonicBlockPackedReader.size() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.size() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.size() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.size() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.size() > decl_stmt org.apache.lucene.store.IndexInput = call IndexInput.slice() call IndexInput.slice() call IndexInput.slice() call IndexInput.slice() call IndexInput.slice() - return new BinaryDocValues int LongValues NumericEntry public public throws decl_stmt int final final = int call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt BinaryDocValues final final = decl_stmt NumericEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.util.LongValues final final = return new public public return int call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) public public return call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() public public return public public if instanceof return else return public public if instanceof return else return public public return int public public return public public return public public if instanceof return else return public public if instanceof return else return MonotonicBlockPackedReader private synchronized private synchronized throws decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedReader = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = + if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() + return MonotonicBlockPackedReader Bits int SortedSetEntry NumericEntry LongValues LongValues int decl long NumericEntry int decl int public public throws decl_stmt SortedSetEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == decl_stmt NumericEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.util.LongValues final final = decl_stmt org.apache.lucene.util.Bits final final = return else if == decl_stmt NumericEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.util.LongValues final final = decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedReader final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return new decl_stmt long decl_stmt long public public = call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) = call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) + public public return call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) + public public return - else if == decl_stmt NumericEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.util.LongValues final final = decl_stmt long final final final = decl_stmt int final final final = return new decl_stmt int decl_stmt int public public decl_stmt int final final = int call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) = = + public public return + public public return - else throw new public public = = + public public return + public public return - int public public decl_stmt int final final = int = = + public public return + public public return - SortedSetEntry SortedDocValues public public throws decl_stmt SortedSetEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() switch case decl_stmt org.apache.lucene.index.SortedDocValues final final = return case return case return default: throw new LongBinaryDocValues MonotonicBlockPackedReader long LongValues long long long long private private throws decl_stmt long final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt LongBinaryDocValues final final = decl_stmt org.apache.lucene.util.LongValues final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedReader final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return new decl_stmt long decl_stmt long decl_stmt long public public if == return else decl_stmt long = call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) ++ return public public = = call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) = call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) + public public return call LongBinaryDocValues.get() call LongBinaryDocValues.get() call LongBinaryDocValues.get() call LongBinaryDocValues.get() call LongBinaryDocValues.get() public public return public public if instanceof return else return public public if instanceof return else return public public return call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) + public public return - long public public if == return else decl_stmt long = ++ return public public = = = + public public return public public return public public if instanceof return else return public public if instanceof return else return public public return + public public return - LongBinaryDocValues decl int LongValues long int int decl long private private throws decl_stmt long final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt LongBinaryDocValues final final = decl_stmt org.apache.lucene.util.LongValues final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt long final final final = decl_stmt int final final final = return new decl_stmt int public public decl_stmt int final final = int call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) = = = + public public return + public public if == return else return ++ public public return - public public return call LongBinaryDocValues.get() call LongBinaryDocValues.get() call LongBinaryDocValues.get() call LongBinaryDocValues.get() call LongBinaryDocValues.get() public public return public public if instanceof return else return public public if instanceof return else return int public public decl_stmt int final final = int = = = + public public return + public public if == return else return ++ public public return - public public return public public return public public if instanceof return else return public public if instanceof return else return int RandomAccessInput private private final final final final throws if == return new else if == return new else decl_stmt int = + >>> decl_stmt org.apache.lucene.store.RandomAccessInput final final = call IndexInput.randomAccessSlice() call IndexInput.randomAccessSlice() call IndexInput.randomAccessSlice() call IndexInput.randomAccessSlice() call IndexInput.randomAccessSlice() return new public public try return call RandomAccessInput.readByte() call RandomAccessInput.readByte() call RandomAccessInput.readByte() call RandomAccessInput.readByte() call RandomAccessInput.readByte() >> & << & != catch throw new public public return public public try return >> & << & != catch throw new public public return BinaryEntry NumericEntry public public throws switch case return case return case return case decl_stmt BinaryEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return case decl_stmt NumericEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return default: throw new public synchronized public synchronized throws return new public public throws call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() public final public final return long public public return + decl List public < public < decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return + + + public public try return catch throw new try switch case return case return - - default: return - - catch throw new try return call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() catch throw new private private throws return new private private throws = - if == - else = int private private throws decl_stmt int = for = < ++ += + - & = int int private private throws - decl_stmt int = for = < ++ decl_stmt int = << += + - << | & = private private throws = int int private private throws decl_stmt int = & decl_stmt int = - - - = + int public public throws ++ if >= return else decl_stmt int = & if == else return long int long long throws decl_stmt long = decl_stmt long = - while <= decl_stmt long = + >>> decl_stmt int = if < = + else if > = - else return return long int throws while <= decl_stmt long = + >>> = decl_stmt int = if < = + else if > = - else return return long long long long int public public throws decl_stmt long final final decl_stmt long = if < = else decl_stmt long = << decl_stmt long = - + = = << - while != decl_stmt int = if == return else if > return return long int public public throws decl_stmt long = >>> if != >>> = decl_stmt int = & if == else + - public public throws return public public throws return public public throws throw new public public throws return - public public throws throw new