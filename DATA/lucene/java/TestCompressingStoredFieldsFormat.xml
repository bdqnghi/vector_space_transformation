org.apache.lucene.codecs.compressing java.io.IOException import java.util.Random import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.codecs.Codec import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.FieldType import org.apache.lucene.document.IntPoint import org.apache.lucene.document.IntPoint import org.apache.lucene.document.StoredField import org.apache.lucene.index.BaseStoredFieldsFormatTestCase import org.apache.lucene.index.CodecReader import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.IndexWriterConfig import org.apache.lucene.index.LeafReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.NoMergePolicy import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.ByteArrayDataOutput import org.apache.lucene.store.Directory import org.apache.lucene.store.MockDirectoryWrapper import com.carrotsearch.randomizedtesting.generators.RandomInts import class org.apache.lucene.codecs.compressing.TestCompressingStoredFieldsFormat super super extends long long long protected protected return IndexWriterConfig IndexWriter FieldType Document Directory Document public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.IndexWriterConfig = new call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setCodec(Codec) call org.apache.lucene.index.IndexWriterConfig.setCodec(Codec) call org.apache.lucene.index.IndexWriterConfig.setCodec(Codec) call org.apache.lucene.index.IndexWriterConfig.setCodec(Codec) call org.apache.lucene.index.IndexWriterConfig.setCodec(Codec) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt org.apache.lucene.document.Document final final = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) decl_stmt org.apache.lucene.document.Document final final = new decl_stmt org.apache.solr.schema.FieldType = new call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new public public return try call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) catch call org.apache.lucene.index.IndexWriter.getTragicException() call org.apache.lucene.index.IndexWriter.getTragicException() call org.apache.lucene.index.IndexWriter.getTragicException() call org.apache.lucene.index.IndexWriter.getTragicException() call org.apache.lucene.index.IndexWriter.getTragicException() call org.apache.lucene.index.IndexWriter.isOpen() call org.apache.lucene.index.IndexWriter.isOpen() call org.apache.lucene.index.IndexWriter.isOpen() call org.apache.lucene.index.IndexWriter.isOpen() call org.apache.lucene.index.IndexWriter.isOpen() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() public public return float float float Random ByteArrayDataInput ByteArrayDataOutput public public throws decl_stmt byte = new decl_stmt org.apache.lucene.store.ByteArrayDataOutput = new decl_stmt org.apache.lucene.store.ByteArrayDataInput = new for = < ++ decl_stmt float = float call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() decl_stmt float = call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() if >= - && <= call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) decl_stmt float = - + for : call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() decl_stmt float = call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) decl_stmt java.util.Random = for = < ++ decl_stmt float = call java.util.Random.nextFloat() call java.util.Random.nextFloat() call java.util.Random.nextFloat() call java.util.Random.nextFloat() call java.util.Random.nextFloat() * - + call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() + + call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() <= >>> == : call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() decl_stmt float = call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) double Random ByteArrayDataInput double double ByteArrayDataOutput public public throws decl_stmt byte = new decl_stmt org.apache.lucene.store.ByteArrayDataOutput = new decl_stmt org.apache.lucene.store.ByteArrayDataInput = new for = < ++ decl_stmt double = double call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() decl_stmt double = call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() if >= - && <= call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) decl_stmt double = - + for : call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() decl_stmt double = call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) decl_stmt java.util.Random = for = < ++ decl_stmt double = call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() * - + call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() + + call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() <= < : call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() decl_stmt double = call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) for = < ++ decl_stmt double = call java.util.Random.nextFloat() call java.util.Random.nextFloat() call java.util.Random.nextFloat() call java.util.Random.nextFloat() call java.util.Random.nextFloat() * - + call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() + + call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() <= call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() decl_stmt double = call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) long int byte Random long ByteArrayDataInput ByteArrayDataOutput public public throws decl_stmt byte = new decl_stmt org.apache.lucene.store.ByteArrayDataOutput = new decl_stmt org.apache.lucene.store.ByteArrayDataInput = new for = < ++ for : new decl_stmt long = long * call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() decl_stmt long = call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() if >= - && <= call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) decl_stmt java.util.Random = for = < ++ decl_stmt int final final = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt long = call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() & << - switch call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) case *= break case *= break case *= break default: break call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() decl_stmt long = call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) call org.apache.lucene.store.ByteArrayDataOutput.reset(byte) IndexWriterConfig Document DirectoryReader DirectoryReader CompressingStoredFieldsReader IndexWriter CodecReader Directory public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.IndexWriterConfig = new call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setCodec(Codec) call org.apache.lucene.index.IndexWriterConfig.setCodec(Codec) call org.apache.lucene.index.IndexWriterConfig.setCodec(Codec) call org.apache.lucene.index.IndexWriterConfig.setCodec(Codec) call org.apache.lucene.index.IndexWriterConfig.setCodec(Codec) * decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt org.apache.lucene.index.DirectoryReader = for = < ++ decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) decl_stmt org.apache.lucene.index.DirectoryReader = call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() = for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.index.CodecReader = decl_stmt org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader = call CodecReader.getFieldsReader() call CodecReader.getFieldsReader() call CodecReader.getFieldsReader() call CodecReader.getFieldsReader() call CodecReader.getFieldsReader() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumDirtyChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumDirtyChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumDirtyChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumDirtyChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumDirtyChunks() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.getConfig() call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) decl_stmt org.apache.lucene.index.DirectoryReader = call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() = decl_stmt org.apache.lucene.index.CodecReader = decl_stmt org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader = call CodecReader.getFieldsReader() call CodecReader.getFieldsReader() call CodecReader.getFieldsReader() call CodecReader.getFieldsReader() call CodecReader.getFieldsReader() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumDirtyChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumDirtyChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumDirtyChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumDirtyChunks() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getNumDirtyChunks() <= call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close()