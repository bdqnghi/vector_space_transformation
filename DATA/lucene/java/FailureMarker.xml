org.apache.lucene.util java.util.concurrent.atomic.AtomicInteger import org.junit.runner.notification.Failure import org.junit.runner.notification.RunListener import class org.apache.lucene.util.FailureMarker super super extends AtomicInteger public public throws call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() public static public static return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() > static static return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() public static public static call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int)