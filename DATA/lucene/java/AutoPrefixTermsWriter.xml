org.apache.lucene.codecs.blocktree java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.List import org.apache.lucene.index.FilteredTermsEnum import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.StringHelper import class org.apache.lucene.codecs.blocktree.AutoPrefixTermsWriter int BytesRefBuilder decl int decl List int decl List String public public decl_stmt java.lang.String = new if == - += + + else += + + + + return int public public decl_stmt int = if == if != return - = - return BytesRef private static private static decl_stmt org.apache.lucene.util.BytesRef if != - assert >= = new + else = new = if != - assert >= ++ = byte return public public return BytesRef public public decl_stmt org.apache.lucene.util.BytesRef final final = new return new protected protected if && == - || == || + & <= return else return protected protected if && == - || == || + & <= return else return static static try return + + catch return decl byte int int int private private throws decl_stmt int = call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() decl_stmt int = while < && call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) call org.apache.lucene.util.BytesRefBuilder.byteAt(int) == + ++ for = call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() - >= -- decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - while >= + = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - if < = for = < ++ = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) if > || call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt byte = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() int int PrefixTerm int PrefixTerm PrefixTerm int boolean int decl byte Object int PrefixTerm int int throws assert > decl_stmt int = - decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - assert >= decl_stmt java.lang.Object = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt boolean = if instanceof if == ++ -- = else decl_stmt PrefixTerm = if == ++ -- = decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = decl_stmt int = - decl_stmt int = decl_stmt PrefixTerm = for = < ++ decl_stmt byte = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt PrefixTerm if instanceof = = else = = if != assert > = assert > decl_stmt int = & if != assert > : + + + decl_stmt int = - if >= && - > if != = ++ = = if == - = = = if < if != = assert >= : + + + if == if > - ++ if ++ else else if == - = ++ call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ decl_stmt PrefixTerm = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl byte PrefixTerm private private decl_stmt byte = new call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() assert != - assert != - decl_stmt PrefixTerm = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add()