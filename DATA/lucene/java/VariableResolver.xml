org.apache.solr.handler.dataimport java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.List import java.util.Map import java.util.Properties import java.util.WeakHashMap import java.util.regex.Matcher import java.util.regex.Pattern import class org.apache.solr.handler.dataimport.VariableResolver decl Map decl Map decl Map String String Pattern Pattern Pattern CurrentLevel decl Map Object decl String StringBuilder public public decl_stmt java.lang.Object = if != decl_stmt java.lang.String = call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) decl_stmt CurrentLevel = decl_stmt java.util.Map < = = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() - if == && && > call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() return if == && && > call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() return if == decl_stmt java.lang.StringBuilder = new for = < ++ if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call CurrentLevel.map() call CurrentLevel.map() call CurrentLevel.map() call CurrentLevel.map() call CurrentLevel.map() call CurrentLevel.map() call CurrentLevel.map() call CurrentLevel.map() call CurrentLevel.map() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if == = return == : ContextImpl Evaluator Matcher String String private private if == return decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) decl_stmt java.lang.String = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) decl_stmt org.apache.solr.handler.dataimport.Evaluator = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == return decl_stmt org.apache.solr.handler.dataimport.ContextImpl = new decl_stmt java.lang.String = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) return call Evaluator.evaluate() call Evaluator.evaluate() call Evaluator.evaluate() call Evaluator.evaluate() call Evaluator.evaluate() else return StringBuilder Resolved String public public if == return decl_stmt Resolved = if != decl_stmt java.lang.StringBuilder = new for = call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() - >= -- decl_stmt java.lang.String = call Resolved.variables() call Resolved.variables() call Resolved.variables() call Resolved.variables() call Resolved.variables() call Resolved.variables() call Resolved.variables() call Resolved.variables() call Resolved.variables() call java.lang.StringBuilder.replace(int,int,String) call java.lang.StringBuilder.replace(int,int,String) call java.lang.StringBuilder.replace(int,int,String) call java.lang.StringBuilder.replace(int,int,String) call java.lang.StringBuilder.replace(int,int,String) call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() else return String Resolved Matcher private private decl_stmt Resolved = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) while call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) decl_stmt java.lang.String = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call Resolved.startIndexes() call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call Resolved.endOffsets() call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call Resolved.variables() call Resolved.variables() call Resolved.variables() call Resolved.variables() call Resolved.variables() call Resolved.variables() call Resolved.variables() call Resolved.variables() call Resolved.variables() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return Resolved public < public < decl_stmt Resolved = if == return return new <> decl String decl Map decl String decl Map public public < if != if != decl_stmt java.lang.String = call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) decl_stmt java.util.Map < = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() - else for < : decl_stmt java.lang.String = call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) decl_stmt java.util.Map < = = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() - decl Map int Object private private < decl_stmt int = : - for = < ++ decl_stmt java.lang.Object = if == if == - decl_stmt java.util.Map < = new <> = else return new else if instanceof < decl_stmt java.util.Map < = < = else throw new return new - public public call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() public public < =