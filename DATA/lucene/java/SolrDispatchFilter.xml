org.apache.solr.servlet javax.servlet.FilterChain import javax.servlet.FilterConfig import javax.servlet.ServletException import javax.servlet.ServletInputStream import javax.servlet.ServletRequest import javax.servlet.ServletResponse import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse import java.io.ByteArrayInputStream import java.io.IOException import java.lang.invoke.MethodHandles import java.nio.file.Path import java.nio.file.Paths import java.util.ArrayList import java.util.Properties import java.util.concurrent.atomic.AtomicBoolean import java.util.concurrent.atomic.AtomicReference import java.util.regex.Matcher import java.util.regex.Pattern import org.apache.commons.lang.StringUtils import org.apache.http.client.HttpClient import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.core.CoreContainer import org.apache.solr.core.NodeConfig import org.apache.solr.core.SolrCore import org.apache.solr.core.SolrResourceLoader import org.apache.solr.core.SolrXmlConfig import org.apache.solr.request.SolrRequestInfo import org.apache.solr.security.AuthenticationPlugin import org.apache.solr.security.PKIAuthenticationPlugin import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.servlet.SolrDispatchFilter super super extends String String Logger String decl ArrayList CoreContainer HttpClient String decl String Properties String public public throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.lang.String = if != decl_stmt java.lang.String = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) = new <> for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() try decl_stmt java.util.Properties = if == = new decl_stmt java.lang.String = = == : = call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() if instanceof throw call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) NodeConfig protected protected decl_stmt org.apache.solr.core.NodeConfig = = new call org.apache.solr.core.CoreContainer.load() call org.apache.solr.core.CoreContainer.load() call org.apache.solr.core.CoreContainer.load() call org.apache.solr.core.CoreContainer.load() call org.apache.solr.core.CoreContainer.load() return decl byte String SolrResourceLoader public static public static decl_stmt org.apache.solr.core.SolrResourceLoader = new if ! call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + decl_stmt java.lang.String = if ! try = new if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt byte = return new catch throw new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() public public return public public if != try call org.apache.solr.core.CoreContainer.shutdown() call org.apache.solr.core.CoreContainer.shutdown() call org.apache.solr.core.CoreContainer.shutdown() call org.apache.solr.core.CoreContainer.shutdown() call org.apache.solr.core.CoreContainer.shutdown() finally = public public throws decl AtomicReference String Matcher HttpSolrCall Action String public public throws if ! instanceof return try if == || call org.apache.solr.core.CoreContainer.isShutDown() call org.apache.solr.core.CoreContainer.isShutDown() call org.apache.solr.core.CoreContainer.isShutDown() call org.apache.solr.core.CoreContainer.isShutDown() call org.apache.solr.core.CoreContainer.isShutDown() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new decl_stmt java.util.concurrent.atomic.AtomicReference < = new <> if ! return if call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() != = call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() if call org.apache.solr.core.CoreContainer.getAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getAuthenticationPlugin() != call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() if != decl_stmt java.lang.String = decl_stmt java.lang.String = if != += for : decl_stmt java.util.regex.Matcher = if call java.util.regex.Matcher.lookingAt() call java.util.regex.Matcher.lookingAt() call java.util.regex.Matcher.lookingAt() call java.util.regex.Matcher.lookingAt() call java.util.regex.Matcher.lookingAt() return decl_stmt org.apache.solr.servlet.HttpSolrCall = try decl_stmt com.sun.security.auth.callback.Action = call org.apache.solr.servlet.HttpSolrCall.call() call org.apache.solr.servlet.HttpSolrCall.call() call org.apache.solr.servlet.HttpSolrCall.call() call org.apache.solr.servlet.HttpSolrCall.call() call org.apache.solr.servlet.HttpSolrCall.call() switch case break case break case call org.apache.solr.servlet.HttpSolrCall.getPath() call org.apache.solr.servlet.HttpSolrCall.getPath() call org.apache.solr.servlet.HttpSolrCall.getPath() call org.apache.solr.servlet.HttpSolrCall.getPath() call org.apache.solr.servlet.HttpSolrCall.getPath() break finally call org.apache.solr.servlet.HttpSolrCall.destroy() call org.apache.solr.servlet.HttpSolrCall.destroy() call org.apache.solr.servlet.HttpSolrCall.destroy() call org.apache.solr.servlet.HttpSolrCall.destroy() call org.apache.solr.servlet.HttpSolrCall.destroy() finally ServletInputStream private private try decl_stmt ServletInputStream = while ! call ServletInputStream.isFinished() call ServletInputStream.isFinished() call ServletInputStream.isFinished() call ServletInputStream.isFinished() call ServletInputStream.isFinished() && call ServletInputStream.read() call ServletInputStream.read() call ServletInputStream.read() call ServletInputStream.read() call ServletInputStream.read() != - catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) protected protected return new AuthenticationPlugin AtomicBoolean String private private final final final < throws decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new decl_stmt org.apache.solr.security.AuthenticationPlugin = call org.apache.solr.core.CoreContainer.getAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getAuthenticationPlugin() if == return else decl_stmt java.lang.String = if != && call org.apache.solr.core.CoreContainer.getPkiAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getPkiAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getPkiAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getPkiAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getPkiAuthenticationPlugin() != = call org.apache.solr.core.CoreContainer.getPkiAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getPkiAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getPkiAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getPkiAuthenticationPlugin() call org.apache.solr.core.CoreContainer.getPkiAuthenticationPlugin() try call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call AuthenticationPlugin.doAuthenticate() call AuthenticationPlugin.doAuthenticate() call AuthenticationPlugin.doAuthenticate() call AuthenticationPlugin.doAuthenticate() call AuthenticationPlugin.doAuthenticate() new public public throws call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) catch throw new if ! call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return return public public throws