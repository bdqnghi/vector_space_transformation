org.apache.solr.cloud java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.List import java.util.Map import java.util.concurrent.Executors import java.util.concurrent.ScheduledExecutorService import java.util.concurrent.TimeUnit import org.apache.lucene.util.LuceneTestCase.Slow import org.apache.solr.SolrTestCaseJ4 import org.apache.solr.common.cloud.OnReconnect import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkCoreNodeProps import org.apache.solr.common.cloud.ZkNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.util.DefaultSolrThreadFactory import org.apache.zookeeper.KeeperException import org.apache.zookeeper.KeeperException.NoNodeException import org.apache.zookeeper.KeeperException.SessionExpiredException import org.junit.AfterClass import org.junit.BeforeClass import org.junit.Test import org.slf4j.Logger import org.slf4j.LoggerFactory import class annotation org.apache.solr.cloud.LeaderElectionTest super super extends Logger boolean ZkTestServer decl Map int SolrZkClient ZkStateReader public static public static public static public static String public public throws decl_stmt java.lang.String = = new call org.apache.solr.cloud.ZkTestServer.setTheTickTime(int) call org.apache.solr.cloud.ZkTestServer.setTheTickTime(int) call org.apache.solr.cloud.ZkTestServer.setTheTickTime(int) call org.apache.solr.cloud.ZkTestServer.setTheTickTime(int) call org.apache.solr.cloud.ZkTestServer.setTheTickTime(int) call org.apache.solr.cloud.ZkTestServer.run() call org.apache.solr.cloud.ZkTestServer.run() call org.apache.solr.cloud.ZkTestServer.run() call org.apache.solr.cloud.ZkTestServer.run() call org.apache.solr.cloud.ZkTestServer.run() call org.apache.solr.cloud.ZkTestServer.getZkHost() call org.apache.solr.cloud.ZkTestServer.getZkHost() call org.apache.solr.cloud.ZkTestServer.getZkHost() call org.apache.solr.cloud.ZkTestServer.getZkHost() call org.apache.solr.cloud.ZkTestServer.getZkHost() call org.apache.solr.cloud.ZkTestServer.getZkHost() call org.apache.solr.cloud.ZkTestServer.getZkHost() call org.apache.solr.cloud.ZkTestServer.getZkHost() call org.apache.solr.cloud.ZkTestServer.getZkHost() call org.apache.solr.cloud.ZkTestServer.getZkHost() = new call org.apache.solr.cloud.ZkTestServer.getZkAddress() call org.apache.solr.cloud.ZkTestServer.getZkAddress() call org.apache.solr.cloud.ZkTestServer.getZkAddress() call org.apache.solr.cloud.ZkTestServer.getZkAddress() call org.apache.solr.cloud.ZkTestServer.getZkAddress() = new = new < throws if > call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + public public if ! call org.apache.solr.common.cloud.SolrZkClient.isClosed() call org.apache.solr.common.cloud.SolrZkClient.isClosed() call org.apache.solr.common.cloud.SolrZkClient.isClosed() call org.apache.solr.common.cloud.SolrZkClient.isClosed() call org.apache.solr.common.cloud.SolrZkClient.isClosed() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() TestLeaderElectionContext private private throws decl_stmt TestLeaderElectionContext = new = = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return while ! try catch return public public = public public return LeaderElector ElectionContext ZkNodeProps public public throws decl_stmt org.apache.solr.cloud.LeaderElector = new decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new decl_stmt org.apache.solr.cloud.ElectionContext = new call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) ElectionContext ZkNodeProps LeaderElector ElectionContext LeaderElector public public throws decl_stmt org.apache.solr.cloud.LeaderElector = new decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new decl_stmt org.apache.solr.cloud.ElectionContext = new call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) decl_stmt org.apache.solr.cloud.LeaderElector = new = new decl_stmt org.apache.solr.cloud.ElectionContext = new call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() ZkCoreNodeProps decl byte int private private final final final final throws decl_stmt int = while -- > try decl_stmt byte = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = new return call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() catch call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() throw new int private static private static < throws for : while decl_stmt int = for : if ++ if == break int decl List ClientThread public public throws decl_stmt java.util.List < = new <> for = < ++ decl_stmt ClientThread = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() try decl_stmt int = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() finally for : call ClientThread.close() call ClientThread.close() call ClientThread.close() call ClientThread.close() call ClientThread.close() call ClientThread.interrupt() call ClientThread.interrupt() call ClientThread.interrupt() call ClientThread.interrupt() call ClientThread.interrupt() for : call ClientThread.join() call ClientThread.join() call ClientThread.join() call ClientThread.join() call ClientThread.join() ElectorSetup ClientThread decl List int decl List decl List ElectorSetup public public throws decl_stmt int final final = + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + decl_stmt java.util.List < = new <> try decl_stmt java.util.List < = new <> decl_stmt ElectorSetup = new for = <= ++ decl_stmt ClientThread = new + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.util.List < = new <> decl_stmt ElectorSetup = new for = <= ++ decl_stmt ClientThread = new + / - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call ElectorSetup.close() call ElectorSetup.close() call ElectorSetup.close() call ElectorSetup.close() call ElectorSetup.close() for = <= ++ + finally for : call ClientThread.close() call ClientThread.close() call ClientThread.close() call ClientThread.close() call ClientThread.close() call ClientThread.interrupt() call ClientThread.interrupt() call ClientThread.interrupt() call ClientThread.interrupt() call ClientThread.interrupt() for : call ClientThread.join() call ClientThread.join() call ClientThread.join() call ClientThread.join() call ClientThread.join() int int private private < throws decl_stmt int decl_stmt int = = while < = if ++ > break String private private throws decl_stmt java.lang.String = return call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) int ScheduledExecutorService ClientThread Thread int long decl List ClientThread int Thread Thread int public public throws decl_stmt java.util.concurrent.ScheduledExecutorService final final = new decl_stmt java.util.List final final final < = new < decl_stmt ClientThread = = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) decl_stmt java.lang.Thread = new public public decl_stmt int = for = < ++ decl_stmt int = decl_stmt ClientThread = try = new catch if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) decl_stmt java.lang.Thread = new public public while ! try decl_stmt int try = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - catch continue try call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() catch catch decl_stmt java.lang.Thread = new public public while ! try decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() try call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if decl_stmt long = call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.cloud.ZkTestServer.expire(long) call org.apache.solr.cloud.ZkTestServer.expire(long) call org.apache.solr.cloud.ZkTestServer.expire(long) call org.apache.solr.cloud.ZkTestServer.expire(long) call org.apache.solr.cloud.ZkTestServer.expire(long) catch catch call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() = call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call ScheduledExecutorService.shutdownNow() call ScheduledExecutorService.shutdownNow() call ScheduledExecutorService.shutdownNow() call ScheduledExecutorService.shutdownNow() call ScheduledExecutorService.shutdownNow() call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) decl_stmt int = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for : call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.es() call ClientThread.close() call ClientThread.close() call ClientThread.close() call ClientThread.close() call ClientThread.close() for : call ClientThread.join() call ClientThread.join() call ClientThread.join() call ClientThread.join() call ClientThread.join() int int ClientThread public public decl_stmt int = for = < ++ decl_stmt int = decl_stmt ClientThread = try = new catch if != int public public while ! try decl_stmt int try = - catch continue try catch catch long int public public while ! try decl_stmt int = try if decl_stmt long = call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.cloud.ZkTestServer.expire(long) call org.apache.solr.cloud.ZkTestServer.expire(long) call org.apache.solr.cloud.ZkTestServer.expire(long) call org.apache.solr.cloud.ZkTestServer.expire(long) call org.apache.solr.cloud.ZkTestServer.expire(long) catch catch public public throws call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.ZkStateReader.close() call org.apache.solr.common.cloud.ZkStateReader.close() call org.apache.solr.common.cloud.ZkStateReader.close() call org.apache.solr.common.cloud.ZkStateReader.close() call org.apache.solr.common.cloud.ZkStateReader.close() call org.apache.solr.cloud.ZkTestServer.shutdown() call org.apache.solr.cloud.ZkTestServer.shutdown() call org.apache.solr.cloud.ZkTestServer.shutdown() call org.apache.solr.cloud.ZkTestServer.shutdown() call org.apache.solr.cloud.ZkTestServer.shutdown() SolrZkClient private private throws decl_stmt org.apache.solr.common.cloud.SolrZkClient = new call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close()