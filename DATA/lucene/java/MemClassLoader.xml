org.apache.solr.core java.io.IOException import java.io.InputStream import java.lang.invoke.MethodHandles import java.net.MalformedURLException import java.net.URL import java.nio.ByteBuffer import java.security.CodeSource import java.security.ProtectionDomain import java.security.cert.Certificate import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import java.util.concurrent.atomic.AtomicReference import org.apache.lucene.analysis.util.ResourceLoader import org.apache.solr.common.SolrException import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.core.MemClassLoader super super extends super implements decl List decl Map SolrResourceLoader Logger boolean public synchronized public synchronized if return for : try catch if instanceof throw throw new = protected < protected < throws if ! try return call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) catch return ByteBuffer Class ProtectionDomain decl AtomicReference private synchronized < private synchronized < throws decl_stmt java.lang.Class = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return decl_stmt java.util.concurrent.atomic.AtomicReference < = new <> decl_stmt ByteBuffer = try = catch throw new + if == throw new + decl_stmt java.security.ProtectionDomain = try = new new new + call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() catch throw new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.arrayOffset() call ByteBuffer.arrayOffset() call ByteBuffer.arrayOffset() call ByteBuffer.arrayOffset() call ByteBuffer.arrayOffset() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return String ByteBuffer private private < throws if ! decl_stmt java.lang.String = decl_stmt ByteBuffer = for : try = if != break catch throw new + return public public throws for : try catch ByteBuffer decl AtomicReference public public throws decl_stmt java.util.concurrent.atomic.AtomicReference < = new <> try decl_stmt ByteBuffer = if == throw new + catch throw new + return public < < extends extends public < < extends extends < if ! try return catch if instanceof throw else throw new + public < public < < try return catch throw catch throw new +