org.apache.solr.schema javax.xml.parsers.DocumentBuilderFactory import javax.xml.parsers.ParserConfigurationException import javax.xml.xpath.XPath import javax.xml.xpath.XPathConstants import javax.xml.xpath.XPathExpressionException import javax.xml.xpath.XPathFactory import java.io.IOException import java.io.InputStream import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.List import java.util.Locale import java.util.Map import org.apache.lucene.document.FieldType import org.apache.lucene.document.LegacyIntField import org.apache.lucene.document.NumericDocValuesField import org.apache.lucene.document.SortedSetDocValuesField import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.IndexableField import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.queries.function.valuesource.EnumFieldSource import org.apache.lucene.search.ConstantScoreQuery import org.apache.lucene.search.DocValuesRangeQuery import org.apache.lucene.search.LegacyNumericRangeQuery import org.apache.lucene.search.Query import org.apache.lucene.search.SortField import org.apache.lucene.uninverting.UninvertingReader.Type import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.CharsRef import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.LegacyNumericUtils import org.apache.solr.common.EnumFieldValue import org.apache.solr.common.SolrException import org.apache.solr.response.TextResponseWriter import org.apache.solr.search.QParser import org.slf4j.Logger import org.slf4j.LoggerFactory import org.w3c.dom.Document import org.w3c.dom.Node import org.w3c.dom.NodeList import org.xml.sax.SAXException import class org.apache.solr.schema.EnumField super super extends Integer String Logger int decl Map String String String decl Map XPath XPathFactory String Document InputStream DocumentBuilderFactory NodeList int String Node String NodeList Node protected protected < = if == throw new = if == throw new decl_stmt java.io.InputStream = try = decl_stmt DocumentBuilderFactory final final = try decl_stmt org.apache.lucene.document.Document final final = call DocumentBuilderFactory.newDocumentBuilder() call DocumentBuilderFactory.newDocumentBuilder() call DocumentBuilderFactory.newDocumentBuilder() call DocumentBuilderFactory.newDocumentBuilder() call DocumentBuilderFactory.newDocumentBuilder() decl_stmt XPathFactory final final = decl_stmt XPath final final = call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() decl_stmt java.lang.String final final = decl_stmt NodeList final final = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() decl_stmt int final final = call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() if == decl_stmt java.lang.String = throw new if > if call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() decl_stmt org.apache.lucene.replicator.nrt.Node final final = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() - decl_stmt NodeList final final = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt org.apache.lucene.replicator.nrt.Node final final = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt java.lang.String final final = call Node.getTextContent() call Node.getTextContent() call Node.getTextContent() call Node.getTextContent() call Node.getTextContent() if == || call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == decl_stmt java.lang.String final final = throw new if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() decl_stmt java.lang.String final final = throw new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() catch throw new catch throw new finally try if != call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() catch if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == || call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == decl_stmt java.lang.String = throw new String Integer Number public public decl_stmt java.lang.Integer = decl_stmt java.lang.String = decl_stmt java.lang.Number final final = if != = call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() = return new SortField Object public public decl_stmt java.lang.Object final final = decl_stmt org.apache.lucene.search.SortField = new call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) return public public if return else return public public return new String Number public public throws decl_stmt java.lang.Number final final = if == return decl_stmt java.lang.String final final = call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() public public return public public return boolean Query Integer Integer public public decl_stmt java.lang.Integer = decl_stmt java.lang.Integer = if && && ! return call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() decl_stmt org.apache.lucene.search.Query = decl_stmt boolean final final = && ! if = new == : call java.lang.Integer.longValue() call java.lang.Integer.longValue() call java.lang.Integer.longValue() call java.lang.Integer.longValue() call java.lang.Integer.longValue() == : call java.lang.Integer.longValue() call java.lang.Integer.longValue() call java.lang.Integer.longValue() call java.lang.Integer.longValue() call java.lang.Integer.longValue() else = == : == : return public public BytesRefBuilder public public if == return decl_stmt org.apache.lucene.util.BytesRefBuilder final final = new return call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() String Integer public public decl_stmt java.lang.String final final = if == return decl_stmt java.lang.Integer final final = public public return Number public public decl_stmt java.lang.Number final final = if == return return call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() Integer BytesRef public public if == return decl_stmt org.apache.lucene.util.BytesRef final final = new decl_stmt java.lang.Integer final final = return String Integer public public decl_stmt java.lang.Integer final final = decl_stmt java.lang.String final final = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.getChars(char,int) call java.lang.String.getChars(char,int) call java.lang.String.getChars(char,int) call java.lang.String.getChars(char,int) call java.lang.String.getChars(char,int) return String Integer public public decl_stmt java.lang.Integer final final = decl_stmt java.lang.String final final = return new BytesRefBuilder Number public public decl_stmt java.lang.Number final final = if == return decl_stmt org.apache.lucene.util.BytesRefBuilder final final = new call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() return call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() decl org Integer boolean boolean String boolean FieldType public public decl_stmt boolean final final = decl_stmt boolean final final = decl_stmt boolean final final = if ! && ! && ! if call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + return decl_stmt java.lang.Integer final final = if == || call java.lang.Integer.equals(Object) call java.lang.Integer.equals(Object) call java.lang.Integer.equals(Object) call java.lang.Integer.equals(Object) call java.lang.Integer.equals(Object) throw new + decl_stmt java.lang.String = call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() decl_stmt org.apache.solr.schema.FieldType final final = new call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) : call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPayloads(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPayloads(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPayloads(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPayloads(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPayloads(boolean) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericPrecisionStep(int) call org.apache.solr.schema.FieldType.setNumericPrecisionStep(int) call org.apache.solr.schema.FieldType.setNumericPrecisionStep(int) call org.apache.solr.schema.FieldType.setNumericPrecisionStep(int) call org.apache.solr.schema.FieldType.setNumericPrecisionStep(int) decl_stmt org.apache.solr.handler.dataimport.config.Field final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final = new call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call decl org.setBoost() call decl org.setBoost() call decl org.setBoost() call decl org.setBoost() call decl org.setBoost() return decl List BytesRefBuilder long IndexableField public < public < if decl_stmt java.util.List < = new <> decl_stmt org.apache.lucene.index.IndexableField final final = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if decl_stmt org.apache.lucene.util.BytesRefBuilder = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() else decl_stmt long final final = call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return else return String public public if == return decl_stmt java.lang.String final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return return call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() Integer Integer String public public if == return decl_stmt java.lang.Integer decl_stmt java.lang.Integer final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return = if == = decl_stmt java.lang.String final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return return Integer private static private static decl_stmt java.lang.Integer = try = catch return