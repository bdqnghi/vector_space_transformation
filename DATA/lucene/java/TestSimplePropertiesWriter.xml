org.apache.solr.handler.dataimport java.io.File import java.lang.invoke.MethodHandles import java.sql.Connection import java.sql.ResultSet import java.sql.SQLException import java.sql.Statement import java.text.SimpleDateFormat import java.util.Date import java.util.HashMap import java.util.Locale import java.util.Map import org.apache.solr.common.util.SuppressForbidden import org.junit.After import org.junit.Assert import org.junit.Before import org.junit.Test import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.handler.dataimport.TestSimplePropertiesWriter super super extends String String String Logger boolean public public throws = = decl String SimpleDateFormat Date int SimplePropertiesWriter decl Map SimpleDateFormat decl Map Date Date = public = public throws decl_stmt java.text.SimpleDateFormat = new decl_stmt java.lang.String = for = < ++ if < = else = = decl_stmt java.text.SimpleDateFormat = new decl_stmt java.util.Date = new - decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.handler.dataimport.SimplePropertiesWriter = new call org.apache.solr.handler.dataimport.SimplePropertiesWriter.init(DataImporter,Map) call org.apache.solr.handler.dataimport.SimplePropertiesWriter.init(DataImporter,Map) call org.apache.solr.handler.dataimport.SimplePropertiesWriter.init(DataImporter,Map) call org.apache.solr.handler.dataimport.SimplePropertiesWriter.init(DataImporter,Map) call org.apache.solr.handler.dataimport.SimplePropertiesWriter.init(DataImporter,Map) new decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.handler.dataimport.SimplePropertiesWriter.persist(Map) call org.apache.solr.handler.dataimport.SimplePropertiesWriter.persist(Map) call org.apache.solr.handler.dataimport.SimplePropertiesWriter.persist(Map) call org.apache.solr.handler.dataimport.SimplePropertiesWriter.persist(Map) call org.apache.solr.handler.dataimport.SimplePropertiesWriter.persist(Map) = call org.apache.solr.handler.dataimport.SimplePropertiesWriter.readIndexerProperties() call org.apache.solr.handler.dataimport.SimplePropertiesWriter.readIndexerProperties() call org.apache.solr.handler.dataimport.SimplePropertiesWriter.readIndexerProperties() call org.apache.solr.handler.dataimport.SimplePropertiesWriter.readIndexerProperties() call org.apache.solr.handler.dataimport.SimplePropertiesWriter.readIndexerProperties() decl_stmt java.util.Date = call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.util.Date = call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt int = + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) + + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() - call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() > + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) + + call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() - call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() > + + Statement Connection ResultSet private private throws decl_stmt org.apache.lucene.replicator.nrt.Connection = decl_stmt sun.tools.tree.Statement = decl_stmt java.sql.ResultSet = try = = call sun.rmi.transport.Connection.createStatement(int,int,int) call sun.rmi.transport.Connection.createStatement(int,int,int) call sun.rmi.transport.Connection.createStatement(int,int,int) call sun.rmi.transport.Connection.createStatement(int,int,int) call sun.rmi.transport.Connection.createStatement(int,int,int) = call sun.tools.tree.Statement.executeQuery(String) call sun.tools.tree.Statement.executeQuery(String) call sun.tools.tree.Statement.executeQuery(String) call sun.tools.tree.Statement.executeQuery(String) call sun.tools.tree.Statement.executeQuery(String) if call java.sql.ResultSet.next() call java.sql.ResultSet.next() call java.sql.ResultSet.next() call java.sql.ResultSet.next() call java.sql.ResultSet.next() return call java.sql.ResultSet.getInt(String) call java.sql.ResultSet.getInt(String) call java.sql.ResultSet.getInt(String) call java.sql.ResultSet.getInt(String) call java.sql.ResultSet.getInt(String) catch throw finally try call java.sql.ResultSet.close() call java.sql.ResultSet.close() call java.sql.ResultSet.close() call java.sql.ResultSet.close() call java.sql.ResultSet.close() catch try call sun.tools.tree.Statement.close() call sun.tools.tree.Statement.close() call sun.tools.tree.Statement.close() call sun.tools.tree.Statement.close() call sun.tools.tree.Statement.close() catch try call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() catch return protected protected return String StringBuilder String protected protected decl_stmt java.lang.StringBuilder = new decl_stmt java.lang.String = : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + + + + + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + + + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return