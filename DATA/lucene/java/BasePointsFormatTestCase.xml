org.apache.lucene.index java.io.IOException import java.math.BigInteger import java.util.ArrayList import java.util.Arrays import java.util.BitSet import java.util.List import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.codecs.Codec import org.apache.lucene.document.BinaryPoint import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.IntPoint import org.apache.lucene.document.NumericDocValuesField import org.apache.lucene.document.StringField import org.apache.lucene.index.PointValues.IntersectVisitor import org.apache.lucene.index.PointValues.Relation import org.apache.lucene.search.IndexSearcher import org.apache.lucene.store.Directory import org.apache.lucene.store.MockDirectoryWrapper import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.NumericUtils import org.apache.lucene.util.StringHelper import org.apache.lucene.util.TestUtil import class org.apache.lucene.index.BasePointsFormatTestCase super super extends int protected protected decl_stmt int final final = for = < ++ new IndexWriterConfig LeafReader decl byte Document DirectoryReader PointValues IndexWriter BitSet Directory public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.IndexWriterConfig = call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt byte = new for = < ++ decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() decl_stmt org.apache.lucene.index.DirectoryReader = decl_stmt org.apache.lucene.index.LeafReader = decl_stmt org.apache.lucene.index.PointValues = call LeafReader.getPointValues() call LeafReader.getPointValues() call LeafReader.getPointValues() call LeafReader.getPointValues() call LeafReader.getPointValues() decl_stmt org.apache.lucene.util.BitSet = new call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() new public public return public public throw new public public call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() public public return public public throw new public public IndexWriterConfig LeafReader decl byte Document DirectoryReader PointValues IndexWriter BitSet Directory public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.IndexWriterConfig = call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt byte = new for = < ++ decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) if == call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() decl_stmt org.apache.lucene.index.DirectoryReader = decl_stmt org.apache.lucene.index.LeafReader = decl_stmt org.apache.lucene.index.PointValues = call LeafReader.getPointValues() call LeafReader.getPointValues() call LeafReader.getPointValues() call LeafReader.getPointValues() call LeafReader.getPointValues() decl_stmt org.apache.lucene.util.BitSet = new call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() new public public return public public throw new public public call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() public public return public public throw new public public IndexWriterConfig decl byte Document Bits DirectoryReader PointValues IndexWriter BitSet NumericDocValues Directory public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.IndexWriterConfig = decl_stmt org.apache.lucene.index.IndexWriter = new decl_stmt byte = new for = < ++ decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) new call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) new if call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() decl_stmt org.apache.lucene.index.DirectoryReader = call DirectoryReader.numDocs() call DirectoryReader.numDocs() call DirectoryReader.numDocs() call DirectoryReader.numDocs() call DirectoryReader.numDocs() decl_stmt org.apache.lucene.util.Bits = for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.index.PointValues = decl_stmt NumericDocValues = if != decl_stmt org.apache.lucene.util.BitSet = new call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() new public public return public public throw new public public if call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() public public return public public throw new public public if int int boolean decl byte decl byte int Throwable String public public throws decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt byte = new for = < ++ decl_stmt byte = new for = < ++ = new = decl_stmt boolean = while == try = try catch if decl_stmt java.lang.Throwable = if != && call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() = else throw else throw catch if != && = else throw catch catch decl_stmt java.lang.String = if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) || call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) = else throw int decl int int decl byte decl byte int decl List int decl List public public throws decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> for = < ++ decl_stmt int = for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt byte = new for = < ++ = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt byte = call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() int int decl byte int decl byte public public throws decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt byte = new for = < ++ if == decl_stmt byte = new for = < ++ = new = else = int int decl byte decl byte int int public public throws decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt byte = new for = < ++ decl_stmt byte = new for = < ++ = new = if > = BigInteger int BigInteger boolean decl BigInteger IndexWriterConfig int int decl BigInteger BitSet decl BigInteger PointValues decl BigInteger int int boolean boolean Document decl byte DirectoryReader decl BigInteger RandomIndexWriter BigInteger public public throws decl_stmt int = try = decl_stmt int = decl_stmt int = decl_stmt org.apache.lucene.index.IndexWriterConfig = new call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) decl_stmt org.apache.lucene.index.RandomIndexWriter = new decl_stmt java.math.BigInteger = new for = < ++ decl_stmt java.math.BigInteger = new if + decl_stmt byte = new for = < ++ = = new if + + + = decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) decl_stmt org.apache.lucene.index.DirectoryReader = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() decl_stmt int = for = < ++ if + decl_stmt java.math.BigInteger = new decl_stmt java.math.BigInteger = new for = < ++ = = if > decl_stmt java.math.BigInteger = = = if + + + + + decl_stmt org.apache.lucene.util.BitSet final final = new for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.index.PointValues = if == continue decl_stmt int final final = call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() new public public call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) + public public for = < ++ decl_stmt java.math.BigInteger = * if call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) < || call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) > return call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) + public public decl_stmt boolean = for = < ++ decl_stmt java.math.BigInteger = * decl_stmt java.math.BigInteger = * assert call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) >= if call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) < || call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) > return else if call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) < || call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) > = if return else return for = < ++ decl_stmt java.math.BigInteger = decl_stmt boolean = for = < ++ decl_stmt java.math.BigInteger = if call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) < || call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) > = break decl_stmt boolean = call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) + call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() public public + BigInteger public public for = < ++ decl_stmt java.math.BigInteger = * if call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) < || call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) > return + BigInteger boolean BigInteger public public decl_stmt boolean = for = < ++ decl_stmt java.math.BigInteger = * decl_stmt java.math.BigInteger = * assert call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) >= if call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) < || call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) > return else if call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) < || call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) > = if return else return public public throws public public throws public public throws int int decl byte int decl byte private private throws decl_stmt int = * decl_stmt int = decl_stmt int = decl_stmt byte = new for = < ++ decl_stmt byte = new for = < ++ = new = private private throws try = while try return catch decl byte int int NumericDocValues decl byte int int decl byte RandomIndexWriter decl byte DirectoryReader BitSet int decl byte decl byte IndexWriterConfig RandomIndexWriter Document int boolean PointValues decl byte boolean int int BitSet boolean Bits Document decl byte Directory int decl byte MergeScheduler decl byte private private throws decl_stmt int = if + + + + + decl_stmt boolean = > decl_stmt org.apache.lucene.index.IndexWriterConfig if = new new else = if decl_stmt org.apache.lucene.index.MergeScheduler = call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() if instanceof decl_stmt org.apache.lucene.index.RandomIndexWriter = new decl_stmt org.apache.lucene.index.DirectoryReader = decl_stmt byte = new decl_stmt byte = new for = < ++ for = < ++ if == = new = new else if < if > decl_stmt org.apache.lucene.store.Directory decl_stmt org.apache.lucene.index.RandomIndexWriter decl_stmt int if == = = = if = new new else = if decl_stmt org.apache.lucene.index.MergeScheduler = call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() if instanceof = new = - else = = = try decl_stmt org.apache.lucene.document.Document = decl_stmt int = - for = < ++ decl_stmt int if == = else = if != if != if call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() else call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new = if == if call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() new else call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) new if if == decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new if call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() else call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) if if == if call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() call RandomIndexWriter.w() new else call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) new if + + + for = < ++ + + + new if != && >= = = = = call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) new if if call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() if + decl_stmt NumericDocValues = decl_stmt org.apache.lucene.util.Bits = decl_stmt byte = new * byte decl_stmt byte = new * for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.index.PointValues = if == continue decl_stmt byte = call org.apache.lucene.index.PointValues.getMinPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMinPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMinPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMinPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMinPackedValue(IndexReader,String) decl_stmt byte = call org.apache.lucene.index.PointValues.getMaxPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMaxPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMaxPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMaxPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMaxPackedValue(IndexReader,String) for = < ++ if * * < * * if * * > * * decl_stmt byte = new for = < ++ * * decl_stmt int = for = < ++ if + decl_stmt byte = new decl_stmt byte = new for = < ++ = new = new if > decl_stmt byte = = = if for = < ++ + + + new + + new decl_stmt org.apache.lucene.util.BitSet final final = new for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.index.PointValues = if == continue decl_stmt int final final = call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() new public public if == || call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() + call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) int call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + public public if != && call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() + == return for = < ++ if * < || * > return call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) int call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + public public decl_stmt boolean = for = < ++ if * < || * > return else if * < || * > = if return else return decl_stmt org.apache.lucene.util.BitSet = new for = < ++ decl_stmt boolean = for = < ++ decl_stmt byte = if < || > = break if decl_stmt int if == = else = call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) decl_stmt int = call java.util.BitSet.length() call java.util.BitSet.length() call java.util.BitSet.length() call java.util.BitSet.length() call java.util.BitSet.length() call java.util.BitSet.length() call java.util.BitSet.length() call java.util.BitSet.length() call java.util.BitSet.length() call java.util.BitSet.length() decl_stmt int = decl_stmt int = for = < ++ if call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) != call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) + ++ else ++ if != for = < call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() ++ + + + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + + finally == : public public if == || + int + public public if != && + == return for = < ++ if * < || * > return int + boolean public public decl_stmt boolean = for = < ++ if * < || * > return else if * < || * > = if return else return Directory Directory Document IndexSearcher DirectoryReader RandomIndexWriter Directory public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.RandomIndexWriter = new decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() decl_stmt org.apache.lucene.store.Directory = = new = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() decl_stmt org.apache.lucene.store.Directory = = new call org.apache.lucene.index.RandomIndexWriter.addIndexes(Directory) call org.apache.lucene.index.RandomIndexWriter.addIndexes(Directory) call org.apache.lucene.index.RandomIndexWriter.addIndexes(Directory) call org.apache.lucene.index.RandomIndexWriter.addIndexes(Directory) call org.apache.lucene.index.RandomIndexWriter.addIndexes(Directory) new call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) decl_stmt org.apache.lucene.index.DirectoryReader = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() decl_stmt org.apache.lucene.search.IndexSearcher = call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() decl List private private throws if try = if decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() else if else if new BigInteger private private decl_stmt java.math.BigInteger = new * - if = call java.math.BigInteger.negate() call java.math.BigInteger.negate() call java.math.BigInteger.negate() call java.math.BigInteger.negate() call java.math.BigInteger.negate() return Directory private private throws decl_stmt org.apache.lucene.store.Directory if > = else = return protected protected return