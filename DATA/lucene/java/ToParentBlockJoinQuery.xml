org.apache.lucene.search.join java.io.IOException import java.util.Collection import java.util.Collections import java.util.Locale import java.util.Set import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.Term import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.Explanation import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.Scorer import org.apache.lucene.search.Weight import org.apache.lucene.search.grouping.TopGroups import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BitSet import class org.apache.lucene.search.join.ToParentBlockJoinQuery super super extends Query ScoreMode Query BitSetProducer public public throws return new call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) : public public return public public < public public throws return public public int BitSet Scorer public public throws decl_stmt org.apache.lucene.search.Scorer final final = if == return decl_stmt int final final = call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() if == return decl_stmt org.apache.lucene.util.BitSet final final = call BitSetProducer.getBitSet() call BitSetProducer.getBitSet() call BitSetProducer.getBitSet() call BitSetProducer.getBitSet() call BitSetProducer.getBitSet() if == return return new BlockJoinScorer public public throws decl_stmt BlockJoinScorer = if != && call BlockJoinScorer.iterator() call BlockJoinScorer.iterator() call BlockJoinScorer.iterator() call BlockJoinScorer.iterator() call BlockJoinScorer.iterator() == return call BlockJoinScorer.explain() call BlockJoinScorer.explain() call BlockJoinScorer.explain() call BlockJoinScorer.explain() call BlockJoinScorer.explain() return public < public < return new public public return return decl int public public decl_stmt int final final final = if == = new else = return decl float if == throw new decl_stmt float final final final = if == = new else = return float int DocIdSetIterator int float float float public public return new decl_stmt org.apache.lucene.search.DocIdSetIterator final final = public public throws if == return = = if == throw new + + + assert != decl_stmt float = decl_stmt float = decl_stmt float = = = do if != && == = if != && != && == = if != = if != decl_stmt float final final = decl_stmt int final final = if != = = = += += ++ = call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() < if == throw new + + + switch case = / break case = break case = break case = break case break return public public throws if == return = if == return = - assert >= if > = call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) if == throw new + + + decl_stmt int final final = return public public return public public return call org.apache.lucene.search.DocIdSetIterator.cost() call org.apache.lucene.search.DocIdSetIterator.cost() call org.apache.lucene.search.DocIdSetIterator.cost() call org.apache.lucene.search.DocIdSetIterator.cost() call org.apache.lucene.search.DocIdSetIterator.cost() int float float float float public public throws if == return = = if == throw new + + + assert != decl_stmt float = decl_stmt float = decl_stmt float = = = do if != && == = if != && != && == = if != = if != decl_stmt float final final = decl_stmt int final final = if != = = = += += ++ = < if == throw new + + + switch case = / break case = break case = break case = break case break return int public public throws if == return = if == return = - assert >= if > = if == throw new + + + decl_stmt int final final = return public public return public public return public public return public public throws return public public return int int public public throws decl_stmt int = + + decl_stmt int = + - return public public = new if != = new Query public public throws decl_stmt org.apache.lucene.search.Query final final = call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) if != return new else return public public return + call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() + ToParentBlockJoinQuery public public if instanceof decl_stmt org.apache.lucene.search.join.ToParentBlockJoinQuery final final = return call Query.equals() call Query.equals() call Query.equals() call Query.equals() call Query.equals() && call BitSetProducer.equals() call BitSetProducer.equals() call BitSetProducer.equals() call BitSetProducer.equals() call BitSetProducer.equals() && == && else return int int public public decl_stmt int final final = decl_stmt int = = * + call org.apache.lucene.search.Query.hashCode() call org.apache.lucene.search.Query.hashCode() call org.apache.lucene.search.Query.hashCode() call org.apache.lucene.search.Query.hashCode() call org.apache.lucene.search.Query.hashCode() = * + call ScoreMode.hashCode() call ScoreMode.hashCode() call ScoreMode.hashCode() call ScoreMode.hashCode() call ScoreMode.hashCode() = * + call BitSetProducer.hashCode() call BitSetProducer.hashCode() call BitSetProducer.hashCode() call BitSetProducer.hashCode() call BitSetProducer.hashCode() return