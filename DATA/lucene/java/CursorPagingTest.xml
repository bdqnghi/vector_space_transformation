org.apache.solr org.apache.lucene.util.TestUtil import org.apache.lucene.util.SentinelIntSet import org.apache.lucene.util.mutable.MutableValueInt import org.apache.solr.core.SolrInfoMBean import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.params.CursorMarkParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.GroupParams import static static org.apache.solr.common.params.CursorMarkParams.CURSOR_MARK_PARAM import static static org.apache.solr.common.params.CursorMarkParams.CURSOR_MARK_NEXT import static static org.apache.solr.common.params.CursorMarkParams.CURSOR_MARK_START import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.request.SolrQueryRequest import org.apache.solr.search.CursorMark import org.noggit.ObjectBuilder import java.nio.ByteBuffer import java.util.Arrays import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Collection import java.util.Collections import java.util.Map import java.util.UUID import org.junit.BeforeClass import org.junit.After import class org.apache.solr.CursorPagingTest super super extends decl String String decl String String public static public static throws public public throws public public throws if else for : new String String SolrParams SentinelIntSet String public public throws decl_stmt java.lang.String decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt java.lang.String final final = + : decl_stmt java.lang.String final final = = = = = = = = = = = = = = = = = = = = = + = = = = = + = = = = = + = = = = = = = = = + + = = = = = = = + = decl_stmt org.apache.lucene.util.SentinelIntSet = call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() = call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) = + + call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) = call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) = = = = = = = decl Collection SolrInfoMBean long long long SolrInfoMBean long SentinelIntSet long long public public throws decl_stmt java.util.Collection final final final < = decl_stmt org.apache.solr.core.SolrInfoMBean final final = decl_stmt org.apache.solr.core.SolrInfoMBean final final = decl_stmt long final final = call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() decl_stmt long final final = call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() decl_stmt long final final = call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() decl_stmt org.apache.lucene.util.SentinelIntSet = + call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() decl_stmt long final final = call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() decl_stmt long final final = call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() decl_stmt long final final = call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() call org.apache.solr.core.SolrInfoMBean.getStatistics() - < - decl Collection String String SolrInputDocument SentinelIntSet int boolean int String String int public public throws decl_stmt java.util.Collection final final final < = decl_stmt int final final = decl_stmt int final final = for = <= ++ decl_stmt org.apache.solr.common.SolrInputDocument = for : for : new decl_stmt java.lang.String = + + : + decl_stmt java.lang.String = + decl_stmt org.apache.lucene.util.SentinelIntSet = call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() for = + <= ++ decl_stmt org.apache.solr.common.SolrInputDocument = decl_stmt int final final = for = < ++ decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = + decl_stmt java.lang.String final final = : decl_stmt boolean final final = decl_stmt java.lang.String final final = : decl_stmt org.apache.lucene.util.SentinelIntSet = if call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() private static private static return != private < private < return decl ArrayList public static < public static < < decl_stmt java.util.ArrayList < = new <> for : if continue call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return > String String decl List SentinelIntSet int String int Map int public public throws decl_stmt org.apache.lucene.util.SentinelIntSet = new - decl_stmt java.lang.String = decl_stmt int = while < decl_stmt java.lang.String = decl_stmt java.util.Map = + + + call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) decl_stmt java.lang.String = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) + decl_stmt java.util.List < < = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if != decl_stmt int = + + + <= if == + + for < : decl_stmt int = + call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.put(int) call org.apache.lucene.util.SentinelIntSet.put(int) call org.apache.lucene.util.SentinelIntSet.put(int) call org.apache.lucene.util.SentinelIntSet.put(int) call org.apache.lucene.util.SentinelIntSet.put(int) + + + call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() < call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() = return decl Collection String String String SolrInputDocument String SentinelIntSet decl String String String decl String int decl String public public throws decl_stmt int final final = decl_stmt java.lang.String = decl_stmt java.lang.String = for = <= ++ decl_stmt org.apache.solr.common.SolrInputDocument = decl_stmt java.util.Collection < = decl_stmt java.lang.String = new call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.toArray() call decl Collection.toArray() call decl Collection.toArray() call decl Collection.toArray() call decl Collection.toArray() decl_stmt java.lang.String = - decl_stmt java.lang.String = == : decl_stmt java.lang.String = + + call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) : + decl_stmt java.lang.String = + decl_stmt java.lang.String = - decl_stmt java.lang.String = - decl_stmt org.apache.lucene.util.SentinelIntSet = + call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() MutableValueInt String String String List decl List List SentinelIntSet decl Map int Object String int int int Map String Map int String public public throws decl_stmt java.lang.String final final = call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) decl_stmt java.util.Map final final final < = new <> decl_stmt org.apache.lucene.util.SentinelIntSet = new - decl_stmt java.lang.String = decl_stmt int = decl_stmt java.util.List = while < decl_stmt java.lang.String = decl_stmt java.util.Map = + + + call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) decl_stmt java.lang.String = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) + decl_stmt java.util.List < < = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if != decl_stmt int = + + + <= if == + + for < : decl_stmt int = + call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.exists(int) call org.apache.lucene.util.SentinelIntSet.put(int) call org.apache.lucene.util.SentinelIntSet.put(int) call org.apache.lucene.util.SentinelIntSet.put(int) call org.apache.lucene.util.SentinelIntSet.put(int) call org.apache.lucene.util.SentinelIntSet.put(int) + + + call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() < call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() call org.apache.lucene.util.SentinelIntSet.size() decl_stmt java.lang.Object = decl_stmt java.lang.String = == : call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() decl_stmt org.apache.lucene.util.mutable.MutableValueInt = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() ++ = decl_stmt java.util.Map = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) decl_stmt java.util.List = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) if != + call java.util.List.toArray() call java.util.List.toArray() call java.util.List.toArray() call java.util.List.toArray() call java.util.List.toArray() new call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() + + call java.util.List.toArray() call java.util.List.toArray() call java.util.List.toArray() call java.util.List.toArray() call java.util.List.toArray() new call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() = call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() / decl_stmt int for = < call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() += decl_stmt java.lang.String = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) decl_stmt int = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) + decl_stmt org.apache.lucene.util.mutable.MutableValueInt = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() + / + + + + / + + + call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() += return String Map String public public throws decl_stmt java.lang.String = decl_stmt java.util.Map = + + + call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) decl_stmt java.lang.String = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) + return public public throws try + + + catch + + + finally SolrInputDocument decl byte int public static public static decl_stmt org.apache.solr.common.SolrInputDocument = if call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) if call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) if call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) * / if call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) * / if call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) if decl_stmt int = int decl_stmt byte = new call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) if call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) if call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) if call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) + / + + + + if call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) : if call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) return int decl List int public static public static decl_stmt java.util.List < = if return + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else decl_stmt int = - decl_stmt int = return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + + + + + public static public static return private static private static return String decl ArrayList int StringBuilder public static public static final final final < decl_stmt java.util.ArrayList < = new <> decl_stmt java.lang.StringBuilder final final = new decl_stmt int final final = for = < ++ decl_stmt java.lang.String = call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() if ! && == if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) || call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) || call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) || call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) = + + else = + + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) : return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()