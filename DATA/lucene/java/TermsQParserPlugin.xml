org.apache.solr.search java.util.Arrays import java.util.regex.Pattern import org.apache.lucene.index.Term import org.apache.lucene.queries.TermsQuery import org.apache.lucene.search.AutomatonQuery import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.DocValuesTermsQuery import org.apache.lucene.search.MatchNoDocsQuery import org.apache.lucene.search.Query import org.apache.lucene.search.TermQuery import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.automaton.Automata import org.apache.lucene.util.automaton.Automaton import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.request.SolrQueryRequest import org.apache.solr.schema.FieldType import class org.apache.solr.search.TermsQParserPlugin super super extends String String String return new new decl BooleanQuery decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() for : call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new return new call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() Automaton decl_stmt org.apache.lucene.util.automaton.Automaton = return new new new return new new BytesRefBuilder FieldType decl String String decl BytesRef String String String boolean Method public public return new public public throws decl_stmt java.lang.String = decl_stmt org.apache.solr.schema.FieldType = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt com.sun.jdi.Method = decl_stmt boolean final final = call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if = call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == return new decl_stmt java.lang.String final final final = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) : call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) - assert > decl_stmt org.apache.lucene.util.BytesRef = new decl_stmt org.apache.lucene.util.BytesRefBuilder = new for = < ++ decl_stmt java.lang.String = if != call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) else call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) = call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() return new call Method.makeFilter() call Method.makeFilter() call Method.makeFilter() call Method.makeFilter() call Method.makeFilter() BytesRefBuilder FieldType decl String String decl BytesRef String String String boolean Method public public throws decl_stmt java.lang.String = decl_stmt org.apache.solr.schema.FieldType = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt com.sun.jdi.Method = decl_stmt boolean final final = call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if = call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == return new decl_stmt java.lang.String final final final = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) : call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) - assert > decl_stmt org.apache.lucene.util.BytesRef = new decl_stmt org.apache.lucene.util.BytesRefBuilder = new for = < ++ decl_stmt java.lang.String = if != call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) else call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) = call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() return new call Method.makeFilter() call Method.makeFilter() call Method.makeFilter() call Method.makeFilter() call Method.makeFilter()