org.apache.solr.handler java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.LinkedHashMap import java.util.List import java.util.Locale import java.util.Map import java.util.Set import java.util.concurrent.Callable import java.util.concurrent.ExecutionException import java.util.concurrent.ExecutorService import java.util.concurrent.Future import java.util.concurrent.TimeUnit import java.util.concurrent.locks.Lock import java.util.concurrent.locks.ReentrantLock import com.google.common.collect.ImmutableSet import org.apache.solr.client.solrj.SolrClient import org.apache.solr.client.solrj.SolrRequest import org.apache.solr.client.solrj.SolrResponse import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.cloud.ZkController import org.apache.solr.cloud.ZkSolrResourceLoader import org.apache.solr.common.SolrException import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.MapSolrParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.ContentStream import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.StrUtils import org.apache.solr.common.util.Utils import org.apache.solr.core.ConfigOverlay import org.apache.solr.core.PluginInfo import org.apache.solr.core.RequestParams import org.apache.solr.core.SolrConfig import org.apache.solr.core.SolrCore import org.apache.solr.core.SolrResourceLoader import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.SolrRequestHandler import org.apache.solr.response.SolrQueryResponse import org.apache.solr.schema.SchemaManager import org.apache.solr.security.AuthorizationContext import org.apache.solr.security.PermissionNameProvider import org.apache.solr.util.CommandOperation import org.apache.solr.util.DefaultSolrThreadFactory import org.apache.solr.util.RTimer import org.apache.solr.util.plugin.SolrCoreAware import org.slf4j.Logger import org.slf4j.LoggerFactory import static static com.google.common.base.Strings.isNullOrEmpty import static static java.util.Collections.singletonList import static static org.apache.solr.common.util.Utils.makeMap import static static org.apache.solr.common.params.CoreAdminParams.NAME import static static org.apache.solr.common.util.StrUtils.formatString import static static org.apache.solr.core.ConfigOverlay.NOT_EDITABLE import static static org.apache.solr.core.ConfigOverlay.ZNODEVER import static static org.apache.solr.core.ConfigSetProperties.IMMUTABLE_CONFIGSET_ARG import static static org.apache.solr.core.SolrConfig.PluginOpts.REQUIRE_CLASS import static static org.apache.solr.core.SolrConfig.PluginOpts.REQUIRE_NAME import static static org.apache.solr.core.SolrConfig.PluginOpts.REQUIRE_NAME_IN_OVERLAY import static static org.apache.solr.schema.FieldType.CLASS_NAME import class org.apache.solr.handler.SolrConfigHandler super super extends super implements boolean String String decl Map String String String String decl Set String String boolean decl Set Lock Logger String String Command public public throws decl_stmt java.lang.String = decl_stmt org.apache.solr.search.grouping.Command = new if if || decl_stmt java.lang.String final final = + : throw new + try call Command.handlePOST() call Command.handlePOST() call Command.handlePOST() call Command.handlePOST() call Command.handlePOST() finally else call Command.handleGET() call Command.handleGET() call Command.handleGET() call Command.handleGET() call Command.handleGET() public public = NamedList Object public static public static decl_stmt org.apache.solr.common.util.NamedList = if == return decl_stmt java.lang.Object = call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) return != call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() : private private return boolean int decl RequestParams int RequestParams Map private private if == else if else if if == decl_stmt org.apache.solr.core.RequestParams = decl_stmt ParamSet = call org.apache.solr.core.RequestParams.getParams(String,String) call org.apache.solr.core.RequestParams.getParams(String,String) call org.apache.solr.core.RequestParams.getParams(String,String) call org.apache.solr.core.RequestParams.getParams(String,String) call org.apache.solr.core.RequestParams.getParams(String,String) decl_stmt java.util.Map = new <> call int.put() call int.put() call int.put() call int.put() call int.put() call org.apache.solr.core.RequestParams.getZnodeVersion() call org.apache.solr.core.RequestParams.getZnodeVersion() call org.apache.solr.core.RequestParams.getZnodeVersion() call org.apache.solr.core.RequestParams.getZnodeVersion() call org.apache.solr.core.RequestParams.getZnodeVersion() if != call int.put() call int.put() call int.put() call int.put() call int.put() call decl RequestParams.toMap() call decl RequestParams.toMap() call decl RequestParams.toMap() call decl RequestParams.toMap() call decl RequestParams.toMap() else else if decl_stmt boolean = decl_stmt int = - decl_stmt int = if > call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = else if != - call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = - = if > call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = else if != - call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if && instanceof new + public public if ! call java.util.concurrent.locks.Lock.tryLock() call java.util.concurrent.locks.Lock.tryLock() call java.util.concurrent.locks.Lock.tryLock() call java.util.concurrent.locks.Lock.tryLock() call java.util.concurrent.locks.Lock.tryLock() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() finally call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else decl_stmt java.util.Map < = call int.get() call int.get() call int.get() call int.get() call int.get() public public if ! call java.util.concurrent.locks.Lock.tryLock() call java.util.concurrent.locks.Lock.tryLock() call java.util.concurrent.locks.Lock.tryLock() call java.util.concurrent.locks.Lock.tryLock() call java.util.concurrent.locks.Lock.tryLock() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() finally call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() decl Map Map decl List private < private < decl_stmt java.util.Map < = decl_stmt java.util.Map = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = new <> decl_stmt java.util.List < = for : if if ! call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) return RequestParams ConfigOverlay decl ArrayList decl List private private throws decl_stmt java.util.List < = if == return try for decl_stmt java.util.ArrayList < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() try if > && decl_stmt org.apache.solr.core.RequestParams = else decl_stmt org.apache.solr.core.ConfigOverlay = break catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + catch decl Map decl RequestParams Map String SolrResourceLoader List decl ParamSet String decl List ZkSolrResourceLoader Long private private < for : switch case case decl_stmt java.util.Map < = if break for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.util.Map = decl_stmt java.lang.String = if continue = call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() decl_stmt java.lang.String = if != continue try = catch + continue if call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) continue decl_stmt ParamSet = if if == continue = call decl RequestParams.update() call decl RequestParams.update() call decl RequestParams.update() call decl RequestParams.update() call decl RequestParams.update() else decl_stmt java.lang.Long = == : call decl RequestParams.getVersion() call decl RequestParams.getVersion() call decl RequestParams.getVersion() call decl RequestParams.getVersion() call decl RequestParams.getVersion() + = break case decl_stmt java.util.List < = if break for : if == = decl_stmt java.util.List = if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return decl_stmt org.apache.solr.core.SolrResourceLoader = if instanceof decl_stmt org.apache.solr.cloud.ZkSolrResourceLoader = if else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt int = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else decl SolrConfig String decl List List String decl SolrPluginInfo SolrResourceLoader private private < throws for : switch case = break case = break case = break case = break default: decl_stmt java.util.List < = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() != else decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() && call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() decl_stmt SolrPluginInfo = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if = call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() else = call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) else decl_stmt java.util.List = if ! call decl SolrPluginInfo.isEmpty() call decl SolrPluginInfo.isEmpty() call decl SolrPluginInfo.isEmpty() call decl SolrPluginInfo.isEmpty() call decl SolrPluginInfo.isEmpty() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return decl_stmt org.apache.solr.core.SolrResourceLoader = if instanceof decl_stmt int = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) String private private decl_stmt java.lang.String = if return if return else return String String private private decl_stmt java.lang.String = decl_stmt java.lang.String = : if return if ! return if if + return else return else if return else + return decl List private private decl_stmt java.util.List < = for : if return return private private if == return if ! try new catch return return decl Map String Object private private decl_stmt java.util.Map < = if return for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = decl_stmt java.lang.Object = = return decl List private private decl_stmt java.util.List < = if return for : if ! else = return decl List private private decl_stmt java.util.List < = if return for : if ! else = return Class String decl Map String Object private private decl_stmt java.util.Map < = if return for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = decl_stmt java.lang.Object = decl_stmt java.lang.Class = if == continue if != if == = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() decl_stmt java.lang.String = if == try = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() catch call java.lang.Class.getSimpleName() call java.lang.Class.getSimpleName() call java.lang.Class.getSimpleName() call java.lang.Class.getSimpleName() call java.lang.Class.getSimpleName() continue else if == try = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() catch call java.lang.Class.getSimpleName() call java.lang.Class.getSimpleName() call java.lang.Class.getSimpleName() call java.lang.Class.getSimpleName() call java.lang.Class.getSimpleName() continue else if == try = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() catch call java.lang.Class.getSimpleName() call java.lang.Class.getSimpleName() call java.lang.Class.getSimpleName() call java.lang.Class.getSimpleName() call java.lang.Class.getSimpleName() continue = return char public static public static for = < ++ decl_stmt char = if >= && <= || >= && <= || >= && <= || == || == || == continue else return return decl Map SolrParams public static public static decl_stmt org.apache.solr.common.params.SolrParams = if call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() != return decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new public public if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return if return return public public return public public return public public return PerReplicaCallable Boolean int RTimer decl List decl List ExecutorService decl Future decl List String private static private static decl_stmt org.apache.solr.util.RTimer final final = new decl_stmt java.util.List < = new <> for : decl_stmt PerReplicaCallable = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.util.concurrent.ExecutorService = new try decl_stmt java.util.List < < = call java.util.concurrent.ExecutorService.invokeAll(Collection,long,TimeUnit) call java.util.concurrent.ExecutorService.invokeAll(Collection,long,TimeUnit) call java.util.concurrent.ExecutorService.invokeAll(Collection,long,TimeUnit) call java.util.concurrent.ExecutorService.invokeAll(Collection,long,TimeUnit) call java.util.concurrent.ExecutorService.invokeAll(Collection,long,TimeUnit) decl_stmt java.util.List < = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt java.lang.Boolean = decl_stmt java.util.concurrent.Future < = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() && ! call decl Future.isCancelled() call decl Future.isCancelled() call decl Future.isCancelled() call decl Future.isCancelled() call decl Future.isCancelled() try = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() catch if ! decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if != throw new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() finally call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() decl List decl Set decl Collection ClusterState Replica decl Map public static < public static < decl_stmt java.util.List < = new <> decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt java.util.Set < = call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() decl_stmt java.util.Collection < = call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) if != && call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() > for : decl_stmt java.util.Map < = if != for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt org.apache.solr.common.cloud.Replica = if call org.apache.solr.common.cloud.Replica.getState() call org.apache.solr.common.cloud.Replica.getState() call org.apache.solr.common.cloud.Replica.getState() call org.apache.solr.common.cloud.Replica.getState() call org.apache.solr.common.cloud.Replica.getState() == && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call org.apache.solr.common.cloud.Replica.getNodeName() call org.apache.solr.common.cloud.Replica.getNodeName() call org.apache.solr.common.cloud.Replica.getNodeName() call org.apache.solr.common.cloud.Replica.getNodeName() call org.apache.solr.common.cloud.Replica.getNodeName() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.solr.common.cloud.Replica.getCoreUrl() call org.apache.solr.common.cloud.Replica.getCoreUrl() call org.apache.solr.common.cloud.Replica.getCoreUrl() call org.apache.solr.common.cloud.Replica.getCoreUrl() call org.apache.solr.common.cloud.Replica.getCoreUrl() return public public switch case return case return default: return public public return new int Map long RTimer decl NamedList public public throws decl_stmt org.apache.solr.util.RTimer final final = new decl_stmt int = try = new while try decl_stmt long = long call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() / if >= return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.common.util.NamedList < = if != decl_stmt java.util.Map = call decl NamedList.get() call decl NamedList.get() call decl NamedList.get() call decl NamedList.get() call decl NamedList.get() if != = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) if != && >= break ++ call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch if instanceof break else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + return public < public < throws return protected protected return