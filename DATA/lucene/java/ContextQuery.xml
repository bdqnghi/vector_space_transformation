org.apache.lucene.search.suggest.document java.io.IOException import java.util.HashMap import java.util.Iterator import java.util.Map import java.util.TreeSet import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Weight import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.automaton.Automata import org.apache.lucene.util.automaton.Automaton import org.apache.lucene.util.automaton.Operations import org.apache.lucene.util.fst.Util import class org.apache.lucene.search.suggest.document.ContextQuery super super extends decl Map IntsRefBuilder boolean CompletionQuery public public public public public public if < throw new for = < ++ if == throw new + + + int + + + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new new public public = StringBuilder BytesRefBuilder ContextMetaData public public decl_stmt java.lang.StringBuilder = new decl_stmt org.apache.lucene.util.BytesRefBuilder = new for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt ContextMetaData = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() + call org.apache.lucene.search.suggest.document.CompletionQuery.toString(String) call org.apache.lucene.search.suggest.document.CompletionQuery.toString(String) call org.apache.lucene.search.suggest.document.CompletionQuery.toString(String) call org.apache.lucene.search.suggest.document.CompletionQuery.toString(String) call org.apache.lucene.search.suggest.document.CompletionQuery.toString(String) Automaton decl Iterator decl TreeSet decl Map decl int Automaton ContextMetaData Automaton CompletionWeight public public throws decl_stmt org.apache.lucene.search.suggest.document.CompletionWeight final final = call CompletionQuery.createWeight() call CompletionQuery.createWeight() call CompletionQuery.createWeight() call CompletionQuery.createWeight() call CompletionQuery.createWeight() decl_stmt org.apache.lucene.util.automaton.Automaton = decl_stmt org.apache.lucene.util.automaton.Automaton = call org.apache.lucene.search.suggest.document.CompletionWeight.getAutomaton() call org.apache.lucene.search.suggest.document.CompletionWeight.getAutomaton() call org.apache.lucene.search.suggest.document.CompletionWeight.getAutomaton() call org.apache.lucene.search.suggest.document.CompletionWeight.getAutomaton() call org.apache.lucene.search.suggest.document.CompletionWeight.getAutomaton() decl_stmt org.apache.lucene.util.automaton.Automaton = = decl_stmt java.util.Map final final final < = new <> call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() decl_stmt java.util.TreeSet final final final < = new <> for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt ContextMetaData = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() decl_stmt int = new call decl TreeSet.size() call decl TreeSet.size() call decl TreeSet.size() call decl TreeSet.size() call decl TreeSet.size() decl_stmt java.util.Iterator final final final < = call decl TreeSet.descendingIterator() call decl TreeSet.descendingIterator() call decl TreeSet.descendingIterator() call decl TreeSet.descendingIterator() call decl TreeSet.descendingIterator() for = call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() ++ = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() return new Automaton Automaton Automaton Automaton ContextMetaData IntsRef private static private static final final final < final final decl_stmt org.apache.lucene.util.automaton.Automaton final final = decl_stmt org.apache.lucene.util.automaton.Automaton final final = if || call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == return else decl_stmt org.apache.lucene.util.automaton.Automaton = for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt ContextMetaData final final = decl_stmt org.apache.lucene.util.IntsRef final final = decl_stmt org.apache.lucene.util.automaton.Automaton = if == = = if == = else = return IntsRef protected protected final final decl_stmt org.apache.lucene.util.IntsRef = for : if > continue = if = = return = = IntsRefBuilder private private decl_stmt org.apache.lucene.util.IntsRefBuilder = new for = < ++ if + == if > call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) = call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() else = = ++ assert < : if == ++ assert < : = - call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() return protected protected return protected protected return +