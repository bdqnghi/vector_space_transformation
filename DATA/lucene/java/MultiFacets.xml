org.apache.lucene.facet java.io.IOException import java.util.ArrayList import java.util.List import java.util.Map import class org.apache.lucene.facet.MultiFacets super super extends decl Map Facets Facets public public throws decl_stmt Facets = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == if == throw new + + = return call Facets.getTopChildren() call Facets.getTopChildren() call Facets.getTopChildren() call Facets.getTopChildren() call Facets.getTopChildren() Facets public public throws decl_stmt Facets = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == if == throw new + + = return call Facets.getSpecificValue() call Facets.getSpecificValue() call Facets.getSpecificValue() call Facets.getSpecificValue() call Facets.getSpecificValue() decl List public < public < throws decl_stmt java.util.List < = new < for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if != for : call Facets.getAllDims() call Facets.getAllDims() call Facets.getAllDims() call Facets.getAllDims() call Facets.getAllDims() if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return