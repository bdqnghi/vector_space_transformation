org.apache.lucene.index java.io.Closeable import java.io.IOException import java.io.PrintStream import java.nio.file.Path import java.nio.file.Paths import java.text.NumberFormat import java.util.ArrayList import java.util.Arrays import java.util.Deque import java.util.HashMap import java.util.LinkedList import java.util.List import java.util.Locale import java.util.Map import org.apache.lucene.codecs.Codec import org.apache.lucene.codecs.DocValuesProducer import org.apache.lucene.codecs.NormsProducer import org.apache.lucene.codecs.PointsReader import org.apache.lucene.codecs.PostingsFormat import org.apache.lucene.codecs.StoredFieldsReader import org.apache.lucene.codecs.TermVectorsReader import org.apache.lucene.document.Document import org.apache.lucene.document.DocumentStoredFieldVisitor import org.apache.lucene.index.CheckIndex.Status.DocValuesStatus import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.store.Directory import org.apache.lucene.store.FSDirectory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.Lock import org.apache.lucene.util.Accountables import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.CommandLineUtil import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LongBitSet import org.apache.lucene.util.StringHelper import org.apache.lucene.util.SuppressForbidden import org.apache.lucene.util.Version import org.apache.lucene.util.automaton.Automata import org.apache.lucene.util.automaton.CompiledAutomaton import class org.apache.lucene.index.CheckIndex super super implements Lock boolean boolean boolean boolean Directory PrintStream boolean boolean private private if throw new public public throws = public public = public public return public public = public public return public public return public public = public public = = public public private static private static if != public public throws return int Version Version String Status String Version long SegmentInfos long NumberFormat String decl SegmentInfoStatus int IndexInput decl Status SegmentReader decl String String String long SegmentCommitInfo int decl Map Codec int public public < throws decl_stmt long = decl_stmt java.text.NumberFormat = decl_stmt org.apache.lucene.index.SegmentInfos = decl_stmt Status = new = decl_stmt java.lang.String = call Directory.listAll() call Directory.listAll() call Directory.listAll() call Directory.listAll() call Directory.listAll() decl_stmt java.lang.String = if == throw new + + + try = catch if = if != return decl_stmt org.apache.lucene.util.Version = decl_stmt org.apache.lucene.util.Version = decl_stmt java.lang.String = for : decl_stmt org.apache.lucene.util.Version = if == = else if == || call decl SegmentInfoStatus.onOrAfter() call decl SegmentInfoStatus.onOrAfter() call decl SegmentInfoStatus.onOrAfter() call decl SegmentInfoStatus.onOrAfter() call decl SegmentInfoStatus.onOrAfter() == = if == || call decl SegmentInfoStatus.onOrAfter() call decl SegmentInfoStatus.onOrAfter() call decl SegmentInfoStatus.onOrAfter() call decl SegmentInfoStatus.onOrAfter() call decl SegmentInfoStatus.onOrAfter() = decl_stmt int final final = call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() call org.apache.lucene.index.SegmentInfos.size() decl_stmt java.lang.String final final = call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() decl_stmt org.apache.lucene.store.IndexInput = try = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() catch if if != = return try call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) catch if if != = return finally if != call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() = = = call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() decl_stmt java.lang.String if call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() > = + call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() call org.apache.lucene.index.SegmentInfos.getUserData() else = decl_stmt java.lang.String = if != if != = + + + + else = + else if != = call org.apache.lucene.util.Version.equals(Object) call org.apache.lucene.util.Version.equals(Object) call org.apache.lucene.util.Version.equals(Object) call org.apache.lucene.util.Version.equals(Object) call org.apache.lucene.util.Version.equals(Object) + : + + + + + + + + + + + call org.apache.lucene.index.SegmentInfos.getId() call org.apache.lucene.index.SegmentInfos.getId() call org.apache.lucene.index.SegmentInfos.getId() call org.apache.lucene.index.SegmentInfos.getId() call org.apache.lucene.index.SegmentInfos.getId() + if != = if != call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) for : call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) + call Status.segmentsChecked() call Status.segmentsChecked() call Status.segmentsChecked() call Status.segmentsChecked() call Status.segmentsChecked() call Status.segmentsChecked() call Status.segmentsChecked() call Status.segmentsChecked() call Status.segmentsChecked() = call org.apache.lucene.index.SegmentInfos.clone() call org.apache.lucene.index.SegmentInfos.clone() call org.apache.lucene.index.SegmentInfos.clone() call org.apache.lucene.index.SegmentInfos.clone() call org.apache.lucene.index.SegmentInfos.clone() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() = - for = < ++ decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) call org.apache.lucene.index.SegmentInfos.info(int) decl_stmt int = call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() if > = if != && ! continue decl_stmt SegmentInfoStatus = new call Status.segmentInfos() call Status.segmentInfos() call Status.segmentInfos() call Status.segmentInfos() call Status.segmentInfos() call Status.segmentInfos() call Status.segmentInfos() call Status.segmentInfos() call Status.segmentInfos() + + + + + + + + call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() = = call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() decl_stmt org.apache.lucene.util.Version final final = call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() if call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() <= throw new + call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() decl_stmt int = call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() decl_stmt org.apache.lucene.index.SegmentReader = try + == : + call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() decl_stmt org.apache.lucene.codecs.Codec final final = call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() + = + call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() = call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() + call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() = call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() = call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() / * + call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) call java.text.NumberFormat.format(double) decl_stmt java.util.Map < = call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() = if call Codec.size() call Codec.size() call Codec.size() call Codec.size() call Codec.size() > + if ! call org.apache.lucene.index.SegmentCommitInfo.hasDeletions() call org.apache.lucene.index.SegmentCommitInfo.hasDeletions() call org.apache.lucene.index.SegmentCommitInfo.hasDeletions() call org.apache.lucene.index.SegmentCommitInfo.hasDeletions() call org.apache.lucene.index.SegmentCommitInfo.hasDeletions() = else + call org.apache.lucene.index.SegmentCommitInfo.getDelGen() call org.apache.lucene.index.SegmentCommitInfo.getDelGen() call org.apache.lucene.index.SegmentCommitInfo.getDelGen() call org.apache.lucene.index.SegmentCommitInfo.getDelGen() call org.apache.lucene.index.SegmentCommitInfo.getDelGen() + = = call org.apache.lucene.index.SegmentCommitInfo.getDelGen() call org.apache.lucene.index.SegmentCommitInfo.getDelGen() call org.apache.lucene.index.SegmentCommitInfo.getDelGen() call org.apache.lucene.index.SegmentCommitInfo.getDelGen() call org.apache.lucene.index.SegmentCommitInfo.getDelGen() decl_stmt long = if != call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) = new - = decl_stmt long = if != call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call int.checkIntegrity() call int.checkIntegrity() call int.checkIntegrity() call int.checkIntegrity() call int.checkIntegrity() - if call int.maxDoc() call int.maxDoc() call int.maxDoc() call int.maxDoc() call int.maxDoc() != call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() throw new + call int.maxDoc() call int.maxDoc() call int.maxDoc() call int.maxDoc() call int.maxDoc() + + call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() decl_stmt int final final = call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() = if call int.hasDeletions() call int.hasDeletions() call int.hasDeletions() call int.hasDeletions() call int.hasDeletions() if call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() != call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() - call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() throw new + call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() - call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() + + call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() if call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() - call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() > call int.maxDoc() call int.maxDoc() call int.maxDoc() call int.maxDoc() call int.maxDoc() throw new + call int.maxDoc() call int.maxDoc() call int.maxDoc() call int.maxDoc() call int.maxDoc() + + call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() - call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() if call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() - call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() != call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() throw new + call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() + + call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() - call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() else if call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() != throw new + call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() call org.apache.lucene.index.SegmentCommitInfo.getDelCount() + + call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() - call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() call int.numDocs() if == = = = = = = = = if != throw new else if != throw new else if != throw new else if != throw new else if != throw new else if != throw new else if != throw new if catch if decl_stmt java.lang.String = + + if != += ++ continue finally if != call int.close() call int.close() call int.close() call int.close() call int.close() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call org.apache.lucene.index.SegmentCommitInfo.clone() call org.apache.lucene.index.SegmentCommitInfo.clone() call org.apache.lucene.index.SegmentCommitInfo.clone() call org.apache.lucene.index.SegmentCommitInfo.clone() call org.apache.lucene.index.SegmentCommitInfo.clone() if == = else + + + + if ! = < = = + + + + if - return decl Status Bits long decl LiveDocStatus int public static public static throws decl_stmt long = decl_stmt LiveDocStatus final final final final final = new try if != call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) decl_stmt int final final = if decl_stmt org.apache.lucene.util.Bits = if == throw new else decl_stmt int = for = < call int.length() call int.length() call int.length() call int.length() call int.length() ++ if call int.get() call int.get() call int.get() call int.get() call int.get() ++ if != throw new + + + = - else decl_stmt org.apache.lucene.util.Bits = if != for = < call int.length() call int.length() call int.length() call int.length() call int.length() ++ if ! call int.get() call int.get() call int.get() call int.get() call int.get() throw new + + - catch if + + = if != return decl Status decl FieldInfoStatus long public static public static throws decl_stmt long = decl_stmt FieldInfoStatus final final final final final = new try if != call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) decl_stmt org.apache.lucene.index.FieldInfos = for : call decl FieldInfoStatus.size() call decl FieldInfoStatus.size() call decl FieldInfoStatus.size() call decl FieldInfoStatus.size() call decl FieldInfoStatus.size() - = call decl FieldInfoStatus.size() call decl FieldInfoStatus.size() call decl FieldInfoStatus.size() call decl FieldInfoStatus.size() call decl FieldInfoStatus.size() catch if + + = if != return decl Status long decl FieldNormStatus public static public static throws decl_stmt long = decl_stmt FieldNormStatus final final final final final = new try if != call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) decl_stmt org.apache.lucene.codecs.NormsProducer = if != = call decl FieldNormStatus.getMergeInstance() call decl FieldNormStatus.getMergeInstance() call decl FieldNormStatus.getMergeInstance() call decl FieldNormStatus.getMergeInstance() call decl FieldNormStatus.getMergeInstance() for : if call decl FieldNormStatus.getNorms() call decl FieldNormStatus.getNorms() call decl FieldNormStatus.getNorms() call decl FieldNormStatus.getNorms() call decl FieldNormStatus.getNorms() new ++ - catch if + + = if != return BytesRef int int BytesRefBuilder long PostingsEnum int private static private static throws decl_stmt long = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.util.BytesRefBuilder = while decl_stmt org.apache.lucene.util.BytesRef if || != = else = if == if == throw new + + + return assert call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() if == = new call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) else if call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() >= throw new + call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() + + call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) if call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() < throw new + + + if == decl_stmt int = call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() if == return else if > throw new + + + = decl_stmt int = - while decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() if == break if <= throw new + + + + + if >= throw new + + + + + = ++ decl TermsEnum long decl SeekStatus TermsEnum private static private static throws assert <= decl_stmt org.apache.lucene.index.TermsEnum = decl_stmt SeekStatus = call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) if != throw new + + + decl_stmt long = decl_stmt long = new if > throw new + + + + + if == throw new + + + + + + + return != BytesRef BytesRef TermsEnum decl Deque BytesRefBuilder FixedBitSet BytesRef double long long FixedBitSet private static private static throws decl_stmt double = decl_stmt org.apache.lucene.util.FixedBitSet = new decl_stmt org.apache.lucene.util.FixedBitSet = new while >= decl_stmt org.apache.lucene.index.TermsEnum = decl_stmt long = decl_stmt java.util.Deque < = new <> decl_stmt long = decl_stmt org.apache.lucene.util.BytesRefBuilder = while decl_stmt org.apache.lucene.util.BytesRef = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == break if >= + / call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() = if call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() == decl_stmt org.apache.lucene.util.BytesRef = call decl Deque.removeFirst() call decl Deque.removeFirst() call decl Deque.removeFirst() call decl Deque.removeFirst() call decl Deque.removeFirst() decl_stmt org.apache.lucene.util.BytesRef = call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() call decl Deque.getLast() ++ if == = new call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) else if call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() >= throw new + call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() + + call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) if != && call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() == decl_stmt org.apache.lucene.util.BytesRef = call decl Deque.removeFirst() call decl Deque.removeFirst() call decl Deque.removeFirst() call decl Deque.removeFirst() call decl Deque.removeFirst() decl_stmt org.apache.lucene.util.BytesRef = call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() *= int long PostingsEnum int int int BytesRef boolean boolean int BytesRefBuilder int int int long boolean long BytesRef Terms long int long boolean int TermsEnum int int long decl Status FieldInfo long boolean int boolean FixedBitSet int BytesRef String decl BytesRef int int decl TermIndexStatus boolean int int boolean int long long long long long PostingsEnum long Terms boolean boolean int private static private static throws decl_stmt long if = else = decl_stmt TermIndexStatus final final final final final = new decl_stmt int = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt java.lang.String = for : if != && <= throw new + + + = decl_stmt org.apache.lucene.index.FieldInfo = if == throw new + if call String.getIndexOptions() call String.getIndexOptions() call String.getIndexOptions() call String.getIndexOptions() call String.getIndexOptions() == throw new + ++ decl_stmt org.apache.lucene.index.Terms final final = if == continue decl_stmt boolean final final = call FieldInfo.hasFreqs() call FieldInfo.hasFreqs() call FieldInfo.hasFreqs() call FieldInfo.hasFreqs() call FieldInfo.hasFreqs() decl_stmt boolean final final = call FieldInfo.hasPositions() call FieldInfo.hasPositions() call FieldInfo.hasPositions() call FieldInfo.hasPositions() call FieldInfo.hasPositions() decl_stmt boolean final final = call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() decl_stmt boolean final final = call FieldInfo.hasOffsets() call FieldInfo.hasOffsets() call FieldInfo.hasOffsets() call FieldInfo.hasOffsets() call FieldInfo.hasOffsets() decl_stmt org.apache.lucene.util.BytesRef decl_stmt org.apache.lucene.util.BytesRef if = = else decl_stmt org.apache.lucene.util.BytesRef = call FieldInfo.getMin() call FieldInfo.getMin() call FieldInfo.getMin() call FieldInfo.getMin() call FieldInfo.getMin() if != assert call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() = else = = call FieldInfo.getMax() call FieldInfo.getMax() call FieldInfo.getMax() call FieldInfo.getMax() call FieldInfo.getMax() if != assert call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() = if == throw new + + else = if != throw new + + decl_stmt boolean final final = || call String.getIndexOptions() call String.getIndexOptions() call String.getIndexOptions() call String.getIndexOptions() call String.getIndexOptions() >= if != throw new + + + + + if == if call FieldInfo.getSumTotalTermFreq() call FieldInfo.getSumTotalTermFreq() call FieldInfo.getSumTotalTermFreq() call FieldInfo.getSumTotalTermFreq() call FieldInfo.getSumTotalTermFreq() != - throw new + + + call FieldInfo.getSumTotalTermFreq() call FieldInfo.getSumTotalTermFreq() call FieldInfo.getSumTotalTermFreq() call FieldInfo.getSumTotalTermFreq() call FieldInfo.getSumTotalTermFreq() + if ! decl_stmt boolean final final = call String.getIndexOptions() call String.getIndexOptions() call String.getIndexOptions() call String.getIndexOptions() call String.getIndexOptions() >= if != throw new + + + + + decl_stmt boolean final final = call String.hasPayloads() call String.hasPayloads() call String.hasPayloads() call String.hasPayloads() call String.hasPayloads() if != throw new + + + + + decl_stmt boolean final final = call String.getIndexOptions() call String.getIndexOptions() call String.getIndexOptions() call String.getIndexOptions() call String.getIndexOptions() >= if != throw new + + + + + decl_stmt org.apache.lucene.index.TermsEnum final final = call FieldInfo.iterator() call FieldInfo.iterator() call FieldInfo.iterator() call FieldInfo.iterator() call FieldInfo.iterator() decl_stmt boolean = decl_stmt long final final = + decl_stmt org.apache.lucene.util.BytesRefBuilder = decl_stmt long = decl_stmt long = decl_stmt org.apache.lucene.util.FixedBitSet = new while decl_stmt org.apache.lucene.util.BytesRef final final = call boolean.next() call boolean.next() call boolean.next() call boolean.next() call boolean.next() if == break assert call FixedBitSet.isValid() call FixedBitSet.isValid() call FixedBitSet.isValid() call FixedBitSet.isValid() call FixedBitSet.isValid() if == = new call long.copyBytes() call long.copyBytes() call long.copyBytes() call long.copyBytes() call long.copyBytes() else if call long.get() call long.get() call long.get() call long.get() call long.get() >= throw new + call long.get() call long.get() call long.get() call long.get() call long.get() + + call long.copyBytes() call long.copyBytes() call long.copyBytes() call long.copyBytes() call long.copyBytes() if == if == assert == throw new + + + + + if call FixedBitSet.compareTo() call FixedBitSet.compareTo() call FixedBitSet.compareTo() call FixedBitSet.compareTo() call FixedBitSet.compareTo() < throw new + + + + + if call FixedBitSet.compareTo() call FixedBitSet.compareTo() call FixedBitSet.compareTo() call FixedBitSet.compareTo() call FixedBitSet.compareTo() > throw new + + + + + decl_stmt int final final = call boolean.docFreq() call boolean.docFreq() call boolean.docFreq() call boolean.docFreq() call boolean.docFreq() if <= throw new + + += = call boolean.postings() call boolean.postings() call boolean.postings() call boolean.postings() call boolean.postings() if == if call boolean.totalTermFreq() call boolean.totalTermFreq() call boolean.totalTermFreq() call boolean.totalTermFreq() call boolean.totalTermFreq() != - throw new + + + call boolean.totalTermFreq() call boolean.totalTermFreq() call boolean.totalTermFreq() call boolean.totalTermFreq() call boolean.totalTermFreq() + if decl_stmt long = - try = call boolean.ord() call boolean.ord() call boolean.ord() call boolean.ord() call boolean.ord() catch = if decl_stmt long final final = + - if != throw new + + + decl_stmt int = - decl_stmt int = decl_stmt boolean = decl_stmt long = while decl_stmt int final final = call int.nextDoc() call int.nextDoc() call int.nextDoc() call int.nextDoc() call int.nextDoc() if == break call long.set() call long.set() call long.set() call long.set() call long.set() decl_stmt int = - if = call int.freq() call int.freq() call int.freq() call int.freq() call int.freq() if <= throw new + + + + + + += else if call int.freq() call int.freq() call int.freq() call int.freq() call int.freq() != throw new + + + + + + if == || = ++ if >= += ++ if <= throw new + + + + + if >= throw new + + + + + = decl_stmt int = - decl_stmt int = if for = < ++ decl_stmt int final final = call int.nextPosition() call int.nextPosition() call int.nextPosition() call int.nextPosition() call int.nextPosition() if < throw new + + + + + + if > throw new + + + + + + + if < throw new + + + + + + + = decl_stmt org.apache.lucene.util.BytesRef = call int.getPayload() call int.getPayload() call int.getPayload() call int.getPayload() call int.getPayload() if != assert call int.isValid() call int.isValid() call int.isValid() call int.isValid() call int.isValid() if != && < throw new + + + + + + + if decl_stmt int = call int.startOffset() call int.startOffset() call int.startOffset() call int.startOffset() call int.startOffset() decl_stmt int = call int.endOffset() call int.endOffset() call int.endOffset() call int.endOffset() call int.endOffset() if ! if < throw new + + + + + + + + if < throw new + + + + + + + + + if < throw new + + + + + + + + if < throw new + + + + + + + + + = if ++ else ++ decl_stmt long final final = call boolean.totalTermFreq() call boolean.totalTermFreq() call boolean.totalTermFreq() call boolean.totalTermFreq() call boolean.totalTermFreq() decl_stmt boolean final final = && != - if != throw new + + + + + if if <= throw new + + += if != throw new + + + + + if for = < ++ decl_stmt int final final = + * long / = call boolean.postings() call boolean.postings() call boolean.postings() call boolean.postings() call boolean.postings() decl_stmt int final final = call int.advance() call int.advance() call int.advance() call int.advance() call int.advance() if == break else if < throw new + + + + + decl_stmt int final final = call int.freq() call int.freq() call int.freq() call int.freq() call int.freq() if <= throw new + + decl_stmt int = - decl_stmt int = for = < ++ decl_stmt int final final = call int.nextPosition() call int.nextPosition() call int.nextPosition() call int.nextPosition() call int.nextPosition() if < throw new + + if < throw new + + + = if decl_stmt int = call int.startOffset() call int.startOffset() call int.startOffset() call int.startOffset() call int.startOffset() decl_stmt int = call int.endOffset() call int.endOffset() call int.endOffset() call int.endOffset() call int.endOffset() if ! if < throw new + + + + + + + + if < throw new + + + + + + + + + if < throw new + + + + + + + + if < throw new + + + + + + + + + = decl_stmt int final final = call int.nextDoc() call int.nextDoc() call int.nextDoc() call int.nextDoc() call int.nextDoc() if == break if <= throw new + + + + + + + if break else for = < ++ decl_stmt int final final = + * long / = call boolean.postings() call boolean.postings() call boolean.postings() call boolean.postings() call boolean.postings() decl_stmt int final final = call int.advance() call int.advance() call int.advance() call int.advance() call int.advance() if == break else if < throw new + + + + + decl_stmt int final final = call int.nextDoc() call int.nextDoc() call int.nextDoc() call int.nextDoc() call int.nextDoc() if == break if <= throw new + + + + + + + if break if != && + == throw new + + + decl_stmt org.apache.lucene.index.Terms final final = if == else decl_stmt long = + - if && == decl_stmt java.lang.Object final final = call int.getStats() call int.getStats() call int.getStats() call int.getStats() call int.getStats() assert != if == = new <> call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() if != decl_stmt long final final = if != - && != throw new + + + + + if != decl_stmt long final final = if != - && != throw new + + + + + decl_stmt int final final = call int.getDocCount() call int.getDocCount() call int.getDocCount() call int.getDocCount() call int.getDocCount() if != - && call long.cardinality() call long.cardinality() call long.cardinality() call long.cardinality() call long.cardinality() != throw new + + + + + call long.cardinality() call long.cardinality() call long.cardinality() call long.cardinality() call long.cardinality() if != if call boolean.seekCeil() call boolean.seekCeil() call boolean.seekCeil() call boolean.seekCeil() call boolean.seekCeil() call long.get() call long.get() call long.get() call long.get() call long.get() != throw new + call long.get() call long.get() call long.get() call long.get() call long.get() + if call boolean.term() call boolean.term() call boolean.term() call boolean.term() call boolean.term() call long.get() call long.get() call long.get() call long.get() call long.get() == throw new + call long.get() call long.get() call long.get() call long.get() call long.get() + + call boolean.term() call boolean.term() call boolean.term() call boolean.term() call boolean.term() decl_stmt int = call boolean.docFreq() call boolean.docFreq() call boolean.docFreq() call boolean.docFreq() call boolean.docFreq() decl_stmt org.apache.lucene.index.PostingsEnum = call boolean.postings() call boolean.postings() call boolean.postings() call boolean.postings() call boolean.postings() decl_stmt int = while call int.nextDoc() call int.nextDoc() call int.nextDoc() call int.nextDoc() call int.nextDoc() != ++ if != throw new + call long.get() call long.get() call long.get() call long.get() call long.get() + + + + decl_stmt long = - if > = if != - && != throw new + + + if && - > decl_stmt int = int if > decl_stmt org.apache.lucene.util.BytesRef = new for = - >= -- decl_stmt long = * / call boolean.seekExact() call boolean.seekExact() call boolean.seekExact() call boolean.seekExact() call boolean.seekExact() decl_stmt long = call boolean.ord() call boolean.ord() call boolean.ord() call boolean.ord() call boolean.ord() if != throw new + + + = call boolean.term() call boolean.term() call boolean.term() call boolean.term() call boolean.term() for = - >= -- if call boolean.seekCeil() call boolean.seekCeil() call boolean.seekCeil() call boolean.seekCeil() call boolean.seekCeil() != throw new + + if call boolean.term() call boolean.term() call boolean.term() call boolean.term() call boolean.term() == throw new + + + call boolean.term() call boolean.term() call boolean.term() call boolean.term() call boolean.term() = call boolean.postings() call boolean.postings() call boolean.postings() call boolean.postings() call boolean.postings() if == throw new + decl_stmt int = if != - if < throw new + if != throw new + + + if - if && != && != && > for < : call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call decl Status.blockTreeStats() call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) + + call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) + return public static public static throws return decl Status int decl TermIndexStatus Fields public static public static throws decl_stmt TermIndexStatus decl_stmt int final final = try if != call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) decl_stmt Fields final final = decl_stmt org.apache.lucene.index.FieldInfos final final = = catch if + = new = if != return decl Status decl byte long decl byte FieldInfos decl byte PointsReader decl long int FixedBitSet BytesRef long decl PointsStatus int decl byte int decl byte int int int public static public static throws if != call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) decl_stmt long = decl_stmt org.apache.lucene.index.FieldInfos = decl_stmt PointsStatus = new try if call org.apache.lucene.index.FieldInfos.hasPointValues() call org.apache.lucene.index.FieldInfos.hasPointValues() call org.apache.lucene.index.FieldInfos.hasPointValues() call org.apache.lucene.index.FieldInfos.hasPointValues() call org.apache.lucene.index.FieldInfos.hasPointValues() decl_stmt org.apache.lucene.codecs.PointsReader = if == throw new for : if > decl_stmt org.apache.lucene.util.FixedBitSet = new ++ decl_stmt int = decl_stmt int = decl_stmt int = * decl_stmt byte = new decl_stmt byte = new decl_stmt org.apache.lucene.util.BytesRef = new = decl_stmt byte = new decl_stmt long = new decl_stmt byte = call decl PointsStatus.getMinPackedValue() call decl PointsStatus.getMinPackedValue() call decl PointsStatus.getMinPackedValue() call decl PointsStatus.getMinPackedValue() call decl PointsStatus.getMinPackedValue() decl_stmt long = call decl PointsStatus.size() call decl PointsStatus.size() call decl PointsStatus.size() call decl PointsStatus.size() call decl PointsStatus.size() decl_stmt int = call decl PointsStatus.getDocCount() call decl PointsStatus.getDocCount() call decl PointsStatus.getDocCount() call decl PointsStatus.getDocCount() call decl PointsStatus.getDocCount() if > throw new + + + + + if > throw new + + + + + if == if != throw new + + + else if != throw new + + + + + decl_stmt byte = call decl PointsStatus.getMaxPackedValue() call decl PointsStatus.getMaxPackedValue() call decl PointsStatus.getMaxPackedValue() call decl PointsStatus.getMaxPackedValue() call decl PointsStatus.getMaxPackedValue() if == if != throw new + + + else if != throw new + + + + + call decl PointsStatus.intersect() call decl PointsStatus.intersect() call decl PointsStatus.intersect() call decl PointsStatus.intersect() call decl PointsStatus.intersect() new decl_stmt int private = - public public throw new + public public ++ call PointsReader.set() call PointsReader.set() call PointsReader.set() call PointsReader.set() call PointsReader.set() for = < ++ decl_stmt int = * if < throw new + + + + + + + + + if > throw new + + + + + + + + + if == decl_stmt int = if > throw new + + + + + else if == if < throw new + + + = ++ public public - - for = < ++ decl_stmt int = * if < throw new + + + + + if < throw new + + + + + if > throw new + + + + + if > throw new + + + + + return private private if == throw new + + if != throw new + + + + + + if != throw new + + + + + if call PointsReader.cardinality() call PointsReader.cardinality() call PointsReader.cardinality() call PointsReader.cardinality() call PointsReader.cardinality() != throw new + + + + + call PointsReader.cardinality() call PointsReader.cardinality() call PointsReader.cardinality() call PointsReader.cardinality() call PointsReader.cardinality() - catch if + = if != return public public throw new + int int public public ++ for = < ++ decl_stmt int = * if < throw new + + + + + + + + + if > throw new + + + + + + + + + if == decl_stmt int = if > throw new + + + + + else if == if < throw new + + + = ++ int public public - - for = < ++ decl_stmt int = * if < throw new + + + + + if < throw new + + + + + if > throw new + + + + + if > throw new + + + + + return private private if == throw new + + if != throw new + + + + + + decl Status long decl StoredFieldStatus StoredFieldsReader DocumentStoredFieldVisitor Bits public static public static throws decl_stmt long = decl_stmt StoredFieldStatus final final final final final = new try if != call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) decl_stmt org.apache.lucene.util.Bits final final = decl_stmt org.apache.lucene.codecs.StoredFieldsReader = for = < ++ decl_stmt org.apache.lucene.document.DocumentStoredFieldVisitor = new call Bits.visitDocument() call Bits.visitDocument() call Bits.visitDocument() call Bits.visitDocument() call Bits.visitDocument() decl_stmt org.apache.lucene.document.Document = call StoredFieldsReader.getDocument() call StoredFieldsReader.getDocument() call StoredFieldsReader.getDocument() call StoredFieldsReader.getDocument() call StoredFieldsReader.getDocument() if == || call decl StoredFieldStatus.get() call decl StoredFieldStatus.get() call decl StoredFieldStatus.get() call decl StoredFieldStatus.get() call decl StoredFieldStatus.get() ++ += call DocumentStoredFieldVisitor.getFields() call DocumentStoredFieldVisitor.getFields() call DocumentStoredFieldVisitor.getFields() call DocumentStoredFieldVisitor.getFields() call DocumentStoredFieldVisitor.getFields() if != throw new + + + + float / - catch if + + = if != return decl Status long decl DocValuesStatus public static public static throws decl_stmt long = decl_stmt DocValuesStatus final final final final final = new try if != call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) decl_stmt org.apache.lucene.codecs.DocValuesProducer = if != = call decl DocValuesStatus.getMergeInstance() call decl DocValuesStatus.getMergeInstance() call decl DocValuesStatus.getMergeInstance() call decl DocValuesStatus.getMergeInstance() call decl DocValuesStatus.getMergeInstance() for : if != ++ - catch if + + = if != return BytesRef private static private static for = < ++ decl_stmt org.apache.lucene.util.BytesRef final final = assert call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() if == && > throw new + + + + + int int BytesRef FixedBitSet BytesRef int private static private static decl_stmt int final final = - decl_stmt org.apache.lucene.util.FixedBitSet = new decl_stmt int = - for = < ++ decl_stmt int = if == - if throw new + + + else if < - || - || throw new + else if ! throw new + + + + + = call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) if != throw new + + + + + if call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() != throw new + + + + + call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() decl_stmt org.apache.lucene.util.BytesRef = for = <= ++ decl_stmt org.apache.lucene.util.BytesRef final final = assert call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() if != if call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() <= throw new + + + + + = long long BytesRef LongBitSet int BytesRef long long long long long private static private static decl_stmt long final final = - decl_stmt org.apache.lucene.util.LongBitSet = new decl_stmt long = - for = < ++ decl_stmt long = - decl_stmt long if decl_stmt int = while = != if <= throw new + + + + + if < || || throw new + if instanceof decl_stmt long = if != throw new + + + + + + + = = call org.apache.lucene.util.LongBitSet.set(long) call org.apache.lucene.util.LongBitSet.set(long) call org.apache.lucene.util.LongBitSet.set(long) call org.apache.lucene.util.LongBitSet.set(long) call org.apache.lucene.util.LongBitSet.set(long) ++ if == throw new + + + if instanceof decl_stmt long = if != throw new + + + + + else decl_stmt long = if != throw new + + + + + if instanceof decl_stmt long = if != throw new + + + + + if != throw new + + + + + if call LongBitSet.cardinality() call LongBitSet.cardinality() call LongBitSet.cardinality() call LongBitSet.cardinality() call LongBitSet.cardinality() != throw new + + + + + call LongBitSet.cardinality() call LongBitSet.cardinality() call LongBitSet.cardinality() call LongBitSet.cardinality() call LongBitSet.cardinality() decl_stmt org.apache.lucene.util.BytesRef = for = <= ++ decl_stmt org.apache.lucene.util.BytesRef final final = assert call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() call org.apache.lucene.util.BytesRef.isValid() if != if call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() <= throw new + + + + + = int long long private static private static for = < ++ decl_stmt int = if if == throw new + + + decl_stmt long = for = < ++ decl_stmt long = if < throw new + + + + + = else if != throw new + + + + + long private static private static for = < ++ decl_stmt long = if == && != throw new + + + + + Bits private static private static throws decl_stmt org.apache.lucene.util.Bits = if == throw new + else if call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() != throw new + + call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() + + switch case ++ break case ++ break case ++ break case ++ break case ++ break default: throw new public static public static throws return decl TermVectorStatus int BytesRef Terms int BytesRef Bits int long boolean BytesRef Fields int boolean decl Status FieldInfo int int int boolean TermsEnum TermVectorsReader TermsEnum boolean PostingsEnum int Terms FieldInfos PostingsEnum boolean int Fields public static public static throws decl_stmt long = decl_stmt TermVectorStatus final final final final final = new decl_stmt org.apache.lucene.index.FieldInfos final final = try if != call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) call java.io.PrintStream.print(float) decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.util.Bits final final = decl_stmt Fields final final if = else = decl_stmt org.apache.lucene.codecs.TermVectorsReader = if != = call Fields.getMergeInstance() call Fields.getMergeInstance() call Fields.getMergeInstance() call Fields.getMergeInstance() call Fields.getMergeInstance() for = < ++ decl_stmt Fields = call Fields.get() call Fields.get() call Fields.get() call Fields.get() call Fields.get() if != decl_stmt boolean final final = == || call PostingsEnum.get() call PostingsEnum.get() call PostingsEnum.get() call PostingsEnum.get() call PostingsEnum.get() if ++ for : if ++ decl_stmt org.apache.lucene.index.FieldInfo final final = call decl TermVectorStatus.fieldInfo() call decl TermVectorStatus.fieldInfo() call decl TermVectorStatus.fieldInfo() call decl TermVectorStatus.fieldInfo() call decl TermVectorStatus.fieldInfo() if ! call boolean.hasVectors() call boolean.hasVectors() call boolean.hasVectors() call boolean.hasVectors() call boolean.hasVectors() throw new + + + + if decl_stmt org.apache.lucene.index.Terms = call TermVectorsReader.terms() call TermVectorsReader.terms() call TermVectorsReader.terms() call TermVectorsReader.terms() call TermVectorsReader.terms() decl_stmt org.apache.lucene.index.TermsEnum = call FieldInfo.iterator() call FieldInfo.iterator() call FieldInfo.iterator() call FieldInfo.iterator() call FieldInfo.iterator() decl_stmt boolean final final = call boolean.getIndexOptions() call boolean.getIndexOptions() call boolean.getIndexOptions() call boolean.getIndexOptions() call boolean.getIndexOptions() >= decl_stmt boolean final final = call boolean.hasPayloads() call boolean.hasPayloads() call boolean.hasPayloads() call boolean.hasPayloads() call boolean.hasPayloads() decl_stmt boolean final final = call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() decl_stmt org.apache.lucene.index.Terms = call Bits.terms() call Bits.terms() call Bits.terms() call Bits.terms() call Bits.terms() if == throw new + + + decl_stmt org.apache.lucene.index.TermsEnum = call boolean.iterator() call boolean.iterator() call boolean.iterator() call boolean.iterator() call boolean.iterator() decl_stmt boolean final final = call FieldInfo.hasOffsets() call FieldInfo.hasOffsets() call FieldInfo.hasOffsets() call FieldInfo.hasOffsets() call FieldInfo.hasOffsets() || call FieldInfo.hasPositions() call FieldInfo.hasPositions() call FieldInfo.hasPositions() call FieldInfo.hasPositions() call FieldInfo.hasPositions() decl_stmt org.apache.lucene.util.BytesRef = while = call Terms.next() call Terms.next() call Terms.next() call Terms.next() call Terms.next() != = call Terms.postings() call Terms.postings() call Terms.postings() call Terms.postings() call Terms.postings() assert != if ! call Terms.seekExact() call Terms.seekExact() call Terms.seekExact() call Terms.seekExact() call Terms.seekExact() throw new + + + + + = call Terms.postings() call Terms.postings() call Terms.postings() call Terms.postings() call Terms.postings() assert != decl_stmt int final final = call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() if != throw new + + + + + + + + decl_stmt int final final = call FieldInfos.nextDoc() call FieldInfos.nextDoc() call FieldInfos.nextDoc() call FieldInfos.nextDoc() call FieldInfos.nextDoc() if != throw new + + + if decl_stmt int final final = call FieldInfos.freq() call FieldInfos.freq() call FieldInfos.freq() call FieldInfos.freq() call FieldInfos.freq() if && call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() != throw new + + + + + + + + + call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() if for = < ++ decl_stmt int = call FieldInfos.nextPosition() call FieldInfos.nextPosition() call FieldInfos.nextPosition() call FieldInfos.nextPosition() call FieldInfos.nextPosition() if call boolean.hasPositions() call boolean.hasPositions() call boolean.hasPositions() call boolean.hasPositions() call boolean.hasPositions() decl_stmt int = call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() if call FieldInfo.hasPositions() call FieldInfo.hasPositions() call FieldInfo.hasPositions() call FieldInfo.hasPositions() call FieldInfo.hasPositions() && != throw new + + + + + + + + + decl_stmt int final final = call FieldInfos.startOffset() call FieldInfos.startOffset() call FieldInfos.startOffset() call FieldInfos.startOffset() call FieldInfos.startOffset() decl_stmt int final final = call FieldInfos.endOffset() call FieldInfos.endOffset() call FieldInfos.endOffset() call FieldInfos.endOffset() call FieldInfos.endOffset() if != - && != - && call boolean.hasOffsets() call boolean.hasOffsets() call boolean.hasOffsets() call boolean.hasOffsets() call boolean.hasOffsets() decl_stmt int = call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() decl_stmt int = call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() if != throw new + + + + + + + + + if != throw new + + + + + + + + + decl_stmt org.apache.lucene.util.BytesRef = call FieldInfos.getPayload() call FieldInfos.getPayload() call FieldInfos.getPayload() call FieldInfos.getPayload() call FieldInfos.getPayload() if != assert if && if == if call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() != throw new + + + + + + + call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() else if call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() == throw new + + + + + + + + decl_stmt org.apache.lucene.util.BytesRef = call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() if ! call int.equals() call int.equals() call int.equals() call int.equals() call int.equals() throw new + + + + + + + + + decl_stmt float = == : / float - catch if + + = if != return public public throws if throw new private static private static = return public static public static assert return int public static public static throws decl_stmt int = public public return public public return public public = Directory Path Options = private static = private static throws decl_stmt Options try = catch return if ! + + decl_stmt org.apache.lucene.store.Directory = decl_stmt java.nio.file.Path = try if == = else = catch + + return try = = new = return int Options String public static public static decl_stmt Options = new decl_stmt int = while < decl_stmt java.lang.String = if = else if = else if = else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if == - throw new ++ call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() else if if == - throw new ++ = else if != throw new + + = ++ if == throw new + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + if call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() call Options.onlySegments() == = else if throw new if && throw new return Status public public throws decl_stmt Status = if return if ! if ! + + else + + + + for = < ++ + - + + call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() call Status.newSegments() + if == return else return private static private static return /