org.apache.solr.response java.io.IOException import java.io.Writer import java.util.Arrays import java.util.Iterator import java.util.Map import java.util.Set import org.apache.solr.common.SolrDocument import org.apache.solr.common.SolrException import org.apache.solr.common.params.CommonParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.XML import org.apache.solr.request.SolrQueryRequest import org.apache.solr.search.ReturnFields import org.apache.solr.search.SolrReturnFields import static static org.apache.solr.common.params.CommonParams.NAME import class org.apache.solr.response.XMLWriter super super extends decl char decl char int decl char decl char float XMLWriter public static public static throws decl_stmt org.apache.solr.response.XMLWriter = try = new call org.apache.solr.response.XMLWriter.writeResponse() call org.apache.solr.response.XMLWriter.writeResponse() call org.apache.solr.response.XMLWriter.writeResponse() call org.apache.solr.response.XMLWriter.writeResponse() call org.apache.solr.response.XMLWriter.writeResponse() finally call XMLWriter.close() call XMLWriter.close() call XMLWriter.close() call XMLWriter.close() call XMLWriter.close() int String Boolean decl NamedList int public public throws decl_stmt java.lang.String = if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > decl_stmt java.lang.Boolean = if != && decl_stmt org.apache.solr.common.util.NamedList final final final < = decl_stmt int = call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() decl_stmt int = for = < ++ call decl NamedList.getName() call decl NamedList.getName() call decl NamedList.getName() call decl NamedList.getName() call decl NamedList.getName() call decl NamedList.getVal() call decl NamedList.getVal() call decl NamedList.getVal() call decl NamedList.getVal() call decl NamedList.getVal() private private throws public public throws if != if else throws if if != if else else if else public public throws if if != Object public public throws for : if != && ! continue decl_stmt java.lang.Object = if if for : new public public throws if int public public throws decl_stmt int = <= for = < ++ if > if int Object Object public public throws decl_stmt int = if ! <= for : < decl_stmt java.lang.Object = decl_stmt java.lang.Object = == : call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() if ! if > if public public throws public public throws if while if else public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws int private private throws decl_stmt int = == : == if == return if else