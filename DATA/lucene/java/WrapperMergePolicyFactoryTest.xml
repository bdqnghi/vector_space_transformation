org.apache.solr.index org.apache.lucene.index.MergePolicy import org.apache.lucene.index.NoMergePolicy import org.apache.lucene.index.TieredMergePolicy import org.apache.lucene.index.UpgradeIndexMergePolicy import org.apache.solr.SolrTestCaseJ4 import org.apache.solr.core.SolrResourceLoader import org.apache.solr.schema.IndexSchema import class org.apache.solr.index.WrapperMergePolicyFactoryTest super super extends SolrResourceLoader MergePolicyFactory MergePolicyFactoryArgs public public decl_stmt org.apache.solr.index.MergePolicyFactoryArgs final final = new decl_stmt MergePolicyFactory = new call MergePolicyFactory.getMergePolicy() call MergePolicyFactory.getMergePolicy() call MergePolicyFactory.getMergePolicy() call MergePolicyFactory.getMergePolicy() call MergePolicyFactory.getMergePolicy() MergePolicyFactoryArgs public public decl_stmt org.apache.solr.index.MergePolicyFactoryArgs final final = new call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() try new catch final final MergePolicyFactory TieredMergePolicy double TieredMergePolicy MergePolicyFactoryArgs int MergePolicy public public decl_stmt org.apache.lucene.index.TieredMergePolicy final final = new decl_stmt int final final = call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() * decl_stmt double final final = call org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB() * decl_stmt org.apache.solr.index.MergePolicyFactoryArgs final final = new call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() decl_stmt MergePolicyFactory = new protected protected throw new decl_stmt org.apache.lucene.index.MergePolicy final final = call MergePolicyFactory.getMergePolicy() call MergePolicyFactory.getMergePolicy() call MergePolicyFactory.getMergePolicy() call MergePolicyFactory.getMergePolicy() call MergePolicyFactory.getMergePolicy() call MergePolicy.getClass() call MergePolicy.getClass() call MergePolicy.getClass() call MergePolicy.getClass() call MergePolicy.getClass() decl_stmt org.apache.lucene.index.TieredMergePolicy final final = call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB() protected protected throw new Double Double int public public decl_stmt int final final = decl_stmt java.lang.Double final final = : + / double decl_stmt java.lang.Double final final = : + / double MergePolicyFactory MergePolicyFactoryArgs MergePolicy private private decl_stmt org.apache.solr.index.MergePolicyFactoryArgs final final = new if != call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() if != call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() call MergePolicyFactoryArgs.add() decl_stmt MergePolicyFactory try = new != && != for = <= ++ decl_stmt org.apache.lucene.index.MergePolicy final final = call MergePolicyFactory.getMergePolicy() call MergePolicyFactory.getMergePolicy() call MergePolicyFactory.getMergePolicy() call MergePolicyFactory.getMergePolicy() call MergePolicyFactory.getMergePolicy() if != + + call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.MergePolicy.getNoCFSRatio() if != + + call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call MergePolicy.getClass() call MergePolicy.getClass() call MergePolicy.getClass() call MergePolicy.getClass() call MergePolicy.getClass() catch != && != protected protected return protected protected return