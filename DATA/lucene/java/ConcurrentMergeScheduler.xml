org.apache.lucene.index java.io.IOException import java.util.ArrayList import java.util.List import java.util.Locale import org.apache.lucene.index.MergePolicy.OneMerge import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.store.Directory import org.apache.lucene.util.CollectionUtil import org.apache.lucene.util.IOUtils import org.apache.lucene.util.ThreadInterruptedException import class org.apache.lucene.index.ConcurrentMergeScheduler super super extends double int int double int decl List double boolean int double double boolean double String String public synchronized public synchronized if == && == = = else if == throw new else if == throw new else if < throw new if < throw new if > throw new + + = = int String public synchronized public synchronized if = = else decl_stmt int = try decl_stmt java.lang.String = if != = catch = / = + public synchronized public synchronized = public synchronized public synchronized return public synchronized public synchronized = = public synchronized public synchronized = public synchronized public synchronized return public synchronized public synchronized if return else return public synchronized public synchronized return public synchronized public synchronized return Thread synchronized synchronized decl_stmt java.lang.Thread = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() == call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() return assert : + + int long double int double OneMerge int boolean MergeThread StringBuilder long decl List protected synchronized protected synchronized decl_stmt java.util.List final final final < = new <> decl_stmt int = while < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt MergeThread final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if ! call MergeThread.isAlive() call MergeThread.isAlive() call MergeThread.isAlive() call MergeThread.isAlive() call MergeThread.isAlive() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() ++ decl_stmt int final final = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = for = - >= -- decl_stmt MergeThread = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if > * * = + break decl_stmt long = decl_stmt java.lang.StringBuilder if = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else = for = < ++ decl_stmt MergeThread = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt OneMerge = decl_stmt boolean final final = < - decl_stmt double if = else if != - = else if == = else if < * * = else = decl_stmt double = call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() if decl_stmt long = if == - = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call MergeThread.getName() call MergeThread.getName() call MergeThread.getName() call MergeThread.getName() call MergeThread.getName() - call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() if != if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() call OneMerge.rateLimiter() if call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() String boolean private synchronized private synchronized throws if == decl_stmt boolean = try decl_stmt java.lang.String = if != = catch if + + + + + private static private static if == return else if == return else return public public MergeThread boolean public public decl_stmt boolean = try while decl_stmt MergeThread = synchronized for : if && != = break if != try call MergeThread.join() call MergeThread.join() call MergeThread.join() call MergeThread.join() call MergeThread.join() catch = else break finally if int Thread public synchronized public synchronized decl_stmt java.lang.Thread = decl_stmt int = for : if != && && == ++ return MergeThread OneMerge boolean public synchronized public synchronized throws assert ! if == = if + while if == break decl_stmt OneMerge = if == if return decl_stmt boolean = try if + decl_stmt MergeThread final final = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if + call MergeThread.getName() call MergeThread.getName() call MergeThread.getName() call MergeThread.getName() call MergeThread.getName() + call MergeThread.start() call MergeThread.start() call MergeThread.start() call MergeThread.start() call MergeThread.start() = finally if ! long protected synchronized protected synchronized decl_stmt long = while && >= if call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() return if && == = if && != + - + return protected synchronized protected synchronized try catch throw new protected protected throws MergeThread protected synchronized protected synchronized throws decl_stmt MergeThread final final = new call MergeThread.setDaemon() call MergeThread.setDaemon() call MergeThread.setDaemon() call MergeThread.setDaemon() call MergeThread.setDaemon() call MergeThread.setName() call MergeThread.setName() call MergeThread.setName() call MergeThread.setName() call MergeThread.setName() + ++ return public public return public public try if if try catch catch throw new catch if instanceof else if == finally synchronized protected protected throw new if = if = StringBuilder public public decl_stmt java.lang.StringBuilder = new + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() double double long double private private decl_stmt double = for : decl_stmt long = if && != && != - && >= * * && - > decl_stmt double = decl_stmt double = / if > && < return return boolean boolean double double double long private synchronized private synchronized throws if == return decl_stmt double = if < return decl_stmt long = decl_stmt boolean = decl_stmt boolean = if == if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > = else for : if = break decl_stmt double = if *= if > = if if == else else if if else /= if < = if if == else decl_stmt double if != - = else = protected protected private static private static return / private static private static return / /