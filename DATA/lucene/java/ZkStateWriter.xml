org.apache.solr.cloud.overseer java.lang.invoke.MethodHandles import java.util.HashMap import java.util.Map import java.util.Set import java.util.concurrent.TimeUnit import org.apache.solr.cloud.Overseer import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.DocCollection import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.util.Utils import org.apache.solr.util.stats.TimerContext import org.apache.zookeeper.CreateMode import org.apache.zookeeper.KeeperException import org.apache.zookeeper.data.Stat import org.slf4j.Logger import org.slf4j.LoggerFactory import static static java.util.Collections.singletonMap import class org.apache.solr.cloud.overseer.ZkStateWriter long decl Overseer Logger ZkWriteCommand long decl Map ClusterState decl Stats ZkStateReader String int boolean DocCollection boolean boolean ClusterState public public throws if throw new if == return if = = if != if != decl_stmt org.apache.solr.common.cloud.DocCollection = decl_stmt boolean = != && call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() == decl_stmt boolean = != && == if == if = = call decl Stats.put() call decl Stats.put() call decl Stats.put() call decl Stats.put() call decl Stats.put() else if ! call decl Stats.put() call decl Stats.put() call decl Stats.put() call decl Stats.put() call decl Stats.put() if || = = if decl_stmt org.apache.solr.common.cloud.ClusterState = if != return return protected protected if == return if == return if != return return > && ! protected protected if == return = = return - > public public return ! call decl Stats.isEmpty() call decl Stats.isEmpty() call decl Stats.isEmpty() call decl Stats.isEmpty() call decl Stats.isEmpty() || DocCollection TimerContext String boolean Stat decl Map String decl Set decl byte DocCollection public public throws if throw new if ! return decl_stmt org.apache.solr.util.stats.TimerContext = call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() decl_stmt boolean = try if ! call decl Stats.isEmpty() call decl Stats.isEmpty() call decl Stats.isEmpty() call decl Stats.isEmpty() call decl Stats.isEmpty() for < : call decl Stats.entrySet() call decl Stats.entrySet() call decl Stats.entrySet() call decl Stats.entrySet() call decl Stats.entrySet() decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt org.apache.solr.common.cloud.DocCollection = if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() + else if call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() > decl_stmt byte = call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() if call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() assert call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() >= call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() decl_stmt Stat = call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() decl_stmt org.apache.solr.common.cloud.DocCollection = new call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call DocCollection.getProperties() call DocCollection.getProperties() call DocCollection.getProperties() call DocCollection.getProperties() call DocCollection.getProperties() call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() = call decl Map.copyWith() call decl Map.copyWith() call decl Map.copyWith() call decl Map.copyWith() call decl Map.copyWith() else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() decl_stmt org.apache.solr.common.cloud.DocCollection = new call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call org.apache.solr.common.cloud.DocCollection.getSlicesMap() call DocCollection.getProperties() call DocCollection.getProperties() call DocCollection.getProperties() call DocCollection.getProperties() call DocCollection.getProperties() call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() = call decl Map.copyWith() call decl Map.copyWith() call decl Map.copyWith() call decl Map.copyWith() call decl Map.copyWith() else if call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() call org.apache.solr.common.cloud.DocCollection.getStateFormat() == = call decl Stats.clear() call decl Stats.clear() call decl Stats.clear() call decl Stats.clear() call decl Stats.clear() if assert call decl Map.getZkClusterStateVersion() call decl Map.getZkClusterStateVersion() call decl Map.getZkClusterStateVersion() call decl Map.getZkClusterStateVersion() call decl Map.getZkClusterStateVersion() >= decl_stmt byte = decl_stmt Stat = call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call decl Map.getZkClusterStateVersion() call decl Map.getZkClusterStateVersion() call decl Map.getZkClusterStateVersion() call decl Map.getZkClusterStateVersion() call decl Map.getZkClusterStateVersion() decl_stmt java.util.Set < = call decl Map.getCollections() call decl Map.getCollections() call decl Map.getCollections() call decl Map.getCollections() call decl Map.getCollections() decl_stmt java.util.Map < = new <> call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.getCollection() call decl Map.getCollection() call decl Map.getCollection() call decl Map.getCollection() call decl Map.getCollection() = new call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() = = = catch = throw finally call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() if call decl Overseer.success() call decl Overseer.success() call decl Overseer.success() call decl Overseer.success() call decl Overseer.success() else call decl Overseer.error() call decl Overseer.error() call decl Overseer.error() call decl Overseer.error() call decl Overseer.error() return public public return public public return