org.apache.lucene.spatial.prefix java.io.IOException import java.util.ArrayList import java.util.Calendar import java.util.Collections import java.util.List import com.carrotsearch.randomizedtesting.annotations.Repeat import org.locationtech.spatial4j.shape.Shape import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.Term import org.apache.lucene.queries.TermsQuery import org.apache.lucene.search.Query import org.apache.lucene.search.SimpleCollector import org.apache.lucene.spatial.StrategyTestCase import org.apache.lucene.spatial.prefix.NumberRangePrefixTreeStrategy.Facets import org.apache.lucene.spatial.prefix.tree.Cell import org.apache.lucene.spatial.prefix.tree.CellIterator import org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree import org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree import org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape import org.apache.lucene.util.Bits import org.apache.lucene.util.FixedBitSet import org.junit.Before import org.junit.Test import static static com.carrotsearch.randomizedtesting.RandomizedTest.randomInt import static static com.carrotsearch.randomizedtesting.RandomizedTest.randomIntBetween import class org.apache.lucene.spatial.prefix.NumberRangeFacetsTest super super extends DateRangePrefixTree int long Calendar public public throws = = new decl_stmt java.util.Calendar = call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.newCal() call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.newCal() call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.newCal() call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.newCal() call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.newCal() = - call Calendar.add() call Calendar.add() call Calendar.add() call Calendar.add() call Calendar.add() = call java.util.Calendar.getTimeInMillis() call java.util.Calendar.getTimeInMillis() call java.util.Calendar.getTimeInMillis() call java.util.Calendar.getTimeInMillis() call java.util.Calendar.getTimeInMillis() decl List decl Facets decl List Shape int int decl NRShape Calendar Calendar int CellIterator decl FacetParentVal decl List Bits decl NumberRangePrefixTree UnitNRShape int Facets Shape Shape = public = public throws decl_stmt java.util.List < = new <> decl_stmt int final final = for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt java.awt.Shape = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + if == for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ if == + call decl List.set() call decl List.set() call decl List.set() call decl List.set() call decl List.set() for = < ++ decl_stmt int = - if > && -- decl_stmt java.util.Calendar final final = call Calendar.add() call Calendar.add() call Calendar.add() call Calendar.add() call Calendar.add() - * decl_stmt java.util.Calendar = call java.util.Calendar.clone() call java.util.Calendar.clone() call java.util.Calendar.clone() call java.util.Calendar.clone() call java.util.Calendar.clone() call Calendar.add() call Calendar.add() call Calendar.add() call Calendar.add() call Calendar.add() decl_stmt int = call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.getTreeLevelForCalendarField(int) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.getTreeLevelForCalendarField(int) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.getTreeLevelForCalendarField(int) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.getTreeLevelForCalendarField(int) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.getTreeLevelForCalendarField(int) if < = - * decl_stmt org.apache.lucene.util.Bits = decl_stmt java.util.List < = new <> if for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() == continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new = new decl_stmt org.apache.lucene.spatial.prefix.tree.NRShape = call DateRangePrefixTree.toRangeShape() call DateRangePrefixTree.toRangeShape() call DateRangePrefixTree.toRangeShape() call DateRangePrefixTree.toRangeShape() call DateRangePrefixTree.toRangeShape() call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) decl_stmt Facets = decl_stmt java.awt.Shape = call decl NumberRangePrefixTree.roundToLevel() call decl NumberRangePrefixTree.roundToLevel() call decl NumberRangePrefixTree.roundToLevel() call decl NumberRangePrefixTree.roundToLevel() call decl NumberRangePrefixTree.roundToLevel() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ if != && ! call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() continue decl_stmt java.awt.Shape = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if == continue decl_stmt java.awt.Shape = if ! call Shape.relate() call Shape.relate() call Shape.relate() call Shape.relate() call Shape.relate() continue decl_stmt org.apache.lucene.spatial.prefix.tree.CellIterator final final = call DateRangePrefixTree.getTreeCellIterator() call DateRangePrefixTree.getTreeCellIterator() call DateRangePrefixTree.getTreeCellIterator() call DateRangePrefixTree.getTreeCellIterator() call DateRangePrefixTree.getTreeCellIterator() while call Shape.hasNext() call Shape.hasNext() call Shape.hasNext() call Shape.hasNext() call Shape.hasNext() decl_stmt org.apache.lucene.spatial.prefix.tree.Cell = call Shape.next() call Shape.next() call Shape.next() call Shape.next() call Shape.next() if ! call CellIterator.getShape() call CellIterator.getShape() call CellIterator.getShape() call CellIterator.getShape() call CellIterator.getShape() call Shape.remove() call Shape.remove() call Shape.remove() call Shape.remove() call Shape.remove() continue assert call CellIterator.getLevel() call CellIterator.getLevel() call CellIterator.getLevel() call CellIterator.getLevel() call CellIterator.getLevel() <= if call CellIterator.getLevel() call CellIterator.getLevel() call CellIterator.getLevel() call CellIterator.getLevel() call CellIterator.getLevel() == decl_stmt UnitNRShape = call CellIterator.getShape() call CellIterator.getShape() call CellIterator.getShape() call CellIterator.getShape() call CellIterator.getShape() decl_stmt UnitNRShape final final = call decl FacetParentVal.getShapeAtLevel() call decl FacetParentVal.getShapeAtLevel() call decl FacetParentVal.getShapeAtLevel() call decl FacetParentVal.getShapeAtLevel() call decl FacetParentVal.getShapeAtLevel() - decl_stmt FacetParentVal final final final final final = call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() decl_stmt int = call decl FacetParentVal.getValAtLevel() call decl FacetParentVal.getValAtLevel() call decl FacetParentVal.getValAtLevel() call decl FacetParentVal.getValAtLevel() call decl FacetParentVal.getValAtLevel() call decl FacetParentVal.getLevel() call decl FacetParentVal.getLevel() call decl FacetParentVal.getLevel() call decl FacetParentVal.getLevel() call decl FacetParentVal.getLevel() assert > -- else if call CellIterator.isLeaf() call CellIterator.isLeaf() call CellIterator.isLeaf() call CellIterator.isLeaf() call CellIterator.isLeaf() if call CellIterator.getLevel() call CellIterator.getLevel() call CellIterator.getLevel() call CellIterator.getLevel() call CellIterator.getLevel() < - assert > -- else decl_stmt UnitNRShape = call CellIterator.getShape() call CellIterator.getShape() call CellIterator.getShape() call CellIterator.getShape() call CellIterator.getShape() decl_stmt UnitNRShape final final = call decl FacetParentVal.getShapeAtLevel() call decl FacetParentVal.getShapeAtLevel() call decl FacetParentVal.getShapeAtLevel() call decl FacetParentVal.getShapeAtLevel() call decl FacetParentVal.getShapeAtLevel() - decl_stmt FacetParentVal final final final final final = call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() assert > -- call Shape.remove() call Shape.remove() call Shape.remove() call Shape.remove() call Shape.remove() == for : call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() call decl NRShape.parents() == if != for : == int FixedBitSet private private throws decl_stmt org.apache.lucene.util.FixedBitSet = new new decl_stmt int public public throws call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) + protected protected throws = public public return return public public throws + protected protected throws = public public return int RecursivePrefixTreeStrategy private private if instanceof decl_stmt org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy = decl_stmt int = call RecursivePrefixTreeStrategy.getGrid() call RecursivePrefixTreeStrategy.getGrid() call RecursivePrefixTreeStrategy.getGrid() call RecursivePrefixTreeStrategy.getGrid() call RecursivePrefixTreeStrategy.getGrid() call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPrefixGridScanLevel(int) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPrefixGridScanLevel(int) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPrefixGridScanLevel(int) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPrefixGridScanLevel(int) call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.setPrefixGridScanLevel(int) Calendar UnitNRShape Calendar UnitNRShape protected protected decl_stmt java.util.Calendar = decl_stmt UnitNRShape = call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) if return try decl_stmt java.util.Calendar = decl_stmt UnitNRShape = call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.toShape(Calendar) if call java.util.Calendar.compareTo(long) call java.util.Calendar.compareTo(long) call java.util.Calendar.compareTo(long) call java.util.Calendar.compareTo(long) call java.util.Calendar.compareTo(long) < return call DateRangePrefixTree.toRangeShape() call DateRangePrefixTree.toRangeShape() call DateRangePrefixTree.toRangeShape() call DateRangePrefixTree.toRangeShape() call DateRangePrefixTree.toRangeShape() else return call DateRangePrefixTree.toRangeShape() call DateRangePrefixTree.toRangeShape() call DateRangePrefixTree.toRangeShape() call DateRangePrefixTree.toRangeShape() call DateRangePrefixTree.toRangeShape() catch assert return Calendar private private decl_stmt java.util.Calendar = call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.newCal() call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.newCal() call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.newCal() call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.newCal() call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.newCal() call java.util.Calendar.setTimeInMillis(long) call java.util.Calendar.setTimeInMillis(long) call java.util.Calendar.setTimeInMillis(long) call java.util.Calendar.setTimeInMillis(long) call java.util.Calendar.setTimeInMillis(long) try call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.clearFieldsAfter(Calendar,int) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.clearFieldsAfter(Calendar,int) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.clearFieldsAfter(Calendar,int) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.clearFieldsAfter(Calendar,int) call org.apache.lucene.spatial.prefix.tree.DateRangePrefixTree.clearFieldsAfter(Calendar,int) + - catch if ! throw return