org.apache.lucene.util.packed java.io.IOException import java.util.Arrays import org.apache.lucene.store.DataInput import org.apache.lucene.util.RamUsageEstimator import class org.apache.lucene.util.packed.Packed64SingleBlock super super extends decl int decl long int public static public static return >= private static private static return / + == : public public public public return + * + + decl Decoder int int decl PackedInts int int int public public assert > : + + assert >= && < = - assert + <= decl_stmt int final final = decl_stmt int final final = / decl_stmt int final final = if != for = < && && ++ ++ = ++ -- if == return - assert == decl_stmt org.apache.solr.core.Decoder final final final final final = assert call decl PackedInts.longBlockCount() call decl PackedInts.longBlockCount() call decl PackedInts.longBlockCount() call decl PackedInts.longBlockCount() call decl PackedInts.longBlockCount() == assert call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() == decl_stmt int final final = / decl_stmt int final final = + / - call decl PackedInts.decode() call decl PackedInts.decode() call decl PackedInts.decode() call decl PackedInts.decode() call decl PackedInts.decode() decl_stmt int final final = * += -= if > return - else assert == return int int int int int int BulkOperation public public assert > : + + assert >= && < = - assert + <= decl_stmt int final final = decl_stmt int final final = / decl_stmt int final final = if != for = < && && ++ ++ ++ -- if == return - assert == decl_stmt org.apache.lucene.util.packed.BulkOperation final final = assert call BulkOperation.longBlockCount() call BulkOperation.longBlockCount() call BulkOperation.longBlockCount() call BulkOperation.longBlockCount() call BulkOperation.longBlockCount() == assert call BulkOperation.longValueCount() call BulkOperation.longValueCount() call BulkOperation.longValueCount() call BulkOperation.longValueCount() call BulkOperation.longValueCount() == decl_stmt int final final = / decl_stmt int final final = + / - call BulkOperation.encode() call BulkOperation.encode() call BulkOperation.encode() call BulkOperation.encode() call BulkOperation.encode() decl_stmt int final final = * += -= if > return - else assert == return int long int int int public public assert >= assert <= assert <= decl_stmt int final final = / if - <= << return decl_stmt int = if != for = < ++ ++ assert == decl_stmt int final final = / decl_stmt int final final = / assert * == decl_stmt long = for = < ++ = | << * for = * < ++ protected protected return public public return + + + + + + + Packed64SingleBlock public static public static throws decl_stmt org.apache.lucene.util.packed.Packed64SingleBlock = for = < ++ = return public static public static switch case return new case return new case return new case return new case return new case return new case return new case return new case return new case return new case return new case return new case return new case return new default: throw new + int int int public public decl_stmt int final final = >>> decl_stmt int final final = & decl_stmt int final final = << return >>> & int int int public public decl_stmt int final final = >>> decl_stmt int final final = & decl_stmt int final final = << = & ~ << | << int int int public public decl_stmt int final final = >>> decl_stmt int final final = & decl_stmt int final final = << return >>> & int int int public public decl_stmt int final final = >>> decl_stmt int final final = & decl_stmt int final final = << = & ~ << | << int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * return >>> & int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * = & ~ << | << int int int public public decl_stmt int final final = >>> decl_stmt int final final = & decl_stmt int final final = << return >>> & int int int public public decl_stmt int final final = >>> decl_stmt int final final = & decl_stmt int final final = << = & ~ << | << int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * return >>> & int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * = & ~ << | << int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * return >>> & int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * = & ~ << | << int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * return >>> & int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * = & ~ << | << int int int public public decl_stmt int final final = >>> decl_stmt int final final = & decl_stmt int final final = << return >>> & int int int public public decl_stmt int final final = >>> decl_stmt int final final = & decl_stmt int final final = << = & ~ << | << int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * return >>> & int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * = & ~ << | << int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * return >>> & int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * = & ~ << | << int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * return >>> & int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * = & ~ << | << int int int public public decl_stmt int final final = >>> decl_stmt int final final = & decl_stmt int final final = << return >>> & int int int public public decl_stmt int final final = >>> decl_stmt int final final = & decl_stmt int final final = << = & ~ << | << int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * return >>> & int int int public public decl_stmt int final final = / decl_stmt int final final = decl_stmt int final final = * = & ~ << | << int int int public public decl_stmt int final final = >>> decl_stmt int final final = & decl_stmt int final final = << return >>> & int int int public public decl_stmt int final final = >>> decl_stmt int final final = & decl_stmt int final final = << = & ~ << | <<