org.apache.lucene.classification java.io.IOException import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import java.util.concurrent.ConcurrentHashMap import org.apache.lucene.analysis.Analyzer import org.apache.lucene.index.LeafReader import org.apache.lucene.index.MultiFields import org.apache.lucene.index.Term import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.Query import org.apache.lucene.search.TermQuery import org.apache.lucene.search.TotalHitCountCollector import org.apache.lucene.util.BytesRef import class org.apache.lucene.classification.CachingNaiveBayesClassifier super super extends int decl ArrayList decl Map boolean decl Map decl String decl List decl ArrayList protected < < protected < < throws decl_stmt java.lang.String = decl_stmt java.util.List < < = decl_stmt java.util.ArrayList < < = return int decl Map double decl ArrayList int double int double decl ClassificationResult decl ClassificationResult Integer private < < private < < throws decl_stmt java.util.ArrayList < < = new <> for : decl_stmt org.apache.lucene.classification.ClassificationResult < = new <> call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() for : decl_stmt java.util.Map < = for : decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt int = if != = decl_stmt double = + decl_stmt double = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() + decl_stmt double = / decl_stmt int = - decl_stmt int = for < : if call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getAssignedClass() = break ++ if >= decl_stmt org.apache.lucene.classification.ClassificationResult < = call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() new <> call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getScore() call decl ClassificationResult.getScore() call decl ClassificationResult.getScore() call decl ClassificationResult.getScore() call decl ClassificationResult.getScore() + call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() return decl Map decl Builder decl Builder decl BooleanQuery decl Map decl BooleanQuery private < private < throws decl_stmt java.util.Map < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != if ! call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() return decl_stmt java.util.Map < = new <> if != || ! for : decl_stmt org.apache.lucene.util.fst.Builder = new decl_stmt org.apache.lucene.util.fst.Builder = new for : call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() new new new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new new if != call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() decl_stmt org.apache.lucene.search.TotalHitCountCollector = new call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() decl_stmt int = call decl BooleanQuery.getTotalHits() call decl BooleanQuery.getTotalHits() call decl BooleanQuery.getTotalHits() call decl BooleanQuery.getTotalHits() call decl BooleanQuery.getTotalHits() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return BytesRef decl Map TermsEnum String long long double int Long Terms public public throws = = call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() decl_stmt java.util.Map < = new <> for : decl_stmt org.apache.lucene.index.TermsEnum = while call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != decl_stmt org.apache.lucene.util.BytesRef = call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() decl_stmt java.lang.String = call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() decl_stmt long = call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() decl_stmt java.lang.Long = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != += call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if > call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < decl_stmt org.apache.lucene.index.Terms = decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() while call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() for : decl_stmt double = for : = decl_stmt long = call Terms.getSumDocFreq() call Terms.getSumDocFreq() call Terms.getSumDocFreq() call Terms.getSumDocFreq() call Terms.getSumDocFreq() += / double call Terms.getDocCount() call Terms.getDocCount() call Terms.getDocCount() call Terms.getDocCount() call Terms.getDocCount() decl_stmt int = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() *