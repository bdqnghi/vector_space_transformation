org.apache.solr.update.processor org.apache.solr.common.params.MapSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.StrUtils import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.util.plugin.PluginInfoInitialized import org.apache.solr.common.util.NamedList import org.apache.solr.common.SolrException import org.apache.solr.core.PluginInfo import org.apache.solr.core.SolrCore import org.slf4j.Logger import org.slf4j.LoggerFactory import java.util.Arrays import java.util.Collections import java.util.LinkedList import java.util.List import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Objects import class org.apache.solr.update.processor.UpdateRequestProcessorChain super super implements Logger decl List SolrCore int int UpdateRequestProcessorChain decl List UpdateRequestProcessorFactory String DistributedUpdateProcessorFactory ProcessorInfo public public decl_stmt java.lang.String final final = + != : + + : call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt java.util.List < = new call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() throw new + decl_stmt int = decl_stmt int = - for = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - <= -- decl_stmt org.apache.solr.update.processor.UpdateRequestProcessorFactory = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if instanceof ++ if instanceof = if < throw new + + if <= && == decl_stmt org.apache.solr.update.processor.DistributedUpdateProcessorFactory = new call org.apache.solr.update.processor.DistributedUpdateProcessorFactory.init(NamedList) call org.apache.solr.update.processor.DistributedUpdateProcessorFactory.init(NamedList) call org.apache.solr.update.processor.DistributedUpdateProcessorFactory.init(NamedList) call org.apache.solr.update.processor.DistributedUpdateProcessorFactory.init(NamedList) call org.apache.solr.update.processor.DistributedUpdateProcessorFactory.init(NamedList) new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + = decl_stmt ProcessorInfo = new new if call ProcessorInfo.isEmpty() call ProcessorInfo.isEmpty() call ProcessorInfo.isEmpty() call ProcessorInfo.isEmpty() call ProcessorInfo.isEmpty() return decl_stmt org.apache.solr.update.processor.UpdateRequestProcessorChain = = boolean UpdateRequestProcessor String UpdateRequestProcessorFactory boolean UpdateRequestProcessor public public decl_stmt org.apache.solr.update.processor.UpdateRequestProcessor = decl_stmt org.apache.solr.update.processor.UpdateRequestProcessor = decl_stmt java.lang.String final final = decl_stmt boolean final final = != decl_stmt boolean = for = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - >= -- decl_stmt org.apache.solr.update.processor.UpdateRequestProcessorFactory = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if if if instanceof = else if ! instanceof continue = call UpdateRequestProcessorFactory.getInstance() call UpdateRequestProcessorFactory.getInstance() call UpdateRequestProcessorFactory.getInstance() call UpdateRequestProcessorFactory.getInstance() call UpdateRequestProcessorFactory.getInstance() = == : return public < public < return decl List decl LinkedList decl ArrayList decl List UpdateRequestProcessorChain public static public static decl_stmt java.util.LinkedList < = new decl_stmt java.util.List < = decl_stmt java.util.List < = call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() - decl_stmt org.apache.solr.update.processor.UpdateRequestProcessorChain = new if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() decl_stmt java.util.ArrayList < = new <> call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + return private static private static < < if return for = < ++ if = if == if > && - instanceof = - break for = - <= -- UpdateRequestProcessorFactory decl List decl List decl List static < static < if == return decl_stmt java.util.List < = new <> if != decl_stmt java.util.List < = decl_stmt java.util.List < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : = if continue decl_stmt org.apache.solr.update.processor.UpdateRequestProcessorFactory = if == throw new + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return == && == int public public decl_stmt int = if != += if != += return ProcessorInfo public public if ! instanceof return decl_stmt ProcessorInfo = return &&