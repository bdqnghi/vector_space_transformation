org.apache.solr.hadoop java.io.IOException import java.lang.invoke.MethodHandles import java.nio.file.Paths import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Locale import java.util.Set import java.util.concurrent.TimeUnit import com.google.common.collect.ImmutableMap import org.apache.hadoop.conf.Configuration import org.apache.hadoop.filecache.DistributedCache import org.apache.hadoop.fs.FileSystem import org.apache.hadoop.fs.Path import org.apache.hadoop.mapreduce.RecordWriter import org.apache.hadoop.mapreduce.Reducer import org.apache.hadoop.mapreduce.TaskAttemptContext import org.apache.hadoop.mapreduce.TaskID import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer import org.apache.solr.common.SolrInputDocument import org.apache.solr.core.CoreContainer import org.apache.solr.core.CoreDescriptor import org.apache.solr.core.DirectoryFactory import org.apache.solr.core.HdfsDirectoryFactory import org.apache.solr.core.SolrCore import org.apache.solr.core.SolrResourceLoader import org.slf4j.Logger import org.slf4j.LoggerFactory import class super super extends decl HashMap Logger HeartBeater decl Set int decl List decl List BatchWriter long long public static < public static < return public static public static final final return call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() SolrCore CoreContainer Path String SolrResourceLoader EmbeddedSolrServer public static public static throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + + decl_stmt java.nio.file.Path = new decl_stmt java.lang.String = call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() decl_stmt org.apache.solr.core.SolrResourceLoader = new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call org.apache.solr.core.SolrResourceLoader.getConfigDir() call org.apache.solr.core.SolrResourceLoader.getConfigDir() call org.apache.solr.core.SolrResourceLoader.getConfigDir() call org.apache.solr.core.SolrResourceLoader.getConfigDir() call org.apache.solr.core.SolrResourceLoader.getConfigDir() decl_stmt org.apache.solr.core.CoreContainer = new call org.apache.solr.core.CoreContainer.load() call org.apache.solr.core.CoreContainer.load() call org.apache.solr.core.CoreContainer.load() call org.apache.solr.core.CoreContainer.load() call org.apache.solr.core.CoreContainer.load() decl_stmt org.apache.solr.core.SolrCore = call org.apache.solr.core.CoreContainer.create(String,Map) call org.apache.solr.core.CoreContainer.create(String,Map) call org.apache.solr.core.CoreContainer.create(String,Map) call org.apache.solr.core.CoreContainer.create(String,Map) call org.apache.solr.core.CoreContainer.create(String,Map) if ! call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() instanceof throw new + decl_stmt org.apache.solr.client.solrj.embedded.EmbeddedSolrServer = new return decl Context public static public static decl_stmt sun.tools.tree.Context < < = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() if != call decl Context.getCounter() call decl Context.getCounter() call decl Context.getCounter() call decl Context.getCounter() call decl Context.getCounter() decl Context public static public static < decl_stmt sun.tools.tree.Context < < = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() if != call decl Context.getCounter() call decl Context.getCounter() call decl Context.getCounter() call decl Context.getCounter() call decl Context.getCounter() TaskID public static public static < < decl_stmt TaskID = call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() decl Path public static public static throws decl_stmt java.nio.file.Path = for : if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return throw new SolrInputDocumentWritable public public throws call org.apache.solr.hadoop.HeartBeater.needHeartBeat() call org.apache.solr.hadoop.HeartBeater.needHeartBeat() call org.apache.solr.hadoop.HeartBeater.needHeartBeat() call org.apache.solr.hadoop.HeartBeater.needHeartBeat() call org.apache.solr.hadoop.HeartBeater.needHeartBeat() try try decl_stmt org.apache.solr.hadoop.SolrInputDocumentWritable = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.solr.hadoop.SolrInputDocumentWritable.getSolrInputDocument() call org.apache.solr.hadoop.SolrInputDocumentWritable.getSolrInputDocument() call org.apache.solr.hadoop.SolrInputDocumentWritable.getSolrInputDocument() call org.apache.solr.hadoop.SolrInputDocumentWritable.getSolrInputDocument() call org.apache.solr.hadoop.SolrInputDocumentWritable.getSolrInputDocument() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() >= call org.apache.solr.hadoop.BatchWriter.queueBatch(Collection) call org.apache.solr.hadoop.BatchWriter.queueBatch(Collection) call org.apache.solr.hadoop.BatchWriter.queueBatch(Collection) call org.apache.solr.hadoop.BatchWriter.queueBatch(Collection) call org.apache.solr.hadoop.BatchWriter.queueBatch(Collection) += call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if >= call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) += call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() catch throw new finally call org.apache.solr.hadoop.HeartBeater.cancelHeartBeat() call org.apache.solr.hadoop.HeartBeater.cancelHeartBeat() call org.apache.solr.hadoop.HeartBeater.cancelHeartBeat() call org.apache.solr.hadoop.HeartBeater.cancelHeartBeat() call org.apache.solr.hadoop.HeartBeater.cancelHeartBeat() public public throws if != call org.apache.solr.hadoop.HeartBeater.setProgress(Progressable) call org.apache.solr.hadoop.HeartBeater.setProgress(Progressable) call org.apache.solr.hadoop.HeartBeater.setProgress(Progressable) call org.apache.solr.hadoop.HeartBeater.setProgress(Progressable) call org.apache.solr.hadoop.HeartBeater.setProgress(Progressable) try call org.apache.solr.hadoop.HeartBeater.needHeartBeat() call org.apache.solr.hadoop.HeartBeater.needHeartBeat() call org.apache.solr.hadoop.HeartBeater.needHeartBeat() call org.apache.solr.hadoop.HeartBeater.needHeartBeat() call org.apache.solr.hadoop.HeartBeater.needHeartBeat() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > call org.apache.solr.hadoop.BatchWriter.queueBatch(Collection) call org.apache.solr.hadoop.BatchWriter.queueBatch(Collection) call org.apache.solr.hadoop.BatchWriter.queueBatch(Collection) call org.apache.solr.hadoop.BatchWriter.queueBatch(Collection) call org.apache.solr.hadoop.BatchWriter.queueBatch(Collection) += call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.hadoop.BatchWriter.close(TaskAttemptContext) call org.apache.solr.hadoop.BatchWriter.close(TaskAttemptContext) call org.apache.solr.hadoop.BatchWriter.close(TaskAttemptContext) call org.apache.solr.hadoop.BatchWriter.close(TaskAttemptContext) call org.apache.solr.hadoop.BatchWriter.close(TaskAttemptContext) catch if instanceof throw throw new finally call org.apache.solr.hadoop.HeartBeater.cancelHeartBeat() call org.apache.solr.hadoop.HeartBeater.cancelHeartBeat() call org.apache.solr.hadoop.HeartBeater.cancelHeartBeat() call org.apache.solr.hadoop.HeartBeater.cancelHeartBeat() call org.apache.solr.hadoop.HeartBeater.cancelHeartBeat() call org.apache.solr.hadoop.HeartBeater.close() call org.apache.solr.hadoop.HeartBeater.close() call org.apache.solr.hadoop.HeartBeater.close() call org.apache.solr.hadoop.HeartBeater.close() call org.apache.solr.hadoop.HeartBeater.close()