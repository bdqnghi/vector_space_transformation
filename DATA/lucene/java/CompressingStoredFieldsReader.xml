org.apache.lucene.codecs.compressing static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.BYTE_ARR import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.CODEC_SFX_DAT import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.CODEC_SFX_IDX import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.DAY import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.DAY_ENCODING import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.FIELDS_EXTENSION import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.HOUR import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.HOUR_ENCODING import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.NUMERIC_DOUBLE import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.NUMERIC_FLOAT import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.NUMERIC_INT import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.NUMERIC_LONG import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.SECOND import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.SECOND_ENCODING import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.STRING import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.TYPE_BITS import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.TYPE_MASK import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.VERSION_CURRENT import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.VERSION_CHUNK_STATS import static static org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.VERSION_START import java.io.EOFException import java.io.IOException import java.util.Arrays import java.util.Collection import java.util.Collections import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.StoredFieldsReader import org.apache.lucene.document.Document import org.apache.lucene.index.CorruptIndexException import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.SegmentInfo import org.apache.lucene.index.StoredFieldVisitor import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.ChecksumIndexInput import org.apache.lucene.store.DataInput import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BitUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.IntsRef import org.apache.lucene.util.packed.PackedInts import class org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader super super extends int CompressingStoredFieldsIndexReader BlockState FieldInfos int IndexInput long boolean int CompressionMode boolean long int long Decompressor private private throws if throw new public public throws if ! = int decl byte private static private static throws switch & case decl_stmt int = decl_stmt byte = new break case = = new break case break case break case break case break default: throw new + int private static private static throws switch & case case decl_stmt int final final = break case break case break case break case break default: throw new + int int static static throws decl_stmt int = & if == return else if & != return & - else decl_stmt int = << | & << | & return int long static static throws decl_stmt int = & if == return else if == return else if & != return & - else decl_stmt long = long << | & << | & << | & return int long long static static throws decl_stmt int = & decl_stmt long = & if & != |= << decl_stmt long = switch & case *= break case *= break case *= break case break default: throw new return return >= && < + boolean throws decl_stmt boolean = try = finally if == = int decl ReaderIterator int decl PackedInts int int int int decl ReaderIterator private private throws = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() = >>> if == || + > throw new + + + + + + + = & != = + = if == = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() else decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if == call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() else if > throw new + else decl_stmt ReaderIterator final final final final final = for = < ++ = int call int.next() call int.next() call int.next() call int.next() call int.next() decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if == decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() for = < ++ + = + * else if > throw new + else decl_stmt ReaderIterator final final final final final = for = < ++ + = int call int.next() call int.next() call int.next() call int.next() call int.next() for = < ++ + += for = < ++ decl_stmt int final final = + - decl_stmt int final final = if == != == throw new + + + = call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() if decl_stmt int final final = if = = for = < decl_stmt int final final = - call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() = + += += else call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() if != throw new + + + int int int int int int int DataInput throws if == throw new decl_stmt int final final = - decl_stmt int final final = decl_stmt int final final = + - decl_stmt int final final = decl_stmt int final final = decl_stmt org.apache.lucene.store.DataInput final final if == = new else if = new + else if call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() - = new decl_stmt int = throws assert <= if == throw new decl_stmt int final final = - call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() += public public throws if == -- return ++ public public throws while > -= += += -= else call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() assert == = new return new int throws assert <= if == throw new decl_stmt int final final = - call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() += public public throws if == -- return ++ public public throws while > -= += += -= throws if call BlockState.contains() call BlockState.contains() call BlockState.contains() call BlockState.contains() call BlockState.contains() == call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call BlockState.reset() call BlockState.reset() call BlockState.reset() call BlockState.reset() call BlockState.reset() assert call BlockState.contains() call BlockState.contains() call BlockState.contains() call BlockState.contains() call BlockState.contains() return call BlockState.document() call BlockState.document() call BlockState.document() call BlockState.document() call BlockState.document() long SerializedDocument int int FieldInfo public public throws decl_stmt SerializedDocument final final = for = < ++ decl_stmt long final final = call SerializedDocument.in() call SerializedDocument.in() call SerializedDocument.in() call SerializedDocument.in() call SerializedDocument.in() call SerializedDocument.in() call SerializedDocument.in() call SerializedDocument.in() call SerializedDocument.in() decl_stmt int final final = >>> decl_stmt org.apache.lucene.index.FieldInfo final final = call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) decl_stmt int final final = & assert <= : + switch case break case if == - return break case return public public return new public public return new return return return return return return return return return public public return call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.ramBytesUsed() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.ramBytesUsed() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.ramBytesUsed() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.ramBytesUsed() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.ramBytesUsed() public < public < return public public throws public public return + + + + +