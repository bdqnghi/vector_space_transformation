org.apache.solr.core java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collections import java.util.LinkedHashMap import java.util.List import java.util.Map import org.apache.solr.common.util.StrUtils import org.apache.solr.request.SolrRequestHandler import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.core.RequestHandlers SolrCore Logger decl PluginBag public static public static if == return if && > return - return public public return call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() String public public decl_stmt java.lang.String = if == return call decl PluginBag.remove() call decl PluginBag.remove() call decl PluginBag.remove() call decl PluginBag.remove() call decl PluginBag.remove() return call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() public < public < return decl Map decl ArrayList decl List decl List decl_stmt java.util.List < = call org.apache.solr.core.SolrCore.getImplicitHandlers() call org.apache.solr.core.SolrCore.getImplicitHandlers() call org.apache.solr.core.SolrCore.getImplicitHandlers() call org.apache.solr.core.SolrCore.getImplicitHandlers() call org.apache.solr.core.SolrCore.getImplicitHandlers() decl_stmt java.util.Map < = new <> for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.util.ArrayList < = new <> call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl PluginBag.init() call decl PluginBag.init() call decl PluginBag.init() call decl PluginBag.init() call decl PluginBag.init() call decl PluginBag.alias() call decl PluginBag.alias() call decl PluginBag.alias() call decl PluginBag.alias() call decl PluginBag.alias() call decl PluginBag.getDefault() call decl PluginBag.getDefault() call decl PluginBag.getDefault() call decl PluginBag.getDefault() call decl PluginBag.getDefault() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) new <> call decl PluginBag.keySet() call decl PluginBag.keySet() call decl PluginBag.keySet() call decl PluginBag.keySet() call decl PluginBag.keySet() if call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() == && ! call decl PluginBag.alias() call decl PluginBag.alias() call decl PluginBag.alias() call decl PluginBag.alias() call decl PluginBag.alias() if call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() == && ! call decl PluginBag.alias() call decl PluginBag.alias() call decl PluginBag.alias() call decl PluginBag.alias() call decl PluginBag.alias() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() String decl List private private decl_stmt java.util.List < = new <> decl_stmt java.lang.String = if != for : if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() for : if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() = for : return public public call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close()