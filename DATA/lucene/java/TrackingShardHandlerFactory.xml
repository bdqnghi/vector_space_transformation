org.apache.solr.handler.component java.util.ArrayList import java.util.Collections import java.util.LinkedList import java.util.List import java.util.Map import java.util.Queue import java.util.concurrent.ConcurrentHashMap import org.apache.solr.client.solrj.embedded.JettySolrRunner import org.apache.solr.cloud.MiniSolrCloudCluster import org.apache.solr.common.cloud.DocCollection import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.ZkCoreNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.util.StrUtils import org.apache.solr.core.CoreContainer import class org.apache.solr.handler.component.TrackingShardHandlerFactory super super extends decl Queue public synchronized public synchronized < = public synchronized < public synchronized < return public synchronized public synchronized return != ShardHandler ShardHandlerFactory public public decl_stmt org.apache.solr.handler.component.ShardHandlerFactory final final = decl_stmt org.apache.solr.handler.component.ShardHandler final final = return new public public call ShardHandler.prepDistributed() call ShardHandler.prepDistributed() call ShardHandler.prepDistributed() call ShardHandler.prepDistributed() call ShardHandler.prepDistributed() public public synchronized if call decl Queue.offer() call decl Queue.offer() call decl Queue.offer() call decl Queue.offer() call decl Queue.offer() new call ShardHandler.submit() call ShardHandler.submit() call ShardHandler.submit() call ShardHandler.submit() call ShardHandler.submit() public public return call ShardHandler.takeCompletedIncludingErrors() call ShardHandler.takeCompletedIncludingErrors() call ShardHandler.takeCompletedIncludingErrors() call ShardHandler.takeCompletedIncludingErrors() call ShardHandler.takeCompletedIncludingErrors() public public return call ShardHandler.takeCompletedOrError() call ShardHandler.takeCompletedOrError() call ShardHandler.takeCompletedOrError() call ShardHandler.takeCompletedOrError() call ShardHandler.takeCompletedOrError() public public call ShardHandler.cancelAll() call ShardHandler.cancelAll() call ShardHandler.cancelAll() call ShardHandler.cancelAll() call ShardHandler.cancelAll() public public return public public public public synchronized if call decl Queue.offer() call decl Queue.offer() call decl Queue.offer() call decl Queue.offer() call decl Queue.offer() new public public return public public return public public public public return public public public static public static < TrackingShardHandlerFactory CoreContainer ShardHandlerFactory public static public static < < for : decl_stmt org.apache.solr.core.CoreContainer = decl_stmt org.apache.solr.handler.component.ShardHandlerFactory = call org.apache.solr.core.CoreContainer.getShardHandlerFactory() call org.apache.solr.core.CoreContainer.getShardHandlerFactory() call org.apache.solr.core.CoreContainer.getShardHandlerFactory() call org.apache.solr.core.CoreContainer.getShardHandlerFactory() call org.apache.solr.core.CoreContainer.getShardHandlerFactory() assert instanceof : + call ShardHandlerFactory.getClass() call ShardHandlerFactory.getClass() call ShardHandlerFactory.getClass() call ShardHandlerFactory.getClass() call ShardHandlerFactory.getClass() decl_stmt org.apache.solr.handler.component.TrackingShardHandlerFactory = call org.apache.solr.handler.component.TrackingShardHandlerFactory.setTrackingQueue(List,Queue) call org.apache.solr.handler.component.TrackingShardHandlerFactory.setTrackingQueue(List,Queue) call org.apache.solr.handler.component.TrackingShardHandlerFactory.setTrackingQueue(List,Queue) call org.apache.solr.handler.component.TrackingShardHandlerFactory.setTrackingQueue(List,Queue) call org.apache.solr.handler.component.TrackingShardHandlerFactory.setTrackingQueue(List,Queue) public public return + + + + + + + + decl List public public decl_stmt java.util.List < = if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public decl List decl List public public throws decl_stmt java.util.List < = decl_stmt java.util.List < = new <> for : if & != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > throw new + return call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() : call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() Slice decl List DocCollection String public < public < decl_stmt org.apache.solr.common.cloud.DocCollection = assert != decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) assert != for < < : decl_stmt java.util.List < = for < : call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() decl_stmt java.lang.String = new if call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() return new <> return decl Map decl List public < public < decl_stmt java.util.List < = new <> decl_stmt java.util.Map < < = for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() for : if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public < < public < < return