org.apache.lucene.util java.io.IOException import java.util.* import org.apache.lucene.store.BaseDirectoryWrapper import org.apache.lucene.store.DataInput import org.apache.lucene.store.DataOutput import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.IndexOutput import org.apache.lucene.store.MockDirectoryWrapper import org.junit.Ignore import class org.apache.lucene.util.TestPagedBytes super super extends decl Reader int int decl byte int int Random decl PagedBytes int BytesRef PagedBytes int int DataInput decl byte IndexInput BaseDirectoryWrapper IndexOutput public public throws decl_stmt java.util.Random = for = < * ++ decl_stmt org.apache.lucene.store.BaseDirectoryWrapper = if instanceof decl_stmt int final final = decl_stmt int final final = << decl_stmt org.apache.lucene.util.PagedBytes final final = new decl_stmt org.apache.lucene.store.IndexOutput final final = call BaseDirectoryWrapper.createOutput() call BaseDirectoryWrapper.createOutput() call BaseDirectoryWrapper.createOutput() call BaseDirectoryWrapper.createOutput() call BaseDirectoryWrapper.createOutput() decl_stmt int final final = decl_stmt byte final final final = new decl_stmt int = while < if == call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() ++ else decl_stmt int = - call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() += call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput final final = call BaseDirectoryWrapper.openInput() call BaseDirectoryWrapper.openInput() call BaseDirectoryWrapper.openInput() call BaseDirectoryWrapper.openInput() call BaseDirectoryWrapper.openInput() decl_stmt org.apache.lucene.store.DataInput final final = call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() decl_stmt java.io.Reader final final final final final = call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt byte final final final = new decl_stmt int = while < if == ++ = call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() else decl_stmt int = - call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) += decl_stmt org.apache.lucene.util.BytesRef final final = new for = < ++ decl_stmt int final final = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - decl_stmt int final final = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + - call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() for = < ++ + + call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() DataInput int decl Reader PagedBytes decl byte int int Random BytesRef int int int int decl PagedBytes decl byte DataOutput public public throws decl_stmt java.util.Random = for = < * ++ decl_stmt int final final = decl_stmt int final final = << decl_stmt org.apache.lucene.util.PagedBytes final final = new decl_stmt org.apache.lucene.store.DataOutput final final = call org.apache.lucene.util.PagedBytes.getDataOutput() call org.apache.lucene.util.PagedBytes.getDataOutput() call org.apache.lucene.util.PagedBytes.getDataOutput() call org.apache.lucene.util.PagedBytes.getDataOutput() call org.apache.lucene.util.PagedBytes.getDataOutput() decl_stmt int final final = decl_stmt byte final final final = new decl_stmt int = while < if == call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) ++ else decl_stmt int = - call org.apache.lucene.store.DataOutput.writeBytes(byte,int) call org.apache.lucene.store.DataOutput.writeBytes(byte,int) call org.apache.lucene.store.DataOutput.writeBytes(byte,int) call org.apache.lucene.store.DataOutput.writeBytes(byte,int) call org.apache.lucene.store.DataOutput.writeBytes(byte,int) += decl_stmt java.io.Reader final final final final final = call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt org.apache.lucene.store.DataInput final final = call org.apache.lucene.util.PagedBytes.getDataInput() call org.apache.lucene.util.PagedBytes.getDataInput() call org.apache.lucene.util.PagedBytes.getDataInput() call org.apache.lucene.util.PagedBytes.getDataInput() call org.apache.lucene.util.PagedBytes.getDataInput() decl_stmt byte final final final = new decl_stmt int = while < if == ++ = call decl Reader.readByte() call decl Reader.readByte() call decl Reader.readByte() call decl Reader.readByte() call decl Reader.readByte() else decl_stmt int = - call decl Reader.readBytes() call decl Reader.readBytes() call decl Reader.readBytes() call decl Reader.readBytes() call decl Reader.readBytes() += decl_stmt org.apache.lucene.util.BytesRef final final = new for = < ++ decl_stmt int final final = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - decl_stmt int final final = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + - call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() for = < ++ + + decl byte decl Reader long int decl PagedBytes int PagedBytes int IndexInput BaseDirectoryWrapper IndexOutput public public throws decl_stmt org.apache.lucene.store.BaseDirectoryWrapper = if instanceof decl_stmt int final final = decl_stmt int final final = << decl_stmt byte = new / * for = < ++ = byte decl_stmt long final final = << + * decl_stmt org.apache.lucene.util.PagedBytes final final = new decl_stmt org.apache.lucene.store.IndexOutput final final = call BaseDirectoryWrapper.createOutput() call BaseDirectoryWrapper.createOutput() call BaseDirectoryWrapper.createOutput() call BaseDirectoryWrapper.createOutput() call BaseDirectoryWrapper.createOutput() for = < call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt int final final = int - call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() += call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput final final = call BaseDirectoryWrapper.openInput() call BaseDirectoryWrapper.openInput() call BaseDirectoryWrapper.openInput() call BaseDirectoryWrapper.openInput() call BaseDirectoryWrapper.openInput() call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) decl_stmt java.io.Reader final final final final final = call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) for : new - - decl_stmt org.apache.lucene.util.BytesRef = new call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() call org.apache.lucene.store.BaseDirectoryWrapper.close() int PagedBytes BytesRef int decl PagedBytes public public decl_stmt int final final = decl_stmt org.apache.lucene.util.PagedBytes = new decl_stmt int final final = for = < decl_stmt org.apache.lucene.util.BytesRef = new = call org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(BytesRef) call org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(BytesRef) call org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(BytesRef) call org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(BytesRef) call org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(BytesRef) call org.apache.lucene.util.PagedBytes.ramBytesUsed() call org.apache.lucene.util.PagedBytes.ramBytesUsed() call org.apache.lucene.util.PagedBytes.ramBytesUsed() call org.apache.lucene.util.PagedBytes.ramBytesUsed() call org.apache.lucene.util.PagedBytes.ramBytesUsed() decl_stmt java.io.Reader final final final final final = call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.ramBytesUsed() call org.apache.lucene.util.PagedBytes.ramBytesUsed() call org.apache.lucene.util.PagedBytes.ramBytesUsed() call org.apache.lucene.util.PagedBytes.ramBytesUsed() call org.apache.lucene.util.PagedBytes.ramBytesUsed() call decl PagedBytes.ramBytesUsed() call decl PagedBytes.ramBytesUsed() call decl PagedBytes.ramBytesUsed() call decl PagedBytes.ramBytesUsed() call decl PagedBytes.ramBytesUsed()