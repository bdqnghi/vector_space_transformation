org.apache.lucene.util java.math.BigInteger import java.util.Arrays import class org.apache.lucene.util.TestNumericUtils super super extends decl float decl double BytesRef BytesRef public public throws decl_stmt org.apache.lucene.util.BytesRef = decl_stmt org.apache.lucene.util.BytesRef = new new for = - < ++ if == = new new else call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() < BytesRef BytesRef public public throws decl_stmt org.apache.lucene.util.BytesRef = decl_stmt org.apache.lucene.util.BytesRef = new new for = - < ++ if == = new new else call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() < BytesRef BytesRef int public public throws decl_stmt int = decl_stmt org.apache.lucene.util.BytesRef = decl_stmt org.apache.lucene.util.BytesRef = new new for = - < ++ if == = new new else call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() < decl BytesRef decl long public public throws decl_stmt long = new + + - - - - - - - - decl_stmt org.apache.lucene.util.BytesRef = new for = < ++ = new new for = < ++ - < decl BytesRef decl int public public throws decl_stmt int = new + + - - - - - - - - decl_stmt org.apache.lucene.util.BytesRef = new for = < ++ = new new for = < ++ - < decl BytesRef decl BigInteger public public throws decl_stmt java.math.BigInteger = new + + - - - - - - - - decl_stmt org.apache.lucene.util.BytesRef = new for = < ++ = new new for = < ++ - < decl long decl double public public throws decl_stmt double = new - - - - - - - - + - - decl_stmt long = new for = < ++ = == for = < ++ - < long long public public decl_stmt long final final = for : decl_stmt long final final = + + + + + > decl int decl float public public throws decl_stmt float = new - - - - - - - - + - - decl_stmt int = new for = < ++ = == for = < ++ - < int int public public decl_stmt int final final = for : decl_stmt int final final = + + + + + > decl byte BigInteger int BigInteger int BigInteger decl byte decl byte decl byte decl byte public public throws decl_stmt int = decl_stmt int = for = < ++ decl_stmt java.math.BigInteger = new * - decl_stmt java.math.BigInteger = new * - decl_stmt byte = new decl_stmt byte = call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() assert <= - decl_stmt byte = new decl_stmt byte = call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() assert <= - decl_stmt byte = new decl_stmt java.math.BigInteger = call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) call java.math.BigInteger.add(int,int) + + + + + + + new call java.math.BigInteger.equals(Object) call java.math.BigInteger.equals(Object) call java.math.BigInteger.equals(Object) call java.math.BigInteger.equals(Object) call java.math.BigInteger.equals(Object) new IllegalArgumentException decl byte decl byte public public throws decl_stmt byte = new byte decl_stmt byte = new = decl_stmt IllegalArgumentException = new call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() BigInteger decl byte BigInteger int int BigInteger decl byte decl byte BigInteger decl byte decl byte public public throws decl_stmt int = decl_stmt int = for = < ++ decl_stmt java.math.BigInteger = new * - decl_stmt java.math.BigInteger = new * - if call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) < decl_stmt java.math.BigInteger = = = decl_stmt byte = new decl_stmt byte = call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() assert <= : + + + - decl_stmt byte = new decl_stmt byte = call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() assert <= assert <= : + + + - decl_stmt byte = new decl_stmt java.math.BigInteger = call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) call java.math.BigInteger.subtract(BigInteger) + + + new + + + + call java.math.BigInteger.equals(Object) call java.math.BigInteger.equals(Object) call java.math.BigInteger.equals(Object) call java.math.BigInteger.equals(Object) call java.math.BigInteger.equals(Object) new IllegalArgumentException decl byte decl byte public public throws decl_stmt byte = new = byte decl_stmt byte = new = byte decl_stmt IllegalArgumentException = new call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() decl byte int public public decl_stmt byte = new for = < ++ decl_stmt int = decl byte long public public decl_stmt byte = new for = < ++ decl_stmt long = decl byte float float public public decl_stmt byte = new for = < ++ decl_stmt float = decl_stmt float = decl byte double double public public decl_stmt byte = new for = < ++ decl_stmt double = decl_stmt double = decl byte int BigInteger int public public for = < ++ decl_stmt java.math.BigInteger = decl_stmt int = call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() call java.math.BigInteger.toByteArray() decl_stmt int = + decl_stmt byte = new BytesRef int int BytesRef public public decl_stmt org.apache.lucene.util.BytesRef = new new decl_stmt org.apache.lucene.util.BytesRef = new new for = < ++ decl_stmt int = decl_stmt int = call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() BytesRef long long BytesRef public public decl_stmt org.apache.lucene.util.BytesRef = new new decl_stmt org.apache.lucene.util.BytesRef = new new for = < ++ decl_stmt long = decl_stmt long = call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() BytesRef float float BytesRef public public decl_stmt org.apache.lucene.util.BytesRef = new new decl_stmt org.apache.lucene.util.BytesRef = new new for = < ++ decl_stmt float = decl_stmt float = call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() BytesRef double double BytesRef public public decl_stmt org.apache.lucene.util.BytesRef = new new decl_stmt org.apache.lucene.util.BytesRef = new new for = < ++ decl_stmt double = decl_stmt double = call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() BigInteger BytesRef BytesRef BigInteger int public public for = < ++ decl_stmt int = decl_stmt java.math.BigInteger = decl_stmt org.apache.lucene.util.BytesRef = new new decl_stmt java.math.BigInteger = decl_stmt org.apache.lucene.util.BytesRef = new new call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo()