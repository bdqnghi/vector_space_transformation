org.apache.lucene.analysis.ja.util java.io.BufferedOutputStream import java.io.File import java.io.FileOutputStream import java.io.IOException import java.io.OutputStream import java.nio.ByteBuffer import java.nio.channels.Channels import java.nio.channels.WritableByteChannel import java.util.ArrayList import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.store.DataOutput import org.apache.lucene.store.OutputStreamDataOutput import org.apache.lucene.util.ArrayUtil import org.apache.lucene.analysis.ja.dict.BinaryDictionary import class org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter ByteBuffer decl int int decl int decl Class decl ArrayList int String ByteBuffer String short int String String int short String int String StringBuilder int String int short public public decl_stmt short = decl_stmt short = decl_stmt short = decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt java.lang.String = assert call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > if ! if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt int = call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() decl_stmt int = + + * call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() if > decl_stmt ByteBuffer = call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() + - call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() = decl_stmt int = if ! || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) |= if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) |= if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) |= assert == assert < decl_stmt int = + - for = < ++ decl_stmt java.lang.String = assert == || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call ByteBuffer.putShort() call ByteBuffer.putShort() call ByteBuffer.putShort() call ByteBuffer.putShort() call ByteBuffer.putShort() << | call ByteBuffer.putShort() call ByteBuffer.putShort() call ByteBuffer.putShort() call ByteBuffer.putShort() call ByteBuffer.putShort() if & != assert call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() < decl_stmt int = decl_stmt int = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() << | for = < call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() ++ call ByteBuffer.putChar() call ByteBuffer.putChar() call ByteBuffer.putChar() call ByteBuffer.putChar() call ByteBuffer.putChar() call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) if & != if call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() << | else call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() << for = < call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() ++ call ByteBuffer.putChar() call ByteBuffer.putChar() call ByteBuffer.putChar() call ByteBuffer.putChar() call ByteBuffer.putChar() call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) if & != if call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() << | else call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() << for = < call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() ++ call ByteBuffer.putChar() call ByteBuffer.putChar() call ByteBuffer.putChar() call ByteBuffer.putChar() call ByteBuffer.putChar() call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) return call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() char private private for = < ++ decl_stmt char = if < || || return return private private for = < ++ call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() - char char private private decl_stmt char = new for = < ++ decl_stmt char = if > && < = + else = return new int public static public static decl_stmt int = < : for = < ++ if != return return public public assert > : + + + if > assert > : + + + = + for = + <= ++ = else assert == = + = ++ = = protected final protected final return + + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() String public public throws decl_stmt java.lang.String final final = + + + int int int OutputStream DataOutput protected protected throws new decl_stmt java.io.OutputStream = new try = new decl_stmt org.apache.lucene.store.DataOutput final final = new decl_stmt int final final = + call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) + decl_stmt int = = for = < ++ decl_stmt int final final = = - assert >= if == call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) << | ++ else call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) << += assert == : + + + finally call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() String OutputStream DataOutput protected protected throws new decl_stmt java.io.OutputStream = new try = new decl_stmt org.apache.lucene.store.DataOutput final final = new call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) for : if == call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) byte call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) byte call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) byte else decl_stmt java.lang.String = assert == : + call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) call org.apache.lucene.store.DataOutput.writeString(String) finally call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() FileOutputStream WritableByteChannel DataOutput protected protected throws new decl_stmt java.io.FileOutputStream final final = new try decl_stmt org.apache.lucene.store.DataOutput final final = new call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call org.apache.lucene.store.DataOutput.writeVInt(int) call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() decl_stmt java.nio.channels.WritableByteChannel final final = call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call ByteBuffer.flip() call WritableByteChannel.write() call WritableByteChannel.write() call WritableByteChannel.write() call WritableByteChannel.write() call WritableByteChannel.write() assert call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() call ByteBuffer.remaining() == finally call java.io.FileOutputStream.close() call java.io.FileOutputStream.close() call java.io.FileOutputStream.close() call java.io.FileOutputStream.close() call java.io.FileOutputStream.close()