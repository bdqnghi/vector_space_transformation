org.apache.lucene.codecs.simpletext java.io.IOException import org.apache.lucene.codecs.FieldsConsumer import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.Fields import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import class org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter super super extends BytesRef BytesRef BytesRefBuilder BytesRef BytesRef BytesRef BytesRef BytesRef BytesRef SegmentWriteState BytesRef IndexOutput public public throws boolean BytesRef boolean Terms int TermsEnum int int int boolean boolean int boolean int boolean FieldInfo int BytesRef PostingsEnum public public throws for : decl_stmt org.apache.lucene.index.Terms = if == continue decl_stmt org.apache.lucene.index.FieldInfo = decl_stmt boolean = decl_stmt boolean = call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() decl_stmt boolean = call Terms.hasFreqs() call Terms.hasFreqs() call Terms.hasFreqs() call Terms.hasFreqs() call Terms.hasFreqs() decl_stmt boolean = call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() decl_stmt boolean = call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() decl_stmt int = if = if = | if = | else if = | decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.index.PostingsEnum = while decl_stmt org.apache.lucene.util.BytesRef = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == break = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) assert != : + + + + + decl_stmt boolean = while decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() if == break if ! if ! = = if decl_stmt int = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() if decl_stmt int = for = < ++ decl_stmt int = call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() if decl_stmt int = call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() decl_stmt int = call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() assert >= assert >= : + + + = decl_stmt org.apache.lucene.util.BytesRef = call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() if != && > assert != private private throws private private throws private private throws public public throws if != try finally call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() =