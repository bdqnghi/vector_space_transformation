org.apache.solr.handler.dataimport java.lang.invoke.MethodHandles import java.util.* import org.slf4j.Logger import org.slf4j.LoggerFactory import java.util.regex.Matcher import java.util.regex.Pattern import class org.apache.solr.handler.dataimport.RegexTransformer super super extends String String Logger decl HashMap String String String decl List Map String decl List String List Object List String decl Map String decl Map String String Object String public < public < < decl_stmt java.util.List < < = for < : decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = if != || != decl_stmt java.lang.String = if == = decl_stmt java.lang.Object = if == continue if instanceof decl_stmt java.util.List < = < decl_stmt java.util.List = new decl_stmt java.util.Map < = for : decl_stmt java.lang.Object = if != if instanceof decl_stmt java.util.Map = for : call java.util.Map.entrySet() call java.util.Map.entrySet() call java.util.Map.entrySet() call java.util.Map.entrySet() call java.util.Map.entrySet() decl_stmt java.util.Map < = < decl_stmt java.util.List = if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() if == = new <> = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() if call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() instanceof call java.util.List.addAll(Collection) call java.util.List.addAll(Collection) call java.util.List.addAll(Collection) call java.util.List.addAll(Collection) call java.util.List.addAll(Collection) call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() else call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() else if instanceof call java.util.List.addAll(Collection) call java.util.List.addAll(Collection) call java.util.List.addAll(Collection) call java.util.List.addAll(Collection) call java.util.List.addAll(Collection) else call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) if != else decl_stmt java.lang.String = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() decl_stmt java.lang.Object = if != if instanceof else return Pattern Matcher private private if != return else if != decl_stmt java.util.regex.Pattern = decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) return call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.replaceAll(String) call java.util.regex.Matcher.replaceAll(String) call java.util.regex.Matcher.replaceAll(String) call java.util.regex.Matcher.replaceAll(String) call java.util.regex.Matcher.replaceAll(String) : else return decl String decl List private < private < decl_stmt java.lang.String = decl_stmt java.util.List < = new <> call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return decl Map Matcher List decl String String Pattern private private decl_stmt java.lang.String = if != && > = decl_stmt java.util.regex.Pattern = decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) && call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() > if call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() > decl_stmt java.util.List = decl_stmt java.util.Map < = if == = new else = new <> for = <= call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() ++ try if != call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) else if != if <= decl_stmt java.lang.String = - if != && call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() > call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return == : else return call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) return Pattern private private decl_stmt java.util.regex.Pattern = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() if == call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() = return