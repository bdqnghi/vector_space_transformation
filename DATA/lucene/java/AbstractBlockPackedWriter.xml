org.apache.lucene.util.packed static static org.apache.lucene.util.packed.PackedInts.checkBlockSize import java.io.IOException import java.util.Arrays import org.apache.lucene.store.DataOutput import class org.apache.lucene.util.packed.AbstractBlockPackedWriter decl byte int int boolean decl long int int int long DataOutput int static static throws decl_stmt int = while & ~ != && ++ < call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) & | >>>= call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) call java.io.DataOutput.writeByte(int) byte public public assert != = = = = private private if throw new public public throws if == ++ = ++ throws if != && != throw new + if == = += public public throws if > = public public return int int decl Encoder decl PackedInts protected final protected final throws decl_stmt org.apache.lucene.search.highlight.Encoder final final final final final = decl_stmt int final final = / call decl PackedInts.byteValueCount() call decl PackedInts.byteValueCount() call decl PackedInts.byteValueCount() call decl PackedInts.byteValueCount() call decl PackedInts.byteValueCount() decl_stmt int final final = call decl PackedInts.byteBlockCount() call decl PackedInts.byteBlockCount() call decl PackedInts.byteBlockCount() call decl PackedInts.byteBlockCount() call decl PackedInts.byteBlockCount() * if == || < = new if < call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() decl_stmt int final final = int call org.apache.lucene.store.DataOutput.writeBytes(byte,int) call org.apache.lucene.store.DataOutput.writeBytes(byte,int) call org.apache.lucene.store.DataOutput.writeBytes(byte,int) call org.apache.lucene.store.DataOutput.writeBytes(byte,int) call org.apache.lucene.store.DataOutput.writeBytes(byte,int)