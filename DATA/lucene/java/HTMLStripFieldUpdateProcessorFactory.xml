org.apache.solr.update.processor org.apache.solr.core.SolrCore import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.lucene.analysis.charfilter.HTMLStripCharFilter import org.apache.commons.io.IOUtils import java.io.IOException import java.io.Reader import java.io.StringReader import java.io.StringWriter import class org.apache.solr.update.processor.HTMLStripFieldUpdateProcessorFactory super super extends public public final final return CharSequence StringWriter Reader public public return new protected protected final final if instanceof decl_stmt java.lang.CharSequence = decl_stmt StringWriter = new call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() decl_stmt java.io.Reader = try = new new call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() return call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() catch return finally return CharSequence StringWriter Reader protected protected final final if instanceof decl_stmt java.lang.CharSequence = decl_stmt StringWriter = new call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() decl_stmt java.io.Reader = try = new new call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() return call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() catch return finally return