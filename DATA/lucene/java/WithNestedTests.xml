org.apache.lucene.util java.io.ByteArrayOutputStream import java.io.PrintStream import java.io.UnsupportedEncodingException import java.nio.charset.StandardCharsets import java.util.List import org.apache.lucene.util.FailureMarker import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures import org.apache.lucene.util.TestRuleIgnoreTestSuites import org.apache.lucene.util.TestRuleMarkFailure import org.apache.lucene.util.TestRuleRestoreSystemProperties import org.apache.lucene.util.LuceneTestCase.SuppressSysoutChecks import org.junit.After import org.junit.Assert import org.junit.Assume import org.junit.Before import org.junit.ClassRule import org.junit.Rule import org.junit.rules.RuleChain import org.junit.rules.TestRule import org.junit.runner.Result import org.junit.runner.notification.Failure import com.carrotsearch.randomizedtesting.RandomizedRunner import com.carrotsearch.randomizedtesting.RandomizedTest import com.carrotsearch.randomizedtesting.SysGlobals import com.carrotsearch.randomizedtesting.rules.TestRuleAdapter import class org.apache.lucene.util.WithNestedTests ByteArrayOutputStream boolean PrintStream TestRule PrintStream TestRule ByteArrayOutputStream protected static protected static return TestRuleIgnoreAfterMaxFailures protected protected throws if ! || ! || ! || ! decl_stmt org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures = new = protected protected < throws if != String private private decl_stmt java.lang.String = return == || call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() protected protected < throws if && + + + public final public final if = = try = new new = new new catch throw new public final public final if StringBuilder protected protected if != decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + + + + call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() protected protected return new call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() protected protected return new call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray()