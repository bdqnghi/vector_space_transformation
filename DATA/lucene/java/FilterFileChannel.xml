org.apache.lucene.mockfile java.io.IOException import java.nio.ByteBuffer import java.nio.MappedByteBuffer import java.nio.channels.FileChannel import java.nio.channels.FileLock import java.nio.channels.ReadableByteChannel import java.nio.channels.WritableByteChannel import java.util.Objects import class org.apache.lucene.mockfile.FilterFileChannel super super extends FileChannel public public throws return call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) public public throws return call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) public public throws return call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) public public throws return call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) public public throws return call FileChannel.position() call FileChannel.position() call FileChannel.position() call FileChannel.position() call FileChannel.position() public public throws call FileChannel.position() call FileChannel.position() call FileChannel.position() call FileChannel.position() call FileChannel.position() return public public throws return call FileChannel.size() call FileChannel.size() call FileChannel.size() call FileChannel.size() call FileChannel.size() public public throws call FileChannel.truncate() call FileChannel.truncate() call FileChannel.truncate() call FileChannel.truncate() call FileChannel.truncate() return public public throws call FileChannel.force() call FileChannel.force() call FileChannel.force() call FileChannel.force() call FileChannel.force() public public throws return call FileChannel.transferTo() call FileChannel.transferTo() call FileChannel.transferTo() call FileChannel.transferTo() call FileChannel.transferTo() public public throws return call FileChannel.transferFrom() call FileChannel.transferFrom() call FileChannel.transferFrom() call FileChannel.transferFrom() call FileChannel.transferFrom() public public throws return call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) public public throws return call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) call java.nio.channels.FileChannel.write(ByteBuffer) public public throws return call FileChannel.map() call FileChannel.map() call FileChannel.map() call FileChannel.map() call FileChannel.map() public public throws return call java.nio.channels.FileChannel.lock() call java.nio.channels.FileChannel.lock() call java.nio.channels.FileChannel.lock() call java.nio.channels.FileChannel.lock() call java.nio.channels.FileChannel.lock() public public throws return call java.nio.channels.FileChannel.tryLock() call java.nio.channels.FileChannel.tryLock() call java.nio.channels.FileChannel.tryLock() call java.nio.channels.FileChannel.tryLock() call java.nio.channels.FileChannel.tryLock() protected protected throws call FileChannel.close() call FileChannel.close() call FileChannel.close() call FileChannel.close() call FileChannel.close()