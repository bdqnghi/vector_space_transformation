org.apache.solr.store.hdfs java.io.IOException import java.lang.invoke.MethodHandles import org.apache.hadoop.conf.Configuration import org.apache.hadoop.fs.FSDataOutputStream import org.apache.hadoop.fs.FileAlreadyExistsException import org.apache.hadoop.fs.FileSystem import org.apache.hadoop.fs.Path import org.apache.hadoop.ipc.RemoteException import org.apache.lucene.store.Directory import org.apache.lucene.store.Lock import org.apache.lucene.store.LockFactory import org.apache.lucene.store.LockObtainFailedException import org.apache.lucene.store.LockReleaseFailedException import org.apache.solr.common.util.IOUtils import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.store.hdfs.HdfsLockFactory super super extends HdfsLockFactory Logger FileSystem Configuration boolean Path HdfsDirectory FSDataOutputStream Path public public throws if ! instanceof throw new + decl_stmt org.apache.solr.store.hdfs.HdfsDirectory final final = decl_stmt Configuration final final = call org.apache.solr.store.hdfs.HdfsDirectory.getConfiguration() call org.apache.solr.store.hdfs.HdfsDirectory.getConfiguration() call org.apache.solr.store.hdfs.HdfsDirectory.getConfiguration() call org.apache.solr.store.hdfs.HdfsDirectory.getConfiguration() call org.apache.solr.store.hdfs.HdfsDirectory.getConfiguration() decl_stmt java.nio.file.Path final final = call HdfsDirectory.getHdfsDirPath() call HdfsDirectory.getHdfsDirPath() call HdfsDirectory.getHdfsDirPath() call HdfsDirectory.getHdfsDirPath() call HdfsDirectory.getHdfsDirPath() decl_stmt java.nio.file.Path final final = new decl_stmt FSDataOutputStream = decl_stmt java.io.FileSystem final final = call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() while try if ! call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() decl_stmt boolean = call FileSystem.mkdirs() call FileSystem.mkdirs() call FileSystem.mkdirs() call FileSystem.mkdirs() call FileSystem.mkdirs() if ! throw new + else call FileSystem.mkdirs() call FileSystem.mkdirs() call FileSystem.mkdirs() call FileSystem.mkdirs() call FileSystem.mkdirs() = call FileSystem.create() call FileSystem.create() call FileSystem.create() call FileSystem.create() call FileSystem.create() break catch throw new + catch if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() try catch continue throw new + catch throw new + finally return new FileSystem public public throws if return decl_stmt java.io.FileSystem final final = try if call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() && ! call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() throw new + finally public public throws public public return + +