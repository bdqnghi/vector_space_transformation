org.apache.lucene.document java.util.zip.Deflater import java.util.zip.Inflater import java.util.zip.DataFormatException import java.io.ByteArrayOutputStream import org.apache.lucene.util.BytesRef import org.apache.lucene.util.UnicodeUtil import class org.apache.lucene.document.CompressionTools int Deflater ByteArrayOutputStream decl byte public static public static decl_stmt java.io.ByteArrayOutputStream = new decl_stmt java.util.zip.Deflater = new try call java.util.zip.Deflater.setLevel(int) call java.util.zip.Deflater.setLevel(int) call java.util.zip.Deflater.setLevel(int) call java.util.zip.Deflater.setLevel(int) call java.util.zip.Deflater.setLevel(int) call java.util.zip.Deflater.setInput(byte) call java.util.zip.Deflater.setInput(byte) call java.util.zip.Deflater.setInput(byte) call java.util.zip.Deflater.setInput(byte) call java.util.zip.Deflater.setInput(byte) call java.util.zip.Deflater.finish() call java.util.zip.Deflater.finish() call java.util.zip.Deflater.finish() call java.util.zip.Deflater.finish() call java.util.zip.Deflater.finish() decl_stmt byte final final final = new while ! call java.util.zip.Deflater.finished() call java.util.zip.Deflater.finished() call java.util.zip.Deflater.finished() call java.util.zip.Deflater.finished() call java.util.zip.Deflater.finished() decl_stmt int = call java.util.zip.Deflater.deflate(byte,int,int,int) call java.util.zip.Deflater.deflate(byte,int,int,int) call java.util.zip.Deflater.deflate(byte,int,int,int) call java.util.zip.Deflater.deflate(byte,int,int,int) call java.util.zip.Deflater.deflate(byte,int,int,int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) finally call java.util.zip.Deflater.end() call java.util.zip.Deflater.end() call java.util.zip.Deflater.end() call java.util.zip.Deflater.end() call java.util.zip.Deflater.end() return call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() public static public static return public static public static return public static public static return decl byte int public static public static decl_stmt byte = new * decl_stmt int final final = return public static public static throws return public static public static throws return int ByteArrayOutputStream decl byte Inflater public static public static throws decl_stmt java.io.ByteArrayOutputStream = new decl_stmt java.util.zip.Inflater = new try call java.util.zip.Inflater.setInput(byte,int,int) call java.util.zip.Inflater.setInput(byte,int,int) call java.util.zip.Inflater.setInput(byte,int,int) call java.util.zip.Inflater.setInput(byte,int,int) call java.util.zip.Inflater.setInput(byte,int,int) decl_stmt byte final final final = new while ! call java.util.zip.Inflater.finished() call java.util.zip.Inflater.finished() call java.util.zip.Inflater.finished() call java.util.zip.Inflater.finished() call java.util.zip.Inflater.finished() decl_stmt int = call java.util.zip.Inflater.inflate(byte,int,int) call java.util.zip.Inflater.inflate(byte,int,int) call java.util.zip.Inflater.inflate(byte,int,int) call java.util.zip.Inflater.inflate(byte,int,int) call java.util.zip.Inflater.inflate(byte,int,int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) call java.io.ByteArrayOutputStream.write(int) finally call java.util.zip.Inflater.end() call java.util.zip.Inflater.end() call java.util.zip.Inflater.end() call java.util.zip.Inflater.end() call java.util.zip.Inflater.end() return call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() public static public static throws return decl byte decl char int public static public static throws decl_stmt byte final final final = decl_stmt char final final final = new decl_stmt int final final = return new public static public static throws return