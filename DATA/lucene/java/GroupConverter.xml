org.apache.solr.search.grouping.distributed.command java.util.ArrayList import java.util.Collection import java.util.Date import java.util.List import org.apache.lucene.search.grouping.GroupDocs import org.apache.lucene.search.grouping.SearchGroup import org.apache.lucene.search.grouping.TopGroups import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.mutable.MutableValue import org.apache.lucene.util.mutable.MutableValueDate import org.apache.lucene.util.mutable.MutableValueDouble import org.apache.lucene.util.mutable.MutableValueFloat import org.apache.lucene.util.mutable.MutableValueInt import org.apache.lucene.util.mutable.MutableValueLong import org.apache.solr.schema.FieldType import org.apache.solr.schema.SchemaField import org.apache.solr.schema.TrieField import class org.apache.solr.search.grouping.distributed.command.GroupConverter BytesRefBuilder decl SearchGroup FieldType decl List static < < static < < < < if == return decl_stmt org.apache.solr.schema.FieldType = decl_stmt java.util.List < < = new <> for < : decl_stmt org.apache.lucene.search.grouping.SearchGroup < = new < = if decl_stmt org.apache.lucene.util.BytesRefBuilder = new call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) = call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() else = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return MutableValueFloat MutableValueLong MutableValueInt MutableValueDouble decl SearchGroup FieldType decl TrieTypes MutableValue decl TrieField decl List static < < static < < < < decl_stmt org.apache.solr.schema.FieldType = decl_stmt java.util.List < < = new <> for < : decl_stmt org.apache.lucene.search.grouping.SearchGroup < = new < = decl_stmt TrieTypes = decl_stmt org.apache.lucene.util.mutable.MutableValue final final switch case decl_stmt org.apache.lucene.util.mutable.MutableValueInt = new if == = = else = call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) = break case decl_stmt org.apache.lucene.util.mutable.MutableValueFloat = new if == = = else = call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) = break case decl_stmt org.apache.lucene.util.mutable.MutableValueDouble = new if == = = else = call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) = break case decl_stmt org.apache.lucene.util.mutable.MutableValueLong = new if == = = else = call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) = break case decl_stmt org.apache.lucene.util.mutable.MutableValueDate = new if == = = else = call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) = break default: throw new = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return BytesRefBuilder decl GroupDocs BytesRef FieldType decl GroupDocs static < static < < if == return decl_stmt org.apache.solr.schema.FieldType = decl_stmt GroupDocs < = new for = < ++ decl_stmt GroupDocs < = decl_stmt org.apache.lucene.util.BytesRef final final if decl_stmt org.apache.lucene.util.BytesRefBuilder = new call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call decl GroupDocs.groupValue() call decl GroupDocs.groupValue() call decl GroupDocs.groupValue() call decl GroupDocs.groupValue() call decl GroupDocs.groupValue() call decl GroupDocs.groupValue() call decl GroupDocs.groupValue() call decl GroupDocs.groupValue() call decl GroupDocs.groupValue() = call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() else = = new < return new <