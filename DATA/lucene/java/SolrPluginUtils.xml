org.apache.solr.util java.io.IOException import java.lang.invoke.MethodHandles import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import java.util.TreeMap import java.util.regex.Pattern import org.apache.lucene.document.Document import org.apache.lucene.index.IndexableField import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanClause.Occur import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.BoostQuery import org.apache.lucene.search.DisjunctionMaxQuery import org.apache.lucene.search.Explanation import org.apache.lucene.search.Query import org.apache.lucene.search.Sort import org.apache.solr.common.SolrDocument import org.apache.solr.common.SolrDocumentList import org.apache.solr.common.SolrException import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.MapSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.common.util.StrUtils import org.apache.solr.core.PluginInfo import org.apache.solr.core.RequestParams import org.apache.solr.handler.component.HighlightComponent import org.apache.solr.handler.component.ResponseBuilder import org.apache.solr.handler.component.ShardDoc import org.apache.solr.handler.component.ShardRequest import org.apache.solr.highlight.SolrHighlighter import org.apache.solr.parser.QueryParser import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.SolrRequestHandler import org.apache.solr.request.json.RequestUtil import org.apache.solr.response.SolrQueryResponse import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.SchemaField import org.apache.solr.search.CacheRegenerator import org.apache.solr.search.DocIterator import org.apache.solr.search.DocList import org.apache.solr.search.DocSet import org.apache.solr.search.FieldParams import org.apache.solr.search.QParser import org.apache.solr.search.QueryParsing import org.apache.solr.search.ReturnFields import org.apache.solr.search.SolrCache import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.search.SolrQueryParser import org.apache.solr.search.SortSpecParsing import org.apache.solr.search.SyntaxError import org.slf4j.Logger import org.slf4j.LoggerFactory import com.google.common.collect.ImmutableMap import static static org.apache.solr.core.PluginInfo.APPENDS import static static org.apache.solr.core.PluginInfo.DEFAULTS import static static org.apache.solr.core.PluginInfo.INVARIANTS import static static org.apache.solr.core.RequestParams.USEPARAM import class org.apache.solr.util.SolrPluginUtils Pattern Logger String Pattern Pattern Pattern Pattern decl Map Pattern Pattern MapSolrParams Pattern Pattern public static public static String RequestParams public static public static decl_stmt java.lang.String = if != decl_stmt org.apache.solr.core.RequestParams = = = = = if != && ! call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() decl_stmt org.apache.solr.core.RequestParams = = = = decl RequestParams private static private static if == return for : decl_stmt VersionedParams = if = else if = else = return public static public static throws return == : public static public static return call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) SolrIndexSearcher SchemaField SolrHighlighter ReturnFields DocIterator decl Set public static public static throws decl_stmt org.apache.solr.search.SolrIndexSearcher = if ! return decl_stmt ReturnFields = if call ReturnFields.getLuceneFieldNames() call ReturnFields.getLuceneFieldNames() call ReturnFields.getLuceneFieldNames() call ReturnFields.getLuceneFieldNames() call ReturnFields.getLuceneFieldNames() != decl_stmt java.util.Set < = call ReturnFields.getLuceneFieldNames() call ReturnFields.getLuceneFieldNames() call ReturnFields.getLuceneFieldNames() call ReturnFields.getLuceneFieldNames() call ReturnFields.getLuceneFieldNames() if = new <> decl_stmt org.apache.solr.highlight.SolrHighlighter = for : call org.apache.solr.highlight.SolrHighlighter.getHighlightFields(Query,SolrQueryRequest,String) call org.apache.solr.highlight.SolrHighlighter.getHighlightFields(Query,SolrQueryRequest,String) call org.apache.solr.highlight.SolrHighlighter.getHighlightFields(Query,SolrQueryRequest,String) call org.apache.solr.highlight.SolrHighlighter.getHighlightFields(Query,SolrQueryRequest,String) call org.apache.solr.highlight.SolrHighlighter.getHighlightFields(Query,SolrQueryRequest,String) call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() if != call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() decl_stmt org.apache.solr.search.DocIterator = for = < ++ call org.apache.solr.search.SolrIndexSearcher.doc(int,Set) call org.apache.solr.search.SolrIndexSearcher.doc(int,Set) call org.apache.solr.search.SolrIndexSearcher.doc(int,Set) call org.apache.solr.search.SolrIndexSearcher.doc(int,Set) call org.apache.solr.search.SolrIndexSearcher.doc(int,Set) call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() decl Set public static < public static < decl_stmt java.util.Set < = new <> if != for = < ++ if || break else if else if else if else if return NamedList public static public static throws decl_stmt org.apache.solr.common.util.NamedList = new return public static public static if decl NamedList SolrIndexSearcher DocList String decl NamedList IndexSchema boolean public static public static throws if decl_stmt org.apache.solr.search.SolrIndexSearcher = decl_stmt org.apache.solr.schema.IndexSchema = call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() decl_stmt boolean = if != decl_stmt org.apache.solr.common.util.NamedList < = : decl_stmt java.lang.String = if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > decl_stmt org.apache.solr.search.DocList = decl_stmt org.apache.solr.common.util.NamedList < = : decl List decl Explanation decl NamedList public static < public static < decl_stmt org.apache.solr.common.util.NamedList < = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt org.apache.lucene.search.Explanation = if == return decl_stmt java.util.List < < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() return decl NamedList public static < < public static < < < decl_stmt org.apache.solr.common.util.NamedList < < = new <> for < : call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() return Document String DocIterator decl NamedList int public static < public static < throws decl_stmt org.apache.solr.common.util.NamedList < = new <> decl_stmt org.apache.solr.search.DocIterator = for = < ++ decl_stmt int = call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() decl_stmt org.apache.lucene.document.Document = decl_stmt java.lang.String = call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() return decl NamedList private static < private static < < decl_stmt org.apache.solr.common.util.NamedList < = new <> for < : call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() + return Sort Query decl List String DocList public static public static throws decl_stmt java.util.List < = decl_stmt java.lang.String = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() >= call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() : try decl_stmt org.apache.lucene.search.Query = decl_stmt org.apache.lucene.search.Sort = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() >= = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.solr.search.DocList = return catch throw new + public static < public static < return new decl String decl String decl Map public static < public static < if == || == return new <> decl_stmt java.util.Map < = new <> for : if == continue = if == continue decl_stmt java.lang.String = call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) for : decl_stmt java.lang.String = call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() == : return FieldParams int decl String Float String decl String decl String decl List public static < public static < if == || == return new <> decl_stmt java.util.List < = new <> for : if == continue = if == continue decl_stmt java.lang.String = call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) for : decl_stmt java.lang.String = call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) decl_stmt java.lang.String = call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) decl_stmt java.lang.String = decl_stmt int = == : decl_stmt java.lang.Float = == : decl_stmt org.apache.solr.search.FieldParams = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return int int int int int public static public static decl_stmt int = decl_stmt int = decl_stmt int = for : if == if && instanceof decl_stmt int = if > = = else if == ++ else ++ decl_stmt int = + if < public static public static public static public static return decl BooleanQuery public static public static decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() for : call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() return call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() int decl String int int int static static decl_stmt int = = if - < = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) for : call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) decl_stmt java.lang.String = call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) decl_stmt int = if <= return else = return if - < = - decl_stmt int = decl_stmt float = * * / = < + int : int else decl_stmt int = = < + : return < : < : public static public static Query float BoostQuery private static private static for : decl_stmt org.apache.lucene.search.Query = decl_stmt float = while instanceof decl_stmt org.apache.lucene.search.BoostQuery = = call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() call org.apache.lucene.search.BoostQuery.getQuery() *= call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() call org.apache.lucene.search.BoostQuery.getBoost() if instanceof && ! && ! else StringBuilder char public static public static decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt char = if == || == || == || == || == || == || == || == || == || == || == || == || == || == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return String public static public static decl_stmt java.lang.String = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) return call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) int public static public static decl_stmt int = for = < ++ if == ++ if == & return return decl Map String public static < < public static < < < < for = < ++ decl_stmt java.util.Map < = if != decl_stmt java.lang.String = call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() if != call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() return String int ShardDoc public static public static < < assert == for = < ++ decl_stmt java.lang.String = decl_stmt org.apache.solr.handler.component.ShardDoc = if != decl_stmt int = = new <> Alias public public < decl_stmt Alias = new = = Alias decl List Query protected protected throws if decl_stmt Alias = decl_stmt java.util.List < = new <> for : call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() decl_stmt org.apache.lucene.search.Query = if != if != call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() = new call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call Alias.fields() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() : new else try return catch return String Sort SolrException public static public static decl_stmt java.lang.String = if == || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return decl_stmt org.apache.solr.common.SolrException = decl_stmt org.apache.lucene.search.Sort = try = catch = if == || != call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + return return decl List public static < public static < throws if == || == return decl_stmt java.util.List < = new <> for : if != && != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public throws return int SolrDocument SolrDocumentList SchemaField DocIterator Document IndexSchema public static public static < < throws decl_stmt org.apache.solr.schema.IndexSchema = decl_stmt org.apache.solr.common.SolrDocumentList = new call org.apache.solr.common.SolrDocumentList.setNumFound(long) call org.apache.solr.common.SolrDocumentList.setNumFound(long) call org.apache.solr.common.SolrDocumentList.setNumFound(long) call org.apache.solr.common.SolrDocumentList.setNumFound(long) call org.apache.solr.common.SolrDocumentList.setNumFound(long) call org.apache.solr.common.SolrDocumentList.setMaxScore(Float) call org.apache.solr.common.SolrDocumentList.setMaxScore(Float) call org.apache.solr.common.SolrDocumentList.setMaxScore(Float) call org.apache.solr.common.SolrDocumentList.setMaxScore(Float) call org.apache.solr.common.SolrDocumentList.setMaxScore(Float) call org.apache.solr.common.SolrDocumentList.setStart(long) call org.apache.solr.common.SolrDocumentList.setStart(long) call org.apache.solr.common.SolrDocumentList.setStart(long) call org.apache.solr.common.SolrDocumentList.setStart(long) call org.apache.solr.common.SolrDocumentList.setStart(long) decl_stmt org.apache.solr.search.DocIterator = while call DocIterator.hasNext() call DocIterator.hasNext() call DocIterator.hasNext() call DocIterator.hasNext() call DocIterator.hasNext() decl_stmt int = call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.solr.common.SolrDocument = new for : if == || decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() if && == || call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call org.apache.solr.common.SolrDocument.addField(String,Object) call DocIterator.score() call DocIterator.score() call DocIterator.score() call DocIterator.score() call DocIterator.score() call SolrDocumentList.add() call SolrDocumentList.add() call SolrDocumentList.add() call SolrDocumentList.add() call SolrDocumentList.add() if != new return String Object Method String decl Class public static public static < < if == return decl_stmt java.lang.Class final final final < = for < : decl_stmt java.lang.String = decl_stmt java.lang.String = + call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) + call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) try decl_stmt com.sun.jdi.Method final final = decl_stmt java.lang.Object final final = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) catch throw new + + + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() private static private static < for : if && == return throw new + + + StringBuilder public static public static if != decl_stmt java.lang.StringBuilder = new for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if & != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() == return call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() - return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return