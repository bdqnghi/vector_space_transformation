org.apache.solr.search java.io.Closeable import java.io.IOException import java.lang.invoke.MethodHandles import java.net.URL import java.nio.charset.StandardCharsets import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.Date import java.util.HashMap import java.util.HashSet import java.util.LinkedList import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicLong import org.apache.lucene.document.Document import org.apache.lucene.document.DocumentStoredFieldVisitor import org.apache.lucene.document.LazyDocument import org.apache.lucene.index.BinaryDocValues import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.DocValues import org.apache.lucene.index.DocValuesType import org.apache.lucene.index.ExitableDirectoryReader import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexableField import org.apache.lucene.index.LeafReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.MultiPostingsEnum import org.apache.lucene.index.NumericDocValues import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.SlowCompositeReaderWrapper import org.apache.lucene.index.SortedDocValues import org.apache.lucene.index.SortedSetDocValues import org.apache.lucene.index.StoredFieldVisitor.Status import org.apache.lucene.index.StoredFieldVisitor import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.BooleanClause.Occur import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.CollectionStatistics import org.apache.lucene.search.Collector import org.apache.lucene.search.ConstantScoreQuery import org.apache.lucene.search.DocIdSet import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.EarlyTerminatingSortingCollector import org.apache.lucene.search.Explanation import org.apache.lucene.search.FieldDoc import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.LeafCollector import org.apache.lucene.search.MatchAllDocsQuery import org.apache.lucene.search.MultiCollector import org.apache.lucene.search.Query import org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.Scorer import org.apache.lucene.search.SimpleCollector import org.apache.lucene.search.Sort import org.apache.lucene.search.SortField import org.apache.lucene.search.TermQuery import org.apache.lucene.search.TermStatistics import org.apache.lucene.search.TimeLimitingCollector import org.apache.lucene.search.TopDocs import org.apache.lucene.search.TopDocsCollector import org.apache.lucene.search.TopFieldCollector import org.apache.lucene.search.TopFieldDocs import org.apache.lucene.search.TopScoreDocCollector import org.apache.lucene.search.TotalHitCountCollector import org.apache.lucene.search.Weight import org.apache.lucene.store.Directory import org.apache.lucene.uninverting.UninvertingReader import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.NumericUtils import org.apache.solr.common.SolrDocumentBase import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.SolrException import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.core.DirectoryFactory.DirContext import org.apache.solr.core.DirectoryFactory import org.apache.solr.core.SolrConfig import org.apache.solr.core.SolrCore import org.apache.solr.core.SolrInfoMBean import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.SolrRequestInfo import org.apache.solr.response.SolrQueryResponse import org.apache.solr.schema.EnumField import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.SchemaField import org.apache.solr.schema.TrieDateField import org.apache.solr.schema.TrieDoubleField import org.apache.solr.schema.TrieFloatField import org.apache.solr.schema.TrieIntField import org.apache.solr.search.facet.UnInvertedField import org.apache.solr.search.stats.StatsSource import org.apache.solr.update.IndexFingerprint import org.apache.solr.update.SolrIndexConfig import org.slf4j.Logger import org.slf4j.LoggerFactory import com.google.common.base.Function import com.google.common.collect.Iterables import class org.apache.solr.search.SolrIndexSearcher super super extends super implements IndexSchema AtomicLong int FieldInfos IndexFingerprint Date int decl Comparator int AtomicLong Date decl Map Logger Object long int boolean decl Set int int decl Map DirectoryReader int int decl SolrCache decl SolrCache SolrCore decl Set DirectoryFactory LeafReader DirectoryReader decl SolrCache decl Collection String decl SolrCache String decl SolrCache String Query BitDocSet int int boolean boolean boolean long decl SolrCache boolean Directory private static private static throws decl_stmt org.apache.lucene.store.Directory final final = call DirectoryFactory.get() call DirectoryFactory.get() call DirectoryFactory.get() call DirectoryFactory.get() call DirectoryFactory.get() try return call org.apache.solr.core.SolrCore.getIndexReaderFactory() call org.apache.solr.core.SolrCore.getIndexReaderFactory() call org.apache.solr.core.SolrCore.getIndexReaderFactory() call org.apache.solr.core.SolrCore.getIndexReaderFactory() call org.apache.solr.core.SolrCore.getIndexReaderFactory() catch call DirectoryFactory.release() call DirectoryFactory.release() call DirectoryFactory.release() call DirectoryFactory.release() call DirectoryFactory.release() throw new private static private static throws assert != return call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() Sort int EarlyTerminatingSortingCollector long boolean Sort private private throws decl_stmt org.apache.lucene.search.EarlyTerminatingSortingCollector = if decl_stmt org.apache.lucene.search.Sort final final = decl_stmt int final final = decl_stmt org.apache.lucene.search.Sort final final = call org.apache.solr.core.SolrCore.getSolrCoreState() call org.apache.solr.core.SolrCore.getSolrCoreState() call org.apache.solr.core.SolrCore.getSolrCoreState() call org.apache.solr.core.SolrCore.getSolrCoreState() call org.apache.solr.core.SolrCore.getSolrCoreState() if == || <= || == || ! call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() else = = new decl_stmt boolean final final = if = new decl_stmt long final final = if > = new if != = try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch if instanceof throw finally if != call org.apache.lucene.search.EarlyTerminatingSortingCollector.terminatedEarly() call org.apache.lucene.search.EarlyTerminatingSortingCollector.terminatedEarly() call org.apache.lucene.search.EarlyTerminatingSortingCollector.terminatedEarly() call org.apache.lucene.search.EarlyTerminatingSortingCollector.terminatedEarly() call org.apache.lucene.search.EarlyTerminatingSortingCollector.terminatedEarly() if instanceof SolrRequestInfo StatsSource public public throws decl_stmt org.apache.solr.request.SolrRequestInfo final final = if != decl_stmt StatsSource final final = call org.apache.solr.request.SolrRequestInfo.getReq() call org.apache.solr.request.SolrRequestInfo.getReq() call org.apache.solr.request.SolrRequestInfo.getReq() call org.apache.solr.request.SolrRequestInfo.getReq() call org.apache.solr.request.SolrRequestInfo.getReq() if != return call StatsSource.termStatistics() call StatsSource.termStatistics() call StatsSource.termStatistics() call StatsSource.termStatistics() call StatsSource.termStatistics() return SolrRequestInfo StatsSource public public throws decl_stmt org.apache.solr.request.SolrRequestInfo final final = if != decl_stmt StatsSource final final = call org.apache.solr.request.SolrRequestInfo.getReq() call org.apache.solr.request.SolrRequestInfo.getReq() call org.apache.solr.request.SolrRequestInfo.getReq() call org.apache.solr.request.SolrRequestInfo.getReq() call org.apache.solr.request.SolrRequestInfo.getReq() if != return call StatsSource.collectionStatistics() call StatsSource.collectionStatistics() call StatsSource.collectionStatistics() call StatsSource.collectionStatistics() call StatsSource.collectionStatistics() return public public throws return public public throws return public public return public public return public public return + + + public public return public final public final return call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() public final public final throws return call DirectoryReader.docFreq() call DirectoryReader.docFreq() call DirectoryReader.docFreq() call DirectoryReader.docFreq() call DirectoryReader.docFreq() public final public final return public final public final return public final public final assert == return decl Map public public decl_stmt java.util.Map final final final < = call org.apache.solr.core.SolrCore.getInfoRegistry() call org.apache.solr.core.SolrCore.getInfoRegistry() call org.apache.solr.core.SolrCore.getInfoRegistry() call org.apache.solr.core.SolrCore.getInfoRegistry() call org.apache.solr.core.SolrCore.getInfoRegistry() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = new StringBuilder long public public throws if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() if decl_stmt java.lang.StringBuilder final final = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() else call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.solr.core.SolrCore.getInfoRegistry() call org.apache.solr.core.SolrCore.getInfoRegistry() call org.apache.solr.core.SolrCore.getInfoRegistry() call org.apache.solr.core.SolrCore.getInfoRegistry() call org.apache.solr.core.SolrCore.getInfoRegistry() decl_stmt long = call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() try if call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() catch if call org.apache.solr.core.DirectoryFactory.searchersReserveCommitPoints() call org.apache.solr.core.DirectoryFactory.searchersReserveCommitPoints() call org.apache.solr.core.DirectoryFactory.searchersReserveCommitPoints() call org.apache.solr.core.DirectoryFactory.searchersReserveCommitPoints() call org.apache.solr.core.DirectoryFactory.searchersReserveCommitPoints() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() for : if call DirectoryFactory.release() call DirectoryFactory.release() call DirectoryFactory.release() call DirectoryFactory.release() call DirectoryFactory.release() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() public public return public < public < return new < public public return public public return public < public < return SchemaField String public < public < synchronized if == = new <> for : decl_stmt java.lang.String final final = try decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) if call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() && call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() instanceof || call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() instanceof call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return int QueryResult DocList QueryCommand int int int QueryResultKey public static public static if != && == new public public throws if instanceof return if != && == new public public throws return if != && == decl_stmt int final final = new public public throws decl_stmt org.apache.solr.search.QueryResultKey = decl_stmt int = if <= decl_stmt org.apache.solr.search.DocList = decl_stmt int = call org.apache.solr.search.DocList.offset() call org.apache.solr.search.DocList.offset() call org.apache.solr.search.DocList.offset() call org.apache.solr.search.DocList.offset() call org.apache.solr.search.DocList.offset() + call org.apache.solr.search.DocList.size() call org.apache.solr.search.DocList.size() call org.apache.solr.search.DocList.size() call org.apache.solr.search.DocList.size() call org.apache.solr.search.DocList.size() = decl_stmt int = | decl_stmt org.apache.solr.search.grouping.distributed.command.QueryCommand = new call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) decl_stmt org.apache.solr.search.QueryResult = new return public public throws if instanceof return public public throws return int QueryResult DocList QueryCommand int int QueryResultKey public public throws decl_stmt org.apache.solr.search.QueryResultKey = decl_stmt int = if <= decl_stmt org.apache.solr.search.DocList = decl_stmt int = call org.apache.solr.search.DocList.offset() call org.apache.solr.search.DocList.offset() call org.apache.solr.search.DocList.offset() call org.apache.solr.search.DocList.offset() call org.apache.solr.search.DocList.offset() + call org.apache.solr.search.DocList.size() call org.apache.solr.search.DocList.size() call org.apache.solr.search.DocList.size() call org.apache.solr.search.DocList.size() call org.apache.solr.search.DocList.size() = decl_stmt int = | decl_stmt org.apache.solr.search.grouping.distributed.command.QueryCommand = new call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) decl_stmt org.apache.solr.search.QueryResult = new return public public throws return Status public public throws decl_stmt Status = if == return public public throws return < Document public public throws if != decl_stmt org.apache.lucene.document.Document = call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() if != return FieldInfo byte Number BytesRef Status private private throws for : decl_stmt org.apache.lucene.index.FieldInfo final final = call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) decl_stmt Status final final = if == return if == continue if != decl_stmt org.apache.lucene.util.BytesRef final final = decl_stmt byte final final = new else if != decl_stmt java.lang.Number final final = if instanceof call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() else if instanceof call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() else if instanceof call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() else if instanceof call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() else throw new else SetNonLazyFieldSelector Document DirectoryReader public public < throws decl_stmt org.apache.lucene.document.Document if != = call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() if != return decl_stmt org.apache.lucene.index.DirectoryReader final final = if ! || == = call DirectoryReader.document() call DirectoryReader.document() call DirectoryReader.document() call DirectoryReader.document() call DirectoryReader.document() else decl_stmt SetNonLazyFieldSelector final final = new call DirectoryReader.document() call DirectoryReader.document() call DirectoryReader.document() call DirectoryReader.document() call DirectoryReader.document() = if != call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() return SortedDocValues Long decl List SchemaField BytesRef Object BinaryDocValues SortedSetDocValues LeafReader DocValuesType NumericDocValues public public < throws decl_stmt org.apache.lucene.index.LeafReader final final = for : decl_stmt org.apache.solr.schema.SchemaField final final = call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) if == || ! call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() || call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() continue if ! continue if call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() decl_stmt org.apache.lucene.index.SortedSetDocValues final final = call LeafReader.getSortedSetDocValues() call LeafReader.getSortedSetDocValues() call LeafReader.getSortedSetDocValues() call LeafReader.getSortedSetDocValues() call LeafReader.getSortedSetDocValues() if != && call SortedSetDocValues.getValueCount() call SortedSetDocValues.getValueCount() call SortedSetDocValues.getValueCount() call SortedSetDocValues.getValueCount() call SortedSetDocValues.getValueCount() > call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() decl_stmt java.util.List final final final < = new < for = call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() != = call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() decl_stmt org.apache.lucene.util.BytesRef final final = call SortedSetDocValues.lookupOrd() call SortedSetDocValues.lookupOrd() call SortedSetDocValues.lookupOrd() call SortedSetDocValues.lookupOrd() call SortedSetDocValues.lookupOrd() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > else decl_stmt DocValuesType final final = call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) switch case decl_stmt NumericDocValues final final = call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() decl_stmt java.lang.Long = call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() decl_stmt java.lang.Object = if call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() instanceof = call java.lang.Long.intValue() call java.lang.Long.intValue() call java.lang.Long.intValue() call java.lang.Long.intValue() call java.lang.Long.intValue() else if call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() instanceof = call java.lang.Long.intValue() call java.lang.Long.intValue() call java.lang.Long.intValue() call java.lang.Long.intValue() call java.lang.Long.intValue() else if call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() instanceof = else if call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() instanceof = new else if call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() instanceof = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call java.lang.Long.intValue() call java.lang.Long.intValue() call java.lang.Long.intValue() call java.lang.Long.intValue() call java.lang.Long.intValue() break case decl_stmt BinaryDocValues = call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call LeafReader.getBinaryDocValues() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() break case decl_stmt org.apache.lucene.index.SortedDocValues = call LeafReader.getSortedDocValues() call LeafReader.getSortedDocValues() call LeafReader.getSortedDocValues() call LeafReader.getSortedDocValues() call LeafReader.getSortedDocValues() if call SortedDocValues.getOrd() call SortedDocValues.getOrd() call SortedDocValues.getOrd() call SortedDocValues.getOrd() call SortedDocValues.getOrd() >= call org.apache.lucene.index.SortedDocValues.get(int) call org.apache.lucene.index.SortedDocValues.get(int) call org.apache.lucene.index.SortedDocValues.get(int) call org.apache.lucene.index.SortedDocValues.get(int) call org.apache.lucene.index.SortedDocValues.get(int) break case throw new case throw new case throw new + + public public throws DocIterator public public < throws decl_stmt org.apache.solr.search.DocIterator final final = for = < ++ = call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() public < public < return : public < public < return public public throws return != : PostingsEnum BytesRef Terms int TermsEnum public public throws decl_stmt org.apache.lucene.index.Terms = call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) if == return - decl_stmt org.apache.lucene.util.BytesRef = decl_stmt org.apache.lucene.index.TermsEnum final final = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() if ! call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) return - decl_stmt org.apache.lucene.index.PostingsEnum = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) = call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() return == - : LeafReaderContext PostingsEnum String LeafReader Terms TermsEnum int public public throws decl_stmt java.lang.String = call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) for = = < ++ decl_stmt org.apache.lucene.index.LeafReaderContext final final = decl_stmt org.apache.lucene.index.LeafReader final final = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() decl_stmt org.apache.lucene.index.Terms final final = call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) if == continue decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() if call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) decl_stmt org.apache.lucene.index.PostingsEnum = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) = call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() if == continue assert call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() == return long << | return - public public throws if != if != call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() return DocSet BitDocSet DocIterator FixedBitSet public public throws decl_stmt org.apache.solr.search.DocSet = if instanceof return decl_stmt org.apache.lucene.util.FixedBitSet = new decl_stmt org.apache.solr.search.DocIterator = call org.apache.solr.search.DocSet.iterator() call org.apache.solr.search.DocSet.iterator() call org.apache.solr.search.DocSet.iterator() call org.apache.solr.search.DocSet.iterator() call org.apache.solr.search.DocSet.iterator() while call DocIterator.hasNext() call DocIterator.hasNext() call DocIterator.hasNext() call DocIterator.hasNext() call DocIterator.hasNext() call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() decl_stmt org.apache.solr.search.BitDocSet = new call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() if != call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() return DocSet boolean ExtendedQuery Query DocSet public public throws if instanceof decl_stmt org.apache.solr.search.ExtendedQuery = if ! call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() if instanceof = = return decl_stmt org.apache.lucene.search.Query = decl_stmt boolean = == if != decl_stmt org.apache.solr.search.DocSet = call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() if != if return else return decl_stmt org.apache.solr.search.DocSet = decl_stmt org.apache.solr.search.DocSet = : if != call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() return DocSet throws decl_stmt org.apache.solr.search.DocSet if != = call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() if != return = if != call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() return public public throws if == = return ProcessedFilter DocSet Query DocSetCollector Query Collector private private < throws decl_stmt org.apache.lucene.search.Query = decl_stmt ProcessedFilter = decl_stmt org.apache.solr.search.DocSetCollector = new decl_stmt org.apache.lucene.search.Collector = if != call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() = if != decl_stmt org.apache.lucene.search.Query = new else if instanceof decl_stmt org.apache.solr.search.DocSet = call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() return int DocIdSetIterator Bits DocIdSet ProcessedFilter LeafReader LeafCollector DocSetCollector Collector public public < throws if != for : if instanceof return decl_stmt ProcessedFilter = if != return decl_stmt org.apache.solr.search.DocSetCollector = new decl_stmt org.apache.lucene.search.Collector = if != call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() = for final final : decl_stmt org.apache.lucene.index.LeafReader final final = decl_stmt org.apache.lucene.util.Bits = call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() decl_stmt org.apache.lucene.search.DocIdSet = if != = call ProcessedFilter.filter() call ProcessedFilter.filter() call ProcessedFilter.filter() call ProcessedFilter.filter() call ProcessedFilter.filter() call ProcessedFilter.filter() call ProcessedFilter.filter() call ProcessedFilter.filter() call ProcessedFilter.filter() if == continue decl_stmt org.apache.lucene.search.DocIdSetIterator = if != = call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() if == continue if ! = decl_stmt org.apache.lucene.search.LeafCollector final final = call org.apache.lucene.search.Collector.getLeafCollector(LeafReaderContext) call org.apache.lucene.search.Collector.getLeafCollector(LeafReaderContext) call org.apache.lucene.search.Collector.getLeafCollector(LeafReaderContext) call org.apache.lucene.search.Collector.getLeafCollector(LeafReaderContext) call org.apache.lucene.search.Collector.getLeafCollector(LeafReaderContext) decl_stmt int = call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() if == for = < ++ if != && ! call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() continue call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) else if != for = - = call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) + < if call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) else for = - = call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) + < call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) if instanceof return call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() int int ExtendedQuery int int decl boolean Query WrappedQuery decl List Query ProcessedFilter decl DocSet DocSet decl List DelegatingCollector decl List public public < throws decl_stmt ProcessedFilter = new if == || == if != = return decl_stmt org.apache.solr.search.DocSet = decl_stmt boolean = new + decl_stmt org.apache.solr.search.DocSet = new + decl_stmt java.util.List < = decl_stmt java.util.List < = decl_stmt int = decl_stmt int = - if != = ++ = = decl_stmt int = for : if instanceof decl_stmt org.apache.solr.search.ExtendedQuery = if ! call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() if call ExtendedQuery.getCost() call ExtendedQuery.getCost() call ExtendedQuery.getCost() call ExtendedQuery.getCost() call ExtendedQuery.getCost() >= && instanceof if == = new <> - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if == = new <> - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() continue if == if == = new <> - decl_stmt org.apache.solr.search.WrappedQuery = new call WrappedQuery.setCache() call WrappedQuery.setCache() call WrappedQuery.setCache() call WrappedQuery.setCache() call WrappedQuery.setCache() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() continue decl_stmt org.apache.lucene.search.Query = = if == = decl_stmt int = if < = = = else = ++ if > && == = for = < ++ if = call org.apache.solr.search.DocSet.andNot(DocSet) call org.apache.solr.search.DocSet.andNot(DocSet) call org.apache.solr.search.DocSet.andNot(DocSet) call org.apache.solr.search.DocSet.andNot(DocSet) call org.apache.solr.search.DocSet.andNot(DocSet) for = < ++ if ! && != = call org.apache.solr.search.DocSet.intersection(DocSet) call org.apache.solr.search.DocSet.intersection(DocSet) call org.apache.solr.search.DocSet.intersection(DocSet) call org.apache.solr.search.DocSet.intersection(DocSet) call org.apache.solr.search.DocSet.intersection(DocSet) if != decl_stmt java.util.List < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : decl_stmt org.apache.lucene.search.Query = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = new = == else if == if == = = if != = call org.apache.solr.search.DocSet.getTopFilter() call org.apache.solr.search.DocSet.getTopFilter() call org.apache.solr.search.DocSet.getTopFilter() call org.apache.solr.search.DocSet.getTopFilter() call org.apache.solr.search.DocSet.getTopFilter() if != for = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - >= -- decl_stmt org.apache.solr.search.DelegatingCollector = = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if != call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() call ProcessedFilter.postFilter() return int int int int decl MultiPostingsEnum decl int FixedBitSet int decl MultiPostingsEnum decl EnumWithSlice boolean TermQuery int int PostingsEnum int public public throws decl_stmt int = decl_stmt boolean = != && >= decl_stmt org.apache.lucene.search.TermQuery = if = new new decl_stmt org.apache.solr.search.DocSet = call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() if != return decl_stmt int = decl_stmt int = if == || < = new decl_stmt int final final final = decl_stmt int = decl_stmt int = decl_stmt org.apache.lucene.util.FixedBitSet = decl_stmt org.apache.lucene.index.PostingsEnum = = if == = if instanceof decl_stmt EnumWithSlice = decl_stmt int = for = < ++ decl_stmt EnumWithSlice = if == continue decl_stmt int = decl_stmt int if > if == = new while = call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() != call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) + ++ else while = call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() call int.postingsEnum() != ++ = + else decl_stmt int if > = new while = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() != call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) ++ else while = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() != ++ = decl_stmt org.apache.solr.search.DocSet if != for = < ++ call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) += = new else = == : new if call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() return protected protected throws return boolean ExtendedQuery Query DocSet public public throws if == return if instanceof decl_stmt org.apache.solr.search.ExtendedQuery = if ! call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() if instanceof = = return decl_stmt org.apache.lucene.search.Query = decl_stmt boolean = == decl_stmt org.apache.solr.search.DocSet if != = call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() if == = call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() return call org.apache.solr.search.DocSet.intersection(DocSet) call org.apache.solr.search.DocSet.intersection(DocSet) call org.apache.solr.search.DocSet.intersection(DocSet) call org.apache.solr.search.DocSet.intersection(DocSet) call org.apache.solr.search.DocSet.intersection(DocSet) : return : QueryCommand QueryResult public public throws decl_stmt org.apache.solr.search.grouping.distributed.command.QueryCommand = new call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) decl_stmt org.apache.solr.search.QueryResult = new return call org.apache.solr.search.QueryResult.getDocList() call org.apache.solr.search.QueryResult.getDocList() call org.apache.solr.search.QueryResult.getDocList() call org.apache.solr.search.QueryResult.getDocList() call org.apache.solr.search.QueryResult.getDocList() QueryCommand QueryResult public public < throws decl_stmt org.apache.solr.search.grouping.distributed.command.QueryCommand = new call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) decl_stmt org.apache.solr.search.QueryResult = new return call org.apache.solr.search.QueryResult.getDocList() call org.apache.solr.search.QueryResult.getDocList() call org.apache.solr.search.QueryResult.getDocList() call org.apache.solr.search.QueryResult.getDocList() call org.apache.solr.search.QueryResult.getDocList() boolean int DocSet decl List decl SortField Query int int QueryResultKey DocList ExtendedQuery DocSet DocListAndSet private private throws decl_stmt DocListAndSet = new decl_stmt org.apache.solr.search.QueryResultKey = decl_stmt int = + if < || || = decl_stmt int = decl_stmt org.apache.solr.search.DocList = decl_stmt int = decl_stmt org.apache.lucene.search.Query = if instanceof decl_stmt org.apache.solr.search.ExtendedQuery = if ! call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() call org.apache.solr.search.ExtendedQuery.getCache() |= | | if != && == && & | != | = new if & == = call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() call decl SolrCache.get() if != if & == || call org.apache.solr.search.DocList.hasScores() call org.apache.solr.search.DocList.hasScores() call org.apache.solr.search.DocList.hasScores() call org.apache.solr.search.DocList.hasScores() call org.apache.solr.search.DocList.hasScores() = call DocList.subset() call DocList.subset() call DocList.subset() call DocList.subset() call DocList.subset() if != if == && & != if == = else decl_stmt java.util.List < = new <> + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() = return if & == if < = else = - / + * if < = else = decl_stmt boolean = if & | == && && != && != = decl_stmt org.apache.lucene.search.SortField = for : if == = break if if == = decl_stmt org.apache.solr.search.DocSet = if != = call DocListAndSet.docSet() call DocListAndSet.docSet() call DocListAndSet.docSet() call DocListAndSet.docSet() call DocListAndSet.docSet() call DocListAndSet.docSet() call DocListAndSet.docSet() call DocListAndSet.docSet() call DocListAndSet.docSet() else if & != decl_stmt org.apache.solr.search.DocSet = if != && != && ! call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() else assert != : if == = = call DocList.subset() call DocList.subset() call DocList.subset() call DocList.subset() call DocList.subset() else assert == : assert == : assert == call DocListAndSet.docList() call DocListAndSet.docList() call DocListAndSet.docList() call DocListAndSet.docList() call DocListAndSet.docList() call DocListAndSet.docList() call DocListAndSet.docList() call DocListAndSet.docList() call DocListAndSet.docList() : assert >= : + + + if != && call org.apache.solr.search.DocList.size() call org.apache.solr.search.DocList.size() call org.apache.solr.search.DocList.size() call org.apache.solr.search.DocList.size() call org.apache.solr.search.DocList.size() <= && ! call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() call decl SolrCache.put() CursorMark decl List decl ScoreDoc CursorMark TopFieldDocs ScoreDoc private private if == return decl_stmt org.apache.solr.search.CursorMark final final = assert instanceof : decl_stmt TopFieldDocs final final = decl_stmt org.apache.lucene.search.ScoreDoc final final final = if == else decl_stmt org.apache.lucene.search.ScoreDoc = - assert instanceof : decl_stmt java.util.List < = > decl_stmt org.apache.solr.search.CursorMark = call org.apache.solr.search.CursorMark.createNext(List) call org.apache.solr.search.CursorMark.createNext(List) call org.apache.solr.search.CursorMark.createNext(List) call org.apache.solr.search.CursorMark.createNext(List) call org.apache.solr.search.CursorMark.createNext(List) assert != : CursorMark boolean RankQuery Query Sort boolean FieldDoc private private throws decl_stmt org.apache.lucene.search.Query = if instanceof decl_stmt RankQuery = return call RankQuery.getTopDocsCollector() call RankQuery.getTopDocsCollector() call RankQuery.getTopDocsCollector() call RankQuery.getTopDocsCollector() call RankQuery.getTopDocsCollector() if == assert == : return else decl_stmt boolean final final = & != decl_stmt org.apache.lucene.search.Sort final final = decl_stmt org.apache.solr.search.CursorMark final final = decl_stmt boolean final final = != decl_stmt org.apache.lucene.search.FieldDoc final final = != call CursorMark.getSearchAfterFieldDoc() call CursorMark.getSearchAfterFieldDoc() call CursorMark.getSearchAfterFieldDoc() call CursorMark.getSearchAfterFieldDoc() call CursorMark.getSearchAfterFieldDoc() : return int int TopDocs int Scorer TopDocsCollector int Collector boolean decl int int decl int float ProcessedFilter decl float int decl float Query ScoreDoc float private private throws decl_stmt int = decl_stmt int = if < || || = decl_stmt int final final = decl_stmt int decl_stmt int decl_stmt float decl_stmt int decl_stmt float decl_stmt boolean = & != decl_stmt org.apache.lucene.search.Query = decl_stmt ProcessedFilter = if != = new if <= decl_stmt float final final final = new decl_stmt int final final final = new decl_stmt org.apache.lucene.search.Collector if ! = new public public ++ public public return else = new decl_stmt org.apache.lucene.search.Scorer public public = public public throws ++ decl_stmt float = call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() if > = public public return = = new = new = = > : else decl_stmt org.apache.lucene.search.TopDocsCollector final final = decl_stmt org.apache.lucene.search.Collector = = call org.apache.lucene.search.TopDocsCollector.getTotalHits() call org.apache.lucene.search.TopDocsCollector.getTotalHits() call org.apache.lucene.search.TopDocsCollector.getTotalHits() call org.apache.lucene.search.TopDocsCollector.getTotalHits() call org.apache.lucene.search.TopDocsCollector.getTotalHits() decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) = > call TopDocs.getMaxScore() call TopDocs.getMaxScore() call TopDocs.getMaxScore() call TopDocs.getMaxScore() call TopDocs.getMaxScore() : = = new = & != new : for = < ++ decl_stmt org.apache.lucene.search.ScoreDoc = = if != = decl_stmt int = if < = new public public ++ public public return public public = float public public throws ++ decl_stmt float = if > = public public return DocSet int TopDocs decl float Collector Query Collector TopDocsCollector float ProcessedFilter int ScoreDoc int int int Scorer decl float int decl int int boolean DocSetCollector float private private throws decl_stmt int = decl_stmt int = if < || || = decl_stmt int final final = decl_stmt int decl_stmt int decl_stmt float decl_stmt int decl_stmt float decl_stmt org.apache.solr.search.DocSet decl_stmt boolean = & != decl_stmt int = decl_stmt ProcessedFilter = decl_stmt org.apache.lucene.search.Query = if != = new if <= decl_stmt float final final final = new decl_stmt org.apache.lucene.search.Collector decl_stmt org.apache.solr.search.DocSetCollector final final = new if ! = else decl_stmt org.apache.lucene.search.Collector final final = new decl_stmt org.apache.lucene.search.Scorer public public throws = public public throws decl_stmt float = call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() if > = public public return = = call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() = = new = new = call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() = > : else decl_stmt org.apache.lucene.search.TopDocsCollector final final = decl_stmt org.apache.solr.search.DocSetCollector = new decl_stmt org.apache.lucene.search.Collector = = call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() call org.apache.solr.search.DocSetCollector.getDocSet() = call org.apache.lucene.search.TopDocsCollector.getTotalHits() call org.apache.lucene.search.TopDocsCollector.getTotalHits() call org.apache.lucene.search.TopDocsCollector.getTotalHits() call org.apache.lucene.search.TopDocsCollector.getTotalHits() call org.apache.lucene.search.TopDocsCollector.getTotalHits() assert == call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) = > call TopDocs.getMaxScore() call TopDocs.getMaxScore() call TopDocs.getMaxScore() call TopDocs.getMaxScore() call TopDocs.getMaxScore() : = = new = & != new : for = < ++ decl_stmt org.apache.lucene.search.ScoreDoc = = if != = decl_stmt int = if < = new return == && == : public public throws = float public public throws decl_stmt float = if > = public public return QueryCommand QueryResult public public throws decl_stmt org.apache.solr.search.grouping.distributed.command.QueryCommand = new call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) decl_stmt org.apache.solr.search.QueryResult = new return call org.apache.solr.search.QueryResult.getDocList() call org.apache.solr.search.QueryResult.getDocList() call org.apache.solr.search.QueryResult.getDocList() call org.apache.solr.search.QueryResult.getDocList() call org.apache.solr.search.QueryResult.getDocList() QueryCommand QueryResult public public throws decl_stmt org.apache.solr.search.grouping.distributed.command.QueryCommand = new call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) decl_stmt org.apache.solr.search.QueryResult = new return call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() QueryCommand QueryResult public public throws decl_stmt org.apache.solr.search.grouping.distributed.command.QueryCommand = new call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) decl_stmt org.apache.solr.search.QueryResult = new return call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() QueryCommand QueryResult public public < throws decl_stmt org.apache.solr.search.grouping.distributed.command.QueryCommand = new call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) decl_stmt org.apache.solr.search.QueryResult = new return call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() QueryCommand QueryResult public public < throws decl_stmt org.apache.solr.search.grouping.distributed.command.QueryCommand = new call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) decl_stmt org.apache.solr.search.QueryResult = new return call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() QueryCommand QueryResult public public throws decl_stmt org.apache.solr.search.grouping.distributed.command.QueryCommand = new call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) decl_stmt org.apache.solr.search.QueryResult = new return call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() QueryCommand QueryResult public public throws decl_stmt org.apache.solr.search.grouping.distributed.command.QueryCommand = new call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) call org.apache.solr.search.grouping.distributed.command.QueryCommand.setQuery(Query) decl_stmt org.apache.solr.search.QueryResult = new return call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() call org.apache.solr.search.QueryResult.getDocListAndSet() DocSet int TopDocsCollector int int int TopDocs decl int DocIterator int int ScoreDoc LeafCollector LeafReaderContext boolean protected protected throws decl_stmt org.apache.solr.search.DocSet = decl_stmt int = if == = new new call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() call org.apache.solr.search.DocSet.size() return decl_stmt boolean = instanceof || instanceof decl_stmt org.apache.lucene.search.TopDocsCollector = decl_stmt org.apache.solr.search.DocIterator = call org.apache.solr.search.DocSet.iterator() call org.apache.solr.search.DocSet.iterator() call org.apache.solr.search.DocSet.iterator() call org.apache.solr.search.DocSet.iterator() call org.apache.solr.search.DocSet.iterator() decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt org.apache.lucene.search.LeafCollector = while call DocIterator.hasNext() call DocIterator.hasNext() call DocIterator.hasNext() call DocIterator.hasNext() call DocIterator.hasNext() decl_stmt int = call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() while >= decl_stmt org.apache.lucene.index.LeafReaderContext = ++ = = + call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() = call TopDocsCollector.getLeafCollector() call TopDocsCollector.getLeafCollector() call TopDocsCollector.getLeafCollector() call TopDocsCollector.getLeafCollector() call TopDocsCollector.getLeafCollector() call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) call org.apache.lucene.search.LeafCollector.collect(int) - decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) decl_stmt int = decl_stmt int = new for = < ++ decl_stmt org.apache.lucene.search.ScoreDoc = = = new DocSet TotalHitCountCollector Query decl BooleanQuery public public throws if != decl_stmt org.apache.lucene.search.Query = decl_stmt org.apache.solr.search.DocSet = return == : else decl_stmt org.apache.lucene.search.TotalHitCountCollector = new decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() return call org.apache.lucene.search.TotalHitCountCollector.getTotalHits() call org.apache.lucene.search.TotalHitCountCollector.getTotalHits() call org.apache.lucene.search.TotalHitCountCollector.getTotalHits() call org.apache.lucene.search.TotalHitCountCollector.getTotalHits() call org.apache.lucene.search.TotalHitCountCollector.getTotalHits() public public throws return DocSet DocSet DocSet Query Query public public throws decl_stmt org.apache.lucene.search.Query = decl_stmt org.apache.lucene.search.Query = decl_stmt org.apache.solr.search.DocSet = decl_stmt org.apache.solr.search.DocSet = if == if == return call org.apache.solr.search.DocSet.intersectionSize(DocSet) call org.apache.solr.search.DocSet.intersectionSize(DocSet) call org.apache.solr.search.DocSet.intersectionSize(DocSet) call org.apache.solr.search.DocSet.intersectionSize(DocSet) call org.apache.solr.search.DocSet.intersectionSize(DocSet) return call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.andNotSize(DocSet) if == return call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.andNotSize(DocSet) decl_stmt org.apache.solr.search.DocSet = return call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.andNotSize(DocSet) call org.apache.solr.search.DocSet.union(DocSet) call org.apache.solr.search.DocSet.union(DocSet) call org.apache.solr.search.DocSet.union(DocSet) call org.apache.solr.search.DocSet.union(DocSet) call org.apache.solr.search.DocSet.union(DocSet) decl Document public public throws decl_stmt org.apache.lucene.document.Document final final final = new return long SolrQueryResponse SolrQueryRequest ModifiableSolrParams public public decl_stmt long = decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) for = < ++ if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() decl_stmt org.apache.solr.request.SolrQueryRequest final final = new public public return public public decl_stmt org.apache.solr.response.SolrQueryResponse final final = new new try finally try call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() finally if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() = - public public return public public public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() SolrCache public public decl_stmt org.apache.solr.search.SolrCache = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return == : call org.apache.solr.search.SolrCache.get(K) call org.apache.solr.search.SolrCache.get(K) call org.apache.solr.search.SolrCache.get(K) call org.apache.solr.search.SolrCache.get(K) call org.apache.solr.search.SolrCache.get(K) SolrCache public public decl_stmt org.apache.solr.search.SolrCache = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return == : call org.apache.solr.search.SolrCache.put(K,V) call org.apache.solr.search.SolrCache.put(K,V) call org.apache.solr.search.SolrCache.put(K,V) call org.apache.solr.search.SolrCache.put(K,V) call org.apache.solr.search.SolrCache.put(K,V) public public return public public return public public throws return public public throws synchronized if == = return public public return public public return public public return public public return public public return public public return decl NamedList public < public < decl_stmt org.apache.solr.common.util.NamedList final final final < = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call DirectoryReader.numDocs() call DirectoryReader.numDocs() call DirectoryReader.numDocs() call DirectoryReader.numDocs() call DirectoryReader.numDocs() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() call DirectoryReader.maxDoc() - call DirectoryReader.numDocs() call DirectoryReader.numDocs() call DirectoryReader.numDocs() call DirectoryReader.numDocs() call DirectoryReader.numDocs() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call DirectoryReader.toString() call DirectoryReader.toString() call DirectoryReader.toString() call DirectoryReader.toString() call DirectoryReader.toString() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call org.apache.lucene.index.DirectoryReader.directory() call org.apache.lucene.index.DirectoryReader.directory() call org.apache.lucene.index.DirectoryReader.directory() call org.apache.lucene.index.DirectoryReader.directory() call org.apache.lucene.index.DirectoryReader.directory() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() if != call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() return DocIdSet public public throws decl_stmt org.apache.lucene.search.DocIdSet final final = == : if == return return new public public return decl List Scorer DocIdSetIterator public public throws decl_stmt java.util.List < = new <> + if != decl_stmt org.apache.lucene.search.DocIdSetIterator final final = if == return call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : decl_stmt org.apache.lucene.search.Scorer final final = if == return call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() public public throws return public public return != : public public return int int int private private throws decl_stmt int = decl_stmt int = while < if != decl_stmt int final final = if != = = = continue ++ return public public throws return public public throws return public public return public public return public public throws return public public throws return public public return int private private throws for decl_stmt int = if == return = if == return