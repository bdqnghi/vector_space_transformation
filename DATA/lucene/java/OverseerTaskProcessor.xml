org.apache.solr.cloud java.io.Closeable import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.ExecutorService import java.util.concurrent.SynchronousQueue import java.util.concurrent.TimeUnit import org.apache.solr.client.solrj.SolrResponse import org.apache.solr.cloud.OverseerTaskQueue.QueueEvent import org.apache.solr.cloud.Overseer.LeaderStatus import org.apache.solr.common.SolrException import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.common.util.Utils import org.apache.solr.handler.component.ShardHandlerFactory import org.apache.solr.util.DefaultSolrThreadFactory import org.apache.solr.util.stats.TimerContext import org.apache.zookeeper.KeeperException import org.apache.zookeeper.data.Stat import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.common.params.CommonAdminParams.ASYNC import class org.apache.solr.cloud.OverseerTaskProcessor super super implements String ExecutorService decl Overseer Logger OverseerMessageHandlerSelector ShardHandlerFactory int String decl Set Object boolean decl Stats decl HashMap Set OverseerTaskQueue DistributedMap ZkStateReader DistributedMap DistributedMap String decl List OverseerMessageHandler String Runner boolean String String LeaderStatus ZkNodeProps boolean public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt LeaderStatus = while == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() = decl_stmt java.lang.String = decl_stmt boolean = try = call org.apache.solr.cloud.OverseerTaskQueue.getTailId() call org.apache.solr.cloud.OverseerTaskQueue.getTailId() call org.apache.solr.cloud.OverseerTaskQueue.getTailId() call org.apache.solr.cloud.OverseerTaskQueue.getTailId() call org.apache.solr.cloud.OverseerTaskQueue.getTailId() catch catch if == = else call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() try call OverseerMessageHandlerSelector.prioritizeOverseerNodes() call OverseerMessageHandlerSelector.prioritizeOverseerNodes() call OverseerMessageHandlerSelector.prioritizeOverseerNodes() call OverseerMessageHandlerSelector.prioritizeOverseerNodes() call OverseerMessageHandlerSelector.prioritizeOverseerNodes() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() = new new < new try while ! try = if == break else if != call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() continue call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call java.util.Set.size() call java.util.Set.size() call java.util.Set.size() call java.util.Set.size() call java.util.Set.size() decl_stmt boolean = while call java.util.Set.size() call java.util.Set.size() call java.util.Set.size() call java.util.Set.size() call java.util.Set.size() > synchronized call decl Set.wait() call decl Set.wait() call decl Set.wait() call decl Set.wait() call decl Set.wait() = if decl_stmt java.util.List < = call org.apache.solr.cloud.OverseerTaskQueue.peekTopN(int,Set,long) call org.apache.solr.cloud.OverseerTaskQueue.peekTopN(int,Set,long) call org.apache.solr.cloud.OverseerTaskQueue.peekTopN(int,Set,long) call org.apache.solr.cloud.OverseerTaskQueue.peekTopN(int,Set,long) call org.apache.solr.cloud.OverseerTaskQueue.peekTopN(int,Set,long) if == continue call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() if break for : decl_stmt org.apache.solr.common.cloud.ZkNodeProps final final = decl_stmt org.apache.solr.cloud.OverseerMessageHandler = call Object.selectOverseerMessageHandler() call Object.selectOverseerMessageHandler() call Object.selectOverseerMessageHandler() call Object.selectOverseerMessageHandler() call Object.selectOverseerMessageHandler() decl_stmt java.lang.String = call OverseerMessageHandler.getTaskKey() call OverseerMessageHandler.getTaskKey() call OverseerMessageHandler.getTaskKey() call OverseerMessageHandler.getTaskKey() call OverseerMessageHandler.getTaskKey() decl_stmt java.lang.String final final = call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) if if = if != && call org.apache.solr.cloud.DistributedMap.contains(String) call org.apache.solr.cloud.DistributedMap.contains(String) call org.apache.solr.cloud.DistributedMap.contains(String) call org.apache.solr.cloud.DistributedMap.contains(String) call org.apache.solr.cloud.DistributedMap.contains(String) || call org.apache.solr.cloud.DistributedMap.contains(String) call org.apache.solr.cloud.DistributedMap.contains(String) call org.apache.solr.cloud.DistributedMap.contains(String) call org.apache.solr.cloud.DistributedMap.contains(String) call org.apache.solr.cloud.DistributedMap.contains(String) call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.solr.cloud.OverseerTaskQueue.remove(QueueEvent) call org.apache.solr.cloud.OverseerTaskQueue.remove(QueueEvent) call org.apache.solr.cloud.OverseerTaskQueue.remove(QueueEvent) call org.apache.solr.cloud.OverseerTaskQueue.remove(QueueEvent) call org.apache.solr.cloud.OverseerTaskQueue.remove(QueueEvent) continue if ! call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.solr.common.cloud.ZkNodeProps.toString() call org.apache.solr.common.cloud.ZkNodeProps.toString() call org.apache.solr.common.cloud.ZkNodeProps.toString() call org.apache.solr.common.cloud.ZkNodeProps.toString() call org.apache.solr.common.cloud.ZkNodeProps.toString() continue try call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.cloud.OverseerMessageHandler.getName() call org.apache.solr.cloud.OverseerMessageHandler.getName() call org.apache.solr.cloud.OverseerMessageHandler.getName() call org.apache.solr.cloud.OverseerMessageHandler.getName() call org.apache.solr.cloud.OverseerMessageHandler.getName() + + + + call org.apache.solr.common.cloud.ZkNodeProps.toString() call org.apache.solr.common.cloud.ZkNodeProps.toString() call org.apache.solr.common.cloud.ZkNodeProps.toString() call org.apache.solr.common.cloud.ZkNodeProps.toString() call org.apache.solr.common.cloud.ZkNodeProps.toString() decl_stmt java.lang.String = call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) decl_stmt Runner = new call ExecutorService.execute() call ExecutorService.execute() call ExecutorService.execute() call ExecutorService.execute() call ExecutorService.execute() catch if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return catch return catch finally decl OverseerMessageHandler String protected protected throws decl_stmt java.lang.String = if == return decl_stmt ExclusiveMarking = switch case break case return case return default: throw new + if call decl Stats.contains() call decl Stats.contains() call decl Stats.contains() call decl Stats.contains() call decl Stats.contains() return return private private throws synchronized for : call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() call org.apache.solr.cloud.OverseerTaskQueue.remove(QueueEvent) call org.apache.solr.cloud.OverseerTaskQueue.remove(QueueEvent) call org.apache.solr.cloud.OverseerTaskQueue.remove(QueueEvent) call org.apache.solr.cloud.OverseerTaskQueue.remove(QueueEvent) call org.apache.solr.cloud.OverseerTaskQueue.remove(QueueEvent) call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl Stats.remove() call decl Stats.remove() call decl Stats.remove() call decl Stats.remove() call decl Stats.remove() call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() public public = if != if ! call java.util.concurrent.ExecutorService.isShutdown() call java.util.concurrent.ExecutorService.isShutdown() call java.util.concurrent.ExecutorService.isShutdown() call java.util.concurrent.ExecutorService.isShutdown() call java.util.concurrent.ExecutorService.isShutdown() decl List decl ArrayList public static < public static < throws decl_stmt java.util.List < = try = + catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return new <> decl_stmt java.util.ArrayList < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return decl List public static < public static < throws decl_stmt java.util.List < = try = return catch throw String public static public static throws decl_stmt java.lang.String = return == : Map decl byte public static public static throws decl_stmt byte = try = + new catch return decl_stmt java.util.Map = return call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) String TimerContext boolean ZkNodeProps protected protected decl_stmt java.lang.String = decl_stmt org.apache.solr.util.stats.TimerContext = call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() decl_stmt boolean = try decl_stmt org.apache.solr.common.cloud.ZkNodeProps = call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() + if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) return catch = if == call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return else if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch = finally call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() if call decl Overseer.success() call decl Overseer.success() call decl Overseer.success() call decl Overseer.success() call decl Overseer.success() else call decl Overseer.error() call decl Overseer.error() call decl Overseer.error() call decl Overseer.error() call decl Overseer.error() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + return public public return private private throws synchronized call decl Stats.add() call decl Stats.add() call decl Stats.add() call decl Stats.add() call decl Stats.add() synchronized call java.util.Set.add(E) call java.util.Set.add(E) call java.util.Set.add(E) call java.util.Set.add(E) call java.util.Set.add(E) if != call org.apache.solr.cloud.DistributedMap.put(String,byte) call org.apache.solr.cloud.DistributedMap.put(String,byte) call org.apache.solr.cloud.DistributedMap.put(String,byte) call org.apache.solr.cloud.DistributedMap.put(String,byte) call org.apache.solr.cloud.DistributedMap.put(String,byte) String String String TimerContext boolean public public decl_stmt java.lang.String = decl_stmt org.apache.solr.util.stats.TimerContext final final = call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() call decl Overseer.time() decl_stmt boolean = decl_stmt java.lang.String final final = decl_stmt java.lang.String = try try call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() = finally call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() if != if != && != || != call org.apache.solr.cloud.DistributedMap.put(String,byte) call org.apache.solr.cloud.DistributedMap.put(String,byte) call org.apache.solr.cloud.DistributedMap.put(String,byte) call org.apache.solr.cloud.DistributedMap.put(String,byte) call org.apache.solr.cloud.DistributedMap.put(String,byte) call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() else call org.apache.solr.cloud.DistributedMap.put(String,byte) call org.apache.solr.cloud.DistributedMap.put(String,byte) call org.apache.solr.cloud.DistributedMap.put(String,byte) call org.apache.solr.cloud.DistributedMap.put(String,byte) call org.apache.solr.cloud.DistributedMap.put(String,byte) call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() else call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + = catch catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() finally if ! synchronized call decl Set.notifyAll() call decl Set.notifyAll() call decl Set.notifyAll() call decl Set.notifyAll() call decl Set.notifyAll() private private throws synchronized call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() synchronized call java.util.Set.remove(Object) call java.util.Set.remove(Object) call java.util.Set.remove(Object) call java.util.Set.remove(Object) call java.util.Set.remove(Object) if != if ! call org.apache.solr.cloud.DistributedMap.remove(String) call org.apache.solr.cloud.DistributedMap.remove(String) call org.apache.solr.cloud.DistributedMap.remove(String) call org.apache.solr.cloud.DistributedMap.remove(String) call org.apache.solr.cloud.DistributedMap.remove(String) call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + private private call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() try if != if ! call org.apache.solr.cloud.DistributedMap.remove(String) call org.apache.solr.cloud.DistributedMap.remove(String) call org.apache.solr.cloud.DistributedMap.remove(String) call org.apache.solr.cloud.DistributedMap.remove(String) call org.apache.solr.cloud.DistributedMap.remove(String) call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + synchronized call java.util.Set.remove(Object) call java.util.Set.remove(Object) call java.util.Set.remove(Object) call java.util.Set.remove(Object) call java.util.Set.remove(Object) catch catch private private if call decl Overseer.success() call decl Overseer.success() call decl Overseer.success() call decl Overseer.success() call decl Overseer.success() else call decl Overseer.error() call decl Overseer.error() call decl Overseer.error() call decl Overseer.error() call decl Overseer.error() call decl Overseer.storeFailureDetails() call decl Overseer.storeFailureDetails() call decl Overseer.storeFailureDetails() call decl Overseer.storeFailureDetails() call decl Overseer.storeFailureDetails() private private if == return return ! != || != private private if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() synchronized call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Set.toString() call Set.toString() call Set.toString() call Set.toString() call Set.toString() synchronized call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() synchronized call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call decl Stats.toString() call decl Stats.toString() call decl Stats.toString() call decl Stats.toString() call decl Stats.toString() return