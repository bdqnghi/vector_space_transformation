org.apache.lucene.validation org.apache.ivy.Ivy import org.apache.ivy.core.LogOptions import org.apache.ivy.core.report.ResolveReport import org.apache.ivy.core.resolve.ResolveOptions import org.apache.ivy.core.settings.IvySettings import org.apache.ivy.plugins.conflict.NoConflictManager import org.apache.lucene.dependencies.InterpolatedProperties import org.apache.lucene.validation.ivyde.IvyNodeElement import org.apache.lucene.validation.ivyde.IvyNodeElementAdapter import org.apache.tools.ant.BuildException import org.apache.tools.ant.Project import org.apache.tools.ant.Task import org.apache.tools.ant.types.LogLevel import org.apache.tools.ant.types.Resource import org.apache.tools.ant.types.ResourceCollection import org.apache.tools.ant.types.resources.FileResource import org.apache.tools.ant.types.resources.Resources import org.xml.sax.Attributes import org.xml.sax.InputSource import org.xml.sax.SAXException import org.xml.sax.XMLReader import org.xml.sax.helpers.DefaultHandler import org.xml.sax.helpers.XMLReaderFactory import javax.xml.parsers.ParserConfigurationException import javax.xml.transform.Transformer import javax.xml.transform.TransformerException import javax.xml.transform.TransformerFactory import javax.xml.transform.stream.StreamResult import javax.xml.transform.stream.StreamSource import java.io.BufferedReader import java.io.File import java.io.FileInputStream import java.io.FileOutputStream import java.io.IOException import java.io.InputStream import java.io.InputStreamReader import java.io.OutputStreamWriter import java.io.Reader import java.io.StringWriter import java.io.Writer import java.nio.charset.StandardCharsets import java.text.ParseException import java.util.Arrays import java.util.Comparator import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.LinkedHashMap import java.util.List import java.util.Locale import java.util.Map import java.util.Set import java.util.Stack import java.util.regex.Matcher import java.util.regex.Pattern import class org.apache.lucene.validation.LibVersionsCheckTask super super extends Pattern Pattern decl Map Pattern String Pattern Ivy Pattern String File decl Map Pattern LatestVersionComparator File Pattern Resources Pattern int File File decl Map File public public call Resources.add() call Resources.add() call Resources.add() call Resources.add() call Resources.add() public public = : public public = public public = public public = public public = public public = public public = String Resource int int decl Iterator long int File int public public throws decl_stmt long = decl_stmt int = if ! ++ if ! ++ if ! ++ decl_stmt int = decl_stmt java.util.Iterator < = < call Resources.iterator() call Resources.iterator() call Resources.iterator() call Resources.iterator() call Resources.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt sun.misc.Resource final final = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if ! call Resource.isExists() call Resource.isExists() call Resource.isExists() call Resource.isExists() call Resource.isExists() throw new + call Resource.getName() call Resource.getName() call Resource.getName() call Resource.getName() call Resource.getName() if ! instanceof throw new + call Resource.getName() call Resource.getName() call Resource.getName() call Resource.getName() call Resource.getName() + + call Resource.getClass() call Resource.getClass() call Resource.getClass() call Resource.getClass() call Resource.getClass() decl_stmt File = try if ! ++ if ! ++ if ! ++ catch throw new + call File.getPath() call File.getPath() call File.getPath() call File.getPath() call File.getPath() + + ++ + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = if ! + + + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() + + + ++ decl_stmt int = decl_stmt int = > : + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() + + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() + + + + + + + - / if > || > throw new File boolean ResolveReport StringBuilder File Dependency String IvyNodeElement ResolveOptions private private decl_stmt boolean = decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt Dependency = if call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() continue call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt File = new if ! call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() && ! call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() throw new + call File.getPath() call File.getPath() call File.getPath() call File.getPath() call File.getPath() decl_stmt File = new try try = new new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt ResolveOptions = new call ResolveOptions.setDownload() call ResolveOptions.setDownload() call ResolveOptions.setDownload() call ResolveOptions.setDownload() call ResolveOptions.setDownload() call ResolveOptions.setTransitive() call ResolveOptions.setTransitive() call ResolveOptions.setTransitive() call ResolveOptions.setTransitive() call ResolveOptions.setTransitive() call ResolveOptions.setUseCacheOnly() call ResolveOptions.setUseCacheOnly() call ResolveOptions.setUseCacheOnly() call ResolveOptions.setUseCacheOnly() call ResolveOptions.setUseCacheOnly() call ResolveOptions.setOutputReport() call ResolveOptions.setOutputReport() call ResolveOptions.setOutputReport() call ResolveOptions.setOutputReport() call ResolveOptions.setOutputReport() call ResolveOptions.setLog() call ResolveOptions.setLog() call ResolveOptions.setLog() call ResolveOptions.setLog() call ResolveOptions.setLog() call ResolveOptions.setConfs() call ResolveOptions.setConfs() call ResolveOptions.setConfs() call ResolveOptions.setConfs() call ResolveOptions.setConfs() new decl_stmt ResolveReport = call Ivy.resolve() call Ivy.resolve() call Ivy.resolve() call Ivy.resolve() call Ivy.resolve() call File.toURI() call File.toURI() call File.toURI() call File.toURI() call File.toURI() decl_stmt org.apache.lucene.validation.ivyde.IvyNodeElement = for : call org.apache.lucene.validation.ivyde.IvyNodeElement.getDependencies() call org.apache.lucene.validation.ivyde.IvyNodeElement.getDependencies() call org.apache.lucene.validation.ivyde.IvyNodeElement.getDependencies() call org.apache.lucene.validation.ivyde.IvyNodeElement.getDependencies() call org.apache.lucene.validation.ivyde.IvyNodeElement.getDependencies() decl_stmt java.lang.String = + + + decl_stmt Dependency = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() + + = else = catch + call File.getPath() call File.getPath() call File.getPath() call File.getPath() call File.getPath() + + = catch + call File.getPath() call File.getPath() call File.getPath() call File.getPath() call File.getPath() + + = return String decl List String InterpolatedProperties boolean private private + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() decl_stmt boolean = decl_stmt org.apache.lucene.dependencies.InterpolatedProperties = new try = new = new call org.apache.lucene.dependencies.InterpolatedProperties.load(InputStream) call org.apache.lucene.dependencies.InterpolatedProperties.load(InputStream) call org.apache.lucene.dependencies.InterpolatedProperties.load(InputStream) call org.apache.lucene.dependencies.InterpolatedProperties.load(InputStream) call org.apache.lucene.dependencies.InterpolatedProperties.load(InputStream) catch throw new + + + for : call InterpolatedProperties.keySet() call InterpolatedProperties.keySet() call InterpolatedProperties.keySet() call InterpolatedProperties.keySet() call InterpolatedProperties.keySet() decl_stmt java.lang.String = if call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() = + + + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() + + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() else decl_stmt java.lang.String = call InterpolatedProperties.getProperty() call InterpolatedProperties.getProperty() call InterpolatedProperties.getProperty() call InterpolatedProperties.getProperty() call InterpolatedProperties.getProperty() decl_stmt java.util.List < = call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new <> return ! String Matcher Dependency String String String InterpolatedProperties private private decl_stmt org.apache.lucene.dependencies.InterpolatedProperties = new try = new = new call org.apache.lucene.dependencies.InterpolatedProperties.load(InputStream) call org.apache.lucene.dependencies.InterpolatedProperties.load(InputStream) call org.apache.lucene.dependencies.InterpolatedProperties.load(InputStream) call org.apache.lucene.dependencies.InterpolatedProperties.load(InputStream) call org.apache.lucene.dependencies.InterpolatedProperties.load(InputStream) catch throw new + + + for : call InterpolatedProperties.keySet() call InterpolatedProperties.keySet() call InterpolatedProperties.keySet() call InterpolatedProperties.keySet() call InterpolatedProperties.keySet() decl_stmt java.lang.String = decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() decl_stmt java.lang.String = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) decl_stmt java.lang.String = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) decl_stmt java.lang.String = call InterpolatedProperties.getProperty() call InterpolatedProperties.getProperty() call InterpolatedProperties.getProperty() call InterpolatedProperties.getProperty() call InterpolatedProperties.getProperty() decl_stmt Dependency = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() String File boolean ResolveReport Matcher String File Dependency String String IvyNodeElement ResolveOptions private private decl_stmt boolean = decl_stmt ResolveOptions = new call ResolveOptions.setDownload() call ResolveOptions.setDownload() call ResolveOptions.setDownload() call ResolveOptions.setDownload() call ResolveOptions.setDownload() call ResolveOptions.setTransitive() call ResolveOptions.setTransitive() call ResolveOptions.setTransitive() call ResolveOptions.setTransitive() call ResolveOptions.setTransitive() call ResolveOptions.setUseCacheOnly() call ResolveOptions.setUseCacheOnly() call ResolveOptions.setUseCacheOnly() call ResolveOptions.setUseCacheOnly() call ResolveOptions.setUseCacheOnly() call ResolveOptions.setOutputReport() call ResolveOptions.setOutputReport() call ResolveOptions.setOutputReport() call ResolveOptions.setOutputReport() call ResolveOptions.setOutputReport() call ResolveOptions.setLog() call ResolveOptions.setLog() call ResolveOptions.setLog() call ResolveOptions.setLog() call ResolveOptions.setLog() call ResolveOptions.setConfs() call ResolveOptions.setConfs() call ResolveOptions.setConfs() call ResolveOptions.setConfs() call ResolveOptions.setConfs() new decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) = call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) decl_stmt File = try decl_stmt File = new if ! call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() && ! call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() throw new + call File.getPath() call File.getPath() call File.getPath() call File.getPath() call File.getPath() = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if ! call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() throw new + decl_stmt java.lang.String = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) = new + + try = new new decl_stmt ResolveReport = call Ivy.resolve() call Ivy.resolve() call Ivy.resolve() call Ivy.resolve() call Ivy.resolve() call File.toURI() call File.toURI() call File.toURI() call File.toURI() call File.toURI() decl_stmt org.apache.lucene.validation.ivyde.IvyNodeElement = for : call org.apache.lucene.validation.ivyde.IvyNodeElement.getDependencies() call org.apache.lucene.validation.ivyde.IvyNodeElement.getDependencies() call org.apache.lucene.validation.ivyde.IvyNodeElement.getDependencies() call org.apache.lucene.validation.ivyde.IvyNodeElement.getDependencies() call org.apache.lucene.validation.ivyde.IvyNodeElement.getDependencies() decl_stmt java.lang.String = + + + decl_stmt Dependency = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() + + = else = if = catch if != + call File.getPath() call File.getPath() call File.getPath() call File.getPath() call File.getPath() + + = return boolean String decl Set String Dependency private private decl_stmt boolean = for : decl_stmt java.lang.String = + + + decl_stmt Dependency = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != decl_stmt java.lang.String = if = decl_stmt java.util.Set < = call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() if == = new <> call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call Dependency.conflictLocations() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() |= return boolean boolean int Integer Integer decl String decl String public public = = = = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt int = for < && < ++ if continue decl_stmt boolean = decl_stmt boolean = if && ! return if && ! return - if && return decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != = == new : return call java.lang.Integer.compareTo(Integer) call java.lang.Integer.compareTo(Integer) call java.lang.Integer.compareTo(Integer) call java.lang.Integer.compareTo(Integer) call java.lang.Integer.compareTo(Integer) if != return new return if < return : - if < return - : return private static private static return decl Set boolean private private decl_stmt boolean = call LatestVersionComparator.compare() call LatestVersionComparator.compare() call LatestVersionComparator.compare() call LatestVersionComparator.compare() call LatestVersionComparator.compare() < if decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() = return int StringBuilder decl Set IvyNodeElement String int boolean decl Map private private decl_stmt int = decl_stmt java.lang.StringBuilder = new for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = decl_stmt java.util.Set < < < = if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() continue ++ decl_stmt java.util.Map < < = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() decl_stmt int = call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt boolean = for : call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() if = else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt org.apache.lucene.validation.ivyde.IvyNodeElement = call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.lucene.validation.ivyde.IvyNodeElement.getOrganization() call org.apache.lucene.validation.ivyde.IvyNodeElement.getOrganization() call org.apache.lucene.validation.ivyde.IvyNodeElement.getOrganization() call org.apache.lucene.validation.ivyde.IvyNodeElement.getOrganization() call org.apache.lucene.validation.ivyde.IvyNodeElement.getOrganization() call org.apache.lucene.validation.ivyde.IvyNodeElement.getName() call org.apache.lucene.validation.ivyde.IvyNodeElement.getName() call org.apache.lucene.validation.ivyde.IvyNodeElement.getName() call org.apache.lucene.validation.ivyde.IvyNodeElement.getName() call org.apache.lucene.validation.ivyde.IvyNodeElement.getName() call org.apache.lucene.validation.ivyde.IvyNodeElement.getRevision() call org.apache.lucene.validation.ivyde.IvyNodeElement.getRevision() call org.apache.lucene.validation.ivyde.IvyNodeElement.getRevision() call org.apache.lucene.validation.ivyde.IvyNodeElement.getRevision() call org.apache.lucene.validation.ivyde.IvyNodeElement.getRevision() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return Dependency String String private private for : decl_stmt java.lang.String = + + + if decl_stmt Dependency = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.lang.String = if for = < - ++ return else if for = < - ++ if + return return Dependency String private private for : decl_stmt java.lang.String = + + + if decl_stmt Dependency = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if return else if return return StreamSource StringWriter Transformer private private decl_stmt StringWriter = new try decl_stmt StreamSource = new new decl_stmt Transformer = call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() new catch throw new + + + return call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() IvySettings private private decl_stmt IvySettings = new try call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setVariable() call IvySettings.setBaseDir() call IvySettings.setBaseDir() call IvySettings.setBaseDir() call IvySettings.setBaseDir() call IvySettings.setBaseDir() call IvySettings.setDefaultConflictManager() call IvySettings.setDefaultConflictManager() call IvySettings.setDefaultConflictManager() call IvySettings.setDefaultConflictManager() call IvySettings.setDefaultConflictManager() new = call Ivy.configure() call Ivy.configure() call Ivy.configure() call Ivy.configure() call Ivy.configure() catch throw new + call File.getPath() call File.getPath() call File.getPath() call File.getPath() call File.getPath() + + int boolean String String String Matcher private private + decl_stmt boolean = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = try = new = new = new while != = decl_stmt java.util.regex.Matcher final final = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if ! call java.util.regex.Matcher.lookingAt() call java.util.regex.Matcher.lookingAt() call java.util.regex.Matcher.lookingAt() call java.util.regex.Matcher.lookingAt() call java.util.regex.Matcher.lookingAt() continue = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) if != decl_stmt int = call java.lang.String.compareTo(String) call java.lang.String.compareTo(String) call java.lang.String.compareTo(String) call java.lang.String.compareTo(String) call java.lang.String.compareTo(String) if == + + + = else if < + + + = = catch throw new + + + return CharSequence Matcher char Matcher StringBuilder Matcher int StringBuilder String Matcher private private throws decl_stmt java.lang.StringBuilder final final = new decl_stmt java.lang.String do = if == return call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) && == call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) decl_stmt java.util.regex.Matcher final final = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) = while != && = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) && == call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) decl_stmt java.util.regex.Matcher final final = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) = if != decl_stmt java.util.regex.Matcher final final = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.util.regex.Matcher final final = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) decl_stmt java.lang.CharSequence final final = call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) : decl_stmt java.lang.StringBuilder = new decl_stmt int final final = call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() for = < - ++ decl_stmt char = call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) if == = call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) call java.lang.CharSequence.charAt(int) - return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() DependencyRevChecker XMLReader private private throws + decl_stmt XMLReader = decl_stmt DependencyRevChecker = new call XMLReader.setContentHandler() call XMLReader.setContentHandler() call XMLReader.setContentHandler() call XMLReader.setContentHandler() call XMLReader.setContentHandler() call XMLReader.setErrorHandler() call XMLReader.setErrorHandler() call XMLReader.setErrorHandler() call XMLReader.setErrorHandler() call XMLReader.setErrorHandler() call XMLReader.parse() call XMLReader.parse() call XMLReader.parse() call XMLReader.parse() call XMLReader.parse() new return ! String boolean String String String String public public throws if && decl_stmt java.lang.String = decl_stmt boolean = if == + = = decl_stmt java.lang.String = if == + = = decl_stmt java.lang.String = if == + = = if decl_stmt java.lang.String = + + + decl_stmt java.lang.String = + + if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) + + + + + + = if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() + + + call File.getPath() call File.getPath() call File.getPath() call File.getPath() call File.getPath() = public public throws private private return == && &&