org.apache.solr.update.processor org.apache.solr.common.SolrException import org.apache.solr.common.util.NamedList import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.core.SolrCore import org.apache.solr.core.SolrResourceLoader import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.update.* import org.apache.solr.util.plugin.SolrCoreAware import org.apache.commons.lang.StringUtils import org.apache.commons.io.IOUtils import org.apache.commons.io.FilenameUtils import javax.script.Invocable import javax.script.ScriptEngine import javax.script.ScriptEngineManager import javax.script.ScriptEngineFactory import javax.script.ScriptException import java.io.IOException import java.io.InputStream import java.io.Reader import java.lang.invoke.MethodHandles import java.nio.charset.StandardCharsets import java.util.Set import java.util.LinkedHashSet import java.util.ArrayList import java.util.List import java.util.Collection import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.update.processor.StatelessScriptUpdateProcessorFactory super super extends super implements ScriptEngineCustomizer Logger String SolrResourceLoader String Object String String decl List Object decl Collection public public decl_stmt java.util.Collection < = if call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() throw new + + = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new = decl_stmt java.lang.Object = if != if instanceof = else throw new + + + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() + decl List public public decl_stmt java.util.List < = = return new = String SolrQueryRequest SolrQueryResponse public public = decl_stmt org.apache.solr.response.SolrQueryResponse = new decl_stmt org.apache.solr.request.SolrQueryRequest = new new try catch decl_stmt java.lang.String = + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new finally call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() ScriptEngine decl List Reader String String ScriptEngineManager private < private < throws decl_stmt java.util.List < = new <> decl_stmt javax.script.ScriptEngineManager = new call org.apache.solr.core.SolrResourceLoader.getClassLoader() call org.apache.solr.core.SolrResourceLoader.getClassLoader() call org.apache.solr.core.SolrResourceLoader.getClassLoader() call org.apache.solr.core.SolrResourceLoader.getClassLoader() call org.apache.solr.core.SolrResourceLoader.getClassLoader() call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) if != call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) call javax.script.ScriptEngineManager.put(String,Object) for : decl_stmt ScriptEngine = if != = call javax.script.ScriptEngineManager.getEngineByName(String) call javax.script.ScriptEngineManager.getEngineByName(String) call javax.script.ScriptEngineManager.getEngineByName(String) call javax.script.ScriptEngineManager.getEngineByName(String) call javax.script.ScriptEngineManager.getEngineByName(String) if == decl_stmt java.lang.String = throw new + + != + : else = call javax.script.ScriptEngineManager.getEngineByExtension(String) call javax.script.ScriptEngineManager.getEngineByExtension(String) call javax.script.ScriptEngineManager.getEngineByExtension(String) call javax.script.ScriptEngineManager.getEngineByExtension(String) call javax.script.ScriptEngineManager.getEngineByExtension(String) if == decl_stmt java.lang.String = throw new + + != + : if ! instanceof decl_stmt java.lang.String = + != : + + + call ScriptEngine.getClass() call ScriptEngine.getClass() call ScriptEngine.getClass() call ScriptEngine.getClass() call ScriptEngine.getClass() + + call ScriptEngine.getFactory() call ScriptEngine.getFactory() call ScriptEngine.getFactory() call ScriptEngine.getFactory() call ScriptEngine.getFactory() + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new if != call ScriptEngineCustomizer.customize() call ScriptEngineCustomizer.customize() call ScriptEngineCustomizer.customize() call ScriptEngineCustomizer.customize() call ScriptEngineCustomizer.customize() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new try decl_stmt java.io.Reader = try call ScriptEngine.eval() call ScriptEngine.eval() call ScriptEngine.eval() call ScriptEngine.eval() call ScriptEngine.eval() catch throw new + finally catch throw new + return decl List String decl Set private static private static decl_stmt java.lang.String = try decl_stmt java.util.List < = if == return decl_stmt java.util.Set < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : if call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() else call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() = catch return public public throws if public public throws if public public throws if public public throws if public public throws if public public throws if Object private private for : try decl_stmt java.lang.Object = if != && instanceof if ! return catch throw new + + + + + return public public return public public return public public return public public return InputStream public public throws decl_stmt java.io.InputStream = call org.apache.solr.core.SolrResourceLoader.openResource(String) call org.apache.solr.core.SolrResourceLoader.openResource(String) call org.apache.solr.core.SolrResourceLoader.openResource(String) call org.apache.solr.core.SolrResourceLoader.openResource(String) call org.apache.solr.core.SolrResourceLoader.openResource(String) return