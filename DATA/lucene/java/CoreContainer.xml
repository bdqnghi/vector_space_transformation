org.apache.solr.core static static com.google.common.base.Preconditions.checkNotNull import static static java.util.Collections.EMPTY_MAP import static static org.apache.solr.common.params.CommonParams.AUTHC_PATH import static static org.apache.solr.common.params.CommonParams.AUTHZ_PATH import static static org.apache.solr.common.params.CommonParams.COLLECTIONS_HANDLER_PATH import static static org.apache.solr.common.params.CommonParams.CONFIGSETS_HANDLER_PATH import static static org.apache.solr.common.params.CommonParams.CORES_HANDLER_PATH import static static org.apache.solr.common.params.CommonParams.INFO_HANDLER_PATH import static static org.apache.solr.common.params.CommonParams.ZK_PATH import static static org.apache.solr.security.AuthenticationPlugin.AUTHENTICATION_PLUGIN_PROP import java.io.IOException import java.lang.invoke.MethodHandles import java.nio.file.Path import java.nio.file.Paths import java.util.ArrayList import java.util.Collection import java.util.List import java.util.Locale import java.util.Map import java.util.Properties import java.util.concurrent.Callable import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.ExecutionException import java.util.concurrent.ExecutorService import java.util.concurrent.Future import org.apache.http.auth.AuthSchemeProvider import org.apache.http.client.CredentialsProvider import org.apache.http.config.Lookup import org.apache.solr.client.solrj.impl.HttpClientUtil import org.apache.solr.client.solrj.impl.SolrHttpClientBuilder import org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder import org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder.AuthSchemeRegistryProvider import org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder.CredentialsProviderProvider import org.apache.solr.client.solrj.util.SolrIdentifierValidator import org.apache.solr.cloud.Overseer import org.apache.solr.cloud.ZkController import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.common.util.IOUtils import org.apache.solr.common.util.Utils import org.apache.solr.handler.RequestHandlerBase import org.apache.solr.handler.admin.CollectionsHandler import org.apache.solr.handler.admin.ConfigSetsHandler import org.apache.solr.handler.admin.CoreAdminHandler import org.apache.solr.handler.admin.InfoHandler import org.apache.solr.handler.admin.SecurityConfHandler import org.apache.solr.handler.admin.ZookeeperInfoHandler import org.apache.solr.handler.component.ShardHandlerFactory import org.apache.solr.logging.LogWatcher import org.apache.solr.logging.MDCLoggingContext import org.apache.solr.request.SolrRequestHandler import org.apache.solr.security.AuthenticationPlugin import org.apache.solr.security.AuthorizationPlugin import org.apache.solr.security.HttpClientBuilderPlugin import org.apache.solr.security.PKIAuthenticationPlugin import org.apache.solr.security.SecurityPluginHolder import org.apache.solr.update.SolrCoreState import org.apache.solr.update.UpdateShardHandler import org.apache.solr.util.DefaultSolrThreadFactory import org.apache.zookeeper.KeeperException import org.slf4j.Logger import org.slf4j.LoggerFactory import com.google.common.collect.ImmutableMap import com.google.common.collect.Maps import class org.apache.solr.core.CoreContainer PKIAuthenticationPlugin boolean NodeConfig String String SolrResourceLoader ConfigSetsHandler Logger UpdateShardHandler decl Map ZkContainer decl PluginBag CoresLocator Properties CollectionsHandler SolrCores BlobRepository ConfigSetService decl SecurityPluginHolder CoreAdminHandler SecurityConfHandler LogWatcher ShardHandlerFactory decl SecurityPluginHolder CloserThread InfoHandler boolean ExecutorService public public return call org.apache.solr.core.ZkContainer.getCoreZkRegisterExecutorService() call org.apache.solr.core.ZkContainer.getCoreZkRegisterExecutorService() call org.apache.solr.core.ZkContainer.getCoreZkRegisterExecutorService() call org.apache.solr.core.ZkContainer.getCoreZkRegisterExecutorService() call org.apache.solr.core.ZkContainer.getCoreZkRegisterExecutorService() public public return public < public < return decl SecurityPluginHolder decl SecurityPluginHolder String private synchronized private synchronized < = decl_stmt org.apache.solr.security.SecurityPluginHolder < = decl_stmt org.apache.solr.security.SecurityPluginHolder < = if != decl_stmt java.lang.String = if == throw new if != && call decl SecurityPluginHolder.getZnodeVersion() call decl SecurityPluginHolder.getZnodeVersion() call decl SecurityPluginHolder.getZnodeVersion() call decl SecurityPluginHolder.getZnodeVersion() call decl SecurityPluginHolder.getZnodeVersion() == return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + = new <> call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = if != try call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() catch decl SecurityPluginHolder decl SecurityPluginHolder String private synchronized private synchronized < = decl_stmt java.lang.String = if != if = else throw new if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + else if != = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.security.SecurityPluginHolder < = decl_stmt org.apache.solr.security.SecurityPluginHolder < = if != = new <> new new if != call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() = try if != call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() catch SolrHttpClientBuilder SolrHttpClientContextBuilder private private if instanceof decl_stmt org.apache.solr.client.solrj.impl.SolrHttpClientBuilder = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder = new if call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getCredentialsProviderProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getCredentialsProviderProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getCredentialsProviderProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getCredentialsProviderProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getCredentialsProviderProvider() != call org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder.setDefaultCredentialsProvider(CredentialsProviderProvider) call org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder.setDefaultCredentialsProvider(CredentialsProviderProvider) call org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder.setDefaultCredentialsProvider(CredentialsProviderProvider) call org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder.setDefaultCredentialsProvider(CredentialsProviderProvider) call org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder.setDefaultCredentialsProvider(CredentialsProviderProvider) new public public return call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getCredentialsProviderProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getCredentialsProviderProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getCredentialsProviderProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getCredentialsProviderProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getCredentialsProviderProvider() if call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getAuthSchemeRegistryProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getAuthSchemeRegistryProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getAuthSchemeRegistryProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getAuthSchemeRegistryProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getAuthSchemeRegistryProvider() != call org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder.setAuthSchemeRegistryProvider(AuthSchemeRegistryProvider) call org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder.setAuthSchemeRegistryProvider(AuthSchemeRegistryProvider) call org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder.setAuthSchemeRegistryProvider(AuthSchemeRegistryProvider) call org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder.setAuthSchemeRegistryProvider(AuthSchemeRegistryProvider) call org.apache.solr.client.solrj.impl.SolrHttpClientContextBuilder.setAuthSchemeRegistryProvider(AuthSchemeRegistryProvider) new public < public < return call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getAuthSchemeRegistryProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getAuthSchemeRegistryProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getAuthSchemeRegistryProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getAuthSchemeRegistryProvider() call org.apache.solr.client.solrj.impl.SolrHttpClientBuilder.getAuthSchemeRegistryProvider() else if != if call org.apache.solr.security.PKIAuthenticationPlugin.isInterceptorRegistered() call org.apache.solr.security.PKIAuthenticationPlugin.isInterceptorRegistered() call org.apache.solr.security.PKIAuthenticationPlugin.isInterceptorRegistered() call org.apache.solr.security.PKIAuthenticationPlugin.isInterceptorRegistered() call org.apache.solr.security.PKIAuthenticationPlugin.isInterceptorRegistered() return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.security.PKIAuthenticationPlugin.setInterceptorRegistered() call org.apache.solr.security.PKIAuthenticationPlugin.setInterceptorRegistered() call org.apache.solr.security.PKIAuthenticationPlugin.setInterceptorRegistered() call org.apache.solr.security.PKIAuthenticationPlugin.setInterceptorRegistered() call org.apache.solr.security.PKIAuthenticationPlugin.setInterceptorRegistered() public public return public < public < return Map Number private static private static < if == return - decl_stmt java.util.Map = if == return - decl_stmt java.lang.Number = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) return == - : call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() public static public static return call String.resolve() call String.resolve() call String.resolve() call String.resolve() call String.resolve() CoreContainer SolrResourceLoader public static public static decl_stmt org.apache.solr.core.SolrResourceLoader = new decl_stmt org.apache.solr.core.CoreContainer = new try call org.apache.solr.core.CoreContainer.load() call org.apache.solr.core.CoreContainer.load() call org.apache.solr.core.CoreContainer.load() call org.apache.solr.core.CoreContainer.load() call org.apache.solr.core.CoreContainer.load() catch call org.apache.solr.core.CoreContainer.shutdown() call org.apache.solr.core.CoreContainer.shutdown() call org.apache.solr.core.CoreContainer.shutdown() call org.apache.solr.core.CoreContainer.shutdown() call org.apache.solr.core.CoreContainer.shutdown() throw return public public return public public return decl List ExecutorService String Path SolrCore decl ZkStateReader decl List decl ConfigData public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() decl_stmt java.lang.String = call org.apache.solr.core.NodeConfig.getSharedLibDirectory() call org.apache.solr.core.NodeConfig.getSharedLibDirectory() call org.apache.solr.core.NodeConfig.getSharedLibDirectory() call org.apache.solr.core.NodeConfig.getSharedLibDirectory() call org.apache.solr.core.NodeConfig.getSharedLibDirectory() if != decl_stmt java.nio.file.Path = call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() try call org.apache.solr.core.SolrResourceLoader.addToClassLoader(URL) call org.apache.solr.core.SolrResourceLoader.addToClassLoader(URL) call org.apache.solr.core.SolrResourceLoader.addToClassLoader(URL) call org.apache.solr.core.SolrResourceLoader.addToClassLoader(URL) call org.apache.solr.core.SolrResourceLoader.addToClassLoader(URL) call org.apache.solr.core.SolrResourceLoader.reloadLuceneSPI() call org.apache.solr.core.SolrResourceLoader.reloadLuceneSPI() call org.apache.solr.core.SolrResourceLoader.reloadLuceneSPI() call org.apache.solr.core.SolrResourceLoader.reloadLuceneSPI() call org.apache.solr.core.SolrResourceLoader.reloadLuceneSPI() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() = call org.apache.solr.core.NodeConfig.getShardHandlerFactoryPluginInfo() call org.apache.solr.core.NodeConfig.getShardHandlerFactoryPluginInfo() call org.apache.solr.core.NodeConfig.getShardHandlerFactoryPluginInfo() call org.apache.solr.core.NodeConfig.getShardHandlerFactoryPluginInfo() call org.apache.solr.core.NodeConfig.getShardHandlerFactoryPluginInfo() = new call org.apache.solr.core.NodeConfig.getUpdateShardHandlerConfig() call org.apache.solr.core.NodeConfig.getUpdateShardHandlerConfig() call org.apache.solr.core.NodeConfig.getUpdateShardHandlerConfig() call org.apache.solr.core.NodeConfig.getUpdateShardHandlerConfig() call org.apache.solr.core.NodeConfig.getUpdateShardHandlerConfig() call org.apache.solr.core.SolrCores.allocateLazyCores(int,SolrResourceLoader) call org.apache.solr.core.SolrCores.allocateLazyCores(int,SolrResourceLoader) call org.apache.solr.core.SolrCores.allocateLazyCores(int,SolrResourceLoader) call org.apache.solr.core.SolrCores.allocateLazyCores(int,SolrResourceLoader) call org.apache.solr.core.SolrCores.allocateLazyCores(int,SolrResourceLoader) call org.apache.solr.core.NodeConfig.getTransientCacheSize() call org.apache.solr.core.NodeConfig.getTransientCacheSize() call org.apache.solr.core.NodeConfig.getTransientCacheSize() call org.apache.solr.core.NodeConfig.getTransientCacheSize() call org.apache.solr.core.NodeConfig.getTransientCacheSize() = call org.apache.solr.core.NodeConfig.getLogWatcherConfig() call org.apache.solr.core.NodeConfig.getLogWatcherConfig() call org.apache.solr.core.NodeConfig.getLogWatcherConfig() call org.apache.solr.core.NodeConfig.getLogWatcherConfig() call org.apache.solr.core.NodeConfig.getLogWatcherConfig() = call org.apache.solr.core.NodeConfig.getNodeName() call org.apache.solr.core.NodeConfig.getNodeName() call org.apache.solr.core.NodeConfig.getNodeName() call org.apache.solr.core.NodeConfig.getNodeName() call org.apache.solr.core.NodeConfig.getNodeName() call org.apache.solr.core.ZkContainer.initZooKeeper(CoreContainer,String,CloudConfig) call org.apache.solr.core.ZkContainer.initZooKeeper(CoreContainer,String,CloudConfig) call org.apache.solr.core.ZkContainer.initZooKeeper(CoreContainer,String,CloudConfig) call org.apache.solr.core.ZkContainer.initZooKeeper(CoreContainer,String,CloudConfig) call org.apache.solr.core.ZkContainer.initZooKeeper(CoreContainer,String,CloudConfig) call org.apache.solr.core.NodeConfig.getCloudConfig() call org.apache.solr.core.NodeConfig.getCloudConfig() call org.apache.solr.core.NodeConfig.getCloudConfig() call org.apache.solr.core.NodeConfig.getCloudConfig() call org.apache.solr.core.NodeConfig.getCloudConfig() if = new call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() decl_stmt ConfigData = : new - < call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() < call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() new = new = call org.apache.solr.core.NodeConfig.getCollectionsHandlerClass() call org.apache.solr.core.NodeConfig.getCollectionsHandlerClass() call org.apache.solr.core.NodeConfig.getCollectionsHandlerClass() call org.apache.solr.core.NodeConfig.getCollectionsHandlerClass() call org.apache.solr.core.NodeConfig.getCollectionsHandlerClass() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() = call org.apache.solr.core.NodeConfig.getInfoHandlerClass() call org.apache.solr.core.NodeConfig.getInfoHandlerClass() call org.apache.solr.core.NodeConfig.getInfoHandlerClass() call org.apache.solr.core.NodeConfig.getInfoHandlerClass() call org.apache.solr.core.NodeConfig.getInfoHandlerClass() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() = call org.apache.solr.core.NodeConfig.getCoreAdminHandlerClass() call org.apache.solr.core.NodeConfig.getCoreAdminHandlerClass() call org.apache.solr.core.NodeConfig.getCoreAdminHandlerClass() call org.apache.solr.core.NodeConfig.getCoreAdminHandlerClass() call org.apache.solr.core.NodeConfig.getCoreAdminHandlerClass() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() = call org.apache.solr.core.NodeConfig.getConfigSetsHandlerClass() call org.apache.solr.core.NodeConfig.getConfigSetsHandlerClass() call org.apache.solr.core.NodeConfig.getConfigSetsHandlerClass() call org.apache.solr.core.NodeConfig.getConfigSetsHandlerClass() call org.apache.solr.core.NodeConfig.getConfigSetsHandlerClass() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() if != call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call org.apache.solr.security.PKIAuthenticationPlugin.getRequestHandler() call org.apache.solr.security.PKIAuthenticationPlugin.getRequestHandler() call org.apache.solr.security.PKIAuthenticationPlugin.getRequestHandler() call org.apache.solr.security.PKIAuthenticationPlugin.getRequestHandler() call org.apache.solr.security.PKIAuthenticationPlugin.getRequestHandler() = call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call org.apache.solr.core.NodeConfig.getSolrProperties() call org.apache.solr.core.NodeConfig.getSolrProperties() call org.apache.solr.core.NodeConfig.getSolrProperties() call org.apache.solr.core.NodeConfig.getSolrProperties() call org.apache.solr.core.NodeConfig.getSolrProperties() decl_stmt java.util.concurrent.ExecutorService = call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() == call org.apache.solr.core.NodeConfig.getCoreLoadThreadCount() call org.apache.solr.core.NodeConfig.getCoreLoadThreadCount() call org.apache.solr.core.NodeConfig.getCoreLoadThreadCount() call org.apache.solr.core.NodeConfig.getCoreLoadThreadCount() call org.apache.solr.core.NodeConfig.getCoreLoadThreadCount() : new decl_stmt java.util.List final final final < < = new < < try decl_stmt java.util.List < = call org.apache.solr.core.CoresLocator.discover(CoreContainer) call org.apache.solr.core.CoresLocator.discover(CoreContainer) call org.apache.solr.core.CoresLocator.discover(CoreContainer) call org.apache.solr.core.CoresLocator.discover(CoreContainer) call org.apache.solr.core.CoresLocator.discover(CoreContainer) for final final : if || ! call org.apache.solr.core.SolrCores.putDynamicDescriptor(String,CoreDescriptor) call org.apache.solr.core.SolrCores.putDynamicDescriptor(String,CoreDescriptor) call org.apache.solr.core.SolrCores.putDynamicDescriptor(String,CoreDescriptor) call org.apache.solr.core.SolrCores.putDynamicDescriptor(String,CoreDescriptor) call org.apache.solr.core.SolrCores.putDynamicDescriptor(String,CoreDescriptor) else if call org.apache.solr.core.SolrCores.markCoreAsLoading(CoreDescriptor) call org.apache.solr.core.SolrCores.markCoreAsLoading(CoreDescriptor) call org.apache.solr.core.SolrCores.markCoreAsLoading(CoreDescriptor) call org.apache.solr.core.SolrCores.markCoreAsLoading(CoreDescriptor) call org.apache.solr.core.SolrCores.markCoreAsLoading(CoreDescriptor) if call ExecutorService.add() call ExecutorService.add() call ExecutorService.add() call ExecutorService.add() call ExecutorService.add() call decl ConfigData.submit() call decl ConfigData.submit() call decl ConfigData.submit() call decl ConfigData.submit() call decl ConfigData.submit() decl_stmt org.apache.solr.core.SolrCore try if call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() != call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() = finally if call org.apache.solr.core.SolrCores.markCoreAsNotLoading(CoreDescriptor) call org.apache.solr.core.SolrCores.markCoreAsNotLoading(CoreDescriptor) call org.apache.solr.core.SolrCores.markCoreAsNotLoading(CoreDescriptor) call org.apache.solr.core.SolrCores.markCoreAsNotLoading(CoreDescriptor) call org.apache.solr.core.SolrCores.markCoreAsNotLoading(CoreDescriptor) try call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) catch return = new call CloserThread.start() call CloserThread.start() call CloserThread.start() call CloserThread.start() call CloserThread.start() finally if && != decl_stmt java.lang.Thread = new public public try for < : try catch catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() finally call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) else if call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() public public try for < : try catch catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() finally decl ZkStateReader public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt ConfigData = < call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() < call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() call decl ZkStateReader.data() decl Map String private static private static < decl_stmt java.util.Map < = for : decl_stmt java.lang.String final final = if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() throw new call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public return public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + = if call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() call ZkContainer.zkController() try if != call org.apache.solr.handler.admin.CoreAdminHandler.shutdown() call org.apache.solr.handler.admin.CoreAdminHandler.shutdown() call org.apache.solr.handler.admin.CoreAdminHandler.shutdown() call org.apache.solr.handler.admin.CoreAdminHandler.shutdown() call org.apache.solr.handler.admin.CoreAdminHandler.shutdown() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() try synchronized call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() if != try call CloserThread.join() call CloserThread.join() call CloserThread.join() call CloserThread.join() call CloserThread.join() catch if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.solr.core.SolrCores.close() call org.apache.solr.core.SolrCores.close() call org.apache.solr.core.SolrCores.close() call org.apache.solr.core.SolrCores.close() call org.apache.solr.core.SolrCores.close() synchronized call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() call org.apache.solr.core.SolrCores.getModifyLock() finally try if != call ShardHandlerFactory.close() call ShardHandlerFactory.close() call ShardHandlerFactory.close() call ShardHandlerFactory.close() call ShardHandlerFactory.close() finally try if != call org.apache.solr.update.UpdateShardHandler.close() call org.apache.solr.update.UpdateShardHandler.close() call org.apache.solr.update.UpdateShardHandler.close() call org.apache.solr.update.UpdateShardHandler.close() call org.apache.solr.update.UpdateShardHandler.close() finally call org.apache.solr.core.ZkContainer.close() call org.apache.solr.core.ZkContainer.close() call org.apache.solr.core.ZkContainer.close() call org.apache.solr.core.ZkContainer.close() call org.apache.solr.core.ZkContainer.close() try if != call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() try if != call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() call decl SecurityPluginHolder.plugin() = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() decl List public public decl_stmt java.util.List < = call SolrCores.getCores() call SolrCores.getCores() call SolrCores.getCores() call SolrCores.getCores() call SolrCores.getCores() for : try catch protected protected throws try if ! call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + finally public public return SolrCore CoreDescriptor protected protected if == throw new decl_stmt org.apache.solr.core.CoreDescriptor = if call org.apache.solr.core.CoreDescriptor.isTransient() call org.apache.solr.core.CoreDescriptor.isTransient() call org.apache.solr.core.CoreDescriptor.isTransient() call org.apache.solr.core.CoreDescriptor.isTransient() call org.apache.solr.core.CoreDescriptor.isTransient() || ! call org.apache.solr.core.CoreDescriptor.isLoadOnStartup() call org.apache.solr.core.CoreDescriptor.isLoadOnStartup() call org.apache.solr.core.CoreDescriptor.isLoadOnStartup() call org.apache.solr.core.CoreDescriptor.isLoadOnStartup() call org.apache.solr.core.CoreDescriptor.isLoadOnStartup() && call org.apache.solr.core.SolrCores.getDynamicDescriptor(String) call org.apache.solr.core.SolrCores.getDynamicDescriptor(String) call org.apache.solr.core.SolrCores.getDynamicDescriptor(String) call org.apache.solr.core.SolrCores.getDynamicDescriptor(String) call org.apache.solr.core.SolrCores.getDynamicDescriptor(String) == call org.apache.solr.core.SolrCores.putDynamicDescriptor(String,CoreDescriptor) call org.apache.solr.core.SolrCores.putDynamicDescriptor(String,CoreDescriptor) call org.apache.solr.core.SolrCores.putDynamicDescriptor(String,CoreDescriptor) call org.apache.solr.core.SolrCores.putDynamicDescriptor(String,CoreDescriptor) call org.apache.solr.core.SolrCores.putDynamicDescriptor(String,CoreDescriptor) decl_stmt org.apache.solr.core.SolrCore if throw new if call org.apache.solr.core.CoreDescriptor.isTransient() call org.apache.solr.core.CoreDescriptor.isTransient() call org.apache.solr.core.CoreDescriptor.isTransient() call org.apache.solr.core.CoreDescriptor.isTransient() call org.apache.solr.core.CoreDescriptor.isTransient() = call org.apache.solr.core.SolrCores.putTransientCore(NodeConfig,String,SolrCore,SolrResourceLoader) call org.apache.solr.core.SolrCores.putTransientCore(NodeConfig,String,SolrCore,SolrResourceLoader) call org.apache.solr.core.SolrCores.putTransientCore(NodeConfig,String,SolrCore,SolrResourceLoader) call org.apache.solr.core.SolrCores.putTransientCore(NodeConfig,String,SolrCore,SolrResourceLoader) call org.apache.solr.core.SolrCores.putTransientCore(NodeConfig,String,SolrCore,SolrResourceLoader) else = call org.apache.solr.core.SolrCores.putCore(String,SolrCore) call org.apache.solr.core.SolrCores.putCore(String,SolrCore) call org.apache.solr.core.SolrCores.putCore(String,SolrCore) call org.apache.solr.core.SolrCores.putCore(String,SolrCore) call org.apache.solr.core.SolrCores.putCore(String,SolrCore) call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if == || == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + if call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) return else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call org.apache.solr.core.SolrCore.close() call org.apache.solr.core.SolrCore.close() call org.apache.solr.core.SolrCore.close() call org.apache.solr.core.SolrCore.close() call org.apache.solr.core.SolrCore.close() if call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) call org.apache.solr.core.ZkContainer.registerInZk(SolrCore,boolean) return public public < return call org.apache.solr.core.NodeConfig.getCoreRootDirectory() call org.apache.solr.core.NodeConfig.getCoreRootDirectory() call org.apache.solr.core.NodeConfig.getCoreRootDirectory() call org.apache.solr.core.NodeConfig.getCoreRootDirectory() call org.apache.solr.core.NodeConfig.getCoreRootDirectory() SolrCore Throwable CoreDescriptor boolean String Throwable public public < decl_stmt org.apache.solr.core.CoreDescriptor = new if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() throw new + + decl_stmt boolean = try if != if ! if call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() == throw new + = decl_stmt org.apache.solr.core.SolrCore = call org.apache.solr.core.CoresLocator.create(CoreContainer,CoreDescriptor) call org.apache.solr.core.CoresLocator.create(CoreContainer,CoreDescriptor) call org.apache.solr.core.CoresLocator.create(CoreContainer,CoreDescriptor) call org.apache.solr.core.CoresLocator.create(CoreContainer,CoreDescriptor) call org.apache.solr.core.CoresLocator.create(CoreContainer,CoreDescriptor) return catch if && ! try catch catch decl_stmt java.lang.Throwable = decl_stmt java.lang.Throwable = do = call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() if != = != decl_stmt java.lang.String = if != = + call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() throw new + + + + SolrCore SolrException ConfigSet SolrException private private if throw new decl_stmt org.apache.solr.core.SolrCore = try if call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() != call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() decl_stmt org.apache.solr.core.ConfigSet = call org.apache.solr.core.ConfigSetService.getConfig(CoreDescriptor) call org.apache.solr.core.ConfigSetService.getConfig(CoreDescriptor) call org.apache.solr.core.ConfigSetService.getConfig(CoreDescriptor) call org.apache.solr.core.ConfigSetService.getConfig(CoreDescriptor) call org.apache.solr.core.ConfigSetService.getConfig(CoreDescriptor) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call ConfigSet.getName() call ConfigSet.getName() call ConfigSet.getName() call ConfigSet.getName() call ConfigSet.getName() = new call org.apache.solr.core.SolrCores.addCreated(SolrCore) call org.apache.solr.core.SolrCores.addCreated(SolrCore) call org.apache.solr.core.SolrCores.addCreated(SolrCore) call org.apache.solr.core.SolrCores.addCreated(SolrCore) call org.apache.solr.core.SolrCores.addCreated(SolrCore) if ! && call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() != call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() return catch call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call SolrException.getMessage() call SolrException.getMessage() call SolrException.getMessage() call SolrException.getMessage() call SolrException.getMessage() decl_stmt org.apache.solr.common.SolrException final final = new + + if != && ! call org.apache.solr.core.SolrCore.isClosed() call org.apache.solr.core.SolrCore.isClosed() call org.apache.solr.core.SolrCore.isClosed() call org.apache.solr.core.SolrCore.isClosed() call org.apache.solr.core.SolrCore.isClosed() throw catch decl_stmt org.apache.solr.common.SolrException = new + + + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new if != && ! call org.apache.solr.core.SolrCore.isClosed() call org.apache.solr.core.SolrCore.isClosed() call org.apache.solr.core.SolrCore.isClosed() call org.apache.solr.core.SolrCore.isClosed() call org.apache.solr.core.SolrCore.isClosed() throw finally public < public < return call SolrCores.getCores() call SolrCores.getCores() call SolrCores.getCores() call SolrCores.getCores() call SolrCores.getCores() public < public < return call org.apache.solr.core.SolrCores.getCoreNames(SolrCore) call org.apache.solr.core.SolrCores.getCoreNames(SolrCore) call org.apache.solr.core.SolrCores.getCoreNames(SolrCore) call org.apache.solr.core.SolrCores.getCoreNames(SolrCore) call org.apache.solr.core.SolrCores.getCoreNames(SolrCore) public < public < return call org.apache.solr.core.SolrCores.getCoreNames(SolrCore) call org.apache.solr.core.SolrCores.getCoreNames(SolrCore) call org.apache.solr.core.SolrCores.getCoreNames(SolrCore) call org.apache.solr.core.SolrCores.getCoreNames(SolrCore) call org.apache.solr.core.SolrCores.getCoreNames(SolrCore) public < public < return call org.apache.solr.core.SolrCores.getAllCoreNames() call org.apache.solr.core.SolrCores.getAllCoreNames() call org.apache.solr.core.SolrCores.getAllCoreNames() call org.apache.solr.core.SolrCores.getAllCoreNames() call org.apache.solr.core.SolrCores.getAllCoreNames() public < public < return SolrCore SolrCore ConfigSet CoreDescriptor public public decl_stmt org.apache.solr.core.SolrCore = call org.apache.solr.core.SolrCores.getCoreFromAnyList(String,boolean) call org.apache.solr.core.SolrCores.getCoreFromAnyList(String,boolean) call org.apache.solr.core.SolrCores.getCoreFromAnyList(String,boolean) call org.apache.solr.core.SolrCores.getCoreFromAnyList(String,boolean) call org.apache.solr.core.SolrCores.getCoreFromAnyList(String,boolean) if == throw new + decl_stmt org.apache.solr.core.CoreDescriptor = call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() try call org.apache.solr.core.SolrCores.waitAddPendingCoreOps(String) call org.apache.solr.core.SolrCores.waitAddPendingCoreOps(String) call org.apache.solr.core.SolrCores.waitAddPendingCoreOps(String) call org.apache.solr.core.SolrCores.waitAddPendingCoreOps(String) call org.apache.solr.core.SolrCores.waitAddPendingCoreOps(String) decl_stmt org.apache.solr.core.ConfigSet = call org.apache.solr.core.ConfigSetService.getConfig(CoreDescriptor) call org.apache.solr.core.ConfigSetService.getConfig(CoreDescriptor) call org.apache.solr.core.ConfigSetService.getConfig(CoreDescriptor) call org.apache.solr.core.ConfigSetService.getConfig(CoreDescriptor) call org.apache.solr.core.ConfigSetService.getConfig(CoreDescriptor) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call ConfigSet.getName() call ConfigSet.getName() call ConfigSet.getName() call ConfigSet.getName() call ConfigSet.getName() decl_stmt org.apache.solr.core.SolrCore = call org.apache.solr.core.SolrCore.reload(ConfigSet) call org.apache.solr.core.SolrCore.reload(ConfigSet) call org.apache.solr.core.SolrCore.reload(ConfigSet) call org.apache.solr.core.SolrCore.reload(ConfigSet) call org.apache.solr.core.SolrCore.reload(ConfigSet) catch throw catch call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() new throw new + call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() + finally call org.apache.solr.core.SolrCores.removeFromPendingOps(String) call org.apache.solr.core.SolrCores.removeFromPendingOps(String) call org.apache.solr.core.SolrCores.removeFromPendingOps(String) call org.apache.solr.core.SolrCores.removeFromPendingOps(String) call org.apache.solr.core.SolrCores.removeFromPendingOps(String) public public if == || == throw new call org.apache.solr.core.SolrCores.swap(String,String) call org.apache.solr.core.SolrCores.swap(String,String) call org.apache.solr.core.SolrCores.swap(String,String) call org.apache.solr.core.SolrCores.swap(String,String) call org.apache.solr.core.SolrCores.swap(String,String) call CoresLocator.swap() call CoresLocator.swap() call CoresLocator.swap() call CoresLocator.swap() call CoresLocator.swap() call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + public public boolean CoreLoadFailure SolrCore CoreDescriptor public public if != decl_stmt CoreLoadFailure = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != return decl_stmt org.apache.solr.core.CoreDescriptor = call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) call org.apache.solr.core.SolrCores.getCoreDescriptor(String) if == throw new + + decl_stmt boolean = call org.apache.solr.core.SolrCores.isLoadedNotPendingClose(String) call org.apache.solr.core.SolrCores.isLoadedNotPendingClose(String) call org.apache.solr.core.SolrCores.isLoadedNotPendingClose(String) call org.apache.solr.core.SolrCores.isLoadedNotPendingClose(String) call org.apache.solr.core.SolrCores.isLoadedNotPendingClose(String) decl_stmt org.apache.solr.core.SolrCore = call org.apache.solr.core.SolrCores.remove(String) call org.apache.solr.core.SolrCores.remove(String) call org.apache.solr.core.SolrCores.remove(String) call org.apache.solr.core.SolrCores.remove(String) call org.apache.solr.core.SolrCores.remove(String) call org.apache.solr.core.CoresLocator.delete(CoreContainer,CoreDescriptor) call org.apache.solr.core.CoresLocator.delete(CoreContainer,CoreDescriptor) call org.apache.solr.core.CoresLocator.delete(CoreContainer,CoreDescriptor) call org.apache.solr.core.CoresLocator.delete(CoreContainer,CoreDescriptor) call org.apache.solr.core.CoresLocator.delete(CoreContainer,CoreDescriptor) if == return if call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() != call org.apache.solr.core.SolrCore.getSolrCoreState() call org.apache.solr.core.SolrCore.getSolrCoreState() call org.apache.solr.core.SolrCore.getSolrCoreState() call org.apache.solr.core.SolrCore.getSolrCoreState() call org.apache.solr.core.SolrCore.getSolrCoreState() call org.apache.solr.core.SolrCore.unloadOnClose(boolean,boolean,boolean) call org.apache.solr.core.SolrCore.unloadOnClose(boolean,boolean,boolean) call org.apache.solr.core.SolrCore.unloadOnClose(boolean,boolean,boolean) call org.apache.solr.core.SolrCore.unloadOnClose(boolean,boolean,boolean) call org.apache.solr.core.SolrCore.unloadOnClose(boolean,boolean,boolean) if call org.apache.solr.core.SolrCore.closeAndWait() call org.apache.solr.core.SolrCore.closeAndWait() call org.apache.solr.core.SolrCore.closeAndWait() call org.apache.solr.core.SolrCore.closeAndWait() call org.apache.solr.core.SolrCore.closeAndWait() if call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() != try call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() catch throw new + + catch throw new + + SolrCore public public try = if != decl_stmt org.apache.solr.core.SolrCore = call org.apache.solr.core.SolrCores.remove(String) call org.apache.solr.core.SolrCores.remove(String) call org.apache.solr.core.SolrCores.remove(String) call org.apache.solr.core.SolrCores.remove(String) call org.apache.solr.core.SolrCores.remove(String) call org.apache.solr.core.CoresLocator.rename(CoreContainer,CoreDescriptor,CoreDescriptor) call org.apache.solr.core.CoresLocator.rename(CoreContainer,CoreDescriptor,CoreDescriptor) call org.apache.solr.core.CoresLocator.rename(CoreContainer,CoreDescriptor,CoreDescriptor) call org.apache.solr.core.CoresLocator.rename(CoreContainer,CoreDescriptor,CoreDescriptor) call org.apache.solr.core.CoresLocator.rename(CoreContainer,CoreDescriptor,CoreDescriptor) call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() public < public < return call org.apache.solr.core.SolrCores.getCoreDescriptors() call org.apache.solr.core.SolrCores.getCoreDescriptors() call org.apache.solr.core.SolrCores.getCoreDescriptors() call org.apache.solr.core.SolrCores.getCoreDescriptors() call org.apache.solr.core.SolrCores.getCoreDescriptors() public public for : if return return public public return call org.apache.solr.core.NodeConfig.getCoreRootDirectory() call org.apache.solr.core.NodeConfig.getCoreRootDirectory() call org.apache.solr.core.NodeConfig.getCoreRootDirectory() call org.apache.solr.core.NodeConfig.getCoreRootDirectory() call org.apache.solr.core.NodeConfig.getCoreRootDirectory() SolrCore CoreLoadFailure CoreDescriptor public public decl_stmt org.apache.solr.core.SolrCore = call org.apache.solr.core.SolrCores.getCoreFromAnyList(String,boolean) call org.apache.solr.core.SolrCores.getCoreFromAnyList(String,boolean) call org.apache.solr.core.SolrCores.getCoreFromAnyList(String,boolean) call org.apache.solr.core.SolrCores.getCoreFromAnyList(String,boolean) call org.apache.solr.core.SolrCores.getCoreFromAnyList(String,boolean) if != return decl_stmt org.apache.solr.core.CoreDescriptor = call org.apache.solr.core.SolrCores.getDynamicDescriptor(String) call org.apache.solr.core.SolrCores.getDynamicDescriptor(String) call org.apache.solr.core.SolrCores.getDynamicDescriptor(String) call org.apache.solr.core.SolrCores.getDynamicDescriptor(String) call org.apache.solr.core.SolrCores.getDynamicDescriptor(String) if == decl_stmt CoreLoadFailure = if != throw new + + + call CoreLoadFailure.exception() call CoreLoadFailure.exception() call CoreLoadFailure.exception() call CoreLoadFailure.exception() call CoreLoadFailure.exception() call CoreLoadFailure.exception() call CoreLoadFailure.exception() call CoreLoadFailure.exception() call CoreLoadFailure.exception() return = call org.apache.solr.core.SolrCores.waitAddPendingCoreOps(String) call org.apache.solr.core.SolrCores.waitAddPendingCoreOps(String) call org.apache.solr.core.SolrCores.waitAddPendingCoreOps(String) call org.apache.solr.core.SolrCores.waitAddPendingCoreOps(String) call org.apache.solr.core.SolrCores.waitAddPendingCoreOps(String) if return try if == if call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() != call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() = call org.apache.solr.core.SolrCore.open() call org.apache.solr.core.SolrCore.open() call org.apache.solr.core.SolrCore.open() call org.apache.solr.core.SolrCore.open() call org.apache.solr.core.SolrCore.open() finally call org.apache.solr.core.SolrCores.removeFromPendingOps(String) call org.apache.solr.core.SolrCores.removeFromPendingOps(String) call org.apache.solr.core.SolrCores.removeFromPendingOps(String) call org.apache.solr.core.SolrCores.removeFromPendingOps(String) call org.apache.solr.core.SolrCores.removeFromPendingOps(String) return public public return public public call org.apache.solr.core.SolrCores.waitForLoadingCoresToFinish(long) call org.apache.solr.core.SolrCores.waitForLoadingCoresToFinish(long) call org.apache.solr.core.SolrCores.waitForLoadingCoresToFinish(long) call org.apache.solr.core.SolrCores.waitForLoadingCoresToFinish(long) call org.apache.solr.core.SolrCores.waitForLoadingCoresToFinish(long) public public call org.apache.solr.core.SolrCores.waitForLoadingCoreToFinish(String,long) call org.apache.solr.core.SolrCores.waitForLoadingCoreToFinish(String,long) call org.apache.solr.core.SolrCores.waitForLoadingCoreToFinish(String,long) call org.apache.solr.core.SolrCores.waitForLoadingCoreToFinish(String,long) call org.apache.solr.core.SolrCores.waitForLoadingCoreToFinish(String,long) protected < protected < < return call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) new new public public return public public return public public return public public return public public return public public return call org.apache.solr.core.NodeConfig.getManagementPath() call org.apache.solr.core.NodeConfig.getManagementPath() call org.apache.solr.core.NodeConfig.getManagementPath() call org.apache.solr.core.NodeConfig.getManagementPath() call org.apache.solr.core.NodeConfig.getManagementPath() public public return public public return call org.apache.solr.core.SolrCores.isLoaded(String) call org.apache.solr.core.SolrCores.isLoaded(String) call org.apache.solr.core.SolrCores.isLoaded(String) call org.apache.solr.core.SolrCores.isLoaded(String) call org.apache.solr.core.SolrCores.isLoaded(String) public public return call org.apache.solr.core.SolrCores.isLoadedNotPendingClose(String) call org.apache.solr.core.SolrCores.isLoadedNotPendingClose(String) call org.apache.solr.core.SolrCores.isLoadedNotPendingClose(String) call org.apache.solr.core.SolrCores.isLoadedNotPendingClose(String) call org.apache.solr.core.SolrCores.isLoadedNotPendingClose(String) public public return call org.apache.solr.core.SolrCores.getUnloadedCoreDescriptor(String) call org.apache.solr.core.SolrCores.getUnloadedCoreDescriptor(String) call org.apache.solr.core.SolrCores.getUnloadedCoreDescriptor(String) call org.apache.solr.core.SolrCores.getUnloadedCoreDescriptor(String) call org.apache.solr.core.SolrCores.getUnloadedCoreDescriptor(String) public public return public public return call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() != public public return call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() call org.apache.solr.core.ZkContainer.getZkController() public public return public public return public public return public public return public public return call org.apache.solr.core.SolrCores.isCoreLoading(String) call org.apache.solr.core.SolrCores.isCoreLoading(String) call org.apache.solr.core.SolrCores.isCoreLoading(String) call org.apache.solr.core.SolrCores.isCoreLoading(String) call org.apache.solr.core.SolrCores.isCoreLoading(String) public public return == : public public return == :