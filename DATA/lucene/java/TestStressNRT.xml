org.apache.lucene.index java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import java.util.Random import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.atomic.AtomicLong import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.FieldType import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.TermQuery import org.apache.lucene.search.TopDocs import org.apache.lucene.store.Directory import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import class org.apache.lucene.index.TestStressNRT super super extends decl Object decl Map String long long DirectoryReader int decl ConcurrentHashMap private private = = = = new for = < ++ call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() - = new call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() AtomicLong Random DirectoryReader int Object int boolean long decl Map RandomIndexWriter long AtomicInteger long int DirectoryReader FieldType int long TopDocs boolean int int decl List int IndexSearcher IndexSearcher IndexReader Document Thread Document int int Query DirectoryReader Directory int public public throws decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = : decl_stmt int final final = : decl_stmt boolean final final = decl_stmt java.util.concurrent.atomic.AtomicLong final final = new decl_stmt int final final = : decl_stmt org.apache.solr.schema.FieldType final final = new call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) if + + + + + + + + + + decl_stmt java.util.concurrent.atomic.AtomicInteger final final = new decl_stmt java.util.List < = new <> decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.RandomIndexWriter final final = new new call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() = for = < ++ decl_stmt java.lang.Thread = new + decl_stmt java.util.Random = new public public try while call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() > decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) if < if call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() <= decl_stmt java.util.Map < decl_stmt long decl_stmt org.apache.lucene.index.DirectoryReader synchronized = new <> = ++ = call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() decl_stmt org.apache.lucene.index.DirectoryReader if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < if if + + = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() else if + + + + + = else if + + + + + call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() if + + = if == call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() = call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() synchronized assert call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() > assert call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() > if call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() > call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() if + + + call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() = call DirectoryReader.toString() call DirectoryReader.toString() call DirectoryReader.toString() call DirectoryReader.toString() call DirectoryReader.toString() if >= if + + + = = else if + + + else if + + + call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() else decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt java.lang.Object = decl_stmt boolean = if = synchronized decl_stmt java.lang.Long = call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() decl_stmt long = + if < + if decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) new + if + + + + + call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) new call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() - else if < + + if decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) new + if + + + + + call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) new new call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() - else decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) if + + + + + call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Iterable) new if call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) new + call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() if ! = catch + throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for = < ++ decl_stmt java.lang.Thread = new + decl_stmt java.util.Random = new public public try decl_stmt org.apache.lucene.index.IndexReader = decl_stmt org.apache.lucene.search.IndexSearcher = while call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() >= decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < : call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt long decl_stmt org.apache.lucene.index.DirectoryReader synchronized = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() if + + + + + + + call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() decl_stmt org.apache.lucene.search.IndexSearcher if == = else = = = decl_stmt org.apache.lucene.search.Query = new new decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) if == && = new new + = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) if == if == - call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() continue + + + + + if == && ! else if != + + + for : decl_stmt org.apache.lucene.document.Document final final = call DirectoryReader.document() call DirectoryReader.document() call DirectoryReader.document() call DirectoryReader.document() call DirectoryReader.document() + + + call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) + + call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) + + + + + decl_stmt org.apache.lucene.document.Document = call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) if < + + + + + + + call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() catch call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) - + throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() for : call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() if + call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() int DirectoryReader Document Long long decl Map Object long DirectoryReader int boolean public public try while > decl_stmt int = if < if <= decl_stmt java.util.Map < decl_stmt long decl_stmt org.apache.lucene.index.DirectoryReader synchronized = new <> = ++ = call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() decl_stmt org.apache.lucene.index.DirectoryReader if < if if + + = else if + + + + + = else if + + + + + if + + = if == call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() = call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() synchronized assert call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() > assert call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() call DirectoryReader.getRefCount() > if call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() > call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() if + + + call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() = call DirectoryReader.toString() call DirectoryReader.toString() call DirectoryReader.toString() call DirectoryReader.toString() call DirectoryReader.toString() if >= if + + + = = else if + + + else if + + + call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() else decl_stmt int = decl_stmt java.lang.Object = decl_stmt boolean = if = synchronized decl_stmt java.lang.Long = call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() decl_stmt long = + if < + if decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + if + + + + + new call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() - else if < + + if decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + if + + + + + new new call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() - else decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) if + + + + + new if new + call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() if ! = catch + throw new IndexSearcher IndexSearcher long Document TopDocs Query long DirectoryReader IndexReader int public public try decl_stmt org.apache.lucene.index.IndexReader = decl_stmt org.apache.lucene.search.IndexSearcher = while >= decl_stmt int = < : decl_stmt long decl_stmt org.apache.lucene.index.DirectoryReader synchronized = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() if + + + + + + + call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() call DirectoryReader.getVersion() decl_stmt org.apache.lucene.search.IndexSearcher if == = else = = = decl_stmt org.apache.lucene.search.Query = new new decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) if == && = new new + = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) if == if == - call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() continue + + + + + if == && ! else if != + + + for : decl_stmt org.apache.lucene.document.Document final final = call DirectoryReader.document() call DirectoryReader.document() call DirectoryReader.document() call DirectoryReader.document() call DirectoryReader.document() + + + call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) + + call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) + + + + + decl_stmt org.apache.lucene.document.Document = call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) decl_stmt long = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) if < + + + + + + + call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() catch - + throw new