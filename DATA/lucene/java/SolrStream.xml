org.apache.solr.client.solrj.io.stream java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Map import java.util.HashMap import java.util.List import java.util.Iterator import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.io.SolrClientCache import org.apache.solr.client.solrj.io.Tuple import org.apache.solr.client.solrj.io.comp.StreamComparator import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.client.solrj.io.stream.SolrStream super super extends SolrClientCache boolean int JSONTupleStream String long HttpSolrClient Map String int decl Map Logger long public public < = public < public < return new public public return public public = = = public public throws if == = new else = call org.apache.solr.client.solrj.io.SolrClientCache.getHttpSolrClient(String) call org.apache.solr.client.solrj.io.SolrClientCache.getHttpSolrClient(String) call org.apache.solr.client.solrj.io.SolrClientCache.getHttpSolrClient(String) call org.apache.solr.client.solrj.io.SolrClientCache.getHttpSolrClient(String) call org.apache.solr.client.solrj.io.SolrClientCache.getHttpSolrClient(String) try = catch throw new public public = public public = public public = ModifiableSolrParams decl Map decl Iterator String private private throws decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new if call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) call java.util.Map.containsKey(Object) if ! call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) decl_stmt java.lang.String = call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) else if > throw new if > call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) + + decl_stmt java.util.Iterator < = call java.util.Map.entrySet() call java.util.Map.entrySet() call java.util.Map.entrySet() call java.util.Map.entrySet() call java.util.Map.entrySet() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt Entry = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() return StringBuilder private private decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public throws if != call org.apache.solr.client.solrj.io.stream.JSONTupleStream.close() call org.apache.solr.client.solrj.io.stream.JSONTupleStream.close() call org.apache.solr.client.solrj.io.stream.JSONTupleStream.close() call org.apache.solr.client.solrj.io.stream.JSONTupleStream.close() call org.apache.solr.client.solrj.io.stream.JSONTupleStream.close() if == call org.apache.solr.client.solrj.impl.HttpSolrClient.close() call org.apache.solr.client.solrj.impl.HttpSolrClient.close() call org.apache.solr.client.solrj.impl.HttpSolrClient.close() call org.apache.solr.client.solrj.impl.HttpSolrClient.close() call org.apache.solr.client.solrj.impl.HttpSolrClient.close() String Map Map HandledException public public throws try decl_stmt java.util.Map = call org.apache.solr.client.solrj.io.stream.JSONTupleStream.next() call org.apache.solr.client.solrj.io.stream.JSONTupleStream.next() call org.apache.solr.client.solrj.io.stream.JSONTupleStream.next() call org.apache.solr.client.solrj.io.stream.JSONTupleStream.next() call org.apache.solr.client.solrj.io.stream.JSONTupleStream.next() if == decl_stmt java.util.Map = new call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) return new else decl_stmt java.lang.String = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) if != decl_stmt HandledException = new throw if call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) if != call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) if != = return new catch throw new + + + catch throw new + + public public return decl Map String decl Iterator Object String private private < decl_stmt java.util.Iterator < < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.util.Map < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.lang.String = call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() decl_stmt java.lang.String = call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() decl_stmt java.lang.Object = return