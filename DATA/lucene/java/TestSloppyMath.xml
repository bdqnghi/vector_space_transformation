org.apache.lucene.util static static org.apache.lucene.util.SloppyMath.cos import static static org.apache.lucene.util.SloppyMath.asin import static static org.apache.lucene.util.SloppyMath.haversinMeters import static static org.apache.lucene.util.SloppyMath.haversinSortKey import java.util.Random import org.apache.lucene.geo.GeoTestUtil import class org.apache.lucene.util.TestSloppyMath super super extends double double double double double public public / / - / - / / / - / - / * / * / - * / - * / / / - / - / for = < ++ decl_stmt double = * if = - double public public - - / - - / - - / - - / - / / / / for = < ++ decl_stmt double = if = - >= - / <= / double double double Random double double double public public - - - - - - decl_stmt double = decl_stmt double = * decl_stmt java.util.Random = decl_stmt double = + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - * decl_stmt double = - + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - * decl_stmt double = + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - * decl_stmt double = - + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - * - - - - - - - - - - - - - - double double double int double double int double public public for = < ++ decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt int = decl_stmt int = public public double double double double double double public public for = < ++ decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = double double double double double double public public for = < ++ decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = if < decl_stmt double = double double double private static private static decl_stmt double = - - / decl_stmt double = - - / decl_stmt double = + * * return * *