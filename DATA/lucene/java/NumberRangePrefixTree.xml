org.apache.lucene.spatial.prefix.tree java.text.ParseException import org.locationtech.spatial4j.context.SpatialContext import org.locationtech.spatial4j.context.SpatialContextFactory import org.locationtech.spatial4j.shape.Point import org.locationtech.spatial4j.shape.Rectangle import org.locationtech.spatial4j.shape.Shape import org.locationtech.spatial4j.shape.SpatialRelation import org.locationtech.spatial4j.shape.impl.RectangleImpl import org.apache.lucene.util.BytesRef import org.apache.lucene.util.StringHelper import class org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree super super extends decl int decl int int decl int SpatialContext int public public = = decl_stmt int = if > throw new + + + if == if == return else if > if == return else if == return return new private private for = > -- if != return return int private private for = > -- decl_stmt int = - - if != return return StringBuilder protected static protected static decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = <= ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() int String String public public throws if == || throw new if == if - != throw new + - decl_stmt int = if < throw new + - decl_stmt java.lang.String = decl_stmt java.lang.String = + - return else if == throw new + else return int int protected static protected static decl_stmt int = for = <= ++ decl_stmt int = - if != return return public public return public public return public public return private private return public public return public public if instanceof return return int int int int public public decl_stmt int = if > return decl_stmt int = if < return decl_stmt int = decl_stmt int = if > || == && >= && < || == && >= return if < || == && <= && > || == && <= return return public public throw new public public return public public throw new public public throw new public public throw new public public return public public return new public public return + + + + SpanUnitsNRShape public public if == return if == || != return decl_stmt SpanUnitsNRShape = if ! return if ! return return int public public decl_stmt int = = * + return public public return public public return public public throw new decl NRCell protected protected decl_stmt NRCell final final final = for = < ++ + return public public return decl NRCell BytesRef protected protected decl_stmt NRCell final final final = new + decl_stmt org.apache.lucene.util.BytesRef final final = new for = <= ++ = new return decl NRCell int boolean NRCell public public if == = decl_stmt NRCell = decl_stmt boolean = + - == decl_stmt int = - : decl_stmt NRCell = if == = = = = call NRCell.reset() call NRCell.reset() call NRCell.reset() call NRCell.reset() call NRCell.reset() if call NRCell.setLeaf() call NRCell.setLeaf() call NRCell.setLeaf() call NRCell.setLeaf() call NRCell.setLeaf() = - return public public return NRCell decl_stmt NRCell = if == return = = = private private = = boolean int private private if >= decl_stmt int = decl_stmt boolean = - - > if - = >> - = & + else - = + assert - != = = NRCell int boolean int int private private if >= return for = <= ++ decl_stmt NRCell = decl_stmt int = decl_stmt boolean = - - > if decl_stmt int = + - & decl_stmt int = + - & assert - < << = << + - assert < << else = + - & - assert < call NRCell.assertDecoded() call NRCell.assertDecoded() call NRCell.assertDecoded() call NRCell.assertDecoded() call NRCell.assertDecoded() private private assert >= : public public return public public return public public = public public return public public = public public return public public if == = new = = = assert <= return public public = if ++ = return boolean int int NRCell public public decl_stmt NRCell = assert != decl_stmt int = = decl_stmt int = = call NRCell.getLevel() call NRCell.getLevel() call NRCell.getLevel() call NRCell.getLevel() call NRCell.getLevel() decl_stmt boolean = = = return int NRCell int int public public decl_stmt NRCell final final = assert != decl_stmt int = decl_stmt int = = = call NRCell.getLevel() call NRCell.getLevel() call NRCell.getLevel() call NRCell.getLevel() call NRCell.getLevel() decl_stmt int = = = return NRCell public public decl_stmt NRCell = + call NRCell.initIter() call NRCell.initIter() call NRCell.initIter() call NRCell.initIter() call NRCell.initIter() return int UnitNRShape NRCell int UnitNRShape int SpanUnitsNRShape private private = - if instanceof && == = = decl_stmt NRCell = - if == = = = - = return decl_stmt UnitNRShape final final decl_stmt UnitNRShape final final decl_stmt int final final if instanceof decl_stmt SpanUnitsNRShape = = call SpanUnitsNRShape.getMinUnit() call SpanUnitsNRShape.getMinUnit() call SpanUnitsNRShape.getMinUnit() call SpanUnitsNRShape.getMinUnit() call SpanUnitsNRShape.getMinUnit() = call SpanUnitsNRShape.getMaxUnit() call SpanUnitsNRShape.getMaxUnit() call SpanUnitsNRShape.getMaxUnit() call SpanUnitsNRShape.getMaxUnit() call SpanUnitsNRShape.getMaxUnit() = call SpanUnitsNRShape.getLevelsInCommon() call SpanUnitsNRShape.getLevelsInCommon() call SpanUnitsNRShape.getLevelsInCommon() call SpanUnitsNRShape.getLevelsInCommon() call SpanUnitsNRShape.getLevelsInCommon() else = = = call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() if == && <= || != if && == && call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() >= = call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() = call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() > else = = if && == && call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() >= = call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() = call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() > else = - = if == if = else if = return decl_stmt int = if > = = = - = return decl_stmt int = if < = = = - = return if < || call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() < = = else = call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() = call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() > if > || call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() < = - = else = call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() call UnitNRShape.getValAtLevel() = call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() call UnitNRShape.getLevel() > if == if = else if = boolean public public = if != return if >= return < : + decl_stmt boolean = == && || == && if ! else if == else = return int public public decl_stmt int final final = assert >= return public public assert <= return public public if <= return else return public public if == && != return if instanceof return if instanceof return return int public public decl_stmt int = if != return if > return return int int int int public public decl_stmt int = if > return decl_stmt int = if < return decl_stmt int = decl_stmt int = if < || == && <= && > || == && <= return if != || != return for < ++ if + != return for < ++ if + != - return return NRCell public public decl_stmt NRCell = call NRCell.ensureOwnTermBytes() call NRCell.ensureOwnTermBytes() call NRCell.ensureOwnTermBytes() call NRCell.ensureOwnTermBytes() call NRCell.ensureOwnTermBytes() return call NRCell.getShape() call NRCell.getShape() call NRCell.getShape() call NRCell.getShape() call NRCell.getShape() int public public decl_stmt int = if != return else return - public public throw new public public return public public throw new public public throw new public public throw new public public return boolean NRCell int int public public if ! instanceof return if == return decl_stmt NRCell = assert != if != call NRCell.getLevel() call NRCell.getLevel() call NRCell.getLevel() call NRCell.getLevel() call NRCell.getLevel() return decl_stmt int = decl_stmt int = decl_stmt boolean = call NRCell.getTokenBytesNoLeaf() call NRCell.getTokenBytesNoLeaf() call NRCell.getTokenBytesNoLeaf() call NRCell.getTokenBytesNoLeaf() call NRCell.getTokenBytesNoLeaf() = = return public public return int int public public decl_stmt int = decl_stmt int = = return public public return String public public decl_stmt java.lang.String = if == return return + : + +