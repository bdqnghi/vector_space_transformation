org.apache.lucene.analysis java.io.IOException import java.util.Random import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute import org.apache.lucene.util.TestUtil import class org.apache.lucene.analysis.MockHoleInjectingTokenFilter super super extends PositionLengthAttribute long PositionIncrementAttribute Random int int public public throws = new = - = - int int int public public throws if decl_stmt int final final = call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() decl_stmt int = + if > && <= && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == decl_stmt int final final = call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) + += = = + call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() return else return