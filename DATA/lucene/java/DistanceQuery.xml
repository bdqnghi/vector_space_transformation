org.apache.lucene.queryparser.surround.query java.util.List import java.util.Iterator import java.io.IOException import org.apache.lucene.index.IndexReader import org.apache.lucene.search.MatchNoDocsQuery import org.apache.lucene.search.Query import org.apache.lucene.search.spans.SpanNearQuery import org.apache.lucene.search.spans.SpanQuery import class org.apache.lucene.queryparser.surround.query.DistanceQuery super super extends super implements int boolean public public return public public return Object decl Iterator String DistanceSubQuery public public decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.lang.Object = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if instanceof decl_stmt org.apache.lucene.queryparser.surround.query.DistanceSubQuery = decl_stmt java.lang.String = call DistanceSubQuery.distanceSubQueryNotAllowed() call DistanceSubQuery.distanceSubQueryNotAllowed() call DistanceSubQuery.distanceSubQueryNotAllowed() call DistanceSubQuery.distanceSubQueryNotAllowed() call DistanceSubQuery.distanceSubQueryNotAllowed() if != return else return + + + call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() return Query public public throws decl_stmt org.apache.lucene.search.Query = int SpanNearClauseFactory decl Iterator decl SpanQuery public public throws decl_stmt org.apache.lucene.search.spans.SpanQuery = new decl_stmt java.util.Iterator < = decl_stmt int = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory = new call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if call org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory.size() call org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory.size() call org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory.size() call org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory.size() call org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory.size() == while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory.clear() call org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory.clear() call org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory.clear() call org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory.clear() call org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory.clear() return new = call SpanNearClauseFactory.makeSpanClause() call SpanNearClauseFactory.makeSpanClause() call SpanNearClauseFactory.makeSpanClause() call SpanNearClauseFactory.makeSpanClause() call SpanNearClauseFactory.makeSpanClause() ++ return new - public public final final final final return new