org.apache.lucene.analysis.util java.lang.reflect.InvocationTargetException import java.util.Arrays import java.util.Collections import java.util.Locale import java.util.Map import java.util.Objects import java.util.LinkedHashMap import java.util.Set import java.util.ServiceConfigurationError import org.apache.lucene.util.SPIClassIterator import class decl Map decl String decl Class decl LinkedHashMap String String decl Class decl SPIClassIterator public synchronized public synchronized decl_stmt java.util.LinkedHashMap final final final < < extends extends = new <> decl_stmt org.apache.lucene.util.SPIClassIterator final final final < = while call decl SPIClassIterator.hasNext() call decl SPIClassIterator.hasNext() call decl SPIClassIterator.hasNext() call decl SPIClassIterator.hasNext() call decl SPIClassIterator.hasNext() decl_stmt java.lang.Class final final final < extends extends = call decl SPIClassIterator.next() call decl SPIClassIterator.next() call decl SPIClassIterator.next() call decl SPIClassIterator.next() call decl SPIClassIterator.next() decl_stmt java.lang.String final final = call decl Class.getSimpleName() call decl Class.getSimpleName() call decl Class.getSimpleName() call decl Class.getSimpleName() call decl Class.getSimpleName() decl_stmt java.lang.String = for : if call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - break if == throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + + if ! call decl LinkedHashMap.containsKey() call decl LinkedHashMap.containsKey() call decl LinkedHashMap.containsKey() call decl LinkedHashMap.containsKey() call decl LinkedHashMap.containsKey() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() = decl Class public public < decl_stmt java.lang.Class final final final < extends extends = return decl Class public < extends extends public < extends extends decl_stmt java.lang.Class final final final < extends extends = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return else throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + + + + + + public < public < return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() Throwable public static < extends extends public static < extends extends < < try return call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() catch decl_stmt java.lang.Throwable final final = if instanceof throw if instanceof throw throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() catch throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() +