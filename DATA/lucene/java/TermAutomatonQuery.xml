org.apache.lucene.search java.io.IOException import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import java.util.Set import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.IndexReaderContext import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.ReaderUtil import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.index.TermState import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.search.spans.SpanNearQuery import org.apache.lucene.util.BytesRef import org.apache.lucene.util.automaton.Automaton import org.apache.lucene.util.automaton.Operations import org.apache.lucene.util.automaton.Transition import static static org.apache.lucene.util.automaton.Operations.DEFAULT_MAX_DETERMINIZED_STATES import class org.apache.lucene.search.TermAutomatonQuery super super extends decl Map decl Automaton decl Builder String Automaton decl Map public public return call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() public public call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() public public new public public if == throw new call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() public public call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() public public int int Automaton int Transition int Automaton public public decl_stmt org.apache.lucene.util.automaton.Automaton = call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() decl_stmt org.apache.lucene.util.automaton.Transition = new if != - decl_stmt int = call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) for = < ++ call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) if >= && <= throw new decl_stmt int = call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() for = < ++ = call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) for = < ++ call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) if call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) && >= && <= throw new decl_stmt int = call Automaton.size() call Automaton.size() call Automaton.size() call Automaton.size() call Automaton.size() decl_stmt org.apache.lucene.util.automaton.Automaton = new for = < ++ call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) for = < ++ = call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) for = < ++ call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) decl_stmt int if <= && <= = = - else = = call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() = = decl Map IndexReaderContext public public throws decl_stmt IndexReaderContext = decl_stmt java.util.Map < = new <> for < : call Automaton.entrySet() call Automaton.entrySet() call Automaton.entrySet() call Automaton.entrySet() call Automaton.entrySet() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new return new StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl Builder.getNumStates() call decl Builder.getNumStates() call decl Builder.getNumStates() call decl Builder.getNumStates() call decl Builder.getNumStates() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() Integer private private decl_stmt java.lang.Integer = call Automaton.get() call Automaton.get() call Automaton.get() call Automaton.get() call Automaton.get() if == = call Automaton.size() call Automaton.size() call Automaton.size() call Automaton.size() call Automaton.size() if != = call Automaton.put() call Automaton.put() call Automaton.put() call Automaton.put() call Automaton.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if == = return TermAutomatonQuery public public if ! instanceof return decl_stmt org.apache.lucene.search.TermAutomatonQuery = if == throw new if == throw new return && && public public if == throw new return ^ call Automaton.hashCode() call Automaton.hashCode() call Automaton.hashCode() call Automaton.hashCode() call Automaton.hashCode() + call decl Builder.toDot() call decl Builder.toDot() call decl Builder.toDot() call decl Builder.toDot() call decl Builder.toDot() StringBuilder Transition int int public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int final final = call decl Builder.getNumStates() call decl Builder.getNumStates() call decl Builder.getNumStates() call decl Builder.getNumStates() call decl Builder.getNumStates() if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt org.apache.lucene.util.automaton.Transition = new for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call decl Builder.isAccept() call decl Builder.isAccept() call decl Builder.isAccept() call decl Builder.isAccept() call decl Builder.isAccept() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + decl_stmt int = call decl Builder.initTransition() call decl Builder.initTransition() call decl Builder.initTransition() call decl Builder.initTransition() call decl Builder.initTransition() for = < ++ call decl Builder.getNextTransition() call decl Builder.getNextTransition() call decl Builder.getNextTransition() call decl Builder.getNextTransition() call decl Builder.getNextTransition() assert >= for = <= ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public < for : call Automaton.keySet() call Automaton.keySet() call Automaton.keySet() call Automaton.keySet() call Automaton.keySet() if != new public public return + + public public return public public BytesRef TermsEnum TermState TermContext decl EnumAndScorer boolean public public throws decl_stmt EnumAndScorer = new call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() decl_stmt boolean = for < : decl_stmt org.apache.lucene.index.TermContext = assert == : + + + decl_stmt org.apache.lucene.util.BytesRef = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.index.TermState = call org.apache.lucene.index.TermContext.get(int) call org.apache.lucene.index.TermContext.get(int) call org.apache.lucene.index.TermContext.get(int) call org.apache.lucene.index.TermContext.get(int) call org.apache.lucene.index.TermContext.get(int) if != decl_stmt org.apache.lucene.index.TermsEnum = call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) = new call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) = if return new else return public public throws return