org.apache.lucene.search.grouping java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.FieldType import org.apache.lucene.document.NumericDocValuesField import org.apache.lucene.document.SortedDocValuesField import org.apache.lucene.document.StringField import org.apache.lucene.document.TextField import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.IndexReaderContext import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.MultiDocValues import org.apache.lucene.index.NumericDocValues import org.apache.lucene.index.RandomIndexWriter import org.apache.lucene.index.ReaderUtil import org.apache.lucene.index.Term import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.queries.function.valuesource.BytesRefFieldSource import org.apache.lucene.search.CachingCollector import org.apache.lucene.search.Collector import org.apache.lucene.search.FieldDoc import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.MultiCollector import org.apache.lucene.search.Query import org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.Sort import org.apache.lucene.search.SortField import org.apache.lucene.search.TermQuery import org.apache.lucene.search.Weight import org.apache.lucene.search.grouping.function.FunctionAllGroupsCollector import org.apache.lucene.search.grouping.function.FunctionFirstPassGroupingCollector import org.apache.lucene.search.grouping.function.FunctionSecondPassGroupingCollector import org.apache.lucene.search.grouping.term.TermAllGroupsCollector import org.apache.lucene.search.grouping.term.TermFirstPassGroupingCollector import org.apache.lucene.search.grouping.term.TermSecondPassGroupingCollector import org.apache.lucene.store.Directory import org.apache.lucene.util.BytesRef import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import org.apache.lucene.util.mutable.MutableValue import org.apache.lucene.util.mutable.MutableValueStr import class org.apache.lucene.search.grouping.TestGrouping super super extends Sort decl GroupDocs decl TopGroups Document FieldType IndexSearcher String RandomIndexWriter decl AbstractSecondPassGroupingCollector decl AbstractFirstPassGroupingCollector Directory public public throws decl_stmt java.lang.String = decl_stmt org.apache.solr.schema.FieldType = new call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.RandomIndexWriter = new new decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) decl_stmt org.apache.lucene.search.IndexSearcher = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() decl_stmt org.apache.lucene.search.Sort final final = decl_stmt org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector final final final < = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new decl_stmt org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector final final final < = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new decl_stmt org.apache.lucene.search.grouping.TopGroups final final final < = call decl AbstractSecondPassGroupingCollector.getTopGroups() call decl AbstractSecondPassGroupingCollector.getTopGroups() call decl AbstractSecondPassGroupingCollector.getTopGroups() call decl AbstractSecondPassGroupingCollector.getTopGroups() call decl AbstractSecondPassGroupingCollector.getTopGroups() decl_stmt GroupDocs < = > = >= >= = = call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() private private new new decl AbstractFirstPassGroupingCollector ValueSource private < private < throws decl_stmt org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector < if decl_stmt org.apache.lucene.queries.function.ValueSource = new = new new <> else = new if + call decl AbstractFirstPassGroupingCollector.getClass() call decl AbstractFirstPassGroupingCollector.getClass() call decl AbstractFirstPassGroupingCollector.getClass() call decl AbstractFirstPassGroupingCollector.getClass() call decl AbstractFirstPassGroupingCollector.getClass() return ValueSource private < private < < throws if decl_stmt org.apache.lucene.queries.function.ValueSource = new return new new <> else return new decl Collection ValueSource private < < private < < throws if decl_stmt java.util.Collection < < = return new else decl_stmt org.apache.lucene.queries.function.ValueSource = new decl_stmt java.util.Collection < < = return new new decl List ValueSource decl SearchGroup MutableValueStr private < private < < < < throws if return new else decl_stmt org.apache.lucene.queries.function.ValueSource = new decl_stmt java.util.List < < = new <> for < : decl_stmt org.apache.lucene.search.grouping.SearchGroup < = new <> decl_stmt org.apache.lucene.util.mutable.MutableValueStr = new if != call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() else = = = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return new new <> ValueSource private < private < < if return new else decl_stmt org.apache.lucene.queries.function.ValueSource = new return new new <> MutableValueStr private private < if == if == return else if return else if == return if new else if decl_stmt org.apache.lucene.util.mutable.MutableValueStr = new call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() call MutableValueStr.value() else decl Collection decl SearchGroup decl List private < < private < < < if return else if decl_stmt java.util.Collection < < = if == return decl_stmt java.util.List < < = new <> call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() for < : decl_stmt org.apache.lucene.search.grouping.SearchGroup < = new <> = : = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return return BytesRef decl List decl TopGroups private < private < if return else if decl_stmt org.apache.lucene.search.grouping.TopGroups < = decl_stmt java.util.List < < = new <> for < : decl_stmt org.apache.lucene.util.BytesRef = : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new <> return new < call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() return decl List private private decl_stmt java.util.List final final final < = new <> if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new else if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl SortField int private < private < decl_stmt org.apache.lucene.search.SortField final final final = return new < public public for : decl_stmt int final final if == if > = - else if < = else = else if = else if = else = - if != return - : return int public public for : decl_stmt int final final if == if > = - else if < = else = else if = else if = else = - if != return - : return decl SortField SortField decl Comparable private < private < decl_stmt org.apache.lucene.search.SortField final final final = decl_stmt org.apache.lucene.search.SortField final final final = for = < ++ decl_stmt java.lang.Comparable final final final < decl_stmt org.apache.lucene.search.SortField final final = if == = else if = else if = else = = return private private if == return else return decl HashMap int decl List decl Comparator decl ScoreDoc decl List decl List int int int decl Set BytesRef decl Comparator decl List GroupDoc FieldDoc private < private < decl_stmt java.util.Comparator final final final < = decl_stmt HashMap final final final < < = new <> decl_stmt java.util.List final final final < = new <> decl_stmt java.util.List final final final < < = new <> decl_stmt int = decl_stmt java.util.Set < = new <> for : if ! call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() continue ++ if if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt java.util.List < = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = new <> call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if >= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() return decl_stmt int final final = + call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() decl_stmt java.util.Comparator final final final < = decl_stmt java.util.Comparator final final final < = decl_stmt HashMap final final final < < = new <> decl_stmt java.util.List final final final < = new <> decl_stmt java.util.List final final final < < = new <> decl_stmt int = decl_stmt java.util.Set < = new <> for : if ! call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() call FieldDoc.content() continue ++ if if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt java.util.List < = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = new <> call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if >= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() return decl_stmt int final final = + call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() decl_stmt java.util.Comparator final final final < = decl_stmt int = for = < ++ decl_stmt org.apache.lucene.util.BytesRef final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.util.List final final final < = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() += call decl ScoreDoc.size() call decl ScoreDoc.size() call decl ScoreDoc.size() call decl ScoreDoc.size() call decl ScoreDoc.size() decl_stmt org.apache.lucene.search.ScoreDoc final final final if call decl ScoreDoc.size() call decl ScoreDoc.size() call decl ScoreDoc.size() call decl ScoreDoc.size() call decl ScoreDoc.size() > decl_stmt int final final = + call decl ScoreDoc.size() call decl ScoreDoc.size() call decl ScoreDoc.size() call decl ScoreDoc.size() call decl ScoreDoc.size() = new - for = < ++ decl_stmt GroupDoc final final = call decl ScoreDoc.get() call decl ScoreDoc.get() call decl ScoreDoc.get() call decl ScoreDoc.get() call decl ScoreDoc.get() decl_stmt org.apache.lucene.search.FieldDoc final final if = new : else = new : - = else = new - = new <> call decl ScoreDoc.size() call decl ScoreDoc.size() call decl ScoreDoc.size() call decl ScoreDoc.size() call decl ScoreDoc.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() : if return new <> new <> call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() else return new <> FieldType decl List decl List Field DirectoryReader RandomIndexWriter Document decl List decl Map private private throws decl_stmt java.util.Map final final final < < = new <> decl_stmt java.util.List final final final < = new <> for : if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.index.RandomIndexWriter = new new decl_stmt java.util.List final final final < < = new <> decl_stmt org.apache.solr.schema.FieldType = new call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) for : decl_stmt java.util.List final final final < = new <> for : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.document.Document = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if != call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) decl_stmt org.apache.solr.handler.dataimport.config.Field final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - call org.apache.lucene.index.RandomIndexWriter.addDocuments(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocuments(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocuments(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocuments(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocuments(Iterable) if != && == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for < : call org.apache.lucene.index.RandomIndexWriter.updateDocuments(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocuments(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocuments(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocuments(Term,Iterable) call org.apache.lucene.index.RandomIndexWriter.updateDocuments(Term,Iterable) new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.index.DirectoryReader final final = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() return Directory decl SortField decl String decl TopGroups DirectoryReader NumericDocValues int BytesRef int boolean int NumericDocValues BlockGroupingCollector GroupDoc decl TopGroups Query String NumericDocValuesField decl TopGroups decl AbstractFirstPassGroupingCollector int decl TopGroups boolean decl TopGroups Field GroupDoc int decl GroupDoc boolean Query Sort int Field Document decl Map decl GroupDoc boolean IndexSearcher FieldDoc decl Map decl TopGroups Collector decl SortField boolean CachingCollector decl List ShardState decl Collection int int decl TopGroups decl AbstractSecondPassGroupingCollector Collector Sort decl ScoreDoc TermAllGroupsCollector decl AbstractAllGroupsCollector Document double ShardState decl Set boolean Field IndexSearcher DirectoryReader boolean String RandomIndexWriter Field StringBuilder int Field boolean Directory String public public throws decl_stmt int = for = < ++ if + decl_stmt int final final = * decl_stmt int final final = if + + + decl_stmt java.util.List final final final < = new <> for = < ++ decl_stmt java.lang.String do = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new decl_stmt java.lang.String final final final = new if for = < ++ decl_stmt java.lang.StringBuilder final final = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int final final = for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if + call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.RandomIndexWriter = new new decl_stmt org.apache.lucene.document.Document = new decl_stmt org.apache.lucene.document.Document = new decl_stmt org.apache.solr.handler.dataimport.config.Field = new new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) decl_stmt org.apache.solr.handler.dataimport.config.Field = call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) decl_stmt org.apache.solr.handler.dataimport.config.Field = new new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) decl_stmt org.apache.solr.handler.dataimport.config.Field = new new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) decl_stmt org.apache.solr.handler.dataimport.config.Field = call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) decl_stmt NumericDocValuesField = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) decl_stmt GroupDoc final final final = new for = < ++ decl_stmt org.apache.lucene.util.BytesRef final final if == = else = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt GroupDoc final final = new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if + + + + + == : call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() + + call GroupDoc.sort1() call GroupDoc.sort1() call GroupDoc.sort1() call GroupDoc.sort1() call GroupDoc.sort1() call GroupDoc.sort1() call GroupDoc.sort1() call GroupDoc.sort1() call GroupDoc.sort1() + + call GroupDoc.sort2() call GroupDoc.sort2() call GroupDoc.sort2() call GroupDoc.sort2() call GroupDoc.sort2() call GroupDoc.sort2() call GroupDoc.sort2() call GroupDoc.sort2() call GroupDoc.sort2() = if != call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call GroupDoc.group() call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) else call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) new call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call NumericDocValuesField.setLongValue() call NumericDocValuesField.setLongValue() call NumericDocValuesField.setLongValue() call NumericDocValuesField.setLongValue() call NumericDocValuesField.setLongValue() if == call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) else call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) decl_stmt GroupDoc final final final = new decl_stmt org.apache.lucene.index.DirectoryReader final final = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() decl_stmt NumericDocValues final final = decl_stmt org.apache.lucene.index.DirectoryReader = decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.search.IndexSearcher final final = if + decl_stmt ShardState final final = new decl_stmt java.util.Set < = new <> for = < ++ decl_stmt org.apache.lucene.search.ScoreDoc final final final = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new + for : decl_stmt int = int call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() decl_stmt GroupDoc final final = call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() == = call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() for : >= = = decl_stmt org.apache.lucene.search.Query final final = new new decl_stmt NumericDocValues final final = decl_stmt org.apache.lucene.search.IndexSearcher final final = decl_stmt ShardState final final = new decl_stmt java.util.Map final final final < < = new <> for = < ++ decl_stmt java.util.Map final final final < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + decl_stmt org.apache.lucene.search.ScoreDoc final final final = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new + for : decl_stmt GroupDoc final final = int call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() == = call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for = < ++ if + decl_stmt java.lang.String final final = + decl_stmt boolean final final = decl_stmt boolean = decl_stmt boolean final final = decl_stmt org.apache.lucene.search.Sort final final = decl_stmt org.apache.lucene.search.Sort final final = |= call org.apache.lucene.search.Sort.needsScores() call org.apache.lucene.search.Sort.needsScores() call org.apache.lucene.search.Sort.needsScores() call org.apache.lucene.search.Sort.needsScores() call org.apache.lucene.search.Sort.needsScores() || call org.apache.lucene.search.Sort.needsScores() call org.apache.lucene.search.Sort.needsScores() call org.apache.lucene.search.Sort.needsScores() call org.apache.lucene.search.Sort.needsScores() call org.apache.lucene.search.Sort.needsScores() decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = - / decl_stmt int final final = - decl_stmt boolean final final = decl_stmt boolean final final = if + + + + + + + call DirectoryReader.docFreq() call DirectoryReader.docFreq() call DirectoryReader.docFreq() call DirectoryReader.docFreq() call DirectoryReader.docFreq() new + + call DirectoryReader.docFreq() call DirectoryReader.docFreq() call DirectoryReader.docFreq() call DirectoryReader.docFreq() call DirectoryReader.docFreq() new + + + + + + + + + + + + + + + + decl_stmt java.lang.String = if + decl_stmt org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector final final final < = + decl_stmt org.apache.lucene.search.CachingCollector final final decl_stmt org.apache.lucene.search.Collector final final decl_stmt org.apache.lucene.search.grouping.AbstractAllGroupsCollector final final final < if = else = decl_stmt boolean final final = if decl_stmt double final final = if + if if = = else = = else = = else = if = else = decl_stmt org.apache.lucene.search.Query final final = new new call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) if && ! if call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) if call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) else call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) if call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) decl_stmt java.util.Collection final final final < < = decl_stmt org.apache.lucene.search.grouping.TopGroups final final final < if if == else for < : + == : + + decl_stmt org.apache.lucene.search.grouping.TopGroups final final final < = decl_stmt org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector final final final < if != if for < : + == : + + = + if if call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.isCached() if call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) else if call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) else call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) if decl_stmt org.apache.lucene.search.grouping.TopGroups < = = new <> call decl AbstractAllGroupsCollector.getGroupCount() call decl AbstractAllGroupsCollector.getGroupCount() call decl AbstractAllGroupsCollector.getGroupCount() call decl AbstractAllGroupsCollector.getGroupCount() call decl AbstractAllGroupsCollector.getGroupCount() else = else = = if decl_stmt org.apache.lucene.search.grouping.TopGroups final final final < = if if == else + for < : + == : + + + + for : + + + if == else + for < : + == : + + for : + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + if == for = < call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() ++ + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + call org.apache.lucene.search.IndexSearcher.explain(Weight,int) call org.apache.lucene.search.IndexSearcher.explain(Weight,int) call org.apache.lucene.search.IndexSearcher.explain(Weight,int) call org.apache.lucene.search.IndexSearcher.explain(Weight,int) call org.apache.lucene.search.IndexSearcher.explain(Weight,int) if == else + for < : + == : + + for : + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + if != decl_stmt boolean final final = || || == decl_stmt org.apache.lucene.search.grouping.BlockGroupingCollector final final = new + call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) decl_stmt org.apache.lucene.search.grouping.term.TermAllGroupsCollector final final decl_stmt org.apache.lucene.search.Collector final final if = new = else = = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) decl_stmt org.apache.lucene.search.grouping.TopGroups final final final < = < call org.apache.lucene.search.grouping.BlockGroupingCollector.getTopGroups(Sort,int,int,int,boolean) call org.apache.lucene.search.grouping.BlockGroupingCollector.getTopGroups(Sort,int,int,int,boolean) call org.apache.lucene.search.grouping.BlockGroupingCollector.getTopGroups(Sort,int,int,int,boolean) call org.apache.lucene.search.grouping.BlockGroupingCollector.getTopGroups(Sort,int,int,int,boolean) call org.apache.lucene.search.grouping.BlockGroupingCollector.getTopGroups(Sort,int,int,int,boolean) + decl_stmt org.apache.lucene.search.grouping.TopGroups final final final < if && != int call TermAllGroupsCollector.getGroupCount() call TermAllGroupsCollector.getGroupCount() call TermAllGroupsCollector.getGroupCount() call TermAllGroupsCollector.getGroupCount() call TermAllGroupsCollector.getGroupCount() = new <> call TermAllGroupsCollector.getGroupCount() call TermAllGroupsCollector.getGroupCount() call TermAllGroupsCollector.getGroupCount() call TermAllGroupsCollector.getGroupCount() call TermAllGroupsCollector.getGroupCount() else = if if == else + decl_stmt boolean = for < : + == : call GroupDoc.groupValue() call GroupDoc.groupValue() call GroupDoc.groupValue() call GroupDoc.groupValue() call GroupDoc.groupValue() call GroupDoc.groupValue() call GroupDoc.groupValue() call GroupDoc.groupValue() call GroupDoc.groupValue() + + for : + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + + if + call org.apache.lucene.search.IndexSearcher.explain(Weight,int) call org.apache.lucene.search.IndexSearcher.explain(Weight,int) call org.apache.lucene.search.IndexSearcher.explain(Weight,int) call org.apache.lucene.search.IndexSearcher.explain(Weight,int) call org.apache.lucene.search.IndexSearcher.explain(Weight,int) = decl_stmt org.apache.lucene.search.grouping.TopGroups final final final < = if != for < : for : decl_stmt GroupDoc final final = = decl_stmt org.apache.lucene.search.SortField final final final = call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() decl_stmt java.util.Map final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for = < ++ if == for < : if != = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.search.SortField final final final = call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() for = < ++ if == for < : for : decl_stmt org.apache.lucene.search.FieldDoc = if != = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() ScoreDoc private private < for < : for = < ++ decl_stmt org.apache.lucene.search.ScoreDoc final final = + + decl List decl Collection decl AbstractSecondPassGroupingCollector decl List boolean String Weight decl Collection decl TopGroups decl AbstractFirstPassGroupingCollector private < private < throws if + + + + + decl_stmt org.apache.lucene.search.Weight final final = decl_stmt java.util.List final final final < < < = new <> decl_stmt java.util.List < < = new <> decl_stmt org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector < = decl_stmt boolean = decl_stmt java.lang.String = for = < ++ if == = + else = + if + + + + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.util.Collection final final final < < = if != if + + + + + + call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() + for < : + + + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.util.Collection final final final < < = if if == else + call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() + for < : + + + if != for = < ++ decl_stmt org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector final final final < = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + = if + + + + for < : + + + + + decl_stmt org.apache.lucene.search.grouping.TopGroups < = if + + for < : + + + + + return else return FieldDoc decl ScoreDoc FieldDoc decl ScoreDoc decl GroupDocs decl GroupDocs private private < < if == return if != && for = < ++ if + decl_stmt GroupDocs final final final < = decl_stmt GroupDocs final final final < = if if if == else else if decl_stmt org.apache.lucene.search.ScoreDoc final final final = decl_stmt org.apache.lucene.search.ScoreDoc final final final = for = < ++ decl_stmt org.apache.lucene.search.FieldDoc final final = decl_stmt org.apache.lucene.search.FieldDoc final final = if else if public public throws public public return + +