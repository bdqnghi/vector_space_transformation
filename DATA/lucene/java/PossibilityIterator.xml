org.apache.solr.spelling java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.Comparator import java.util.HashSet import java.util.Iterator import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.NoSuchElementException import java.util.PriorityQueue import java.util.Set import org.apache.lucene.analysis.Token import class org.apache.solr.spelling.PossibilityIterator super super implements decl Iterator int decl List int boolean boolean decl Iterator int private private for : if ! return return private private if != && call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() return if return if != && call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() return return RankedSpellPossibility private private if != && call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt RankedSpellPossibility = new = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() = = ++ return if throw new if != && call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt RankedSpellPossibility = new = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() = = ++ return throw new decl List SpellCheckCorrection decl List int decl List private private decl_stmt java.util.List < = if != && call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() else if throw new = new <> decl_stmt java.util.List < < = decl_stmt int = while ! && == || call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == = for = < ++ decl_stmt java.util.List < = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.solr.spelling.SpellCheckCorrection = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() += if == - ++ if == call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = if == = for = - >= -- ++ if >= call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() && > = else break call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if == call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = if = else = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() = = decl List decl List private < < private < < < decl_stmt java.util.List < < = if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return = new <> for = < ++ decl_stmt java.util.List < = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return int boolean decl List decl List SpellCheckCorrection SpellCheckCorrection decl List private < private < < decl_stmt java.util.List < = decl_stmt java.util.List < = new <> decl_stmt org.apache.solr.spelling.SpellCheckCorrection = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt int = decl_stmt boolean = for = < - ++ ++ if == = decl_stmt org.apache.solr.spelling.SpellCheckCorrection = if ! call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = if ! return = = while if == call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - return decl_stmt java.util.List < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.solr.spelling.SpellCheckCorrection = for = <= ++ = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt int = decl_stmt boolean = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - ++ ++ if == call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() break decl_stmt org.apache.solr.spelling.SpellCheckCorrection = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if ! call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = if ! || == call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - return = ++ int int int int private private decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = if >= && <= return if >= && <= return return public public return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public return call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() public public throw new int int public public decl_stmt int final final = decl_stmt int = = * + == : return RankedSpellPossibility public public if == return if == return if != return decl_stmt RankedSpellPossibility = if == if != return else if ! return return StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public return - int public public decl_stmt int = - if == = - return