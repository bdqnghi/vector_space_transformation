org.apache.lucene.index java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.HashSet import java.util.List import java.util.Locale import java.util.Map import class org.apache.lucene.index.TieredMergePolicy super super extends double long int long double double int double public public if < throw new + + = return public public return public public if < throw new + + = return public public return public public if < throw new + + *= * = > : long return public public return / / public public if < throw new + + = return public public return public public if <= throw new + + *= * = > : long return public public return / * public public if < || || throw new + + = return public public return public public if < throw new + + = return public public return long long public public try decl_stmt long final final = decl_stmt long final final = if > return - else if > return else return catch throw new String decl Collection boolean decl List long long decl List decl List decl List MergeScore decl Collection double MergeScore MergeSpecification long boolean long long int double SegmentCommitInfo long long long OneMerge int boolean public public throws if + + if == return decl_stmt java.util.Collection final final final < = decl_stmt java.util.Collection final final final < = new <> decl_stmt java.util.List final final final < = new <> new decl_stmt long = decl_stmt long = for : decl_stmt long final final = if decl_stmt java.lang.String = call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() : if >= / += else if < += + + + / / + + = += decl_stmt int = while < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt long = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if < / break -= ++ = decl_stmt long = decl_stmt long = decl_stmt double = while decl_stmt double final final = / double if < += break += -= * *= decl_stmt int = int decl_stmt MergeSpecification = while decl_stmt long = decl_stmt java.util.List final final final < = new <> for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() += else if ! call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt boolean final final = >= if + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt MergeScore = decl_stmt java.util.List < = decl_stmt boolean = decl_stmt long = for = <= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - ++ decl_stmt long = decl_stmt java.util.List final final final < = new <> decl_stmt boolean = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < ++ decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt long final final = if + > = continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() += assert call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt MergeScore final final = if + + + call MergeScore.getScore() call MergeScore.getScore() call MergeScore.getScore() call MergeScore.getScore() call MergeScore.getScore() + + call MergeScore.getExplanation() call MergeScore.getExplanation() call MergeScore.getExplanation() call MergeScore.getExplanation() call MergeScore.getExplanation() + + + + / / if == || call MergeScore.getScore() call MergeScore.getScore() call MergeScore.getScore() call MergeScore.getScore() call MergeScore.getScore() < call MergeScore.getScore() call MergeScore.getScore() call MergeScore.getScore() call MergeScore.getScore() call MergeScore.getScore() && ! || ! = = = = if != if == = new decl_stmt OneMerge final final = new call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() for : call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() if + + + / / + + call MergeScore.getScore() call MergeScore.getScore() call MergeScore.getScore() call MergeScore.getScore() call MergeScore.getScore() + + call MergeScore.getExplanation() call MergeScore.getExplanation() call MergeScore.getExplanation() call MergeScore.getExplanation() call MergeScore.getExplanation() + : else return else return double long long double long double double long protected protected < throws decl_stmt long = decl_stmt long = decl_stmt long = for : decl_stmt long final final = += += += decl_stmt double final final if = / else = double / decl_stmt double = *= decl_stmt double final final = double / *= decl_stmt double final final = return new public public return public public return + + + public public return public public return + + + int Boolean boolean OneMerge decl Collection boolean int MergeSpecification decl List public public < throws if + + + + + decl_stmt java.util.List < = new <> decl_stmt boolean = decl_stmt java.util.Collection final final final < = decl_stmt boolean = for : decl_stmt java.lang.Boolean final final = if != = if ! call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return if > && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() <= || == && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == && ! || call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if return new if + + decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt MergeSpecification = while >= + - if == = new decl_stmt OneMerge final final = new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() - if + call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() -= if == && ! decl_stmt int final final = - + decl_stmt OneMerge final final = new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() - if + call OneMerge.segString() call OneMerge.segString() call OneMerge.segString() call OneMerge.segString() call OneMerge.segString() = new call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() return int decl List MergeSpecification int decl Collection OneMerge double public public throws if + + + decl_stmt java.util.List final final final < = new <> decl_stmt java.util.Collection final final final < = for : decl_stmt double = * double / if > && ! call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return new if + decl_stmt int = decl_stmt MergeSpecification = while < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int final final = + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if == = new decl_stmt OneMerge final final = new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() if + call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() = return private private return private private return != && private private StringBuilder public public decl_stmt java.lang.StringBuilder = new + + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) / / call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) / / call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()