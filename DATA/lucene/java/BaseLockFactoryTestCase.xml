org.apache.lucene.store java.io.ByteArrayOutputStream import java.io.IOException import java.io.PrintStream import java.io.UnsupportedEncodingException import java.nio.file.AccessDeniedException import java.nio.file.NoSuchFileException import java.nio.file.Path import java.util.concurrent.CyclicBarrier import java.util.concurrent.atomic.AtomicBoolean import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.locks.ReentrantLock import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.IndexWriterConfig.OpenMode import org.apache.lucene.index.IndexWriterConfig import org.apache.lucene.index.Term import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.TermQuery import org.apache.lucene.util.Constants import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.PrintStreamInfoStream import org.apache.lucene.util.TestUtil import class org.apache.lucene.store.BaseLockFactoryTestCase super super extends Lock Directory Path public public throws decl_stmt java.nio.file.Path = decl_stmt org.apache.lucene.store.Directory = decl_stmt java.util.concurrent.locks.Lock = call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Lock.close() = call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() Lock Directory Path public public throws decl_stmt java.nio.file.Path = decl_stmt org.apache.lucene.store.Directory = decl_stmt java.util.concurrent.locks.Lock = call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() Lock Directory Path public public throws decl_stmt java.nio.file.Path = decl_stmt org.apache.lucene.store.Directory = decl_stmt java.util.concurrent.locks.Lock = call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Lock.ensureValid() call Lock.ensureValid() call Lock.ensureValid() call Lock.ensureValid() call Lock.ensureValid() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() Lock Directory Path public public throws decl_stmt java.nio.file.Path = decl_stmt org.apache.lucene.store.Directory = decl_stmt java.util.concurrent.locks.Lock = call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Lock.close() call Lock.ensureValid() call Lock.ensureValid() call Lock.ensureValid() call Lock.ensureValid() call Lock.ensureValid() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() AtomicInteger int CyclicBarrier int AtomicBoolean decl Thread Path Directory ReentrantLock public public throws decl_stmt java.nio.file.Path = decl_stmt org.apache.lucene.store.Directory final final = decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new decl_stmt java.util.concurrent.atomic.AtomicInteger final final = new decl_stmt java.util.concurrent.locks.ReentrantLock final final = new decl_stmt int = + decl_stmt int final final = decl_stmt java.util.concurrent.CyclicBarrier = new decl_stmt java.lang.Thread = new for = < ++ = new public public try call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) catch throw new while call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() try = call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call Directory.obtainLock() call java.util.concurrent.locks.ReentrantLock.isLocked() call java.util.concurrent.locks.ReentrantLock.isLocked() call java.util.concurrent.locks.ReentrantLock.isLocked() call java.util.concurrent.locks.ReentrantLock.isLocked() call java.util.concurrent.locks.ReentrantLock.isLocked() if call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() else assert != catch if call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() > call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) for = < ++ call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() public public try catch throw new while try = if else assert != catch if > SearcherThread WriterThread IndexWriter Directory Path public public throws decl_stmt java.nio.file.Path = decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.IndexWriter = new new new call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() decl_stmt WriterThread = new decl_stmt SearcherThread = new call WriterThread.start() call WriterThread.start() call WriterThread.start() call WriterThread.start() call WriterThread.start() call SearcherThread.start() call SearcherThread.start() call SearcherThread.start() call SearcherThread.start() call SearcherThread.start() while call WriterThread.isAlive() call WriterThread.isAlive() call WriterThread.isAlive() call WriterThread.isAlive() call WriterThread.isAlive() || call SearcherThread.isAlive() call SearcherThread.isAlive() call SearcherThread.isAlive() call SearcherThread.isAlive() call SearcherThread.isAlive() ! ! call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() Document private private throws decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) private private try return catch throw new ByteArrayOutputStream IndexWriter IndexWriterConfig PrintStream public public decl_stmt org.apache.lucene.index.IndexWriter = decl_stmt java.io.ByteArrayOutputStream = new for = < ++ if + decl_stmt org.apache.lucene.index.IndexWriterConfig = new new decl_stmt java.io.PrintStream try = new catch throw new call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) new call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) + call org.apache.lucene.index.IndexWriterConfig.setOpenMode(OpenMode) call org.apache.lucene.index.IndexWriterConfig.setOpenMode(OpenMode) call org.apache.lucene.index.IndexWriterConfig.setOpenMode(OpenMode) call org.apache.lucene.index.IndexWriterConfig.setOpenMode(OpenMode) call org.apache.lucene.index.IndexWriterConfig.setOpenMode(OpenMode) try = new catch if && instanceof call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) else = + break if != try catch = + break try call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() catch = + break = IndexSearcher Query IndexReader public public decl_stmt org.apache.lucene.index.IndexReader = decl_stmt org.apache.lucene.search.IndexSearcher = decl_stmt org.apache.lucene.search.Query = new new for = < ++ try = = catch = + break try call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) catch = + break try call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() catch = + break