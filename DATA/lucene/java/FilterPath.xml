org.apache.lucene.mockfile java.io.File import java.io.IOException import java.net.URI import java.nio.file.FileSystem import java.nio.file.LinkOption import java.nio.file.Path import java.nio.file.ProviderMismatchException import java.nio.file.WatchEvent.Kind import java.nio.file.WatchEvent.Modifier import java.nio.file.WatchKey import java.nio.file.WatchService import java.util.Iterator import org.apache.lucene.util.SuppressForbidden import class org.apache.lucene.mockfile.FilterPath super super implements Path FileSystem public public return public public return public public return call java.nio.file.Path.isAbsolute() call java.nio.file.Path.isAbsolute() call java.nio.file.Path.isAbsolute() call java.nio.file.Path.isAbsolute() call java.nio.file.Path.isAbsolute() Path public public decl_stmt java.nio.file.Path = call java.nio.file.Path.getRoot() call java.nio.file.Path.getRoot() call java.nio.file.Path.getRoot() call java.nio.file.Path.getRoot() call java.nio.file.Path.getRoot() if == return return Path public public decl_stmt java.nio.file.Path = call java.nio.file.Path.getFileName() call java.nio.file.Path.getFileName() call java.nio.file.Path.getFileName() call java.nio.file.Path.getFileName() call java.nio.file.Path.getFileName() if == return return Path public public decl_stmt java.nio.file.Path = call java.nio.file.Path.getParent() call java.nio.file.Path.getParent() call java.nio.file.Path.getParent() call java.nio.file.Path.getParent() call java.nio.file.Path.getParent() if == return return public public return call java.nio.file.Path.getNameCount() call java.nio.file.Path.getNameCount() call java.nio.file.Path.getNameCount() call java.nio.file.Path.getNameCount() call java.nio.file.Path.getNameCount() public public return call java.nio.file.Path.getName(int) call java.nio.file.Path.getName(int) call java.nio.file.Path.getName(int) call java.nio.file.Path.getName(int) call java.nio.file.Path.getName(int) public public return call java.nio.file.Path.subpath(int,int) call java.nio.file.Path.subpath(int,int) call java.nio.file.Path.subpath(int,int) call java.nio.file.Path.subpath(int,int) call java.nio.file.Path.subpath(int,int) public public return call java.nio.file.Path.startsWith(Path) call java.nio.file.Path.startsWith(Path) call java.nio.file.Path.startsWith(Path) call java.nio.file.Path.startsWith(Path) call java.nio.file.Path.startsWith(Path) public public return call java.nio.file.Path.startsWith(Path) call java.nio.file.Path.startsWith(Path) call java.nio.file.Path.startsWith(Path) call java.nio.file.Path.startsWith(Path) call java.nio.file.Path.startsWith(Path) public public return call java.nio.file.Path.endsWith(Path) call java.nio.file.Path.endsWith(Path) call java.nio.file.Path.endsWith(Path) call java.nio.file.Path.endsWith(Path) call java.nio.file.Path.endsWith(Path) public public return call java.nio.file.Path.startsWith(Path) call java.nio.file.Path.startsWith(Path) call java.nio.file.Path.startsWith(Path) call java.nio.file.Path.startsWith(Path) call java.nio.file.Path.startsWith(Path) public public return call java.nio.file.Path.normalize() call java.nio.file.Path.normalize() call java.nio.file.Path.normalize() call java.nio.file.Path.normalize() call java.nio.file.Path.normalize() public public return call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) public public return call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) public public return call java.nio.file.Path.resolveSibling(Path) call java.nio.file.Path.resolveSibling(Path) call java.nio.file.Path.resolveSibling(Path) call java.nio.file.Path.resolveSibling(Path) call java.nio.file.Path.resolveSibling(Path) public public return call java.nio.file.Path.resolveSibling(Path) call java.nio.file.Path.resolveSibling(Path) call java.nio.file.Path.resolveSibling(Path) call java.nio.file.Path.resolveSibling(Path) call java.nio.file.Path.resolveSibling(Path) public public return call java.nio.file.Path.relativize(Path) call java.nio.file.Path.relativize(Path) call java.nio.file.Path.relativize(Path) call java.nio.file.Path.relativize(Path) call java.nio.file.Path.relativize(Path) public public return call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() public public return call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() public public return call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() public public throws return call java.nio.file.Path.toRealPath(LinkOption) call java.nio.file.Path.toRealPath(LinkOption) call java.nio.file.Path.toRealPath(LinkOption) call java.nio.file.Path.toRealPath(LinkOption) call java.nio.file.Path.toRealPath(LinkOption) = public = public return call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() public public < throws return call java.nio.file.Path.register(WatchService,WatchEvent,WatchEvent,Modifier) call java.nio.file.Path.register(WatchService,WatchEvent,WatchEvent,Modifier) call java.nio.file.Path.register(WatchService,WatchEvent,WatchEvent,Modifier) call java.nio.file.Path.register(WatchService,WatchEvent,WatchEvent,Modifier) call java.nio.file.Path.register(WatchService,WatchEvent,WatchEvent,Modifier) public public < throws return call java.nio.file.Path.register(WatchService,WatchEvent,WatchEvent,Modifier) call java.nio.file.Path.register(WatchService,WatchEvent,WatchEvent,Modifier) call java.nio.file.Path.register(WatchService,WatchEvent,WatchEvent,Modifier) call java.nio.file.Path.register(WatchService,WatchEvent,WatchEvent,Modifier) call java.nio.file.Path.register(WatchService,WatchEvent,WatchEvent,Modifier) decl Iterator public < public < decl_stmt java.util.Iterator final final final < = call java.nio.file.Path.iterator() call java.nio.file.Path.iterator() call java.nio.file.Path.iterator() call java.nio.file.Path.iterator() call java.nio.file.Path.iterator() return new < public public return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public return call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() public public call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() public public return public public return public public public public return call java.nio.file.Path.compareTo(Path) call java.nio.file.Path.compareTo(Path) call java.nio.file.Path.compareTo(Path) call java.nio.file.Path.compareTo(Path) call java.nio.file.Path.compareTo(Path) public public return call java.nio.file.Path.hashCode() call java.nio.file.Path.hashCode() call java.nio.file.Path.hashCode() call java.nio.file.Path.hashCode() call java.nio.file.Path.hashCode() FilterPath public public if == return if == return if != return decl_stmt org.apache.lucene.mockfile.FilterPath = if == if != return else if ! call java.nio.file.Path.equals(Object) call java.nio.file.Path.equals(Object) call java.nio.file.Path.equals(Object) call java.nio.file.Path.equals(Object) call java.nio.file.Path.equals(Object) return if == if != return else if ! call FileSystem.equals() call FileSystem.equals() call FileSystem.equals() call FileSystem.equals() call FileSystem.equals() return return public static public static while instanceof = return protected protected return new FilterPath protected protected if instanceof decl_stmt org.apache.lucene.mockfile.FilterPath = if != throw new + call FileSystem.provider() call FileSystem.provider() call FileSystem.provider() call FileSystem.provider() call FileSystem.provider() + + call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() return else throw new +