org.apache.solr.client.solrj.io.stream java.io.IOException import java.lang.invoke.MethodHandles import java.util.HashMap import java.util.List import java.util.Map import org.apache.solr.client.solrj.io.Tuple import org.apache.solr.client.solrj.io.comp.StreamComparator import org.apache.solr.common.SolrException import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.client.solrj.io.stream.ExceptionStream super super extends Exception TupleStream Logger public < public < return public public try call TupleStream.open() call TupleStream.open() call TupleStream.open() call TupleStream.open() call TupleStream.open() catch = Map public public if != decl_stmt java.util.Map = new call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call Exception.getMessage() call Exception.getMessage() call Exception.getMessage() call Exception.getMessage() call Exception.getMessage() call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) return new try return call TupleStream.read() call TupleStream.read() call TupleStream.read() call TupleStream.read() call TupleStream.read() catch decl_stmt java.util.Map = new call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) return new public public return public public throws call TupleStream.close() call TupleStream.close() call TupleStream.close() call TupleStream.close() call TupleStream.close() public public