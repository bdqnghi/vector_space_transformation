org.apache.solr.uima.processor org.apache.solr.common.SolrInputDocument import org.apache.solr.uima.processor.SolrUIMAConfiguration.MapField import org.apache.uima.cas.FSIterator import org.apache.uima.cas.FeatureStructure import org.apache.uima.cas.Type import org.apache.uima.jcas.JCas import org.apache.uima.jcas.tcas.Annotation import org.slf4j.Logger import org.slf4j.LoggerFactory import java.lang.invoke.MethodHandles import java.util.Map import class org.apache.solr.uima.processor.UIMAToSolrMapper JCas SolrInputDocument Logger FeatureStructure String String MapField String String Type < throws try decl_stmt sun.tools.java.Type = call JCas.getTypeSystem() call JCas.getTypeSystem() call JCas.getTypeSystem() call JCas.getTypeSystem() call JCas.getTypeSystem() for < = call JCas.getFSIndexRepository() call JCas.getFSIndexRepository() call JCas.getFSIndexRepository() call JCas.getFSIndexRepository() call JCas.getFSIndexRepository() decl_stmt FeatureStructure = for : decl_stmt MapField = decl_stmt java.lang.String = call MapField.getFieldNameFeature() call MapField.getFieldNameFeature() call MapField.getFieldNameFeature() call MapField.getFieldNameFeature() call MapField.getFieldNameFeature() decl_stmt java.lang.String = == : call FeatureStructure.getFeatureValueAsString() call FeatureStructure.getFeatureValueAsString() call FeatureStructure.getFeatureValueAsString() call FeatureStructure.getFeatureValueAsString() call FeatureStructure.getFeatureValueAsString() call Type.getFeatureByBaseName() call Type.getFeatureByBaseName() call Type.getFeatureByBaseName() call Type.getFeatureByBaseName() call Type.getFeatureByBaseName() decl_stmt java.lang.String = call MapField.getFieldName() call MapField.getFieldName() call MapField.getFieldName() call MapField.getFieldName() call MapField.getFieldName() if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) new decl_stmt java.lang.String if instanceof && = else = call FeatureStructure.getFeatureValueAsString() call FeatureStructure.getFeatureValueAsString() call FeatureStructure.getFeatureValueAsString() call FeatureStructure.getFeatureValueAsString() call FeatureStructure.getFeatureValueAsString() call Type.getFeatureByBaseName() call Type.getFeatureByBaseName() call Type.getFeatureByBaseName() call Type.getFeatureByBaseName() call Type.getFeatureByBaseName() if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() new call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) catch throw new