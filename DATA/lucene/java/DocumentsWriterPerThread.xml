org.apache.lucene.index java.io.IOException import java.text.NumberFormat import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.Locale import java.util.Set import java.util.concurrent.atomic.AtomicLong import org.apache.lucene.analysis.Analyzer import org.apache.lucene.codecs.Codec import org.apache.lucene.index.DocumentsWriterDeleteQueue.DeleteSlice import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.store.Directory import org.apache.lucene.store.FlushInfo import org.apache.lucene.store.IOContext import org.apache.lucene.store.TrackingDirectoryWrapper import org.apache.lucene.util.ByteBlockPool.Allocator import org.apache.lucene.util.ByteBlockPool.DirectTrackingAllocator import org.apache.lucene.util.Counter import org.apache.lucene.util.InfoStream import org.apache.lucene.util.IntBlockPool import org.apache.lucene.util.MutableBits import org.apache.lucene.util.StringHelper import org.apache.lucene.util.Version import static static org.apache.lucene.util.ByteBlockPool.BYTE_BLOCK_MASK import static static org.apache.lucene.util.ByteBlockPool.BYTE_BLOCK_SIZE import class org.apache.lucene.index.DocumentsWriterPerThread InfoStream SegmentWriteState Counter decl FieldInfos decl Builder decl Allocator IndexingChain boolean IndexWriter DeleteSlice boolean LiveIndexWriterConfig Codec DocState Directory DocumentsWriterDeleteQueue AtomicLong Allocator int boolean SegmentInfo decl IntBlockPool decl Set BufferedUpdates TrackingDirectoryWrapper NumberFormat DocConsumer throws return new public public public public = = = try if call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() try call DocConsumer.abort() call DocConsumer.abort() call DocConsumer.abort() call DocConsumer.abort() call DocConsumer.abort() catch call org.apache.lucene.index.BufferedUpdates.clear() call org.apache.lucene.index.BufferedUpdates.clear() call org.apache.lucene.index.BufferedUpdates.clear() call org.apache.lucene.index.BufferedUpdates.clear() call org.apache.lucene.index.BufferedUpdates.clear() finally if call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() public public return final final if assert call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() private private if call decl IntBlockPool.incrementAndGet() call decl IntBlockPool.incrementAndGet() call decl IntBlockPool.incrementAndGet() call decl IntBlockPool.incrementAndGet() call decl IntBlockPool.incrementAndGet() > call decl IntBlockPool.decrementAndGet() call decl IntBlockPool.decrementAndGet() call decl IntBlockPool.decrementAndGet() call decl IntBlockPool.decrementAndGet() call decl IntBlockPool.decrementAndGet() throw new + boolean public public < extends extends throws assert != = = = if && call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() + + + + + + decl_stmt boolean = try try call DocConsumer.processDocument() call DocConsumer.processDocument() call DocConsumer.processDocument() call DocConsumer.processDocument() call DocConsumer.processDocument() finally call DocState.clear() call DocState.clear() call DocState.clear() call DocState.clear() call DocState.clear() = finally if ! ++ int int boolean boolean int public public < extends extends extends < extends extends throws assert != = if && call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() + + + + + + decl_stmt int = decl_stmt boolean = try for < extends extends : = = ++ decl_stmt boolean = try call DocConsumer.processDocument() call DocConsumer.processDocument() call DocConsumer.processDocument() call DocConsumer.processDocument() call DocConsumer.processDocument() = finally if ! ++ = if != call int.add() call int.add() call int.add() call int.add() call int.add() assert call org.apache.lucene.index.DocumentsWriterDeleteQueue.isTailItem(Object) call org.apache.lucene.index.DocumentsWriterDeleteQueue.isTailItem(Object) call org.apache.lucene.index.DocumentsWriterDeleteQueue.isTailItem(Object) call org.apache.lucene.index.DocumentsWriterDeleteQueue.isTailItem(Object) call org.apache.lucene.index.DocumentsWriterDeleteQueue.isTailItem(Object) : call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) - finally if ! && ! decl_stmt int = - decl_stmt int final final = - while > -- call DocState.clear() call DocState.clear() call DocState.clear() call DocState.clear() call DocState.clear() return boolean private private decl_stmt boolean = != if != call int.add() call int.add() call int.add() call int.add() call int.add() assert call org.apache.lucene.index.DocumentsWriterDeleteQueue.isTailItem(Object) call org.apache.lucene.index.DocumentsWriterDeleteQueue.isTailItem(Object) call org.apache.lucene.index.DocumentsWriterDeleteQueue.isTailItem(Object) call org.apache.lucene.index.DocumentsWriterDeleteQueue.isTailItem(Object) call org.apache.lucene.index.DocumentsWriterDeleteQueue.isTailItem(Object) : else &= call int.updateSlice() call int.updateSlice() call int.updateSlice() call int.updateSlice() call int.updateSlice() if call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) else call org.apache.lucene.index.DocumentsWriterDeleteQueue.reset() call org.apache.lucene.index.DocumentsWriterDeleteQueue.reset() call org.apache.lucene.index.DocumentsWriterDeleteQueue.reset() call org.apache.lucene.index.DocumentsWriterDeleteQueue.reset() call org.apache.lucene.index.DocumentsWriterDeleteQueue.reset() ++ call org.apache.lucene.index.BufferedUpdates.addDocID(int) call org.apache.lucene.index.BufferedUpdates.addDocID(int) call org.apache.lucene.index.BufferedUpdates.addDocID(int) call org.apache.lucene.index.BufferedUpdates.addDocID(int) call org.apache.lucene.index.BufferedUpdates.addDocID(int) public public return call BufferedUpdates.numTermDeletes() call BufferedUpdates.numTermDeletes() call BufferedUpdates.numTermDeletes() call BufferedUpdates.numTermDeletes() call BufferedUpdates.numTermDeletes() call BufferedUpdates.numTermDeletes() call BufferedUpdates.numTermDeletes() call BufferedUpdates.numTermDeletes() call BufferedUpdates.numTermDeletes() public public return FrozenBufferedUpdates assert > decl_stmt org.apache.lucene.index.FrozenBufferedUpdates final final = call int.freezeGlobalBuffer() call int.freezeGlobalBuffer() call int.freezeGlobalBuffer() call int.freezeGlobalBuffer() call int.freezeGlobalBuffer() if != call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) call org.apache.lucene.index.DocumentsWriterDeleteQueue.apply(BufferedUpdates,int) assert call org.apache.lucene.index.DocumentsWriterDeleteQueue.isEmpty() call org.apache.lucene.index.DocumentsWriterDeleteQueue.isEmpty() call org.apache.lucene.index.DocumentsWriterDeleteQueue.isEmpty() call org.apache.lucene.index.DocumentsWriterDeleteQueue.isEmpty() call org.apache.lucene.index.DocumentsWriterDeleteQueue.isEmpty() call org.apache.lucene.index.DocumentsWriterDeleteQueue.reset() call org.apache.lucene.index.DocumentsWriterDeleteQueue.reset() call org.apache.lucene.index.DocumentsWriterDeleteQueue.reset() call org.apache.lucene.index.DocumentsWriterDeleteQueue.reset() call org.apache.lucene.index.DocumentsWriterDeleteQueue.reset() return SegmentWriteState double BufferedUpdates FlushedSegment long SegmentCommitInfo double throws assert > assert call org.apache.lucene.index.DocumentsWriterDeleteQueue.isEmpty() call org.apache.lucene.index.DocumentsWriterDeleteQueue.isEmpty() call org.apache.lucene.index.DocumentsWriterDeleteQueue.isEmpty() call org.apache.lucene.index.DocumentsWriterDeleteQueue.isEmpty() call org.apache.lucene.index.DocumentsWriterDeleteQueue.isEmpty() : call org.apache.lucene.index.SegmentInfo.setMaxDoc(int) call org.apache.lucene.index.SegmentInfo.setMaxDoc(int) call org.apache.lucene.index.SegmentInfo.setMaxDoc(int) call org.apache.lucene.index.SegmentInfo.setMaxDoc(int) call org.apache.lucene.index.SegmentInfo.setMaxDoc(int) decl_stmt org.apache.lucene.index.SegmentWriteState final final = new call decl FieldInfos.finish() call decl FieldInfos.finish() call decl FieldInfos.finish() call decl FieldInfos.finish() call decl FieldInfos.finish() new new decl_stmt double final final = / / if call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() > = call Codec.liveDocsFormat() call Codec.liveDocsFormat() call Codec.liveDocsFormat() call Codec.liveDocsFormat() call Codec.liveDocsFormat() for : call SegmentWriteState.liveDocs() call SegmentWriteState.liveDocs() call SegmentWriteState.liveDocs() call SegmentWriteState.liveDocs() call SegmentWriteState.liveDocs() call SegmentWriteState.liveDocs() call SegmentWriteState.liveDocs() call SegmentWriteState.liveDocs() call SegmentWriteState.liveDocs() = call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() - call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() * call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() call BufferedUpdates.docIDs() if if call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() return decl_stmt long = if call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() + + + try call DocConsumer.flush() call DocConsumer.flush() call DocConsumer.flush() call DocConsumer.flush() call DocConsumer.flush() call BufferedUpdates.terms() call BufferedUpdates.terms() call BufferedUpdates.terms() call BufferedUpdates.terms() call BufferedUpdates.terms() call BufferedUpdates.terms() call BufferedUpdates.terms() call BufferedUpdates.terms() call BufferedUpdates.terms() call org.apache.lucene.index.SegmentInfo.setFiles(Collection) call org.apache.lucene.index.SegmentInfo.setFiles(Collection) call org.apache.lucene.index.SegmentInfo.setFiles(Collection) call org.apache.lucene.index.SegmentInfo.setFiles(Collection) call org.apache.lucene.index.SegmentInfo.setFiles(Collection) new <> call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = new - - - if call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() + == : + call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() + call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() : + + call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() : + + call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() : + + call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() : + + call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() call SegmentWriteState.fieldInfos() : call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() + call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call org.apache.lucene.index.SegmentCommitInfo.files() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() + decl_stmt org.apache.lucene.index.BufferedUpdates final final if call BufferedUpdates.queries() call BufferedUpdates.queries() call BufferedUpdates.queries() call BufferedUpdates.queries() call BufferedUpdates.queries() call BufferedUpdates.queries() call BufferedUpdates.queries() call BufferedUpdates.queries() call BufferedUpdates.queries() && call BufferedUpdates.numericUpdates() call BufferedUpdates.numericUpdates() call BufferedUpdates.numericUpdates() call BufferedUpdates.numericUpdates() call BufferedUpdates.numericUpdates() call BufferedUpdates.numericUpdates() call BufferedUpdates.numericUpdates() call BufferedUpdates.numericUpdates() call BufferedUpdates.numericUpdates() && call BufferedUpdates.binaryUpdates() call BufferedUpdates.binaryUpdates() call BufferedUpdates.binaryUpdates() call BufferedUpdates.binaryUpdates() call BufferedUpdates.binaryUpdates() call BufferedUpdates.binaryUpdates() call BufferedUpdates.binaryUpdates() call BufferedUpdates.binaryUpdates() call BufferedUpdates.binaryUpdates() call org.apache.lucene.index.BufferedUpdates.clear() call org.apache.lucene.index.BufferedUpdates.clear() call org.apache.lucene.index.BufferedUpdates.clear() call org.apache.lucene.index.BufferedUpdates.clear() call org.apache.lucene.index.BufferedUpdates.clear() = else = if call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() decl_stmt double final final = call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() / / call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() + + + call DeleteSlice.format() call DeleteSlice.format() call DeleteSlice.format() call DeleteSlice.format() call DeleteSlice.format() + + + call DeleteSlice.format() call DeleteSlice.format() call DeleteSlice.format() call DeleteSlice.format() call DeleteSlice.format() + + + call DeleteSlice.format() call DeleteSlice.format() call DeleteSlice.format() call DeleteSlice.format() call DeleteSlice.format() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() call SegmentWriteState.segmentInfo() / assert != decl_stmt FlushedSegment = new if call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() + - / + return catch throw public < public < return SegmentCommitInfo int boolean SegmentCommitInfo decl Set Codec IOContext throws assert != decl_stmt org.apache.lucene.index.SegmentCommitInfo = decl_stmt org.apache.lucene.store.IOContext = new new call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() call org.apache.lucene.index.SegmentCommitInfo.sizeInBytes() decl_stmt boolean = try if call decl Allocator.getUseCompoundFile() call decl Allocator.getUseCompoundFile() call decl Allocator.getUseCompoundFile() call decl Allocator.getUseCompoundFile() call decl Allocator.getUseCompoundFile() decl_stmt java.util.Set < = call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call LiveIndexWriterConfig.createCompoundFile() call LiveIndexWriterConfig.createCompoundFile() call LiveIndexWriterConfig.createCompoundFile() call LiveIndexWriterConfig.createCompoundFile() call LiveIndexWriterConfig.createCompoundFile() new call boolean.addAll() call boolean.addAll() call boolean.addAll() call boolean.addAll() call boolean.addAll() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() call Codec.segmentInfoFormat() if != decl_stmt int final final = assert > if call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() + + + decl_stmt org.apache.lucene.index.SegmentCommitInfo = decl_stmt org.apache.lucene.codecs.Codec = call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call SegmentCommitInfo.info() call Codec.liveDocsFormat() call Codec.liveDocsFormat() call Codec.liveDocsFormat() call Codec.liveDocsFormat() call Codec.liveDocsFormat() call org.apache.lucene.index.SegmentCommitInfo.setDelCount(int) call org.apache.lucene.index.SegmentCommitInfo.setDelCount(int) call org.apache.lucene.index.SegmentCommitInfo.setDelCount(int) call org.apache.lucene.index.SegmentCommitInfo.setDelCount(int) call org.apache.lucene.index.SegmentCommitInfo.setDelCount(int) call org.apache.lucene.index.SegmentCommitInfo.advanceDelGen() call org.apache.lucene.index.SegmentCommitInfo.advanceDelGen() call org.apache.lucene.index.SegmentCommitInfo.advanceDelGen() call org.apache.lucene.index.SegmentCommitInfo.advanceDelGen() call org.apache.lucene.index.SegmentCommitInfo.advanceDelGen() = finally if ! if call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.isEnabled() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() call decl Builder.message() + return return call Counter.get() call Counter.get() call Counter.get() call Counter.get() call Counter.get() + call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() call BufferedUpdates.bytesUsed() decl int public public decl_stmt int = new call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) * return public public call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) - * * public public return + + + != : + + + + + + +