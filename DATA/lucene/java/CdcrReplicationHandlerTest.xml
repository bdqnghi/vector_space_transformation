org.apache.solr.cloud org.apache.lucene.util.LuceneTestCase.Nightly import org.apache.solr.client.solrj.SolrClient import org.apache.solr.client.solrj.SolrQuery import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.impl.CloudSolrClient import org.apache.solr.common.SolrInputDocument import org.apache.solr.util.DefaultSolrThreadFactory import org.junit.Test import org.slf4j.Logger import org.slf4j.LoggerFactory import java.io.File import java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import java.util.concurrent.Executors import java.util.concurrent.ScheduledExecutorService import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import class annotation org.apache.solr.cloud.CdcrReplicationHandlerTest super super extends Logger public public throws = = = decl List decl List = public = public throws decl_stmt java.util.List < = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for = < ++ decl_stmt java.util.List < = new <> for = * < * + ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl List decl List = public = public throws for = < ++ decl_stmt java.util.List < = new <> for = * < * + ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.util.List < = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for = < ++ decl_stmt java.util.List < = new <> for = * < * + ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() CloudSolrClient decl List = public = public throws decl_stmt org.apache.solr.client.solrj.impl.CloudSolrClient = decl_stmt java.util.List < = try for = < ++ for = * < * + ++ call CloudSolrClient.add() call CloudSolrClient.add() call CloudSolrClient.add() call CloudSolrClient.add() call CloudSolrClient.add() if == call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() finally call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl List decl List = public = public throws for = < ++ decl_stmt java.util.List < = new <> for = * < * + ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.util.List < = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for = < ++ decl_stmt java.util.List < = new <> for = * < * + ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for = < ++ decl_stmt java.util.List < = new <> for = * < * + ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() AtomicInteger decl List ScheduledExecutorService = public = public throws decl_stmt java.util.List < = decl_stmt java.util.concurrent.atomic.AtomicInteger = new decl_stmt java.util.concurrent.ScheduledExecutorService = new call java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(Runnable,long,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(Runnable,long,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(Runnable,long,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(Runnable,long,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(Runnable,long,long,TimeUnit) new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.awaitTermination() call ScheduledExecutorService.awaitTermination() call ScheduledExecutorService.awaitTermination() call ScheduledExecutorService.awaitTermination() call ScheduledExecutorService.awaitTermination() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() int SolrClient AssertionError private private throws decl_stmt org.apache.solr.client.solrj.SolrClient = try decl_stmt int = decl_stmt AssertionError = while > try call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) new return catch = -- throw new + finally call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() decl List public public try decl_stmt java.util.List < = new <> for = < + ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() catch throw new decl List CloudJettyRunner private < private < decl_stmt java.util.List < = new <> decl_stmt CloudJettyRunner = call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() return CollectionInfo decl Map decl Map decl Map protected protected throws decl_stmt CollectionInfo = decl_stmt java.util.Map < < = call CollectionInfo.getShardToCoresMap() call CollectionInfo.getShardToCoresMap() call CollectionInfo.getShardToCoresMap() call CollectionInfo.getShardToCoresMap() call CollectionInfo.getShardToCoresMap() for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt java.util.Map < = call CollectionInfo.getLeader() call CollectionInfo.getLeader() call CollectionInfo.getLeader() call CollectionInfo.getLeader() call CollectionInfo.getLeader() decl_stmt java.util.Map < = call CollectionInfo.getReplicas() call CollectionInfo.getReplicas() call CollectionInfo.getReplicas() call CollectionInfo.getReplicas() call CollectionInfo.getReplicas() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() + call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() + call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() File decl Map private < private < decl_stmt File = new if ! call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() + + decl_stmt java.util.Map < = new <> for : call File.listFiles() call File.listFiles() call File.listFiles() call File.listFiles() call File.listFiles() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + return