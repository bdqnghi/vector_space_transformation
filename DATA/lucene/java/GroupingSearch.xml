org.apache.lucene.search.grouping org.apache.lucene.queries.function.ValueSource import org.apache.lucene.search.CachingCollector import org.apache.lucene.search.Collector import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.MultiCollector import org.apache.lucene.search.Query import org.apache.lucene.search.Sort import org.apache.lucene.search.SortField import org.apache.lucene.search.Weight import org.apache.lucene.search.grouping.function.FunctionAllGroupHeadsCollector import org.apache.lucene.search.grouping.function.FunctionAllGroupsCollector import org.apache.lucene.search.grouping.function.FunctionFirstPassGroupingCollector import org.apache.lucene.search.grouping.function.FunctionSecondPassGroupingCollector import org.apache.lucene.search.grouping.term.TermAllGroupHeadsCollector import org.apache.lucene.search.grouping.term.TermAllGroupsCollector import org.apache.lucene.search.grouping.term.TermFirstPassGroupingCollector import org.apache.lucene.search.grouping.term.TermSecondPassGroupingCollector import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.mutable.MutableValue import java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.List import java.util.Map import class org.apache.lucene.search.grouping.GroupingSearch boolean boolean boolean Double decl Map Sort boolean int Sort Query int int String boolean Integer Bits decl Collection ValueSource boolean public < < public < < throws if != || != return else if != return < else throw new decl Collection decl List AbstractAllGroupsCollector Collector int int CachingCollector AbstractSecondPassGroupingCollector AbstractFirstPassGroupingCollector AbstractAllGroupHeadsCollector protected protected throws decl_stmt int = + decl_stmt org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector final final decl_stmt org.apache.lucene.search.grouping.AbstractAllGroupsCollector final final decl_stmt org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector final final if != = new if = new else = if = new else = else = new if = new else = if = else = decl_stmt org.apache.lucene.search.Collector final final if || decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() else = decl_stmt org.apache.lucene.search.CachingCollector = if != || != if != = else = else if = call AbstractAllGroupsCollector.getGroups() call AbstractAllGroupsCollector.getGroups() call AbstractAllGroupsCollector.getGroups() call AbstractAllGroupsCollector.getGroups() call AbstractAllGroupsCollector.getGroups() else = if = call org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.retrieveGroupHeads(int) call org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.retrieveGroupHeads(int) call org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.retrieveGroupHeads(int) call org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.retrieveGroupHeads(int) call org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.retrieveGroupHeads(int) else = new decl_stmt java.util.Collection < = call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) if == return new new new new decl_stmt int = + decl_stmt org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector if != = new else = new if != && call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.isCached() call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) call org.apache.lucene.search.CachingCollector.replay(Collector) else if return new call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() else return call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) int BlockGroupingCollector int Weight protected < protected < throws decl_stmt int = + decl_stmt org.apache.lucene.search.Weight final final = decl_stmt org.apache.lucene.search.grouping.BlockGroupingCollector = new decl_stmt int = + return call org.apache.lucene.search.grouping.BlockGroupingCollector.getTopGroups(Sort,int,int,int,boolean) call org.apache.lucene.search.grouping.BlockGroupingCollector.getTopGroups(Sort,int,int,int,boolean) call org.apache.lucene.search.grouping.BlockGroupingCollector.getTopGroups(Sort,int,int,int,boolean) call org.apache.lucene.search.grouping.BlockGroupingCollector.getTopGroups(Sort,int,int,int,boolean) call org.apache.lucene.search.grouping.BlockGroupingCollector.getTopGroups(Sort,int,int,int,boolean) public public = = = return public public = = = return public public = = return public public = return public public = return public public = return public public = return public public = return public public = return public public = return public public = return public < < public < < return < public public = return public public return public public = return