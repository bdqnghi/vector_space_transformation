org.apache.lucene.analysis.hunspell java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.List import org.apache.lucene.analysis.util.CharArraySet import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.CharsRef import org.apache.lucene.util.IntsRef import org.apache.lucene.util.automaton.CharacterRunAutomaton import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.Outputs import class org.apache.lucene.analysis.hunspell.Stemmer decl char int Dictionary StringBuilder BytesRef decl char ByteArrayDataInput decl FST int int int StringBuilder public < public < return decl List int CharSequence public < public < if call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.CharSequence = call org.apache.lucene.search.spell.Dictionary.cleanInput(CharSequence,StringBuilder) call org.apache.lucene.search.spell.Dictionary.cleanInput(CharSequence,StringBuilder) call org.apache.lucene.search.spell.Dictionary.cleanInput(CharSequence,StringBuilder) call org.apache.lucene.search.spell.Dictionary.cleanInput(CharSequence,StringBuilder) call org.apache.lucene.search.spell.Dictionary.cleanInput(CharSequence,StringBuilder) = call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() call java.lang.CharSequence.length() = call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() = decl_stmt int = if == decl_stmt java.util.List < = call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return else if == decl_stmt java.util.List < = call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return else return boolean boolean boolean private private if || == || ! return decl_stmt boolean = decl_stmt boolean = for = < ++ decl_stmt boolean = |= |= ! if ! return else if ! return else return private private = for = < ++ = call org.apache.lucene.search.spell.Dictionary.caseFold(char) call org.apache.lucene.search.spell.Dictionary.caseFold(char) call org.apache.lucene.search.spell.Dictionary.caseFold(char) call org.apache.lucene.search.spell.Dictionary.caseFold(char) call org.apache.lucene.search.spell.Dictionary.caseFold(char) private private = = call org.apache.lucene.search.spell.Dictionary.caseFold(char) call org.apache.lucene.search.spell.Dictionary.caseFold(char) call org.apache.lucene.search.spell.Dictionary.caseFold(char) call org.apache.lucene.search.spell.Dictionary.caseFold(char) call org.apache.lucene.search.spell.Dictionary.caseFold(char) boolean boolean decl List char IntsRef boolean boolean private < private < decl_stmt java.util.List < = new <> decl_stmt org.apache.lucene.util.IntsRef = call org.apache.lucene.search.spell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.search.spell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.search.spell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.search.spell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.search.spell.Dictionary.lookupWord(char,int,int) if != for = < += decl_stmt boolean = && != - decl_stmt boolean = != - decl_stmt boolean = != - if || || call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() + decl_stmt char = if && char continue if && char continue if && char continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() try decl_stmt boolean = call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() - - - catch throw new return decl List CharArraySet decl List public < public < decl_stmt java.util.List < = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < return decl_stmt org.apache.lucene.analysis.util.CharArraySet = new decl_stmt java.util.List < = new <> for : if ! call org.apache.lucene.analysis.util.CharArraySet.contains(Object) call org.apache.lucene.analysis.util.CharArraySet.contains(Object) call org.apache.lucene.analysis.util.CharArraySet.contains(Object) call org.apache.lucene.analysis.util.CharArraySet.contains(Object) call org.apache.lucene.analysis.util.CharArraySet.contains(Object) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.lucene.analysis.util.CharArraySet.add(Object) call org.apache.lucene.analysis.util.CharArraySet.add(Object) call org.apache.lucene.analysis.util.CharArraySet.add(Object) call org.apache.lucene.analysis.util.CharArraySet.add(Object) call org.apache.lucene.analysis.util.CharArraySet.add(Object) return String char int private private decl_stmt java.lang.String final final if decl_stmt int = + + if > = call org.apache.lucene.search.spell.Dictionary.getStemException(int) call org.apache.lucene.search.spell.Dictionary.getStemException(int) call org.apache.lucene.search.spell.Dictionary.getStemException(int) call org.apache.lucene.search.spell.Dictionary.getStemException(int) call org.apache.lucene.search.spell.Dictionary.getStemException(int) else = else = if call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) try catch throw new decl_stmt char = new call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() return new else if != return new else return new char IntsRef int decl BytesReader int IntsRef decl FST char int int int int int int decl List decl FST boolean IntsRef decl List int char char boolean IntsRef decl Outputs decl FST boolean int private < private < throws decl_stmt java.util.List < = new <> if && != decl_stmt org.apache.lucene.util.fst.FST < = decl_stmt org.apache.lucene.util.fst.Outputs < = decl_stmt BytesReader = decl_stmt org.apache.lucene.util.fst.FST < = call decl List.getFirstArc() call decl List.getFirstArc() call decl List.getFirstArc() call decl List.getFirstArc() call decl List.getFirstArc() decl_stmt org.apache.lucene.util.IntsRef = call decl FST.getNoOutput() call decl FST.getNoOutput() call decl FST.getNoOutput() call decl FST.getNoOutput() call decl FST.getNoOutput() decl_stmt org.apache.lucene.util.IntsRef = decl_stmt int = : - for = < ++ if > decl_stmt int = - if call decl List.findTargetArc() call decl List.findTargetArc() call decl List.findTargetArc() call decl List.findTargetArc() call decl List.findTargetArc() == break else if != = call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() decl_stmt org.apache.lucene.util.IntsRef = if ! call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() continue else = call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() for = < ++ decl_stmt int = + if == continue call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) * decl_stmt char = call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() & decl_stmt char = call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() & decl_stmt int = call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() & decl_stmt boolean = & == >>>= decl_stmt char = call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() & decl_stmt boolean final final if == if == - = else call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() decl_stmt char = = ! char else if call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() decl_stmt char = assert >= decl_stmt boolean = == - || ! char = && char else = if decl_stmt int = decl_stmt int = - decl_stmt int = decl_stmt int = + decl_stmt int = - if ! continue decl_stmt char = new + decl_stmt java.util.List < = - call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() if && != decl_stmt org.apache.lucene.util.fst.FST < = decl_stmt org.apache.lucene.util.fst.Outputs < = decl_stmt BytesReader = decl_stmt org.apache.lucene.util.fst.FST < = call decl List.getFirstArc() call decl List.getFirstArc() call decl List.getFirstArc() call decl List.getFirstArc() call decl List.getFirstArc() decl_stmt org.apache.lucene.util.IntsRef = call decl FST.getNoOutput() call decl FST.getNoOutput() call decl FST.getNoOutput() call decl FST.getNoOutput() call decl FST.getNoOutput() decl_stmt org.apache.lucene.util.IntsRef = decl_stmt int = : for = >= -- if < decl_stmt int = if call decl List.findTargetArc() call decl List.findTargetArc() call decl List.findTargetArc() call decl List.findTargetArc() call decl List.findTargetArc() == break else if != = call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() decl_stmt org.apache.lucene.util.IntsRef = if ! call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() continue else = call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() call decl List.outputs() for = < ++ decl_stmt int = + if == continue call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) * decl_stmt char = call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() & decl_stmt char = call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() & decl_stmt int = call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() & decl_stmt boolean = & == >>>= decl_stmt char = call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() & decl_stmt boolean final final if == if == - = else call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() decl_stmt char = = ! char else if call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() decl_stmt char = assert >= decl_stmt boolean = == - || ! char = && char else = if decl_stmt int = - decl_stmt int = - decl_stmt int = decl_stmt int = + decl_stmt int = - if ! continue decl_stmt char = new + decl_stmt java.util.List < = call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return CharacterRunAutomaton int private private if != decl_stmt org.apache.lucene.util.automaton.CharacterRunAutomaton = call Dictionary.patterns() call Dictionary.patterns() call Dictionary.patterns() call Dictionary.patterns() call Dictionary.patterns() call Dictionary.patterns() call Dictionary.patterns() call Dictionary.patterns() call Dictionary.patterns() decl_stmt int = call CharacterRunAutomaton.getInitialState() call CharacterRunAutomaton.getInitialState() call CharacterRunAutomaton.getInitialState() call CharacterRunAutomaton.getInitialState() call CharacterRunAutomaton.getInitialState() for = < + ++ = call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() if == - return for = < + ++ = call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() if == - return return call CharacterRunAutomaton.isAccept() call CharacterRunAutomaton.isAccept() call CharacterRunAutomaton.isAccept() call CharacterRunAutomaton.isAccept() call CharacterRunAutomaton.isAccept() return boolean char IntsRef char int decl List boolean char boolean < < throws call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) call org.apache.lucene.store.ByteArrayDataInput.setPosition(int) * decl_stmt char = call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() & call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) call org.apache.lucene.store.ByteArrayDataInput.skipBytes(long) decl_stmt int = call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() & decl_stmt boolean = & == >>>= decl_stmt char = call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() call org.apache.lucene.store.ByteArrayDataInput.readShort() & decl_stmt java.util.List < = new <> decl_stmt org.apache.lucene.util.IntsRef = call org.apache.lucene.search.spell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.search.spell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.search.spell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.search.spell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.search.spell.Dictionary.lookupWord(char,int,int) if != for = < += call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() + decl_stmt char = if decl_stmt boolean = && == && if == && >= && ! char call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() decl_stmt char = if ! char continue if != - call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() decl_stmt char = decl_stmt boolean = char if != continue if && != - && char continue if != - && char continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if != - && ! && call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() decl_stmt char = = char if if == if call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() ++ && else if == && call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() ++ else if == if && call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() ++ else if == && == && call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() ++ return private private return == && || >=