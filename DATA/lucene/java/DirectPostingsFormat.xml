org.apache.lucene.codecs.memory java.io.IOException import java.util.Collection import java.util.Collections import java.util.Iterator import java.util.Map import java.util.TreeMap import org.apache.lucene.codecs.FieldsConsumer import org.apache.lucene.codecs.FieldsProducer import org.apache.lucene.codecs.PostingsFormat import org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.Fields import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.OrdTermState import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.SegmentReadState import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.index.TermState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.IOContext import org.apache.lucene.store.RAMOutputStream import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.automaton.CompiledAutomaton import org.apache.lucene.util.automaton.RunAutomaton import org.apache.lucene.util.automaton.Transition import class org.apache.lucene.codecs.memory.DirectPostingsFormat super super extends int int int int public public throws return FieldsProducer FieldsProducer public public throws decl_stmt org.apache.lucene.codecs.FieldsProducer = if != decl_stmt org.apache.lucene.codecs.FieldsProducer try call FieldsProducer.checkIntegrity() call FieldsProducer.checkIntegrity() call FieldsProducer.checkIntegrity() call FieldsProducer.checkIntegrity() call FieldsProducer.checkIntegrity() = new finally call FieldsProducer.close() call FieldsProducer.close() call FieldsProducer.close() call FieldsProducer.close() call FieldsProducer.close() return else return public < public < return public public return public public return public public long public public decl_stmt long = for < : += * += return public < public < return public public throws public public return + + + public public return + != : + != : long public public decl_stmt long = += != : += != : if != += for : += != : if != += for : if != += for : += != : return public public if == = ++ = decl int public public decl_stmt int final final final = new = return long public public decl_stmt long = += != : += != : += != : += != : += != : if != += for : += != : return public public return + + + + + + + + int int int decl byte int int decl_stmt byte final final final = decl_stmt int = decl_stmt int final final = + - decl_stmt int = decl_stmt int final final = + while < decl_stmt int = ++ & - ++ & if != return return - int int int int int int private private decl_stmt int final final = + - if < = if > decl_stmt int final final = - - decl_stmt int final final = decl_stmt int = - decl_stmt int = decl_stmt int = for < ++ if ++ == ++ ++ else for < ++ if >= = break for < ++ if >= = for = < ++ = else for = < ++ ++ int int TermAndSkip int int private private assert == decl_stmt int = - decl_stmt int = - for = < ++ if >= for = < ++ decl_stmt TermAndSkip = if != && > for = < / ++ decl_stmt int final final = - - decl_stmt int final final = = = TermAndSkip decl int private private decl_stmt TermAndSkip final final = - ++ if == = new else decl_stmt int final final final = new + = - = public public return new public public final final return new public public return public public return public public return public public return public public return public public return public public return public public return private private = = = + - return public public ++ if < return else return OrdTermState public public decl_stmt org.apache.lucene.index.OrdTermState = new = return int int int int private private decl_stmt int = decl_stmt int = - while <= decl_stmt int = + >>> decl_stmt int = if < = + else if > = - else return return - + int public public decl_stmt int final final = if >= = return else if == - - return else = - - return int public public decl_stmt int final final = if >= = return else return public public = int public public throws = assert public public return public public return public public if instanceof return else return public public if instanceof return else return decl byte HighFreqTerm int decl int HighFreqDocsEnum public public throws if if instanceof decl_stmt LowFreqTerm final final = decl_stmt int final final final = if == decl_stmt LowFreqDocsEnumNoTF if instanceof = else = new return call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() else if == decl_stmt LowFreqDocsEnumNoPos if instanceof = else = new return call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() decl_stmt byte final final final = return new else decl_stmt HighFreqTerm final final = if == return new else return new if instanceof decl_stmt int final final final = if if decl_stmt int if = else = if ++ decl_stmt LowFreqDocsEnum if instanceof = if ! call HighFreqDocsEnum.canReuse() call HighFreqDocsEnum.canReuse() call HighFreqDocsEnum.canReuse() call HighFreqDocsEnum.canReuse() call HighFreqDocsEnum.canReuse() = new else = new return call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() else decl_stmt LowFreqDocsEnumNoPos if instanceof = else = new return call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() else decl_stmt LowFreqDocsEnumNoTF if instanceof = else = new return call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() else decl_stmt HighFreqTerm final final = decl_stmt HighFreqDocsEnum if instanceof = else = new return call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() call HighFreqDocsEnum.reset() decl State private private if == + decl_stmt sun.security.provider.certpath.State final final final = new + = new = int int int int int int int int int State int int int int int public public ++ decl_stmt int = if == && == assert == if = = = return ++ while if == return decl_stmt sun.security.provider.certpath.State final final = if == -- continue decl_stmt int final final = decl_stmt int final final = + - decl_stmt int final final = decl_stmt int final final = + - assert < assert <= : + + + decl_stmt int final final = + & while > ++ if == if == = return else assert > = = -- continue continue assert < : + + + = = assert >= assert <= assert >= assert <= decl_stmt int final final = if + & < decl_stmt int = + decl_stmt int = - while if > = = continue continue decl_stmt int = + >>> decl_stmt int = + & - if < = + else if > = - else while > && - + & == -- = = continue continue decl_stmt int = if == - if < = + else ++ = else if < ++ = = + ++ = = - = - if == if = = = + - return else ++ = else if != assert == if < ++ = continue continue decl_stmt int = + - for = < ++ if + != ++ = continue continue decl_stmt int = + while < = + & if == - ++ = continue continue ++ if = = = + - return else ++ = OrdTermState public public decl_stmt org.apache.lucene.index.OrdTermState = new = return public public return public public return public public if instanceof return else return public public if instanceof return else return int HighFreqTerm decl int decl byte public public if && if instanceof decl_stmt LowFreqTerm final final = decl_stmt int final final final = decl_stmt byte final final final = return new else decl_stmt HighFreqTerm final final = return new if instanceof decl_stmt int final final final = if if decl_stmt int if = else = if ++ return new else return new else return new else decl_stmt HighFreqTerm final final = return new public public throw new public public throw new public public = = - return public public ++ if < return return public public if < return - else if < return else return public public return public public throws return - public public throws return - public public throws return - public public throws return public public throws return public public return public public = = - return public public += if < return return public public if < return - else if < return else return public public return + public public throws return - public public throws return - public public throws return - public public throws return public public throws return public public return / public public return == public public = = - = return public public += + * if < = + assert > return return public public if < return - else if < return else return public public return public public throws return - public public throws return - public public throws return - public public throws return public public throws return public public return / public public = = = = - = - = - = - = = return public public = - if for = < ++ ++ if += += ++ else += * if < = ++ = ++ = return return = public public return public public return public public assert > -- = ++ if = ++ = ++ if = ++ = += return public public return public public return public public throws return public public if > = = = return else return public public return / public public return public public return public public = = = = - return public public ++ try return = catch return = public public return public public if == return else return int int int int int int public public ++ if == return = decl_stmt int = decl_stmt int = + decl_stmt int decl_stmt int while if >= = - = - break if <= = - = break *= += while if > = break decl_stmt int = + >>> decl_stmt int = - if < = + else if > = - else = break if == return = else return = public public return public public throws return - public public throws return - public public throws return - public public throws return public public return public public return public public return public public = = = = = - return public public ++ if < = - = return = return = public public return public public return public public += assert < return public public if return + else return - public public if return + else return - int int int int int int public public ++ if == return = decl_stmt int = decl_stmt int = + decl_stmt int decl_stmt int while if >= = - = - break if <= = - = break *= += while if > = break decl_stmt int = + >>> decl_stmt int = - if < = + else if > = - else = break if == return = else = - = return = decl byte public public if == return else decl_stmt byte final final final = / : if == return = = = return public public return