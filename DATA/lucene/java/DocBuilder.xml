org.apache.solr.handler.dataimport org.apache.solr.common.SolrException import org.apache.solr.common.SolrInputDocument import org.apache.solr.core.SolrCore import org.apache.solr.handler.data.config.ConfigNameConstants import org.apache.solr.handler.data.config.DIHConfiguration import org.apache.solr.handler.data.config.Entity import org.apache.solr.handler.data.config.EntityField import static static org.apache.solr.handler.data.SolrWriter.LAST_INDEX_KEY import static static org.apache.solr.handler.data.DataImportHandlerException.SEVERE import static static org.apache.solr.handler.data.DataImportHandlerException.wrapAndThrow import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.SchemaField import org.slf4j.Logger import org.slf4j.LoggerFactory import java.lang.invoke.MethodHandles import java.text.SimpleDateFormat import java.util.* import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicBoolean import java.util.concurrent.atomic.AtomicLong import class org.apache.solr.handler.dataimport.DocBuilder Logger DebugLogger decl Map boolean RequestInfo Map DIHWriter EntityProcessorWrapper String String String AtomicBoolean DataImporter String DIHProperties Date Statistics decl Map String DIHConfiguration String String String decl ThreadLocal if == = new return VariableResolver decl Map Object decl Map String String private private try decl_stmt org.apache.solr.handler.dataimport.VariableResolver = decl_stmt java.lang.String = call DIHProperties.convertDateToString() call DIHProperties.convertDateToString() call DIHProperties.convertDateToString() call DIHProperties.convertDateToString() call DIHProperties.convertDateToString() if != && call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() != && call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() != = new call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() else = new call org.apache.solr.handler.dataimport.VariableResolver.setEvaluators(Map) call org.apache.solr.handler.dataimport.VariableResolver.setEvaluators(Map) call org.apache.solr.handler.dataimport.VariableResolver.setEvaluators(Map) call org.apache.solr.handler.dataimport.VariableResolver.setEvaluators(Map) call org.apache.solr.handler.dataimport.VariableResolver.setEvaluators(Map) call org.apache.solr.handler.dataimport.DataImporter.getEvaluators() call org.apache.solr.handler.dataimport.DataImporter.getEvaluators() call org.apache.solr.handler.dataimport.DataImporter.getEvaluators() call org.apache.solr.handler.dataimport.DataImporter.getEvaluators() call org.apache.solr.handler.dataimport.DataImporter.getEvaluators() decl_stmt java.util.Map < = new <> if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.handler.dataimport.DataImporter.getIndexStartTime() call org.apache.solr.handler.dataimport.DataImporter.getIndexStartTime() call org.apache.solr.handler.dataimport.DataImporter.getIndexStartTime() call org.apache.solr.handler.dataimport.DataImporter.getIndexStartTime() call org.apache.solr.handler.dataimport.DataImporter.getIndexStartTime() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new <> call org.apache.solr.handler.dataimport.RequestInfo.getRawParams() call org.apache.solr.handler.dataimport.RequestInfo.getRawParams() call org.apache.solr.handler.dataimport.RequestInfo.getRawParams() call org.apache.solr.handler.dataimport.RequestInfo.getRawParams() call org.apache.solr.handler.dataimport.RequestInfo.getRawParams() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.handler.dataimport.DataImporter.getHandlerName() call org.apache.solr.handler.dataimport.DataImporter.getHandlerName() call org.apache.solr.handler.dataimport.DataImporter.getHandlerName() call org.apache.solr.handler.dataimport.DataImporter.getHandlerName() call org.apache.solr.handler.dataimport.DataImporter.getHandlerName() for : call org.apache.solr.handler.dataimport.DataImporter.getConfig() call org.apache.solr.handler.dataimport.DataImporter.getConfig() call org.apache.solr.handler.dataimport.DataImporter.getConfig() call org.apache.solr.handler.dataimport.DataImporter.getConfig() call org.apache.solr.handler.dataimport.DataImporter.getConfig() decl_stmt java.util.Map < = new <> decl_stmt java.lang.String = decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() + + if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) return catch return private private EventListener private private try decl_stmt org.apache.solr.handler.dataimport.EventListener = call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() catch + String ContextImpl private private decl_stmt java.lang.String if call org.apache.solr.handler.dataimport.DataImporter.getStatus() call org.apache.solr.handler.dataimport.DataImporter.getStatus() call org.apache.solr.handler.dataimport.DataImporter.getStatus() call org.apache.solr.handler.dataimport.DataImporter.getStatus() call org.apache.solr.handler.dataimport.DataImporter.getStatus() == = else = decl_stmt org.apache.solr.handler.dataimport.ContextImpl = new call org.apache.solr.handler.dataimport.ContextImpl.setLastException(Exception) call org.apache.solr.handler.dataimport.ContextImpl.setLastException(Exception) call org.apache.solr.handler.dataimport.ContextImpl.setLastException(Exception) call org.apache.solr.handler.dataimport.ContextImpl.setLastException(Exception) call org.apache.solr.handler.dataimport.ContextImpl.setLastException(Exception) decl List String AtomicBoolean decl Map AtomicLong decl List public public decl_stmt java.util.List < = try call org.apache.solr.handler.dataimport.DataImporter.store(Object,Object) call org.apache.solr.handler.dataimport.DataImporter.store(Object,Object) call org.apache.solr.handler.dataimport.DataImporter.store(Object,Object) call org.apache.solr.handler.dataimport.DataImporter.store(Object,Object) call org.apache.solr.handler.dataimport.DataImporter.store(Object,Object) = call org.apache.solr.handler.dataimport.DataImporter.getConfig() call org.apache.solr.handler.dataimport.DataImporter.getConfig() call org.apache.solr.handler.dataimport.DataImporter.getConfig() call org.apache.solr.handler.dataimport.DataImporter.getConfig() call org.apache.solr.handler.dataimport.DataImporter.getConfig() decl_stmt java.util.concurrent.atomic.AtomicLong final final = new call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) new public public return call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) decl_stmt java.util.List < = call org.apache.solr.handler.dataimport.RequestInfo.getEntitiesToRun() call org.apache.solr.handler.dataimport.RequestInfo.getEntitiesToRun() call org.apache.solr.handler.dataimport.RequestInfo.getEntitiesToRun() call org.apache.solr.handler.dataimport.RequestInfo.getEntitiesToRun() call org.apache.solr.handler.dataimport.RequestInfo.getEntitiesToRun() if call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportStart() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportStart() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportStart() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportStart() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportStart() != call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportStart() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportStart() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportStart() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportStart() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportStart() decl_stmt java.util.concurrent.atomic.AtomicBoolean = new decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.handler.dataimport.DataImporter.getIndexStartTime() call org.apache.solr.handler.dataimport.DataImporter.getIndexStartTime() call org.apache.solr.handler.dataimport.DataImporter.getIndexStartTime() call org.apache.solr.handler.dataimport.DataImporter.getIndexStartTime() call org.apache.solr.handler.dataimport.DataImporter.getIndexStartTime() = new <> call org.apache.solr.handler.dataimport.config.DIHConfiguration.getEntities() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getEntities() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getEntities() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getEntities() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getEntities() for : call org.apache.solr.handler.dataimport.config.DIHConfiguration.getEntities() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getEntities() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getEntities() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getEntities() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getEntities() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : if != && ! call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() continue call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + + call DIHProperties.getCurrentTimestamp() call DIHProperties.getCurrentTimestamp() call DIHProperties.getCurrentTimestamp() call DIHProperties.getCurrentTimestamp() call DIHProperties.getCurrentTimestamp() = decl_stmt java.lang.String = if call org.apache.solr.handler.dataimport.DataImporter.getStatus() call org.apache.solr.handler.dataimport.DataImporter.getStatus() call org.apache.solr.handler.dataimport.DataImporter.getStatus() call org.apache.solr.handler.dataimport.DataImporter.getStatus() call org.apache.solr.handler.dataimport.DataImporter.getStatus() == = if != call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) else = if != call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) new new else if ! call org.apache.solr.handler.dataimport.RequestInfo.isClean() call org.apache.solr.handler.dataimport.RequestInfo.isClean() call org.apache.solr.handler.dataimport.RequestInfo.isClean() call org.apache.solr.handler.dataimport.RequestInfo.isClean() call org.apache.solr.handler.dataimport.RequestInfo.isClean() if call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() > || call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() > else if call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportEnd() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportEnd() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportEnd() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportEnd() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportEnd() != call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportEnd() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportEnd() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportEnd() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportEnd() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnImportEnd() call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) + call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() if call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() > call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) + call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() catch throw new finally if != call DIHWriter.close() call DIHWriter.close() call DIHWriter.close() call DIHWriter.close() call DIHWriter.close() if != if call org.apache.solr.handler.dataimport.RequestInfo.isDebug() call org.apache.solr.handler.dataimport.RequestInfo.isDebug() call org.apache.solr.handler.dataimport.RequestInfo.isDebug() call org.apache.solr.handler.dataimport.RequestInfo.isDebug() call org.apache.solr.handler.dataimport.RequestInfo.isDebug() call org.apache.solr.handler.dataimport.RequestInfo.getDebugInfo() call org.apache.solr.handler.dataimport.RequestInfo.getDebugInfo() call org.apache.solr.handler.dataimport.RequestInfo.getDebugInfo() call org.apache.solr.handler.dataimport.RequestInfo.getDebugInfo() call org.apache.solr.handler.dataimport.RequestInfo.getDebugInfo() = public public return private private < for : if != private private < call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) + + + + if call org.apache.solr.handler.dataimport.RequestInfo.isCommit() call org.apache.solr.handler.dataimport.RequestInfo.isCommit() call org.apache.solr.handler.dataimport.RequestInfo.isCommit() call org.apache.solr.handler.dataimport.RequestInfo.isCommit() call org.apache.solr.handler.dataimport.RequestInfo.isCommit() call org.apache.solr.handler.dataimport.DIHWriter.commit(boolean) call org.apache.solr.handler.dataimport.DIHWriter.commit(boolean) call org.apache.solr.handler.dataimport.DIHWriter.commit(boolean) call org.apache.solr.handler.dataimport.DIHWriter.commit(boolean) call org.apache.solr.handler.dataimport.DIHWriter.commit(boolean) call org.apache.solr.handler.dataimport.RequestInfo.isOptimize() call org.apache.solr.handler.dataimport.RequestInfo.isOptimize() call org.apache.solr.handler.dataimport.RequestInfo.isOptimize() call org.apache.solr.handler.dataimport.RequestInfo.isOptimize() call org.apache.solr.handler.dataimport.RequestInfo.isOptimize() if call org.apache.solr.handler.dataimport.RequestInfo.isOptimize() call org.apache.solr.handler.dataimport.RequestInfo.isOptimize() call org.apache.solr.handler.dataimport.RequestInfo.isOptimize() call org.apache.solr.handler.dataimport.RequestInfo.isOptimize() call org.apache.solr.handler.dataimport.RequestInfo.isOptimize() try call DIHProperties.persist() call DIHProperties.persist() call DIHProperties.persist() call DIHProperties.persist() call DIHProperties.persist() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) + if ! call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DIHWriter.rollback() call org.apache.solr.handler.dataimport.DIHWriter.rollback() call org.apache.solr.handler.dataimport.DIHWriter.rollback() call org.apache.solr.handler.dataimport.DIHWriter.rollback() call org.apache.solr.handler.dataimport.DIHWriter.rollback() call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) if != && call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnError() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnError() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnError() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnError() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnError() != call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnError() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnError() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnError() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnError() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getOnError() private private decl Map decl Set decl Iterator decl Set VariableResolver VariableResolver private private decl_stmt org.apache.solr.handler.dataimport.VariableResolver = if call org.apache.solr.handler.dataimport.config.DIHConfiguration.getDeleteQuery() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getDeleteQuery() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getDeleteQuery() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getDeleteQuery() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getDeleteQuery() != call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.config.DIHConfiguration.getDeleteQuery() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getDeleteQuery() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getDeleteQuery() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getDeleteQuery() call org.apache.solr.handler.dataimport.config.DIHConfiguration.getDeleteQuery() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.util.Set < < = new <> decl_stmt java.util.Set < < = if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return if ! call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.removeAll() call decl Set.removeAll() call decl Set.removeAll() call decl Set.removeAll() call decl Set.removeAll() = call org.apache.solr.handler.dataimport.DIHWriter.setDeltaKeys(Set) call org.apache.solr.handler.dataimport.DIHWriter.setDeltaKeys(Set) call org.apache.solr.handler.dataimport.DIHWriter.setDeltaKeys(Set) call org.apache.solr.handler.dataimport.DIHWriter.setDeltaKeys(Set) call org.apache.solr.handler.dataimport.DIHWriter.setDeltaKeys(Set) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() decl_stmt org.apache.solr.handler.dataimport.VariableResolver = decl_stmt java.util.Iterator < < = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.util.Map < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) + call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() break if ! call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl Map String Object decl Iterator private private < < call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.util.Iterator < < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.util.Map < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.lang.String = call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() : call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getEntity() decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + continue call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() public public call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) new new private private for : decl List private private < decl_stmt java.util.List < = new <> try catch throw new finally for : DocWrapper Entity decl Map int ContextImpl boolean private private < < decl_stmt org.apache.solr.handler.dataimport.ContextImpl = new == : if ! if call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() > if decl_stmt int = try while if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return if call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() > call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() + call org.apache.solr.handler.dataimport.RequestInfo.getRows() call org.apache.solr.handler.dataimport.RequestInfo.getRows() call org.apache.solr.handler.dataimport.RequestInfo.getRows() call org.apache.solr.handler.dataimport.RequestInfo.getRows() call org.apache.solr.handler.dataimport.RequestInfo.getRows() break try ++ if > call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() if && if == && = new call org.apache.solr.handler.dataimport.ContextImpl.setDoc(DocBuilder,DocWrapper) call org.apache.solr.handler.dataimport.ContextImpl.setDoc(DocBuilder,DocWrapper) call org.apache.solr.handler.dataimport.ContextImpl.setDoc(DocBuilder,DocWrapper) call org.apache.solr.handler.dataimport.ContextImpl.setDoc(DocBuilder,DocWrapper) call org.apache.solr.handler.dataimport.ContextImpl.setDoc(DocBuilder,DocWrapper) decl_stmt org.apache.solr.handler.dataimport.config.Entity = while call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() != call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() < call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() = call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() call org.apache.solr.handler.dataimport.config.Entity.getParentEntity() decl_stmt java.util.Map < = if == break if if <= call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() continue if > call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() call org.apache.solr.handler.dataimport.RequestInfo.getStart() + call org.apache.solr.handler.dataimport.RequestInfo.getRows() call org.apache.solr.handler.dataimport.RequestInfo.getRows() call org.apache.solr.handler.dataimport.RequestInfo.getRows() call org.apache.solr.handler.dataimport.RequestInfo.getRows() call org.apache.solr.handler.dataimport.RequestInfo.getRows() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + break if call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() decl_stmt DocWrapper = if != if = new else if != for : if != : else : if if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return if ! decl_stmt boolean = call org.apache.solr.handler.dataimport.DIHWriter.upload(SolrInputDocument) call org.apache.solr.handler.dataimport.DIHWriter.upload(SolrInputDocument) call org.apache.solr.handler.dataimport.DIHWriter.upload(SolrInputDocument) call org.apache.solr.handler.dataimport.DIHWriter.upload(SolrInputDocument) call org.apache.solr.handler.dataimport.DIHWriter.upload(SolrInputDocument) if call org.apache.solr.handler.dataimport.RequestInfo.isDebug() call org.apache.solr.handler.dataimport.RequestInfo.isDebug() call org.apache.solr.handler.dataimport.RequestInfo.isDebug() call org.apache.solr.handler.dataimport.RequestInfo.isDebug() call org.apache.solr.handler.dataimport.RequestInfo.isDebug() call org.apache.solr.handler.dataimport.RequestInfo.getDebugInfo() call org.apache.solr.handler.dataimport.RequestInfo.getDebugInfo() call org.apache.solr.handler.dataimport.RequestInfo.getDebugInfo() call org.apache.solr.handler.dataimport.RequestInfo.getDebugInfo() call org.apache.solr.handler.dataimport.RequestInfo.getDebugInfo() = if call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() call Statistics.docCount() else call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() call Statistics.failedDocCount() catch if if call Entity.getErrCode() call Entity.getErrCode() call Entity.getErrCode() call Entity.getErrCode() call Entity.getErrCode() == continue if if call Entity.getErrCode() call Entity.getErrCode() call Entity.getErrCode() call Entity.getErrCode() call Entity.getErrCode() == call Statistics.skipDocCount() call Statistics.skipDocCount() call Statistics.skipDocCount() call Statistics.skipDocCount() call Statistics.skipDocCount() call Statistics.skipDocCount() call Statistics.skipDocCount() call Statistics.skipDocCount() call Statistics.skipDocCount() = else + + + if call Entity.getErrCode() call Entity.getErrCode() call Entity.getErrCode() call Entity.getErrCode() call Entity.getErrCode() == throw else throw catch if throw new finally if if finally if public public if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public return == : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() float Collection Object private private < decl_stmt java.lang.Object = if != if instanceof decl_stmt java.util.Collection = for : call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() else call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call org.apache.solr.handler.dataimport.DIHWriter.deleteDoc(Object) call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() = if != if instanceof decl_stmt java.util.Collection = for : call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() else call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() call Statistics.deletedDocCount() = if != decl_stmt float = if instanceof = else = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() = if != if call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() throw new + = if != if call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() throw new String boolean SchemaField Object decl Set boolean String SchemaField IndexSchema private private < for < : decl_stmt java.lang.String = decl_stmt java.lang.Object = if == continue if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) continue decl_stmt java.util.Set < = decl_stmt org.apache.solr.schema.IndexSchema = == call org.apache.solr.handler.dataimport.RequestInfo.getRequest() call org.apache.solr.handler.dataimport.RequestInfo.getRequest() call org.apache.solr.handler.dataimport.RequestInfo.getRequest() call org.apache.solr.handler.dataimport.RequestInfo.getRequest() call org.apache.solr.handler.dataimport.RequestInfo.getRequest() : call org.apache.solr.handler.dataimport.RequestInfo.getRequest() call org.apache.solr.handler.dataimport.RequestInfo.getRequest() call org.apache.solr.handler.dataimport.RequestInfo.getRequest() call org.apache.solr.handler.dataimport.RequestInfo.getRequest() call org.apache.solr.handler.dataimport.RequestInfo.getRequest() if == && != decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) if == = call org.apache.solr.handler.dataimport.config.DIHConfiguration.getSchemaField(String) call org.apache.solr.handler.dataimport.config.DIHConfiguration.getSchemaField(String) call org.apache.solr.handler.dataimport.config.DIHConfiguration.getSchemaField(String) call org.apache.solr.handler.dataimport.config.DIHConfiguration.getSchemaField(String) call org.apache.solr.handler.dataimport.config.DIHConfiguration.getSchemaField(String) if != call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() else if != for : decl_stmt java.lang.String = decl_stmt boolean = decl_stmt boolean = if = decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.handler.dataimport.config.DIHConfiguration.getSchemaField(String) call org.apache.solr.handler.dataimport.config.DIHConfiguration.getSchemaField(String) call org.apache.solr.handler.dataimport.config.DIHConfiguration.getSchemaField(String) call org.apache.solr.handler.dataimport.config.DIHConfiguration.getSchemaField(String) call org.apache.solr.handler.dataimport.config.DIHConfiguration.getSchemaField(String) if == = else = call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() = if Collection private private if instanceof decl_stmt java.util.Collection = if for : if != else if == for : if != break else if if != else if == && != EntityProcessor EntityProcessorWrapper public public decl_stmt org.apache.solr.handler.dataimport.EntityProcessor = if == = new else try = call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() call org.apache.solr.handler.dataimport.DataImporter.getCore() catch + decl_stmt org.apache.solr.handler.dataimport.EntityProcessorWrapper = new for : call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getChildren() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getChildren() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getChildren() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getChildren() call org.apache.solr.handler.dataimport.EntityProcessorWrapper.getChildren() return String private private < if throw new decl_stmt java.lang.String = for : if + || + if != throw new = if == throw new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return decl Map decl Set decl Set ContextImpl Object decl Set String String decl Map public < < public < < < < if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return new decl_stmt org.apache.solr.handler.dataimport.ContextImpl = new decl_stmt java.util.Set < < = new <> for : call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return new decl_stmt java.util.Map < < = new <> call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt java.lang.String = while decl_stmt java.util.Map < = if == break decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return new decl_stmt java.util.Set < < = new <> while decl_stmt java.util.Map < = if == break call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.lang.String = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() decl_stmt java.util.Set < < = new <> if != for < : if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return new for < : if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + if return == : new <> decl Map private private < < try while decl_stmt java.util.Map < = if == break call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() call Statistics.rowsCount() if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return finally public public call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) static static = - return / * + + / + + / + + public public return String static static throws try return != : catch try decl_stmt java.lang.String = + + return != : catch throw new + + + + + public public return decl Map public < public < decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return private private = if call org.apache.solr.handler.dataimport.RequestInfo.isClean() call org.apache.solr.handler.dataimport.RequestInfo.isClean() call org.apache.solr.handler.dataimport.RequestInfo.isClean() call org.apache.solr.handler.dataimport.RequestInfo.isClean() call org.apache.solr.handler.dataimport.RequestInfo.isClean() if == && ! call org.apache.solr.handler.dataimport.DIHWriter.doDeleteAll() call org.apache.solr.handler.dataimport.DIHWriter.doDeleteAll() call org.apache.solr.handler.dataimport.DIHWriter.doDeleteAll() call org.apache.solr.handler.dataimport.DIHWriter.doDeleteAll() call org.apache.solr.handler.dataimport.DIHWriter.doDeleteAll() else if != call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String) call org.apache.solr.handler.dataimport.DIHWriter.deleteByQuery(String)