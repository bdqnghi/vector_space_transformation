org.apache.solr.search.grouping.distributed.command org.apache.lucene.queries.function.ValueSource import org.apache.lucene.search.Collector import org.apache.lucene.search.Sort import org.apache.lucene.search.grouping.AbstractAllGroupsCollector import org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector import org.apache.lucene.search.grouping.SearchGroup import org.apache.lucene.search.grouping.function.FunctionAllGroupsCollector import org.apache.lucene.search.grouping.function.FunctionFirstPassGroupingCollector import org.apache.lucene.search.grouping.term.TermAllGroupsCollector import org.apache.lucene.search.grouping.term.TermFirstPassGroupingCollector import org.apache.lucene.util.BytesRef import org.apache.solr.schema.FieldType import org.apache.solr.schema.SchemaField import org.apache.solr.search.grouping.Command import java.io.IOException import java.util.* import class org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommand super super implements AbstractFirstPassGroupingCollector AbstractAllGroupsCollector boolean int Sort SchemaField public public = return public public = return public public = return public public = return public public if == || == || == throw new return new ValueSource FieldType decl List public < public < throws decl_stmt java.util.List final final final < = new <> decl_stmt org.apache.solr.schema.FieldType final final = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() if > if call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() != decl_stmt org.apache.lucene.queries.function.ValueSource = call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) = new new < else = new call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if if call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() != decl_stmt org.apache.lucene.queries.function.ValueSource = call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) = new new < else = new call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl Collection Integer public public decl_stmt java.util.Collection final final final < < if != if call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() != = call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) else = call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) call org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean) else = decl_stmt java.lang.Integer final final if != = call org.apache.lucene.search.grouping.AbstractAllGroupsCollector.getGroupCount() call org.apache.lucene.search.grouping.AbstractAllGroupsCollector.getGroupCount() call org.apache.lucene.search.grouping.AbstractAllGroupsCollector.getGroupCount() call org.apache.lucene.search.grouping.AbstractAllGroupsCollector.getGroupCount() call org.apache.lucene.search.grouping.AbstractAllGroupsCollector.getGroupCount() else = return new public public return public public return public public return call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName()