org.apache.solr.common.util java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collection import java.util.Enumeration import java.util.HashMap import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.BlockingQueue import java.util.concurrent.Callable import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.CopyOnWriteArrayList import java.util.concurrent.ExecutorService import java.util.concurrent.LinkedBlockingQueue import java.util.concurrent.RejectedExecutionHandler import java.util.concurrent.SynchronousQueue import java.util.concurrent.ThreadFactory import java.util.concurrent.ThreadPoolExecutor import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicReference import org.slf4j.Logger import org.slf4j.LoggerFactory import org.slf4j.MDC import class org.apache.solr.common.util.ExecutorUtil decl ThreadLocal Logger decl List decl List public synchronized static public synchronized static for : if return decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = boolean public static public static decl_stmt boolean = while ! try = catch boolean boolean public static public static decl_stmt boolean = decl_stmt boolean = while ! try = catch if ! && ! = boolean public static public static decl_stmt boolean = while ! try = catch public static public static return new new < public static public static return new new < public static public static return new new < Thread AtomicReference decl Map decl ArrayList String decl List decl Collection decl Map Exception String String StringBuilder public public final final decl_stmt java.util.Map final final final < = decl_stmt java.lang.StringBuilder = new if != decl_stmt java.util.Collection < = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() - decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.lang.String final final = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() <= : call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt Exception final final = new decl_stmt java.util.List final final final < = decl_stmt java.util.ArrayList final final final < = call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() : new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if != for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt java.util.concurrent.atomic.AtomicReference = new call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() if != for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() decl_stmt java.util.Map < = decl_stmt java.lang.Thread final final = decl_stmt java.lang.String final final = call java.lang.Thread.getName() call java.lang.Thread.getName() call java.lang.Thread.getName() call java.lang.Thread.getName() call java.lang.Thread.getName() if != && ! call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) + + else try catch if instanceof throw call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call java.lang.Thread.getName() call java.lang.Thread.getName() call java.lang.Thread.getName() call java.lang.Thread.getName() call java.lang.Thread.getName() throw finally call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() if != && ! call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() else if != for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) public static public static return call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() public static public static if == call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() call decl ThreadLocal.remove() else call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set()