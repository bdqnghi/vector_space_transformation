org.apache.lucene.queryparser.flexible.standard.builders org.apache.lucene.index.Term import org.apache.lucene.queryparser.flexible.core.QueryNodeException import org.apache.lucene.queryparser.flexible.core.nodes.QueryNode import org.apache.lucene.queryparser.flexible.standard.nodes.WildcardQueryNode import org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor import org.apache.lucene.search.MultiTermQuery import org.apache.lucene.search.WildcardQuery import class org.apache.lucene.queryparser.flexible.standard.builders.WildcardQueryNodeBuilder super super implements WildcardQuery decl MultiTermQuery WildcardQueryNode public public throws decl_stmt org.apache.lucene.queryparser.flexible.standard.nodes.WildcardQueryNode = decl_stmt org.apache.lucene.search.WildcardQuery = new new call WildcardQueryNode.getFieldAsString() call WildcardQueryNode.getFieldAsString() call WildcardQueryNode.getFieldAsString() call WildcardQueryNode.getFieldAsString() call WildcardQueryNode.getFieldAsString() call WildcardQueryNode.getTextAsString() call WildcardQueryNode.getTextAsString() call WildcardQueryNode.getTextAsString() call WildcardQueryNode.getTextAsString() call WildcardQueryNode.getTextAsString() decl_stmt RewriteMethod = if != call WildcardQuery.setRewriteMethod() call WildcardQuery.setRewriteMethod() call WildcardQuery.setRewriteMethod() call WildcardQuery.setRewriteMethod() call WildcardQuery.setRewriteMethod() return