org.apache.lucene.index java.io.IOException import java.util.Arrays import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.Random import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.codecs.Codec import org.apache.lucene.codecs.FieldsConsumer import org.apache.lucene.codecs.FieldsProducer import org.apache.lucene.document.Document import org.apache.lucene.document.Field.Store import org.apache.lucene.document.StringField import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.ScoreDoc import org.apache.lucene.store.Directory import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.InfoStream import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.StringHelper import org.apache.lucene.util.TestUtil import org.apache.lucene.util.Version import org.junit.BeforeClass import class org.apache.lucene.index.TestCodecs super super extends int int int decl String int int int String public static public static = public public final final return public public final final return decl HashSet decl PositionData int decl TermData decl int decl byte String int int int int BytesRef final final final final decl_stmt int final final = + decl_stmt TermData final final final = new decl_stmt java.util.HashSet final final final < = new <> for = < ++ decl_stmt java.lang.String while = if ! call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() && ! call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() break decl_stmt int final final = + decl_stmt int final final final = new decl_stmt PositionData if ! = new else = decl_stmt int = for = < ++ += = if ! decl_stmt int final final = + = new decl_stmt int = for = < ++ += decl_stmt org.apache.lucene.util.BytesRef final final if && == decl_stmt byte final final final = new + for = < ++ = byte = new else = = new = new return FieldsProducer decl TermData FieldData Terms decl int decl FieldInfos SegmentInfo PostingsEnum decl FieldData decl Builder Codec Directory decl Iterator int String TermsEnum String FieldInfos public public throws decl_stmt int final final = decl_stmt TermData final final final = new for = < ++ decl_stmt int final final final = new decl_stmt java.lang.String final final = = new decl_stmt org.apache.lucene.util.fst.Builder final final final final final = new decl_stmt FieldData final final = new decl_stmt FieldData final final final = new decl_stmt org.apache.lucene.index.FieldInfos final final = call decl FieldInfos.finish() call decl FieldInfos.finish() call decl FieldInfos.finish() call decl FieldInfos.finish() call decl FieldInfos.finish() decl_stmt org.apache.lucene.store.Directory final final = decl_stmt org.apache.lucene.codecs.Codec = decl_stmt org.apache.lucene.index.SegmentInfo final final = new new <> decl_stmt org.apache.lucene.codecs.FieldsProducer final final = call Directory.postingsFormat() call Directory.postingsFormat() call Directory.postingsFormat() call Directory.postingsFormat() call Directory.postingsFormat() new decl_stmt java.util.Iterator final final final < = call SegmentInfo.iterator() call SegmentInfo.iterator() call SegmentInfo.iterator() call SegmentInfo.iterator() call SegmentInfo.iterator() decl_stmt java.lang.String = call FieldsProducer.next() call FieldsProducer.next() call FieldsProducer.next() call FieldsProducer.next() call FieldsProducer.next() decl_stmt org.apache.lucene.index.Terms final final = call SegmentInfo.terms() call SegmentInfo.terms() call SegmentInfo.terms() call SegmentInfo.terms() call SegmentInfo.terms() decl_stmt org.apache.lucene.index.TermsEnum final final = call String.iterator() call String.iterator() call String.iterator() call String.iterator() call String.iterator() decl_stmt org.apache.lucene.index.PostingsEnum = for = < ++ decl_stmt org.apache.lucene.util.BytesRef final final = call Terms.next() call Terms.next() call Terms.next() call Terms.next() call Terms.next() call PostingsEnum.utf8ToString() call PostingsEnum.utf8ToString() call PostingsEnum.utf8ToString() call PostingsEnum.utf8ToString() call PostingsEnum.utf8ToString() for = < ++ = call TermsEnum.nextDoc() call TermsEnum.nextDoc() call TermsEnum.nextDoc() call TermsEnum.nextDoc() call TermsEnum.nextDoc() call TermsEnum.nextDoc() call TermsEnum.nextDoc() call TermsEnum.nextDoc() call TermsEnum.nextDoc() call TermsEnum.nextDoc() call Terms.next() call Terms.next() call Terms.next() call Terms.next() call Terms.next() for = < ++ call Terms.seekCeil() call Terms.seekCeil() call Terms.seekCeil() call Terms.seekCeil() call Terms.seekCeil() new call FieldsProducer.hasNext() call FieldsProducer.hasNext() call FieldsProducer.hasNext() call FieldsProducer.hasNext() call FieldsProducer.hasNext() call SegmentInfo.close() call SegmentInfo.close() call SegmentInfo.close() call SegmentInfo.close() call SegmentInfo.close() call FieldInfos.close() call FieldInfos.close() call FieldInfos.close() call FieldInfos.close() call FieldInfos.close() SegmentInfo Directory decl FieldInfos decl FieldData boolean Codec FieldInfos FieldsProducer decl Builder boolean public public throws decl_stmt org.apache.lucene.util.fst.Builder final final final final final = new decl_stmt FieldData final final final = new for = < ++ decl_stmt boolean final final = == decl_stmt boolean final final = == = new decl_stmt org.apache.lucene.store.Directory final final = decl_stmt org.apache.lucene.index.FieldInfos final final = call decl FieldInfos.finish() call decl FieldInfos.finish() call decl FieldInfos.finish() call decl FieldInfos.finish() call decl FieldInfos.finish() if decl_stmt org.apache.lucene.codecs.Codec = decl_stmt org.apache.lucene.index.SegmentInfo final final = new new <> if decl_stmt org.apache.lucene.codecs.FieldsProducer final final = call FieldInfos.postingsFormat() call FieldInfos.postingsFormat() call FieldInfos.postingsFormat() call FieldInfos.postingsFormat() call FieldInfos.postingsFormat() new decl_stmt Verify final final final = new - for = < - ++ = new new for = < - ++ assert ! call SegmentInfo.close() call SegmentInfo.close() call SegmentInfo.close() call SegmentInfo.close() call SegmentInfo.close() call boolean.close() call boolean.close() call boolean.close() call boolean.close() call boolean.close() public public try catch final final = throw new int private private final final final final final final final final final final throws for = < ++ decl_stmt int final final = != if BytesRef int private private final final final final final throws for = < ++ decl_stmt int final final = if != if < decl_stmt org.apache.lucene.util.BytesRef final final = + + + call org.apache.lucene.util.BytesRef.toString() call org.apache.lucene.util.BytesRef.toString() call org.apache.lucene.util.BytesRef.toString() call org.apache.lucene.util.BytesRef.toString() call org.apache.lucene.util.BytesRef.toString() else int decl TermsEnum TermData int int decl SeekStatus TermsEnum int boolean FieldData int BytesRef PostingsEnum String boolean public public throws for = < ++ decl_stmt FieldData final final = decl_stmt org.apache.lucene.index.TermsEnum final final = decl_stmt int = while decl_stmt org.apache.lucene.util.BytesRef final final = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == break decl_stmt org.apache.lucene.util.BytesRef final final = new ++ + + + call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) decl_stmt TermData = decl_stmt SeekStatus = call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) new call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() if else call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) decl_stmt int final final = = decl_stmt boolean = try call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) = catch if call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() new call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() if else call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) if for = < ++ decl_stmt java.lang.String final final = + = call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) new == || == if for = - >= -- + + + + call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) new call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() for = - >= -- try call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() new catch = call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) new call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() new call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) new = do = if == decl_stmt org.apache.lucene.index.PostingsEnum final final if ! = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) else = decl_stmt int = - decl_stmt boolean = while < - decl_stmt int final final = - decl_stmt int if == && >= decl_stmt int final final = + - += if == = call String.advance() call String.advance() call String.advance() call String.advance() call String.advance() else = call String.advance() call String.advance() call String.advance() call String.advance() call String.advance() + if == assert == - = break else assert < - if >= + ++ else = call String.nextDoc() call String.nextDoc() call String.nextDoc() call String.nextDoc() call String.nextDoc() != - ++ if ! call String.freq() call String.freq() call String.freq() call String.freq() call String.freq() if == if ! call String.nextDoc() call String.nextDoc() call String.nextDoc() call String.nextDoc() call String.nextDoc() ++ call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != int public < public < return new < decl_stmt int = - public public return + < public public ++ return public public throw new public public return + < public public ++ return public public throw new public public for : if return new return public public return public public return new public public throw new public public throw new public public throw new public public throw new public public return >= public public return >= public public return >= public public return public public ++ if == return return public public return int public public for = < ++ decl_stmt int = if == = return else if > = return return public public throw new public public throw new public public throw new public public throw new public public return new public public throw new public public ++ if == return = - return public public return public public while < return public public return public public ++ return public public return public public throw new public public throw new SegmentWriteState Codec FieldsConsumer boolean private private final final final final final final final throws decl_stmt org.apache.lucene.codecs.Codec final final = decl_stmt org.apache.lucene.index.SegmentWriteState final final = new decl_stmt org.apache.lucene.codecs.FieldsConsumer = call Codec.postingsFormat() call Codec.postingsFormat() call Codec.postingsFormat() call Codec.postingsFormat() call Codec.postingsFormat() decl_stmt boolean = try call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() new = finally if else Term Random Document IndexWriter PostingsEnum DirectoryReader int Directory public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt java.util.Random = decl_stmt org.apache.lucene.index.IndexWriter = new new decl_stmt int = for = < ++ decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() decl_stmt org.apache.lucene.index.Term = new new decl_stmt org.apache.lucene.index.DirectoryReader = for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.index.PostingsEnum = while call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() != + call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close()