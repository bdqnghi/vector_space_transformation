org.apache.lucene.mockfile java.io.IOException import java.io.InputStream import java.io.OutputStream import java.net.URI import java.nio.channels.AsynchronousFileChannel import java.nio.channels.FileChannel import java.nio.channels.SeekableByteChannel import java.nio.file.AccessMode import java.nio.file.CopyOption import java.nio.file.DirectoryStream import java.nio.file.DirectoryStream.Filter import java.nio.file.FileStore import java.nio.file.FileSystem import java.nio.file.LinkOption import java.nio.file.OpenOption import java.nio.file.Path import java.nio.file.ProviderMismatchException import java.nio.file.attribute.BasicFileAttributes import java.nio.file.attribute.FileAttribute import java.nio.file.attribute.FileAttributeView import java.nio.file.spi.FileSystemProvider import java.util.Map import java.util.Objects import java.util.Set import java.util.concurrent.ExecutorService import class org.apache.lucene.mockfile.FilterFileSystemProvider super super extends String FileSystemProvider FileSystem public public return public public < throws if == throw new return public public < throws if == throw new return public public if == throw new return Path public public if == throw new decl_stmt java.nio.file.Path = call FileSystemProvider.getPath() call FileSystemProvider.getPath() call FileSystemProvider.getPath() call FileSystemProvider.getPath() call FileSystemProvider.getPath() return new public public < throws call FileSystemProvider.createDirectory() call FileSystemProvider.createDirectory() call FileSystemProvider.createDirectory() call FileSystemProvider.createDirectory() call FileSystemProvider.createDirectory() public public throws call FileSystemProvider.delete() call FileSystemProvider.delete() call FileSystemProvider.delete() call FileSystemProvider.delete() call FileSystemProvider.delete() public public throws call FileSystemProvider.copy() call FileSystemProvider.copy() call FileSystemProvider.copy() call FileSystemProvider.copy() call FileSystemProvider.copy() public public throws call FileSystemProvider.move() call FileSystemProvider.move() call FileSystemProvider.move() call FileSystemProvider.move() call FileSystemProvider.move() public public throws return call FileSystemProvider.isSameFile() call FileSystemProvider.isSameFile() call FileSystemProvider.isSameFile() call FileSystemProvider.isSameFile() call FileSystemProvider.isSameFile() public public throws return call FileSystemProvider.isHidden() call FileSystemProvider.isHidden() call FileSystemProvider.isHidden() call FileSystemProvider.isHidden() call FileSystemProvider.isHidden() public public throws return call FileSystemProvider.getFileStore() call FileSystemProvider.getFileStore() call FileSystemProvider.getFileStore() call FileSystemProvider.getFileStore() call FileSystemProvider.getFileStore() public public throws call FileSystemProvider.checkAccess() call FileSystemProvider.checkAccess() call FileSystemProvider.checkAccess() call FileSystemProvider.checkAccess() call FileSystemProvider.checkAccess() public < extends extends public < extends extends < return call FileSystemProvider.getFileAttributeView() call FileSystemProvider.getFileAttributeView() call FileSystemProvider.getFileAttributeView() call FileSystemProvider.getFileAttributeView() call FileSystemProvider.getFileAttributeView() public < extends extends public < extends extends < throws return call FileSystemProvider.readAttributes() call FileSystemProvider.readAttributes() call FileSystemProvider.readAttributes() call FileSystemProvider.readAttributes() call FileSystemProvider.readAttributes() public < public < throws return call FileSystemProvider.readAttributes() call FileSystemProvider.readAttributes() call FileSystemProvider.readAttributes() call FileSystemProvider.readAttributes() call FileSystemProvider.readAttributes() public public throws call FileSystemProvider.setAttribute() call FileSystemProvider.setAttribute() call FileSystemProvider.setAttribute() call FileSystemProvider.setAttribute() call FileSystemProvider.setAttribute() public public throws return call java.nio.file.spi.FileSystemProvider.newInputStream(Path,OpenOption) call java.nio.file.spi.FileSystemProvider.newInputStream(Path,OpenOption) call java.nio.file.spi.FileSystemProvider.newInputStream(Path,OpenOption) call java.nio.file.spi.FileSystemProvider.newInputStream(Path,OpenOption) call java.nio.file.spi.FileSystemProvider.newInputStream(Path,OpenOption) public public throws return call java.nio.file.spi.FileSystemProvider.newOutputStream(Path,OpenOption) call java.nio.file.spi.FileSystemProvider.newOutputStream(Path,OpenOption) call java.nio.file.spi.FileSystemProvider.newOutputStream(Path,OpenOption) call java.nio.file.spi.FileSystemProvider.newOutputStream(Path,OpenOption) call java.nio.file.spi.FileSystemProvider.newOutputStream(Path,OpenOption) public public < extends extends < throws return call java.nio.file.spi.FileSystemProvider.newFileChannel(Path,Set,FileAttribute) call java.nio.file.spi.FileSystemProvider.newFileChannel(Path,Set,FileAttribute) call java.nio.file.spi.FileSystemProvider.newFileChannel(Path,Set,FileAttribute) call java.nio.file.spi.FileSystemProvider.newFileChannel(Path,Set,FileAttribute) call java.nio.file.spi.FileSystemProvider.newFileChannel(Path,Set,FileAttribute) public public < extends extends < throws return call FileSystemProvider.newAsynchronousFileChannel() call FileSystemProvider.newAsynchronousFileChannel() call FileSystemProvider.newAsynchronousFileChannel() call FileSystemProvider.newAsynchronousFileChannel() call FileSystemProvider.newAsynchronousFileChannel() public public < extends extends < throws return call FileSystemProvider.newByteChannel() call FileSystemProvider.newByteChannel() call FileSystemProvider.newByteChannel() call FileSystemProvider.newByteChannel() call FileSystemProvider.newByteChannel() decl Filter public < public < final final final < super super throws decl_stmt org.apache.solr.search.Filter < = new < public public throws return new return new call FileSystemProvider.newDirectoryStream() call FileSystemProvider.newDirectoryStream() call FileSystemProvider.newDirectoryStream() call FileSystemProvider.newDirectoryStream() call FileSystemProvider.newDirectoryStream() public public throws return new public public < throws call java.nio.file.spi.FileSystemProvider.createSymbolicLink(Path,Path,FileAttribute) call java.nio.file.spi.FileSystemProvider.createSymbolicLink(Path,Path,FileAttribute) call java.nio.file.spi.FileSystemProvider.createSymbolicLink(Path,Path,FileAttribute) call java.nio.file.spi.FileSystemProvider.createSymbolicLink(Path,Path,FileAttribute) call java.nio.file.spi.FileSystemProvider.createSymbolicLink(Path,Path,FileAttribute) public public throws call java.nio.file.spi.FileSystemProvider.createLink(Path,Path) call java.nio.file.spi.FileSystemProvider.createLink(Path,Path) call java.nio.file.spi.FileSystemProvider.createLink(Path,Path) call java.nio.file.spi.FileSystemProvider.createLink(Path,Path) call java.nio.file.spi.FileSystemProvider.createLink(Path,Path) public public throws return call java.nio.file.spi.FileSystemProvider.deleteIfExists(Path) call java.nio.file.spi.FileSystemProvider.deleteIfExists(Path) call java.nio.file.spi.FileSystemProvider.deleteIfExists(Path) call java.nio.file.spi.FileSystemProvider.deleteIfExists(Path) call java.nio.file.spi.FileSystemProvider.deleteIfExists(Path) public public throws return call java.nio.file.spi.FileSystemProvider.readSymbolicLink(Path) call java.nio.file.spi.FileSystemProvider.readSymbolicLink(Path) call java.nio.file.spi.FileSystemProvider.readSymbolicLink(Path) call java.nio.file.spi.FileSystemProvider.readSymbolicLink(Path) call java.nio.file.spi.FileSystemProvider.readSymbolicLink(Path) FilterPath protected protected if instanceof decl_stmt org.apache.lucene.mockfile.FilterPath = if != throw new + call FileSystem.provider() call FileSystem.provider() call FileSystem.provider() call FileSystem.provider() call FileSystem.provider() + + call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() call FilterPath.fileSystem() return else throw new + protected protected public public return + + +