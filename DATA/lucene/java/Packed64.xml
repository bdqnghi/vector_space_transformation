org.apache.lucene.util.packed java.io.IOException import java.util.Arrays import org.apache.lucene.store.DataInput import org.apache.lucene.util.RamUsageEstimator import class org.apache.lucene.util.packed.Packed64 super super extends decl long int int int long int long int long public public final final decl_stmt long final final = long * decl_stmt int final final = >>> decl_stmt long final final = & + if <= return >>> - & return << | + >>> - & int int decl Decoder int decl PackedInts int public public assert > : + + assert >= && < = - assert + <= decl_stmt int final final = decl_stmt org.apache.solr.core.Decoder final final final final final = decl_stmt int final final = call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() if != for = < && && ++ ++ = ++ -- if == return - assert call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() == decl_stmt int = long * >>> assert long * & == decl_stmt int final final = / call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.decode() call decl PackedInts.decode() call decl PackedInts.decode() call decl PackedInts.decode() call decl PackedInts.decode() decl_stmt int final final = * call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() += -= assert >= if > return - else assert == return long int long public public final final final final decl_stmt long final final = long * decl_stmt int final final = >>> decl_stmt long final final = & + if <= = & ~ << - | << - return = & ~ >>> | >>> + = + & ~ >>> | << - int decl Encoder decl PackedInts int int int public public assert > : + + assert >= && < = - assert + <= decl_stmt int final final = decl_stmt org.apache.lucene.search.highlight.Encoder final final final final final = decl_stmt int final final = call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() if != for = < && && ++ ++ ++ -- if == return - assert call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() == decl_stmt int = long * >>> assert long * & == decl_stmt int final final = / call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() decl_stmt int final final = * call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() += -= assert >= if > return - else assert == return public public return + + + + + + public public return + * + + + long int int int int Packed64 decl long int int public public assert <= assert <= decl_stmt int final final = / decl_stmt int final final = - if <= * return decl_stmt int final final = if != for = < ++ ++ assert == decl_stmt int final final = * >> decl_stmt long final final final decl_stmt org.apache.lucene.util.packed.Packed64 = new for = < ++ call org.apache.lucene.util.packed.Packed64.set(int,long) call org.apache.lucene.util.packed.Packed64.set(int,long) call org.apache.lucene.util.packed.Packed64.set(int,long) call org.apache.lucene.util.packed.Packed64.set(int,long) call org.apache.lucene.util.packed.Packed64.set(int,long) = assert <= decl_stmt int final final = long * >>> decl_stmt int final final = long * >>> for = < ++ decl_stmt long final final = = for = long << / < ++ private static private static if < return else if == return else return public public