org.apache.solr.update java.io.File import java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.List import java.util.Locale import java.util.Map import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.LinkedBlockingDeque import org.apache.lucene.util.BytesRef import org.apache.solr.common.SolrException import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.core.SolrCore import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.request.SolrQueryRequest import org.apache.solr.update.processor.DistributedUpdateProcessor import org.apache.solr.update.processor.DistributingUpdateProcessorFactory import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.update.CdcrUpdateLog super super extends boolean String CdcrLogReader decl Map Logger public public for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() public public < return new int TransactionLog int TransactionLog protected protected if == return += decl_stmt int = if != && != += while && > decl_stmt org.apache.solr.update.TransactionLog = decl_stmt int = call org.apache.solr.update.TransactionLog.numRecords() call org.apache.solr.update.TransactionLog.numRecords() call org.apache.solr.update.TransactionLog.numRecords() call org.apache.solr.update.TransactionLog.numRecords() call org.apache.solr.update.TransactionLog.numRecords() if - >= || >= if ! -= -= decl_stmt org.apache.solr.update.TransactionLog = = call org.apache.solr.update.TransactionLog.close() call org.apache.solr.update.TransactionLog.close() call org.apache.solr.update.TransactionLog.close() call org.apache.solr.update.TransactionLog.close() call org.apache.solr.update.TransactionLog.close() continue break break = private private for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if ! return if == return return String public public if != - return if == return - decl_stmt java.lang.String = - return call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) public public synchronized if & == public public synchronized if & == public public synchronized if & == public public return new new public public if == = public public if != call CdcrLogReader.close() call CdcrLogReader.close() call CdcrLogReader.close() call CdcrLogReader.close() call CdcrLogReader.close() = public public return public public return == : long String protected protected if == decl_stmt long = if == decl_stmt java.lang.String = = new new for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() BufferedUpdates public public synchronized decl_stmt org.apache.lucene.index.BufferedUpdates = new if == && != = = for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() for : if == || == continue = = = = if != if != = = return decl UpdateLog File DeleteUpdate TransactionLog long decl List Update decl RecentUpdates long public public = = + if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + + + decl_stmt org.apache.solr.update.TransactionLog = for : decl_stmt File = new try = catch + for : if >= break decl_stmt RecentUpdates = decl_stmt long = call decl UpdateLog.getMaxRecentVersion() call decl UpdateLog.getMaxRecentVersion() call decl UpdateLog.getMaxRecentVersion() call decl UpdateLog.getMaxRecentVersion() call decl UpdateLog.getMaxRecentVersion() try = call decl UpdateLog.getVersions() call decl UpdateLog.getVersions() call decl UpdateLog.getVersions() call decl UpdateLog.getVersions() call decl UpdateLog.getVersions() = call decl UpdateLog.getLatestOperation() call decl UpdateLog.getLatestOperation() call decl UpdateLog.getLatestOperation() call decl UpdateLog.getLatestOperation() call decl UpdateLog.getLatestOperation() for = call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() - >= -- decl_stmt DeleteUpdate = call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() call decl UpdateLog.deleteList() new new - for = call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() - >= -- decl_stmt Update = call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() call decl UpdateLog.deleteByQueryList() decl_stmt java.util.List < = < call DeleteUpdate.log() call DeleteUpdate.log() call DeleteUpdate.log() call DeleteUpdate.log() call DeleteUpdate.log() call DeleteUpdate.log() call DeleteUpdate.log() call DeleteUpdate.log() call DeleteUpdate.log() decl_stmt long = call Update.get() call Update.get() call Update.get() call Update.get() call Update.get() decl_stmt java.lang.String = call Update.get() call Update.get() call Update.get() call Update.get() call Update.get() finally call decl UpdateLog.close() call decl UpdateLog.close() call decl UpdateLog.close() call decl UpdateLog.close() call decl UpdateLog.close() if != List CdcrTransactionLog String decl TransactionLog SolrQueryRequest int long AddUpdateCommand int ModifiableSolrParams decl LogReader DeleteUpdateCommand Object private private = new = == : = |= decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) decl_stmt org.apache.solr.request.SolrQueryRequest = new decl_stmt org.apache.solr.update.CdcrTransactionLog = new decl_stmt LogReader = call org.apache.solr.update.CdcrTransactionLog.getReader(long) call org.apache.solr.update.CdcrTransactionLog.getReader(long) call org.apache.solr.update.CdcrTransactionLog.getReader(long) call org.apache.solr.update.CdcrTransactionLog.getReader(long) call org.apache.solr.update.CdcrTransactionLog.getReader(long) try decl_stmt int = for decl_stmt java.lang.Object = call decl TransactionLog.next() call decl TransactionLog.next() call decl TransactionLog.next() call decl TransactionLog.next() call decl TransactionLog.next() if == break decl_stmt java.util.List = = call Object.get() call Object.get() call Object.get() call Object.get() call Object.get() decl_stmt int = & decl_stmt long = call Object.get() call Object.get() call Object.get() call Object.get() call Object.get() if <= call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() continue switch case decl_stmt org.apache.solr.common.SolrInputDocument = call Object.get() call Object.get() call Object.get() call Object.get() call Object.get() call Object.size() call Object.size() call Object.size() call Object.size() call Object.size() - decl_stmt org.apache.solr.update.AddUpdateCommand = new = call String.setVersion() call String.setVersion() call String.setVersion() call String.setVersion() call String.setVersion() call String.setFlags() call String.setFlags() call String.setFlags() call String.setFlags() call String.setFlags() break case decl_stmt byte = call Object.get() call Object.get() call Object.get() call Object.get() call Object.get() decl_stmt org.apache.solr.update.DeleteUpdateCommand = new call String.setIndexedId() call String.setIndexedId() call String.setIndexedId() call String.setIndexedId() call String.setIndexedId() new call String.setVersion() call String.setVersion() call String.setVersion() call String.setVersion() call String.setVersion() call String.setFlags() call String.setFlags() call String.setFlags() call String.setFlags() call String.setFlags() break case decl_stmt java.lang.String = call Object.get() call Object.get() call Object.get() call Object.get() call Object.get() decl_stmt org.apache.solr.update.DeleteUpdateCommand = new = call String.setVersion() call String.setVersion() call String.setVersion() call String.setVersion() call String.setVersion() call String.setFlags() call String.setFlags() call String.setFlags() call String.setFlags() call String.setFlags() break default: throw new + catch throw new finally try call decl TransactionLog.close() call decl TransactionLog.close() call decl TransactionLog.close() call decl TransactionLog.close() call decl TransactionLog.close() finally private private if != = public public for : new <> call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() private private = private private return == : public public return + + private private if == && ! = = = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() CdcrLogReader public public decl_stmt CdcrLogReader = new new < call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() call CdcrLogReader.tlogs() = = = = if != call CdcrLogReader.tlogReader() call CdcrLogReader.tlogReader() call CdcrLogReader.tlogReader() call CdcrLogReader.tlogReader() call CdcrLogReader.tlogReader() call CdcrLogReader.tlogReader() call CdcrLogReader.tlogReader() call CdcrLogReader.tlogReader() call CdcrLogReader.tlogReader() = return public public if == return while < = assert == = = = = = Object public public throws while ! = decl_stmt java.lang.Object = if != = = ++ return if > = = = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() else return return Object public public throws decl_stmt java.lang.Object = if || ! return while = != if >= return return TransactionLog private private if < return decl_stmt org.apache.solr.update.TransactionLog = while > if >= break = if != = = = return List private private decl_stmt java.util.List = return call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) public public try if != -- = catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new long public public decl_stmt long = synchronized for : += - return - public public if != = = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() public public return == :