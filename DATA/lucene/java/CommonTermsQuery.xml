org.apache.lucene.queries java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.List import org.apache.lucene.index.Fields import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.BooleanClause.Occur import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.BoostQuery import org.apache.lucene.search.MatchNoDocsQuery import org.apache.lucene.search.Query import org.apache.lucene.search.TermQuery import org.apache.lucene.search.similarities.Similarity import class org.apache.lucene.queries.CommonTermsQuery super super extends boolean decl List float float Occur Occur float float float public public if == throw new decl List decl TermContext int decl Term public public throws if return new else if == return decl_stmt java.util.List final final final < = decl_stmt int final final = decl_stmt org.apache.lucene.index.TermContext final final final = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.lucene.index.Term final final final = new return protected protected return protected protected return private final private final if >= || == return int return * Occur int decl BooleanQuery int decl Builder Occur decl List decl List Query TermContext int int decl BooleanQuery decl Builder protected protected final final final final final final final final decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> for = < ++ decl_stmt org.apache.lucene.index.TermContext = if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if >= && call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.docFreq() > || call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.docFreq() > int * float call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt int final final = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int final final = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt Occur = decl_stmt Occur = decl_stmt int = decl_stmt int = if == && > = if == && > = if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() if == && != = decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() == decl_stmt org.apache.lucene.util.fst.Builder = new call decl Builder.setDisableCoord() call decl Builder.setDisableCoord() call decl Builder.setDisableCoord() call decl Builder.setDisableCoord() call decl Builder.setDisableCoord() for : call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.setMinimumNumberShouldMatch() call decl Builder.setMinimumNumberShouldMatch() call decl Builder.setMinimumNumberShouldMatch() call decl Builder.setMinimumNumberShouldMatch() call decl Builder.setMinimumNumberShouldMatch() decl_stmt org.apache.lucene.search.Query = call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() == decl_stmt org.apache.lucene.util.fst.Builder = new call decl Builder.setDisableCoord() call decl Builder.setDisableCoord() call decl Builder.setDisableCoord() call decl Builder.setDisableCoord() call decl Builder.setDisableCoord() for : call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.setMinimumNumberShouldMatch() call decl Builder.setMinimumNumberShouldMatch() call decl Builder.setMinimumNumberShouldMatch() call decl Builder.setMinimumNumberShouldMatch() call decl Builder.setMinimumNumberShouldMatch() decl_stmt org.apache.lucene.search.Query = call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new return call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() Fields Term TermContext Terms TermsEnum public public < throws decl_stmt org.apache.lucene.index.TermsEnum = for : decl_stmt Fields final final = for = < ++ decl_stmt org.apache.lucene.index.Term = decl_stmt org.apache.lucene.index.TermContext = decl_stmt org.apache.lucene.index.Terms final final = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() if == continue = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() assert != if == continue if call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.Term.bytes() call org.apache.lucene.index.Term.bytes() call org.apache.lucene.index.Term.bytes() call org.apache.lucene.index.Term.bytes() call org.apache.lucene.index.Term.bytes() if == = new call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() else call org.apache.lucene.index.TermContext.register(TermState,int) call org.apache.lucene.index.TermContext.register(TermState,int) call org.apache.lucene.index.TermContext.register(TermState,int) call org.apache.lucene.index.TermContext.register(TermState,int) call org.apache.lucene.index.TermContext.register(TermState,int) call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() public public return public public = public public return public public = public public return public < public < return public public return public public return public public return public public return public public return StringBuilder boolean Term public public decl_stmt java.lang.StringBuilder = new decl_stmt boolean = > if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.apache.lucene.index.Term = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if > || > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() int int public public decl_stmt int final final = decl_stmt int = = * + : = * + = * + == : call Occur.hashCode() call Occur.hashCode() call Occur.hashCode() call Occur.hashCode() call Occur.hashCode() = * + = * + == : call Occur.hashCode() call Occur.hashCode() call Occur.hashCode() call Occur.hashCode() call Occur.hashCode() = * + = * + = * + = * + == : call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() return CommonTermsQuery public public if == return if ! return if != return decl_stmt org.apache.lucene.queries.CommonTermsQuery = if != return if != return if != return if != return if != return if != return if != return if != return if == if != return else if ! call decl List.equals() call decl List.equals() call decl List.equals() call decl List.equals() call decl List.equals() return return protected protected return == new : new