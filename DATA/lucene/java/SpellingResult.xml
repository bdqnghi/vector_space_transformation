org.apache.solr.spelling org.apache.lucene.analysis.Token import java.util.Collection import java.util.LinkedHashMap import java.util.Map import java.util.List import class org.apache.solr.spelling.SpellingResult decl Collection int decl Map decl Map decl LinkedHashMap public public < decl_stmt java.util.LinkedHashMap < = if == = new <> for : call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() public public if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl LinkedHashMap public public decl_stmt java.util.LinkedHashMap < = if == = new <> call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() public < public < return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() public public return != && ! call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() public < < public < < return public < public < return public < public < return public public < =