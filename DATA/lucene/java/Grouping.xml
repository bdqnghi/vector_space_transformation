org.apache.solr.search java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collection import java.util.LinkedHashSet import java.util.List import java.util.Locale import java.util.Map import java.util.Set import org.apache.commons.lang.ArrayUtils import org.apache.lucene.index.ExitableDirectoryReader import org.apache.lucene.index.IndexableField import org.apache.lucene.queries.function.FunctionQuery import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.queries.function.valuesource.QueryValueSource import org.apache.lucene.search.BooleanClause.Occur import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.CachingCollector import org.apache.lucene.search.Collector import org.apache.lucene.search.MultiCollector import org.apache.lucene.search.Query import org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.Sort import org.apache.lucene.search.TimeLimitingCollector import org.apache.lucene.search.TopDocs import org.apache.lucene.search.TopDocsCollector import org.apache.lucene.search.TopFieldCollector import org.apache.lucene.search.TopScoreDocCollector import org.apache.lucene.search.TotalHitCountCollector import org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector import org.apache.lucene.search.grouping.GroupDocs import org.apache.lucene.search.grouping.SearchGroup import org.apache.lucene.search.grouping.TopGroups import org.apache.lucene.search.grouping.function.FunctionAllGroupHeadsCollector import org.apache.lucene.search.grouping.function.FunctionAllGroupsCollector import org.apache.lucene.search.grouping.function.FunctionFirstPassGroupingCollector import org.apache.lucene.search.grouping.function.FunctionSecondPassGroupingCollector import org.apache.lucene.search.grouping.term.TermAllGroupHeadsCollector import org.apache.lucene.search.grouping.term.TermAllGroupsCollector import org.apache.lucene.search.grouping.term.TermFirstPassGroupingCollector import org.apache.lucene.search.grouping.term.TermSecondPassGroupingCollector import org.apache.lucene.util.BytesRef import org.apache.lucene.util.mutable.MutableValue import org.apache.solr.common.SolrException import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.request.SolrQueryRequest import org.apache.solr.schema.FieldType import org.apache.solr.schema.SchemaField import org.apache.solr.schema.StrFieldSource import org.apache.solr.search.grouping.collector.FilterCollector import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.search.Grouping int boolean int boolean Sort Format boolean Query decl Set TotalCount int int NamedList Logger boolean Sort int DocList int TimeLimitingCollector SolrIndexSearcher decl List QueryResult boolean QueryCommand DocSet Filter boolean boolean float public public call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl Grouping SchemaField FieldType ValueSource public public throws decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() decl_stmt org.apache.solr.schema.FieldType = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() decl_stmt org.apache.lucene.queries.function.ValueSource = call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) if ! instanceof return decl_stmt CommandField = new = = = = = = = call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() = = = if = = if == = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() CommandFunc QParser Query ValueSource decl Grouping String decl Command public public throws decl_stmt org.apache.solr.search.QParser = decl_stmt org.apache.lucene.search.Query = call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() decl_stmt org.apache.solr.search.grouping.Command final final final final final if instanceof decl_stmt org.apache.lucene.queries.function.ValueSource = if instanceof decl_stmt java.lang.String = decl_stmt CommandField = new = = else decl_stmt CommandFunc = new = = else decl_stmt CommandFunc = new = new = = = = = = = call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() = = = if = = if == = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() QParser decl Grouping Query public public throws decl_stmt org.apache.solr.search.QParser = decl_stmt org.apache.lucene.search.Query = call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() decl_stmt CommandQuery = new = = = = = = = call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getOffset() = = if = = if == = = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public = return public public = return public public = return public public = return public public = return public public = return public public = return public public = return public < public < return Collector Collector Collector decl int boolean decl AbstractAllGroupHeadsCollector decl ProcessedFilter int DocSetCollector decl SolrIndexSearcher CachingCollector Filter Collector int Sort DocListAndSet public public throws if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() throw new decl_stmt DocListAndSet = new call org.apache.solr.search.QueryResult.setDocListAndSet(DocListAndSet) call org.apache.solr.search.QueryResult.setDocListAndSet(DocListAndSet) call org.apache.solr.search.QueryResult.setDocListAndSet(DocListAndSet) call org.apache.solr.search.QueryResult.setDocListAndSet(DocListAndSet) call org.apache.solr.search.QueryResult.setDocListAndSet(DocListAndSet) decl_stmt ProcessedFilter = call org.apache.solr.search.SolrIndexSearcher.getProcessedFilter(DocSet,List) call org.apache.solr.search.SolrIndexSearcher.getProcessedFilter(DocSet,List) call org.apache.solr.search.SolrIndexSearcher.getProcessedFilter(DocSet,List) call org.apache.solr.search.SolrIndexSearcher.getProcessedFilter(DocSet,List) call org.apache.solr.search.SolrIndexSearcher.getProcessedFilter(DocSet,List) call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFilter() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFilter() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFilter() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFilter() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFilter() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFilterList() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFilterList() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFilterList() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFilterList() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFilterList() decl_stmt org.apache.solr.search.Filter final final = = call org.apache.solr.search.SolrIndexSearcher.maxDoc() call org.apache.solr.search.SolrIndexSearcher.maxDoc() call org.apache.solr.search.SolrIndexSearcher.maxDoc() call org.apache.solr.search.SolrIndexSearcher.maxDoc() call org.apache.solr.search.SolrIndexSearcher.maxDoc() = call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() & != decl_stmt boolean = if ! && ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt org.apache.lucene.search.Sort = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = == || call boolean.needsScores() call boolean.needsScores() call boolean.needsScores() call boolean.needsScores() call boolean.needsScores() else if = = call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() & != = call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getFlags() & != = call org.apache.solr.search.grouping.distributed.command.QueryCommand.getQuery() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getQuery() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getQuery() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getQuery() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getQuery() for : call QueryCommand.prepare() call QueryCommand.prepare() call QueryCommand.prepare() call QueryCommand.prepare() call QueryCommand.prepare() decl_stmt org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector < = decl_stmt java.util.List < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : decl_stmt org.apache.lucene.search.Collector = call QueryCommand.createFirstPassCollector() call QueryCommand.createFirstPassCollector() call QueryCommand.createFirstPassCollector() call QueryCommand.createFirstPassCollector() call QueryCommand.createFirstPassCollector() if != call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() if && == call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() = call QueryCommand.createAllGroupCollector() call QueryCommand.createAllGroupCollector() call QueryCommand.createAllGroupCollector() call QueryCommand.createAllGroupCollector() call QueryCommand.createAllGroupCollector() decl_stmt org.apache.solr.search.DocSetCollector = if && == = new call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() decl_stmt org.apache.lucene.search.Collector = decl_stmt org.apache.lucene.search.CachingCollector = if && != decl_stmt int = int * / if > = = if != call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() = if != if instanceof if && != call QueryResult.setDocSet() call QueryResult.setDocSet() call QueryResult.setDocSet() call QueryResult.setDocSet() call QueryResult.setDocSet() new call Sort.retrieveGroupHeads() call Sort.retrieveGroupHeads() call Sort.retrieveGroupHeads() call Sort.retrieveGroupHeads() call Sort.retrieveGroupHeads() else if call QueryResult.setDocSet() call QueryResult.setDocSet() call QueryResult.setDocSet() call QueryResult.setDocSet() call QueryResult.setDocSet() call Collector.getDocSet() call Collector.getDocSet() call Collector.getDocSet() call Collector.getDocSet() call Collector.getDocSet() call decl AbstractAllGroupHeadsCollector.clear() call decl AbstractAllGroupHeadsCollector.clear() call decl AbstractAllGroupHeadsCollector.clear() call decl AbstractAllGroupHeadsCollector.clear() call decl AbstractAllGroupHeadsCollector.clear() for : decl_stmt org.apache.lucene.search.Collector = call QueryCommand.createSecondPassCollector() call QueryCommand.createSecondPassCollector() call QueryCommand.createSecondPassCollector() call QueryCommand.createSecondPassCollector() call QueryCommand.createSecondPassCollector() if != call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() call decl AbstractAllGroupHeadsCollector.add() if ! call decl AbstractAllGroupHeadsCollector.isEmpty() call decl AbstractAllGroupHeadsCollector.isEmpty() call decl AbstractAllGroupHeadsCollector.isEmpty() call decl AbstractAllGroupHeadsCollector.isEmpty() call decl AbstractAllGroupHeadsCollector.isEmpty() decl_stmt org.apache.lucene.search.Collector = call decl AbstractAllGroupHeadsCollector.toArray() call decl AbstractAllGroupHeadsCollector.toArray() call decl AbstractAllGroupHeadsCollector.toArray() call decl AbstractAllGroupHeadsCollector.toArray() call decl AbstractAllGroupHeadsCollector.toArray() new call decl AbstractAllGroupHeadsCollector.size() call decl AbstractAllGroupHeadsCollector.size() call decl AbstractAllGroupHeadsCollector.size() call decl AbstractAllGroupHeadsCollector.size() call decl AbstractAllGroupHeadsCollector.size() if call decl AbstractAllGroupHeadsCollector.size() call decl AbstractAllGroupHeadsCollector.size() call decl AbstractAllGroupHeadsCollector.size() call decl AbstractAllGroupHeadsCollector.size() call decl AbstractAllGroupHeadsCollector.size() > if != if call Collector.isCached() call Collector.isCached() call Collector.isCached() call Collector.isCached() call Collector.isCached() call Collector.replay() call Collector.replay() call Collector.replay() call Collector.replay() call Collector.replay() else = call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() else if != call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() call decl SolrIndexSearcher.postFilter() = if instanceof for : call QueryCommand.finish() call QueryCommand.finish() call QueryCommand.finish() call QueryCommand.finish() call QueryCommand.finish() = if decl_stmt int = call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() decl_stmt int = new decl_stmt int = for : ++ = call org.apache.solr.search.QueryResult.setDocList(DocList) call org.apache.solr.search.QueryResult.setDocList(DocList) call org.apache.solr.search.QueryResult.setDocList(DocList) call org.apache.solr.search.QueryResult.setDocList(DocList) call org.apache.solr.search.QueryResult.setDocList(DocList) new Query private private final final throws if call org.apache.solr.search.grouping.distributed.command.QueryCommand.getTimeAllowed() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getTimeAllowed() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getTimeAllowed() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getTimeAllowed() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getTimeAllowed() > if == = new call org.apache.solr.search.grouping.distributed.command.QueryCommand.getTimeAllowed() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getTimeAllowed() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getTimeAllowed() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getTimeAllowed() call org.apache.solr.search.grouping.distributed.command.QueryCommand.getTimeAllowed() else call org.apache.lucene.search.TimeLimitingCollector.setCollector(Collector) call org.apache.lucene.search.TimeLimitingCollector.setCollector(Collector) call org.apache.lucene.search.TimeLimitingCollector.setCollector(Collector) call org.apache.lucene.search.TimeLimitingCollector.setCollector(Collector) call org.apache.lucene.search.TimeLimitingCollector.setCollector(Collector) = try decl_stmt org.apache.lucene.search.Query = if != = new call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + call org.apache.solr.search.QueryResult.setPartialResults(boolean) call org.apache.solr.search.QueryResult.setPartialResults(boolean) call org.apache.solr.search.QueryResult.setPartialResults(boolean) call org.apache.solr.search.QueryResult.setPartialResults(boolean) call org.apache.solr.search.QueryResult.setPartialResults(boolean) int decl_stmt int = < : + if < || || = return public public return protected protected throws return public < public < throws return protected protected return int NamedList Integer protected protected decl_stmt org.apache.solr.common.util.NamedList = new call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) decl_stmt int = call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) if == decl_stmt java.lang.Integer = call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) == : = return int int DocSlice int int int float DocIterator decl float int protected protected decl_stmt int = decl_stmt int = decl_stmt int = if == = = decl_stmt int = decl_stmt int = decl_stmt int = new decl_stmt float = new : for = < ++ = if != = decl_stmt float = = decl_stmt org.apache.solr.search.DocSlice = new - if decl_stmt org.apache.solr.search.DocIterator = call org.apache.solr.search.DocSlice.iterator() call org.apache.solr.search.DocSlice.iterator() call org.apache.solr.search.DocSlice.iterator() call org.apache.solr.search.DocSlice.iterator() call org.apache.solr.search.DocSlice.iterator() while call DocIterator.hasNext() call DocIterator.hasNext() call DocIterator.hasNext() call DocIterator.hasNext() call DocIterator.hasNext() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() return protected protected int decl float int decl int decl List int decl GroupDocs decl List float DocSlice protected protected decl_stmt GroupDocs = != : new decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> decl_stmt int = decl_stmt int = decl_stmt float = for : = for : if >= break break call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() ++ decl_stmt int = > - : decl_stmt int = call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt float = call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.solr.search.DocSlice = new if for = < ++ call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return private private if || > return else return protected protected throws = protected protected throws if <= = new return = == : = new return Sort int protected protected throws if <= = new return == : = == : if == if == = new = new return else = new return decl_stmt int = = decl_stmt org.apache.lucene.search.Sort = != : = new if == = new return else return Sort public < public < throws decl_stmt org.apache.lucene.search.Sort = != : return List NamedList NamedList String SchemaField IndexableField FieldType protected protected throws = != : if = return decl_stmt org.apache.solr.common.util.NamedList = if == call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) return decl_stmt java.util.List = new call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) if == return if == return for < : decl_stmt org.apache.solr.common.util.NamedList = new call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) if != decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() decl_stmt org.apache.solr.schema.FieldType = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() decl_stmt java.lang.String = call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) decl_stmt org.apache.lucene.index.IndexableField = call org.apache.solr.schema.SchemaField.createField(Object,float) call org.apache.solr.schema.SchemaField.createField(Object,float) call org.apache.solr.schema.SchemaField.createField(Object,float) call org.apache.solr.schema.SchemaField.createField(Object,float) call org.apache.solr.schema.SchemaField.createField(Object,float) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) else call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) public public if == && == return return != : protected protected return == : protected protected throws = DocSet protected protected throws decl_stmt org.apache.solr.search.DocSet = call org.apache.solr.search.SolrIndexSearcher.getDocSet(List) call org.apache.solr.search.SolrIndexSearcher.getDocSet(List) call org.apache.solr.search.SolrIndexSearcher.getDocSet(List) call org.apache.solr.search.SolrIndexSearcher.getDocSet(List) call org.apache.solr.search.SolrIndexSearcher.getDocSet(List) = = new return int throws decl_stmt int = if == || return else return call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) TopDocsCollector TopDocs NamedList decl GroupDocs protected protected throws decl_stmt org.apache.lucene.search.TopDocsCollector = decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) call org.apache.lucene.search.TopDocsCollector.topDocs(int,int) decl_stmt GroupDocs < = new <> call TopDocs.getMaxScore() call TopDocs.getMaxScore() call TopDocs.getMaxScore() call TopDocs.getMaxScore() call TopDocs.getMaxScore() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() if = else decl_stmt org.apache.solr.common.util.NamedList = public public return protected protected throws = = protected protected throws if <= = new return = == : = new call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) return int Sort protected protected throws if <= = new return == : = == : if == if == = new = new return else = new return decl_stmt int = = decl_stmt org.apache.lucene.search.Sort = != : = new if == = new return else return Sort public < public < throws decl_stmt org.apache.lucene.search.Sort = != : return new List NamedList NamedList protected protected throws = != : if = return decl_stmt org.apache.solr.common.util.NamedList = if == call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) return decl_stmt java.util.List = new call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) if == return if == return for < : decl_stmt org.apache.solr.common.util.NamedList = new call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) public public if == && == return return != : protected protected return == :