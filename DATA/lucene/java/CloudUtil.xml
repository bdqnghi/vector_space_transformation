org.apache.solr.cloud java.io.File import java.io.IOException import java.lang.invoke.MethodHandles import java.util.Collections import java.util.HashMap import java.util.List import java.util.Map import org.apache.commons.io.FileUtils import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.core.CoreContainer import org.apache.solr.core.CoreDescriptor import org.apache.solr.core.SolrResourceLoader import org.apache.zookeeper.KeeperException import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.cloud.CloudUtil Logger String String String decl Map String ZkController public static public static decl_stmt org.apache.solr.cloud.ZkController = decl_stmt java.lang.String = call org.apache.solr.cloud.ZkController.getCoreNodeName(CoreDescriptor) call org.apache.solr.cloud.ZkController.getCoreNodeName(CoreDescriptor) call org.apache.solr.cloud.ZkController.getCoreNodeName(CoreDescriptor) call org.apache.solr.cloud.ZkController.getCoreNodeName(CoreDescriptor) call org.apache.solr.cloud.ZkController.getCoreNodeName(CoreDescriptor) decl_stmt java.lang.String = call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() decl_stmt java.util.Map < = call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() if != for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : decl_stmt java.lang.String = decl_stmt java.lang.String = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() if != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if try catch + + + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() new + + throw new + + public static public static return instanceof + : + decl Map decl List public static < public static < decl_stmt java.util.Map < = new <> try decl_stmt java.util.List < = + for : if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + + + catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return catch throw new catch throw new return