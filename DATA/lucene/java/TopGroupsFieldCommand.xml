org.apache.solr.search.grouping.distributed.command org.apache.lucene.queries.function.ValueSource import org.apache.lucene.search.Collector import org.apache.lucene.search.Sort import org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector import org.apache.lucene.search.grouping.GroupDocs import org.apache.lucene.search.grouping.SearchGroup import org.apache.lucene.search.grouping.TopGroups import org.apache.lucene.search.grouping.function.FunctionSecondPassGroupingCollector import org.apache.lucene.search.grouping.term.TermSecondPassGroupingCollector import org.apache.lucene.util.BytesRef import org.apache.lucene.util.mutable.MutableValue import org.apache.solr.schema.FieldType import org.apache.solr.schema.SchemaField import org.apache.solr.search.grouping.Command import java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.List import class org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand super super implements int Sort decl Collection Sort SchemaField boolean boolean AbstractSecondPassGroupingCollector public public = return public public = return public public = return public public < < = return public public = return public public = return public public = return public public if == || == || == || == || == throw new return new ValueSource FieldType decl List decl Collection public < public < throws if call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() return decl_stmt java.util.List final final final < = new <> decl_stmt org.apache.solr.schema.FieldType final final = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() if call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() != decl_stmt org.apache.lucene.queries.function.ValueSource = call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) decl_stmt java.util.Collection < < = = new new < else = new call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return FieldType public < public < if call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() return new <> call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() new decl_stmt org.apache.solr.schema.FieldType = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() if call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() != return call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) else return call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) call org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int) public public return call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() public public return public public return