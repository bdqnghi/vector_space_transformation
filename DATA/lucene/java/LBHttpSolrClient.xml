org.apache.solr.client.solrj.impl java.io.IOException import java.lang.ref.WeakReference import java.net.ConnectException import java.net.MalformedURLException import java.net.SocketException import java.net.SocketTimeoutException import java.net.URL import java.util.ArrayList import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.Executors import java.util.concurrent.ScheduledExecutorService import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import org.apache.http.client.HttpClient import org.apache.solr.client.solrj.ResponseParser import org.apache.solr.client.solrj.SolrClient import org.apache.solr.client.solrj.SolrQuery import org.apache.solr.client.solrj.SolrRequest import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.request.IsUpdateRequest import org.apache.solr.client.solrj.request.RequestWriter import org.apache.solr.client.solrj.response.QueryResponse import org.apache.solr.common.SolrException import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SolrjNamedThreadFactory import org.slf4j.MDC import class org.apache.solr.client.solrj.impl.LBHttpSolrClient super super extends ResponseParser int ScheduledExecutorService decl Map AtomicInteger Integer decl Set int int boolean decl ServerWrapper Integer decl Map RequestWriter SolrQuery decl Set HttpClient public public return public public return public public return public public if == return if ! instanceof return return public public return public < public < return public public return public public = public < public < return public public return public < public < return public public < = public public public static public static if = - return HttpSolrClient protected protected decl_stmt org.apache.solr.client.solrj.impl.HttpSolrClient = new if != call org.apache.solr.client.solrj.impl.HttpSolrClient.setConnectionTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setConnectionTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setConnectionTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setConnectionTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setConnectionTimeout(int) if != call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) if != call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) if != call org.apache.solr.client.solrj.impl.HttpSolrClient.setQueryParams(Set) call org.apache.solr.client.solrj.impl.HttpSolrClient.setQueryParams(Set) call org.apache.solr.client.solrj.impl.HttpSolrClient.setQueryParams(Set) call org.apache.solr.client.solrj.impl.HttpSolrClient.setQueryParams(Set) call org.apache.solr.client.solrj.impl.HttpSolrClient.setQueryParams(Set) return decl List long ServerWrapper HttpSolrClient Exception long boolean Rsp int public public throws decl_stmt Rsp = new decl_stmt Exception = decl_stmt boolean = instanceof decl_stmt java.util.List < = decl_stmt long = decl_stmt long = + for : if break = decl_stmt ServerWrapper = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != decl_stmt int final final = if > if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() continue = try decl_stmt org.apache.solr.client.solrj.impl.HttpSolrClient = = if == return finally if != for : if break = call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() if == return if == throw new else throw new + call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() ServerWrapper protected protected decl_stmt ServerWrapper = new = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() return Throwable Exception protected protected throws decl_stmt Exception = try = if call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() catch if ! && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() = ! : else if call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() throw catch if ! || instanceof = ! : else throw catch if ! = ! : else throw catch decl_stmt java.lang.Throwable = if ! && instanceof = ! : else if && instanceof = ! : else throw catch throw new return private private synchronized = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() new call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() ServerWrapper private private synchronized decl_stmt ServerWrapper = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != return ServerWrapper private private synchronized decl_stmt ServerWrapper = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() HttpSolrClient public public throws decl_stmt org.apache.solr.client.solrj.impl.HttpSolrClient = new public public try = new catch throw new if = - call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() return decl Iterator public public = synchronized decl_stmt java.util.Iterator < = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.util.Iterator < = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl Iterator public public = synchronized decl_stmt java.util.Iterator < = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.util.Iterator < = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() public public if != call ScheduledExecutorService.shutdownNow() call ScheduledExecutorService.shutdownNow() call ScheduledExecutorService.shutdownNow() call ScheduledExecutorService.shutdownNow() call ScheduledExecutorService.shutdownNow() if int long ServerWrapper Exception decl Map long decl ServerWrapper decl NamedList int public < public < final final throws decl_stmt Exception = decl_stmt ServerWrapper = decl_stmt int = decl_stmt java.util.Map < = decl_stmt long = decl_stmt long = + for = < ++ if break decl_stmt int = call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() & decl_stmt ServerWrapper = try return call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() catch throw catch if instanceof = if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() else throw catch throw new for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if break if == || != && call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() continue try decl_stmt org.apache.solr.common.util.NamedList < = call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call ServerWrapper.client() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() call ServerWrapper.getKey() return catch throw catch if instanceof = else throw catch throw new if == throw new else throw new SolrParams private private final final decl_stmt org.apache.solr.common.params.SolrParams = return == - : call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) - private private return > && > QueryResponse ServerWrapper private private try decl_stmt org.apache.solr.client.solrj.response.QueryResponse = if call QueryResponse.getStatus() call QueryResponse.getStatus() call QueryResponse.getStatus() call QueryResponse.getStatus() call QueryResponse.getStatus() == decl_stmt ServerWrapper = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != = if else catch ++ if ! && >= call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() private private = if == return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public if <= throw new + + = private private if == synchronized if == = new call java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable,long,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable,long,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable,long,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable,long,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable,long,long,TimeUnit) new <> LBHttpSolrClient private static private static final final final < return decl_stmt org.apache.solr.client.solrj.impl.LBHttpSolrClient = if != && != for : call LBHttpSolrClient.zombieServers() call LBHttpSolrClient.zombieServers() call LBHttpSolrClient.zombieServers() call LBHttpSolrClient.zombieServers() call LBHttpSolrClient.zombieServers() call LBHttpSolrClient.zombieServers() call LBHttpSolrClient.zombieServers() call LBHttpSolrClient.zombieServers() call LBHttpSolrClient.zombieServers() call org.apache.solr.client.solrj.impl.LBHttpSolrClient.checkAZombieServer(ServerWrapper) call org.apache.solr.client.solrj.impl.LBHttpSolrClient.checkAZombieServer(ServerWrapper) call org.apache.solr.client.solrj.impl.LBHttpSolrClient.checkAZombieServer(ServerWrapper) call org.apache.solr.client.solrj.impl.LBHttpSolrClient.checkAZombieServer(ServerWrapper) call org.apache.solr.client.solrj.impl.LBHttpSolrClient.checkAZombieServer(ServerWrapper) public public return public public return public public = public public = public public return protected protected throws try if != finally public public return public public for : return public public = return public public = return decl String public public decl_stmt java.lang.String final final final = new return new