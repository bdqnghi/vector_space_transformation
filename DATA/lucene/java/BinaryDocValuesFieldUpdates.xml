org.apache.lucene.index org.apache.lucene.document.BinaryDocValuesField import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.InPlaceMergeSorter import org.apache.lucene.util.packed.PackedInts import org.apache.lucene.util.packed.PagedGrowableWriter import org.apache.lucene.util.packed.PagedMutable import class org.apache.lucene.index.BinaryDocValuesFieldUpdates super super extends BytesRefBuilder PagedMutable int int PagedGrowableWriter = = return long if >= = - return = = int call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() ++ while < && call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() == ++ decl_stmt long = - = int call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() = int call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() return return = - = - = BytesRef public public if == throw new decl_stmt org.apache.lucene.util.BytesRef = if call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() == = call PagedMutable.grow() call PagedMutable.grow() call PagedMutable.grow() call PagedMutable.grow() call PagedMutable.grow() + = call PagedGrowableWriter.grow() call PagedGrowableWriter.grow() call PagedGrowableWriter.grow() call PagedGrowableWriter.grow() call PagedGrowableWriter.grow() + = call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) + call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call int.length() call int.length() call int.length() call int.length() call int.length() call BytesRefBuilder.set() call BytesRefBuilder.set() call BytesRefBuilder.set() call BytesRefBuilder.set() call BytesRefBuilder.set() call int.append() call int.append() call int.append() call int.append() call int.append() ++ PagedGrowableWriter PagedGrowableWriter PagedMutable long long BytesRef int int long public public decl_stmt org.apache.lucene.util.packed.PagedMutable final final = decl_stmt org.apache.lucene.util.packed.PagedGrowableWriter final final = decl_stmt org.apache.lucene.util.packed.PagedGrowableWriter final final = decl_stmt org.apache.lucene.util.BytesRef final final = new protected protected decl_stmt long = call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() decl_stmt long = call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() decl_stmt long = call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() protected protected decl_stmt int = int call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() decl_stmt int = int call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() return < - : == : return new long long long protected protected decl_stmt long = call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() decl_stmt long = call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() decl_stmt long = call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call BytesRefBuilder.set() call BytesRefBuilder.set() call BytesRefBuilder.set() call BytesRefBuilder.set() call BytesRefBuilder.set() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call BytesRefBuilder.set() call BytesRefBuilder.set() call BytesRefBuilder.set() call BytesRefBuilder.set() call BytesRefBuilder.set() int int protected protected decl_stmt int = int call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() decl_stmt int = int call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() return < - : == : int int BinaryDocValuesFieldUpdates public public decl_stmt org.apache.lucene.index.BinaryDocValuesFieldUpdates = if > - throw new + + + decl_stmt int final final = + = call PagedMutable.grow() call PagedMutable.grow() call PagedMutable.grow() call PagedMutable.grow() call PagedMutable.grow() = call PagedGrowableWriter.grow() call PagedGrowableWriter.grow() call PagedGrowableWriter.grow() call PagedGrowableWriter.grow() call PagedGrowableWriter.grow() = call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) for = < ++ decl_stmt int = int call BinaryDocValuesFieldUpdates.docs() call BinaryDocValuesFieldUpdates.docs() call BinaryDocValuesFieldUpdates.docs() call BinaryDocValuesFieldUpdates.docs() call BinaryDocValuesFieldUpdates.docs() call BinaryDocValuesFieldUpdates.docs() call BinaryDocValuesFieldUpdates.docs() call BinaryDocValuesFieldUpdates.docs() call BinaryDocValuesFieldUpdates.docs() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call int.length() call int.length() call int.length() call int.length() call int.length() + call BinaryDocValuesFieldUpdates.offsets() call BinaryDocValuesFieldUpdates.offsets() call BinaryDocValuesFieldUpdates.offsets() call BinaryDocValuesFieldUpdates.offsets() call BinaryDocValuesFieldUpdates.offsets() call BinaryDocValuesFieldUpdates.offsets() call BinaryDocValuesFieldUpdates.offsets() call BinaryDocValuesFieldUpdates.offsets() call BinaryDocValuesFieldUpdates.offsets() call BytesRefBuilder.set() call BytesRefBuilder.set() call BytesRefBuilder.set() call BytesRefBuilder.set() call BytesRefBuilder.set() call BinaryDocValuesFieldUpdates.lengths() call BinaryDocValuesFieldUpdates.lengths() call BinaryDocValuesFieldUpdates.lengths() call BinaryDocValuesFieldUpdates.lengths() call BinaryDocValuesFieldUpdates.lengths() call BinaryDocValuesFieldUpdates.lengths() call BinaryDocValuesFieldUpdates.lengths() call BinaryDocValuesFieldUpdates.lengths() call BinaryDocValuesFieldUpdates.lengths() ++ call int.append() call int.append() call int.append() call int.append() call int.append() public public return > int long public public decl_stmt long = long / decl_stmt int final final = += long double call PagedGrowableWriter.ramBytesUsed() call PagedGrowableWriter.ramBytesUsed() call PagedGrowableWriter.ramBytesUsed() call PagedGrowableWriter.ramBytesUsed() call PagedGrowableWriter.ramBytesUsed() / += long double call BytesRefBuilder.ramBytesUsed() call BytesRefBuilder.ramBytesUsed() call BytesRefBuilder.ramBytesUsed() call BytesRefBuilder.ramBytesUsed() call BytesRefBuilder.ramBytesUsed() / += long double call int.length() call int.length() call int.length() call int.length() call int.length() / return