org.apache.lucene.analysis.ja.dict java.io.BufferedReader import java.io.IOException import java.io.Reader import java.util.ArrayList import java.util.Collections import java.util.Comparator import java.util.List import java.util.Map import java.util.TreeMap import org.apache.lucene.analysis.ja.util.CSVUtil import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.fst.Builder import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.PositiveIntOutputs import class org.apache.lucene.analysis.ja.dict.UserDictionary super super implements int int String TokenInfoFST int int decl int decl String String decl List BufferedReader public static public static throws decl_stmt java.io.BufferedReader = new decl_stmt java.lang.String = decl_stmt java.util.List < = new <> while = call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) != = call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) if call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() == continue decl_stmt java.lang.String = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return else return new public public return int decl FST decl FST int decl BytesReader decl TreeMap int boolean int public public throws decl_stmt java.util.TreeMap < = new <> decl_stmt boolean = decl_stmt BytesReader final final final final final = call org.apache.lucene.analysis.ja.dict.TokenInfoFST.getBytesReader() call org.apache.lucene.analysis.ja.dict.TokenInfoFST.getBytesReader() call org.apache.lucene.analysis.ja.dict.TokenInfoFST.getBytesReader() call org.apache.lucene.analysis.ja.dict.TokenInfoFST.getBytesReader() call org.apache.lucene.analysis.ja.dict.TokenInfoFST.getBytesReader() decl_stmt org.apache.lucene.util.fst.FST < = new <> decl_stmt int = + for = < ++ = call TokenInfoFST.getFirstArc() call TokenInfoFST.getFirstArc() call TokenInfoFST.getFirstArc() call TokenInfoFST.getFirstArc() call TokenInfoFST.getFirstArc() decl_stmt int = decl_stmt int = - for = < ++ decl_stmt int = + if call org.apache.lucene.analysis.ja.dict.TokenInfoFST.findTargetArc(int,FST,FST,boolean,FST,BytesReader) call org.apache.lucene.analysis.ja.dict.TokenInfoFST.findTargetArc(int,FST,FST,boolean,FST,BytesReader) call org.apache.lucene.analysis.ja.dict.TokenInfoFST.findTargetArc(int,FST,FST,boolean,FST,BytesReader) call org.apache.lucene.analysis.ja.dict.TokenInfoFST.findTargetArc(int,FST,FST,boolean,FST,BytesReader) call org.apache.lucene.analysis.ja.dict.TokenInfoFST.findTargetArc(int,FST,FST,boolean,FST,BytesReader) == == break += call decl BytesReader.output() call decl BytesReader.output() call decl BytesReader.output() call decl BytesReader.output() call decl BytesReader.output() call decl BytesReader.output() call decl BytesReader.output() call decl BytesReader.output() call decl BytesReader.output() if call decl BytesReader.isFinal() call decl BytesReader.isFinal() call decl BytesReader.isFinal() call decl BytesReader.isFinal() call decl BytesReader.isFinal() decl_stmt int final final = + call decl BytesReader.nextFinalOutput() call decl BytesReader.nextFinalOutput() call decl BytesReader.nextFinalOutput() call decl BytesReader.nextFinalOutput() call decl BytesReader.nextFinalOutput() call decl BytesReader.nextFinalOutput() call decl BytesReader.nextFinalOutput() call decl BytesReader.nextFinalOutput() call decl BytesReader.nextFinalOutput() call decl TreeMap.put() call decl TreeMap.put() call decl TreeMap.put() call decl TreeMap.put() call decl TreeMap.put() - = return : public public return int decl int decl int decl ArrayList int private private < decl_stmt java.util.ArrayList < = new <> for : decl_stmt int = decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = + - call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() += return call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return String private private decl_stmt java.lang.String = - if == return return call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) StringBuilder decl String private private decl_stmt java.lang.String = if == return decl_stmt java.lang.StringBuilder = new if == for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.deleteCharAt(int) call java.lang.StringBuilder.deleteCharAt(int) call java.lang.StringBuilder.deleteCharAt(int) call java.lang.StringBuilder.deleteCharAt(int) call java.lang.StringBuilder.deleteCharAt(int) call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() -