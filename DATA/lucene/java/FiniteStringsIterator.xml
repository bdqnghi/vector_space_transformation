org.apache.lucene.util.automaton org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.RamUsageEstimator import java.util.BitSet import class org.apache.lucene.util.automaton.FiniteStringsIterator Automaton BitSet boolean IntsRefBuilder decl PathNode IntsRef PathNode int int int public public if = return for = call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() > decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.PathNode = - decl_stmt int = call PathNode.nextLabel() call PathNode.nextLabel() call PathNode.nextLabel() call PathNode.nextLabel() call PathNode.nextLabel() if != - call org.apache.lucene.util.IntsRefBuilder.setIntAt(int,int) call org.apache.lucene.util.IntsRefBuilder.setIntAt(int,int) call org.apache.lucene.util.IntsRefBuilder.setIntAt(int,int) call org.apache.lucene.util.IntsRefBuilder.setIntAt(int,int) call org.apache.lucene.util.IntsRefBuilder.setIntAt(int,int) - decl_stmt int = if call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) != if call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) throw new call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) ++ call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call org.apache.lucene.util.IntsRefBuilder.grow(int) call org.apache.lucene.util.IntsRefBuilder.grow(int) call org.apache.lucene.util.IntsRefBuilder.grow(int) call org.apache.lucene.util.IntsRefBuilder.grow(int) call org.apache.lucene.util.IntsRefBuilder.grow(int) else if call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) return call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() else decl_stmt int = assert call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.clear(int) call java.util.BitSet.clear(int) call java.util.BitSet.clear(int) call java.util.BitSet.clear(int) call java.util.BitSet.clear(int) -- call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() call IntsRefBuilder.setLength() if call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) return call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() return decl PathNode private private if == decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.PathNode = new + for = = < ++ = new = public public assert call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) != = = call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) = = public public if > ++ if >= call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) call org.apache.lucene.util.automaton.Automaton.getNumTransitions(int) = - return - call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) call org.apache.lucene.util.automaton.Automaton.getTransition(int,int,Transition) = = return ++