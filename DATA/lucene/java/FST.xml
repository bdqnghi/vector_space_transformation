org.apache.lucene.util.fst java.io.BufferedInputStream import java.io.BufferedOutputStream import java.io.IOException import java.io.InputStream import java.io.OutputStream import java.nio.file.Files import java.nio.file.Path import java.util.ArrayList import java.util.Collection import java.util.HashMap import java.util.List import java.util.Map import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.store.ByteArrayDataOutput import org.apache.lucene.store.DataInput import org.apache.lucene.store.DataOutput import org.apache.lucene.store.InputStreamDataInput import org.apache.lucene.store.OutputStreamDataOutput import org.apache.lucene.store.RAMOutputStream import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.Constants import org.apache.lucene.util.PriorityQueue import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.packed.GrowableWriter import org.apache.lucene.util.packed.PackedInts import class super super implements int int int int INPUT_TYPE boolean int int GrowableWriter int decl Arc int decl Reader GrowableWriter int int int byte int decl PackedInts long decl Outputs decl byte int long int int int String long int long BytesStore int T long int int public < public < < = = = = = = = = if != = = = return return public public return public public return StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + + + return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() private static private static return & != public public return long private private < decl_stmt long = if != += for < : if != += if != && != call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() += call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() if != && != call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() += call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() return long public public decl_stmt long = if != += else += call org.apache.lucene.util.fst.BytesStore.ramBytesUsed() call org.apache.lucene.util.fst.BytesStore.ramBytesUsed() call org.apache.lucene.util.fst.BytesStore.ramBytesUsed() call org.apache.lucene.util.fst.BytesStore.ramBytesUsed() call org.apache.lucene.util.fst.BytesStore.ramBytesUsed() if += call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() else if != += call decl Arc.ramBytesUsed() call decl Arc.ramBytesUsed() call decl Arc.ramBytesUsed() call decl Arc.ramBytesUsed() call decl Arc.ramBytesUsed() += call org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed() call org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed() call org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed() call org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed() call org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed() += return decl List public < public < decl_stmt java.util.List < = new <> if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return + + + + + + throws assert <= call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() if != - throw new if == && != = = call org.apache.lucene.util.fst.BytesStore.finish() call org.apache.lucene.util.fst.BytesStore.finish() call org.apache.lucene.util.fst.BytesStore.finish() call org.apache.lucene.util.fst.BytesStore.finish() call org.apache.lucene.util.fst.BytesStore.finish() private private if != return call decl Arc.get() call decl Arc.get() call decl Arc.get() call decl Arc.get() call decl Arc.get() int else return int decl Arc int BytesReader private private throws assert == decl_stmt Arc final final final < = new <> if decl_stmt BytesReader final final = decl_stmt BytesReader final final = decl_stmt int = while assert != if < = new < else break if call decl Arc.isLast() call decl Arc.isLast() call decl Arc.isLast() call decl Arc.isLast() call decl Arc.isLast() break ++ decl_stmt int = int if >= && < / = = public public return throws if != = call decl Outputs.merge() call decl Outputs.merge() call decl Outputs.merge() call decl Outputs.merge() call decl Outputs.merge() else = int byte long decl byte byte int RAMOutputStream public public throws if == - throw new if != throw new if && ! instanceof throw new if byte else byte if != byte decl_stmt org.apache.lucene.store.RAMOutputStream = new call decl Outputs.writeFinalOutput() call decl Outputs.writeFinalOutput() call decl Outputs.writeFinalOutput() call decl Outputs.writeFinalOutput() call decl Outputs.writeFinalOutput() decl_stmt byte = new int call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) if ! decl_stmt int final final = / decl_stmt int = while < decl_stmt byte final final = = - - - - = ++ else byte decl_stmt byte final final if == = else if == = else = if if != decl_stmt long = call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.writeTo(DataOutput) call org.apache.lucene.util.fst.BytesStore.writeTo(DataOutput) call org.apache.lucene.util.fst.BytesStore.writeTo(DataOutput) call org.apache.lucene.util.fst.BytesStore.writeTo(DataOutput) call org.apache.lucene.util.fst.BytesStore.writeTo(DataOutput) else assert != public public final final throws try = new new public static < < public static < < < throws try = return new <> new new private private throws assert >= : + if == assert <= : + byte else if == assert <= : + short else int public public throws decl_stmt int final final if == = & else if == = & else = return public static < public static < < return > long T boolean long int byte long int int decl Builder decl CompiledNode boolean int long long int long ByteArrayDataOutput decl Builder < < throws decl_stmt T = call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() if == if return else return decl_stmt long final final = decl_stmt boolean final final = if if < = new += decl_stmt int final final = - decl_stmt long = decl_stmt int = for = < ++ decl_stmt org.apache.lucene.util.fst.Builder final final final final final final final < = decl_stmt CompiledNode final final final final final = decl_stmt int = if == += if == && ! += if += if != += else assert == decl_stmt boolean = > if ! += else if != call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) int call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) int + if != += byte if != call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() if != call decl Outputs.writeFinalOutput() call decl Outputs.writeFinalOutput() call decl Outputs.writeFinalOutput() call decl Outputs.writeFinalOutput() call decl Outputs.writeFinalOutput() if && & == assert > if = - = = if decl_stmt int final final = assert > decl_stmt byte = new decl_stmt org.apache.lucene.store.ByteArrayDataOutput = new call byte.writeByte() call byte.writeByte() call byte.writeByte() call byte.writeByte() call byte.writeByte() call byte.writeVInt() call byte.writeVInt() call byte.writeVInt() call byte.writeVInt() call byte.writeVInt() call byte.writeVInt() call byte.writeVInt() call byte.writeVInt() call byte.writeVInt() call byte.writeVInt() decl_stmt int = call byte.getPosition() call byte.getPosition() call byte.getPosition() call byte.getPosition() call byte.getPosition() decl_stmt long final final = + decl_stmt long = decl_stmt long = + * assert >= if > - for = - >= -- -= -= if != assert > : + + + + + + + + + + + decl_stmt long final final = - if != && == throw new ++ decl_stmt long final final if != if int == call decl Arc.size() call decl Arc.size() call decl Arc.size() call decl Arc.size() call decl Arc.size() = call decl Arc.resize() call decl Arc.resize() call decl Arc.resize() call decl Arc.resize() call decl Arc.resize() call decl Arc.size() call decl Arc.size() call decl Arc.size() call decl Arc.size() call decl Arc.size() + call decl Arc.getBitsPerValue() call decl Arc.getBitsPerValue() call decl Arc.getBitsPerValue() call decl Arc.getBitsPerValue() call decl Arc.getBitsPerValue() = call org.apache.lucene.util.packed.GrowableWriter.resize(int) call org.apache.lucene.util.packed.GrowableWriter.resize(int) call org.apache.lucene.util.packed.GrowableWriter.resize(int) call org.apache.lucene.util.packed.GrowableWriter.resize(int) call org.apache.lucene.util.packed.GrowableWriter.resize(int) call org.apache.lucene.util.packed.GrowableWriter.size() call org.apache.lucene.util.packed.GrowableWriter.size() call org.apache.lucene.util.packed.GrowableWriter.size() call org.apache.lucene.util.packed.GrowableWriter.size() call org.apache.lucene.util.packed.GrowableWriter.size() + call GrowableWriter.getBitsPerValue() call GrowableWriter.getBitsPerValue() call GrowableWriter.getBitsPerValue() call GrowableWriter.getBitsPerValue() call GrowableWriter.getBitsPerValue() call decl Arc.set() call decl Arc.set() call decl Arc.set() call decl Arc.set() call decl Arc.set() int = else = return T public < public < < decl_stmt T = call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() if != = | = if != |= else = = = = return byte public < public < < < throws if ! assert = = = = return else = decl_stmt byte final final = if == = if || >= = else = = = - else = = while ! if call decl Outputs.skipOutput() call decl Outputs.skipOutput() call decl Outputs.skipOutput() call decl Outputs.skipOutput() call decl Outputs.skipOutput() if call decl Outputs.skipFinalOutput() call decl Outputs.skipFinalOutput() call decl Outputs.skipFinalOutput() call decl Outputs.skipFinalOutput() call decl Outputs.skipFinalOutput() if else if else if else = - = assert return long private private throws decl_stmt long if < = else = return public < public < < < throws if = = = if <= |= else = = = return else return long public < public < < final final throws decl_stmt long final final = = if == = if || >= = else = = - = = else = = return < throws if ! return else return == public < public < < throws if == if <= throw new return else return byte long public public < throws assert ! if == decl_stmt long = decl_stmt byte final final = if == if || >= else else else if != + * else return long long public < public < < final final throws if != ++ assert < * else = = if = call decl Outputs.read() call decl Outputs.read() call decl Outputs.read() call decl Outputs.read() call decl Outputs.read() else = call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() if = call decl Outputs.readFinalOutput() call decl Outputs.readFinalOutput() call decl Outputs.readFinalOutput() call decl Outputs.readFinalOutput() call decl Outputs.readFinalOutput() else = call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() if if = else = = else if = if == if ! if == else * = else = - assert > else if decl_stmt long final final = decl_stmt long final final = if = + else if < call decl PackedInts.size() call decl PackedInts.size() call decl PackedInts.size() call decl PackedInts.size() call decl PackedInts.size() = call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() int else = else = = return decl Arc decl Arc BytesReader private private < throws decl_stmt Arc < = new <> decl_stmt BytesReader = decl_stmt Arc < = if == assert == else assert != assert == assert == assert == assert == assert == assert assert == assert == assert assert == assert == return public < public < < < throws return int int int decl Arc int int private < private < < < throws if == if if <= = else = = = = = return else return if && != && == && < decl_stmt Arc final final final < = assert if == return else return if ! return = if == = if || >= = else = = decl_stmt int = decl_stmt int = - while <= decl_stmt int = + >>> * + decl_stmt int = decl_stmt int final final = - if < = + else if > = - else = - return return while if == return else if > return else if return else int private private throws while decl_stmt int final final = if call decl Outputs.skipOutput() call decl Outputs.skipOutput() call decl Outputs.skipOutput() call decl Outputs.skipOutput() call decl Outputs.skipOutput() if call decl Outputs.skipFinalOutput() call decl Outputs.skipFinalOutput() call decl Outputs.skipFinalOutput() call decl Outputs.skipFinalOutput() call decl Outputs.skipFinalOutput() if ! && ! if else if return private private < < return && <= && >= || >= public public if if != return new else return call org.apache.lucene.util.fst.BytesStore.getForwardReader() call org.apache.lucene.util.fst.BytesStore.getForwardReader() call org.apache.lucene.util.fst.BytesStore.getForwardReader() call org.apache.lucene.util.fst.BytesStore.getForwardReader() call org.apache.lucene.util.fst.BytesStore.getForwardReader() else if != return new else return call org.apache.lucene.util.fst.BytesStore.getReverseReader() call org.apache.lucene.util.fst.BytesStore.getReverseReader() call org.apache.lucene.util.fst.BytesStore.getReverseReader() call org.apache.lucene.util.fst.BytesStore.getReverseReader() call org.apache.lucene.util.fst.BytesStore.getReverseReader() int int T long long decl Arc decl PackedInts Integer boolean boolean NodeAndInCount long BytesStore boolean int GrowableWriter byte int int decl Map boolean boolean int int long int int long boolean long NodeAndInCount NodeQueue int BytesReader decl FST < < < throws if == throw new decl_stmt T = call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() decl_stmt Arc < = new <> decl_stmt BytesReader final final = decl_stmt int final final = call org.apache.lucene.util.packed.GrowableWriter.size() call org.apache.lucene.util.packed.GrowableWriter.size() call org.apache.lucene.util.packed.GrowableWriter.size() call org.apache.lucene.util.packed.GrowableWriter.size() call org.apache.lucene.util.packed.GrowableWriter.size() decl_stmt NodeQueue = new decl_stmt NodeAndInCount = for = < call org.apache.lucene.util.packed.GrowableWriter.size() call org.apache.lucene.util.packed.GrowableWriter.size() call org.apache.lucene.util.packed.GrowableWriter.size() call org.apache.lucene.util.packed.GrowableWriter.size() call org.apache.lucene.util.packed.GrowableWriter.size() ++ if call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) >= if == call NodeQueue.add() call NodeQueue.add() call NodeQueue.add() call NodeQueue.add() call NodeQueue.add() new int call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) if call NodeQueue.size() call NodeQueue.size() call NodeQueue.size() call NodeQueue.size() call NodeQueue.size() == = call NodeQueue.top() call NodeQueue.top() call NodeQueue.top() call NodeQueue.top() call NodeQueue.top() else if call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) > call NodeQueue.insertWithOverflow() call NodeQueue.insertWithOverflow() call NodeQueue.insertWithOverflow() call NodeQueue.insertWithOverflow() call NodeQueue.insertWithOverflow() new int call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) = decl_stmt java.util.Map final final final < = new <> for = call NodeQueue.size() call NodeQueue.size() call NodeQueue.size() call NodeQueue.size() call NodeQueue.size() - >= -- decl_stmt NodeAndInCount = call NodeQueue.pop() call NodeQueue.pop() call NodeQueue.pop() call NodeQueue.pop() call NodeQueue.pop() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.lucene.util.packed.GrowableWriter final final = new + for = <= ++ call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) + - call decl Arc.get() call decl Arc.get() call decl Arc.get() call decl Arc.get() call decl Arc.get() decl_stmt int decl_stmt int decl_stmt int decl_stmt int decl_stmt org.apache.lucene.util.fst.FST < while decl_stmt boolean = decl_stmt boolean = = new <> decl_stmt org.apache.lucene.util.fst.BytesStore final final = call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) byte = = = = decl_stmt int = decl_stmt long = for = int >= -- decl_stmt long final final = call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() if != call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) = - call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) = call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) ++ decl_stmt int = decl_stmt int = decl_stmt boolean = decl_stmt boolean = while decl_stmt boolean final final = != if if == = call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call BytesStore.writeVInt() call BytesStore.writeVInt() call BytesStore.writeVInt() call BytesStore.writeVInt() call BytesStore.writeVInt() call BytesStore.writeVInt() call BytesStore.writeVInt() call BytesStore.writeVInt() call BytesStore.writeVInt() call BytesStore.writeVInt() decl_stmt int = while decl_stmt long final final = call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() ++ decl_stmt byte = if call decl Arc.isLast() call decl Arc.isLast() call decl Arc.isLast() call decl Arc.isLast() call decl Arc.isLast() += if ! && != && == - += if ! ++ if call decl Arc.isFinal() call decl Arc.isFinal() call decl Arc.isFinal() call decl Arc.isFinal() call decl Arc.isFinal() += if != += else assert == if ! += if != += decl_stmt long final final decl_stmt boolean final final = && & == if decl_stmt java.lang.Integer final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != = else = call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() + call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) int + decl_stmt long = call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) int + - call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() - if < = = if < |= else = assert != call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call decl FST.writeLabel() call decl FST.writeLabel() call decl FST.writeLabel() call decl FST.writeLabel() call decl FST.writeLabel() if != call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() if != call decl Outputs.writeFinalOutput() call decl Outputs.writeFinalOutput() call decl Outputs.writeFinalOutput() call decl Outputs.writeFinalOutput() call decl Outputs.writeFinalOutput() if decl_stmt long = call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) int + - call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() if < = = if call BytesStore.writeVLong() call BytesStore.writeVLong() call BytesStore.writeVLong() call BytesStore.writeVLong() call BytesStore.writeVLong() if ! ++ else call BytesStore.writeVLong() call BytesStore.writeVLong() call BytesStore.writeVLong() call BytesStore.writeVLong() call BytesStore.writeVLong() if ! if >= call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() ++ else ++ if decl_stmt int final final = call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() - = call org.apache.lucene.util.fst.BytesStore.skipBytes(long) call org.apache.lucene.util.fst.BytesStore.skipBytes(long) call org.apache.lucene.util.fst.BytesStore.skipBytes(long) call org.apache.lucene.util.fst.BytesStore.skipBytes(long) call org.apache.lucene.util.fst.BytesStore.skipBytes(long) + - call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() if call decl Arc.isLast() call decl Arc.isLast() call decl Arc.isLast() call decl Arc.isLast() call decl Arc.isLast() break if if == || && <= break else break = call org.apache.lucene.util.fst.BytesStore.truncate(long) call org.apache.lucene.util.fst.BytesStore.truncate(long) call org.apache.lucene.util.fst.BytesStore.truncate(long) call org.apache.lucene.util.fst.BytesStore.truncate(long) call org.apache.lucene.util.fst.BytesStore.truncate(long) = = = |= if ! assert ! break decl_stmt long = for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() = call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) int decl_stmt Mutable = call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) = = call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) int if != call decl FST.setEmptyOutput() call decl FST.setEmptyOutput() call decl FST.setEmptyOutput() call decl FST.setEmptyOutput() call decl FST.setEmptyOutput() call decl FST.bytes() call decl FST.bytes() call decl FST.bytes() call decl FST.bytes() call decl FST.bytes() call decl FST.bytes() call decl FST.bytes() call decl FST.bytes() call decl FST.bytes() call decl FST.cacheRootArcs() call decl FST.cacheRootArcs() call decl FST.cacheRootArcs() call decl FST.cacheRootArcs() call decl FST.cacheRootArcs() return public public if > return else if < return - else return - int public public decl_stmt int final final = assert != return <