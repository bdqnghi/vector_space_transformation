org.apache.lucene.search.join org.apache.lucene.index.DocValues import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.MultiDocValues import org.apache.lucene.index.SortedDocValues import org.apache.lucene.search.Collector import org.apache.lucene.search.LeafCollector import org.apache.lucene.search.Scorer import org.apache.lucene.util.LongBitSet import org.apache.lucene.util.LongValues import java.io.IOException import java.util.Arrays import class org.apache.lucene.search.join.GlobalOrdinalsWithScoreCollector super super implements decl MultiDocValues int int String boolean Scores LongBitSet decl OrdinalMap Occurrences int public public if call decl OrdinalMap.get() call decl OrdinalMap.get() call decl OrdinalMap.get() call decl OrdinalMap.get() call decl OrdinalMap.get() if decl_stmt int final final = call Scores.getOccurrence() call Scores.getOccurrence() call Scores.getOccurrence() call Scores.getOccurrence() call Scores.getOccurrence() return >= && <= else return return public public return call LongBitSet.getScore() call LongBitSet.getScore() call LongBitSet.getScore() call LongBitSet.getScore() call LongBitSet.getScore() LongValues SortedDocValues public public throws decl_stmt org.apache.lucene.index.SortedDocValues = if != decl_stmt org.apache.lucene.util.LongValues = call decl MultiDocValues.getGlobalOrds() call decl MultiDocValues.getGlobalOrds() call decl MultiDocValues.getGlobalOrds() call decl MultiDocValues.getGlobalOrds() call decl MultiDocValues.getGlobalOrds() return new else return new public public return float int float long public public throws decl_stmt long final final = if != - decl_stmt int final final = int call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() decl_stmt float = call LongBitSet.getScore() call LongBitSet.getScore() call LongBitSet.getScore() call LongBitSet.getScore() call LongBitSet.getScore() decl_stmt float = if != call Scores.increment() call Scores.increment() call Scores.increment() call Scores.increment() call Scores.increment() public public throws = float float int public public throws decl_stmt int final final = if != - call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() decl_stmt float = call LongBitSet.getScore() call LongBitSet.getScore() call LongBitSet.getScore() call LongBitSet.getScore() call LongBitSet.getScore() decl_stmt float = if != call Scores.increment() call Scores.increment() call Scores.increment() call Scores.increment() call Scores.increment() public public throws = protected protected call LongBitSet.setScore() call LongBitSet.setScore() call LongBitSet.setScore() call LongBitSet.setScore() call LongBitSet.setScore() protected protected return protected protected call LongBitSet.setScore() call LongBitSet.setScore() call LongBitSet.setScore() call LongBitSet.setScore() call LongBitSet.setScore() protected protected return protected protected call LongBitSet.setScore() call LongBitSet.setScore() call LongBitSet.setScore() call LongBitSet.setScore() call LongBitSet.setScore() + protected protected return protected protected call LongBitSet.setScore() call LongBitSet.setScore() call LongBitSet.setScore() call LongBitSet.setScore() call LongBitSet.setScore() + public public return call LongBitSet.getScore() call LongBitSet.getScore() call LongBitSet.getScore() call LongBitSet.getScore() call LongBitSet.getScore() / call Scores.getOccurrence() call Scores.getOccurrence() call Scores.getOccurrence() call Scores.getOccurrence() call Scores.getOccurrence() protected protected return LongValues int int SortedDocValues public public throws decl_stmt org.apache.lucene.index.SortedDocValues = if != decl_stmt org.apache.lucene.util.LongValues = call decl MultiDocValues.getGlobalOrds() call decl MultiDocValues.getGlobalOrds() call decl MultiDocValues.getGlobalOrds() call decl MultiDocValues.getGlobalOrds() call decl MultiDocValues.getGlobalOrds() return new public public throws public public throws decl_stmt long final final = call SortedDocValues.getOrd() call SortedDocValues.getOrd() call SortedDocValues.getOrd() call SortedDocValues.getOrd() call SortedDocValues.getOrd() if != - decl_stmt int final final = int call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call Scores.increment() call Scores.increment() call Scores.increment() call Scores.increment() call Scores.increment() else return new public public throws public public throws decl_stmt int final final = call SortedDocValues.getOrd() call SortedDocValues.getOrd() call SortedDocValues.getOrd() call SortedDocValues.getOrd() call SortedDocValues.getOrd() if != - call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call Scores.increment() call Scores.increment() call Scores.increment() call Scores.increment() call Scores.increment() public public throws int long public public throws decl_stmt long final final = if != - decl_stmt int final final = int call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call Scores.increment() call Scores.increment() call Scores.increment() call Scores.increment() call Scores.increment() public public throws int public public throws decl_stmt int final final = if != - call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call decl OrdinalMap.set() call Scores.increment() call Scores.increment() call Scores.increment() call Scores.increment() call Scores.increment() protected protected public public return protected protected return public public return decl float int int public public decl_stmt int = / decl_stmt int = decl_stmt float = if == = = new if != = decl float float int int public public decl_stmt int = / decl_stmt int = decl_stmt float = decl_stmt float if != = else = return decl int int int public public decl_stmt int = / decl_stmt int = decl_stmt int = if == = = new ++ decl int int int public public decl_stmt int = / decl_stmt int = decl_stmt int = return