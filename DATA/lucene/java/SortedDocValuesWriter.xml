org.apache.lucene.index static static org.apache.lucene.util.ByteBlockPool.BYTE_BLOCK_SIZE import java.io.IOException import java.util.Iterator import java.util.NoSuchElementException import org.apache.lucene.codecs.DocValuesConsumer import org.apache.lucene.util.ByteBlockPool import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefHash.DirectBytesStartArray import org.apache.lucene.util.BytesRefHash import org.apache.lucene.util.Counter import org.apache.lucene.util.packed.PackedInts import org.apache.lucene.util.packed.PackedLongValues import class org.apache.lucene.index.SortedDocValuesWriter super super extends decl Builder BytesRefHash Counter long FieldInfo decl PackedLongValues public public if < call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() throw new + + if == throw new + + if > - throw new + + + - while call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() < call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() public public while call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() < call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() int private private decl_stmt int = call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) if < = - - else call decl Builder.addAndGet() call decl Builder.addAndGet() call decl Builder.addAndGet() call decl Builder.addAndGet() call decl Builder.addAndGet() * call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() long private private decl_stmt long final final = call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl Builder.addAndGet() call decl Builder.addAndGet() call decl Builder.addAndGet() call decl Builder.addAndGet() call decl Builder.addAndGet() - = int PackedLongValues decl int int decl int public public throws decl_stmt int final final = assert call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() == decl_stmt int final final = call org.apache.lucene.util.BytesRefHash.size() call org.apache.lucene.util.BytesRefHash.size() call org.apache.lucene.util.BytesRefHash.size() call org.apache.lucene.util.BytesRefHash.size() call org.apache.lucene.util.BytesRefHash.size() decl_stmt org.apache.lucene.util.packed.PackedLongValues final final = call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() decl_stmt int final final final = call org.apache.lucene.util.BytesRefHash.sort() call org.apache.lucene.util.BytesRefHash.sort() call org.apache.lucene.util.BytesRefHash.sort() call org.apache.lucene.util.BytesRefHash.sort() call org.apache.lucene.util.BytesRefHash.sort() decl_stmt int final final final = new for = < ++ = new < public < public < return new new < public < public < return new public < public < return new public < public < return new public public return < public public if ! throw new call org.apache.lucene.util.BytesRefHash.get(int,BytesRef) call org.apache.lucene.util.BytesRefHash.get(int,BytesRef) call org.apache.lucene.util.BytesRefHash.get(int,BytesRef) call org.apache.lucene.util.BytesRefHash.get(int,BytesRef) call org.apache.lucene.util.BytesRefHash.get(int,BytesRef) ++ return public public throw new public public return < int public public if ! throw new decl_stmt int = int ++ return == - : public public throw new