org.apache.lucene.util.packed static static org.apache.lucene.util.BitUtil.zigZagDecode import static static org.apache.lucene.util.packed.AbstractBlockPackedWriter.BPV_SHIFT import static static org.apache.lucene.util.packed.AbstractBlockPackedWriter.MAX_BLOCK_SIZE import static static org.apache.lucene.util.packed.AbstractBlockPackedWriter.MIN_BLOCK_SIZE import static static org.apache.lucene.util.packed.AbstractBlockPackedWriter.MIN_VALUE_EQUALS_0 import static static org.apache.lucene.util.packed.PackedInts.checkBlockSize import java.io.EOFException import java.io.IOException import java.util.Arrays import org.apache.lucene.store.DataInput import org.apache.lucene.store.IndexInput import org.apache.lucene.util.LongsRef import class org.apache.lucene.util.packed.BlockPackedReaderIterator decl byte int DataInput int long decl long int LongsRef long long byte static static throws decl_stmt byte = call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() if >= return decl_stmt long = & = call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() |= & << if >= return = call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() |= & << if >= return = call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() |= & << if >= return = call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() |= & << if >= return = call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() |= & << if >= return = call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() |= & << if >= return = call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() |= & << if >= return = call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() |= & << return public public = assert >= = = = int long int int public public throws assert >= if + > || + < throw new decl_stmt int final final = int - += += -= if == return assert == while >= decl_stmt int final final = call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() & decl_stmt int final final = >>> if > throw new if & == decl_stmt long final final = += -= if == return assert < += += long IndexInput int private private throws if instanceof decl_stmt org.apache.lucene.store.IndexInput final final = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() + else if == = new decl_stmt long = while < decl_stmt int final final = int - call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) += long public public throws if == throw new if == decl_stmt long final final = ++ ++ return public public throws assert > if == throw new if == = - = int - = = += += return int int int long int int decl Decoder decl PackedInts boolean private private throws decl_stmt int final final = call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() call java.io.DataInput.readByte() & decl_stmt boolean final final = & != decl_stmt int final final = >>> if > throw new decl_stmt long final final = : + assert || != if == else decl_stmt org.apache.solr.core.Decoder final final final final final = decl_stmt int final final = / call decl PackedInts.byteValueCount() call decl PackedInts.byteValueCount() call decl PackedInts.byteValueCount() call decl PackedInts.byteValueCount() call decl PackedInts.byteValueCount() decl_stmt int final final = * call decl PackedInts.byteBlockCount() call decl PackedInts.byteBlockCount() call decl PackedInts.byteBlockCount() call decl PackedInts.byteBlockCount() call decl PackedInts.byteBlockCount() if == || < = new decl_stmt int final final = int - decl_stmt int final final = int call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call org.apache.lucene.store.DataInput.readBytes(byte,int,int,boolean) call decl PackedInts.decode() call decl PackedInts.decode() call decl PackedInts.decode() call decl PackedInts.decode() call decl PackedInts.decode() if != for = < ++ += = public public return