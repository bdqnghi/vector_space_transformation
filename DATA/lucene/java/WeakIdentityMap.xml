org.apache.lucene.util java.lang.ref.Reference import java.lang.ref.ReferenceQueue import java.lang.ref.WeakReference import java.util.HashMap import java.util.Iterator import java.util.Map import java.util.NoSuchElementException import java.util.concurrent.ConcurrentHashMap import class decl ReferenceQueue boolean Object decl Map public static < < public static < < return public static < < public static < < return new <> new < public static < < public static < < return public static < < public static < < return new <> new < public public call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() public public if return call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() new public public if return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() new public public return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new public public return == public public return call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() new public public if call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() return if return call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() boolean decl Iterator Object public < public < decl_stmt java.util.Iterator final final final < = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() return new < decl_stmt java.lang.Object private = decl_stmt boolean private = public public return || public public if ! throw new assert try return finally = = public public throw new private private assert ! while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if == call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() else if == = return = return public public return || public public if ! throw new assert try return finally = = public public throw new private private assert ! while = if == else if == = return = return public < public < if return call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() decl Reference public public decl_stmt javax.xml.crypto.dsig.Reference < while = call decl ReferenceQueue.poll() call decl ReferenceQueue.poll() call decl ReferenceQueue.poll() call decl ReferenceQueue.poll() call decl ReferenceQueue.poll() != call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() public public return IdentityWeakReference public public if == return if instanceof decl_stmt IdentityWeakReference final final = if == call IdentityWeakReference.get() call IdentityWeakReference.get() call IdentityWeakReference.get() call IdentityWeakReference.get() call IdentityWeakReference.get() return return