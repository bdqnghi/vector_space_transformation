org.apache.lucene.index java.io.IOException import java.util.ArrayList import java.util.List import java.util.Random import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.analysis.MockTokenizer import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.NumericDocValuesField import org.apache.lucene.document.StringField import org.apache.lucene.document.TextField import org.apache.lucene.search.CollectionStatistics import org.apache.lucene.search.TermStatistics import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.store.Directory import org.apache.lucene.util.TestUtil import class org.apache.lucene.index.BaseNormsFormatTestCase super super extends Random int public public throws decl_stmt int = decl_stmt java.util.Random final final = for = < ++ new return return Random int public public throws decl_stmt int = decl_stmt java.util.Random final final = for = < ++ new return return Random int public public throws decl_stmt int = decl_stmt java.util.Random final final = for = < ++ new return return Random int int public public throws decl_stmt int = decl_stmt java.util.Random final final = for = < ++ new decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) switch case return case return default: return int decl_stmt int = switch case return case return default: return Random int public public throws decl_stmt int = decl_stmt java.util.Random final final = for = < ++ new return call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() : return : Random int public public throws decl_stmt int = decl_stmt java.util.Random final final = for = < ++ new return call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() : - return : - int public public throws decl_stmt int = for = < ++ new return return Random int public public throws decl_stmt int = decl_stmt java.util.Random final final = for = < ++ new return call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == : return == : long Random int public public throws decl_stmt int = decl_stmt java.util.Random final final = for = < ++ decl_stmt long final final = new return call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == : return == : long Random long int public public throws decl_stmt int = decl_stmt java.util.Random final final = for = < ++ decl_stmt long final final = decl_stmt long final final = new return call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == : return == : decl long decl long Random int int public public throws decl_stmt java.util.Random final final = decl_stmt int final final = decl_stmt long final final final = new for = < ++ = decl_stmt int final final = - decl_stmt long final final final = new for = < ++ = new return call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - : call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - return == - : - decl long int int Random int decl long public public throws decl_stmt int final final = decl_stmt java.util.Random final final = for = < ++ for = < ++ decl_stmt int final final = decl_stmt long final final final = new for = < ++ = decl_stmt int final final = - decl_stmt long final final final = new for = < ++ = new return call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - : call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - return == - : - Field DirectoryReader NumericDocValues Document RandomIndexWriter Analyzer Field long LeafReader long IndexWriterConfig Field NumericDocValues int int Directory int private private throws decl_stmt int = decl_stmt long = new for = < ++ = decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.index.IndexWriterConfig = call org.apache.lucene.index.IndexWriterConfig.setSimilarity(Similarity) call org.apache.lucene.index.IndexWriterConfig.setSimilarity(Similarity) call org.apache.lucene.index.IndexWriterConfig.setSimilarity(Similarity) call org.apache.lucene.index.IndexWriterConfig.setSimilarity(Similarity) call org.apache.lucene.index.IndexWriterConfig.setSimilarity(Similarity) new decl_stmt org.apache.lucene.index.RandomIndexWriter = new decl_stmt org.apache.lucene.document.Document = new decl_stmt org.apache.solr.handler.dataimport.config.Field = new decl_stmt org.apache.solr.handler.dataimport.config.Field = new decl_stmt org.apache.solr.handler.dataimport.config.Field = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) for = < ++ call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) decl_stmt long = call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setLongValue(long) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) if == call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() decl_stmt int = / for = < ++ decl_stmt int = call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) new call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() decl_stmt org.apache.lucene.index.DirectoryReader = for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.index.LeafReader = decl_stmt NumericDocValues = call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() decl_stmt NumericDocValues = call LeafReader.getNormValues() call LeafReader.getNormValues() call LeafReader.getNormValues() call LeafReader.getNormValues() call LeafReader.getNormValues() for = < call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() ++ + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) = for : call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() call DirectoryReader.leaves() decl_stmt org.apache.lucene.index.LeafReader = decl_stmt NumericDocValues = call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() call LeafReader.getNumericDocValues() decl_stmt NumericDocValues = call LeafReader.getNormValues() call LeafReader.getNormValues() call LeafReader.getNormValues() call LeafReader.getNormValues() call LeafReader.getNormValues() for = < call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() ++ + call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() public public return ++ public public throw new public public throws throw new protected protected new public public throws Document decl List IndexReader RandomIndexWriter NumericDocValues int Directory public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.RandomIndexWriter = new decl_stmt int = decl_stmt java.util.List < = new <> for = < ++ decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new + if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) for : call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) new + call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) call org.apache.lucene.index.RandomIndexWriter.forceMerge(int) decl_stmt org.apache.lucene.index.IndexReader = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.IndexReader.hasDeletions() call org.apache.lucene.index.IndexReader.hasDeletions() call org.apache.lucene.index.IndexReader.hasDeletions() call org.apache.lucene.index.IndexReader.hasDeletions() call org.apache.lucene.index.IndexReader.hasDeletions() decl_stmt NumericDocValues = for = < call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() ++ call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close()