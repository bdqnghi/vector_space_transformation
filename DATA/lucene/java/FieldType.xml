org.apache.solr.schema java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Locale import java.util.Map import java.util.Set import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.Tokenizer import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.OffsetAttribute import org.apache.lucene.analysis.util.CharFilterFactory import org.apache.lucene.analysis.util.TokenFilterFactory import org.apache.lucene.analysis.util.TokenizerFactory import org.apache.lucene.document.Field import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.IndexableField import org.apache.lucene.index.Term import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.search.DocValuesRangeQuery import org.apache.lucene.search.DocValuesRewriteMethod import org.apache.lucene.search.MultiTermQuery import org.apache.lucene.search.PrefixQuery import org.apache.lucene.search.Query import org.apache.lucene.search.SortField import org.apache.lucene.search.SortedNumericSelector import org.apache.lucene.search.SortedSetSelector import org.apache.lucene.search.TermQuery import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.uninverting.UninvertingReader import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.CharsRef import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.Version import org.apache.solr.analysis.SolrAnalyzer import org.apache.solr.analysis.TokenizerChain import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.SolrException import org.apache.solr.common.util.Base64 import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.common.util.StrUtils import org.apache.solr.query.SolrRangeQuery import org.apache.solr.response.TextResponseWriter import org.apache.solr.search.QParser import org.apache.solr.search.Sorting import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.lucene.analysis.util.AbstractAnalysisFactory.LUCENE_MATCH_VERSION_PARAM import class org.apache.solr.schema.FieldType super super extends String String decl Type Similarity String String Analyzer String boolean int String Logger String String String String SimilarityFactory int String String String String boolean String decl Map String String Analyzer int decl SortedSetSelector String String String String String String String String public public return & != public public return & != protected protected return & != public public return public public return & != public public return protected protected < String decl Map float Analyzer protected protected < = | decl_stmt float = if < |= if > |= if < call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if >= |= = decl_stmt java.util.Map < = new <> call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() = = &= ~ |= for : call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != decl_stmt org.apache.lucene.analysis.Analyzer = if instanceof else throw new + + + call Analyzer.getClass() call Analyzer.getClass() call Analyzer.getClass() call Analyzer.getClass() call Analyzer.getClass() = if instanceof else throw new + + + call Analyzer.getClass() call Analyzer.getClass() call Analyzer.getClass() call Analyzer.getClass() call Analyzer.getClass() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() > throw new + + + + + + protected protected if & != throw new + + + + + + & public public return = public public return + + + != + call Analyzer.getClass() call Analyzer.getClass() call Analyzer.getClass() call Analyzer.getClass() call Analyzer.getClass() : + + + decl org String public public if ! && ! if call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + return decl_stmt java.lang.String try = catch throw new + + + + if == return decl_stmt org.apache.solr.schema.FieldType = new call decl org.setTokenized() call decl org.setTokenized() call decl org.setTokenized() call decl org.setTokenized() call decl org.setTokenized() call decl org.setStored() call decl org.setStored() call decl org.setStored() call decl org.setStored() call decl org.setStored() call decl org.setOmitNorms() call decl org.setOmitNorms() call decl org.setOmitNorms() call decl org.setOmitNorms() call decl org.setOmitNorms() call decl org.setIndexOptions() call decl org.setIndexOptions() call decl org.setIndexOptions() call decl org.setIndexOptions() call decl org.setIndexOptions() : call decl org.setStoreTermVectors() call decl org.setStoreTermVectors() call decl org.setStoreTermVectors() call decl org.setStoreTermVectors() call decl org.setStoreTermVectors() call decl org.setStoreTermVectorOffsets() call decl org.setStoreTermVectorOffsets() call decl org.setStoreTermVectorOffsets() call decl org.setStoreTermVectorOffsets() call decl org.setStoreTermVectorOffsets() call decl org.setStoreTermVectorPositions() call decl org.setStoreTermVectorPositions() call decl org.setStoreTermVectorPositions() call decl org.setStoreTermVectorPositions() call decl org.setStoreTermVectorPositions() call decl org.setStoreTermVectorPayloads() call decl org.setStoreTermVectorPayloads() call decl org.setStoreTermVectorPayloads() call decl org.setStoreTermVectorPayloads() call decl org.setStoreTermVectorPayloads() return Field protected protected decl_stmt org.apache.solr.handler.dataimport.config.Field = new call Field.setBoost() call Field.setBoost() call Field.setBoost() call Field.setBoost() call Field.setBoost() return IndexableField public < public < decl_stmt org.apache.lucene.index.IndexableField = if && call IndexableField.fieldType() call IndexableField.fieldType() call IndexableField.fieldType() call IndexableField.fieldType() call IndexableField.fieldType() == throw new + return == > : IndexOptions protected protected decl_stmt IndexOptions = if = else if = else if = return public public return String public public decl_stmt java.lang.String = if == = return public public return CharsRefBuilder IndexableField public public decl_stmt org.apache.lucene.util.CharsRefBuilder final final = new decl_stmt org.apache.lucene.index.IndexableField final final = call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() return public public return public public return public public return public public return public public return String public public decl_stmt java.lang.String final final = public public = public public return public public = public public return String public public if != decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return return PrefixQuery public public decl_stmt org.apache.lucene.search.PrefixQuery = new new call PrefixQuery.setRewriteMethod() call PrefixQuery.setRewriteMethod() call PrefixQuery.setRewriteMethod() call PrefixQuery.setRewriteMethod() call PrefixQuery.setRewriteMethod() return Tokenizer int String CharTermAttribute OffsetAttribute decl char public public decl_stmt org.apache.lucene.analysis.Tokenizer = new decl_stmt char final final final = new decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute final final = decl_stmt org.apache.lucene.analysis.tokenattributes.OffsetAttribute final final = public public throws decl_stmt int = if <= return decl_stmt java.lang.String = new call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) return return new String int public public throws decl_stmt int = if <= return decl_stmt java.lang.String = new return public public return public public return protected protected return public final public final if = else throw new + + + + public final public final if = else throw new + + + + public public return public public return public public return public public = = call SimilarityFactory.getSimilarity() call SimilarityFactory.getSimilarity() call SimilarityFactory.getSimilarity() call SimilarityFactory.getSimilarity() call SimilarityFactory.getSimilarity() public public return public final public final return protected protected return public public return new public public if ! return throw new + + + + SolrRangeQuery public public if && ! return == : new == : new else decl_stmt org.apache.solr.query.SolrRangeQuery = new == : new == : new return BytesRefBuilder public public decl_stmt org.apache.lucene.util.BytesRefBuilder = new if && ! return else return new new public public if ! && return new else return public public final final if throw new + + decl SimpleOrderedMap decl Set String decl Map public < public < decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if decl_stmt java.util.Map < = if != for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if instanceof call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() else if call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() else decl_stmt java.util.Set < = new <> for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() else if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if decl_stmt java.lang.String = : call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if decl_stmt java.lang.String = : call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if instanceof if call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() return decl Map protected < protected < decl_stmt java.util.Map < = new <> for : call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() return decl List decl SimpleOrderedMap decl Map TokenizerFactory decl SimpleOrderedMap decl TokenFilterFactory decl List TokenizerChain decl SimpleOrderedMap decl CharFilterFactory protected static < protected static < decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> if instanceof decl_stmt java.util.Map < decl_stmt org.apache.solr.analysis.TokenizerChain = decl_stmt org.apache.lucene.analysis.util.CharFilterFactory = call org.apache.solr.analysis.TokenizerChain.getCharFilterFactories() call org.apache.solr.analysis.TokenizerChain.getCharFilterFactories() call org.apache.solr.analysis.TokenizerChain.getCharFilterFactories() call org.apache.solr.analysis.TokenizerChain.getCharFilterFactories() call org.apache.solr.analysis.TokenizerChain.getCharFilterFactories() if < decl_stmt java.util.List < < = new <> for : decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() = if != for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if if call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() else call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> decl_stmt org.apache.lucene.analysis.util.TokenizerFactory = call TokenizerChain.getTokenizerFactory() call TokenizerChain.getTokenizerFactory() call TokenizerChain.getTokenizerFactory() call TokenizerChain.getTokenizerFactory() call TokenizerChain.getTokenizerFactory() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call TokenizerFactory.getClassArg() call TokenizerFactory.getClassArg() call TokenizerFactory.getClassArg() call TokenizerFactory.getClassArg() call TokenizerFactory.getClassArg() = call TokenizerFactory.getOriginalArgs() call TokenizerFactory.getOriginalArgs() call TokenizerFactory.getOriginalArgs() call TokenizerFactory.getOriginalArgs() call TokenizerFactory.getOriginalArgs() if != for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if if call TokenizerFactory.isExplicitLuceneMatchVersion() call TokenizerFactory.isExplicitLuceneMatchVersion() call TokenizerFactory.isExplicitLuceneMatchVersion() call TokenizerFactory.isExplicitLuceneMatchVersion() call TokenizerFactory.isExplicitLuceneMatchVersion() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() else call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() decl_stmt org.apache.lucene.analysis.util.TokenFilterFactory = call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() if < decl_stmt java.util.List < < = new <> for : decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() = if != for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if if call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() else call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() else call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() return public public return public public return public public return CharsRefBuilder protected static protected static if == return decl_stmt org.apache.lucene.util.CharsRefBuilder = new call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) return call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() String BytesRefBuilder protected static protected static if == return decl_stmt org.apache.lucene.util.BytesRefBuilder = new decl_stmt java.lang.String = call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) return call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() BytesRef protected static protected static if == return decl_stmt org.apache.lucene.util.BytesRef final final = return decl byte String protected static protected static if == return decl_stmt java.lang.String final final = decl_stmt byte final final final = return new public public return public public return public public return public static public static if == throw new try return catch return