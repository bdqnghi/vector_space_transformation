org.apache.lucene.index java.io.IOException import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute import org.apache.lucene.util.ByteBlockPool import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefHash import org.apache.lucene.util.Counter import org.apache.lucene.util.IntBlockPool import org.apache.lucene.util.BytesRefHash.BytesStartArray import class org.apache.lucene.index.TermsHashPerField super super implements int FieldInfo boolean ParallelPostingsArray TermsHashPerField BytesRefHash int Counter ByteBlockPool IntBlockPool decl DocState FieldInvertState decl int decl DocumentsWriterPerThread TermsHash int TermToBytesRefAttribute decl int ByteBlockPool call FieldInfo.clear() call FieldInfo.clear() call FieldInfo.clear() call FieldInfo.clear() call FieldInfo.clear() if != call org.apache.lucene.index.TermsHashPerField.reset() call org.apache.lucene.index.TermsHashPerField.reset() call org.apache.lucene.index.TermsHashPerField.reset() call org.apache.lucene.index.TermsHashPerField.reset() call org.apache.lucene.index.TermsHashPerField.reset() int int decl int public public assert < decl_stmt int = decl_stmt int final final final = >> decl_stmt int final final = & + * + public public = call FieldInfo.sort() call FieldInfo.sort() call FieldInfo.sort() call FieldInfo.sort() call FieldInfo.sort() return int int int public public throws decl_stmt int = call FieldInfo.addByPoolOffset() call FieldInfo.addByPoolOffset() call FieldInfo.addByPoolOffset() call FieldInfo.addByPoolOffset() call FieldInfo.addByPoolOffset() if >= if + > call TermToBytesRefAttribute.nextBuffer() call TermToBytesRefAttribute.nextBuffer() call TermToBytesRefAttribute.nextBuffer() call TermToBytesRefAttribute.nextBuffer() call TermToBytesRefAttribute.nextBuffer() if - < * call org.apache.lucene.util.IntBlockPool.nextBuffer() call org.apache.lucene.util.IntBlockPool.nextBuffer() call org.apache.lucene.util.IntBlockPool.nextBuffer() call org.apache.lucene.util.IntBlockPool.nextBuffer() call org.apache.lucene.util.IntBlockPool.nextBuffer() = = += = + for = < ++ decl_stmt int final final = call org.apache.lucene.util.IntBlockPool.newSlice(int) call org.apache.lucene.util.IntBlockPool.newSlice(int) call org.apache.lucene.util.IntBlockPool.newSlice(int) call org.apache.lucene.util.IntBlockPool.newSlice(int) call org.apache.lucene.util.IntBlockPool.newSlice(int) + = + = else = - - decl_stmt int = = >> = & int int int throws decl_stmt int = call FieldInfo.add() call FieldInfo.add() call FieldInfo.add() call FieldInfo.add() call FieldInfo.add() call FieldInvertState.getBytesRef() call FieldInvertState.getBytesRef() call FieldInvertState.getBytesRef() call FieldInvertState.getBytesRef() call FieldInvertState.getBytesRef() if >= call FieldInfo.byteStart() call FieldInfo.byteStart() call FieldInfo.byteStart() call FieldInfo.byteStart() call FieldInfo.byteStart() if + > call TermToBytesRefAttribute.nextBuffer() call TermToBytesRefAttribute.nextBuffer() call TermToBytesRefAttribute.nextBuffer() call TermToBytesRefAttribute.nextBuffer() call TermToBytesRefAttribute.nextBuffer() if - < * call org.apache.lucene.util.IntBlockPool.nextBuffer() call org.apache.lucene.util.IntBlockPool.nextBuffer() call org.apache.lucene.util.IntBlockPool.nextBuffer() call org.apache.lucene.util.IntBlockPool.nextBuffer() call org.apache.lucene.util.IntBlockPool.nextBuffer() = = += = + for = < ++ decl_stmt int final final = call org.apache.lucene.util.IntBlockPool.newSlice(int) call org.apache.lucene.util.IntBlockPool.newSlice(int) call org.apache.lucene.util.IntBlockPool.newSlice(int) call org.apache.lucene.util.IntBlockPool.newSlice(int) call org.apache.lucene.util.IntBlockPool.newSlice(int) + = + = else = - - decl_stmt int = = >> = & if call org.apache.lucene.index.TermsHashPerField.add(int) call org.apache.lucene.index.TermsHashPerField.add(int) call org.apache.lucene.index.TermsHashPerField.add(int) call org.apache.lucene.index.TermsHashPerField.add(int) call org.apache.lucene.index.TermsHashPerField.add(int) int decl byte int decl_stmt int = + decl_stmt byte = >> assert != decl_stmt int = & if != = call org.apache.lucene.util.IntBlockPool.allocSlice(int,int) call org.apache.lucene.util.IntBlockPool.allocSlice(int,int) call org.apache.lucene.util.IntBlockPool.allocSlice(int,int) call org.apache.lucene.util.IntBlockPool.allocSlice(int,int) call org.apache.lucene.util.IntBlockPool.allocSlice(int,int) = + = + = + ++ int public public decl_stmt int final final = + for = < ++ assert < while & ~ != & | >>>= byte public public if == = call ParallelPostingsArray.addAndGet() call ParallelPostingsArray.addAndGet() call ParallelPostingsArray.addAndGet() call ParallelPostingsArray.addAndGet() call ParallelPostingsArray.addAndGet() * return ParallelPostingsArray int public public decl_stmt org.apache.lucene.index.ParallelPostingsArray = decl_stmt int final final = = = call org.apache.lucene.index.ParallelPostingsArray.grow() call org.apache.lucene.index.ParallelPostingsArray.grow() call org.apache.lucene.index.ParallelPostingsArray.grow() call org.apache.lucene.index.ParallelPostingsArray.grow() call org.apache.lucene.index.ParallelPostingsArray.grow() call ParallelPostingsArray.addAndGet() call ParallelPostingsArray.addAndGet() call ParallelPostingsArray.addAndGet() call ParallelPostingsArray.addAndGet() call ParallelPostingsArray.addAndGet() call org.apache.lucene.index.ParallelPostingsArray.bytesPerPosting() call org.apache.lucene.index.ParallelPostingsArray.bytesPerPosting() call org.apache.lucene.index.ParallelPostingsArray.bytesPerPosting() call org.apache.lucene.index.ParallelPostingsArray.bytesPerPosting() call org.apache.lucene.index.ParallelPostingsArray.bytesPerPosting() * - return public public if != call ParallelPostingsArray.addAndGet() call ParallelPostingsArray.addAndGet() call ParallelPostingsArray.addAndGet() call ParallelPostingsArray.addAndGet() call ParallelPostingsArray.addAndGet() - * = return public public return public public return call int.name() call int.name() call int.name() call int.name() call int.name() call int.name() call int.name() call int.name() call int.name() throws if != call org.apache.lucene.index.TermsHashPerField.finish() call org.apache.lucene.index.TermsHashPerField.finish() call org.apache.lucene.index.TermsHashPerField.finish() call org.apache.lucene.index.TermsHashPerField.finish() call org.apache.lucene.index.TermsHashPerField.finish() = if != = call org.apache.lucene.index.TermsHashPerField.start(IndexableField,boolean) call org.apache.lucene.index.TermsHashPerField.start(IndexableField,boolean) call org.apache.lucene.index.TermsHashPerField.start(IndexableField,boolean) call org.apache.lucene.index.TermsHashPerField.start(IndexableField,boolean) call org.apache.lucene.index.TermsHashPerField.start(IndexableField,boolean) return