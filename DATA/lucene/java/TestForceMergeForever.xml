org.apache.lucene.index java.io.IOException import java.util.concurrent.atomic.AtomicBoolean import java.util.concurrent.atomic.AtomicInteger import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.store.Directory import org.apache.lucene.util.LineFileDocs import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import class org.apache.lucene.index.TestForceMergeForever super super extends public public throws if != - && || == = if Directory LineFileDocs int int MockAnalyzer Thread MergePolicy MyIndexWriter AtomicBoolean public public throws decl_stmt org.apache.lucene.store.Directory final final = decl_stmt org.apache.lucene.analysis.MockAnalyzer = new call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) decl_stmt MyIndexWriter final final = new call MyIndexWriter.getConfig() call MyIndexWriter.getConfig() call MyIndexWriter.getConfig() call MyIndexWriter.getConfig() call MyIndexWriter.getConfig() decl_stmt int final final = decl_stmt org.apache.lucene.util.LineFileDocs final final = new for = < ++ call MyIndexWriter.addDocument() call MyIndexWriter.addDocument() call MyIndexWriter.addDocument() call MyIndexWriter.addDocument() call MyIndexWriter.addDocument() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() decl_stmt org.apache.lucene.index.MergePolicy = call MyIndexWriter.getConfig() call MyIndexWriter.getConfig() call MyIndexWriter.getConfig() call MyIndexWriter.getConfig() call MyIndexWriter.getConfig() decl_stmt int final final = + call MyIndexWriter.segmentInfos() call MyIndexWriter.segmentInfos() call MyIndexWriter.segmentInfos() call MyIndexWriter.segmentInfos() call MyIndexWriter.segmentInfos() call MyIndexWriter.segmentInfos() call MyIndexWriter.segmentInfos() call MyIndexWriter.segmentInfos() call MyIndexWriter.segmentInfos() if instanceof else if instanceof else call MyIndexWriter.close() call MyIndexWriter.close() call MyIndexWriter.close() call MyIndexWriter.close() call MyIndexWriter.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() return decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new call MyIndexWriter.getConfig() call MyIndexWriter.getConfig() call MyIndexWriter.getConfig() call MyIndexWriter.getConfig() call MyIndexWriter.getConfig() decl_stmt java.lang.Thread = new public public try while ! call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call MyIndexWriter.updateDocument() call MyIndexWriter.updateDocument() call MyIndexWriter.updateDocument() call MyIndexWriter.updateDocument() call MyIndexWriter.updateDocument() new + call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call MyIndexWriter.getReader() call MyIndexWriter.getReader() call MyIndexWriter.getReader() call MyIndexWriter.getReader() call MyIndexWriter.getReader() catch throw new call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call MyIndexWriter.forceMerge() call MyIndexWriter.forceMerge() call MyIndexWriter.forceMerge() call MyIndexWriter.forceMerge() call MyIndexWriter.forceMerge() call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) + call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() call MyIndexWriter.mergeCount() <= call MyIndexWriter.close() call MyIndexWriter.close() call MyIndexWriter.close() call MyIndexWriter.close() call MyIndexWriter.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call org.apache.lucene.util.LineFileDocs.close() call org.apache.lucene.util.LineFileDocs.close() call org.apache.lucene.util.LineFileDocs.close() call org.apache.lucene.util.LineFileDocs.close() call org.apache.lucene.util.LineFileDocs.close() public public try while ! new + catch throw new