org.apache.lucene.search.highlight java.io.IOException import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.OffsetAttribute import org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl import org.apache.lucene.analysis.tokenattributes.PayloadAttribute import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.util.AttributeFactory import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefArray import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.Counter import org.apache.lucene.util.UnicodeUtil import class org.apache.lucene.search.highlight.TokenStreamFromTermVector super super extends TokenLL BytesRefArray CharTermAttribute PositionIncrementAttribute OffsetAttribute int PayloadAttribute TokenLL CharsRefBuilder Terms AttributeFactory boolean BytesRefBuilder public public return public public throws = CharsRefBuilder BytesRef TermsEnum int TokenLL PostingsEnum int TokenLL short decl TokenLL decl TokenLL int int int int BytesRef private private throws assert ! decl_stmt short = if call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() |= = if call Terms.hasPayloads() call Terms.hasPayloads() call Terms.hasPayloads() call Terms.hasPayloads() call Terms.hasPayloads() && |= | = = new = new = new call org.apache.lucene.util.CharsRefBuilder.grow(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) call Terms.size() call Terms.size() call Terms.size() call Terms.size() call Terms.size() * decl_stmt TokenLL = decl_stmt int = - decl_stmt org.apache.lucene.index.TermsEnum final final = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.util.BytesRef decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.util.CharsRefBuilder = new while = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != call org.apache.lucene.util.CharsRefBuilder.grow(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) call org.apache.lucene.util.CharsRefBuilder.grow(int) decl_stmt int final final = call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() decl_stmt int final final = call org.apache.lucene.util.CharsRefBuilder.length() call org.apache.lucene.util.CharsRefBuilder.length() call org.apache.lucene.util.CharsRefBuilder.length() call org.apache.lucene.util.CharsRefBuilder.length() call org.apache.lucene.util.CharsRefBuilder.length() call org.apache.lucene.util.CharsRefBuilder.append(char) call org.apache.lucene.util.CharsRefBuilder.append(char) call org.apache.lucene.util.CharsRefBuilder.append(char) call org.apache.lucene.util.CharsRefBuilder.append(char) call org.apache.lucene.util.CharsRefBuilder.append(char) call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) assert != call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() decl_stmt int final final = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() for = < ++ decl_stmt int = call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() decl_stmt TokenLL = new = = short if != = call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() if > continue = short call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() - if == - = >> if != decl_stmt org.apache.lucene.util.BytesRef final final = call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() = == - : call org.apache.lucene.util.BytesRefArray.append(BytesRef) call org.apache.lucene.util.BytesRefArray.append(BytesRef) call org.apache.lucene.util.BytesRefArray.append(BytesRef) call org.apache.lucene.util.BytesRefArray.append(BytesRef) call org.apache.lucene.util.BytesRefArray.append(BytesRef) if <= decl_stmt TokenLL = new + * + = = call TokenLL.insertIntoSortedLinkedList() call TokenLL.insertIntoSortedLinkedList() call TokenLL.insertIntoSortedLinkedList() call TokenLL.insertIntoSortedLinkedList() call TokenLL.insertIntoSortedLinkedList() = decl_stmt int = - decl_stmt TokenLL = for = <= ++ decl_stmt TokenLL = if == continue if != assert == = else assert == = if call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() = - while != = = else = while != = = if == = else = = = = int int int int private private throws decl_stmt int = int call Terms.getSumTotalTermFreq() call Terms.getSumTotalTermFreq() call Terms.getSumTotalTermFreq() call Terms.getSumTotalTermFreq() call Terms.getSumTotalTermFreq() if == - decl_stmt int = int call Terms.size() call Terms.size() call Terms.size() call Terms.size() call Terms.size() if == - = = * decl_stmt int final final = * decl_stmt int final final = / return new public public throws if == if ! assert = if == return else if != = else return call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.copyBuffer(char,int,int) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.copyBuffer(char,int,int) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.copyBuffer(char,int,int) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.copyBuffer(char,int,int) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.copyBuffer(char,int,int) call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.util.CharsRefBuilder.chars() call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) if != call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) + if != if == - call PayloadAttribute.setPayload() call PayloadAttribute.setPayload() call PayloadAttribute.setPayload() call PayloadAttribute.setPayload() call PayloadAttribute.setPayload() else call PayloadAttribute.setPayload() call PayloadAttribute.setPayload() call PayloadAttribute.setPayload() call PayloadAttribute.setPayload() call PayloadAttribute.setPayload() call org.apache.lucene.util.BytesRefArray.get(BytesRefBuilder,int) call org.apache.lucene.util.BytesRefArray.get(BytesRefBuilder,int) call org.apache.lucene.util.BytesRefArray.get(BytesRefBuilder,int) call org.apache.lucene.util.BytesRefArray.get(BytesRefBuilder,int) call org.apache.lucene.util.BytesRefArray.get(BytesRefBuilder,int) return TokenLL final final assert == if == return else if <= = return decl_stmt TokenLL = while != && > = = = return int decl_stmt int = if == = return