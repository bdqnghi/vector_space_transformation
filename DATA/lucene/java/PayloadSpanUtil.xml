org.apache.lucene.payloads java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Iterator import java.util.List import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexReaderContext import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.Term import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.DisjunctionMaxQuery import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.MultiPhraseQuery import org.apache.lucene.search.PhraseQuery import org.apache.lucene.search.Query import org.apache.lucene.search.TermQuery import org.apache.lucene.search.spans.SpanNearQuery import org.apache.lucene.search.spans.SpanOrQuery import org.apache.lucene.search.spans.SpanQuery import org.apache.lucene.search.spans.Spans import org.apache.lucene.search.spans.SpanTermQuery import org.apache.lucene.search.spans.SpanWeight import class org.apache.lucene.payloads.PayloadSpanUtil IndexReaderContext decl Collection public < public < throws decl_stmt java.util.Collection < = new <> return int boolean decl SpanQuery int decl int decl Term SpanNearQuery decl Term SpanTermQuery MultiPhraseQuery decl List decl List decl Term SpanNearQuery int int private private < throws if instanceof for : if ! else if instanceof decl_stmt org.apache.lucene.index.Term = decl_stmt org.apache.lucene.search.spans.SpanQuery = new for = < ++ = new decl_stmt int = decl_stmt boolean = if == = decl_stmt org.apache.lucene.search.spans.SpanNearQuery = new else if instanceof decl_stmt org.apache.lucene.search.spans.SpanTermQuery = new else if instanceof else if instanceof for < = else if instanceof decl_stmt org.apache.lucene.search.MultiPhraseQuery final final = decl_stmt org.apache.lucene.index.Term final final final = call org.apache.lucene.search.MultiPhraseQuery.getTermArrays() call org.apache.lucene.search.MultiPhraseQuery.getTermArrays() call org.apache.lucene.search.MultiPhraseQuery.getTermArrays() call org.apache.lucene.search.MultiPhraseQuery.getTermArrays() call org.apache.lucene.search.MultiPhraseQuery.getTermArrays() decl_stmt int final final final = call org.apache.lucene.search.MultiPhraseQuery.getPositions() call org.apache.lucene.search.MultiPhraseQuery.getPositions() call org.apache.lucene.search.MultiPhraseQuery.getPositions() call org.apache.lucene.search.MultiPhraseQuery.getPositions() call org.apache.lucene.search.MultiPhraseQuery.getPositions() if > decl_stmt int = - for = < - ++ if > = decl_stmt int = - for = < - ++ if > = decl_stmt int = for = < ++ decl_stmt org.apache.lucene.index.Term final final final = decl_stmt java.util.List < = if == = = new <> ++ for final final : call int.add() call int.add() call int.add() call int.add() call int.add() new decl_stmt int = decl_stmt int = decl_stmt org.apache.lucene.search.spans.SpanQuery final final final = new for = < ++ decl_stmt java.util.List < = if != ++ = new call int.toArray() call int.toArray() call int.toArray() call int.toArray() call int.toArray() new call int.size() call int.size() call int.size() call int.size() call int.size() else ++ decl_stmt int final final = call org.apache.lucene.search.MultiPhraseQuery.getSlop() call org.apache.lucene.search.MultiPhraseQuery.getSlop() call org.apache.lucene.search.MultiPhraseQuery.getSlop() call org.apache.lucene.search.MultiPhraseQuery.getSlop() call org.apache.lucene.search.MultiPhraseQuery.getSlop() decl_stmt boolean final final = == decl_stmt org.apache.lucene.search.spans.SpanNearQuery = new + IndexSearcher PayloadSpanCollector Spans SpanWeight private private < throws decl_stmt org.apache.lucene.search.IndexSearcher final final = new call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) decl_stmt org.apache.lucene.search.spans.SpanWeight = call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) decl_stmt org.apache.lucene.payloads.PayloadSpanCollector = new for : call IndexReaderContext.leaves() call IndexReaderContext.leaves() call IndexReaderContext.leaves() call IndexReaderContext.leaves() call IndexReaderContext.leaves() decl_stmt org.apache.lucene.search.spans.Spans final final = call SpanWeight.getSpans() call SpanWeight.getSpans() call SpanWeight.getSpans() call SpanWeight.getSpans() call SpanWeight.getSpans() if != while call Spans.nextDoc() call Spans.nextDoc() call Spans.nextDoc() call Spans.nextDoc() call Spans.nextDoc() != while call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() != call org.apache.lucene.payloads.PayloadSpanCollector.reset() call org.apache.lucene.payloads.PayloadSpanCollector.reset() call org.apache.lucene.payloads.PayloadSpanCollector.reset() call org.apache.lucene.payloads.PayloadSpanCollector.reset() call org.apache.lucene.payloads.PayloadSpanCollector.reset() call Spans.collect() call Spans.collect() call Spans.collect() call Spans.collect() call Spans.collect() call PayloadSpanCollector.getPayloads() call PayloadSpanCollector.getPayloads() call PayloadSpanCollector.getPayloads() call PayloadSpanCollector.getPayloads() call PayloadSpanCollector.getPayloads()