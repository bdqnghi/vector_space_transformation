org.apache.lucene.analysis.icu java.io.IOException import java.io.Reader import java.util.Objects import org.apache.lucene.analysis.charfilter.BaseCharFilter import com.ibm.icu.text.Normalizer2 import class org.apache.lucene.analysis.icu.ICUNormalizer2CharFilter super super extends StringBuilder Normalizer2 boolean int decl char StringBuilder boolean int int int public public throws if < throw new if >= throw new if <= throw new while ! || call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > || call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > decl_stmt int if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > = if > return decl_stmt int = if > = if > return return - int private private throws decl_stmt int final final = if == - = return call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = - if call Normalizer2.isInert() call Normalizer2.isInert() call Normalizer2.isInert() call Normalizer2.isInert() call Normalizer2.isInert() - && ! - return else return + int private private if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() <= = return if ! decl_stmt int = = if > return decl_stmt int = if > = return int private private decl_stmt int = call Normalizer2.spanQuickCheckYes() call Normalizer2.spanQuickCheckYes() call Normalizer2.spanQuickCheckYes() call Normalizer2.spanQuickCheckYes() call Normalizer2.spanQuickCheckYes() if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call StringBuilder.subSequence() call StringBuilder.subSequence() call StringBuilder.subSequence() call StringBuilder.subSequence() call StringBuilder.subSequence() call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) = - += return int boolean int private private if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() <= return decl_stmt boolean = decl_stmt int final final = call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() while <= - decl_stmt int = call StringBuilder.codePointAt() call StringBuilder.codePointAt() call StringBuilder.codePointAt() call StringBuilder.codePointAt() call StringBuilder.codePointAt() += if < && call Normalizer2.hasBoundaryBefore() call Normalizer2.hasBoundaryBefore() call Normalizer2.hasBoundaryBefore() call Normalizer2.hasBoundaryBefore() call Normalizer2.hasBoundaryBefore() call StringBuilder.codePointAt() call StringBuilder.codePointAt() call StringBuilder.codePointAt() call StringBuilder.codePointAt() call StringBuilder.codePointAt() = break if ! && >= && = = if ! return return int int private private final final decl_stmt int final final = call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call Normalizer2.normalizeSecondAndAppend() call Normalizer2.normalizeSecondAndAppend() call Normalizer2.normalizeSecondAndAppend() call Normalizer2.normalizeSecondAndAppend() call Normalizer2.normalizeSecondAndAppend() call StringBuilder.subSequence() call StringBuilder.subSequence() call StringBuilder.subSequence() call StringBuilder.subSequence() call StringBuilder.subSequence() call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) = - decl_stmt int final final = call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() - return int int private private if == += return decl_stmt int final final = - decl_stmt int final final = if < for = <= - ++ + - else + + += private private = call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() if > call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) return