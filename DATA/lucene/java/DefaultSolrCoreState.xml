org.apache.solr.update java.io.IOException import java.lang.invoke.MethodHandles import java.util.concurrent.ExecutionException import java.util.concurrent.Future import java.util.concurrent.RejectedExecutionException import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.locks.Lock import java.util.concurrent.locks.ReentrantLock import java.util.concurrent.locks.ReentrantReadWriteLock import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.MergePolicy import org.apache.lucene.index.SortingMergePolicy import org.apache.lucene.search.Sort import org.apache.solr.cloud.ActionThrottle import org.apache.solr.cloud.RecoveryStrategy import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.core.CoreContainer import org.apache.solr.core.CoreDescriptor import org.apache.solr.core.DirectoryFactory import org.apache.solr.core.SolrCore import org.apache.solr.logging.MDCLoggingContext import org.apache.solr.util.RefCounted import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.update.DefaultSolrCoreState super super extends super implements RecoveryStrategy Logger DirectoryFactory decl RefCounted ActionThrottle boolean ReentrantLock SolrIndexWriter ActionThrottle boolean AtomicInteger ReentrantReadWriteLock ReentrantLock boolean private private try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call SolrIndexWriter.close() call SolrIndexWriter.close() call SolrIndexWriter.close() call SolrIndexWriter.close() call SolrIndexWriter.close() = catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() boolean public < public < throws decl_stmt boolean = call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() try synchronized if == if == return else if == = call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() = return finally if ! call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() private private if == && != = new < public public call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() public public public public call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() public public boolean private private decl_stmt boolean = do try = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() if if throw new ! String IndexWriter private private throws decl_stmt java.lang.String = = decl_stmt org.apache.lucene.index.IndexWriter = = if != if ! try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() catch + else try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call org.apache.lucene.index.IndexWriter.rollback() call org.apache.lucene.index.IndexWriter.rollback() call org.apache.lucene.index.IndexWriter.rollback() call org.apache.lucene.index.IndexWriter.rollback() call org.apache.lucene.index.IndexWriter.rollback() catch + if = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) public public throws call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() try finally call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() public public throws call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() public public throws try finally call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() call java.util.concurrent.locks.ReentrantReadWriteLock.writeLock() public public throws protected protected throws return MergePolicy public public throws call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() try if != decl_stmt org.apache.lucene.index.MergePolicy final final = call SolrIndexWriter.getConfig() call SolrIndexWriter.getConfig() call SolrIndexWriter.getConfig() call SolrIndexWriter.getConfig() call SolrIndexWriter.getConfig() if instanceof return finally call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() call java.util.concurrent.locks.ReentrantReadWriteLock.readLock() return public public return decl Future boolean Thread public public decl_stmt java.lang.Thread = new public public try if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return decl_stmt boolean = call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() try if ! if call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() > return call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() else call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() try call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.cloud.ActionThrottle.minimumWaitBetweenActions() call org.apache.solr.cloud.ActionThrottle.minimumWaitBetweenActions() call org.apache.solr.cloud.ActionThrottle.minimumWaitBetweenActions() call org.apache.solr.cloud.ActionThrottle.minimumWaitBetweenActions() call org.apache.solr.cloud.ActionThrottle.minimumWaitBetweenActions() call org.apache.solr.cloud.ActionThrottle.markAttemptingAction() call org.apache.solr.cloud.ActionThrottle.markAttemptingAction() call org.apache.solr.cloud.ActionThrottle.markAttemptingAction() call org.apache.solr.cloud.ActionThrottle.markAttemptingAction() call org.apache.solr.cloud.ActionThrottle.markAttemptingAction() = new call org.apache.solr.cloud.RecoveryStrategy.setRecoveringAfterStartup(boolean) call org.apache.solr.cloud.RecoveryStrategy.setRecoveringAfterStartup(boolean) call org.apache.solr.cloud.RecoveryStrategy.setRecoveringAfterStartup(boolean) call org.apache.solr.cloud.RecoveryStrategy.setRecoveringAfterStartup(boolean) call org.apache.solr.cloud.RecoveryStrategy.setRecoveringAfterStartup(boolean) decl_stmt java.util.concurrent.Future < = try call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() catch throw new catch throw new finally call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() finally if call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() finally try catch decl Future boolean public public try if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return decl_stmt boolean = call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() try if ! if call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() > return call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() else call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() try call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.cloud.ActionThrottle.minimumWaitBetweenActions() call org.apache.solr.cloud.ActionThrottle.minimumWaitBetweenActions() call org.apache.solr.cloud.ActionThrottle.minimumWaitBetweenActions() call org.apache.solr.cloud.ActionThrottle.minimumWaitBetweenActions() call org.apache.solr.cloud.ActionThrottle.minimumWaitBetweenActions() call org.apache.solr.cloud.ActionThrottle.markAttemptingAction() call org.apache.solr.cloud.ActionThrottle.markAttemptingAction() call org.apache.solr.cloud.ActionThrottle.markAttemptingAction() call org.apache.solr.cloud.ActionThrottle.markAttemptingAction() call org.apache.solr.cloud.ActionThrottle.markAttemptingAction() = new call org.apache.solr.cloud.RecoveryStrategy.setRecoveringAfterStartup(boolean) call org.apache.solr.cloud.RecoveryStrategy.setRecoveringAfterStartup(boolean) call org.apache.solr.cloud.RecoveryStrategy.setRecoveringAfterStartup(boolean) call org.apache.solr.cloud.RecoveryStrategy.setRecoveringAfterStartup(boolean) call org.apache.solr.cloud.RecoveryStrategy.setRecoveringAfterStartup(boolean) decl_stmt java.util.concurrent.Future < = try call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() catch throw new catch throw new finally call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() finally if call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() finally public public if != try call org.apache.solr.cloud.RecoveryStrategy.close() call org.apache.solr.cloud.RecoveryStrategy.close() call org.apache.solr.cloud.RecoveryStrategy.close() call org.apache.solr.cloud.RecoveryStrategy.close() call org.apache.solr.cloud.RecoveryStrategy.close() catch public public = public public public synchronized public synchronized = public public return public public return public public return public public =