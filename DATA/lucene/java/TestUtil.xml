org.apache.lucene.util java.io.BufferedInputStream import java.io.ByteArrayOutputStream import java.io.IOException import java.io.InputStream import java.io.OutputStream import java.io.PrintStream import java.math.BigDecimal import java.math.BigInteger import java.nio.CharBuffer import java.nio.file.FileSystem import java.nio.file.Files import java.nio.file.Path import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.HashMap import java.util.Iterator import java.util.List import java.util.Map import java.util.NoSuchElementException import java.util.Random import java.util.concurrent.ExecutorService import java.util.concurrent.TimeUnit import java.util.regex.Pattern import java.util.regex.PatternSyntaxException import java.util.zip.ZipEntry import java.util.zip.ZipInputStream import org.apache.lucene.codecs.Codec import org.apache.lucene.codecs.DocValuesFormat import org.apache.lucene.codecs.PostingsFormat import org.apache.lucene.codecs.asserting.AssertingCodec import org.apache.lucene.codecs.blockterms.LuceneFixedGap import org.apache.lucene.codecs.blocktreeords.BlockTreeOrdsPostingsFormat import org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat import org.apache.lucene.codecs.lucene54.Lucene54DocValuesFormat import org.apache.lucene.codecs.lucene60.Lucene60Codec import org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat import org.apache.lucene.codecs.perfield.PerFieldPostingsFormat import org.apache.lucene.document.BinaryDocValuesField import org.apache.lucene.document.BinaryPoint import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.NumericDocValuesField import org.apache.lucene.document.SortedDocValuesField import org.apache.lucene.index.CheckIndex import org.apache.lucene.index.CodecReader import org.apache.lucene.index.ConcurrentMergeScheduler import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.DocValuesType import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FilterLeafReader import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.IndexableField import org.apache.lucene.index.LeafReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.LogMergePolicy import org.apache.lucene.index.MergePolicy import org.apache.lucene.index.MergeScheduler import org.apache.lucene.index.MultiFields import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.SegmentReader import org.apache.lucene.index.SlowCodecReaderWrapper import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.index.TieredMergePolicy import org.apache.lucene.mockfile.FilterFileSystem import org.apache.lucene.mockfile.VirusCheckingFS import org.apache.lucene.mockfile.WindowsFS import org.apache.lucene.search.FieldDoc import org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.TopDocs import org.apache.lucene.store.Directory import org.apache.lucene.store.FSDirectory import org.apache.lucene.store.FilterDirectory import org.apache.lucene.store.IOContext import org.apache.lucene.store.NoLockFactory import org.apache.lucene.store.RAMDirectory import org.junit.Assert import com.carrotsearch.randomizedtesting.generators.RandomInts import com.carrotsearch.randomizedtesting.generators.RandomPicks import class org.apache.lucene.util.TestUtil decl List decl int decl int decl String decl Comparator int decl byte ZipEntry OutputStream int Path public static public static throws = new try = new decl_stmt java.util.zip.ZipEntry decl_stmt byte = new while = != decl_stmt java.nio.file.Path = call java.util.zip.ZipEntry.getName() call java.util.zip.ZipEntry.getName() call java.util.zip.ZipEntry.getName() call java.util.zip.ZipEntry.getName() call java.util.zip.ZipEntry.getName() call java.nio.file.Path.getParent() call java.nio.file.Path.getParent() call java.nio.file.Path.getParent() call java.nio.file.Path.getParent() call java.nio.file.Path.getParent() if ! call java.util.zip.ZipEntry.isDirectory() call java.util.zip.ZipEntry.isDirectory() call java.util.zip.ZipEntry.isDirectory() call java.util.zip.ZipEntry.isDirectory() call java.util.zip.ZipEntry.isDirectory() decl_stmt java.io.OutputStream = decl_stmt int while = >= call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() boolean T public static < public static < < for = < ++ decl_stmt boolean = assert decl_stmt T = assert || != try throw new + catch assert ! try throw new + catch T public static < public static < < while decl_stmt T = assert != try throw new + catch try throw new + catch int public static < public static < < decl_stmt int = for < = += if != throw new + + + + + if == try throw new + catch try throw new + catch try throw new + catch public static public static public static public static if instanceof public static public static throws return public static public static throws return decl CheckIndex public static public static throws if == = new try = new new decl_stmt Status = if == || == throw new else if return public static public static throws for : CodecReader long SegmentReader ByteArrayOutputStream PrintStream LeafReader public static public static throws decl_stmt java.io.ByteArrayOutputStream = new decl_stmt java.io.PrintStream = new decl_stmt org.apache.lucene.index.CodecReader final final if instanceof = else = if call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) decl_stmt org.apache.lucene.index.LeafReader = if instanceof decl_stmt org.apache.lucene.index.SegmentReader = decl_stmt long = call SegmentReader.ramBytesUsed() call SegmentReader.ramBytesUsed() call SegmentReader.ramBytesUsed() call SegmentReader.ramBytesUsed() call SegmentReader.ramBytesUsed() if call SegmentReader.ramBytesUsed() call SegmentReader.ramBytesUsed() call SegmentReader.ramBytesUsed() call SegmentReader.ramBytesUsed() call SegmentReader.ramBytesUsed() < throw new + assert != private static private static throws for : if ! if != throw new + + switch case if != || != || != || != || != throw new + + break case if != || != || != || != throw new + break case if != || != || != || != throw new + break case if != || != || != || != throw new + break case if != || != || != || != throw new + break case if != || != || != || != throw new + break default: throw new public static public static return BigInteger BigInteger long public static public static assert >= decl_stmt java.math.BigInteger final final = if call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) call java.math.BigInteger.compareTo(BigInteger) <= return + call java.math.BigInteger.intValue() call java.math.BigInteger.intValue() call java.math.BigInteger.intValue() call java.math.BigInteger.intValue() call java.math.BigInteger.intValue() else decl_stmt java.math.BigInteger final final = new new decl_stmt long final final = assert >= assert <= return decl byte int public static public static decl_stmt int = decl_stmt byte = new return new public static public static return decl char int public static public static decl_stmt int final final = if == return decl_stmt char final final final = new for = < ++ = char return new decl char int public static public static decl_stmt int final final = if == return decl_stmt char final final final = new for = < ++ = char return new public static public static return public static public static return decl char int public static public static decl_stmt int final final = if == return decl_stmt char final final final = new return new int int int public static public static decl_stmt int = decl_stmt int final final = + while < decl_stmt int final final = if == && < - ++ = char ++ = char else if <= ++ = char else if == ++ = char else if == ++ = char else if == ++ = char public static public static return StringBuilder public static public static decl_stmt java.lang.StringBuilder final final = new for = > -- if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) char else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() StringBuilder int int public static public static decl_stmt int final final = if == return decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt int = switch case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) switch case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) - break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) switch case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break default: call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() StringBuilder int int public static public static decl_stmt java.lang.StringBuilder = new decl_stmt int = while < decl_stmt int = += switch case call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) break case call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) break case call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public static public static return public static public static return StringBuilder int int public static public static decl_stmt int final final = decl_stmt int final final = decl_stmt java.lang.StringBuilder = new for = < ++ call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl char int int int public static public static decl_stmt char final final final = new * decl_stmt int = decl_stmt int = for < && != ++ decl_stmt int if >= = else if >= = else if >= = else = if == = char -- else if == = char -= else if == = char -= else if == = char -= else if == ++ = char = char -= return new int BytesRef public static public static decl_stmt int = decl_stmt org.apache.lucene.util.BytesRef = new = return public static public static final final if + return new public public return public public return public static public static final final if + return new public public return public public return public static public static return new public static public static return new public static public static return new public static public static switch case return new case return new default: throw new public static public static return new public static public static return PostingsFormat public static public static decl_stmt org.apache.lucene.codecs.PostingsFormat = if instanceof return else return call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() public static public static return DocValuesFormat public static public static decl_stmt org.apache.lucene.codecs.DocValuesFormat = if instanceof return else return call org.apache.lucene.codecs.DocValuesFormat.getName() call org.apache.lucene.codecs.DocValuesFormat.getName() call org.apache.lucene.codecs.DocValuesFormat.getName() call org.apache.lucene.codecs.DocValuesFormat.getName() call org.apache.lucene.codecs.DocValuesFormat.getName() String public static public static decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return return decl String public static public static throws decl_stmt java.lang.String = if > || == && ! return else return decl List public static public static throws decl_stmt java.util.List < = new <> for : for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() LogMergePolicy TieredMergePolicy MergePolicy MergeScheduler public static public static decl_stmt org.apache.lucene.index.MergePolicy = call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) if instanceof decl_stmt org.apache.lucene.index.LogMergePolicy = call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.getMergeFactor() call org.apache.lucene.index.LogMergePolicy.getMergeFactor() call org.apache.lucene.index.LogMergePolicy.getMergeFactor() call org.apache.lucene.index.LogMergePolicy.getMergeFactor() call org.apache.lucene.index.LogMergePolicy.getMergeFactor() else if instanceof decl_stmt org.apache.lucene.index.TieredMergePolicy = call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce() call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.getSegmentsPerTier() call org.apache.lucene.index.TieredMergePolicy.getSegmentsPerTier() call org.apache.lucene.index.TieredMergePolicy.getSegmentsPerTier() call org.apache.lucene.index.TieredMergePolicy.getSegmentsPerTier() call org.apache.lucene.index.TieredMergePolicy.getSegmentsPerTier() decl_stmt org.apache.lucene.index.MergeScheduler = if instanceof decl Map public static < public static < final final < decl_stmt java.util.Map final final final < = new <> new public public < extends extends call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + + public public < extends extends + + ScoreDoc ScoreDoc public static public static for = < ++ decl_stmt org.apache.lucene.search.ScoreDoc final final = decl_stmt org.apache.lucene.search.ScoreDoc final final = if instanceof instanceof else instanceof Document Field decl byte int Field BytesRef DocValuesType public static public static decl_stmt org.apache.lucene.document.Document final final = new for : decl_stmt org.apache.solr.handler.dataimport.config.Field final final = decl_stmt org.apache.solr.handler.dataimport.config.Field final final decl_stmt DocValuesType final final = call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() decl_stmt int final final = call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() if != switch case = new call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.numericValue() call org.apache.solr.handler.dataimport.config.Field.numericValue() call org.apache.solr.handler.dataimport.config.Field.numericValue() call org.apache.solr.handler.dataimport.config.Field.numericValue() call org.apache.solr.handler.dataimport.config.Field.numericValue() break case = new call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() break case = new call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() break default: throw new + else if != decl_stmt org.apache.lucene.util.BytesRef = call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() call org.apache.solr.handler.dataimport.config.Field.binaryValue() decl_stmt byte = new = new call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() else = new call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.name() call org.apache.solr.handler.dataimport.config.Field.stringValue() call org.apache.solr.handler.dataimport.config.Field.stringValue() call org.apache.solr.handler.dataimport.config.Field.stringValue() call org.apache.solr.handler.dataimport.config.Field.stringValue() call org.apache.solr.handler.dataimport.config.Field.stringValue() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) return Terms TermsEnum public static public static throws decl_stmt org.apache.lucene.index.Terms final final = if == return decl_stmt org.apache.lucene.index.TermsEnum final final = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() if ! call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) return return int public static public static throws if if decl_stmt int final final switch case = break case = break case = break default: = break return |= return public static public static return new decl char int public static public static switch case decl_stmt char final final final = new decl_stmt int final final = return new case return default: return public static public static if != try catch String String Pattern public static public static decl_stmt java.lang.String final final = while try decl_stmt java.util.regex.Pattern = decl_stmt java.lang.String = try = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) catch + call java.util.regex.Pattern.pattern() call java.util.regex.Pattern.pattern() call java.util.regex.Pattern.pattern() call java.util.regex.Pattern.pattern() call java.util.regex.Pattern.pattern() + if != && return catch int int StringBuilder public static public static assert >= if == return = decl_stmt int = decl_stmt java.lang.StringBuilder = new while call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() < if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int = - while < = * + = - call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() StringBuilder String int public static public static if == return decl_stmt int = decl_stmt java.lang.StringBuilder = new while call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() < if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) : else if < call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if < assert call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() if call StringBuilder.charAt() call StringBuilder.charAt() call StringBuilder.charAt() call StringBuilder.charAt() call StringBuilder.charAt() - call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() - if == decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() assert call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() return else return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public static public static if == return else try return + + catch return RAMDirectory public static public static throws decl_stmt org.apache.lucene.store.RAMDirectory = new for : if || call RAMDirectory.copyFrom() call RAMDirectory.copyFrom() call RAMDirectory.copyFrom() call RAMDirectory.copyFrom() call RAMDirectory.copyFrom() return Path FileSystem FilterFileSystem public static public static = if instanceof decl_stmt java.nio.file.Path = decl_stmt java.io.FileSystem = call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() while instanceof decl_stmt org.apache.lucene.mockfile.FilterFileSystem = if call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() instanceof return = call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() return FileSystem FilterFileSystem public static public static decl_stmt java.io.FileSystem = while instanceof decl_stmt org.apache.lucene.mockfile.FilterFileSystem = if call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() instanceof return = call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() return public static public static = if instanceof return else return FileSystem FilterFileSystem public static public static decl_stmt java.io.FileSystem = while instanceof decl_stmt org.apache.lucene.mockfile.FilterFileSystem = if call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() instanceof return = call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() return VirusCheckingFS boolean FileSystem FilterFileSystem Directory public static public static decl_stmt org.apache.lucene.store.Directory = if instanceof decl_stmt java.io.FileSystem = while instanceof decl_stmt org.apache.lucene.mockfile.FilterFileSystem = if call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() instanceof decl_stmt org.apache.lucene.mockfile.VirusCheckingFS = call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() decl_stmt boolean = call VirusCheckingFS.isEnabled() call VirusCheckingFS.isEnabled() call VirusCheckingFS.isEnabled() call VirusCheckingFS.isEnabled() call VirusCheckingFS.isEnabled() call org.apache.lucene.mockfile.VirusCheckingFS.disable() call org.apache.lucene.mockfile.VirusCheckingFS.disable() call org.apache.lucene.mockfile.VirusCheckingFS.disable() call org.apache.lucene.mockfile.VirusCheckingFS.disable() call org.apache.lucene.mockfile.VirusCheckingFS.disable() return = call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() return VirusCheckingFS FileSystem FilterFileSystem Directory public static public static decl_stmt org.apache.lucene.store.Directory = if instanceof decl_stmt java.io.FileSystem = while instanceof decl_stmt org.apache.lucene.mockfile.FilterFileSystem = if call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() instanceof decl_stmt org.apache.lucene.mockfile.VirusCheckingFS = call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.FilterFileSystem.getParent() call org.apache.lucene.mockfile.VirusCheckingFS.enable() call org.apache.lucene.mockfile.VirusCheckingFS.enable() call org.apache.lucene.mockfile.VirusCheckingFS.enable() call org.apache.lucene.mockfile.VirusCheckingFS.enable() call org.apache.lucene.mockfile.VirusCheckingFS.enable() return = call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate() call org.apache.lucene.mockfile.FilterFileSystem.getDelegate()