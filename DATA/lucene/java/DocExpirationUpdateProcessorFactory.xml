org.apache.solr.update.processor java.io.IOException import java.lang.invoke.MethodHandles import java.text.ParseException import java.util.ArrayList import java.util.Collections import java.util.Comparator import java.util.List import java.util.concurrent.RejectedExecutionHandler import java.util.concurrent.ScheduledThreadPoolExecutor import java.util.concurrent.ThreadPoolExecutor import java.util.concurrent.TimeUnit import org.apache.solr.cloud.CloudDescriptor import org.apache.solr.cloud.ZkController import org.apache.solr.common.SolrException import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.common.util.NamedList import org.apache.solr.core.CloseHook import org.apache.solr.core.SolrCore import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.SolrRequestInfo import org.apache.solr.response.SolrQueryResponse import org.apache.solr.update.AddUpdateCommand import org.apache.solr.update.CommitUpdateCommand import org.apache.solr.update.DeleteUpdateCommand import org.apache.solr.util.DateMathParser import org.apache.solr.util.DefaultSolrThreadFactory import org.apache.solr.util.plugin.SolrCoreAware import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.common.SolrException.ErrorCode.BAD_REQUEST import static static org.apache.solr.common.SolrException.ErrorCode.SERVER_ERROR import class org.apache.solr.update.processor.DocExpirationUpdateProcessorFactory super super extends super implements String SolrCore String Logger String String String String long String ScheduledThreadPoolExecutor String String boolean decl Comparator String private private final final return private private final final return new + + Object private private final final final final final final final final if < return decl_stmt java.lang.Object = if == return if instanceof return call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() throw + + Object public public = = = = if == throw + decl_stmt java.lang.Object = if != if ! instanceof throw + = Object public public = if == call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() throw + + if < try decl_stmt java.lang.Object = call org.apache.solr.core.SolrCore.getUpdateProcessingChain(String) call org.apache.solr.core.SolrCore.getUpdateProcessingChain(String) call org.apache.solr.core.SolrCore.getUpdateProcessingChain(String) call org.apache.solr.core.SolrCore.getUpdateProcessingChain(String) call org.apache.solr.core.SolrCore.getUpdateProcessingChain(String) catch throw + + long private private = new new new public public call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) new public public if call ScheduledThreadPoolExecutor.isTerminating() call ScheduledThreadPoolExecutor.isTerminating() call ScheduledThreadPoolExecutor.isTerminating() call ScheduledThreadPoolExecutor.isTerminating() call ScheduledThreadPoolExecutor.isTerminating() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call ScheduledThreadPoolExecutor.shutdown() call ScheduledThreadPoolExecutor.shutdown() call ScheduledThreadPoolExecutor.shutdown() call ScheduledThreadPoolExecutor.shutdown() call ScheduledThreadPoolExecutor.shutdown() call ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy() call ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy() call ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy() call ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy() call ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy() call ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy() call ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy() call ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy() call ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy() call ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy() decl_stmt long final final = call ScheduledThreadPoolExecutor.scheduleAtFixedRate() call ScheduledThreadPoolExecutor.scheduleAtFixedRate() call ScheduledThreadPoolExecutor.scheduleAtFixedRate() call ScheduledThreadPoolExecutor.scheduleAtFixedRate() call ScheduledThreadPoolExecutor.scheduleAtFixedRate() new public public call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() public public if call ScheduledThreadPoolExecutor.isTerminating() call ScheduledThreadPoolExecutor.isTerminating() call ScheduledThreadPoolExecutor.isTerminating() call ScheduledThreadPoolExecutor.isTerminating() call ScheduledThreadPoolExecutor.isTerminating() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call ScheduledThreadPoolExecutor.shutdown() call ScheduledThreadPoolExecutor.shutdown() call ScheduledThreadPoolExecutor.shutdown() call ScheduledThreadPoolExecutor.shutdown() call ScheduledThreadPoolExecutor.shutdown() String public public decl_stmt java.lang.String = == : if == && == return else return new DateMathParser SolrInputDocument String public public throws decl_stmt org.apache.solr.common.SolrInputDocument final final = decl_stmt java.lang.String final final = call org.apache.solr.common.SolrInputDocument.containsKey(Object) call org.apache.solr.common.SolrInputDocument.containsKey(Object) call org.apache.solr.common.SolrInputDocument.containsKey(Object) call org.apache.solr.common.SolrInputDocument.containsKey(Object) call org.apache.solr.common.SolrInputDocument.containsKey(Object) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) : if != try decl_stmt org.apache.solr.util.DateMathParser final final = new call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.util.DateMathParser.parseMath(String) call org.apache.solr.util.DateMathParser.parseMath(String) call org.apache.solr.util.DateMathParser.parseMath(String) call org.apache.solr.util.DateMathParser.parseMath(String) call org.apache.solr.util.DateMathParser.parseMath(String) catch throw new + UpdateRequestProcessorChain SolrQueryResponse SolrQueryRequest DeleteUpdateCommand CommitUpdateCommand UpdateRequestProcessor public public decl_stmt org.apache.solr.request.SolrQueryRequest final final = new > try decl_stmt org.apache.solr.response.SolrQueryResponse final final = new new try if ! return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.update.processor.UpdateRequestProcessorChain = call org.apache.solr.core.SolrCore.getUpdateProcessingChain(String) call org.apache.solr.core.SolrCore.getUpdateProcessingChain(String) call org.apache.solr.core.SolrCore.getUpdateProcessingChain(String) call org.apache.solr.core.SolrCore.getUpdateProcessingChain(String) call org.apache.solr.core.SolrCore.getUpdateProcessingChain(String) decl_stmt org.apache.solr.update.processor.UpdateRequestProcessor = call UpdateRequestProcessorChain.createProcessor() call UpdateRequestProcessorChain.createProcessor() call UpdateRequestProcessorChain.createProcessor() call UpdateRequestProcessorChain.createProcessor() call UpdateRequestProcessorChain.createProcessor() if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return try decl_stmt org.apache.solr.update.DeleteUpdateCommand = new call DeleteUpdateCommand.setQuery() call DeleteUpdateCommand.setQuery() call DeleteUpdateCommand.setQuery() call DeleteUpdateCommand.setQuery() call DeleteUpdateCommand.setQuery() + + + + call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand) decl_stmt org.apache.solr.update.CommitUpdateCommand = new = = call org.apache.solr.update.processor.UpdateRequestProcessor.processCommit(CommitUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processCommit(CommitUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processCommit(CommitUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processCommit(CommitUpdateCommand) call org.apache.solr.update.processor.UpdateRequestProcessor.processCommit(CommitUpdateCommand) finally call UpdateRequestProcessor.finish() call UpdateRequestProcessor.finish() call UpdateRequestProcessor.finish() call UpdateRequestProcessor.finish() call UpdateRequestProcessor.finish() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + finally finally call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() decl List String ZkController String Replica boolean String CloudDescriptor private private decl_stmt org.apache.solr.cloud.ZkController = call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() if == return decl_stmt org.apache.solr.cloud.CloudDescriptor = call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() decl_stmt java.lang.String = call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() decl_stmt java.util.List < = new < call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return decl_stmt org.apache.solr.common.cloud.Replica = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return decl_stmt java.lang.String = call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() decl_stmt java.lang.String = call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() decl_stmt boolean = call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if && ! call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + = return