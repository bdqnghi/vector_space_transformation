org.apache.lucene.codecs.asserting java.io.IOException import java.util.Collection import java.util.Iterator import org.apache.lucene.codecs.FieldsConsumer import org.apache.lucene.codecs.FieldsProducer import org.apache.lucene.codecs.PostingsFormat import org.apache.lucene.index.AssertingLeafReader import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.Fields import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.SegmentReadState import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.util.Accountable import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.TestUtil import class org.apache.lucene.codecs.asserting.AssertingPostingsFormat super super extends PostingsFormat public public throws return new call PostingsFormat.fieldsConsumer() call PostingsFormat.fieldsConsumer() call PostingsFormat.fieldsConsumer() call PostingsFormat.fieldsConsumer() call PostingsFormat.fieldsConsumer() public public throws return new call PostingsFormat.fieldsProducer() call PostingsFormat.fieldsProducer() call PostingsFormat.fieldsProducer() call PostingsFormat.fieldsProducer() call PostingsFormat.fieldsProducer() public public throws call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() decl Iterator public < public < decl_stmt java.util.Iterator < = call PostingsFormat.iterator() call PostingsFormat.iterator() call PostingsFormat.iterator() call PostingsFormat.iterator() call PostingsFormat.iterator() assert != return Terms public public throws decl_stmt org.apache.lucene.index.Terms = call PostingsFormat.terms() call PostingsFormat.terms() call PostingsFormat.terms() call PostingsFormat.terms() call PostingsFormat.terms() return == : new public public return call PostingsFormat.size() call PostingsFormat.size() call PostingsFormat.size() call PostingsFormat.size() call PostingsFormat.size() long public public decl_stmt long = call PostingsFormat.ramBytesUsed() call PostingsFormat.ramBytesUsed() call PostingsFormat.ramBytesUsed() call PostingsFormat.ramBytesUsed() call PostingsFormat.ramBytesUsed() assert >= return decl Collection public < public < decl_stmt java.util.Collection < = call PostingsFormat.getChildResources() call PostingsFormat.getChildResources() call PostingsFormat.getChildResources() call PostingsFormat.getChildResources() call PostingsFormat.getChildResources() return public public throws call PostingsFormat.checkIntegrity() call PostingsFormat.checkIntegrity() call PostingsFormat.checkIntegrity() call PostingsFormat.checkIntegrity() call PostingsFormat.checkIntegrity() public public throws return new call PostingsFormat.getMergeInstance() call PostingsFormat.getMergeInstance() call PostingsFormat.getMergeInstance() call PostingsFormat.getMergeInstance() call PostingsFormat.getMergeInstance() public public return + + call org.apache.lucene.codecs.PostingsFormat.toString() call org.apache.lucene.codecs.PostingsFormat.toString() call org.apache.lucene.codecs.PostingsFormat.toString() call org.apache.lucene.codecs.PostingsFormat.toString() call org.apache.lucene.codecs.PostingsFormat.toString() + BytesRef Terms int TermsEnum int int int int BytesRefBuilder int int boolean boolean boolean int boolean FieldInfo int String PostingsEnum public public throws call PostingsFormat.write() call PostingsFormat.write() call PostingsFormat.write() call PostingsFormat.write() call PostingsFormat.write() decl_stmt java.lang.String = for : decl_stmt org.apache.lucene.index.FieldInfo = assert != assert == || call java.lang.String.compareTo(String) call java.lang.String.compareTo(String) call java.lang.String.compareTo(String) call java.lang.String.compareTo(String) call java.lang.String.compareTo(String) < = decl_stmt org.apache.lucene.index.Terms = if == continue assert != decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.util.BytesRefBuilder = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt boolean = call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() >= decl_stmt boolean = call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() >= decl_stmt boolean = call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() >= decl_stmt boolean = call Terms.hasPayloads() call Terms.hasPayloads() call Terms.hasPayloads() call Terms.hasPayloads() call Terms.hasPayloads() assert == call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() call Terms.hasPositions() assert == call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() while decl_stmt org.apache.lucene.util.BytesRef = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == break assert == || call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() < if == = new call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) else call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) decl_stmt int = if == if = | = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) else = if |= if = | = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) assert != : + + + decl_stmt int = - while decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() if == break assert > = if decl_stmt int = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() assert > if decl_stmt int = - decl_stmt int = - for = < ++ decl_stmt int = call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() assert >= : + + + + + + + assert <= : + + + = if decl_stmt int = call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() decl_stmt int = call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() assert >= assert >= = public public throws call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close() call PostingsFormat.close()