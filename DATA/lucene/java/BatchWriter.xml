org.apache.solr.hadoop org.apache.hadoop.mapreduce.TaskAttemptContext import org.apache.hadoop.mapreduce.TaskID import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer import org.apache.solr.client.solrj.response.UpdateResponse import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.util.ExecutorUtil import org.slf4j.Logger import org.slf4j.LoggerFactory import java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collection import java.util.List import java.util.Locale import java.util.concurrent.LinkedBlockingQueue import java.util.concurrent.ThreadPoolExecutor import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import class org.apache.solr.hadoop.BatchWriter Exception Logger int int AtomicInteger TaskID ThreadPoolExecutor EmbeddedSolrServer public public return public public = public public try call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() = finally call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() call java.util.concurrent.atomic.AtomicInteger.getAndDecrement() protected < protected < return protected protected < = protected protected return protected protected = protected protected < if == = new <> else = protected protected if == = new <> else = UpdateResponse protected protected < try decl_stmt UpdateResponse = call EmbeddedSolrServer.add() call EmbeddedSolrServer.add() call EmbeddedSolrServer.add() call EmbeddedSolrServer.add() call EmbeddedSolrServer.add() if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call UpdateResponse.getElapsedTime() call UpdateResponse.getElapsedTime() call UpdateResponse.getElapsedTime() call UpdateResponse.getElapsedTime() call UpdateResponse.getElapsedTime() return catch if instanceof else new + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return Batch public public < throws decl_stmt Batch = new if != call java.util.concurrent.ThreadPoolExecutor.execute(Runnable) call java.util.concurrent.ThreadPoolExecutor.execute(Runnable) call java.util.concurrent.ThreadPoolExecutor.execute(Runnable) call java.util.concurrent.ThreadPoolExecutor.execute(Runnable) call java.util.concurrent.ThreadPoolExecutor.execute(Runnable) else call Batch.run() call Batch.run() call Batch.run() call Batch.run() call Batch.run() long float int public synchronized public synchronized throws if != call java.util.concurrent.ThreadPoolExecutor.shutdown() call java.util.concurrent.ThreadPoolExecutor.shutdown() call java.util.concurrent.ThreadPoolExecutor.shutdown() call java.util.concurrent.ThreadPoolExecutor.shutdown() call java.util.concurrent.ThreadPoolExecutor.shutdown() while ! call java.util.concurrent.ThreadPoolExecutor.isTerminated() call java.util.concurrent.ThreadPoolExecutor.isTerminated() call java.util.concurrent.ThreadPoolExecutor.isTerminated() call java.util.concurrent.ThreadPoolExecutor.isTerminated() call java.util.concurrent.ThreadPoolExecutor.isTerminated() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.concurrent.ThreadPoolExecutor.getQueue() call java.util.concurrent.ThreadPoolExecutor.getQueue() call java.util.concurrent.ThreadPoolExecutor.getQueue() call java.util.concurrent.ThreadPoolExecutor.getQueue() call java.util.concurrent.ThreadPoolExecutor.getQueue() call java.util.concurrent.ThreadPoolExecutor.getActiveCount() call java.util.concurrent.ThreadPoolExecutor.getActiveCount() call java.util.concurrent.ThreadPoolExecutor.getActiveCount() call java.util.concurrent.ThreadPoolExecutor.getActiveCount() call java.util.concurrent.ThreadPoolExecutor.getActiveCount() call java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,TimeUnit) call java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,TimeUnit) call java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,TimeUnit) call java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,TimeUnit) call java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,TimeUnit) call EmbeddedSolrServer.commit() call EmbeddedSolrServer.commit() call EmbeddedSolrServer.commit() call EmbeddedSolrServer.commit() call EmbeddedSolrServer.commit() decl_stmt int = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt long = call EmbeddedSolrServer.optimize() call EmbeddedSolrServer.optimize() call EmbeddedSolrServer.optimize() call EmbeddedSolrServer.optimize() call EmbeddedSolrServer.optimize() - decl_stmt float = - / ^ call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call EmbeddedSolrServer.commit() call EmbeddedSolrServer.commit() call EmbeddedSolrServer.commit() call EmbeddedSolrServer.commit() call EmbeddedSolrServer.commit() call org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.close() call org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.close() call org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.close() call org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.close() call org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.close() Exception private private throws decl_stmt Exception final final = = if == return if instanceof throw if instanceof throw throw new