org.apache.solr.update java.lang.invoke.MethodHandles import java.util.concurrent.Executors import java.util.concurrent.ScheduledExecutorService import java.util.concurrent.ScheduledFuture import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.atomic.AtomicLong import org.apache.solr.common.SolrException import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.core.SolrCore import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.request.SolrQueryRequest import org.apache.solr.util.DefaultSolrThreadFactory import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.update.CommitTracker super super implements SolrCore Logger int boolean long boolean AtomicInteger boolean ScheduledExecutorService int AtomicLong ScheduledFuture String public public return public synchronized public synchronized if != call ScheduledFuture.cancel() call ScheduledFuture.cancel() call ScheduledFuture.cancel() call ScheduledFuture.cancel() call ScheduledFuture.cancel() = call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() public public boolean public public synchronized if != decl_stmt boolean = call ScheduledFuture.cancel() call ScheduledFuture.cancel() call ScheduledFuture.cancel() call ScheduledFuture.cancel() call ScheduledFuture.cancel() if = long private private decl_stmt long = > : if > boolean private private if <= return synchronized if != && call ScheduledFuture.getDelay() call ScheduledFuture.getDelay() call ScheduledFuture.getDelay() call ScheduledFuture.getDelay() call ScheduledFuture.getDelay() <= return if != decl_stmt boolean = call ScheduledFuture.cancel() call ScheduledFuture.cancel() call ScheduledFuture.cancel() call ScheduledFuture.cancel() call ScheduledFuture.cancel() if ! return = call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.schedule(Callable,long,TimeUnit) long public public if > decl_stmt long = call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if == + call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) public public public public public public synchronized if != call ScheduledFuture.cancel() call ScheduledFuture.cancel() call ScheduledFuture.cancel() call ScheduledFuture.cancel() call ScheduledFuture.cancel() = call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) SolrQueryRequest CommitUpdateCommand public public synchronized = decl_stmt org.apache.solr.request.SolrQueryRequest = new new try decl_stmt org.apache.solr.update.CommitUpdateCommand = new = = = call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() catch finally call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() call org.apache.solr.request.SolrQueryRequest.close() public public return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() public public if > || > return > + + : + > + + : else return public public return return = public public = public public =