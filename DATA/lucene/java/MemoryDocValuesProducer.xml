org.apache.lucene.codecs.memory java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.List import java.util.Map import java.util.concurrent.atomic.AtomicLong import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.DocValuesProducer import org.apache.lucene.index.BinaryDocValues import org.apache.lucene.index.CorruptIndexException import org.apache.lucene.index.DocValues import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.NumericDocValues import org.apache.lucene.index.SegmentReadState import org.apache.lucene.index.SortedDocValues import org.apache.lucene.index.SortedNumericDocValues import org.apache.lucene.index.SortedSetDocValues import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.ChecksumIndexInput import org.apache.lucene.store.IndexInput import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.IOUtils import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.LongValues import org.apache.lucene.util.PagedBytes import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.fst.BytesRefFSTEnum import org.apache.lucene.util.fst.BytesRefFSTEnum.InputOutput import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.FST.Arc import org.apache.lucene.util.fst.FST.BytesReader import org.apache.lucene.util.fst.PositiveIntOutputs import org.apache.lucene.util.fst.Util import org.apache.lucene.util.packed.BlockPackedReader import org.apache.lucene.util.packed.MonotonicBlockPackedReader import org.apache.lucene.util.packed.PackedInts import class org.apache.lucene.codecs.memory.MemoryDocValuesProducer super super extends int decl Map decl Map byte byte byte byte byte byte decl Map decl Map decl Map decl Map decl Map int AtomicLong decl Map int int byte int byte decl Map byte IndexInput int decl Map byte byte boolean decl Map NumericEntry private private throws decl_stmt NumericEntry = new = = if != - = else = = switch case case case case break default: throw new + = = return BinaryEntry private private throws decl_stmt BinaryEntry = new = = = if != - = else = = = if != = = return FSTEntry private private throws decl_stmt FSTEntry = new = = return FieldInfo SortedNumericEntry int int int private private throws decl_stmt int = decl_stmt int = while != - ++ decl_stmt org.apache.lucene.index.FieldInfo = if == throw new + decl_stmt int = if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == decl_stmt SortedSetEntry = new = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == decl_stmt SortedSetEntry = new = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == decl_stmt SortedNumericEntry = new = = = = = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == decl_stmt SortedNumericEntry = new = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else throw new + + + = return NumericDocValues public synchronized public synchronized throws decl_stmt NumericDocValues = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return public public return call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() decl List public synchronized < public synchronized < decl_stmt java.util.List < = new <> call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return public public throws call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() public synchronized public synchronized throws return new public public return + + + decl PackedInts long long decl Reader int int decl PackedInts decl Reader long int int int long int NumericEntry IndexInput BlockPackedReader int private private throws decl_stmt NumericEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.store.IndexInput = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() + switch case decl_stmt int = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if > throw new + decl_stmt long final final = new for = < ++ = call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() decl_stmt java.io.Reader final final final final final = int if ! call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) + call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return new public public return int call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() case decl_stmt long final final = call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() decl_stmt java.io.Reader final final final final final = int if ! call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call int.ramBytesUsed() call int.ramBytesUsed() call int.ramBytesUsed() call int.ramBytesUsed() call int.ramBytesUsed() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return new public public return + call int.get() call int.get() call int.get() call int.get() call int.get() case decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() decl_stmt org.apache.lucene.util.packed.BlockPackedReader final final = new if ! call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call decl Reader.ramBytesUsed() call decl Reader.ramBytesUsed() call decl Reader.ramBytesUsed() call decl Reader.ramBytesUsed() call decl Reader.ramBytesUsed() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return case decl_stmt long final final = call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) decl_stmt long final final = call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() decl_stmt java.io.Reader final final final final final = int if ! call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call int.ramBytesUsed() call int.ramBytesUsed() call int.ramBytesUsed() call int.ramBytesUsed() call int.ramBytesUsed() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return new public public return + * call int.get() call int.get() call int.get() call int.get() call int.get() default: throw new public public return int public public return + public public return + * MonotonicBlockPackedReader BytesRef decl Reader long BytesAndAddresses decl PagedBytes BytesRef BinaryEntry public public throws decl_stmt BinaryEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt BytesAndAddresses synchronized = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.io.Reader final final final final final = decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedReader final final = if == assert == decl_stmt int final final = return new decl_stmt org.apache.lucene.util.BytesRef final final = new public public call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() * long return else return new decl_stmt org.apache.lucene.util.BytesRef final final = new public public decl_stmt long = == : call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() - decl_stmt long = call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() call decl PagedBytes.fillSlice() - return public public * long return long long public public decl_stmt long = == : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() - decl_stmt long = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() - return BytesAndAddresses PagedBytes IndexInput BinaryEntry private private throws decl_stmt BytesAndAddresses = new decl_stmt BinaryEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.store.IndexInput = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt org.apache.lucene.util.PagedBytes = new call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) call org.apache.lucene.util.PagedBytes.copy(IndexInput,long) = call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) if ! call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call BytesAndAddresses.reader() call BytesAndAddresses.reader() call BytesAndAddresses.reader() call BytesAndAddresses.reader() call BytesAndAddresses.reader() call BytesAndAddresses.reader() call BytesAndAddresses.reader() call BytesAndAddresses.reader() call BytesAndAddresses.reader() if != call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() + = if ! call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call BytesAndAddresses.addresses() call BytesAndAddresses.addresses() call BytesAndAddresses.addresses() call BytesAndAddresses.addresses() call BytesAndAddresses.addresses() call BytesAndAddresses.addresses() call BytesAndAddresses.addresses() call BytesAndAddresses.addresses() call BytesAndAddresses.addresses() return BytesRefBuilder IntsRef decl BytesRefFSTEnum decl InputOutput decl Arc decl FST decl FST decl Arc BytesReader FSTEntry IntsRefBuilder IndexInput NumericDocValues public public throws decl_stmt FSTEntry final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == return decl_stmt org.apache.lucene.util.fst.FST < synchronized = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == decl_stmt org.apache.lucene.store.IndexInput = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = new <> if ! call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt NumericDocValues final final = decl_stmt org.apache.lucene.util.fst.FST final final final < = decl_stmt BytesReader final final = call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getBytesReader() decl_stmt Arc final final final < = new <> decl_stmt Arc final final final < = new <> decl_stmt org.apache.lucene.util.IntsRefBuilder final final = new decl_stmt org.apache.lucene.util.fst.BytesRefFSTEnum final final final < = new <> return new decl_stmt org.apache.lucene.util.BytesRefBuilder final final = new public public return int call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() public public try call BytesReader.setPosition() call BytesReader.setPosition() call BytesReader.setPosition() call BytesReader.setPosition() call BytesReader.setPosition() call decl FST.getFirstArc() call decl FST.getFirstArc() call decl FST.getFirstArc() call decl FST.getFirstArc() call decl FST.getFirstArc() decl_stmt org.apache.lucene.util.IntsRef = return catch throw new public public try decl_stmt InputOutput < = call decl BytesRefFSTEnum.seekCeil() call decl BytesRefFSTEnum.seekCeil() call decl BytesRefFSTEnum.seekCeil() call decl BytesRefFSTEnum.seekCeil() call decl BytesRefFSTEnum.seekCeil() if == return - - else if call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() return call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() else return int - - catch throw new public public return int public public return new public public return int IntsRef public public try decl_stmt org.apache.lucene.util.IntsRef = return catch throw new decl InputOutput public public try decl_stmt InputOutput < = if == return - - else if call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() return call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() else return int - - catch throw new public public return int public public return new MonotonicBlockPackedReader Bits int MonotonicBlockPackedReader NumericEntry NumericDocValues LongValues SortedNumericEntry IndexInput int public public throws decl_stmt SortedNumericEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if decl_stmt NumericDocValues = decl_stmt NumericEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.util.Bits = return else decl_stmt NumericDocValues final final = decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedReader final final synchronized decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedReader = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == decl_stmt org.apache.lucene.store.IndexInput = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() call org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed() = if instanceof decl_stmt org.apache.lucene.util.LongValues final final = return new decl_stmt long decl_stmt long public public = int call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) = int call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) + public public return call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) + public public return - else return new decl_stmt int decl_stmt int public public = int call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) = int call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) + public public return call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() + public public return - public public = int = int + public public return + public public return - public public = int = int + public public return + public public return - BytesRefBuilder ByteArrayDataInput decl BytesRefFSTEnum BytesRef long BytesReader decl InputOutput IntsRef decl Arc decl FST decl FST decl Arc FSTEntry BinaryDocValues SortedSetEntry IntsRefBuilder IndexInput public public throws decl_stmt SortedSetEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if return decl_stmt FSTEntry final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == return decl_stmt org.apache.lucene.util.fst.FST < synchronized = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == decl_stmt org.apache.lucene.store.IndexInput = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = new <> if ! call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt BinaryDocValues final final = decl_stmt org.apache.lucene.util.fst.FST final final final < = decl_stmt BytesReader final final = call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getBytesReader() decl_stmt Arc final final final < = new <> decl_stmt Arc final final final < = new <> decl_stmt org.apache.lucene.util.IntsRefBuilder final final = new decl_stmt org.apache.lucene.util.fst.BytesRefFSTEnum final final final < = new <> decl_stmt org.apache.lucene.store.ByteArrayDataInput final final = new return new decl_stmt org.apache.lucene.util.BytesRefBuilder final final = new decl_stmt org.apache.lucene.util.BytesRef decl_stmt long public public if call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() call org.apache.lucene.store.ByteArrayDataInput.eof() return else += call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() call org.apache.lucene.store.ByteArrayDataInput.readVLong() return public public = call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) call org.apache.lucene.store.ByteArrayDataInput.reset(byte) = public public try call BytesReader.setPosition() call BytesReader.setPosition() call BytesReader.setPosition() call BytesReader.setPosition() call BytesReader.setPosition() call decl FST.getFirstArc() call decl FST.getFirstArc() call decl FST.getFirstArc() call decl FST.getFirstArc() call decl FST.getFirstArc() decl_stmt org.apache.lucene.util.IntsRef = return catch throw new public public try decl_stmt InputOutput < = call decl BytesRefFSTEnum.seekCeil() call decl BytesRefFSTEnum.seekCeil() call decl BytesRefFSTEnum.seekCeil() call decl BytesRefFSTEnum.seekCeil() call decl BytesRefFSTEnum.seekCeil() if == return - - else if call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() return call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() else return - - catch throw new public public return public public return new public public if return else += return public public = = IntsRef public public try decl_stmt org.apache.lucene.util.IntsRef = return catch throw new decl InputOutput public public try decl_stmt InputOutput < = if == return - - else if call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() call decl InputOutput.input() return call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() call decl InputOutput.output() else return - - catch throw new public public return public public return new FixedBitSet long IndexInput private private final final final final throws if == - return new else decl_stmt org.apache.lucene.util.FixedBitSet synchronized = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == decl_stmt org.apache.lucene.store.IndexInput = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() assert == decl_stmt long = new int >> for = < ++ = call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) call org.apache.lucene.store.IndexInput.readLong(long) = new if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call org.apache.lucene.util.FixedBitSet.ramBytesUsed() call org.apache.lucene.util.FixedBitSet.ramBytesUsed() call org.apache.lucene.util.FixedBitSet.ramBytesUsed() call org.apache.lucene.util.FixedBitSet.ramBytesUsed() call org.apache.lucene.util.FixedBitSet.ramBytesUsed() return BinaryEntry NumericEntry public public throws switch case return case return case return case decl_stmt BinaryEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return case decl_stmt NumericEntry = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return default: throw new public public throws call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() long public public decl_stmt long = if != += call decl Map.ramBytesUsed() call decl Map.ramBytesUsed() call decl Map.ramBytesUsed() call decl Map.ramBytesUsed() call decl Map.ramBytesUsed() return decl List public < public < decl_stmt java.util.List < = new <> if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl InputOutput public public throws decl_stmt InputOutput < = if == return else return public public throws if == return else if return else return public public throws if == return else return IntsRef public public throws decl_stmt org.apache.lucene.util.IntsRef = new public public throws return public public throws return public public throws throw new public public throws throw new public public throws throw new