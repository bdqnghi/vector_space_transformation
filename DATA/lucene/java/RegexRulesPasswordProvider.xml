org.apache.solr.handler.extraction java.io.BufferedReader import java.io.IOException import java.io.InputStream import java.lang.invoke.MethodHandles import java.nio.charset.StandardCharsets import java.util.LinkedHashMap import java.util.Map.Entry import java.util.regex.Pattern import java.util.regex.PatternSyntaxException import org.apache.lucene.util.IOUtils import org.apache.tika.metadata.Metadata import org.apache.tika.metadata.TikaMetadataKeys import org.apache.tika.parser.PasswordProvider import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.handler.extraction.RegexRulesPasswordProvider super super implements decl LinkedHashMap Logger String public public if != return if call decl LinkedHashMap.size() call decl LinkedHashMap.size() call decl LinkedHashMap.size() call decl LinkedHashMap.size() call decl LinkedHashMap.size() > return return private private if != && > for < : call decl LinkedHashMap.entrySet() call decl LinkedHashMap.entrySet() call decl LinkedHashMap.entrySet() call decl LinkedHashMap.entrySet() call decl LinkedHashMap.entrySet() if return return String decl String int decl LinkedHashMap Pattern int BufferedReader String String public static < public static < decl_stmt java.util.LinkedHashMap < = new <> decl_stmt java.io.BufferedReader = new decl_stmt java.lang.String try decl_stmt int = while = call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) != ++ decl_stmt java.lang.String = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) if > = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == continue decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if <= call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + continue decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) try decl_stmt java.util.regex.Pattern = call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + continue catch throw new return public public public < public < return public public < = public public return public public = public public =