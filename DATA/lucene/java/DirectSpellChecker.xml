org.apache.lucene.search.spell org.apache.lucene.index.IndexReader import org.apache.lucene.index.MultiFields import org.apache.lucene.index.Term import org.apache.lucene.index.Terms import org.apache.lucene.search.BoostAttribute import org.apache.lucene.search.FuzzyTermsEnum import org.apache.lucene.search.MaxNonCompetitiveBoostAttribute import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.AttributeSource import org.apache.lucene.util.BytesRef import org.apache.lucene.util.CharsRef import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.UnicodeUtil import org.apache.lucene.util.automaton.LevenshteinAutomata import java.io.IOException import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.HashSet import java.util.Locale import java.util.PriorityQueue import class org.apache.lucene.search.spell.DirectSpellChecker int int StringDistance decl Comparator StringDistance float int boolean int float float public public return public public if < || || throw new = public public return public public = public public return public public = public public return public public = public public return public public if >= && != int throw new = public public return public public = public public return public public if >= && != int throw new = public public return public public = public < public < return public public < = public public return public public = public public throws return public public throws return decl HashSet decl Collection int int String SuggestWord CharsRefBuilder SuggestWord int int public public throws decl_stmt org.apache.lucene.util.CharsRefBuilder final final = new decl_stmt java.lang.String = if > && call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() < return new if = new call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) call java.lang.String.toLowerCase(Locale) decl_stmt int = if == && > return new decl_stmt int = if >= && > return new else if > int * float return new if != = if >= = int else if > = * float - decl_stmt java.util.Collection < = decl_stmt int = * = if > && call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() < decl_stmt java.util.HashSet < = new <> call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() = decl_stmt SuggestWord = new call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() decl_stmt int = - for : decl_stmt SuggestWord = new if == call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) = call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() = = = -- = if < decl_stmt SuggestWord = new = return BoostAttribute Terms float BytesRef String MaxNonCompetitiveBoostAttribute int BytesRef AttributeSource ScoreTerm float decl PriorityQueue FuzzyTermsEnum protected < protected < final final throws decl_stmt org.apache.lucene.util.AttributeSource = new decl_stmt org.apache.lucene.search.MaxNonCompetitiveBoostAttribute = call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) decl_stmt org.apache.lucene.index.Terms = if == return decl_stmt org.apache.lucene.search.FuzzyTermsEnum = new - decl_stmt org.apache.lucene.util.PriorityQueue final final final < = new <> decl_stmt org.apache.lucene.util.BytesRef = new decl_stmt org.apache.lucene.util.BytesRef decl_stmt ScoreTerm = new decl_stmt org.apache.lucene.search.BoostAttribute = call FuzzyTermsEnum.attributes() call FuzzyTermsEnum.attributes() call FuzzyTermsEnum.attributes() call FuzzyTermsEnum.attributes() call FuzzyTermsEnum.attributes() while = call FuzzyTermsEnum.next() call FuzzyTermsEnum.next() call FuzzyTermsEnum.next() call FuzzyTermsEnum.next() call FuzzyTermsEnum.next() != decl_stmt float final final = call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() if call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() >= && <= call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() continue if call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) continue decl_stmt int = call org.apache.lucene.search.FuzzyTermsEnum.docFreq() call org.apache.lucene.search.FuzzyTermsEnum.docFreq() call org.apache.lucene.search.FuzzyTermsEnum.docFreq() call org.apache.lucene.search.FuzzyTermsEnum.docFreq() call org.apache.lucene.search.FuzzyTermsEnum.docFreq() if <= continue decl_stmt float final final decl_stmt java.lang.String final final if == = = / call org.apache.lucene.search.FuzzyTermsEnum.getScaleFactor() call org.apache.lucene.search.FuzzyTermsEnum.getScaleFactor() call org.apache.lucene.search.FuzzyTermsEnum.getScaleFactor() call org.apache.lucene.search.FuzzyTermsEnum.getScaleFactor() call org.apache.lucene.search.FuzzyTermsEnum.getScaleFactor() + call org.apache.lucene.search.FuzzyTermsEnum.getMinSimilarity() call org.apache.lucene.search.FuzzyTermsEnum.getMinSimilarity() call org.apache.lucene.search.FuzzyTermsEnum.getMinSimilarity() call org.apache.lucene.search.FuzzyTermsEnum.getMinSimilarity() call org.apache.lucene.search.FuzzyTermsEnum.getMinSimilarity() else = = call StringDistance.getDistance() call StringDistance.getDistance() call StringDistance.getDistance() call StringDistance.getDistance() call StringDistance.getDistance() if < continue = = = = = call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() = call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() > call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() : new call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() >= call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() : return public public if return if == return else return int int public public decl_stmt int final final = decl_stmt int = = * + == : return ScoreTerm public public if == return if == return if != return decl_stmt ScoreTerm = if == if != return else if ! return return