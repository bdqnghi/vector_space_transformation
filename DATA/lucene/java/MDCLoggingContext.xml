org.apache.solr.logging static static org.apache.solr.common.cloud.ZkStateReader.COLLECTION_PROP import static static org.apache.solr.common.cloud.ZkStateReader.CORE_NAME_PROP import static static org.apache.solr.common.cloud.ZkStateReader.NODE_NAME_PROP import static static org.apache.solr.common.cloud.ZkStateReader.REPLICA_PROP import static static org.apache.solr.common.cloud.ZkStateReader.SHARD_ID_PROP import java.util.function.Supplier import org.apache.solr.cloud.CloudDescriptor import org.apache.solr.cloud.ZkController import org.apache.solr.core.CoreContainer import org.apache.solr.core.CoreDescriptor import org.apache.solr.core.SolrCore import org.slf4j.MDC import class org.apache.solr.logging.MDCLoggingContext decl ThreadLocal public public return private static private static if != + else private static private static if != + else private static private static if != + else private static private static if != + else ZkController public static public static if != decl_stmt org.apache.solr.cloud.ZkController = if != call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() int public static public static decl_stmt int = call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() if == private static private static if != + else CoreDescriptor public static public static if != decl_stmt org.apache.solr.core.CoreDescriptor = CoreContainer CloudDescriptor ZkController int public static public static if != decl_stmt int = call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() + if > return decl_stmt org.apache.solr.core.CoreContainer = if != decl_stmt org.apache.solr.cloud.ZkController = call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() if != call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() decl_stmt org.apache.solr.cloud.CloudDescriptor = if != call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() int public static public static decl_stmt int = call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.get() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() - if == private static private static public static public static call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set() call decl ThreadLocal.set()