org.apache.lucene.analysis.cn.smart.hhmm java.util.List import org.apache.lucene.analysis.cn.smart.CharType import org.apache.lucene.analysis.cn.smart.Utility import org.apache.lucene.analysis.cn.smart.WordType import org.apache.lucene.analysis.cn.smart.hhmm.SegToken import class org.apache.lucene.analysis.cn.smart.hhmm.HHMMSegmenter WordDictionary int SegGraph int decl int int int StringBuilder decl char int boolean SegToken private private decl_stmt int = decl_stmt int = decl_stmt int decl_stmt int = decl_stmt java.lang.StringBuilder = new decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.SegToken decl_stmt int = decl_stmt boolean decl_stmt int decl_stmt char decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.SegGraph = new while < = switch case ++ break case = + call SegToken.delete() call SegToken.delete() call SegToken.delete() call SegToken.delete() call SegToken.delete() call SegToken.length() call SegToken.length() call SegToken.length() call SegToken.length() call SegToken.length() call SegToken.append() call SegToken.append() call SegToken.append() call SegToken.append() call SegToken.append() = new = call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) = new = call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char,int) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char,int) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char,int) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char,int) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char,int) while <= && != - if call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.isEqual(char,int) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.isEqual(char,int) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.isEqual(char,int) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.isEqual(char,int) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.isEqual(char,int) && > = call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) = new while < && == ++ if < && == call SegToken.append() call SegToken.append() call SegToken.append() call SegToken.append() call SegToken.append() = new call SegToken.length() call SegToken.length() call SegToken.length() call SegToken.length() call SegToken.length() call SegToken.getChars() call SegToken.getChars() call SegToken.getChars() call SegToken.getChars() call SegToken.getChars() = call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char,int) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char,int) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char,int) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char,int) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char,int) ++ else break ++ break case = case = + while < && == || == if == = ++ = = call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) = : = new = break case = case = + while < && == || == if == = ++ = = call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) = : = new = break case = + = = new = new = break default: = + = = call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) = new = break = = call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) = new - = = call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char) = new + return int decl int private static private static decl_stmt int = decl_stmt int = new for = < ++ = return BiSegGraph SegGraph decl List public < public < decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.SegGraph = decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph = new decl_stmt java.util.List < = call org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.getShortPath() call org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.getShortPath() call org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.getShortPath() call org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.getShortPath() call org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.getShortPath() return