org.apache.lucene.index java.io.IOException import java.math.BigInteger import java.net.InetAddress import org.apache.lucene.document.BinaryPoint import org.apache.lucene.document.DoublePoint import org.apache.lucene.document.Field import org.apache.lucene.document.FloatPoint import org.apache.lucene.document.IntPoint import org.apache.lucene.document.LongPoint import org.apache.lucene.util.StringHelper import org.apache.lucene.util.bkd.BKDWriter import class org.apache.lucene.index.PointValues int int PointValues long public static public static throws decl_stmt long = for : decl_stmt org.apache.lucene.index.PointValues = if != += call PointValues.size() call PointValues.size() call PointValues.size() call PointValues.size() call PointValues.size() return int PointValues public static public static throws decl_stmt int = for : decl_stmt org.apache.lucene.index.PointValues = if != += call org.apache.lucene.index.PointValues.getDocCount(IndexReader,String) call org.apache.lucene.index.PointValues.getDocCount(IndexReader,String) call org.apache.lucene.index.PointValues.getDocCount(IndexReader,String) call org.apache.lucene.index.PointValues.getDocCount(IndexReader,String) call org.apache.lucene.index.PointValues.getDocCount(IndexReader,String) return int decl byte decl byte int PointValues int public static public static throws decl_stmt byte = for : decl_stmt org.apache.lucene.index.PointValues = if == continue decl_stmt byte = call org.apache.lucene.index.PointValues.getMinPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMinPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMinPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMinPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMinPackedValue(IndexReader,String) if == continue if == = call decl byte.clone() call decl byte.clone() call decl byte.clone() call decl byte.clone() call decl byte.clone() else decl_stmt int final final = call PointValues.getNumDimensions() call PointValues.getNumDimensions() call PointValues.getNumDimensions() call PointValues.getNumDimensions() call PointValues.getNumDimensions() decl_stmt int final final = call PointValues.getBytesPerDimension() call PointValues.getBytesPerDimension() call PointValues.getBytesPerDimension() call PointValues.getBytesPerDimension() call PointValues.getBytesPerDimension() for = < ++ decl_stmt int = * if < return int decl byte decl byte int PointValues int public static public static throws decl_stmt byte = for : decl_stmt org.apache.lucene.index.PointValues = if == continue decl_stmt byte = call org.apache.lucene.index.PointValues.getMaxPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMaxPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMaxPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMaxPackedValue(IndexReader,String) call org.apache.lucene.index.PointValues.getMaxPackedValue(IndexReader,String) if == continue if == = call decl byte.clone() call decl byte.clone() call decl byte.clone() call decl byte.clone() call decl byte.clone() else decl_stmt int final final = call PointValues.getNumDimensions() call PointValues.getNumDimensions() call PointValues.getNumDimensions() call PointValues.getNumDimensions() call PointValues.getNumDimensions() decl_stmt int final final = call PointValues.getBytesPerDimension() call PointValues.getBytesPerDimension() call PointValues.getBytesPerDimension() call PointValues.getBytesPerDimension() call PointValues.getBytesPerDimension() for = < ++ decl_stmt int = * if > return default default