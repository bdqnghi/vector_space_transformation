org.apache.lucene.mockfile java.io.IOException import java.nio.ByteBuffer import java.nio.channels.AsynchronousFileChannel import java.nio.channels.CompletionHandler import java.nio.channels.FileLock import java.util.Objects import java.util.concurrent.Future import class org.apache.lucene.mockfile.FilterAsynchronousFileChannel super super extends AsynchronousFileChannel public public throws call AsynchronousFileChannel.close() call AsynchronousFileChannel.close() call AsynchronousFileChannel.close() call AsynchronousFileChannel.close() call AsynchronousFileChannel.close() public public return call AsynchronousFileChannel.isOpen() call AsynchronousFileChannel.isOpen() call AsynchronousFileChannel.isOpen() call AsynchronousFileChannel.isOpen() call AsynchronousFileChannel.isOpen() public public throws return call AsynchronousFileChannel.size() call AsynchronousFileChannel.size() call AsynchronousFileChannel.size() call AsynchronousFileChannel.size() call AsynchronousFileChannel.size() public public throws call AsynchronousFileChannel.truncate() call AsynchronousFileChannel.truncate() call AsynchronousFileChannel.truncate() call AsynchronousFileChannel.truncate() call AsynchronousFileChannel.truncate() return public public throws call AsynchronousFileChannel.force() call AsynchronousFileChannel.force() call AsynchronousFileChannel.force() call AsynchronousFileChannel.force() call AsynchronousFileChannel.force() public < public < < super super call java.nio.channels.AsynchronousFileChannel.lock(A,CompletionHandler) call java.nio.channels.AsynchronousFileChannel.lock(A,CompletionHandler) call java.nio.channels.AsynchronousFileChannel.lock(A,CompletionHandler) call java.nio.channels.AsynchronousFileChannel.lock(A,CompletionHandler) call java.nio.channels.AsynchronousFileChannel.lock(A,CompletionHandler) public < public < return call java.nio.channels.AsynchronousFileChannel.lock(A,CompletionHandler) call java.nio.channels.AsynchronousFileChannel.lock(A,CompletionHandler) call java.nio.channels.AsynchronousFileChannel.lock(A,CompletionHandler) call java.nio.channels.AsynchronousFileChannel.lock(A,CompletionHandler) call java.nio.channels.AsynchronousFileChannel.lock(A,CompletionHandler) public public throws return call java.nio.channels.AsynchronousFileChannel.tryLock() call java.nio.channels.AsynchronousFileChannel.tryLock() call java.nio.channels.AsynchronousFileChannel.tryLock() call java.nio.channels.AsynchronousFileChannel.tryLock() call java.nio.channels.AsynchronousFileChannel.tryLock() public < public < < super super call AsynchronousFileChannel.read() call AsynchronousFileChannel.read() call AsynchronousFileChannel.read() call AsynchronousFileChannel.read() call AsynchronousFileChannel.read() public < public < return call AsynchronousFileChannel.read() call AsynchronousFileChannel.read() call AsynchronousFileChannel.read() call AsynchronousFileChannel.read() call AsynchronousFileChannel.read() public < public < < super super call AsynchronousFileChannel.write() call AsynchronousFileChannel.write() call AsynchronousFileChannel.write() call AsynchronousFileChannel.write() call AsynchronousFileChannel.write() public < public < return call AsynchronousFileChannel.write() call AsynchronousFileChannel.write() call AsynchronousFileChannel.write() call AsynchronousFileChannel.write() call AsynchronousFileChannel.write()