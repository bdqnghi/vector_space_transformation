org.apache.lucene.index java.util.ArrayList import java.util.IdentityHashMap import java.util.Iterator import java.util.LinkedList import java.util.List import java.util.Queue import java.util.concurrent.atomic.AtomicBoolean import org.apache.lucene.index.DocumentsWriterPerThreadPool.ThreadState import org.apache.lucene.util.Accountable import org.apache.lucene.util.InfoStream import org.apache.lucene.util.ThreadInterruptedException import class org.apache.lucene.index.DocumentsWriterFlushControl super super implements DocumentsWriterStallControl long InfoStream long DocumentsWriterPerThreadPool int boolean long FlushPolicy DocumentsWriter boolean long LiveIndexWriterConfig BufferedUpdatesStream double decl Queue long boolean decl Queue decl List int long decl IdentityHashMap long AtomicBoolean public synchronized public synchronized return public synchronized public synchronized return public synchronized public synchronized return + double private private decl_stmt double final final = call org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB() call org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB() call org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB() call org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB() call org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB() return != * * * : long double long long private private decl_stmt double final final = call org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB() call org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB() call org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB() call org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB() call org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB() if != && == = decl_stmt long final final = + decl_stmt long final final = * * decl_stmt long final final = * + + + * + * if < >> assert <= : + + + + + + + + + + + + + + + + + + + else = return long private private decl_stmt long final final = - += if += else += assert private private = = = = return DocumentsWriterPerThread boolean synchronized synchronized try if ! if call FlushPolicy.onUpdate() call FlushPolicy.onUpdate() call FlushPolicy.onUpdate() call FlushPolicy.onUpdate() call FlushPolicy.onUpdate() else call FlushPolicy.onInsert() call FlushPolicy.onInsert() call FlushPolicy.onInsert() call FlushPolicy.onInsert() call FlushPolicy.onInsert() if ! && > decl_stmt org.apache.lucene.index.DocumentsWriterPerThread final final if if = else = else = return finally decl_stmt boolean = assert && private private if ++ else = return Long synchronized synchronized assert call decl IdentityHashMap.containsKey() call decl IdentityHashMap.containsKey() call decl IdentityHashMap.containsKey() call decl IdentityHashMap.containsKey() call decl IdentityHashMap.containsKey() try decl_stmt java.lang.Long = call decl IdentityHashMap.remove() call decl IdentityHashMap.remove() call decl IdentityHashMap.remove() call decl IdentityHashMap.remove() call decl IdentityHashMap.remove() -= call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call org.apache.lucene.index.DocumentsWriterPerThreadPool.recycle(DocumentsWriterPerThread) call org.apache.lucene.index.DocumentsWriterPerThreadPool.recycle(DocumentsWriterPerThread) call org.apache.lucene.index.DocumentsWriterPerThreadPool.recycle(DocumentsWriterPerThread) call org.apache.lucene.index.DocumentsWriterPerThreadPool.recycle(DocumentsWriterPerThread) call org.apache.lucene.index.DocumentsWriterPerThreadPool.recycle(DocumentsWriterPerThread) assert finally try finally boolean long private private assert decl_stmt long final final = decl_stmt boolean final final = + > && < && ! call org.apache.lucene.index.DocumentsWriterStallControl.updateStalled(boolean) call org.apache.lucene.index.DocumentsWriterStallControl.updateStalled(boolean) call org.apache.lucene.index.DocumentsWriterStallControl.updateStalled(boolean) call org.apache.lucene.index.DocumentsWriterStallControl.updateStalled(boolean) call org.apache.lucene.index.DocumentsWriterStallControl.updateStalled(boolean) return public synchronized public synchronized while call decl IdentityHashMap.size() call decl IdentityHashMap.size() call decl IdentityHashMap.size() call decl IdentityHashMap.size() call decl IdentityHashMap.size() != try catch throw new long public synchronized public synchronized assert ! if > = decl_stmt long final final = += -= ++ assert synchronized synchronized try if -= else -= assert call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() finally synchronized synchronized return : DocumentsWriterPerThread long private private try assert : assert : decl_stmt org.apache.lucene.index.DocumentsWriterPerThread final final decl_stmt long final final = = call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() -- call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() new finally DocumentsWriterPerThread long private private assert assert try if try if assert decl_stmt org.apache.lucene.index.DocumentsWriterPerThread final final decl_stmt long final final = = call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() assert ! call decl IdentityHashMap.containsKey() call decl IdentityHashMap.containsKey() call decl IdentityHashMap.containsKey() call decl IdentityHashMap.containsKey() call decl IdentityHashMap.containsKey() : call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl IdentityHashMap.put() -- return finally return finally public public return + + + + int boolean ThreadState DocumentsWriterPerThread int DocumentsWriterPerThread decl_stmt int decl_stmt boolean synchronized decl_stmt org.apache.lucene.index.DocumentsWriterPerThread final final if = call decl Queue.poll() call decl Queue.poll() call decl Queue.poll() call decl Queue.poll() call decl Queue.poll() != return = = if > && ! decl_stmt int final final = call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() for = < && && ++ decl_stmt ThreadState final final = call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) if decl_stmt org.apache.lucene.index.DocumentsWriterPerThread final final = if != return return synchronized synchronized = public < public < return call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() int private < private < final final return new < decl_stmt int = public public return < public public return call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) ++ public public throw new public public return < public public return call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) ++ public public throw new synchronized synchronized call FlushPolicy.onDelete() call FlushPolicy.onDelete() call FlushPolicy.onDelete() call FlushPolicy.onDelete() call FlushPolicy.onDelete() public public return call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() + call org.apache.lucene.index.BufferedUpdatesStream.numTerms() call org.apache.lucene.index.BufferedUpdatesStream.numTerms() call org.apache.lucene.index.BufferedUpdatesStream.numTerms() call org.apache.lucene.index.BufferedUpdatesStream.numTerms() call org.apache.lucene.index.BufferedUpdatesStream.numTerms() public public return call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() call DocumentsWriter.deleteQueue() + call org.apache.lucene.index.BufferedUpdatesStream.ramBytesUsed() call org.apache.lucene.index.BufferedUpdatesStream.ramBytesUsed() call org.apache.lucene.index.BufferedUpdatesStream.ramBytesUsed() call org.apache.lucene.index.BufferedUpdatesStream.ramBytesUsed() call org.apache.lucene.index.BufferedUpdatesStream.ramBytesUsed() public public return + synchronized synchronized return call decl IdentityHashMap.size() call decl IdentityHashMap.size() call decl IdentityHashMap.size() call decl IdentityHashMap.size() call decl IdentityHashMap.size() public public return call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() public public call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) return ThreadState boolean decl_stmt ThreadState final final = call org.apache.lucene.index.DocumentsWriterPerThreadPool.getAndLock(Thread,DocumentsWriter) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getAndLock(Thread,DocumentsWriter) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getAndLock(Thread,DocumentsWriter) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getAndLock(Thread,DocumentsWriter) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getAndLock(Thread,DocumentsWriter) decl_stmt boolean = try if call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() && != = return finally if ! call org.apache.lucene.index.DocumentsWriterPerThreadPool.release(ThreadState) call org.apache.lucene.index.DocumentsWriterPerThreadPool.release(ThreadState) call org.apache.lucene.index.DocumentsWriterPerThreadPool.release(ThreadState) call org.apache.lucene.index.DocumentsWriterPerThreadPool.release(ThreadState) call org.apache.lucene.index.DocumentsWriterPerThreadPool.release(ThreadState) DocumentsWriterDeleteQueue DocumentsWriterDeleteQueue int ThreadState decl_stmt org.apache.lucene.index.DocumentsWriterDeleteQueue final final synchronized assert ! : assert call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() : + = = decl_stmt org.apache.lucene.index.DocumentsWriterDeleteQueue = new + = decl_stmt int final final = call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() for = < ++ decl_stmt ThreadState final final = call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call ThreadState.lock() call ThreadState.lock() call ThreadState.lock() call ThreadState.lock() call ThreadState.lock() try if ! call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() continue assert == || == : + + + + + + + call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() if != continue finally call ThreadState.unlock() call ThreadState.unlock() call ThreadState.unlock() call ThreadState.unlock() call ThreadState.unlock() synchronized assert call decl Queue.addAll() call decl Queue.addAll() call decl Queue.addAll() call decl Queue.addAll() call decl Queue.addAll() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() assert int ThreadState private private decl_stmt int final final = call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() call org.apache.lucene.index.DocumentsWriterPerThreadPool.getActiveThreadStateCount() for = < ++ decl_stmt ThreadState final final = call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call org.apache.lucene.index.DocumentsWriterPerThreadPool.getThreadState(int) call ThreadState.lock() call ThreadState.lock() call ThreadState.lock() call ThreadState.lock() call ThreadState.lock() try assert ! call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() || == : + call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() + + call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.isInitialized() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() call ThreadState.dwpt() : finally call ThreadState.unlock() call ThreadState.unlock() call ThreadState.unlock() call ThreadState.unlock() call ThreadState.unlock() return DocumentsWriterPerThread DocumentsWriterPerThread if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + decl_stmt org.apache.lucene.index.DocumentsWriterPerThread final final = assert assert assert assert != if call org.apache.lucene.index.DocumentsWriterPerThread.getNumDocsInRAM() call org.apache.lucene.index.DocumentsWriterPerThread.getNumDocsInRAM() call org.apache.lucene.index.DocumentsWriterPerThread.getNumDocsInRAM() call org.apache.lucene.index.DocumentsWriterPerThread.getNumDocsInRAM() call org.apache.lucene.index.DocumentsWriterPerThread.getNumDocsInRAM() > synchronized if ! decl_stmt org.apache.lucene.index.DocumentsWriterPerThread final final = assert != : assert == : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() call org.apache.lucene.index.DocumentsWriterPerThreadPool.reset() BlockedFlush decl Iterator private private final final decl_stmt java.util.Iterator < = call decl Queue.iterator() call decl Queue.iterator() call decl Queue.iterator() call decl Queue.iterator() call decl Queue.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt BlockedFlush = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if == call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() assert ! call decl IdentityHashMap.containsKey() call decl IdentityHashMap.containsKey() call decl IdentityHashMap.containsKey() call decl IdentityHashMap.containsKey() call decl IdentityHashMap.containsKey() : call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() synchronized synchronized assert assert call decl Queue.isEmpty() call decl Queue.isEmpty() call decl Queue.isEmpty() call decl Queue.isEmpty() call decl Queue.isEmpty() assert call decl IdentityHashMap.isEmpty() call decl IdentityHashMap.isEmpty() call decl IdentityHashMap.isEmpty() call decl IdentityHashMap.isEmpty() call decl IdentityHashMap.isEmpty() try if ! call decl Queue.isEmpty() call decl Queue.isEmpty() call decl Queue.isEmpty() call decl Queue.isEmpty() call decl Queue.isEmpty() assert assert call decl Queue.isEmpty() call decl Queue.isEmpty() call decl Queue.isEmpty() call decl Queue.isEmpty() call decl Queue.isEmpty() finally = for : assert == return synchronized synchronized try finally = synchronized synchronized try for : try call org.apache.lucene.index.DocumentsWriter.subtractFlushedNumDocs(int) call org.apache.lucene.index.DocumentsWriter.subtractFlushedNumDocs(int) call org.apache.lucene.index.DocumentsWriter.subtractFlushedNumDocs(int) call org.apache.lucene.index.DocumentsWriter.subtractFlushedNumDocs(int) call org.apache.lucene.index.DocumentsWriter.subtractFlushedNumDocs(int) catch finally for : try call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl IdentityHashMap.put() call org.apache.lucene.index.DocumentsWriter.subtractFlushedNumDocs(int) call org.apache.lucene.index.DocumentsWriter.subtractFlushedNumDocs(int) call org.apache.lucene.index.DocumentsWriter.subtractFlushedNumDocs(int) call org.apache.lucene.index.DocumentsWriter.subtractFlushedNumDocs(int) call org.apache.lucene.index.DocumentsWriter.subtractFlushedNumDocs(int) catch finally finally call decl Queue.clear() call decl Queue.clear() call decl Queue.clear() call decl Queue.clear() call decl Queue.clear() call decl Queue.clear() call decl Queue.clear() call decl Queue.clear() call decl Queue.clear() call decl Queue.clear() synchronized synchronized return synchronized synchronized return call decl Queue.size() call decl Queue.size() call decl Queue.size() call decl Queue.size() call decl Queue.size() synchronized synchronized return call decl Queue.size() call decl Queue.size() call decl Queue.size() call decl Queue.size() call decl Queue.size() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call decl Queue.size() call decl Queue.size() call decl Queue.size() call decl Queue.size() call decl Queue.size() + + + + + + call org.apache.lucene.index.DocumentsWriterStallControl.waitIfStalled() call org.apache.lucene.index.DocumentsWriterStallControl.waitIfStalled() call org.apache.lucene.index.DocumentsWriterStallControl.waitIfStalled() call org.apache.lucene.index.DocumentsWriterStallControl.waitIfStalled() call org.apache.lucene.index.DocumentsWriterStallControl.waitIfStalled() return call org.apache.lucene.index.DocumentsWriterStallControl.anyStalledThreads() call org.apache.lucene.index.DocumentsWriterStallControl.anyStalledThreads() call org.apache.lucene.index.DocumentsWriterStallControl.anyStalledThreads() call org.apache.lucene.index.DocumentsWriterStallControl.anyStalledThreads() call org.apache.lucene.index.DocumentsWriterStallControl.anyStalledThreads() public public return