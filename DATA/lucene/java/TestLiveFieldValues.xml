org.apache.lucene.search java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.List import java.util.Locale import java.util.Map import java.util.Random import java.util.concurrent.CountDownLatch import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.StoredField import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.IndexWriterConfig import org.apache.lucene.index.Term import org.apache.lucene.store.Directory import org.apache.lucene.util.BytesRef import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import class org.apache.lucene.search.TestLiveFieldValues super super extends Random int int String decl LiveFieldValues TermQuery Integer double int double Integer IndexWriterConfig String Integer int CountDownLatch SearcherManager decl List double TopDocs Thread Document IndexSearcher decl Map IndexWriter decl List Directory public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.IndexWriterConfig = new decl_stmt org.apache.lucene.index.IndexWriter final final = new decl_stmt org.apache.lucene.search.SearcherManager final final = new new public public return new decl_stmt java.lang.Integer final final = - decl_stmt org.apache.lucene.search.LiveFieldValues final final final < = new < protected protected throws decl_stmt org.apache.lucene.search.TermQuery = new new decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) <= if == return else decl_stmt org.apache.lucene.document.Document = call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) return call Document.getField() call Document.getField() call Document.getField() call Document.getField() call Document.getField() decl_stmt int = if + decl_stmt java.util.concurrent.CountDownLatch final final = new decl_stmt java.util.List < = new <> decl_stmt int final final = decl_stmt int final final = decl_stmt double final final = * decl_stmt double final final = * decl_stmt double final final = * for = < ++ decl_stmt int final final = decl_stmt java.util.Random final final = new decl_stmt java.lang.Thread = new public public try decl_stmt java.util.Map < = new <> decl_stmt java.util.List < = new < call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) for = < ++ decl_stmt org.apache.lucene.document.Document = new if call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() <= decl_stmt java.lang.String = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt java.lang.Integer = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) new call decl LiveFieldValues.add() call decl LiveFieldValues.add() call decl LiveFieldValues.add() call decl LiveFieldValues.add() call decl LiveFieldValues.add() if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > && call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() <= decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) new new call decl LiveFieldValues.delete() call decl LiveFieldValues.delete() call decl LiveFieldValues.delete() call decl LiveFieldValues.delete() call decl LiveFieldValues.delete() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() <= || call decl LiveFieldValues.size() call decl LiveFieldValues.size() call decl LiveFieldValues.size() call decl LiveFieldValues.size() call decl LiveFieldValues.size() > call SearcherManager.maybeRefresh() call SearcherManager.maybeRefresh() call SearcherManager.maybeRefresh() call SearcherManager.maybeRefresh() call SearcherManager.maybeRefresh() if decl_stmt org.apache.lucene.search.IndexSearcher = call SearcherManager.acquire() call SearcherManager.acquire() call SearcherManager.acquire() call SearcherManager.acquire() call SearcherManager.acquire() try + finally call SearcherManager.release() call SearcherManager.release() call SearcherManager.release() call SearcherManager.release() call SearcherManager.release() + call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() + if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == call decl LiveFieldValues.get() call decl LiveFieldValues.get() call decl LiveFieldValues.get() call decl LiveFieldValues.get() call decl LiveFieldValues.get() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = + call decl LiveFieldValues.get() call decl LiveFieldValues.get() call decl LiveFieldValues.get() call decl LiveFieldValues.get() call decl LiveFieldValues.get() catch throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() for : call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call SearcherManager.maybeRefresh() call SearcherManager.maybeRefresh() call SearcherManager.maybeRefresh() call SearcherManager.maybeRefresh() call SearcherManager.maybeRefresh() call decl LiveFieldValues.size() call decl LiveFieldValues.size() call decl LiveFieldValues.size() call decl LiveFieldValues.size() call decl LiveFieldValues.size() call decl LiveFieldValues.close() call decl LiveFieldValues.close() call decl LiveFieldValues.close() call decl LiveFieldValues.close() call decl LiveFieldValues.close() call SearcherManager.close() call SearcherManager.close() call SearcherManager.close() call SearcherManager.close() call SearcherManager.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() public public return new Document TopDocs TermQuery protected protected throws decl_stmt org.apache.lucene.search.TermQuery = new new decl_stmt org.apache.lucene.search.TopDocs = <= if == return else decl_stmt org.apache.lucene.document.Document = return call Document.getField() call Document.getField() call Document.getField() call Document.getField() call Document.getField() String Document Integer IndexSearcher decl Map Integer decl List String public public try decl_stmt java.util.Map < = new <> decl_stmt java.util.List < = new < for = < ++ decl_stmt org.apache.lucene.document.Document = new if <= decl_stmt java.lang.String = decl_stmt java.lang.Integer = call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() new if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > && <= decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() new new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if <= || > if decl_stmt org.apache.lucene.search.IndexSearcher = try + finally + call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() + if == if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = + catch throw new