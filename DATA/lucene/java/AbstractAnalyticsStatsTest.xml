org.apache.solr.analytics java.io.ByteArrayInputStream import java.io.FileNotFoundException import java.io.IOException import java.io.InputStream import java.nio.charset.StandardCharsets import java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.Scanner import javax.xml.parsers.DocumentBuilder import javax.xml.parsers.DocumentBuilderFactory import javax.xml.parsers.ParserConfigurationException import javax.xml.xpath.XPathConstants import javax.xml.xpath.XPathExpressionException import javax.xml.xpath.XPathFactory import org.apache.commons.lang.StringUtils import org.apache.lucene.util.IOUtils import org.apache.solr.SolrTestCaseJ4 import org.apache.solr.analytics.util.MedianCalculator import org.apache.solr.analytics.util.PercentileCalculator import org.apache.solr.request.SolrQueryRequest import org.junit.AfterClass import org.junit.BeforeClass import org.w3c.dom.Document import org.xml.sax.InputSource import org.xml.sax.SAXException import com.google.common.collect.ObjectArrays import class org.apache.solr.analytics.AbstractAnalyticsStatsTest super super extends String Document XPathFactory decl String decl HashMap public public return public static public static = public static public static = = = call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() DocumentBuilder DocumentBuilderFactory public static public static throws decl_stmt DocumentBuilderFactory = call DocumentBuilderFactory.setNamespaceAware() call DocumentBuilderFactory.setNamespaceAware() call DocumentBuilderFactory.setNamespaceAware() call DocumentBuilderFactory.setNamespaceAware() call DocumentBuilderFactory.setNamespaceAware() decl_stmt org.apache.solr.update.DocumentBuilder = call DocumentBuilderFactory.newDocumentBuilder() call DocumentBuilderFactory.newDocumentBuilder() call DocumentBuilderFactory.newDocumentBuilder() call DocumentBuilderFactory.newDocumentBuilder() call DocumentBuilderFactory.newDocumentBuilder() = call DocumentBuilder.parse() call DocumentBuilder.parse() call DocumentBuilder.parse() call DocumentBuilder.parse() call DocumentBuilder.parse() new new = protected protected return StringBuilder String public public throws decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() try switch case return case return case return case return case != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > return case != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > return catch + call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() + + return double Double double double public < extends extends & extends extends & extends extends & < public < extends extends & extends extends & extends extends & < < decl_stmt java.lang.Double if = else if decl_stmt double = for : += = / else if decl_stmt double = for : += = else if decl_stmt double = for : += * = else if decl_stmt double = decl_stmt double = for : += += * = / - * / * else throw new return decl double decl HashSet Object public < extends extends extends < public < extends extends extends < < decl_stmt java.lang.Object if decl_stmt double = new / = else if = else if decl_stmt java.util.HashSet < = new <> call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() = long call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() else if = - else if = else = return long T public < extends extends extends < public < extends extends extends < < decl_stmt T = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() decl_stmt long = for : if == ++ return public static public static return decl ArrayList decl String String Scanner InputStream public static public static < throws decl_stmt java.io.InputStream = if == throw new + decl_stmt sun.tools.java.Scanner = new try decl_stmt java.util.ArrayList < = new <> while call sun.tools.java.Scanner.hasNextLine() call sun.tools.java.Scanner.hasNextLine() call sun.tools.java.Scanner.hasNextLine() call sun.tools.java.Scanner.hasNextLine() call sun.tools.java.Scanner.hasNextLine() decl_stmt java.lang.String = call sun.tools.java.Scanner.nextLine() call sun.tools.java.Scanner.nextLine() call sun.tools.java.Scanner.nextLine() call sun.tools.java.Scanner.nextLine() call sun.tools.java.Scanner.nextLine() = call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() if || call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) continue decl_stmt java.lang.String = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new finally