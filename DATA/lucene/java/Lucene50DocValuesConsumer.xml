org.apache.lucene.codecs.lucene50 java.io.Closeable import java.io.IOException import java.util.Arrays import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.Map import java.util.Set import java.util.SortedSet import java.util.TreeSet import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.DocValuesConsumer import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.store.IndexOutput import org.apache.lucene.store.RAMOutputStream import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LongsRef import org.apache.lucene.util.MathUtil import org.apache.lucene.util.PagedBytes import org.apache.lucene.util.PagedBytes.PagedBytesDataInput import org.apache.lucene.util.StringHelper import org.apache.lucene.util.packed.DirectWriter import org.apache.lucene.util.packed.MonotonicBlockPackedWriter import org.apache.lucene.util.packed.PackedInts import static static org.apache.lucene.codecs.lucene50.Lucene50DocValuesFormat.* import class org.apache.lucene.codecs.lucene50.Lucene50DocValuesConsumer super super extends super implements int IndexOutput public public < throws int long long decl Long long DirectWriter long long decl HashMap int DirectWriter int long long decl HashSet long int DirectWriter long long long long long < throws decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt java.util.HashSet < = if = new <> for : decl_stmt long final final if == = ++ ++ else = if == ++ if != if < / || / || / = else if != = - = = if != if call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() if call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() > = ++ else for : decl_stmt long = = = ++ decl_stmt long final final = - decl_stmt int final final = decl_stmt int final final = == : call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() - decl_stmt int final final if != && <= && call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() == || call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() == && > && == = else if != && < = else if != && != decl_stmt long final final = - / decl_stmt long final final = = < : else = call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() if == call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() else if == call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() else call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeVLong() switch case call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() < : break case call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() decl_stmt long final final = - / decl_stmt int final final = call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() decl_stmt org.apache.lucene.util.packed.DirectWriter final final = for : decl_stmt long = == : call org.apache.lucene.util.packed.DirectWriter.add(long) call org.apache.lucene.util.packed.DirectWriter.add(long) call org.apache.lucene.util.packed.DirectWriter.add(long) call org.apache.lucene.util.packed.DirectWriter.add(long) call org.apache.lucene.util.packed.DirectWriter.add(long) - / call DirectWriter.finish() call DirectWriter.finish() call DirectWriter.finish() call DirectWriter.finish() call DirectWriter.finish() break case decl_stmt long final final = < : call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() decl_stmt org.apache.lucene.util.packed.DirectWriter final final = for : decl_stmt long = == : call org.apache.lucene.util.packed.DirectWriter.add(long) call org.apache.lucene.util.packed.DirectWriter.add(long) call org.apache.lucene.util.packed.DirectWriter.add(long) call org.apache.lucene.util.packed.DirectWriter.add(long) call org.apache.lucene.util.packed.DirectWriter.add(long) - call DirectWriter.finish() call DirectWriter.finish() call DirectWriter.finish() call DirectWriter.finish() call DirectWriter.finish() break case decl_stmt java.lang.Long final final final = call decl HashSet.toArray() call decl HashSet.toArray() call decl HashSet.toArray() call decl HashSet.toArray() call decl HashSet.toArray() new call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() decl_stmt HashMap final final final < = new <> call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() for = < ++ call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() decl_stmt org.apache.lucene.util.packed.DirectWriter final final = for : call org.apache.lucene.util.packed.DirectWriter.add(long) call org.apache.lucene.util.packed.DirectWriter.add(long) call org.apache.lucene.util.packed.DirectWriter.add(long) call org.apache.lucene.util.packed.DirectWriter.add(long) call org.apache.lucene.util.packed.DirectWriter.add(long) call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() == : call DirectWriter.finish() call DirectWriter.finish() call DirectWriter.finish() call DirectWriter.finish() call DirectWriter.finish() break default: throw new call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() int byte < throws decl_stmt byte = decl_stmt int = for : if == call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() = = if != |= << & ++ if > call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() long MonotonicBlockPackedWriter long int int int long long public public < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() decl_stmt int = decl_stmt int = decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt long = decl_stmt long = for : decl_stmt int final final if == = ++ else = = = if != call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() ++ call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() == : if == call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() else if == call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() else call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() if != call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedWriter final final = new decl_stmt long = call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() for : if != += call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() RAMOutputStream long long int int int long BytesRefBuilder int RAMOutputStream RAMOutputStream MonotonicBlockPackedWriter int long int private private final final final < throws decl_stmt int = decl_stmt int = decl_stmt long = for : = = ++ if == else if < else assert > call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() - decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt org.apache.lucene.store.RAMOutputStream = new decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedWriter = new decl_stmt org.apache.lucene.store.RAMOutputStream = new decl_stmt org.apache.lucene.store.RAMOutputStream = new decl_stmt org.apache.lucene.util.BytesRefBuilder = new call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) decl_stmt long = decl_stmt int = new for : decl_stmt int = & if == call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() - call RAMOutputStream.writeVInt() call RAMOutputStream.writeVInt() call RAMOutputStream.writeVInt() call RAMOutputStream.writeVInt() call RAMOutputStream.writeVInt() call org.apache.lucene.store.RAMOutputStream.writeBytes(byte,int,int) call org.apache.lucene.store.RAMOutputStream.writeBytes(byte,int,int) call org.apache.lucene.store.RAMOutputStream.writeBytes(byte,int,int) call org.apache.lucene.store.RAMOutputStream.writeBytes(byte,int,int) call org.apache.lucene.store.RAMOutputStream.writeBytes(byte,int,int) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) else decl_stmt int = call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.store.RAMOutputStream.writeByte(byte) call org.apache.lucene.store.RAMOutputStream.writeByte(byte) call org.apache.lucene.store.RAMOutputStream.writeByte(byte) call org.apache.lucene.store.RAMOutputStream.writeByte(byte) call org.apache.lucene.store.RAMOutputStream.writeByte(byte) byte call org.apache.lucene.store.RAMOutputStream.writeBytes(byte,int,int) call org.apache.lucene.store.RAMOutputStream.writeBytes(byte,int,int) call org.apache.lucene.store.RAMOutputStream.writeBytes(byte,int,int) call org.apache.lucene.store.RAMOutputStream.writeBytes(byte,int,int) call org.apache.lucene.store.RAMOutputStream.writeBytes(byte,int,int) + - = - - ++ if & == decl_stmt int = & if > decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) = = call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() boolean private private throws decl_stmt boolean = for = < ++ if > = if byte for = < ++ short else for = < ++ byte long MonotonicBlockPackedWriter BytesRefBuilder PagedBytes long int int PagedBytesDataInput long BytesRef private private final final final < throws decl_stmt long = decl_stmt org.apache.lucene.util.BytesRefBuilder = new call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) decl_stmt org.apache.lucene.util.BytesRef = new decl_stmt long = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt org.apache.lucene.util.PagedBytes = new decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedWriter = new for : decl_stmt int = & if == decl_stmt int = call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() = = = call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(BytesRef) call org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(BytesRef) call org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(BytesRef) call org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(BytesRef) call org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(BytesRef) else if == call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) ++ call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() decl_stmt long = call org.apache.lucene.util.PagedBytes.getPointer() call org.apache.lucene.util.PagedBytes.getPointer() call org.apache.lucene.util.PagedBytes.getPointer() call org.apache.lucene.util.PagedBytes.getPointer() call org.apache.lucene.util.PagedBytes.getPointer() call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) decl_stmt PagedBytesDataInput = call org.apache.lucene.util.PagedBytes.getDataInput() call org.apache.lucene.util.PagedBytes.getDataInput() call org.apache.lucene.util.PagedBytes.getDataInput() call org.apache.lucene.util.PagedBytes.getDataInput() call org.apache.lucene.util.PagedBytes.getDataInput() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.copyBytes() call IndexOutput.copyBytes() call IndexOutput.copyBytes() call IndexOutput.copyBytes() call IndexOutput.copyBytes() public public < < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() decl SortedSet public public final final final < final final final < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() if call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() else decl_stmt java.util.SortedSet final final final < = if != call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() else call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() decl SortedSet public public < final final final < final final final < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() if call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() - else decl_stmt java.util.SortedSet final final final < = if != call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() else call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() int decl Iterator decl Set decl Iterator LongsRef private < private < < < decl_stmt java.util.Set < = new <> decl_stmt org.apache.lucene.util.LongsRef = new decl_stmt java.util.Iterator < = decl_stmt java.util.Iterator < = decl_stmt int = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if > return for = < ++ = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() continue += if > return call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() new assert call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() == return new <> int private private < throws decl_stmt int = for : += call int.writeInt() call int.writeInt() call int.writeInt() call int.writeInt() call int.writeInt() for : for = < ++ call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() + call int.writeInt() call int.writeInt() call int.writeInt() call int.writeInt() call int.writeInt() for : call int.writeInt() call int.writeInt() call int.writeInt() call int.writeInt() call int.writeInt() decl Iterator decl Map int decl Iterator LongsRef Integer private < private < < < < decl_stmt java.util.Map final final final < = new <> decl_stmt int = for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() ++ assert == return new < public < public < decl_stmt java.util.Iterator final final final < = decl_stmt java.util.Iterator final final final < = decl_stmt org.apache.lucene.util.LongsRef final final = new return new < public public return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() for = < ++ = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.lang.Integer final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() assert != return decl Iterator decl Iterator LongsRef Integer public < public < decl_stmt java.util.Iterator final final final < = decl_stmt java.util.Iterator final final final < = decl_stmt org.apache.lucene.util.LongsRef final final = new return new < public public return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() for = < ++ = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.lang.Integer final final = assert != return public public return Integer public public = for = < ++ = decl_stmt java.lang.Integer final final = assert != return MonotonicBlockPackedWriter long private private < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() - call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedWriter final final = new decl_stmt long = call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() for : += call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() boolean public public throws decl_stmt boolean = try if != call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() - if != = finally if else = =