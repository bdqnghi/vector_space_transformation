org.apache.solr.handler.admin java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collections import java.util.List import java.util.concurrent.atomic.AtomicBoolean import org.apache.solr.common.SolrDocumentList import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.core.CoreContainer import org.apache.solr.core.SolrCore import org.apache.solr.handler.RequestHandlerBase import org.apache.solr.logging.LogWatcher import org.apache.solr.logging.LoggerInfo import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.util.plugin.SolrCoreAware import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.handler.admin.LoggingHandler super super extends super implements Logger LogWatcher public public if == = String decl List decl List decl String String SolrDocumentList String SolrParams decl String long AtomicBoolean public public throws if == return call LogWatcher.getName() call LogWatcher.getName() call LogWatcher.getName() call LogWatcher.getName() call LogWatcher.getName() decl_stmt org.apache.solr.common.params.SolrParams = if call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() != call LogWatcher.setThreshold() call LogWatcher.setThreshold() call LogWatcher.setThreshold() call LogWatcher.setThreshold() call LogWatcher.setThreshold() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() != call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) new call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() new call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() new decl_stmt java.lang.String = call SolrParams.getParams() call SolrParams.getParams() call SolrParams.getParams() call SolrParams.getParams() call SolrParams.getParams() if != for : decl_stmt java.lang.String = if != throw new + decl_stmt java.lang.String = decl_stmt java.lang.String = call LogWatcher.setLogLevel() call LogWatcher.setLogLevel() call LogWatcher.setLogLevel() call LogWatcher.setLogLevel() call LogWatcher.setLogLevel() decl_stmt java.lang.String = if != decl_stmt long = - try = catch throw new + decl_stmt java.util.concurrent.atomic.AtomicBoolean = new decl_stmt org.apache.solr.common.SolrDocumentList = call org.apache.solr.logging.LogWatcher.getHistory(long,AtomicBoolean) call org.apache.solr.logging.LogWatcher.getHistory(long,AtomicBoolean) call org.apache.solr.logging.LogWatcher.getHistory(long,AtomicBoolean) call org.apache.solr.logging.LogWatcher.getHistory(long,AtomicBoolean) call org.apache.solr.logging.LogWatcher.getHistory(long,AtomicBoolean) if == return else decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> if > call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call LogWatcher.getAllLevels() call LogWatcher.getAllLevels() call LogWatcher.getAllLevels() call LogWatcher.getAllLevels() call LogWatcher.getAllLevels() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.solr.logging.LogWatcher.getLastEvent() call org.apache.solr.logging.LogWatcher.getLastEvent() call org.apache.solr.logging.LogWatcher.getLastEvent() call org.apache.solr.logging.LogWatcher.getLastEvent() call org.apache.solr.logging.LogWatcher.getLastEvent() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.solr.logging.LogWatcher.getHistorySize() call org.apache.solr.logging.LogWatcher.getHistorySize() call org.apache.solr.logging.LogWatcher.getHistorySize() call org.apache.solr.logging.LogWatcher.getHistorySize() call org.apache.solr.logging.LogWatcher.getHistorySize() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call LogWatcher.getThreshold() call LogWatcher.getThreshold() call LogWatcher.getThreshold() call LogWatcher.getThreshold() call LogWatcher.getThreshold() else call LogWatcher.getAllLevels() call LogWatcher.getAllLevels() call LogWatcher.getAllLevels() call LogWatcher.getAllLevels() call LogWatcher.getAllLevels() decl_stmt java.util.List < = new <> call LogWatcher.getAllLoggers() call LogWatcher.getAllLoggers() call LogWatcher.getAllLoggers() call LogWatcher.getAllLoggers() call LogWatcher.getAllLoggers() decl_stmt java.util.List < < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public return