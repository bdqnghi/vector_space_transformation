org.apache.lucene.util.fst java.io.IOException import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.fst.FST.INPUT_TYPE import org.apache.lucene.util.packed.PackedInts import class long decl NodeHash int T int boolean decl int float boolean decl FST IntsRefBuilder boolean int BytesStore long long public public return public public return + public public return public public return == : long long CompiledNode long private private < throws decl_stmt long final final decl_stmt long = if != && || <= && <= if == = call decl FST.addNode() call decl FST.addNode() call decl FST.addNode() call decl FST.addNode() call decl FST.addNode() = else = call decl NodeHash.add() call decl NodeHash.add() call decl NodeHash.add() call decl NodeHash.add() call decl NodeHash.add() else = call decl FST.addNode() call decl FST.addNode() call decl FST.addNode() call decl FST.addNode() call decl FST.addNode() assert != - decl_stmt long = if != assert > = decl_stmt CompiledNode final final = new = return decl UnCompiledNode decl UnCompiledNode decl UnCompiledNode boolean int T boolean boolean private private throws decl_stmt int final final = for = call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() >= -- decl_stmt boolean = decl_stmt boolean = decl_stmt UnCompiledNode final final final < = decl_stmt UnCompiledNode final final final < = - if < = = else if > if < || == && == && > = else = = else = == if < || == && == && > for = < ++ decl_stmt UnCompiledNode final final final < = < call decl UnCompiledNode.clear() call decl UnCompiledNode.clear() call decl UnCompiledNode.clear() call decl UnCompiledNode.clear() call decl UnCompiledNode.clear() = if call decl UnCompiledNode.clear() call decl UnCompiledNode.clear() call decl UnCompiledNode.clear() call decl UnCompiledNode.clear() call decl UnCompiledNode.clear() call decl UnCompiledNode.deleteLast() call decl UnCompiledNode.deleteLast() call decl UnCompiledNode.deleteLast() call decl UnCompiledNode.deleteLast() call decl UnCompiledNode.deleteLast() call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) - else if != call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() - decl_stmt T final final = decl_stmt boolean final final = || == if call decl UnCompiledNode.replaceLast() call decl UnCompiledNode.replaceLast() call decl UnCompiledNode.replaceLast() call decl UnCompiledNode.replaceLast() call decl UnCompiledNode.replaceLast() call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) - + call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() - else call decl UnCompiledNode.replaceLast() call decl UnCompiledNode.replaceLast() call decl UnCompiledNode.replaceLast() call decl UnCompiledNode.replaceLast() call decl UnCompiledNode.replaceLast() call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) - = new <> decl UnCompiledNode T int decl UnCompiledNode T decl UnCompiledNode int T int int public public throws if = assert call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() == || call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() >= : + call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() + + assert if == ++ = call decl FST.setEmptyOutput() call decl FST.setEmptyOutput() call decl FST.setEmptyOutput() call decl FST.setEmptyOutput() call decl FST.setEmptyOutput() return decl_stmt int = decl_stmt int = decl_stmt int final final = call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() while ++ if >= || call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) call org.apache.lucene.util.IntsRefBuilder.intAt(int) != break ++ ++ decl_stmt int final final = + if < + for = < ++ = new <> = for = <= ++ - + - ++ decl_stmt UnCompiledNode final final final < = if call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() != || != + = = for = < ++ decl_stmt UnCompiledNode final final final < = decl_stmt UnCompiledNode final final final < = - decl_stmt T final final = call T.getLastOutput() call T.getLastOutput() call T.getLastOutput() call T.getLastOutput() call T.getLastOutput() + - assert decl_stmt T final final decl_stmt T final final if != = call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() assert = call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() assert call T.setLastOutput() call T.setLastOutput() call T.setLastOutput() call T.setLastOutput() call T.setLastOutput() + - call decl UnCompiledNode.prependOutput() call decl UnCompiledNode.prependOutput() call decl UnCompiledNode.prependOutput() call decl UnCompiledNode.prependOutput() call decl UnCompiledNode.prependOutput() else = = = call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() assert if call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() == && == + = call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() else - + - call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) private private return == || ! decl UnCompiledNode public < public < throws decl_stmt UnCompiledNode final final final < = if < || < || == if == return else if > || > return else if != call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call decl FST.finish() call decl FST.finish() call decl FST.finish() call decl FST.finish() call decl FST.finish() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() call org.apache.lucene.util.IntsRefBuilder.length() if return call decl FST.pack() call decl FST.pack() call decl FST.pack() call decl FST.pack() call decl FST.pack() / else return decl Arc decl UnCompiledNode private private < throws for = < ++ decl_stmt Arc final final final < = if ! call decl Arc.target() call decl Arc.target() call decl Arc.target() call decl Arc.target() call decl Arc.target() call decl Arc.target() call decl Arc.target() call decl Arc.target() call decl Arc.target() decl_stmt UnCompiledNode final final final < = < if == = = = - public public return call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() public public return public public return public public = = = = public public assert > assert - == return - decl Arc public public assert >= assert == || > - : + - + + + + if == for = < ++ = new <> = decl_stmt Arc final final final < = ++ = = = = = decl Arc public public assert > decl_stmt Arc final final final < = - assert == : + + + = = = public public assert > assert == - assert == - -- decl Arc public public assert assert > decl_stmt Arc final final final < = - assert == = public public assert for = < ++ = assert if = assert