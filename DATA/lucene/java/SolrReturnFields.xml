org.apache.solr.search org.apache.commons.io.FilenameUtils import org.apache.lucene.queries.function.FunctionQuery import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.queries.function.valuesource.QueryValueSource import org.apache.lucene.search.Query import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.transform.DocTransformer import org.apache.solr.response.transform.DocTransformers import org.apache.solr.response.transform.RenameFieldTransformer import org.apache.solr.response.transform.ScoreAugmenter import org.apache.solr.response.transform.TransformerFactory import org.apache.solr.response.transform.ValueSourceAugmenter import java.util.ArrayList import java.util.HashSet import java.util.LinkedHashSet import java.util.List import java.util.Set import class org.apache.solr.search.SolrReturnFields super super extends decl Set DocTransformer decl Set String boolean boolean decl Set decl List decl NamedList DocTransformers boolean String String private private = = if == || == || == && == = return decl_stmt org.apache.solr.common.util.NamedList < = new <> decl_stmt org.apache.solr.response.transform.DocTransformers = new for : for = < call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() ++ decl_stmt java.lang.String = call decl NamedList.getName() call decl NamedList.getName() call decl NamedList.getName() call decl NamedList.getName() call decl NamedList.getName() decl_stmt java.lang.String = call decl NamedList.getVal() call decl NamedList.getVal() call decl NamedList.getVal() call decl NamedList.getVal() call decl NamedList.getVal() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt boolean = != && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() if ! for = + < call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() ++ if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl NamedList.getName() call decl NamedList.getName() call decl NamedList.getName() call decl NamedList.getName() call decl NamedList.getName() call decl NamedList.setName() call decl NamedList.setName() call decl NamedList.setName() call decl NamedList.setName() call decl NamedList.setName() if == = new <> call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call org.apache.solr.response.transform.DocTransformers.addTransformer(DocTransformer) call org.apache.solr.response.transform.DocTransformers.addTransformer(DocTransformer) call org.apache.solr.response.transform.DocTransformers.addTransformer(DocTransformer) call org.apache.solr.response.transform.DocTransformers.addTransformer(DocTransformer) call org.apache.solr.response.transform.DocTransformers.addTransformer(DocTransformer) new if ! && ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() if call org.apache.solr.response.transform.DocTransformers.size() call org.apache.solr.response.transform.DocTransformers.size() call org.apache.solr.response.transform.DocTransformers.size() call org.apache.solr.response.transform.DocTransformers.size() call org.apache.solr.response.transform.DocTransformers.size() == = call org.apache.solr.response.transform.DocTransformers.getTransformer(int) call org.apache.solr.response.transform.DocTransformers.getTransformer(int) call org.apache.solr.response.transform.DocTransformers.getTransformer(int) call org.apache.solr.response.transform.DocTransformers.getTransformer(int) call org.apache.solr.response.transform.DocTransformers.getTransformer(int) else if call org.apache.solr.response.transform.DocTransformers.size() call org.apache.solr.response.transform.DocTransformers.size() call org.apache.solr.response.transform.DocTransformers.size() call org.apache.solr.response.transform.DocTransformers.size() call org.apache.solr.response.transform.DocTransformers.size() > = int char public static public static decl_stmt int = decl_stmt char if < && = != && ++ while < = if ! && != && != break ++ return return String FunctionQParser QParser char String String decl String SolrParams StrParser String TransformerFactory Query int ValueSource DocTransformer String int int ModifiableSolrParams private private < if == return try decl_stmt org.apache.solr.search.StrParser = new for call org.apache.solr.search.StrParser.opt(char) call org.apache.solr.search.StrParser.opt(char) call org.apache.solr.search.StrParser.opt(char) call org.apache.solr.search.StrParser.opt(char) call org.apache.solr.search.StrParser.opt(char) call org.apache.solr.search.StrParser.eatws() call org.apache.solr.search.StrParser.eatws() call org.apache.solr.search.StrParser.eatws() call org.apache.solr.search.StrParser.eatws() call org.apache.solr.search.StrParser.eatws() if >= break decl_stmt int = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt char = call org.apache.solr.search.StrParser.ch() call org.apache.solr.search.StrParser.ch() call org.apache.solr.search.StrParser.ch() call org.apache.solr.search.StrParser.ch() call org.apache.solr.search.StrParser.ch() if != if call org.apache.solr.search.StrParser.opt(char) call org.apache.solr.search.StrParser.opt(char) call org.apache.solr.search.StrParser.opt(char) call org.apache.solr.search.StrParser.opt(char) call org.apache.solr.search.StrParser.opt(char) = = call org.apache.solr.search.StrParser.eatws() call org.apache.solr.search.StrParser.eatws() call org.apache.solr.search.StrParser.eatws() call org.apache.solr.search.StrParser.eatws() call org.apache.solr.search.StrParser.eatws() = else if || == || == continue = = if != = call org.apache.solr.search.StrParser.getId(String) call org.apache.solr.search.StrParser.getId(String) call org.apache.solr.search.StrParser.getId(String) call org.apache.solr.search.StrParser.getId(String) call org.apache.solr.search.StrParser.getId(String) = call org.apache.solr.search.StrParser.ch() call org.apache.solr.search.StrParser.ch() call org.apache.solr.search.StrParser.ch() call org.apache.solr.search.StrParser.ch() call org.apache.solr.search.StrParser.ch() if != && || == || == continue = = if == = call org.apache.solr.search.StrParser.getGlobbedId(String) call org.apache.solr.search.StrParser.getGlobbedId(String) call org.apache.solr.search.StrParser.getGlobbedId(String) call org.apache.solr.search.StrParser.getGlobbedId(String) call org.apache.solr.search.StrParser.getGlobbedId(String) = call org.apache.solr.search.StrParser.ch() call org.apache.solr.search.StrParser.ch() call org.apache.solr.search.StrParser.ch() call org.apache.solr.search.StrParser.ch() call org.apache.solr.search.StrParser.ch() if != && || == || == if = else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() continue = decl_stmt java.lang.String = call StrParser.val() call StrParser.val() call StrParser.val() call StrParser.val() call StrParser.val() call StrParser.val() call StrParser.val() call StrParser.val() call StrParser.val() if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new decl_stmt int = += decl_stmt java.lang.String = call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) decl_stmt java.lang.String = if == = + + decl_stmt org.apache.solr.response.transform.TransformerFactory = if != decl_stmt org.apache.solr.response.transform.DocTransformer = call TransformerFactory.create() call TransformerFactory.create() call TransformerFactory.create() call TransformerFactory.create() call TransformerFactory.create() if != if ! decl_stmt java.lang.String = call org.apache.solr.response.transform.DocTransformer.getExtraRequestFields() call org.apache.solr.response.transform.DocTransformer.getExtraRequestFields() call org.apache.solr.response.transform.DocTransformer.getExtraRequestFields() call org.apache.solr.response.transform.DocTransformer.getExtraRequestFields() call org.apache.solr.response.transform.DocTransformer.getExtraRequestFields() if != for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else continue decl_stmt org.apache.solr.search.QParser = decl_stmt org.apache.lucene.search.Query = decl_stmt org.apache.lucene.queries.function.ValueSource = try if instanceof decl_stmt org.apache.solr.search.FunctionQParser = call org.apache.solr.search.FunctionQParser.setParseMultipleSources(boolean) call org.apache.solr.search.FunctionQParser.setParseMultipleSources(boolean) call org.apache.solr.search.FunctionQParser.setParseMultipleSources(boolean) call org.apache.solr.search.FunctionQParser.setParseMultipleSources(boolean) call org.apache.solr.search.FunctionQParser.setParseMultipleSources(boolean) call org.apache.solr.search.FunctionQParser.setParseToEnd(boolean) call org.apache.solr.search.FunctionQParser.setParseToEnd(boolean) call org.apache.solr.search.FunctionQParser.setParseToEnd(boolean) call org.apache.solr.search.FunctionQParser.setParseToEnd(boolean) call org.apache.solr.search.FunctionQParser.setParseToEnd(boolean) = call FunctionQParser.getQuery() call FunctionQParser.getQuery() call FunctionQParser.getQuery() call FunctionQParser.getQuery() call FunctionQParser.getQuery() if != if decl_stmt int = - = - else = + else decl_stmt int = - = - else = call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() assert call org.apache.solr.search.QParser.getLocalParams() call org.apache.solr.search.QParser.getLocalParams() call org.apache.solr.search.QParser.getLocalParams() call org.apache.solr.search.QParser.getLocalParams() call org.apache.solr.search.QParser.getLocalParams() != = + = call StrParser.val() call StrParser.val() call StrParser.val() call StrParser.val() call StrParser.val() call StrParser.val() call StrParser.val() call StrParser.val() call StrParser.val() if instanceof = else = new if == decl_stmt org.apache.solr.common.params.SolrParams = call org.apache.solr.search.QParser.getLocalParams() call org.apache.solr.search.QParser.getLocalParams() call org.apache.solr.search.QParser.getLocalParams() call org.apache.solr.search.QParser.getLocalParams() call org.apache.solr.search.QParser.getLocalParams() if != = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if == = new catch = = call org.apache.solr.search.StrParser.getSimpleString() call org.apache.solr.search.StrParser.getSimpleString() call org.apache.solr.search.StrParser.getSimpleString() call org.apache.solr.search.StrParser.getSimpleString() call org.apache.solr.search.StrParser.getSimpleString() if != if != else throw new + catch throw new String private private if == = new <> if == call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if ! call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = decl_stmt java.lang.String = == : new public < public < return public < public < if return else return || call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() : public < public < if || == || call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() return return public public return ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() public public if || call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return for : if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return return public public return public public return public public return StringBuilder public public decl_stmt java.lang.StringBuilder final final = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()