org.apache.solr.schema java.io.IOException import java.lang.invoke.MethodHandles import java.time.Instant import java.util.ArrayList import java.util.Collections import java.util.Date import java.util.List import java.util.Locale import java.util.Map import org.apache.lucene.document.FieldType import org.apache.lucene.document.FieldType.LegacyNumericType import org.apache.lucene.document.LegacyDoubleField import org.apache.lucene.document.LegacyFloatField import org.apache.lucene.document.LegacyIntField import org.apache.lucene.document.LegacyLongField import org.apache.lucene.document.NumericDocValuesField import org.apache.lucene.document.SortedSetDocValuesField import org.apache.lucene.index.DocValuesType import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.IndexableField import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.queries.function.valuesource.DoubleFieldSource import org.apache.lucene.queries.function.valuesource.FloatFieldSource import org.apache.lucene.queries.function.valuesource.IntFieldSource import org.apache.lucene.queries.function.valuesource.LongFieldSource import org.apache.lucene.search.DocValuesRangeQuery import org.apache.lucene.search.LegacyNumericRangeQuery import org.apache.lucene.search.Query import org.apache.lucene.search.SortField import org.apache.lucene.search.SortedSetSelector import org.apache.lucene.uninverting.UninvertingReader.Type import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.CharsRef import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.LegacyNumericUtils import org.apache.lucene.util.NumericUtils import org.apache.lucene.util.mutable.MutableValueDate import org.apache.lucene.util.mutable.MutableValueLong import org.apache.solr.common.SolrException import org.apache.solr.response.TextResponseWriter import org.apache.solr.search.FunctionRangeQuery import org.apache.solr.search.QParser import org.apache.solr.search.function.ValueSourceRangeFilter import org.apache.solr.util.DateMathParser import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.schema.TrieField super super extends String Logger int long int long long long long String long long int TrieTypes long String String protected protected < decl_stmt java.lang.String = if != = = if <= || >= = decl_stmt java.lang.String = if != try = call java.lang.String.toUpperCase(Locale) call java.lang.String.toUpperCase(Locale) call java.lang.String.toUpperCase(Locale) call java.lang.String.toUpperCase(Locale) call java.lang.String.toUpperCase(Locale) catch throw new + BytesRef long Number public public decl_stmt java.lang.Number final final = if != if == && == decl_stmt long = call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() switch case return int case return int case return case return case return new default: throw new + return == new call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() : else decl_stmt org.apache.lucene.util.BytesRef = switch case return case return case return case return case return new default: throw new + boolean SortField boolean Object public public decl_stmt java.lang.Object = decl_stmt boolean = decl_stmt boolean = decl_stmt org.apache.lucene.search.SortField switch case if = : else if = : = new call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) return case if = : else if = : = new call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) return case case if = : else if = : = new call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) return case if = : else if = : = new call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) call org.apache.lucene.search.SortField.setMissingValue(Object) return default: throw new + public public if switch case return case case return case return case return default: throw new else switch case return case case return case return case return default: throw new public public switch case return new case return new case return new case return new case return new default: throw new + decl SortedSetSelector public final public final if ! return if ! throw new + + + + decl_stmt sun.tools.java.Type = if == throw new + + + + + + return protected protected throw new + + + + public public throws public public return public public return public public return public public return public public switch case return case case return case return case return default: throw new boolean int Query public public if && && ! return decl_stmt int = decl_stmt org.apache.lucene.search.Query decl_stmt boolean final final = && ! switch case if = == : long == : long else = == : == : break case if return else = == : == : break case if = == : == : else = == : == : break case if return else = == : == : break case if = == : == : else = == : == : break default: throw new return Number Long Number long long long ValueSource String long Query Long private private decl_stmt org.apache.lucene.search.Query decl_stmt java.lang.String = decl_stmt java.lang.Number = == : == : decl_stmt java.lang.Number = == : == : decl_stmt java.lang.Long = == : == long call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() : call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() decl_stmt java.lang.Long = == : == long call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() : call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() decl_stmt long = == : decl_stmt long = == : decl_stmt long = == : decl_stmt long = == : if == || call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() < || == && == || call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() > || == decl_stmt org.apache.lucene.queries.function.ValueSource = = new new else if == || call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() < || == && != && call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() < || == = == : else = == : return public public if ! && return else return public public return BytesRefBuilder public public decl_stmt org.apache.lucene.util.BytesRefBuilder final final = new return call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() String public public decl_stmt java.lang.String = try switch case break case break case break case break case break default: throw new + catch throw new + public public return String static static decl_stmt java.lang.String = return + public public return == : BytesRef public public decl_stmt org.apache.lucene.util.BytesRef final final = new switch case return case return case return case return case return default: throw new + String public public decl_stmt java.lang.String final final switch case = break case = break case = break case = break case = break default: throw new + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.getChars(char,int) call java.lang.String.getChars(char,int) call java.lang.String.getChars(char,int) call java.lang.String.getChars(char,int) call java.lang.String.getChars(char,int) return public public switch case return case return case return case return case return new default: throw new + BytesRefBuilder public public decl_stmt org.apache.lucene.util.BytesRefBuilder final final = new return call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() Number private private final final decl_stmt java.lang.Number final final = if != switch case call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() break case call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() call Number.floatValue() break case case call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() break case call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() call Number.doubleValue() break default: throw new + else throw new + FieldType decl Field decl org decl apache decl document int boolean boolean boolean decl lucene public public decl_stmt boolean = decl_stmt boolean = decl_stmt boolean = if ! && ! && ! if call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + return decl_stmt org.apache.solr.schema.FieldType = new call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setTokenized(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) : switch case call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) break case call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) break case call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) break case call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) break case call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) call org.apache.solr.schema.FieldType.setNumericType(LegacyNumericType) break default: throw new + call org.apache.solr.schema.FieldType.setNumericPrecisionStep(int) call org.apache.solr.schema.FieldType.setNumericPrecisionStep(int) call org.apache.solr.schema.FieldType.setNumericPrecisionStep(int) call org.apache.solr.schema.FieldType.setNumericPrecisionStep(int) call org.apache.solr.schema.FieldType.setNumericPrecisionStep(int) decl_stmt org.apache.solr.handler.dataimport.config.Field final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final switch case decl_stmt int = instanceof : = new break case decl_stmt float = instanceof : = new break case decl_stmt long = instanceof : = new break case decl_stmt double = instanceof : = new break case decl_stmt java.util.Date = instanceof : = new call int.getTime() call int.getTime() call int.getTime() call int.getTime() call int.getTime() break default: throw new + call decl org.setBoost() call decl org.setBoost() call decl org.setBoost() call decl org.setBoost() call decl org.setBoost() return decl List BytesRefBuilder long IndexableField public < public < if decl_stmt java.util.List < = new <> decl_stmt org.apache.lucene.index.IndexableField final final = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if decl_stmt org.apache.lucene.util.BytesRefBuilder = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() else decl_stmt long final final if call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() instanceof || call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() instanceof = call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() else if call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() instanceof = call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() else assert call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() instanceof = call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call org.apache.lucene.index.IndexableField.numericValue() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return else return TrieField public static public static if instanceof decl_stmt org.apache.solr.schema.TrieField final final = if == return switch case case return case case case return default: throw new + return public public final final