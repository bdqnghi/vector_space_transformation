org.apache.lucene.util.fst java.util.Arrays import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import class org.apache.lucene.util.fst.TestBytesStore super super extends int int IndexInput IndexOutput int int decl byte decl byte int int int int int byte int decl byte int BytesStore BytesStore int Directory int public public throws decl_stmt int final final = decl_stmt int final final = : for = < ++ decl_stmt int final final = decl_stmt byte final final final = new decl_stmt int final final = decl_stmt org.apache.lucene.util.fst.BytesStore final final = new if + + + + + decl_stmt int = while < decl_stmt int = if + switch case decl_stmt byte = byte if + ++ = call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) break case decl_stmt int = - decl_stmt byte = new if + + + call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) += break case if > decl_stmt int = decl_stmt int = - if + + + call org.apache.lucene.util.fst.BytesStore.writeInt(long,int) call org.apache.lucene.util.fst.BytesStore.writeInt(long,int) call org.apache.lucene.util.fst.BytesStore.writeInt(long,int) call org.apache.lucene.util.fst.BytesStore.writeInt(long,int) call org.apache.lucene.util.fst.BytesStore.writeInt(long,int) ++ = >> ++ = >> ++ = >> ++ = byte break case if > decl_stmt int = decl_stmt int if == = else = - decl_stmt int = + - if + + + + + + + call org.apache.lucene.util.fst.BytesStore.reverse(long,long) call org.apache.lucene.util.fst.BytesStore.reverse(long,long) call org.apache.lucene.util.fst.BytesStore.reverse(long,long) call org.apache.lucene.util.fst.BytesStore.reverse(long,long) call org.apache.lucene.util.fst.BytesStore.reverse(long,long) while <= decl_stmt byte = = = ++ -- break case if > decl_stmt int = - decl_stmt int = - - decl_stmt byte = new if + + + + + call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) break case if > decl_stmt int = - decl_stmt int = + - decl_stmt int = - if + + + + + call org.apache.lucene.util.fst.BytesStore.copyBytes(long,long,int) call org.apache.lucene.util.fst.BytesStore.copyBytes(long,long,int) call org.apache.lucene.util.fst.BytesStore.copyBytes(long,long,int) call org.apache.lucene.util.fst.BytesStore.copyBytes(long,long,int) call org.apache.lucene.util.fst.BytesStore.copyBytes(long,long,int) break case decl_stmt int = - if + += call org.apache.lucene.util.fst.BytesStore.skipBytes(long) call org.apache.lucene.util.fst.BytesStore.skipBytes(long) call org.apache.lucene.util.fst.BytesStore.skipBytes(long) call org.apache.lucene.util.fst.BytesStore.skipBytes(long) call org.apache.lucene.util.fst.BytesStore.skipBytes(long) if > decl_stmt byte = new call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) call org.apache.lucene.util.fst.BytesStore.writeBytes(long,byte,int,int) - break case if > decl_stmt int = decl_stmt byte = byte = call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) call org.apache.lucene.util.fst.BytesStore.writeByte(byte) break call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() call org.apache.lucene.util.fst.BytesStore.getPosition() if > && == decl_stmt int = call org.apache.lucene.util.fst.BytesStore.truncate(long) call org.apache.lucene.util.fst.BytesStore.truncate(long) call org.apache.lucene.util.fst.BytesStore.truncate(long) call org.apache.lucene.util.fst.BytesStore.truncate(long) call org.apache.lucene.util.fst.BytesStore.truncate(long) - -= + byte if + + + if > && == decl_stmt org.apache.lucene.util.fst.BytesStore if if decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.store.IndexOutput = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call org.apache.lucene.util.fst.BytesStore.writeTo(DataOutput) call org.apache.lucene.util.fst.BytesStore.writeTo(DataOutput) call org.apache.lucene.util.fst.BytesStore.writeTo(DataOutput) call org.apache.lucene.util.fst.BytesStore.writeTo(DataOutput) call org.apache.lucene.util.fst.BytesStore.writeTo(DataOutput) call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() = new call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() else = int int int int decl BytesReader decl BytesReader boolean byte int decl BytesReader decl FST decl FST decl byte decl byte int private private throws if == return if decl_stmt byte = new if if decl_stmt BytesReader = call decl FST.reversed() call decl FST.reversed() call decl FST.reversed() call decl FST.reversed() call decl FST.reversed() call decl FST.setPosition() call decl FST.setPosition() call decl FST.setPosition() call decl FST.setPosition() call decl FST.setPosition() - call decl FST.readBytes() call decl FST.readBytes() call decl FST.readBytes() call decl FST.readBytes() call decl FST.readBytes() decl_stmt int = decl_stmt int = - while < decl_stmt byte = = = ++ -- else if decl_stmt BytesReader = call decl FST.reversed() call decl FST.reversed() call decl FST.reversed() call decl FST.reversed() call decl FST.reversed() call decl FST.readBytes() call decl FST.readBytes() call decl FST.readBytes() call decl FST.readBytes() call decl FST.readBytes() for = < ++ + decl_stmt BytesReader decl_stmt boolean = if if = else if = if > decl_stmt int = for = < ++ decl_stmt int = - decl_stmt int if = - else = - if + + + + + + + decl_stmt byte = new call decl FST.setPosition() call decl FST.setPosition() call decl FST.setPosition() call decl FST.setPosition() call decl FST.setPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.readBytes() call decl FST.readBytes() call decl FST.readBytes() call decl FST.readBytes() call decl FST.readBytes() for = < ++ decl_stmt byte if = - else = + + decl_stmt int decl_stmt int if = - = int call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() else = + = - call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() call decl FST.getPosition() if > decl_stmt int = - decl_stmt int = if -= |= -- & << |= -- & << |= -- & << |= -- & else += |= ++ & << |= ++ & << |= ++ & << |= ++ & if + call decl FST.skipBytes() call decl FST.skipBytes() call decl FST.skipBytes() call decl FST.skipBytes() call decl FST.skipBytes() call decl FST.readInt() call decl FST.readInt() call decl FST.readInt() call decl FST.readInt() call decl FST.readInt()