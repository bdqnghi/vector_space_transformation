org.apache.lucene.analysis.synonym java.io.IOException import java.io.Reader import java.text.ParseException import java.util.ArrayList import java.util.Arrays import java.util.HashMap import java.util.HashSet import java.util.Set import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import org.apache.lucene.store.ByteArrayDataOutput import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.BytesRefHash import org.apache.lucene.util.CharsRef import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.UnicodeUtil import org.apache.lucene.util.fst.ByteSequenceOutputs import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.Util import class org.apache.lucene.analysis.synonym.SynonymMap char int decl FST BytesRefHash int decl char int int public static public static decl_stmt int = decl_stmt char = for : decl_stmt int final final = decl_stmt int final final = == : + + if > = if > ++ = += return int private private decl_stmt int final final = + for = + < ++ if == && - == return if == return if + - == return return int MapEntry private private if <= throw new + + if <= throw new + + if <= throw new + + if <= throw new + + assert ! : + assert ! : + decl_stmt int = call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) if < = - - else decl_stmt MapEntry = if == = new call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() |= = = int int int private private decl_stmt int = decl_stmt int = decl_stmt int final final = + while < if ++ == ++ return public public CharsRef decl Set Integer decl byte decl Set BytesRefBuilder ByteSequenceOutputs decl org MapEntry int decl util ByteArrayDataOutput decl fst decl apache int decl lucene int CharsRef IntsRefBuilder public public throws decl_stmt org.apache.lucene.util.fst.ByteSequenceOutputs = decl_stmt fst < = new <> decl_stmt org.apache.lucene.util.BytesRefBuilder = new decl_stmt org.apache.lucene.store.ByteArrayDataOutput = new decl_stmt java.util.Set final final final < if = new <> else = decl_stmt byte final final final = new decl_stmt java.util.Set < = decl_stmt org.apache.lucene.util.CharsRef = call BytesRefBuilder.toArray() call BytesRefBuilder.toArray() call BytesRefBuilder.toArray() call BytesRefBuilder.toArray() call BytesRefBuilder.toArray() new call BytesRefBuilder.size() call BytesRefBuilder.size() call BytesRefBuilder.size() call BytesRefBuilder.size() call BytesRefBuilder.size() decl_stmt org.apache.lucene.util.IntsRefBuilder final final = new for = < ++ decl_stmt org.apache.lucene.util.CharsRef = decl_stmt MapEntry = decl_stmt int = call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() decl_stmt int = + * call decl apache.grow() call decl apache.grow() call decl apache.grow() call decl apache.grow() call decl apache.grow() call decl lucene.reset() call decl lucene.reset() call decl lucene.reset() call decl lucene.reset() call decl lucene.reset() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() decl_stmt int = for = < ++ if != decl_stmt java.lang.Integer final final = call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() if call decl util.contains() call decl util.contains() call decl util.contains() call decl util.contains() call decl util.contains() continue call decl util.add() call decl util.add() call decl util.add() call decl util.add() call decl util.add() call decl lucene.writeVInt() call decl lucene.writeVInt() call decl lucene.writeVInt() call decl lucene.writeVInt() call decl lucene.writeVInt() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() call decl Set.ords() ++ decl_stmt int final final = call decl lucene.getPosition() call decl lucene.getPosition() call decl lucene.getPosition() call decl lucene.getPosition() call decl lucene.getPosition() call decl lucene.writeVInt() call decl lucene.writeVInt() call decl lucene.writeVInt() call decl lucene.writeVInt() call decl lucene.writeVInt() << | : decl_stmt int final final = call decl lucene.getPosition() call decl lucene.getPosition() call decl lucene.getPosition() call decl lucene.getPosition() call decl lucene.getPosition() decl_stmt int final final = - call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() call decl apache.bytes() if != call decl util.clear() call decl util.clear() call decl util.clear() call decl util.clear() call decl util.clear() call decl apache.setLength() call decl apache.setLength() call decl apache.setLength() call decl apache.setLength() call decl apache.setLength() call decl lucene.getPosition() call decl lucene.getPosition() call decl lucene.getPosition() call decl lucene.getPosition() call decl lucene.getPosition() call decl org.add() call decl org.add() call decl org.add() call decl org.add() call decl org.add() call decl apache.toBytesRef() call decl apache.toBytesRef() call decl apache.toBytesRef() call decl apache.toBytesRef() call decl apache.toBytesRef() decl_stmt org.apache.lucene.util.fst.FST < = call decl org.finish() call decl org.finish() call decl org.finish() call decl org.finish() call decl org.finish() return new int PositionIncrementAttribute CharTermAttribute int public public throws try = decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute = decl_stmt org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute = while decl_stmt int = call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() if == throw new + + if call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() != throw new + + + + decl_stmt int = if > ++ + call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() + if == throw new + + return