org.apache.solr.cloud java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.HashMap import java.util.LinkedHashMap import java.util.List import java.util.Locale import java.util.Map import java.util.Set import java.util.regex.Matcher import java.util.regex.Pattern import org.apache.solr.cloud.rule.ReplicaAssigner import org.apache.solr.cloud.rule.Rule import org.apache.solr.common.SolrException import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.DocCollection import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.util.StrUtils import org.apache.solr.core.CoreContainer import static static org.apache.solr.common.cloud.ZkStateReader.CORE_NAME_PROP import static static org.apache.solr.common.cloud.ZkStateReader.MAX_SHARDS_PER_NODE import class org.apache.solr.cloud.Assign Pattern int decl Map Matcher public static public static decl_stmt java.util.Map < = if == return decl_stmt int = for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) return + + decl Map int decl Map Integer Integer String decl List public static public static if == = decl_stmt java.lang.String = decl_stmt java.util.Map < = if == return decl_stmt java.util.List < = new <> call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < return + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + decl_stmt java.util.Map final final final < = new <> for : decl_stmt int = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return call java.lang.Integer.compareTo(Integer) call java.lang.Integer.compareTo(Integer) call java.lang.Integer.compareTo(Integer) call java.lang.Integer.compareTo(Integer) call java.lang.Integer.compareTo(Integer) = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return boolean Slice String int static static decl_stmt org.apache.solr.common.cloud.Slice = decl_stmt int = call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() for decl_stmt java.lang.String = + + + + decl_stmt boolean = for : call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = break if ++ else break return + + + + public public return * + decl List decl HashMap Integer List DocCollection decl ArrayList int public static < public static < decl_stmt org.apache.solr.common.cloud.DocCollection = decl_stmt java.lang.Integer = call DocCollection.getInt() call DocCollection.getInt() call DocCollection.getInt() call DocCollection.getInt() call DocCollection.getInt() decl_stmt java.util.List < = == : decl_stmt HashMap < = if == decl_stmt int = for < : call decl HashMap.entrySet() call decl HashMap.entrySet() call decl HashMap.entrySet() call decl HashMap.entrySet() call decl HashMap.entrySet() if > += - if < throw new decl_stmt java.util.List = call DocCollection.get() call DocCollection.get() call DocCollection.get() call DocCollection.get() call DocCollection.get() if != return decl_stmt java.util.ArrayList < = new <> call decl HashMap.values() call decl HashMap.values() call decl HashMap.values() call decl HashMap.values() call decl HashMap.values() , -> < - : == : return Integer decl List decl Map decl ArrayList decl Map decl List decl LinkedHashMap List private static < private static < < decl_stmt java.util.ArrayList < = new <> for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() new decl_stmt java.util.Map < < = new <> for : decl_stmt java.util.LinkedHashMap < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for : decl_stmt java.lang.Integer = call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() if == = call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() ++ decl_stmt java.util.List = decl_stmt java.util.List < = == new <> : decl_stmt java.util.Map < = new decl_stmt java.util.List < = new <> for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return ReplicaCount DocCollection decl List decl Collection decl HashMap Integer DocCollection decl Set private static < private static < < decl_stmt java.util.Set < = decl_stmt java.util.List < = new <> call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() if != call decl List.retainAll() call decl List.retainAll() call decl List.retainAll() call decl List.retainAll() call decl List.retainAll() decl_stmt HashMap < = new <> for : call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() new if != if != call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() throw new return decl_stmt org.apache.solr.common.cloud.DocCollection = decl_stmt java.lang.Integer = call DocCollection.getInt() call DocCollection.getInt() call DocCollection.getInt() call DocCollection.getInt() call DocCollection.getInt() for : decl_stmt org.apache.solr.common.cloud.DocCollection = for : call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() decl_stmt java.util.Collection < = for : decl_stmt ReplicaCount = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() if != ++ if ++ if >= call decl HashMap.remove() call decl HashMap.remove() call decl HashMap.remove() call decl HashMap.remove() call decl HashMap.remove() return