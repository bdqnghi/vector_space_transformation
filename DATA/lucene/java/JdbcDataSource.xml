org.apache.solr.handler.dataimport static static java.nio.charset.StandardCharsets.UTF_8 import static static org.apache.solr.handler.data.DataImportHandlerException.wrapAndThrow import static static org.apache.solr.handler.data.DataImportHandlerException.SEVERE import org.apache.solr.common.SolrException import org.apache.solr.util.CryptoKeys import org.slf4j.Logger import org.slf4j.LoggerFactory import javax.naming.InitialContext import javax.naming.NamingException import java.io.FileInputStream import java.io.FileReader import java.io.IOException import java.io.InputStreamReader import java.io.Reader import java.lang.invoke.MethodHandles import java.math.BigDecimal import java.math.BigInteger import java.nio.charset.StandardCharsets import java.sql.* import java.util.* import java.util.concurrent.Callable import java.util.concurrent.TimeUnit import class org.apache.solr.handler.dataimport.JdbcDataSource super super extends int long String Logger decl Map String int String long decl Callable boolean String int boolean Connection String String Object String public public = decl_stmt java.lang.Object = if != = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() = decl_stmt java.lang.String = if != = try = if == - = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + for < : decl_stmt java.lang.String = decl_stmt java.lang.String = if || call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if || call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if || call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if || call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl char String String int Properties private private decl_stmt java.lang.String = if != && != try try = new new decl_stmt char = new decl_stmt int = if < throw new + decl_stmt java.util.Properties = new call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() decl_stmt java.lang.String = try = new catch throw new call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() = catch throw new + return Connection Driver String String decl sql String decl javax long String InitialContext decl DataSource String String Object protected < protected < final final final final decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = if == && == throw new if != try catch + else if == throw new decl_stmt java.lang.String = if != = return = new < public public throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + decl_stmt long = decl_stmt org.apache.lucene.replicator.nrt.Connection = if != = else if != try = catch decl_stmt java.sql.Driver = = call java.sql.Driver.connect(String,java,util,Properties) call java.sql.Driver.connect(String,java,util,Properties) call java.sql.Driver.connect(String,java,util,Properties) call java.sql.Driver.connect(String,java,util,Properties) call java.sql.Driver.connect(String,java,util,Properties) if != try catch try call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() throw new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + - return private private final final throws if call sun.rmi.transport.Connection.setReadOnly(boolean) call sun.rmi.transport.Connection.setReadOnly(boolean) call sun.rmi.transport.Connection.setReadOnly(boolean) call sun.rmi.transport.Connection.setReadOnly(boolean) call sun.rmi.transport.Connection.setReadOnly(boolean) call sun.rmi.transport.Connection.setAutoCommit(boolean) call sun.rmi.transport.Connection.setAutoCommit(boolean) call sun.rmi.transport.Connection.setAutoCommit(boolean) call sun.rmi.transport.Connection.setAutoCommit(boolean) call sun.rmi.transport.Connection.setAutoCommit(boolean) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call Connection.setHoldability() call Connection.setHoldability() call Connection.setHoldability() call Connection.setHoldability() call Connection.setHoldability() if ! call sun.rmi.transport.Connection.setAutoCommit(boolean) call sun.rmi.transport.Connection.setAutoCommit(boolean) call sun.rmi.transport.Connection.setAutoCommit(boolean) call sun.rmi.transport.Connection.setAutoCommit(boolean) call sun.rmi.transport.Connection.setAutoCommit(boolean) decl_stmt java.lang.String = if call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) else if call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) else if call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) else if call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) else if call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) call sun.rmi.transport.Connection.setTransactionIsolation(int) decl_stmt java.lang.String = if call Connection.setHoldability() call Connection.setHoldability() call Connection.setHoldability() call Connection.setHoldability() call Connection.setHoldability() else if call Connection.setHoldability() call Connection.setHoldability() call Connection.setHoldability() call Connection.setHoldability() call Connection.setHoldability() private private final final final final throws decl_stmt org.apache.lucene.replicator.nrt.Connection = decl_stmt javax.naming.InitialContext = new decl_stmt java.lang.Object = call javax.naming.InitialContext.lookup(Name) call javax.naming.InitialContext.lookup(Name) call javax.naming.InitialContext.lookup(Name) call javax.naming.InitialContext.lookup(Name) call javax.naming.InitialContext.lookup(Name) if instanceof decl_stmt javax.sql.DataSource = decl_stmt java.lang.String = decl_stmt java.lang.String = if == || call decl sql.trim() call decl sql.trim() call decl sql.trim() call decl sql.trim() call decl sql.trim() = call decl javax.getConnection() call decl javax.getConnection() call decl javax.getConnection() call decl javax.getConnection() call decl javax.getConnection() else = call decl javax.getConnection() call decl javax.getConnection() call decl javax.getConnection() call decl javax.getConnection() call decl javax.getConnection() else throw new + + return long Connection Driver public public throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + decl_stmt long = decl_stmt org.apache.lucene.replicator.nrt.Connection = if != = else if != try = catch decl_stmt java.sql.Driver = = call java.sql.Driver.connect(String,java,util,Properties) call java.sql.Driver.connect(String,java,util,Properties) call java.sql.Driver.connect(String,java,util,Properties) call java.sql.Driver.connect(String,java,util,Properties) call java.sql.Driver.connect(String,java,util,Properties) if != try catch try call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() throw new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + - return String String private private final final throws if if ! decl_stmt java.lang.String = if else if else if else if else if decl_stmt java.lang.String = if else if Connection Object InitialContext decl sql decl DataSource decl javax private private final final final final throws decl_stmt org.apache.lucene.replicator.nrt.Connection = decl_stmt javax.naming.InitialContext = new decl_stmt java.lang.Object = call javax.naming.InitialContext.lookup(Name) call javax.naming.InitialContext.lookup(Name) call javax.naming.InitialContext.lookup(Name) call javax.naming.InitialContext.lookup(Name) call javax.naming.InitialContext.lookup(Name) if instanceof decl_stmt javax.sql.DataSource = decl_stmt java.lang.String = decl_stmt java.lang.String = if == || call decl sql.trim() call decl sql.trim() call decl sql.trim() call decl sql.trim() call decl sql.trim() = call decl javax.getConnection() call decl javax.getConnection() call decl javax.getConnection() call decl javax.getConnection() call decl javax.getConnection() else = call decl javax.getConnection() call decl javax.getConnection() call decl javax.getConnection() call decl javax.getConnection() call decl javax.getConnection() else throw new + + return private private for < : if != ResultSetIterator public < < public < < decl_stmt ResultSetIterator = new return call ResultSetIterator.getIterator() call ResultSetIterator.getIterator() call ResultSetIterator.getIterator() call ResultSetIterator.getIterator() call ResultSetIterator.getIterator() private private call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() int decl List private < private < throws decl_stmt java.util.List < = new <> decl_stmt int = for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + return Statement protected protected throws decl_stmt sun.tools.tree.Statement = call sun.tools.tree.Statement.setFetchSize(int) call sun.tools.tree.Statement.setFetchSize(int) call sun.tools.tree.Statement.setFetchSize(int) call sun.tools.tree.Statement.setFetchSize(int) call sun.tools.tree.Statement.setFetchSize(int) call sun.tools.tree.Statement.setMaxRows(int) call sun.tools.tree.Statement.setMaxRows(int) call sun.tools.tree.Statement.setMaxRows(int) call sun.tools.tree.Statement.setMaxRows(int) call sun.tools.tree.Statement.setMaxRows(int) return protected protected throws if return return protected < < protected < < < < return new < < public public return public < public < return public public public public return public < public < return public public Integer decl Map Object protected < protected < < < if == return decl_stmt java.util.Map < = new <> for : try if ! decl_stmt java.lang.Object = if instanceof || instanceof call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() continue decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = switch case call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() break case call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() break case call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() break case call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() break case call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() break case call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() break case call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() break default: call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() break catch return protected protected if == return try if return else return catch return protected protected try if != if != catch finally = = protected final < < protected final < < return long Connection protected protected throws decl_stmt long = if - > synchronized decl_stmt org.apache.lucene.replicator.nrt.Connection = call decl Callable.call() call decl Callable.call() call decl Callable.call() call decl Callable.call() call decl Callable.call() = return = else = return protected protected throws try if ! call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() finally public public try finally = private private try if != try call sun.rmi.transport.Connection.commit() call sun.rmi.transport.Connection.commit() call sun.rmi.transport.Connection.commit() call sun.rmi.transport.Connection.commit() call sun.rmi.transport.Connection.commit() catch call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error()