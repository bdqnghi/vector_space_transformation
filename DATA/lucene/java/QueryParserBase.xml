org.apache.lucene.queryparser.classic java.io.IOException import java.io.StringReader import java.text.DateFormat import java.util.* import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute import org.apache.lucene.document.DateTools import org.apache.lucene.index.Term import org.apache.lucene.queryparser.classic.QueryParser.Operator import org.apache.lucene.queryparser.flexible.standard.CommonQueryParserConfiguration import org.apache.lucene.search.* import org.apache.lucene.search.BooleanClause.Occur import org.apache.lucene.search.BooleanQuery.TooManyClauses import org.apache.lucene.util.BytesRef import org.apache.lucene.util.QueryBuilder import org.apache.lucene.util.automaton.RegExp import static static org.apache.lucene.util.automaton.Operations.DEFAULT_MAX_DETERMINIZED_STATES import class org.apache.lucene.queryparser.classic.QueryParserBase super super extends super implements int Operator Operator decl Resolution decl RewriteMethod decl DateTools boolean int int int decl Map decl MultiTermQuery String int boolean Operator int int boolean int TimeZone float Locale public public = Query ParseException public public throws new new try decl_stmt org.apache.lucene.search.Query = return != : catch decl_stmt org.apache.lucene.queryparser.surround.parser.ParseException = new + + + call ParseException.initCause() call ParseException.initCause() call ParseException.initCause() call ParseException.initCause() call ParseException.initCause() throw catch decl_stmt org.apache.lucene.queryparser.surround.parser.ParseException = new + + call ParseException.initCause() call ParseException.initCause() call ParseException.initCause() call ParseException.initCause() call ParseException.initCause() throw public public return public final public final return public final public final = public public return public public = public public return public public = public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public if == throw new if == = new <> call decl DateTools.put() call decl DateTools.put() call decl DateTools.put() call decl DateTools.put() call decl DateTools.put() decl DateTools public public if == throw new if == return decl_stmt Resolution = call decl DateTools.get() call decl DateTools.get() call decl DateTools.get() call decl DateTools.get() call decl DateTools.get() if == = return public public = public public return public public = public public return BooleanClause boolean BooleanClause protected protected < decl_stmt boolean if > && == decl_stmt org.apache.lucene.search.BooleanClause = - if ! call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() - new call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() if > && == && == decl_stmt org.apache.lucene.search.BooleanClause = - if ! call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() - new call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() if == return if == = == = == if == && ! = else = == = ! && != if && ! else if ! && ! else if ! && else throw new protected protected throws return decl BooleanClause protected protected throws decl_stmt Occur = == : return || decl Builder PhraseQuery decl org decl PhraseQuery decl apache Query protected protected throws decl_stmt org.apache.lucene.search.Query = if instanceof decl_stmt org.apache.lucene.util.fst.Builder = new call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() decl_stmt org.apache.lucene.search.PhraseQuery = decl_stmt org.apache.lucene.index.Term = call decl Builder.getTerms() call decl Builder.getTerms() call decl Builder.getTerms() call decl Builder.getTerms() call decl Builder.getTerms() decl_stmt int = call decl Builder.getPositions() call decl Builder.getPositions() call decl Builder.getPositions() call decl Builder.getPositions() call decl Builder.getPositions() for = < ++ call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() = call decl PhraseQuery.build() call decl PhraseQuery.build() call decl PhraseQuery.build() call decl PhraseQuery.build() call decl PhraseQuery.build() else if instanceof decl_stmt org.apache.lucene.search.MultiPhraseQuery = if != call decl apache.getSlop() call decl apache.getSlop() call decl apache.getSlop() call decl apache.getSlop() call decl apache.getSlop() = new return DateFormat decl Resolution decl DateTools Date protected protected throws if = == : = == : decl_stmt java.text.DateFormat = call java.text.DateFormat.setLenient(boolean) call java.text.DateFormat.setLenient(boolean) call java.text.DateFormat.setLenient(boolean) call java.text.DateFormat.setLenient(boolean) call java.text.DateFormat.setLenient(boolean) decl_stmt Resolution = try = call java.text.DateFormat.parse(String) call java.text.DateFormat.parse(String) call java.text.DateFormat.parse(String) call java.text.DateFormat.parse(String) call java.text.DateFormat.parse(String) catch try decl_stmt java.util.Date = call java.text.DateFormat.parse(String) call java.text.DateFormat.parse(String) call java.text.DateFormat.parse(String) call java.text.DateFormat.parse(String) call java.text.DateFormat.parse(String) if decl_stmt java.util.Calendar = call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call java.util.Date.setTime(long) call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() call Date.set() = call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() call java.util.Date.getTime() = catch return protected protected return new PrefixQuery protected protected decl_stmt org.apache.lucene.search.PrefixQuery = new call PrefixQuery.setRewriteMethod() call PrefixQuery.setRewriteMethod() call PrefixQuery.setRewriteMethod() call PrefixQuery.setRewriteMethod() call PrefixQuery.setRewriteMethod() return RegexpQuery protected protected decl_stmt org.apache.lucene.search.RegexpQuery = new call RegexpQuery.setRewriteMethod() call RegexpQuery.setRewriteMethod() call RegexpQuery.setRewriteMethod() call RegexpQuery.setRewriteMethod() call RegexpQuery.setRewriteMethod() return String int protected protected decl_stmt java.lang.String = decl_stmt int = call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() return new private private return BytesRef TermToBytesRefAttribute protected protected if == = try = decl_stmt org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute = if ! throw new + decl_stmt org.apache.lucene.util.BytesRef = call TermToBytesRefAttribute.getBytesRef() call TermToBytesRefAttribute.getBytesRef() call TermToBytesRefAttribute.getBytesRef() call TermToBytesRefAttribute.getBytesRef() call TermToBytesRefAttribute.getBytesRef() if throw new + return catch throw new + BytesRef BytesRef TermRangeQuery protected protected decl_stmt org.apache.lucene.util.BytesRef final final decl_stmt org.apache.lucene.util.BytesRef final final if == = else = : new if == = else = : new decl_stmt org.apache.lucene.search.TermRangeQuery final final = new call TermRangeQuery.setRewriteMethod() call TermRangeQuery.setRewriteMethod() call TermRangeQuery.setRewriteMethod() call TermRangeQuery.setRewriteMethod() call TermRangeQuery.setRewriteMethod() return protected protected return new WildcardQuery protected protected decl_stmt org.apache.lucene.search.WildcardQuery = new call WildcardQuery.setRewriteMethod() call WildcardQuery.setRewriteMethod() call WildcardQuery.setRewriteMethod() call WildcardQuery.setRewriteMethod() call WildcardQuery.setRewriteMethod() return decl BooleanQuery protected protected < throws if == return decl_stmt org.apache.lucene.util.fst.Builder = for final final : call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() return call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() Term protected protected throws if if return if ! && || throw new if = decl_stmt org.apache.lucene.index.Term = new return Term protected protected throws if = decl_stmt org.apache.lucene.index.Term = new return Term protected protected throws if ! && throw new if = decl_stmt org.apache.lucene.index.Term = new return Term protected protected throws if = decl_stmt org.apache.lucene.index.Term = new return Query String throws decl_stmt org.apache.lucene.search.Query decl_stmt java.lang.String = if = else if = - else if = - else if = else = return Query float throws decl_stmt org.apache.lucene.search.Query decl_stmt float = try = catch if < throw new else if >= && != int throw new = return int throws decl_stmt int = if != try = catch return - float if != decl_stmt float = float try = catch if != = new return int char boolean int int decl char throws decl_stmt char = new decl_stmt int = decl_stmt boolean = decl_stmt int = decl_stmt int = for = < ++ decl_stmt char = if > += * >>>= if == ++ = char = else if if == = * * else = ++ = else if == = else = ++ if > throw new if throw new return new static final static final throws if <= && <= return - else if <= && <= return - + else if <= && <= return - + else throw new + StringBuilder char public static public static decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt char = if == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()