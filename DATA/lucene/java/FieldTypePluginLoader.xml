org.apache.solr.schema javax.xml.xpath.XPath import javax.xml.xpath.XPathConstants import javax.xml.xpath.XPathExpressionException import javax.xml.xpath.XPathFactory import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collection import java.util.HashMap import java.util.Map import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.core.KeywordAnalyzer import org.apache.lucene.analysis.core.KeywordTokenizerFactory import org.apache.lucene.analysis.util.AbstractAnalysisFactory import org.apache.lucene.analysis.util.CharFilterFactory import org.apache.lucene.analysis.util.MultiTermAwareComponent import org.apache.lucene.analysis.util.TokenFilterFactory import org.apache.lucene.analysis.util.TokenizerFactory import org.apache.lucene.util.Version import org.apache.solr.analysis.TokenizerChain import org.apache.solr.common.SolrException import org.apache.solr.core.Config import org.apache.solr.core.SolrResourceLoader import org.apache.solr.util.DOMUtil import org.apache.solr.util.plugin.AbstractPluginLoader import org.slf4j.Logger import org.slf4j.LoggerFactory import org.w3c.dom.NamedNodeMap import org.w3c.dom.Node import org.w3c.dom.NodeList import static static org.apache.solr.common.params.CommonParams.NAME import class org.apache.solr.schema.FieldTypePluginLoader super super extends XPath Logger decl Map String decl Collection IndexSchema FieldType Analyzer Analyzer Node Analyzer SimilarityFactory String protected protected throws decl_stmt org.apache.solr.schema.FieldType = call org.apache.solr.schema.FieldType.setTypeName(String) call org.apache.solr.schema.FieldType.setTypeName(String) call org.apache.solr.schema.FieldType.setTypeName(String) call org.apache.solr.schema.FieldType.setTypeName(String) call org.apache.solr.schema.FieldType.setTypeName(String) decl_stmt java.lang.String = decl_stmt org.apache.lucene.replicator.nrt.Node = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() decl_stmt org.apache.lucene.analysis.Analyzer = = = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() decl_stmt org.apache.lucene.analysis.Analyzer = = = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() decl_stmt org.apache.lucene.analysis.Analyzer = = = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() decl_stmt org.apache.solr.schema.SimilarityFactory = if != call org.apache.solr.schema.FieldType.setSimilarity(SimilarityFactory) call org.apache.solr.schema.FieldType.setSimilarity(SimilarityFactory) call org.apache.solr.schema.FieldType.setSimilarity(SimilarityFactory) call org.apache.solr.schema.FieldType.setSimilarity(SimilarityFactory) call org.apache.solr.schema.FieldType.setSimilarity(SimilarityFactory) if == = call org.apache.solr.schema.FieldType.setIsExplicitQueryAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitQueryAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitQueryAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitQueryAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitQueryAnalyzer(boolean) else call org.apache.solr.schema.FieldType.setIsExplicitQueryAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitQueryAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitQueryAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitQueryAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitQueryAnalyzer(boolean) if == = call org.apache.solr.schema.FieldType.setIsExplicitAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitAnalyzer(boolean) else call org.apache.solr.schema.FieldType.setIsExplicitAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitAnalyzer(boolean) call org.apache.solr.schema.FieldType.setIsExplicitAnalyzer(boolean) if != call org.apache.solr.schema.FieldType.setIndexAnalyzer(Analyzer) call org.apache.solr.schema.FieldType.setIndexAnalyzer(Analyzer) call org.apache.solr.schema.FieldType.setIndexAnalyzer(Analyzer) call org.apache.solr.schema.FieldType.setIndexAnalyzer(Analyzer) call org.apache.solr.schema.FieldType.setIndexAnalyzer(Analyzer) call org.apache.solr.schema.FieldType.setQueryAnalyzer(Analyzer) call org.apache.solr.schema.FieldType.setQueryAnalyzer(Analyzer) call org.apache.solr.schema.FieldType.setQueryAnalyzer(Analyzer) call org.apache.solr.schema.FieldType.setQueryAnalyzer(Analyzer) call org.apache.solr.schema.FieldType.setQueryAnalyzer(Analyzer) if instanceof if == = else if instanceof call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() return decl Map protected protected throws decl_stmt java.util.Map < = protected protected throws call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() MultiTermChainBuilder decl CharFilterFactory TokenizerChain private private if == return if ! instanceof return new decl_stmt org.apache.solr.analysis.TokenizerChain = decl_stmt MultiTermChainBuilder = new decl_stmt org.apache.lucene.analysis.util.CharFilterFactory = call org.apache.solr.analysis.TokenizerChain.getCharFilterFactories() call org.apache.solr.analysis.TokenizerChain.getCharFilterFactories() call org.apache.solr.analysis.TokenizerChain.getCharFilterFactories() call org.apache.solr.analysis.TokenizerChain.getCharFilterFactories() call org.apache.solr.analysis.TokenizerChain.getCharFilterFactories() for : call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() call TokenizerChain.getTokenizerFactory() call TokenizerChain.getTokenizerFactory() call TokenizerChain.getTokenizerFactory() call TokenizerChain.getTokenizerFactory() call TokenizerChain.getTokenizerFactory() for : call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() call MultiTermChainBuilder.add() return call MultiTermChainBuilder.build() call MultiTermChainBuilder.build() call MultiTermChainBuilder.build() call MultiTermChainBuilder.build() call MultiTermChainBuilder.build() AbstractAnalysisFactory public public if ! instanceof return decl_stmt org.apache.lucene.analysis.util.AbstractAnalysisFactory = if instanceof if == = new <> else if instanceof = else if instanceof if == = new <> else throw new + decl CharFilterFactory decl TokenFilterFactory public public decl_stmt org.apache.lucene.analysis.util.CharFilterFactory = == : new decl_stmt org.apache.lucene.analysis.util.TokenFilterFactory = == new : new return new decl ArrayList NodeList String NodeList NodeList decl ArrayList TokenFilterFactory Analyzer SolrResourceLoader decl AbstractPluginLoader decl AbstractPluginLoader decl Map NamedNodeMap decl ArrayList decl AbstractPluginLoader String decl Class Version String private private throws decl_stmt org.apache.solr.core.SolrResourceLoader final final = call org.apache.solr.schema.IndexSchema.getResourceLoader() call org.apache.solr.schema.IndexSchema.getResourceLoader() call org.apache.solr.schema.IndexSchema.getResourceLoader() call org.apache.solr.schema.IndexSchema.getResourceLoader() call org.apache.solr.schema.IndexSchema.getResourceLoader() if == return decl_stmt NamedNodeMap = decl_stmt java.lang.String = decl_stmt NodeList = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() decl_stmt NodeList = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() decl_stmt NodeList = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() if != if != call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() || != call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() || != call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() throw new + + try decl_stmt java.lang.Class final final final < extends extends = call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) decl_stmt org.apache.lucene.analysis.Analyzer = call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() decl_stmt java.lang.String final final = decl_stmt org.apache.lucene.util.Version final final = == call org.apache.solr.schema.IndexSchema.getDefaultLuceneMatchVersion() call org.apache.solr.schema.IndexSchema.getDefaultLuceneMatchVersion() call org.apache.solr.schema.IndexSchema.getDefaultLuceneMatchVersion() call org.apache.solr.schema.IndexSchema.getDefaultLuceneMatchVersion() call org.apache.solr.schema.IndexSchema.getDefaultLuceneMatchVersion() : if == throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + call org.apache.lucene.analysis.Analyzer.setVersion(Version) call org.apache.lucene.analysis.Analyzer.setVersion(Version) call org.apache.lucene.analysis.Analyzer.setVersion(Version) call org.apache.lucene.analysis.Analyzer.setVersion(Version) call org.apache.lucene.analysis.Analyzer.setVersion(Version) return catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + throw new + decl_stmt java.util.ArrayList final final final < = new <> decl_stmt org.apache.solr.util.plugin.AbstractPluginLoader < = new < protected protected throws decl_stmt java.util.Map final final final < = decl_stmt java.lang.String = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.lucene.analysis.util.CharFilterFactory = call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) new new call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() != return protected protected throws if != call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() protected protected return call decl AbstractPluginLoader.load() call decl AbstractPluginLoader.load() call decl AbstractPluginLoader.load() call decl AbstractPluginLoader.load() call decl AbstractPluginLoader.load() decl_stmt java.util.ArrayList final final final < = new <> decl_stmt org.apache.solr.util.plugin.AbstractPluginLoader < = new < protected protected throws decl_stmt java.util.Map final final final < = decl_stmt java.lang.String = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.lucene.analysis.util.TokenizerFactory = call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) new new call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() != return protected protected throws if ! call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() throw new + call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() protected protected return call decl AbstractPluginLoader.load() call decl AbstractPluginLoader.load() call decl AbstractPluginLoader.load() call decl AbstractPluginLoader.load() call decl AbstractPluginLoader.load() if call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() throw new decl_stmt java.util.ArrayList final final final < = new <> decl_stmt org.apache.solr.util.plugin.AbstractPluginLoader < = new < protected protected throws decl_stmt java.util.Map final final final < = decl_stmt java.lang.String = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.lucene.analysis.util.TokenFilterFactory = call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) new new call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() != return protected protected throws if != call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() protected protected throws return call decl AbstractPluginLoader.load() call decl AbstractPluginLoader.load() call decl AbstractPluginLoader.load() call decl AbstractPluginLoader.load() call decl AbstractPluginLoader.load() return new call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() decl Map String CharFilterFactory protected protected throws decl_stmt java.util.Map final final final < = decl_stmt java.lang.String = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.lucene.analysis.util.CharFilterFactory = new new call CharFilterFactory.setExplicitLuceneMatchVersion() call CharFilterFactory.setExplicitLuceneMatchVersion() call CharFilterFactory.setExplicitLuceneMatchVersion() call CharFilterFactory.setExplicitLuceneMatchVersion() call CharFilterFactory.setExplicitLuceneMatchVersion() != return protected protected throws if != protected protected return decl Map String TokenizerFactory protected protected throws decl_stmt java.util.Map final final final < = decl_stmt java.lang.String = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.lucene.analysis.util.TokenizerFactory = new new call TokenizerFactory.setExplicitLuceneMatchVersion() call TokenizerFactory.setExplicitLuceneMatchVersion() call TokenizerFactory.setExplicitLuceneMatchVersion() call TokenizerFactory.setExplicitLuceneMatchVersion() call TokenizerFactory.setExplicitLuceneMatchVersion() != return protected protected throws if ! throw new + protected protected return decl Map String TokenFilterFactory protected protected throws decl_stmt java.util.Map final final final < = decl_stmt java.lang.String = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.lucene.analysis.util.TokenFilterFactory = new new call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() call TokenFilterFactory.setExplicitLuceneMatchVersion() != return protected protected throws if != protected protected throws return Version private private decl_stmt org.apache.lucene.util.Version = != : call org.apache.solr.schema.IndexSchema.getDefaultLuceneMatchVersion() call org.apache.solr.schema.IndexSchema.getDefaultLuceneMatchVersion() call org.apache.solr.schema.IndexSchema.getDefaultLuceneMatchVersion() call org.apache.solr.schema.IndexSchema.getDefaultLuceneMatchVersion() call org.apache.solr.schema.IndexSchema.getDefaultLuceneMatchVersion() if ! call org.apache.lucene.util.Version.onOrAfter(Version) call org.apache.lucene.util.Version.onOrAfter(Version) call org.apache.lucene.util.Version.onOrAfter(Version) call org.apache.lucene.util.Version.onOrAfter(Version) call org.apache.lucene.util.Version.onOrAfter(Version) call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + + return