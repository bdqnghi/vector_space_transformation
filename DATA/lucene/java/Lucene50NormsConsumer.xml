org.apache.lucene.codecs.lucene50 java.io.IOException import java.util.Arrays import java.util.Iterator import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.NormsConsumer import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.FilterIterator import org.apache.lucene.util.IOUtils import org.apache.lucene.util.InPlaceMergeSorter import org.apache.lucene.util.packed.BlockPackedWriter import org.apache.lucene.util.packed.MonotonicBlockPackedWriter import org.apache.lucene.util.packed.PackedInts import org.apache.lucene.util.packed.PackedInts.FormatAndBits import static static org.apache.lucene.codecs.lucene50.Lucene50NormsFormat.VERSION_CURRENT import class annotation org.apache.lucene.codecs.lucene50.Lucene50NormsConsumer super super extends float int IndexOutput public public < throws int int FormatAndBits float byte int NormMap long private private < throws assert <= decl_stmt NormMap = new decl_stmt int = for : if == throw new + + + decl_stmt long final final = if != if >= && <= if call NormMap.add() call NormMap.add() call NormMap.add() call NormMap.add() call NormMap.add() byte if > = else = ++ if == else if == else call NormMap.optimizeOrdinals() call NormMap.optimizeOrdinals() call NormMap.optimizeOrdinals() call NormMap.optimizeOrdinals() call NormMap.optimizeOrdinals() decl_stmt int = - decl_stmt int = if == && > decl_stmt float = * if > = else if = > && > = else if = > && > = if == - decl_stmt FormatAndBits = - if == else else if == decl_stmt byte = if == else else int private private decl_stmt int = for = < ++ += return decl Format decl PackedInts private private decl_stmt org.apache.lucene.benchmark.byTask.utils.Format = decl_stmt int = if == = else if > = return new private private throws private private < throws call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() for : call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() private private < throws call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl Writer decl PackedInts private private < throws call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() for = < ++ call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() decl_stmt Writer final final final final final = for : decl_stmt int = if < call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() else call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() BlockPackedWriter private private < throws call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt org.apache.lucene.util.packed.BlockPackedWriter final final = new for : call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() int private private final final final < throws decl_stmt int = - call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() if == else FormatAndBits private private final final final < final final final final throws call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() assert == || == decl_stmt FormatAndBits = - int private private final final final < final final final final throws decl_stmt int = - call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() new < public < public < return new < protected protected return > public < public < return new < protected protected return > protected protected return > int int MonotonicBlockPackedWriter private private final final final < throws call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedWriter final final = new decl_stmt int = for : decl_stmt int = if > call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() ++ call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() boolean public public throws decl_stmt boolean = try if != - if != = finally if else = = short int short public public assert <= decl_stmt int = int + decl_stmt short = if < decl_stmt short = short = ++ = ++ return else ++ return public public return int + byte int public public new protected protected return - protected protected int + = short int + = short decl_stmt int = decl_stmt byte = = = = = protected protected return - byte int protected protected int + = short int + = short decl_stmt int = decl_stmt byte = = = = =