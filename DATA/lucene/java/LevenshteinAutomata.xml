org.apache.lucene.util.automaton java.util.Iterator import java.util.SortedSet import java.util.TreeSet import org.apache.lucene.util.UnicodeUtil import class org.apache.lucene.util.automaton.LevenshteinAutomata ParametricDescription int int int int int private static private static decl_stmt int = decl_stmt int = new for = = = < += ++ = = return public public return Automaton int int int ParametricDescription int int int int int int int public public assert != if == return + if >= return decl_stmt int final final = * + decl_stmt ParametricDescription = decl_stmt int = call ParametricDescription.size() call ParametricDescription.size() call ParametricDescription.size() call ParametricDescription.size() call ParametricDescription.size() decl_stmt org.apache.lucene.util.automaton.Automaton = new decl_stmt int if != = call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() for = = < += decl_stmt int = call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() = call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) = else = call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() decl_stmt int = call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call ParametricDescription.isAccept() call ParametricDescription.isAccept() call ParametricDescription.isAccept() call ParametricDescription.isAccept() call ParametricDescription.isAccept() for = < ++ decl_stmt int = call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call ParametricDescription.isAccept() call ParametricDescription.isAccept() call ParametricDescription.isAccept() call ParametricDescription.isAccept() call ParametricDescription.isAccept() for = < ++ decl_stmt int final final = call ParametricDescription.getPosition() call ParametricDescription.getPosition() call ParametricDescription.getPosition() call ParametricDescription.getPosition() call ParametricDescription.getPosition() if < continue decl_stmt int final final = + - for = < ++ decl_stmt int final final = decl_stmt int final final = decl_stmt int = call ParametricDescription.transition() call ParametricDescription.transition() call ParametricDescription.transition() call ParametricDescription.transition() call ParametricDescription.transition() if >= call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) + + decl_stmt int = call ParametricDescription.transition() call ParametricDescription.transition() call ParametricDescription.transition() call ParametricDescription.transition() call ParametricDescription.transition() if >= for = < ++ call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) + + call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() assert call org.apache.lucene.util.automaton.Automaton.isDeterministic() call org.apache.lucene.util.automaton.Automaton.isDeterministic() call org.apache.lucene.util.automaton.Automaton.isDeterministic() call org.apache.lucene.util.automaton.Automaton.isDeterministic() call org.apache.lucene.util.automaton.Automaton.isDeterministic() return int decl_stmt int = for = < ++ <<= if == |= return return * + int int decl_stmt int = / + decl_stmt int = + assert >= return - + <= return + int long int int protected protected decl_stmt long final final = * decl_stmt int final final = >> decl_stmt int final final = & if + <= return >> & - else decl_stmt int final final = - return >> & - + + & - - <<