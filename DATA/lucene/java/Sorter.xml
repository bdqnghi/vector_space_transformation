org.apache.lucene.index java.io.IOException import java.util.Comparator import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.LeafFieldComparator import org.apache.lucene.search.Scorer import org.apache.lucene.search.Sort import org.apache.lucene.search.SortField import org.apache.lucene.util.TimSorter import org.apache.lucene.util.packed.PackedInts import org.apache.lucene.util.packed.PackedLongValues import class org.apache.lucene.index.Sorter Sort Scorer int int int static static decl_stmt int final final = for = < ++ decl_stmt int final final = decl_stmt int final final = assert >= && < : + + + assert == : + + + + + if != || < || >= return return protected protected return int protected protected decl_stmt int = = = protected protected = protected protected protected protected = protected protected return PackedLongValues decl int decl PackedLongValues DocValueSorter decl Builder decl PackedLongValues boolean private static private static final final decl_stmt boolean = for = < ++ if - > = break if return decl_stmt int final final final = new for = < ++ = decl_stmt DocValueSorter = new call DocValueSorter.sort() call DocValueSorter.sort() call DocValueSorter.sort() call DocValueSorter.sort() call DocValueSorter.sort() decl_stmt org.apache.lucene.util.fst.Builder final final final final final = for = < ++ call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() decl_stmt org.apache.lucene.util.packed.PackedLongValues final final = call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() for = < ++ int call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() = decl_stmt org.apache.lucene.util.fst.Builder final final final final final = for = < ++ call org.apache.lucene.util.packed.PackedLongValues.add(long) call org.apache.lucene.util.packed.PackedLongValues.add(long) call org.apache.lucene.util.packed.PackedLongValues.add(long) call org.apache.lucene.util.packed.PackedLongValues.add(long) call org.apache.lucene.util.packed.PackedLongValues.add(long) decl_stmt org.apache.lucene.util.packed.PackedLongValues final final = call org.apache.lucene.util.packed.PackedLongValues.build() call org.apache.lucene.util.packed.PackedLongValues.build() call org.apache.lucene.util.packed.PackedLongValues.build() call org.apache.lucene.util.packed.PackedLongValues.build() call org.apache.lucene.util.packed.PackedLongValues.build() return new public public return int call decl PackedLongValues.get() call decl PackedLongValues.get() call decl PackedLongValues.get() call decl PackedLongValues.get() call decl PackedLongValues.get() public public return int call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() public public return public public return int public public return int public public return int LeafFieldComparator DocComparator throws decl_stmt org.apache.lucene.search.SortField = call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() decl_stmt int final final = new decl_stmt org.apache.lucene.search.LeafFieldComparator final final = new for = < ++ = - : = decl_stmt DocComparator final final = new public public try for = < ++ decl_stmt int = * if != return return catch throw new return int public public try for = < ++ decl_stmt int = * if != return return catch throw new public public return call org.apache.lucene.search.Sort.toString() call org.apache.lucene.search.Sort.toString() call org.apache.lucene.search.Sort.toString() call org.apache.lucene.search.Sort.toString() call org.apache.lucene.search.Sort.toString() public public return public public return public public throw new public public throws return public public throws return