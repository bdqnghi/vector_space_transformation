org.apache.solr.core javax.xml.namespace.QName import javax.xml.parsers.DocumentBuilder import javax.xml.parsers.DocumentBuilderFactory import javax.xml.parsers.ParserConfigurationException import javax.xml.transform.Transformer import javax.xml.transform.TransformerException import javax.xml.transform.TransformerFactory import javax.xml.transform.dom.DOMResult import javax.xml.transform.dom.DOMSource import javax.xml.xpath.XPath import javax.xml.xpath.XPathConstants import javax.xml.xpath.XPathExpressionException import javax.xml.xpath.XPathFactory import java.io.IOException import java.io.InputStream import java.lang.invoke.MethodHandles import java.text.ParseException import java.util.Arrays import java.util.HashSet import java.util.Map import java.util.Properties import java.util.Set import java.util.SortedMap import java.util.SortedSet import java.util.TreeMap import java.util.TreeSet import java.util.concurrent.atomic.AtomicBoolean import org.apache.commons.io.IOUtils import org.apache.lucene.util.Version import org.apache.solr.cloud.ZkSolrResourceLoader import org.apache.solr.common.SolrException import org.apache.solr.common.util.XMLErrorLogger import org.apache.solr.util.DOMUtil import org.apache.solr.util.SystemIdResolver import org.slf4j.Logger import org.slf4j.LoggerFactory import org.w3c.dom.Document import org.w3c.dom.Element import org.w3c.dom.NamedNodeMap import org.w3c.dom.Node import org.w3c.dom.NodeList import org.xml.sax.InputSource import org.xml.sax.SAXException import class org.apache.solr.core.Config XMLErrorLogger Logger Document int String String Document AtomicBoolean SolrResourceLoader XPathFactory public static public static if return else if throw new else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() protected protected return call org.apache.solr.core.SolrResourceLoader.getCoreProperties() call org.apache.solr.core.SolrResourceLoader.getCoreProperties() call org.apache.solr.core.SolrResourceLoader.getCoreProperties() call org.apache.solr.core.SolrResourceLoader.getCoreProperties() call org.apache.solr.core.SolrResourceLoader.getCoreProperties() DOMSource Transformer TransformerFactory DOMResult private static private static throws decl_stmt org.apache.solr.response.transform.TransformerFactory = decl_stmt Transformer = call TransformerFactory.newTransformer() call TransformerFactory.newTransformer() call TransformerFactory.newTransformer() call TransformerFactory.newTransformer() call TransformerFactory.newTransformer() decl_stmt DOMSource = new decl_stmt DOMResult = new call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() return call DOMResult.getNode() call DOMResult.getNode() call DOMResult.getNode() call DOMResult.getNode() call DOMResult.getNode() public public return public public return public public return public public return public public return call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() private private return == || : + public public XPath String Object public public decl_stmt XPath = call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() try decl_stmt java.lang.String = decl_stmt java.lang.Object = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() return catch throw new + + + public public return public public return XPath String NodeList Node public public decl_stmt XPath = call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() decl_stmt java.lang.String = try decl_stmt NodeList = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() if == || == call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() if throw new + + else call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + return if < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() throw new + + decl_stmt org.apache.lucene.replicator.nrt.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + + + + return catch throw new + + + catch throw catch throw new + + + XPath String NodeList public public decl_stmt XPath = call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() decl_stmt java.lang.String = try decl_stmt NodeList = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() if == if throw new + + else call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + return call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + + + + return catch throw new + + + catch throw catch throw new + + + decl Set decl Set String NamedNodeMap public < public < decl_stmt java.util.Set < = new <> decl_stmt java.util.Set < = decl_stmt NamedNodeMap = for = < call NamedNodeMap.getLength() call NamedNodeMap.getLength() call NamedNodeMap.getLength() call NamedNodeMap.getLength() call NamedNodeMap.getLength() ++ decl_stmt java.lang.String final final = call NamedNodeMap.item() call NamedNodeMap.item() call NamedNodeMap.item() call NamedNodeMap.item() call NamedNodeMap.item() if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() if == = new <> call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return String NodeList decl SortedMap Element decl Set String StringBuilder decl SortedSet public public decl_stmt java.util.SortedMap < < = new <> decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt javax.swing.text.Element = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt java.util.Set < = if != decl_stmt java.lang.String = call Element.getNodeName() call Element.getNodeName() call Element.getNodeName() call Element.getNodeName() call Element.getNodeName() decl_stmt java.util.SortedSet < = call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() call decl SortedMap.get() if == = new <> call decl SortedMap.put() call decl SortedMap.put() call decl SortedMap.put() call decl SortedMap.put() call decl SortedMap.put() call decl SortedSet.addAll() call decl SortedSet.addAll() call decl SortedSet.addAll() call decl SortedSet.addAll() call decl SortedSet.addAll() if call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() call decl SortedMap.size() > decl_stmt java.lang.StringBuilder = new for < < : call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) call java.lang.StringBuilder.insert(int,char,int,int) decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() throw new String Node public public decl_stmt org.apache.lucene.replicator.nrt.Node = if == return decl_stmt java.lang.String = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + + return public public return String public public decl_stmt java.lang.String = if == || call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == return return public public return String public public decl_stmt java.lang.String = return != : public public return String public public decl_stmt java.lang.String = return != : public public return String public public decl_stmt java.lang.String = return != : public public return String public public decl_stmt java.lang.String = return != : public public return String public public decl_stmt java.lang.String = return != : Version public static final public static final final final decl_stmt org.apache.lucene.util.Version final final try = catch throw new if == && ! call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call AtomicBoolean.getAndSet() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + return public public return public public return new