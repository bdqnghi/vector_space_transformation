org.apache.solr.common.util java.io.Closeable import java.io.PrintWriter import java.io.StringWriter import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.List import java.util.Map import java.util.Map.Entry import java.util.Set import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.ExecutorService import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.common.util.ObjectReleaseTracker decl Map Logger StringWriter PrintWriter public static public static decl_stmt StringWriter = new decl_stmt PrintWriter = new new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() return public static public static call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() return public static public static call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() String public static public static decl_stmt java.lang.String = call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() return decl Set decl List String public static public static decl_stmt java.lang.String = decl_stmt java.util.Set < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > decl_stmt java.util.List < = new <> for < : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = + call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() + + for < : return decl Set public static public static decl_stmt java.util.Set < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > for < : if instanceof try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() else if instanceof try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error()