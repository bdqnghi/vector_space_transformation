org.apache.lucene.index static static org.apache.lucene.util.ByteBlockPool.BYTE_BLOCK_SIZE import java.io.IOException import java.util.Arrays import java.util.Iterator import java.util.NoSuchElementException import org.apache.lucene.codecs.DocValuesConsumer import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.ByteBlockPool import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefHash.DirectBytesStartArray import org.apache.lucene.util.BytesRefHash import org.apache.lucene.util.Counter import org.apache.lucene.util.packed.PackedInts import org.apache.lucene.util.packed.PackedLongValues import class org.apache.lucene.index.SortedSetDocValuesWriter super super extends decl PackedLongValues BytesRefHash decl Builder long FieldInfo decl Builder int int Counter decl PackedLongValues public public if == throw new + + if > - throw new + + + - if != while < call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() ++ int int int private private decl_stmt int = - decl_stmt int = for = < ++ decl_stmt int = if != call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() ++ = call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() = = ++ public public for = < ++ call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() int private private decl_stmt int = call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) call org.apache.lucene.util.BytesRefHash.add(BytesRef) if < = - - else call decl PackedLongValues.addAndGet() call decl PackedLongValues.addAndGet() call decl PackedLongValues.addAndGet() call decl PackedLongValues.addAndGet() call decl PackedLongValues.addAndGet() * if == = + call decl PackedLongValues.addAndGet() call decl PackedLongValues.addAndGet() call decl PackedLongValues.addAndGet() call decl PackedLongValues.addAndGet() call decl PackedLongValues.addAndGet() - * * = ++ long private private decl_stmt long final final = call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() + call decl Builder.ramBytesUsed() call decl Builder.ramBytesUsed() call decl Builder.ramBytesUsed() call decl Builder.ramBytesUsed() call decl Builder.ramBytesUsed() call decl PackedLongValues.addAndGet() call decl PackedLongValues.addAndGet() call decl PackedLongValues.addAndGet() call decl PackedLongValues.addAndGet() call decl PackedLongValues.addAndGet() - = int decl int PackedLongValues int int PackedLongValues decl int public public throws decl_stmt int final final = decl_stmt int final final = assert call decl Builder.size() call decl Builder.size() call decl Builder.size() call decl Builder.size() call decl Builder.size() == decl_stmt int final final = call org.apache.lucene.util.BytesRefHash.size() call org.apache.lucene.util.BytesRefHash.size() call org.apache.lucene.util.BytesRefHash.size() call org.apache.lucene.util.BytesRefHash.size() call org.apache.lucene.util.BytesRefHash.size() decl_stmt org.apache.lucene.util.packed.PackedLongValues final final = call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() decl_stmt org.apache.lucene.util.packed.PackedLongValues final final = call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl Builder.build() decl_stmt int final final final = call org.apache.lucene.util.BytesRefHash.sort() call org.apache.lucene.util.BytesRefHash.sort() call org.apache.lucene.util.BytesRefHash.sort() call org.apache.lucene.util.BytesRefHash.sort() call org.apache.lucene.util.BytesRefHash.sort() decl_stmt int final final final = new for = < ++ = new < public < public < return new new < public < public < return new new < public < public < return new public < public < return new public < public < return new public < public < return new public public return < public public if ! throw new call org.apache.lucene.util.BytesRefHash.get(int,BytesRef) call org.apache.lucene.util.BytesRefHash.get(int,BytesRef) call org.apache.lucene.util.BytesRefHash.get(int,BytesRef) call org.apache.lucene.util.BytesRefHash.get(int,BytesRef) call org.apache.lucene.util.BytesRefHash.get(int,BytesRef) ++ return public public throw new public public return < int public public if ! throw new while == = = int for = < ++ = int decl_stmt int = ++ ++ return public public throw new public public return < public public if ! throw new ++ return public public throw new