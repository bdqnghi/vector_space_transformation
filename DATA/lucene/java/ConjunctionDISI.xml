org.apache.lucene.search java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.Comparator import java.util.List import org.apache.lucene.search.spans.Spans import org.apache.lucene.util.CollectionUtil import class org.apache.lucene.search.ConjunctionDISI super super extends DocIdSetIterator decl DocIdSetIterator decl List decl List public static public static < if < throw new decl_stmt java.util.List final final final < = new <> decl_stmt java.util.List final final final < = new <> for : if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return new else return new decl List decl List public static public static < if < throw new decl_stmt java.util.List final final final < = new <> decl_stmt java.util.List final final final < = new <> for : if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return new else return new decl List decl List public static public static < if < throw new decl_stmt java.util.List final final final < = new <> decl_stmt java.util.List final final final < = new <> for : if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return new else return new TwoPhaseIterator private static private static < < decl_stmt org.apache.lucene.search.TwoPhaseIterator = if != else TwoPhaseIterator private static private static < < decl_stmt org.apache.lucene.search.TwoPhaseIterator = if != else ConjunctionDISI TwoPhase private static private static < < if == || == decl_stmt org.apache.lucene.search.ConjunctionDISI = if call ConjunctionDISI.getClass() call ConjunctionDISI.getClass() call ConjunctionDISI.getClass() call ConjunctionDISI.getClass() call ConjunctionDISI.getClass() == decl_stmt TwoPhase = else private static private static < < public public return protected protected throws return return int private private throws for if == return for for : if < decl_stmt int final final = if > = call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) break break if return else = call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() break break public public throws return call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) public public return call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() public public throws return call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() public public return call org.apache.lucene.search.DocIdSetIterator.cost() call org.apache.lucene.search.DocIdSetIterator.cost() call org.apache.lucene.search.DocIdSetIterator.cost() call org.apache.lucene.search.DocIdSetIterator.cost() call org.apache.lucene.search.DocIdSetIterator.cost() public public return public public throws for : if == return return public public return public public return protected protected throws return