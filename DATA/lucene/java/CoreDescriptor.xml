org.apache.solr.core java.io.File import java.io.IOException import java.io.InputStream import java.io.InputStreamReader import java.lang.invoke.MethodHandles import java.nio.charset.StandardCharsets import java.nio.file.Files import java.nio.file.Path import java.util.Collections import java.util.HashMap import java.util.Locale import java.util.Map import java.util.Properties import com.google.common.collect.ImmutableList import com.google.common.collect.ImmutableMap import org.apache.commons.lang.StringUtils import org.apache.solr.cloud.CloudDescriptor import org.apache.solr.common.SolrException import org.apache.solr.util.PropertiesUtil import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.core.CoreDescriptor String CoreContainer Path String String String Logger String decl ImmutableList String Properties String String decl ImmutableMap String decl ImmutableList Properties String String String Properties String CloudDescriptor String Properties String String public public return public public return decl Map private static < private static < decl_stmt java.util.Map < = new <> assert == for = < += call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + return String Path Properties String protected protected decl_stmt java.lang.String = call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) decl_stmt java.nio.file.Path = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) if try = decl_stmt java.util.Properties = new call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) new call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() catch decl_stmt java.lang.String = call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() throw new String protected protected for : call java.util.Properties.stringPropertyNames() call java.util.Properties.stringPropertyNames() call java.util.Properties.stringPropertyNames() call java.util.Properties.stringPropertyNames() call java.util.Properties.stringPropertyNames() decl_stmt java.lang.String = call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) if ! = + call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() protected static protected static return ! call decl ImmutableList.contains() call decl ImmutableList.contains() call decl ImmutableList.contains() call decl ImmutableList.contains() call decl ImmutableList.contains() String public static public static if decl_stmt java.lang.String = throw new return public public return call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) public public return call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) public public return call decl ImmutableMap.get() call decl ImmutableMap.get() call decl ImmutableMap.get() call decl ImmutableMap.get() call decl ImmutableMap.get() call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) public public return public public return call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) public public return call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) public public return call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) public public return == : call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() public public return public public return String public public decl_stmt java.lang.String = call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) return String public public decl_stmt java.lang.String = call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) return public public return call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) public public return call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) public public return public public return + + + + public public return call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) public public return call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String)