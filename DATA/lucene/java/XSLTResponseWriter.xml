org.apache.solr.response java.io.BufferedReader import java.io.CharArrayReader import java.io.CharArrayWriter import java.io.IOException import java.io.Reader import java.io.Writer import java.lang.invoke.MethodHandles import java.util.Map import org.slf4j.Logger import org.slf4j.LoggerFactory import javax.xml.transform.Transformer import javax.xml.transform.TransformerException import javax.xml.transform.stream.StreamResult import javax.xml.transform.stream.StreamSource import org.apache.solr.core.SolrConfig import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.XMLErrorLogger import org.apache.solr.request.SolrQueryRequest import org.apache.solr.util.xslt.TransformerProvider import class org.apache.solr.response.XSLTResponseWriter super super implements XMLErrorLogger String Logger String String int Integer SolrParams public public decl_stmt org.apache.solr.common.params.SolrParams final final = = call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + String Transformer String public public decl_stmt Transformer = try = catch throw new decl_stmt java.lang.String = call Transformer.getOutputProperty() call Transformer.getOutputProperty() call Transformer.getOutputProperty() call Transformer.getOutputProperty() call Transformer.getOutputProperty() if == || call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == = if ! call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) decl_stmt java.lang.String = call Transformer.getOutputProperty() call Transformer.getOutputProperty() call Transformer.getOutputProperty() call Transformer.getOutputProperty() call Transformer.getOutputProperty() if == || call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == = = + + return StreamSource Reader Transformer CharArrayWriter StreamResult public public throws decl_stmt Transformer final final = decl_stmt java.io.CharArrayWriter final final = new decl_stmt java.io.Reader final final = new new call CharArrayWriter.toCharArray() call CharArrayWriter.toCharArray() call CharArrayWriter.toCharArray() call CharArrayWriter.toCharArray() call CharArrayWriter.toCharArray() decl_stmt StreamSource final final = new decl_stmt StreamResult final final = new try call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() catch throw new SolrConfig decl Map Transformer String protected protected throws decl_stmt java.lang.String final final = if == throw new + + decl_stmt org.apache.solr.core.SolrConfig = decl_stmt java.util.Map final final final < = decl_stmt Transformer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call Transformer.setErrorListener() call Transformer.setErrorListener() call Transformer.setErrorListener() call Transformer.setErrorListener() call Transformer.setErrorListener() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return