org.apache.solr.handler.loader javax.xml.parsers.SAXParserFactory import javax.xml.stream.FactoryConfigurationError import javax.xml.stream.XMLInputFactory import javax.xml.stream.XMLStreamConstants import javax.xml.stream.XMLStreamException import javax.xml.stream.XMLStreamReader import javax.xml.transform.Transformer import javax.xml.transform.TransformerException import javax.xml.transform.dom.DOMResult import javax.xml.transform.dom.DOMSource import javax.xml.transform.sax.SAXSource import java.io.ByteArrayInputStream import java.io.IOException import java.io.InputStream import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collection import java.util.HashMap import java.util.List import java.util.Map import com.google.common.collect.Lists import org.apache.commons.io.IOUtils import org.apache.solr.client.solrj.request.UpdateRequest import org.apache.solr.common.SolrException import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.params.UpdateParams import org.apache.solr.common.util.ContentStream import org.apache.solr.common.util.ContentStreamBase import org.apache.solr.common.util.StrUtils import org.apache.solr.common.util.XMLErrorLogger import org.apache.solr.core.SolrConfig import org.apache.solr.handler.RequestHandlerUtils import org.apache.solr.handler.UpdateRequestHandler import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.update.AddUpdateCommand import org.apache.solr.update.CommitUpdateCommand import org.apache.solr.update.DeleteUpdateCommand import org.apache.solr.update.RollbackUpdateCommand import org.apache.solr.update.processor.UpdateRequestProcessor import org.apache.solr.common.EmptyEntityResolver import org.apache.solr.util.xslt.TransformerProvider import org.slf4j.Logger import org.slf4j.LoggerFactory import org.xml.sax.InputSource import org.xml.sax.XMLReader import static static org.apache.solr.common.params.CommonParams.NAME import class org.apache.solr.handler.loader.XMLLoader super super extends XMLErrorLogger Logger SAXParserFactory String String int int XMLInputFactory public public = call XMLInputFactory.setXMLReporter() call XMLInputFactory.setXMLReporter() call XMLInputFactory.setXMLReporter() call XMLInputFactory.setXMLReporter() call XMLInputFactory.setXMLReporter() try call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() call XMLInputFactory.setProperty() catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + = call SAXParserFactory.setNamespaceAware() call SAXParserFactory.setNamespaceAware() call SAXParserFactory.setNamespaceAware() call SAXParserFactory.setNamespaceAware() call SAXParserFactory.setNamespaceAware() = if != = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + return public public return decl byte XMLStreamReader InputStream String String SAXSource Transformer InputSource XMLReader DOMResult public public throws decl_stmt java.lang.String final final = decl_stmt java.io.InputStream = decl_stmt XMLStreamReader = decl_stmt java.lang.String = if != decl_stmt Transformer final final = decl_stmt DOMResult final final = new try = decl_stmt InputSource final final = new call InputSource.setEncoding() call InputSource.setEncoding() call InputSource.setEncoding() call InputSource.setEncoding() call InputSource.setEncoding() decl_stmt XMLReader final final = call SAXParserFactory.newSAXParser() call SAXParserFactory.newSAXParser() call SAXParserFactory.newSAXParser() call SAXParserFactory.newSAXParser() call SAXParserFactory.newSAXParser() call XMLReader.setErrorHandler() call XMLReader.setErrorHandler() call XMLReader.setErrorHandler() call XMLReader.setErrorHandler() call XMLReader.setErrorHandler() call XMLReader.setEntityResolver() call XMLReader.setEntityResolver() call XMLReader.setEntityResolver() call XMLReader.setEntityResolver() call XMLReader.setEntityResolver() decl_stmt SAXSource final final = new call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() catch throw new finally try = call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() new call DOMResult.getNode() call DOMResult.getNode() call DOMResult.getNode() call DOMResult.getNode() call DOMResult.getNode() catch throw new finally if != call XMLStreamReader.close() call XMLStreamReader.close() call XMLStreamReader.close() call XMLStreamReader.close() call XMLStreamReader.close() else try = if call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() decl_stmt byte final final final = call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() new == : = new = == call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() : call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() call XMLInputFactory.createXMLStreamReader() catch throw new finally if != call XMLStreamReader.close() call XMLStreamReader.close() call XMLStreamReader.close() call XMLStreamReader.close() call XMLStreamReader.close() SolrConfig decl Map Transformer throws decl_stmt java.util.Map final final final < = decl_stmt Transformer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == decl_stmt org.apache.solr.core.SolrConfig = = call Transformer.setErrorListener() call Transformer.setErrorListener() call Transformer.setErrorListener() call Transformer.setErrorListener() call Transformer.setErrorListener() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return SolrParams RollbackUpdateCommand String String SolrParams AddUpdateCommand String int ModifiableSolrParams throws decl_stmt org.apache.solr.update.AddUpdateCommand = decl_stmt org.apache.solr.common.params.SolrParams = while decl_stmt int = switch case return case decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() = new = call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) - = call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) for = < ++ decl_stmt java.lang.String = decl_stmt java.lang.String = if = else if = else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + else if if != call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call org.apache.solr.update.AddUpdateCommand.clear() call org.apache.solr.update.AddUpdateCommand.clear() call org.apache.solr.update.AddUpdateCommand.clear() call org.apache.solr.update.AddUpdateCommand.clear() call org.apache.solr.update.AddUpdateCommand.clear() = else throw new else if || call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + decl_stmt org.apache.solr.update.CommitUpdateCommand = new decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new for = < ++ decl_stmt java.lang.String = decl_stmt java.lang.String = call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) decl_stmt org.apache.solr.common.params.SolrParams = else if call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() decl_stmt org.apache.solr.update.RollbackUpdateCommand = new else if call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() break StringBuilder String String DeleteUpdateCommand SolrParams String String String int throws decl_stmt org.apache.solr.update.DeleteUpdateCommand = new decl_stmt org.apache.solr.common.params.SolrParams = = call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) - for = < ++ decl_stmt java.lang.String = decl_stmt java.lang.String = if else if else if = else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + decl_stmt java.lang.StringBuilder = new while decl_stmt int = switch case decl_stmt java.lang.String = if ! || decl_stmt java.lang.String = + call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() throw new call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() if for = < ++ decl_stmt java.lang.String = decl_stmt java.lang.String = if call DeleteUpdateCommand.setVersion() call DeleteUpdateCommand.setVersion() call DeleteUpdateCommand.setVersion() call DeleteUpdateCommand.setVersion() call DeleteUpdateCommand.setVersion() if call DeleteUpdateCommand.setRoute() call DeleteUpdateCommand.setRoute() call DeleteUpdateCommand.setRoute() call DeleteUpdateCommand.setRoute() call DeleteUpdateCommand.setRoute() break case decl_stmt java.lang.String = if call org.apache.solr.update.DeleteUpdateCommand.setId(String) call org.apache.solr.update.DeleteUpdateCommand.setId(String) call org.apache.solr.update.DeleteUpdateCommand.setId(String) call org.apache.solr.update.DeleteUpdateCommand.setId(String) call org.apache.solr.update.DeleteUpdateCommand.setId(String) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() else if call DeleteUpdateCommand.setQuery() call DeleteUpdateCommand.setQuery() call DeleteUpdateCommand.setQuery() call DeleteUpdateCommand.setQuery() call DeleteUpdateCommand.setQuery() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() else if return else decl_stmt java.lang.String = + call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() throw new call org.apache.solr.update.DeleteUpdateCommand.clear() call org.apache.solr.update.DeleteUpdateCommand.clear() call org.apache.solr.update.DeleteUpdateCommand.clear() call org.apache.solr.update.DeleteUpdateCommand.clear() call org.apache.solr.update.DeleteUpdateCommand.clear() break case case case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break String String Object String SolrInputDocument Object List String decl Map String boolean decl Map decl List decl Map StringBuilder decl Collection String float int boolean public public throws decl_stmt org.apache.solr.common.SolrInputDocument = new decl_stmt java.lang.String = for = < ++ = if call org.apache.solr.common.SolrInputDocument.setDocumentBoost(float) call org.apache.solr.common.SolrInputDocument.setDocumentBoost(float) call org.apache.solr.common.SolrInputDocument.setDocumentBoost(float) call org.apache.solr.common.SolrInputDocument.setDocumentBoost(float) call org.apache.solr.common.SolrInputDocument.setDocumentBoost(float) else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + decl_stmt java.lang.StringBuilder = new decl_stmt java.lang.String = decl_stmt float = decl_stmt boolean = decl_stmt java.lang.String = decl_stmt java.util.Collection < = decl_stmt java.util.Map < < = decl_stmt boolean = while ! decl_stmt int = switch case case case call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break case if if != && ! call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call org.apache.solr.common.SolrInputDocument.addChildDocuments(Collection) call org.apache.solr.common.SolrInputDocument.addChildDocuments(Collection) call org.apache.solr.common.SolrInputDocument.addChildDocuments(Collection) call org.apache.solr.common.SolrInputDocument.addChildDocuments(Collection) call org.apache.solr.common.SolrInputDocument.addChildDocuments(Collection) = = break else if decl_stmt java.lang.Object = : call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if != if == = new <> decl_stmt java.util.Map < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if instanceof decl_stmt java.util.List = call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) else decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() break call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) = = break case call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() decl_stmt java.lang.String = if if == = call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() else if ! decl_stmt java.lang.String = + call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() throw new = = = decl_stmt java.lang.String = for = < ++ = = if = else if = else if = else if = else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + break if != for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() = decl_stmt java.util.Map < = call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) return