org.apache.solr.spelling.suggest java.io.Closeable import java.io.File import java.io.FileInputStream import java.io.FileOutputStream import java.io.IOException import java.lang.invoke.MethodHandles import java.util.Collection import java.util.Collections import java.util.List import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.standard.StandardTokenizerFactory import org.apache.lucene.queryparser.flexible.core.QueryNodeException import org.apache.lucene.queryparser.flexible.standard.StandardQueryParser import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.Query import org.apache.lucene.search.spell.Dictionary import org.apache.lucene.search.suggest.Lookup import org.apache.lucene.search.suggest.Lookup.LookupResult import org.apache.lucene.util.Accountable import org.apache.lucene.util.IOUtils import org.apache.solr.analysis.TokenizerChain import org.apache.solr.common.util.NamedList import org.apache.solr.core.CloseHook import org.apache.solr.core.SolrCore import org.apache.solr.search.SolrIndexSearcher import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.common.params.CommonParams.NAME import static static org.apache.solr.spelling.suggest.fst.AnalyzingInfixLookupFactory.CONTEXTS_FIELD_NAME import class org.apache.solr.spelling.suggest.SolrSuggester super super implements Analyzer String Logger Dictionary String LookupFactory String String String Lookup String DictionaryFactory File String SuggesterResult String String String public public < call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + = != : = = = decl_stmt java.lang.String = if == = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + = new new = = call LookupFactory.create() call LookupFactory.create() call LookupFactory.create() call LookupFactory.create() call LookupFactory.create() new public public if != && instanceof try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() public public if != && ! call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() = new if ! call File.isAbsolute() call File.isAbsolute() call File.isAbsolute() call File.isAbsolute() call File.isAbsolute() = new + + if ! call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() else if if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + try call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) new catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() if == = == : call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + = call DictionaryFactory.setParams() call DictionaryFactory.setParams() call DictionaryFactory.setParams() call DictionaryFactory.setParams() call DictionaryFactory.setParams() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + return public public if != && instanceof try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() public public File public public throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + = call DictionaryFactory.create() call DictionaryFactory.create() call DictionaryFactory.create() call DictionaryFactory.create() call DictionaryFactory.create() call org.apache.lucene.search.suggest.Lookup.build(Dictionary) call org.apache.lucene.search.suggest.Lookup.build(Dictionary) call org.apache.lucene.search.suggest.Lookup.build(Dictionary) call org.apache.lucene.search.suggest.Lookup.build(Dictionary) call org.apache.lucene.search.suggest.Lookup.build(Dictionary) if != decl_stmt File = if ! call org.apache.lucene.search.suggest.Lookup.store(OutputStream) call org.apache.lucene.search.suggest.Lookup.store(OutputStream) call org.apache.lucene.search.suggest.Lookup.store(OutputStream) call org.apache.lucene.search.suggest.Lookup.store(OutputStream) call org.apache.lucene.search.suggest.Lookup.store(OutputStream) new call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() File FileInputStream public public throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + if == && != decl_stmt File = if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() decl_stmt FileInputStream = new try if call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) call org.apache.lucene.search.suggest.Lookup.load(InputStream) return finally else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) public public if == return return new call LookupFactory.storeFileName() call LookupFactory.storeFileName() call LookupFactory.storeFileName() call LookupFactory.storeFileName() call LookupFactory.storeFileName() SuggesterResult decl List BooleanQuery public public throws call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return decl_stmt org.apache.solr.spelling.suggest.SuggesterResult = new decl_stmt java.util.List < if == = call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) else decl_stmt org.apache.lucene.search.BooleanQuery = = call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) if == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Lookup.getClass() call Lookup.getClass() call Lookup.getClass() call Lookup.getClass() call Lookup.getClass() = call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.solr.spelling.suggest.SuggesterResult.add(String,String,List) call org.apache.solr.spelling.suggest.SuggesterResult.add(String,String,List) call org.apache.solr.spelling.suggest.SuggesterResult.add(String,String,List) call org.apache.solr.spelling.suggest.SuggesterResult.add(String,String,List) call org.apache.solr.spelling.suggest.SuggesterResult.add(String,String,List) return Query private private if == return decl_stmt org.apache.lucene.search.Query = try = new if instanceof return return new catch throw new + public public return public public return call Lookup.ramBytesUsed() call Lookup.ramBytesUsed() call Lookup.ramBytesUsed() call Lookup.ramBytesUsed() call Lookup.ramBytesUsed() public < public < return call Lookup.getChildResources() call Lookup.getChildResources() call Lookup.getChildResources() call Lookup.getChildResources() call Lookup.getChildResources() public public return + + + + + + + == : call File.getAbsoluteFile() call File.getAbsoluteFile() call File.getAbsoluteFile() call File.getAbsoluteFile() call File.getAbsoluteFile() + + + + + + + + + != : +