org.apache.solr.update.processor static static org.apache.solr.update.processor.DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM import java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Map.Entry import java.util.Set import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.locks.ReentrantLock import org.apache.lucene.util.BytesRef import org.apache.lucene.util.CharsRefBuilder import org.apache.solr.client.solrj.request.UpdateRequest import org.apache.solr.cloud.CloudDescriptor import org.apache.solr.cloud.DistributedQueue import org.apache.solr.cloud.Overseer import org.apache.solr.cloud.ZkController import org.apache.solr.cloud.overseer.OverseerAction import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.SolrInputField import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.CompositeIdRouter import org.apache.solr.common.cloud.DocCollection import org.apache.solr.common.cloud.DocRouter import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.RoutingRule import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.Slice.State import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkCoreNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.cloud.ZooKeeperException import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.ShardParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.params.UpdateParams import org.apache.solr.common.util.Hash import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.Utils import org.apache.solr.core.CoreDescriptor import org.apache.solr.handler.component.RealTimeGetComponent import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.schema.SchemaField import org.apache.solr.update.AddUpdateCommand import org.apache.solr.update.CommitUpdateCommand import org.apache.solr.update.DeleteUpdateCommand import org.apache.solr.update.SolrCmdDistributor import org.apache.solr.update.SolrCmdDistributor.Error import org.apache.solr.update.SolrCmdDistributor.Node import org.apache.solr.update.SolrCmdDistributor.RetryNode import org.apache.solr.update.SolrCmdDistributor.StdNode import org.apache.solr.update.SolrIndexSplitter import org.apache.solr.update.UpdateCommand import org.apache.solr.update.UpdateHandler import org.apache.solr.update.UpdateLog import org.apache.solr.update.VersionBucket import org.apache.solr.update.VersionInfo import org.apache.solr.util.TestInjection import org.apache.zookeeper.KeeperException import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.update.processor.DistributedUpdateProcessor super super extends boolean UpdateLog CharsRefBuilder String VersionInfo AtomicUpdateDocumentMerger String NamedList String boolean Logger NamedList RequestReplicationTracker String SolrQueryRequest UpdateRequestProcessor UpdateCommand String decl List SolrCmdDistributor SchemaField String String boolean String String SolrQueryResponse CloudDescriptor String boolean boolean ZkController UpdateHandler NamedList boolean boolean public static public static final final if == || return try return catch throw new + + + int public public decl_stmt int = if != synchronized for : if == ++ else = synchronized for : if < = return == : String String AtomicInteger public public decl_stmt java.lang.String = if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + + + + + + + if == || ! synchronized != : new return if != decl_stmt java.lang.String = decl_stmt java.util.concurrent.atomic.AtomicInteger = synchronized = if == = new if ! call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() private < private < return Slice ClusterState boolean String decl String String String DocCollection decl List Replica DistribPhase decl List decl Set decl List private < private < decl_stmt java.util.List < = if assert if call org.apache.solr.update.UpdateCommand.getFlags() call org.apache.solr.update.UpdateCommand.getFlags() call org.apache.solr.update.UpdateCommand.getFlags() call org.apache.solr.update.UpdateCommand.getFlags() call org.apache.solr.update.UpdateCommand.getFlags() & | != = = return decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) decl_stmt org.apache.solr.common.cloud.Slice = call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() if == decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() = call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) if == throw new + + + decl_stmt DistribPhase = call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() if == && ! if call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() else assert = = return decl_stmt java.lang.String = call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() try decl_stmt org.apache.solr.common.cloud.Replica = call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() = call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() if ! = if decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() = call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) = = call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() decl_stmt java.util.List < = call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() decl_stmt java.lang.String = call org.apache.solr.update.UpdateCommand.getReq() call org.apache.solr.update.UpdateCommand.getReq() call org.apache.solr.update.UpdateCommand.getReq() call org.apache.solr.update.UpdateCommand.getReq() call org.apache.solr.update.UpdateCommand.getReq() if == && ! && == = else if || = decl_stmt java.util.List < = call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() if != if == = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() decl_stmt java.util.Set < = if != = new <> call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + for : if != decl_stmt boolean = call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + + if ! call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new else = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new new call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() = catch throw new return String State Slice private private decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() decl_stmt org.apache.solr.common.cloud.Slice = decl_stmt sun.security.provider.certpath.State = call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() return == || == decl Range String boolean State Slice decl DocRouter Replica private private throws decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() decl_stmt org.apache.solr.common.cloud.Slice = decl_stmt sun.security.provider.certpath.State final final = call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() if == || == decl_stmt org.apache.solr.common.cloud.Replica = call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() decl_stmt boolean = call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() if decl_stmt org.apache.lucene.facet.range.Range = call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() if == = new if != decl_stmt boolean = != && call decl DocRouter.isSubsetOf() call decl DocRouter.isSubsetOf() call decl DocRouter.isSubsetOf() call decl DocRouter.isSubsetOf() call decl DocRouter.isSubsetOf() return && call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() else return return decl Range decl DocRouter boolean decl Collection decl Slice decl List decl State private < private < decl_stmt java.util.Collection < = decl_stmt java.util.List < = for : decl_stmt sun.security.provider.certpath.State final final final final final = if == || == decl_stmt org.apache.lucene.facet.range.Range = if == = new decl_stmt boolean = != && if && == || != && call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() decl_stmt org.apache.solr.common.cloud.Replica = if != && call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call decl Range.getNodeName() call decl Range.getNodeName() call decl Range.getNodeName() call decl Range.getNodeName() call decl Range.getNodeName() if == = new <> decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return decl Map Slice CompositeIdRouter String Replica DistributedQueue String decl Map decl List ReentrantLock DocCollection String RoutingRule SolrZkClient DocRouter decl List decl Collection Slice int private < private < decl_stmt org.apache.solr.common.cloud.DocRouter = decl_stmt java.util.List < = if instanceof decl_stmt org.apache.solr.common.cloud.CompositeIdRouter = decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() decl_stmt org.apache.solr.common.cloud.Slice = decl_stmt java.util.Map < = call org.apache.solr.common.cloud.Slice.getRoutingRules() call org.apache.solr.common.cloud.Slice.getRoutingRules() call org.apache.solr.common.cloud.Slice.getRoutingRules() call org.apache.solr.common.cloud.Slice.getRoutingRules() call org.apache.solr.common.cloud.Slice.getRoutingRules() if != if == for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = decl_stmt java.util.Collection < = if != && ! call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() decl_stmt org.apache.solr.common.cloud.Slice = call decl Collection.iterator() call decl Collection.iterator() call decl Collection.iterator() call decl Collection.iterator() call decl Collection.iterator() if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new new call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() call org.apache.solr.common.cloud.Slice.getLeader() return decl_stmt java.lang.String = if != decl_stmt org.apache.solr.common.cloud.RoutingRule = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() + if != if ! call org.apache.solr.common.cloud.RoutingRule.isExpired() call org.apache.solr.common.cloud.RoutingRule.isExpired() call org.apache.solr.common.cloud.RoutingRule.isExpired() call org.apache.solr.common.cloud.RoutingRule.isExpired() call org.apache.solr.common.cloud.RoutingRule.isExpired() decl_stmt java.util.List < = call org.apache.solr.common.cloud.RoutingRule.getRouteRanges() call org.apache.solr.common.cloud.RoutingRule.getRouteRanges() call org.apache.solr.common.cloud.RoutingRule.getRouteRanges() call org.apache.solr.common.cloud.RoutingRule.getRouteRanges() call org.apache.solr.common.cloud.RoutingRule.getRouteRanges() if != && ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt int = call org.apache.solr.common.cloud.CompositeIdRouter.sliceHash(String,SolrInputDocument,SolrParams,DocCollection) call org.apache.solr.common.cloud.CompositeIdRouter.sliceHash(String,SolrInputDocument,SolrParams,DocCollection) call org.apache.solr.common.cloud.CompositeIdRouter.sliceHash(String,SolrInputDocument,SolrParams,DocCollection) call org.apache.solr.common.cloud.CompositeIdRouter.sliceHash(String,SolrInputDocument,SolrParams,DocCollection) call org.apache.solr.common.cloud.CompositeIdRouter.sliceHash(String,SolrInputDocument,SolrParams,DocCollection) for : if decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() decl_stmt java.util.Collection < = call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() if == || call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() throw new + + + call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() decl_stmt org.apache.solr.common.cloud.Replica = call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call org.apache.solr.common.cloud.RoutingRule.getTargetCollectionName() call decl Collection.iterator() call decl Collection.iterator() call decl Collection.iterator() call decl Collection.iterator() call decl Collection.iterator() if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new new break else decl_stmt java.util.concurrent.locks.ReentrantLock = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() if ! call java.util.concurrent.locks.ReentrantLock.isLocked() call java.util.concurrent.locks.ReentrantLock.isLocked() call java.util.concurrent.locks.ReentrantLock.isLocked() call java.util.concurrent.locks.ReentrantLock.isLocked() call java.util.concurrent.locks.ReentrantLock.isLocked() try if call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try decl_stmt java.util.Map < = + decl_stmt org.apache.solr.common.cloud.SolrZkClient = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() decl_stmt org.apache.solr.cloud.DistributedQueue = call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + finally call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() catch return String boolean String decl Range CloudDescriptor Slice ClusterState Slice String decl DocRouter boolean private private decl_stmt boolean = call org.apache.solr.update.UpdateCommand.getFlags() call org.apache.solr.update.UpdateCommand.getFlags() call org.apache.solr.update.UpdateCommand.getFlags() call org.apache.solr.update.UpdateCommand.getFlags() call org.apache.solr.update.UpdateCommand.getFlags() & | != if return decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() decl_stmt org.apache.solr.cloud.CloudDescriptor = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() decl_stmt boolean = call org.apache.solr.cloud.CloudDescriptor.isLeader() call org.apache.solr.cloud.CloudDescriptor.isLeader() call org.apache.solr.cloud.CloudDescriptor.isLeader() call org.apache.solr.cloud.CloudDescriptor.isLeader() call org.apache.solr.cloud.CloudDescriptor.isLeader() if == && && != decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() if != if call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() == throw new decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() decl_stmt org.apache.lucene.facet.range.Range = call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() if == = new if call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() != && ! call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() throw new else decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() if == call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call org.apache.solr.request.SolrQueryRequest.getParamString() call org.apache.solr.request.SolrQueryRequest.getParamString() call org.apache.solr.request.SolrQueryRequest.getParamString() call org.apache.solr.request.SolrQueryRequest.getParamString() call org.apache.solr.request.SolrQueryRequest.getParamString() decl_stmt org.apache.solr.common.SolrException = new call String.setMetadata() call String.setMetadata() call String.setMetadata() call String.setMetadata() call String.setMetadata() throw if && ! || && ! call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new + call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() + + call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() + + String decl List Replica decl List private < private < decl_stmt java.util.List < = decl_stmt java.lang.String = call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() try decl_stmt org.apache.solr.common.cloud.Replica = call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() = call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() = decl_stmt java.util.List < = call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() if != = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new catch throw new return SolrParams decl List String String decl List String DocCollection ModifiableSolrParams boolean int public public throws assert = if = else = decl_stmt int = - if != = else decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if == || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if != try = catch = - if <= throw new + + + + if > decl_stmt java.lang.String = : call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() = new decl_stmt boolean = if ! = if return if && && ! decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() decl_stmt java.util.List < = call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() if != && ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() for : call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) decl_stmt java.util.List final final final < = call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() if != && ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() for : call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) decl_stmt org.apache.solr.common.params.ModifiableSolrParams = if != = new call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) || : call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() if != && > call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribAdd(AddUpdateCommand,List,ModifiableSolrParams,boolean) if && != && != if == = new < call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) if == = new call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() decl List String Throwable decl List StdNode String String decl List Replica Throwable DistribPhase boolean String String Exception private private call org.apache.solr.update.SolrCmdDistributor.finish() call org.apache.solr.update.SolrCmdDistributor.finish() call org.apache.solr.update.SolrCmdDistributor.finish() call org.apache.solr.update.SolrCmdDistributor.finish() call org.apache.solr.update.SolrCmdDistributor.finish() decl_stmt java.util.List < = call org.apache.solr.update.SolrCmdDistributor.getErrors() call org.apache.solr.update.SolrCmdDistributor.getErrors() call org.apache.solr.update.SolrCmdDistributor.getErrors() call org.apache.solr.update.SolrCmdDistributor.getErrors() call org.apache.solr.update.SolrCmdDistributor.getErrors() decl_stmt java.util.List < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for final final final final final : if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() continue if call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + decl_stmt DistribPhase = if != continue if != continue decl_stmt java.lang.String final final = decl_stmt java.lang.String = instanceof : if call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() + + + + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() continue decl_stmt java.lang.String = decl_stmt java.lang.String = if instanceof decl_stmt StdNode = = call StdNode.getCollection() call StdNode.getCollection() call StdNode.getCollection() call StdNode.getCollection() call StdNode.getCollection() = call StdNode.getShardId() call StdNode.getShardId() call StdNode.getShardId() call StdNode.getShardId() call StdNode.getShardId() decl_stmt java.lang.String = decl_stmt Exception = decl_stmt org.apache.solr.common.cloud.Replica = try = call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() if != = call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() catch = if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() decl_stmt java.util.List < = call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() decl_stmt boolean = if != for : if call StdNode.getNodeProps() call StdNode.getNodeProps() call StdNode.getNodeProps() call StdNode.getNodeProps() call StdNode.getNodeProps() = break if != && call RequestReplicationTracker.getAchievedRf() call RequestReplicationTracker.getAchievedRf() call RequestReplicationTracker.getAchievedRf() call RequestReplicationTracker.getAchievedRf() call RequestReplicationTracker.getAchievedRf() < continue if != && call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() && && ! call StdNode.getNodeProps() call StdNode.getNodeProps() call StdNode.getNodeProps() call StdNode.getNodeProps() call StdNode.getNodeProps() call org.apache.solr.common.cloud.Replica.getCoreUrl() call org.apache.solr.common.cloud.Replica.getCoreUrl() call org.apache.solr.common.cloud.Replica.getCoreUrl() call org.apache.solr.common.cloud.Replica.getCoreUrl() call org.apache.solr.common.cloud.Replica.getCoreUrl() try decl_stmt java.lang.Throwable = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call org.apache.solr.cloud.ZkController.ensureReplicaInLeaderInitiatedRecovery(CoreContainer,String,String,ZkCoreNodeProps,CoreDescriptor,boolean) call org.apache.solr.cloud.ZkController.ensureReplicaInLeaderInitiatedRecovery(CoreContainer,String,String,ZkCoreNodeProps,CoreDescriptor,boolean) call org.apache.solr.cloud.ZkController.ensureReplicaInLeaderInitiatedRecovery(CoreContainer,String,String,ZkCoreNodeProps,CoreDescriptor,boolean) call org.apache.solr.cloud.ZkController.ensureReplicaInLeaderInitiatedRecovery(CoreContainer,String,String,ZkCoreNodeProps,CoreDescriptor,boolean) call org.apache.solr.cloud.ZkController.ensureReplicaInLeaderInitiatedRecovery(CoreContainer,String,String,ZkCoreNodeProps,CoreDescriptor,boolean) call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call StdNode.getNodeProps() call StdNode.getNodeProps() call StdNode.getNodeProps() call StdNode.getNodeProps() call StdNode.getNodeProps() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() catch decl_stmt java.lang.Throwable = call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + else if ! call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() + + + + + + call StdNode.getNodeProps() call StdNode.getNodeProps() call StdNode.getNodeProps() call StdNode.getNodeProps() call StdNode.getNodeProps() + + else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() + + + + + if != call org.apache.solr.response.SolrQueryResponse.getResponseHeader() call org.apache.solr.response.SolrQueryResponse.getResponseHeader() call org.apache.solr.response.SolrQueryResponse.getResponseHeader() call org.apache.solr.response.SolrQueryResponse.getResponseHeader() call org.apache.solr.response.SolrQueryResponse.getResponseHeader() call RequestReplicationTracker.getAchievedRf() call RequestReplicationTracker.getAchievedRf() call RequestReplicationTracker.getAchievedRf() call RequestReplicationTracker.getAchievedRf() call RequestReplicationTracker.getAchievedRf() call org.apache.solr.response.SolrQueryResponse.getResponseHeader() call org.apache.solr.response.SolrQueryResponse.getResponseHeader() call org.apache.solr.response.SolrQueryResponse.getResponseHeader() call org.apache.solr.response.SolrQueryResponse.getResponseHeader() call org.apache.solr.response.SolrQueryResponse.getResponseHeader() = if < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() throw new private private throws private private throws boolean boolean long boolean VersionBucket long int boolean Object boolean long BytesRef SolrInputDocument String long SolrInputField boolean Long protected protected throws decl_stmt org.apache.lucene.util.BytesRef = if == return if == if throw new else return decl_stmt int = decl_stmt long = if == decl_stmt org.apache.solr.common.SolrInputField = if != decl_stmt java.lang.Object = call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() = instanceof : call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() else decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() = == : decl_stmt boolean = & | != decl_stmt boolean = && ! decl_stmt boolean = != decl_stmt org.apache.solr.update.VersionBucket = call org.apache.solr.update.VersionInfo.bucket(int) call org.apache.solr.update.VersionInfo.bucket(int) call org.apache.solr.update.VersionInfo.bucket(int) call org.apache.solr.update.VersionInfo.bucket(int) call org.apache.solr.update.VersionInfo.bucket(int) call org.apache.solr.update.VersionInfo.lockForUpdate() call org.apache.solr.update.VersionInfo.lockForUpdate() call org.apache.solr.update.VersionInfo.lockForUpdate() call org.apache.solr.update.VersionInfo.lockForUpdate() call org.apache.solr.update.VersionInfo.lockForUpdate() try synchronized decl_stmt boolean = if decl_stmt long = if if && call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + = decl_stmt boolean = if && call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() != && & == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + | call org.apache.solr.update.UpdateLog.add(AddUpdateCommand,boolean) call org.apache.solr.update.UpdateLog.add(AddUpdateCommand,boolean) call org.apache.solr.update.UpdateLog.add(AddUpdateCommand,boolean) call org.apache.solr.update.UpdateLog.add(AddUpdateCommand,boolean) call org.apache.solr.update.UpdateLog.add(AddUpdateCommand,boolean) return if != decl_stmt java.lang.Long = call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) decl_stmt long = == - : if == || < && < || == && > else throw new + + + + + decl_stmt long = call org.apache.solr.update.VersionInfo.getNewClock() call org.apache.solr.update.VersionInfo.getNewClock() call org.apache.solr.update.VersionInfo.getNewClock() call org.apache.solr.update.VersionInfo.getNewClock() call org.apache.solr.update.VersionInfo.getNewClock() call VersionBucket.updateHighest() call VersionBucket.updateHighest() call VersionBucket.updateHighest() call VersionBucket.updateHighest() call VersionBucket.updateHighest() else if call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() != && & == | call org.apache.solr.update.UpdateLog.add(AddUpdateCommand,boolean) call org.apache.solr.update.UpdateLog.add(AddUpdateCommand,boolean) call org.apache.solr.update.UpdateLog.add(AddUpdateCommand,boolean) call org.apache.solr.update.UpdateLog.add(AddUpdateCommand,boolean) call org.apache.solr.update.UpdateLog.add(AddUpdateCommand,boolean) return if != && < call VersionBucket.updateHighest() call VersionBucket.updateHighest() call VersionBucket.updateHighest() call VersionBucket.updateHighest() call VersionBucket.updateHighest() else decl_stmt java.lang.Long = call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) if != && >= call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() return = decl_stmt boolean = && != && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt org.apache.solr.common.SolrInputDocument = if = if = finally call org.apache.solr.update.VersionInfo.unlockForUpdate() call org.apache.solr.update.VersionInfo.unlockForUpdate() call org.apache.solr.update.VersionInfo.unlockForUpdate() call org.apache.solr.update.VersionInfo.unlockForUpdate() call org.apache.solr.update.VersionInfo.unlockForUpdate() return SolrInputDocument BytesRef SolrInputDocument throws if ! return decl_stmt org.apache.solr.common.SolrInputDocument = decl_stmt org.apache.lucene.util.BytesRef = decl_stmt org.apache.solr.common.SolrInputDocument = if == if <= = new else throw new + else call org.apache.solr.common.SolrInputDocument.remove(Object) call org.apache.solr.common.SolrInputDocument.remove(Object) call org.apache.solr.common.SolrInputDocument.remove(Object) call org.apache.solr.common.SolrInputDocument.remove(Object) call org.apache.solr.common.SolrInputDocument.remove(Object) = call org.apache.solr.update.processor.AtomicUpdateDocumentMerger.merge(SolrInputDocument,SolrInputDocument) call org.apache.solr.update.processor.AtomicUpdateDocumentMerger.merge(SolrInputDocument,SolrInputDocument) call org.apache.solr.update.processor.AtomicUpdateDocumentMerger.merge(SolrInputDocument,SolrInputDocument) call org.apache.solr.update.processor.AtomicUpdateDocumentMerger.merge(SolrInputDocument,SolrInputDocument) call org.apache.solr.update.processor.AtomicUpdateDocumentMerger.merge(SolrInputDocument,SolrInputDocument) return decl List DocCollection ModifiableSolrParams boolean decl List public public throws assert = if ! return if = else = decl_stmt boolean = if ! = if return if && && ! decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() decl_stmt java.util.List < = call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() if != && ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) decl_stmt java.util.List final final final < = call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() if != && ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() for : call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) decl_stmt org.apache.solr.common.params.ModifiableSolrParams = if != = new call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) || : call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) if && != && != && != if == = new < call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) if == = new call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() decl Set ModifiableSolrParams protected protected decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new decl_stmt java.util.Set < = < assert != : for : return decl String private private decl_stmt java.lang.String = if != for : boolean decl List boolean String ZkCoreNodeProps DocCollection String String decl List String decl Collection decl List ModifiableSolrParams decl List Replica decl List Replica DistribPhase boolean boolean boolean String decl List ModifiableSolrParams public public throws if ! = else decl_stmt DistribPhase = call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() : if && == decl_stmt boolean = decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() decl_stmt org.apache.solr.common.params.SolrParams = call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() decl_stmt java.lang.String = call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) decl_stmt java.util.Collection < = call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() call DocCollection.getRouter() decl_stmt java.util.List < = new <> call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() for : decl_stmt java.lang.String = decl_stmt org.apache.solr.common.cloud.Replica try = call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() catch throw new + decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = new decl_stmt java.lang.String = call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() = call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if = else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) if ! return = decl_stmt java.util.List < = if && == = = else if == = if == return decl_stmt boolean = & | != decl_stmt boolean = && ! if decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() decl_stmt boolean = decl_stmt boolean = try = if decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() decl_stmt org.apache.solr.common.cloud.Replica = call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() decl_stmt java.util.List < = call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() call org.apache.solr.common.cloud.Replica.getName() if != decl_stmt java.util.List final final final < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) = catch throw new if decl_stmt java.util.List < = call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() if != call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) decl_stmt java.util.List final final final < = call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() call org.apache.solr.cloud.ZkController.getClusterState() if != && ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() = new call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) if != call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) call org.apache.solr.update.SolrCmdDistributor.distribDelete(DeleteUpdateCommand,List,ModifiableSolrParams,boolean) = if call org.apache.solr.update.SolrCmdDistributor.blockAndDoRetries() call org.apache.solr.update.SolrCmdDistributor.blockAndDoRetries() call org.apache.solr.update.SolrCmdDistributor.blockAndDoRetries() call org.apache.solr.update.SolrCmdDistributor.blockAndDoRetries() call org.apache.solr.update.SolrCmdDistributor.blockAndDoRetries() if && != if == = new < call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.response.SolrQueryResponse.add(String,Object) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) long boolean boolean long String protected protected throws decl_stmt long = if == decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() = == : = decl_stmt boolean = & | != decl_stmt boolean = && ! if ! && == throw new call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() call org.apache.solr.update.VersionInfo.blockUpdates() try if if decl_stmt long = call org.apache.solr.update.VersionInfo.getNewClock() call org.apache.solr.update.VersionInfo.getNewClock() call org.apache.solr.update.VersionInfo.getNewClock() call org.apache.solr.update.VersionInfo.getNewClock() call org.apache.solr.update.VersionInfo.getNewClock() - else - if call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() != && & == | call org.apache.solr.update.UpdateLog.deleteByQuery(DeleteUpdateCommand) call org.apache.solr.update.UpdateLog.deleteByQuery(DeleteUpdateCommand) call org.apache.solr.update.UpdateLog.deleteByQuery(DeleteUpdateCommand) call org.apache.solr.update.UpdateLog.deleteByQuery(DeleteUpdateCommand) call org.apache.solr.update.UpdateLog.deleteByQuery(DeleteUpdateCommand) return finally call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() call org.apache.solr.update.VersionInfo.unblockUpdates() DeleteUpdateCommand AddUpdateCommand = if if instanceof decl_stmt org.apache.solr.update.AddUpdateCommand = = call org.apache.solr.update.AddUpdateCommand.getHashableId() call org.apache.solr.update.AddUpdateCommand.getHashableId() call org.apache.solr.update.AddUpdateCommand.getHashableId() call org.apache.solr.update.AddUpdateCommand.getHashableId() call org.apache.solr.update.AddUpdateCommand.getHashableId() call org.apache.solr.update.AddUpdateCommand.getSolrInputDocument() call org.apache.solr.update.AddUpdateCommand.getSolrInputDocument() call org.apache.solr.update.AddUpdateCommand.getSolrInputDocument() call org.apache.solr.update.AddUpdateCommand.getSolrInputDocument() call org.apache.solr.update.AddUpdateCommand.getSolrInputDocument() else if instanceof decl_stmt org.apache.solr.update.DeleteUpdateCommand = = call org.apache.solr.update.DeleteUpdateCommand.getId() call org.apache.solr.update.DeleteUpdateCommand.getId() call org.apache.solr.update.DeleteUpdateCommand.getId() call org.apache.solr.update.DeleteUpdateCommand.getId() call org.apache.solr.update.DeleteUpdateCommand.getId() else = return private private if call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() throw new if call org.apache.solr.update.UpdateCommand.getFlags() call org.apache.solr.update.UpdateCommand.getFlags() call org.apache.solr.update.UpdateCommand.getFlags() call org.apache.solr.update.UpdateCommand.getFlags() call org.apache.solr.update.UpdateCommand.getFlags() & | != return if ! call org.apache.solr.cloud.ZkController.getZkClient() call org.apache.solr.cloud.ZkController.getZkClient() call org.apache.solr.cloud.ZkController.getZkClient() call org.apache.solr.cloud.ZkController.getZkClient() call org.apache.solr.cloud.ZkController.getZkClient() return throw new boolean long boolean VersionBucket long int long long BytesRef String long boolean Long protected protected throws decl_stmt org.apache.lucene.util.BytesRef = if == || == return decl_stmt int = decl_stmt long = if == decl_stmt java.lang.String = call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() = == : decl_stmt long = = decl_stmt boolean = & | != decl_stmt boolean = && ! decl_stmt boolean = != if ! && == throw new decl_stmt org.apache.solr.update.VersionBucket = call org.apache.solr.update.VersionInfo.bucket(int) call org.apache.solr.update.VersionInfo.bucket(int) call org.apache.solr.update.VersionInfo.bucket(int) call org.apache.solr.update.VersionInfo.bucket(int) call org.apache.solr.update.VersionInfo.bucket(int) call org.apache.solr.update.VersionInfo.lockForUpdate() call org.apache.solr.update.VersionInfo.lockForUpdate() call org.apache.solr.update.VersionInfo.lockForUpdate() call org.apache.solr.update.VersionInfo.lockForUpdate() call org.apache.solr.update.VersionInfo.lockForUpdate() try synchronized if decl_stmt long = if if && call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + = = if && call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() != && & == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + | call org.apache.solr.update.UpdateLog.delete(DeleteUpdateCommand) call org.apache.solr.update.UpdateLog.delete(DeleteUpdateCommand) call org.apache.solr.update.UpdateLog.delete(DeleteUpdateCommand) call org.apache.solr.update.UpdateLog.delete(DeleteUpdateCommand) call org.apache.solr.update.UpdateLog.delete(DeleteUpdateCommand) return if != decl_stmt java.lang.Long = call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) decl_stmt long = == - : if == || < && < || == && > else throw new + + + + + decl_stmt long = call org.apache.solr.update.VersionInfo.getNewClock() call org.apache.solr.update.VersionInfo.getNewClock() call org.apache.solr.update.VersionInfo.getNewClock() call org.apache.solr.update.VersionInfo.getNewClock() call org.apache.solr.update.VersionInfo.getNewClock() - call VersionBucket.updateHighest() call VersionBucket.updateHighest() call VersionBucket.updateHighest() call VersionBucket.updateHighest() call VersionBucket.updateHighest() else - if call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() != && & == | call org.apache.solr.update.UpdateLog.delete(DeleteUpdateCommand) call org.apache.solr.update.UpdateLog.delete(DeleteUpdateCommand) call org.apache.solr.update.UpdateLog.delete(DeleteUpdateCommand) call org.apache.solr.update.UpdateLog.delete(DeleteUpdateCommand) call org.apache.solr.update.UpdateLog.delete(DeleteUpdateCommand) return if != && < call VersionBucket.updateHighest() call VersionBucket.updateHighest() call VersionBucket.updateHighest() call VersionBucket.updateHighest() call VersionBucket.updateHighest() else decl_stmt java.lang.Long = call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) call org.apache.solr.update.VersionInfo.lookupVersion(BytesRef) if != && >= call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() return return finally call org.apache.solr.update.VersionInfo.unlockForUpdate() call org.apache.solr.update.VersionInfo.unlockForUpdate() call org.apache.solr.update.VersionInfo.unlockForUpdate() call org.apache.solr.update.VersionInfo.unlockForUpdate() call org.apache.solr.update.VersionInfo.unlockForUpdate() decl List boolean ModifiableSolrParams public public throws assert = decl_stmt java.util.List < = decl_stmt boolean = if = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() if && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == = if ! || call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() || else decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() if ! call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.cloud.ZkController.getBaseUrl() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() if != call org.apache.solr.update.SolrCmdDistributor.distribCommit(CommitUpdateCommand,List,ModifiableSolrParams) call org.apache.solr.update.SolrCmdDistributor.distribCommit(CommitUpdateCommand,List,ModifiableSolrParams) call org.apache.solr.update.SolrCmdDistributor.distribCommit(CommitUpdateCommand,List,ModifiableSolrParams) call org.apache.solr.update.SolrCmdDistributor.distribCommit(CommitUpdateCommand,List,ModifiableSolrParams) call org.apache.solr.update.SolrCmdDistributor.distribCommit(CommitUpdateCommand,List,ModifiableSolrParams) call org.apache.solr.update.SolrCmdDistributor.blockAndDoRetries() call org.apache.solr.update.SolrCmdDistributor.blockAndDoRetries() call org.apache.solr.update.SolrCmdDistributor.blockAndDoRetries() call org.apache.solr.update.SolrCmdDistributor.blockAndDoRetries() call org.apache.solr.update.SolrCmdDistributor.blockAndDoRetries() private private throws if != call org.apache.solr.update.VersionInfo.lockForUpdate() call org.apache.solr.update.VersionInfo.lockForUpdate() call org.apache.solr.update.VersionInfo.lockForUpdate() call org.apache.solr.update.VersionInfo.lockForUpdate() call org.apache.solr.update.VersionInfo.lockForUpdate() try if == || call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() == || & != else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() + + & != finally if != call org.apache.solr.update.VersionInfo.unlockForUpdate() call org.apache.solr.update.VersionInfo.unlockForUpdate() call org.apache.solr.update.VersionInfo.unlockForUpdate() call org.apache.solr.update.VersionInfo.unlockForUpdate() call org.apache.solr.update.VersionInfo.unlockForUpdate() public public throws assert ! : = if if != && == call UpdateRequestProcessor.finish() call UpdateRequestProcessor.finish() call UpdateRequestProcessor.finish() call UpdateRequestProcessor.finish() call UpdateRequestProcessor.finish() decl Map Slice decl Map ZkCoreNodeProps ClusterState decl List private < private < decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() decl_stmt java.util.Map < = call org.apache.solr.common.cloud.ClusterState.getSlicesMap(String) call org.apache.solr.common.cloud.ClusterState.getSlicesMap(String) call org.apache.solr.common.cloud.ClusterState.getSlicesMap(String) call org.apache.solr.common.cloud.ClusterState.getSlicesMap(String) call org.apache.solr.common.cloud.ClusterState.getSlicesMap(String) if == throw new + decl_stmt java.util.List final final final < = new <> call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt org.apache.solr.common.cloud.Slice = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.util.Map < = call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = new if call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() call org.apache.solr.common.cloud.Slice.getName() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return return DistribPhase public static public static decl_stmt DistribPhase = call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() return != int int private static final private static final < assert != assert < decl_stmt int = decl_stmt int = for : call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() = = if == return else if <= && < return return StringBuilder private static final private static final < assert != assert < if == return + else decl_stmt java.lang.StringBuilder = new + for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()