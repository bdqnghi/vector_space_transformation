org.apache.lucene.util.packed java.io.IOException import java.util.Arrays import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.index.NumericDocValues import org.apache.lucene.store.DataInput import org.apache.lucene.store.DataOutput import org.apache.lucene.store.IndexInput import org.apache.lucene.util.Accountable import org.apache.lucene.util.LongsRef import org.apache.lucene.util.RamUsageEstimator import class org.apache.lucene.util.packed.PackedInts float int int float float float String int int public static public static if < throw new + + + + else if > throw new + + + + public public return long double * / int public public decl_stmt int final final = / return int double / public public return int int public public assert decl_stmt int final final = / decl_stmt int final final = return float / public static public static for : if == return throw new + public public return public public assert >= && <= : return * long public public assert >= && <= : decl_stmt long final final = assert < * if == return / else return / + public public return >= && <= public public assert return public final public final assert return / public public return + + + + Format int int float float float public static public static if == - = = = decl_stmt float = * decl_stmt int = + int decl_stmt int = - decl_stmt org.apache.lucene.benchmark.byTask.utils.Format = if <= && >= = else if <= && >= = else if <= && >= = else if <= && >= = else if <= && <= && >= = else if <= && <= && >= = else for = <= ++ if decl_stmt float = decl_stmt float = + - if <= = = break if < = return new int public public assert > : + + assert >= && < assert + <= decl_stmt int final final = - for = = = + < ++ , ++ = return long LongsRef public public throws decl_stmt org.apache.lucene.util.LongsRef = assert > decl_stmt long final final = ++ -- return public public return public public return public public assert > : + + assert >= && < = - assert + <= for = = = + < ++ , ++ return public public assert <= assert <= for = < ++ public public Writer public public throws decl_stmt Writer = call Writer.writeHeader() call Writer.writeHeader() call Writer.writeHeader() call Writer.writeHeader() call Writer.writeHeader() for = < ++ call Writer.add() call Writer.add() call Writer.add() call Writer.add() call Writer.add() call Writer.finish() call Writer.finish() call Writer.finish() call Writer.finish() call Writer.finish() return public final public final return public final public final return public final public final return public public return + + + + + public public return public public assert > : + + assert >= && < = - + return public public return public public return + throws assert != - public final public final return public static public static return public static public static return public static public static throws switch case return case switch case return new case return new case return new case return new case if <= return new break case if <= return new break return new default: throw new + int int int Format public static public static throws decl_stmt int final final = decl_stmt int final final = assert > && <= : + decl_stmt int final final = decl_stmt org.apache.lucene.benchmark.byTask.utils.Format final final = return public static public static return new int int int Format public static public static throws decl_stmt int final final = decl_stmt int final final = assert > && <= : + decl_stmt int final final = decl_stmt org.apache.lucene.benchmark.byTask.utils.Format final final = return public static public static final final switch case return new case return new default: throw new + int int int Format public static public static throws decl_stmt int final final = decl_stmt int final final = assert > && <= : + decl_stmt int final final = decl_stmt org.apache.lucene.benchmark.byTask.utils.Format final final = return FormatAndBits public static public static decl_stmt FormatAndBits final final = return public static public static assert >= switch case return case switch case return new case return new case return new case return new case if <= return new break case if <= return new break return new default: throw new public static public static return new FormatAndBits Writer public static public static throws assert >= decl_stmt FormatAndBits final final = decl_stmt Writer final final = call Writer.writeHeader() call Writer.writeHeader() call Writer.writeHeader() call Writer.writeHeader() call Writer.writeHeader() return public static public static if < throw new + + return public static public static return - public static public static return == : ~ ~ << decl long int public static public static assert + <= assert + <= decl_stmt int final final = >>> if == for = < ++ ++ ++ else if > decl_stmt long final final final = new int int int static static assert > decl_stmt int = while > decl_stmt int final final = - assert > += -= += decl_stmt int final final = assert > += if < - -= while > decl_stmt int final final = += -= static static if < || || throw new + + + + + if & - != throw new + return int static static decl_stmt int final final = / + == : if long * < throw new return