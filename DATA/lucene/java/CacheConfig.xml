org.apache.solr.search javax.xml.xpath.XPathConstants import java.lang.invoke.MethodHandles import java.util.Collections import java.util.HashMap import java.util.List import java.util.Map import org.apache.solr.common.SolrException import org.apache.solr.common.util.StrUtils import org.apache.solr.core.MapSerializable import org.apache.solr.core.SolrConfig import org.apache.solr.core.SolrResourceLoader import org.apache.solr.util.DOMUtil import org.slf4j.Logger import org.slf4j.LoggerFactory import org.w3c.dom.Node import org.w3c.dom.NodeList import static static org.apache.solr.common.params.CommonParams.NAME import class org.apache.solr.search.CacheConfig super super implements CacheRegenerator Logger decl Map decl Class String String decl Object String public public return public public = NodeList decl CacheConfig public static public static decl_stmt NodeList = if == || call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() == return decl_stmt org.apache.solr.search.CacheConfig = new call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() return Node decl List decl Map public static public static decl_stmt org.apache.lucene.replicator.nrt.Node = if == decl_stmt java.util.Map < = if == return decl_stmt java.util.List < = return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - return call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getAttributes() call Node.getAttributes() call Node.getAttributes() call Node.getAttributes() call Node.getAttributes() decl Map SolrResourceLoader CacheConfig decl HashMap String public static public static < decl_stmt org.apache.solr.search.CacheConfig = new = = decl_stmt java.util.Map < = if != decl_stmt HashMap < = new <> for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() = decl_stmt java.lang.String = call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() if == call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() decl_stmt org.apache.solr.core.SolrResourceLoader = = call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() if == = = call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() call CacheConfig.args() = call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) if != = call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) return SolrCache public public try decl_stmt org.apache.solr.search.SolrCache = call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() = call org.apache.solr.search.SolrCache.init(Map,Object,CacheRegenerator) call org.apache.solr.search.SolrCache.init(Map,Object,CacheRegenerator) call org.apache.solr.search.SolrCache.init(Map,Object,CacheRegenerator) call org.apache.solr.search.SolrCache.init(Map,Object,CacheRegenerator) call org.apache.solr.search.SolrCache.init(Map,Object,CacheRegenerator) return catch return Map public < public < decl_stmt java.util.Map = return public public return