org.apache.lucene.index java.io.Closeable import java.io.IOException import java.util.Collections import java.util.LinkedHashSet import java.util.List import java.util.Set import java.util.WeakHashMap import java.util.concurrent.atomic.AtomicInteger import org.apache.lucene.document.Document import org.apache.lucene.document.DocumentStoredFieldVisitor import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.util.Bits import org.apache.lucene.util.IOUtils import class org.apache.lucene.index.IndexReader super super implements decl Set boolean AtomicInteger decl Set boolean public final public final call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() public final public final call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() public final public final call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() private private throws synchronized for : try catch if == = else private private synchronized for : = public final public final return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() public final public final if ! int public final public final decl_stmt int while = call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() > if call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) + return return Throwable int public final public final throws if call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() <= throw new decl_stmt int final final = call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() if == = decl_stmt java.lang.Throwable = try catch = finally try finally else if < throw new + + protected final protected final throws if call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() <= throw new if throw new public final public final return == public final public final return Fields public final public final throws decl_stmt Fields = if == return return call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() public final public final return - DocumentStoredFieldVisitor public final public final throws decl_stmt org.apache.lucene.document.DocumentStoredFieldVisitor final final = new return call org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument() call org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument() call org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument() call org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument() call org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument() DocumentStoredFieldVisitor public final public final < throws decl_stmt org.apache.lucene.document.DocumentStoredFieldVisitor final final = new return call org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument() call org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument() call org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument() call org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument() call org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument() public public return > public final synchronized public final synchronized throws if ! = public final < public final < return public public return public public return