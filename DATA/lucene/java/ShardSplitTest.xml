org.apache.solr.cloud java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Random import java.util.Set import org.apache.lucene.util.LuceneTestCase.Slow import org.apache.solr.client.solrj.SolrClient import org.apache.solr.client.solrj.SolrQuery import org.apache.solr.client.solrj.SolrRequest import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.impl.CloudSolrClient import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.request.CollectionAdminRequest import org.apache.solr.client.solrj.request.QueryRequest import org.apache.solr.client.solrj.response.CollectionAdminResponse import org.apache.solr.client.solrj.response.QueryResponse import org.apache.solr.common.SolrDocument import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.CompositeIdRouter import org.apache.solr.common.cloud.DocRouter import org.apache.solr.common.cloud.HashBasedRouter import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.ZkCoreNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.params.CollectionParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.util.Utils import org.junit.Test import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.NUM_SLICES import static static org.apache.solr.common.cloud.ZkStateReader.MAX_SHARDS_PER_NODE import static static org.apache.solr.common.cloud.ZkStateReader.REPLICATION_FACTOR import class annotation org.apache.solr.cloud.ShardSplitTest super super extends String Logger String public public throws if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl CollectionAdminRequest String CollectionAdminResponse decl Create public public throws if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.lang.String = decl_stmt Create = new decl_stmt org.apache.solr.client.solrj.response.CollectionAdminResponse = call decl CollectionAdminRequest.process() call decl CollectionAdminRequest.process() call decl CollectionAdminRequest.process() call decl CollectionAdminRequest.process() call decl CollectionAdminRequest.process() call decl Create.getStatus() call decl Create.getStatus() call decl Create.getStatus() call decl Create.getStatus() call decl Create.getStatus() decl_stmt SplitShard = new = call CollectionAdminResponse.process() call CollectionAdminResponse.process() call CollectionAdminResponse.process() call CollectionAdminResponse.process() call CollectionAdminResponse.process() call decl Create.getErrorMessages() call decl Create.getErrorMessages() call decl Create.getErrorMessages() call decl Create.getErrorMessages() call decl Create.getErrorMessages() call decl Create.getStatus() call decl Create.getStatus() call decl Create.getStatus() call decl Create.getStatus() call decl Create.getStatus() Slice decl List ClusterState decl Range DocRouter decl DocRouter private private throws decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt org.apache.solr.common.cloud.DocRouter final final = call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) decl_stmt org.apache.lucene.facet.range.Range = call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() != call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() : call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() decl_stmt java.util.List < = new <> decl_stmt java.util.List < = call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() try catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl Range.clear() call decl Range.clear() call decl Range.clear() call decl Range.clear() call decl Range.clear() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() try catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl Range.clear() call decl Range.clear() call decl Range.clear() call decl Range.clear() call decl Range.clear() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() - call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() try catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl Range.clear() call decl Range.clear() call decl Range.clear() call decl Range.clear() call decl Range.clear() Thread int decl List int Random String Slice decl List ClusterState decl int decl Range DocRouter decl DocRouter int decl Set private private throws decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt org.apache.solr.common.cloud.DocRouter final final = call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) decl_stmt org.apache.lucene.facet.range.Range = call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() != call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() : call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() decl_stmt java.util.List < = new <> if decl_stmt java.util.List < = call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl Range.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else = call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) decl_stmt java.util.List final final final < = decl_stmt int final final final = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() for = <= ++ decl_stmt java.lang.String = + + + + decl_stmt java.lang.Thread = new public public decl_stmt java.util.Random = decl_stmt int = decl_stmt int = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + decl_stmt java.util.Set < = new <> for = < ++ try if decl_stmt java.lang.String = call Thread.nextInt() call Thread.nextInt() call Thread.nextInt() call Thread.nextInt() call Thread.nextInt() - + + if call int.contains() call int.contains() call int.contains() call int.contains() call int.contains() continue try call int.add() call int.add() call int.add() call int.add() call int.add() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call int.add() call int.add() call int.add() call int.add() call int.add() call String.start() call String.start() call String.start() call String.start() call String.start() try for = < ++ try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) break catch if != throw call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + < : if == finally try call String.join() call String.join() call String.join() call String.join() call String.join() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() decl Set int Random int String public public decl_stmt java.util.Random = decl_stmt int = decl_stmt int = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + decl_stmt java.util.Set < = new <> for = < ++ try if decl_stmt java.lang.String = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - + + if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() continue try call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() int String decl int String decl List String int int decl List int Slice decl Range ClusterState String decl Map DocRouter decl DocRouter decl HashMap public public throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.lang.String = decl_stmt int = decl_stmt int = decl_stmt int = * / + decl_stmt HashMap < < = new <> decl_stmt java.lang.String = try = decl_stmt java.util.Map < = decl_stmt java.util.List < = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() decl_stmt java.lang.String = try = decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt org.apache.solr.common.cloud.DocRouter final final = call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) decl_stmt org.apache.lucene.facet.range.Range = call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() != call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() : call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() decl_stmt java.util.List final final final < = call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) decl_stmt int final final final = new call decl Range.size() call decl Range.size() call decl Range.size() call decl Range.size() call decl Range.size() for = <= ++ decl_stmt java.lang.String = + + decl_stmt int = if != - ++ for = < ++ decl_stmt int = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + for = < ++ try break catch if != throw call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + < : if == new new decl List int int String decl HashMap String Slice int decl DocRouter int decl Map decl Range ClusterState decl int int String String int decl List String int DocRouter private private throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.lang.String = decl_stmt int = decl_stmt int = decl_stmt int = * / + decl_stmt HashMap < < = new <> try = decl_stmt java.util.Map < = decl_stmt java.util.List < = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() decl_stmt java.lang.String = try = decl_stmt java.lang.String = decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt org.apache.solr.common.cloud.DocRouter final final = call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) decl_stmt org.apache.lucene.facet.range.Range = call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() != call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() : call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() decl_stmt java.util.List final final final < = decl_stmt int final final final = new call decl Range.size() call decl Range.size() call decl Range.size() call decl Range.size() call decl Range.size() decl_stmt int = << decl_stmt int = for = <= ++ decl_stmt java.lang.String = + + decl_stmt java.lang.String = + + + : decl_stmt int = if != - ++ if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) + ++ for = < ++ decl_stmt int = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) for = < ++ try break catch if != throw call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + < : if == decl_stmt org.apache.solr.client.solrj.SolrQuery = new call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() = new + + call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() + call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() + call int.setParam() call int.setParam() call int.setParam() call int.setParam() call int.setParam() ZkCoreNodeProps long ZkStateReader ClusterState QueryResponse QueryResponse ZkCoreNodeProps Slice int SolrQuery long protected protected throws decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt org.apache.solr.common.cloud.Slice = = decl_stmt int = for = < ++ decl_stmt org.apache.solr.common.cloud.ZkStateReader = = call SolrQuery.getClusterState() call SolrQuery.getClusterState() call SolrQuery.getClusterState() call SolrQuery.getClusterState() call SolrQuery.getClusterState() = call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) = call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) if call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() == && call int.getState() call int.getState() call int.getState() call int.getState() call int.getState() == break call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) * call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call int.getState() call int.getState() call int.getState() call int.getState() call int.getState() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call int.getReplicas() call int.getReplicas() call int.getReplicas() call int.getReplicas() call int.getReplicas() decl_stmt org.apache.solr.client.solrj.SolrQuery = new call ZkCoreNodeProps.set() call ZkCoreNodeProps.set() call ZkCoreNodeProps.set() call ZkCoreNodeProps.set() call ZkCoreNodeProps.set() decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = decl_stmt org.apache.solr.client.solrj.response.QueryResponse try = call QueryResponse.getCoreUrl() call QueryResponse.getCoreUrl() call QueryResponse.getCoreUrl() call QueryResponse.getCoreUrl() call QueryResponse.getCoreUrl() = decl_stmt long = call long.getResults() call long.getResults() call long.getResults() call long.getResults() call long.getResults() decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = decl_stmt org.apache.solr.client.solrj.response.QueryResponse try = call QueryResponse.getCoreUrl() call QueryResponse.getCoreUrl() call QueryResponse.getCoreUrl() call QueryResponse.getCoreUrl() call QueryResponse.getCoreUrl() = decl_stmt long = call long.getResults() call long.getResults() call long.getResults() call long.getResults() call long.getResults() int Slice decl long ClusterState SolrQuery QueryResponse String protected protected throws decl_stmt org.apache.solr.client.solrj.SolrQuery = new call SolrQuery.set() call SolrQuery.set() call SolrQuery.set() call SolrQuery.set() call SolrQuery.set() decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) decl_stmt long = new call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() decl_stmt int = for : call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() decl_stmt java.lang.String = new decl_stmt org.apache.solr.client.solrj.response.QueryResponse try = = ++ = call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() + + + + call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() > for = < call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() ++ + StringBuilder decl Range ModifiableSolrParams decl DocRouter SolrRequest protected protected < throws decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) if != call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) if != decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt org.apache.lucene.facet.range.Range = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl DocRouter.toString() call decl DocRouter.toString() call decl DocRouter.toString() call decl DocRouter.toString() call decl DocRouter.toString() if < - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if != call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) decl_stmt org.apache.solr.client.solrj.SolrRequest = new call decl Range.setPath() call decl Range.setPath() call decl Range.setPath() call decl Range.setPath() call decl Range.setPath() decl_stmt java.lang.String = = call SolrRequest.substring() call SolrRequest.substring() call SolrRequest.substring() call SolrRequest.substring() call SolrRequest.substring() call SolrRequest.length() call SolrRequest.length() call SolrRequest.length() call SolrRequest.length() call SolrRequest.length() - try = * int protected protected < throws decl_stmt int = if != - ++ int protected protected < throws decl_stmt int = if != - -- decl DocRouter int HashBasedRouter public static public static < decl_stmt int = if instanceof decl_stmt org.apache.solr.common.cloud.HashBasedRouter = = call org.apache.solr.common.cloud.HashBasedRouter.sliceHash(String,SolrInputDocument,SolrParams,DocCollection) call org.apache.solr.common.cloud.HashBasedRouter.sliceHash(String,SolrInputDocument,SolrParams,DocCollection) call org.apache.solr.common.cloud.HashBasedRouter.sliceHash(String,SolrInputDocument,SolrParams,DocCollection) call org.apache.solr.common.cloud.HashBasedRouter.sliceHash(String,SolrInputDocument,SolrParams,DocCollection) call org.apache.solr.common.cloud.HashBasedRouter.sliceHash(String,SolrInputDocument,SolrParams,DocCollection) for = < ++ decl_stmt org.apache.lucene.facet.range.Range = if call decl DocRouter.includes() call decl DocRouter.includes() call decl DocRouter.includes() call decl DocRouter.includes() call decl DocRouter.includes() return return - SolrDocument decl Map String decl Map String int decl Map SolrDocument protected protected for = < ++ decl_stmt int = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.util.Map < = new <> decl_stmt java.util.Map < = new <> decl_stmt java.util.Map < = new <> for = < ++ decl_stmt org.apache.solr.common.SolrDocument = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) decl_stmt org.apache.solr.common.SolrDocument = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) if != call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) + + call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) + + call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) for = < ++ decl_stmt org.apache.solr.common.SolrDocument = decl_stmt java.lang.String = call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + + + call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) decl_stmt org.apache.solr.common.SolrDocument = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) if != call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) + + call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) + + call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) HttpSolrClient protected protected decl_stmt org.apache.solr.client.solrj.impl.HttpSolrClient = call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) * * return HttpSolrClient protected protected decl_stmt org.apache.solr.client.solrj.impl.HttpSolrClient = call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) call org.apache.solr.client.solrj.impl.HttpSolrClient.setSoTimeout(int) * * return CloudSolrClient protected protected decl_stmt org.apache.solr.client.solrj.impl.CloudSolrClient = return