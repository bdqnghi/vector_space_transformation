org.apache.lucene.store static static java.lang.invoke.MethodHandles.* import static static java.lang.invoke.MethodType.methodType import java.io.IOException import java.nio.ByteBuffer import java.nio.MappedByteBuffer import java.nio.channels.ClosedChannelException import java.nio.channels.FileChannel import java.nio.channels.FileChannel.MapMode import java.nio.file.Path import java.nio.file.StandardOpenOption import java.security.AccessController import java.security.PrivilegedAction import java.util.Locale import java.util.Objects import java.util.concurrent.Future import java.lang.invoke.MethodHandle import java.lang.reflect.Method import org.apache.lucene.store.ByteBufferIndexInput.BufferCleaner import org.apache.lucene.util.Constants import org.apache.lucene.util.SuppressForbidden import class org.apache.lucene.store.MMapDirectory super super extends boolean BufferCleaner String boolean int boolean int public public final final if && ! throw new = public public return public public = public public return public final public final return << Path boolean String public public throws decl_stmt java.nio.file.Path = try = decl_stmt java.lang.String final final = + call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() + decl_stmt boolean final final = return : long int long MappedByteBuffer ByteBuffer int final final throws if >>> >= throw new + decl_stmt long final final = << decl_stmt int final final = >>> + decl_stmt ByteBuffer = new decl_stmt long = for = < ++ decl_stmt int = > + : - decl_stmt java.nio.MappedByteBuffer try = + catch throw if call java.nio.MappedByteBuffer.load() call java.nio.MappedByteBuffer.load() call java.nio.MappedByteBuffer.load() call java.nio.MappedByteBuffer.load() call java.nio.MappedByteBuffer.load() = += return IOException String String Throwable private private decl_stmt java.lang.String final final decl_stmt java.lang.Throwable final final if instanceof = = else = = decl_stmt java.lang.String final final if ! = else if = else if = else = decl_stmt IOException final final = new + + + call IOException.setStackTrace() call IOException.setStackTrace() call IOException.setStackTrace() call IOException.setStackTrace() call IOException.setStackTrace() return MethodHandle decl Class Throwable Method MethodHandle decl Class Lookup SecurityManager MethodHandle MethodHandle MethodHandle = private static = private static decl_stmt org.apache.lucene.search.suggest.Lookup final final = try decl_stmt java.lang.Class final final final < = decl_stmt com.sun.jdi.Method final final = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call Method.setAccessible() call Method.setAccessible() call Method.setAccessible() call Method.setAccessible() call Method.setAccessible() decl_stmt java.lang.invoke.MethodHandle = call Lookup.unreflect() call Lookup.unreflect() call Lookup.unreflect() call Lookup.unreflect() call Lookup.unreflect() decl_stmt java.lang.Class < = call java.lang.invoke.MethodHandle.type() call java.lang.invoke.MethodHandle.type() call java.lang.invoke.MethodHandle.type() call java.lang.invoke.MethodHandle.type() call java.lang.invoke.MethodHandle.type() decl_stmt java.lang.invoke.MethodHandle final final if decl_stmt java.lang.SecurityManager final final = if != call java.lang.SecurityManager.checkPackageAccess(String) call java.lang.SecurityManager.checkPackageAccess(String) call java.lang.SecurityManager.checkPackageAccess(String) call java.lang.SecurityManager.checkPackageAccess(String) call java.lang.SecurityManager.checkPackageAccess(String) = call java.lang.invoke.MethodHandle.asType(MethodType) call java.lang.invoke.MethodHandle.asType(MethodType) call java.lang.invoke.MethodHandle.asType(MethodType) call java.lang.invoke.MethodHandle.asType(MethodType) call java.lang.invoke.MethodHandle.asType(MethodType) call java.lang.invoke.MethodHandle.type() call java.lang.invoke.MethodHandle.type() call java.lang.invoke.MethodHandle.type() call java.lang.invoke.MethodHandle.type() call java.lang.invoke.MethodHandle.type() = = call Lookup.findVirtual() call Lookup.findVirtual() call Lookup.findVirtual() call Lookup.findVirtual() call Lookup.findVirtual() else = call Lookup.findVirtual() call Lookup.findVirtual() call Lookup.findVirtual() call Lookup.findVirtual() call Lookup.findVirtual() decl_stmt java.lang.invoke.MethodHandle final final = call Lookup.findStatic() call Lookup.findStatic() call Lookup.findStatic() call Lookup.findStatic() call Lookup.findStatic() decl_stmt java.lang.invoke.MethodHandle final final = decl_stmt java.lang.invoke.MethodHandle final final = return -> if call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() call decl Class.isInstance() decl_stmt java.lang.Throwable final final = < -> try call MethodHandle.invokeExact() call MethodHandle.invokeExact() call MethodHandle.invokeExact() call MethodHandle.invokeExact() call MethodHandle.invokeExact() return catch return if != throw new +