org.apache.lucene.codecs.compressing java.io.Closeable import java.io.IOException import java.util.Collection import java.util.Collections import java.util.Iterator import java.util.NoSuchElementException import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.TermVectorsReader import org.apache.lucene.index.CorruptIndexException import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.Fields import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.SegmentInfo import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.ChecksumIndexInput import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LongsRef import org.apache.lucene.util.packed.BlockPackedReaderIterator import org.apache.lucene.util.packed.PackedInts import static static org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.CODEC_SFX_DAT import static static org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.CODEC_SFX_IDX import static static org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.FLAGS_BITS import static static org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.OFFSETS import static static org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.PACKED_BLOCK_SIZE import static static org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.PAYLOADS import static static org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.POSITIONS import static static org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.VECTORS_EXTENSION import static static org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.VECTORS_INDEX_EXTENSION import static static org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.VERSION_CHUNK_STATS import static static org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.VERSION_CURRENT import static static org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.VERSION_START import class org.apache.lucene.codecs.compressing.CompressingTermVectorsReader super super extends super implements int CompressingStoredFieldsIndexReader long FieldInfos BlockPackedReaderIterator long int CompressionMode boolean int IndexInput int Decompressor long return return return return return return return return return private private throws if throw new public public throws if ! = public public return new int int int decl int int decl PackedInts decl PackedInts int int int decl int int decl int int float int int int LongsRef decl int int decl int decl PackedInts decl int BytesRef int decl Reader int int decl int decl int decl Reader decl int int decl Reader int decl Mutable int long int decl PackedInts decl Reader int int decl int decl int decl ReaderIterator decl int decl int LongsRef decl int BytesRef int decl int decl PackedInts decl int int int int int int decl int int int decl float int public public throws decl_stmt long final final = call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if < || || >= || || >= + || || >= || || >= + || || || >= || || >= + || || >= || || >= + || + || || >= || || >= + || || >= || || >= + || || || >= || || >= + || || >= || || >= + || + throw new + + + + + decl_stmt int final final decl_stmt int final final decl_stmt int final final if == = = = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() else call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) decl_stmt int = for = < ++ += call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() = = int call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() += for = + < + ++ += call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() = if == return decl_stmt int final final final decl_stmt int final final = call org.apache.lucene.store.IndexInput.readByte(long) call org.apache.lucene.store.IndexInput.readByte(long) call org.apache.lucene.store.IndexInput.readByte(long) call org.apache.lucene.store.IndexInput.readByte(long) call org.apache.lucene.store.IndexInput.readByte(long) & assert != decl_stmt int final final = & decl_stmt int = >>> if == += call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() ++ decl_stmt ReaderIterator final final final final final = = new for = < ++ = int call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.next() decl_stmt int final final final = new decl_stmt java.io.Reader final final final final final decl_stmt int final final = - decl_stmt java.io.Reader final final final final final = switch call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() case decl_stmt java.io.Reader final final final final final = decl_stmt Mutable = for = < ++ decl_stmt int final final = int call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() assert >= && < decl_stmt int final final = int call decl int.get() call decl int.get() call decl int.get() call decl int.get() call decl int.get() call int.set() call int.set() call int.set() call int.set() call int.set() = break case = break default: throw new for = < ++ = int call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() + decl_stmt java.io.Reader final final final final final decl_stmt int final final decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() = decl_stmt int = for = < ++ += call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() = decl_stmt int = = decl_stmt int final final final = new decl_stmt int final final final = new decl_stmt int final final final = new call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) decl_stmt int = for = < ++ += call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) for = < ++ decl_stmt int final final = int call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() + decl_stmt int final final final = new = for = < decl_stmt org.apache.lucene.util.LongsRef final final = call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() - for = < ++ ++ = int + call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) - call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) = for = < ++ for = < call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() ++ += call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() for = < ++ decl_stmt int final final = int call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() + decl_stmt int final final final = new = for = < decl_stmt org.apache.lucene.util.LongsRef final final = call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() - for = < ++ ++ = int + = += = + for = + < ++ for = < call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() ++ += call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() decl_stmt int final final final = new call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) for = < decl_stmt org.apache.lucene.util.LongsRef final final = call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() - for = < ++ ++ = + int + decl_stmt int = = = for = = < ++ decl_stmt int final final = int call decl int.get() call decl int.get() call decl int.get() call decl int.get() call decl int.get() decl_stmt int final final = int call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() for = < ++ decl_stmt int final final = ++ if & != += if & != += if & != += assert != - || == : + + decl_stmt int final final final = decl_stmt int final final final if > = else = new if > decl_stmt float final final final = new for = < ++ = call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) call org.apache.lucene.store.IndexInput.readInt(long) = = for = < ++ decl_stmt int final final final = decl_stmt int final final final = if != && != decl_stmt float final final = for = < ++ += * if != decl_stmt int final final final = decl_stmt int final final final = decl_stmt int final final final = for = = int call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() + < ++ decl_stmt int final final = + += for = + < + ++ += - += else = = new if > for = < ++ decl_stmt int final final final = decl_stmt int final final final = if != for = = int call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() + < ++ for = + < + ++ += - decl_stmt int final final final = new decl_stmt int = decl_stmt int = decl_stmt int = if > call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) decl_stmt int = for = < ++ decl_stmt int final final = int call decl int.get() call decl int.get() call decl int.get() call decl int.get() call decl int.get() decl_stmt int final final = int call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() if & != for = < ++ decl_stmt int final final = + for = < ++ decl_stmt int final final = int call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() += += = for = < ++ decl_stmt int final final = int call decl int.get() call decl int.get() call decl int.get() call decl int.get() call decl int.get() + decl_stmt int final final = int call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() + if & != decl_stmt int final final = = new + decl_stmt int = = for = < ++ decl_stmt int final final = + for = < ++ decl_stmt int final final = int call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() += + = ++ assert == += += for = + < ++ decl_stmt int final final = int call decl int.get() call decl int.get() call decl int.get() call decl int.get() call decl int.get() decl_stmt int final final = int call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() if & != for = < ++ decl_stmt int final final = + for = < ++ += call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() += assert == : + + decl_stmt org.apache.lucene.util.BytesRef final final = new call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() call Decompressor.decompress() + + + = decl_stmt org.apache.lucene.util.BytesRef final final = new + decl_stmt int final final final = new for = < ++ = int call decl int.get() call decl int.get() call decl int.get() call decl int.get() call decl int.get() + decl_stmt int final final final = new for = < ++ = int call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() + decl_stmt int final final final = new decl_stmt int = for = < ++ += call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() for = < ++ decl_stmt int final final = int call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() call decl Reader.get() + = new for = < ++ = ++ assert == : + + return new int int int decl int private private decl_stmt int final final final = new decl_stmt int = for = < ++ decl_stmt int final final = int += for = < ++ decl_stmt int final final = int + = new + for = < ++ decl_stmt int final final = + + = + += return int LongsRef decl int int decl int int int int int private private final final throws decl_stmt int final final final = new call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(DataInput,long) decl_stmt int = decl_stmt int = for = < ++ decl_stmt int final final = int decl_stmt int final final = int if & != for = < ++ decl_stmt int final final = + += += call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) for = < ++ decl_stmt int final final = int + decl_stmt int final final = int + if & != decl_stmt int final final = decl_stmt int final final final = new = for = < decl_stmt org.apache.lucene.util.LongsRef final final = call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() - for = < ++ ++ = int + += call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) - call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() return int int public < public < return new < decl_stmt int = public public return < public public if ! throw new decl_stmt int final final = ++ return call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) public public throw new public public return < int public public if ! throw new decl_stmt int final final = ++ return call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) public public throw new FieldInfo int int public public throws decl_stmt org.apache.lucene.index.FieldInfo final final = call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) if == return decl_stmt int = - for = < ++ if == = break if == - || == return decl_stmt int = = - for = < ++ if < += else = break assert >= return new new + public public return TVTermsEnum public public throws decl_stmt TVTermsEnum = new call TVTermsEnum.reset() call TVTermsEnum.reset() call TVTermsEnum.reset() call TVTermsEnum.reset() call TVTermsEnum.reset() new return public public throws return public public throws return - public public throws return public public throws return public public return public public return & != public public return & != public public return & != = = = = = = = = = = = = = = - public public throws if == - return else assert < ++ = = + if > = return BytesRef int public public throws if < && >= decl_stmt int final final = if == return else if > while decl_stmt org.apache.lucene.util.BytesRef final final = if == return decl_stmt int final final = call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() if > return else if == return public public throws throw new public public throws return public public throws throw new public public throws return public public throws return TVPostingsEnum public final public final throws decl_stmt TVPostingsEnum final final if != && instanceof = else = new call TVPostingsEnum.reset() call TVPostingsEnum.reset() call TVPostingsEnum.reset() call TVPostingsEnum.reset() call TVPostingsEnum.reset() return public public = = = = = = = = = = = = - private private if == throw new else if == - throw new private private if < throw new else if >= throw new public public throws if != throw new else if >= - throw new ++ if != = + + = + + - + if == return - else return + public public throws if == return - else return + public public throws if == return - else return + + + public public throws if == || == return else return public public throws return public public return public public throws if == - return = else return = public public throws return public public return int private static private static decl_stmt int = for : += return public public return call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.ramBytesUsed() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.ramBytesUsed() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.ramBytesUsed() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.ramBytesUsed() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.ramBytesUsed() public < public < return public public throws public public return + + + + +