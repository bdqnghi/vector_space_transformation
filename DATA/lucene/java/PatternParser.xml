org.apache.lucene.analysis.compound.hyphenation org.xml.sax.XMLReader import org.xml.sax.InputSource import org.xml.sax.SAXException import org.xml.sax.SAXParseException import org.xml.sax.helpers.DefaultHandler import org.xml.sax.Attributes import java.io.IOException import java.util.ArrayList import javax.xml.parsers.SAXParserFactory import class org.apache.lucene.analysis.compound.hyphenation.PatternParser super super extends decl ArrayList int int XMLReader int int StringBuilder char int PatternConsumer String public public = public public throws new public public throws try call XMLReader.parse() call XMLReader.parse() call XMLReader.parse() call XMLReader.parse() call XMLReader.parse() catch throw new SAXParserFactory static static try decl_stmt SAXParserFactory = call SAXParserFactory.setNamespaceAware() call SAXParserFactory.setNamespaceAware() call SAXParserFactory.setNamespaceAware() call SAXParserFactory.setNamespaceAware() call SAXParserFactory.setNamespaceAware() return call SAXParserFactory.newSAXParser() call SAXParserFactory.newSAXParser() call SAXParserFactory.newSAXParser() call SAXParserFactory.newSAXParser() call SAXParserFactory.newSAXParser() catch throw new + int String boolean protected protected decl_stmt java.lang.String decl_stmt boolean = decl_stmt int for = < ++ if = else break if for = < ++ - - if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() return = for = < ++ if = break call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < ++ - - if = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() return call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return StringBuilder int protected static protected static decl_stmt java.lang.StringBuilder = new decl_stmt int = for = < ++ if ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() char decl ArrayList Object String decl char StringBuilder protected < protected < < decl_stmt java.util.ArrayList < = new <> for = < ++ decl_stmt java.lang.Object = if instanceof decl_stmt java.lang.String = decl_stmt java.lang.StringBuilder = new for = < call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() ++ decl_stmt char = call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() decl_stmt char = new = call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() new new if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() else call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return StringBuilder Object protected protected < decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt java.lang.Object = if instanceof call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() char String StringBuilder int protected static protected static decl_stmt java.lang.StringBuilder = new decl_stmt java.lang.String = + decl_stmt int = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() for = < ++ decl_stmt char = call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) ++ else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public if != && || return new return String public public if decl_stmt java.lang.String = if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == = call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) else if = else if = else if = = new <> else if if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() new = call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() String public public if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() switch case call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addClass(String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addClass(String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addClass(String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addClass(String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addClass(String) break case call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() = call PatternConsumer.addException() call PatternConsumer.addException() call PatternConsumer.addException() call PatternConsumer.addException() call PatternConsumer.addException() call decl ArrayList.clone() call decl ArrayList.clone() call decl ArrayList.clone() call decl ArrayList.clone() call decl ArrayList.clone() break case call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addPattern(String,String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addPattern(String,String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addPattern(String,String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addPattern(String,String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addPattern(String,String) break case break if != call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() if == = else = StringBuilder String public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = while != switch case call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addClass(String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addClass(String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addClass(String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addClass(String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addClass(String) break case call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() = call PatternConsumer.addException() call PatternConsumer.addException() call PatternConsumer.addException() call PatternConsumer.addException() call PatternConsumer.addException() call decl ArrayList.clone() call decl ArrayList.clone() call decl ArrayList.clone() call decl ArrayList.clone() call decl ArrayList.clone() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() break case call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addPattern(String,String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addPattern(String,String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addPattern(String,String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addPattern(String,String) call org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addPattern(String,String) break = int String StringBuilder private private decl_stmt java.lang.StringBuilder = new decl_stmt java.lang.String = if != decl_stmt int = call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) if != - = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()