org.apache.lucene.queries.mlt java.io.IOException import java.io.Reader import java.io.StringReader import java.util.ArrayList import java.util.Collection import java.util.HashMap import java.util.Map import java.util.Set import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.document.Document import org.apache.lucene.index.Fields import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexableField import org.apache.lucene.index.MultiFields import org.apache.lucene.index.Term import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.BoostQuery import org.apache.lucene.search.Query import org.apache.lucene.search.TermQuery import org.apache.lucene.search.similarities.ClassicSimilarity import org.apache.lucene.search.similarities.TFIDFSimilarity import org.apache.lucene.util.BytesRef import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.PriorityQueue import class org.apache.lucene.queries.mlt.MoreLikeThis int TFIDFSimilarity IndexReader int int int int boolean decl String int decl String boolean int int decl Set Analyzer float int decl Set int int int int int public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public return public public = public public = * call IndexReader.numDocs() call IndexReader.numDocs() call IndexReader.numDocs() call IndexReader.numDocs() call IndexReader.numDocs() / public public return public public = public public return public public = public public return public public = public public return public public = public public < = public < public < return public public return public public = public public return public public = decl Collection public public throws if == decl_stmt java.util.Collection < = = call decl Collection.toArray() call decl Collection.toArray() call decl Collection.toArray() call decl Collection.toArray() call decl Collection.toArray() new call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() return decl Collection public public < < throws if == decl_stmt java.util.Collection < = = call decl Collection.toArray() call decl Collection.toArray() call decl Collection.toArray() call decl Collection.toArray() call decl Collection.toArray() new call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() return decl Map public public throws decl_stmt java.util.Map < < = new <> for : return decl BooleanQuery float ScoreTerm Query decl Builder private private < decl_stmt org.apache.lucene.util.fst.Builder = new decl_stmt ScoreTerm decl_stmt float = - while = != decl_stmt org.apache.lucene.search.Query = new new if if == - = decl_stmt float = = new * / try call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() catch break return call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() ScoreTerm String decl Map FreqQ float float String int int int int private < private < < < throws decl_stmt int = call IndexReader.numDocs() call IndexReader.numDocs() call IndexReader.numDocs() call IndexReader.numDocs() call IndexReader.numDocs() decl_stmt int final final = decl_stmt FreqQ = new for < < : decl_stmt java.util.Map < = decl_stmt java.lang.String = for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = decl_stmt int = if > && < continue decl_stmt int = call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() new if > && < continue if > continue if == continue decl_stmt float = call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() decl_stmt float = * if call FreqQ.size() call FreqQ.size() call FreqQ.size() call FreqQ.size() call FreqQ.size() < call FreqQ.add() call FreqQ.add() call FreqQ.add() call FreqQ.add() call FreqQ.add() new else decl_stmt ScoreTerm = call FreqQ.top() call FreqQ.top() call FreqQ.top() call FreqQ.top() call FreqQ.top() if < call ScoreTerm.update() call ScoreTerm.update() call ScoreTerm.update() call ScoreTerm.update() call ScoreTerm.update() call FreqQ.updateTop() call FreqQ.updateTop() call FreqQ.updateTop() call FreqQ.updateTop() call FreqQ.updateTop() return decl Collection int private private < < decl_stmt int = decl_stmt java.util.Collection < < = for < : += return StringBuilder String public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() Document decl IndexableField Fields decl Map Terms String private < private < throws decl_stmt java.util.Map < < = new <> for : decl_stmt Fields final final = call IndexReader.getTermVectors() call IndexReader.getTermVectors() call IndexReader.getTermVectors() call IndexReader.getTermVectors() call IndexReader.getTermVectors() decl_stmt org.apache.lucene.index.Terms final final if != = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() else = if == decl_stmt org.apache.lucene.document.Document = call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) decl_stmt org.apache.lucene.index.IndexableField = call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() for : decl_stmt java.lang.String final final = if != new else return decl Map decl Collection private < private < < < throws decl_stmt java.util.Map < < = new <> for : for : decl_stmt java.util.Collection < = if == continue for : if != new return String decl Map TermsEnum BytesRef Int CharsRefBuilder int private private < < throws decl_stmt java.util.Map < = if == = new <> decl_stmt org.apache.lucene.index.TermsEnum final final = decl_stmt org.apache.lucene.util.CharsRefBuilder final final = new decl_stmt org.apache.lucene.util.BytesRef while = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) decl_stmt java.lang.String final final = call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() if continue decl_stmt int final final = int call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() decl_stmt Int = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = else += String Int CharTermAttribute decl Map int private private < < throws if == throw new + decl_stmt java.util.Map < = if == = new <> try = call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) decl_stmt int = decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute = while decl_stmt java.lang.String = call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() ++ if > break if continue decl_stmt Int = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new else ++ int private private decl_stmt int = if > && < return if > && > return return != && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl Map private < private < throws decl_stmt java.util.Map < < = new <> return ScoreTerm decl PriorityQueue decl String decl ArrayList int public public throws decl_stmt java.util.ArrayList < = new <> decl_stmt org.apache.lucene.util.PriorityQueue < = decl_stmt ScoreTerm decl_stmt int = while = call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() != && -- > call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() decl_stmt java.lang.String = new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() return call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() ScoreTerm decl PriorityQueue decl String decl ArrayList int public public throws decl_stmt java.util.ArrayList < = new <> decl_stmt org.apache.lucene.util.PriorityQueue < = decl_stmt ScoreTerm decl_stmt int = while = call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() != && -- > call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() decl_stmt java.lang.String = new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() return call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() protected protected return < = = = = = =