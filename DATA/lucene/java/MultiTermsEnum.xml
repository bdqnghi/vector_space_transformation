org.apache.lucene.index java.io.IOException import java.util.Arrays import java.util.Comparator import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.PriorityQueue import class org.apache.lucene.index.MultiTermsEnum super super extends decl EnumWithSlice decl TermsEnumWithSlice boolean decl TermsEnumWithSlice int decl TermsEnumWithSlice decl Comparator TermMergeQueue int decl MultiPostingsEnum BytesRef BytesRefBuilder public public return - public public return public public return public public return TermsEnumWithSlice BytesRef TermsEnumIndex public public throws assert <= = = call TermMergeQueue.clear() call TermMergeQueue.clear() call TermMergeQueue.clear() call TermMergeQueue.clear() call TermMergeQueue.clear() for = < ++ decl_stmt TermsEnumIndex final final = assert != decl_stmt org.apache.lucene.util.BytesRef final final = call TermsEnumIndex.termsEnum() call TermsEnumIndex.termsEnum() call TermsEnumIndex.termsEnum() call TermsEnumIndex.termsEnum() call TermsEnumIndex.termsEnum() call TermsEnumIndex.termsEnum() call TermsEnumIndex.termsEnum() call TermsEnumIndex.termsEnum() call TermsEnumIndex.termsEnum() if != decl_stmt TermsEnumWithSlice final final = call TermsEnumWithSlice.reset() call TermsEnumWithSlice.reset() call TermsEnumWithSlice.reset() call TermsEnumWithSlice.reset() call TermsEnumWithSlice.reset() call TermMergeQueue.add() call TermMergeQueue.add() call TermMergeQueue.add() call TermMergeQueue.add() call TermMergeQueue.add() ++ = else if call TermMergeQueue.size() call TermMergeQueue.size() call TermMergeQueue.size() call TermMergeQueue.size() call TermMergeQueue.size() == return else return boolean int boolean BytesRef public public throws call TermMergeQueue.clear() call TermMergeQueue.clear() call TermMergeQueue.clear() call TermMergeQueue.clear() call TermMergeQueue.clear() = decl_stmt boolean = if != && call decl EnumWithSlice.compareTo() call decl EnumWithSlice.compareTo() call decl EnumWithSlice.compareTo() call decl EnumWithSlice.compareTo() call decl EnumWithSlice.compareTo() <= = = = for = < ++ decl_stmt boolean final final if decl_stmt org.apache.lucene.util.BytesRef final final = if != decl_stmt int final final = if == = else if < = else = else = else = if ++ = = = assert return > SeekStatus int boolean BytesRef public public throws call TermMergeQueue.clear() call TermMergeQueue.clear() call TermMergeQueue.clear() call TermMergeQueue.clear() call TermMergeQueue.clear() = = decl_stmt boolean = if != && call decl EnumWithSlice.compareTo() call decl EnumWithSlice.compareTo() call decl EnumWithSlice.compareTo() call decl EnumWithSlice.compareTo() call decl EnumWithSlice.compareTo() <= = call boolean.copyBytes() call boolean.copyBytes() call boolean.copyBytes() call boolean.copyBytes() call boolean.copyBytes() = call boolean.get() call boolean.get() call boolean.get() call boolean.get() call boolean.get() for = < ++ decl_stmt SeekStatus final final if decl_stmt org.apache.lucene.util.BytesRef final final = if != decl_stmt int final final = if == = else if < = else = else = else = if == ++ = = = call TermMergeQueue.add() call TermMergeQueue.add() call TermMergeQueue.add() call TermMergeQueue.add() call TermMergeQueue.add() else if == = assert != call TermMergeQueue.add() call TermMergeQueue.add() call TermMergeQueue.add() call TermMergeQueue.add() call TermMergeQueue.add() else assert == = if > return else if call TermMergeQueue.size() call TermMergeQueue.size() call TermMergeQueue.size() call TermMergeQueue.size() call TermMergeQueue.size() > return else return public public throw new public public throw new private private assert == = call TermMergeQueue.fillTop() call TermMergeQueue.fillTop() call TermMergeQueue.fillTop() call TermMergeQueue.fillTop() call TermMergeQueue.fillTop() = TermsEnumWithSlice private private throws for = < ++ decl_stmt TermsEnumWithSlice = call TermMergeQueue.top() call TermMergeQueue.top() call TermMergeQueue.top() call TermMergeQueue.top() call TermMergeQueue.top() = call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() if == call TermMergeQueue.pop() call TermMergeQueue.pop() call TermMergeQueue.pop() call TermMergeQueue.pop() call TermMergeQueue.pop() else call TermMergeQueue.updateTop() call TermMergeQueue.updateTop() call TermMergeQueue.updateTop() call TermMergeQueue.updateTop() call TermMergeQueue.updateTop() = SeekStatus public public throws if decl_stmt SeekStatus final final = assert == = = if call TermMergeQueue.size() call TermMergeQueue.size() call TermMergeQueue.size() call TermMergeQueue.size() call TermMergeQueue.size() > else = return int public public throws decl_stmt int = for = < ++ += return long long public public throws decl_stmt long = for = < ++ decl_stmt long final final = if == - return += return int TermsEnumWithSlice MultiPostingsEnum PostingsEnum public public throws decl_stmt org.apache.lucene.index.MultiPostingsEnum if != && instanceof = if ! call MultiPostingsEnum.canReuse() call MultiPostingsEnum.canReuse() call MultiPostingsEnum.canReuse() call MultiPostingsEnum.canReuse() call MultiPostingsEnum.canReuse() = new else = new decl_stmt int = for = < ++ decl_stmt TermsEnumWithSlice final final = assert < : + + + + decl_stmt org.apache.lucene.index.PostingsEnum final final = call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() call TermsEnumWithSlice.terms() assert != = = = ++ return call org.apache.lucene.index.MultiPostingsEnum.reset(EnumWithSlice,int) call org.apache.lucene.index.MultiPostingsEnum.reset(EnumWithSlice,int) call org.apache.lucene.index.MultiPostingsEnum.reset(EnumWithSlice,int) call org.apache.lucene.index.MultiPostingsEnum.reset(EnumWithSlice,int) call org.apache.lucene.index.MultiPostingsEnum.reset(EnumWithSlice,int) public public = = public public return + + protected protected return < int int int TermsEnumWithSlice int int decl_stmt int final final = if == return = decl_stmt int = = decl_stmt int = while != decl_stmt int final final = -- decl_stmt int final final = << for = = + <= ++ decl_stmt TermsEnumWithSlice = if call TermsEnumWithSlice.current() call TermsEnumWithSlice.current() call TermsEnumWithSlice.current() call TermsEnumWithSlice.current() call TermsEnumWithSlice.current() call TermsEnumWithSlice.current() call TermsEnumWithSlice.current() call TermsEnumWithSlice.current() call TermsEnumWithSlice.current() ++ = ++ = return private private return public public return + +