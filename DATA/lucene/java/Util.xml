org.apache.lucene.util.fst org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.fst.FST.Arc import org.apache.lucene.util.fst.FST.BytesReader import java.io.IOException import java.io.Writer import java.util.ArrayList import java.util.BitSet import java.util.Comparator import java.util.Iterator import java.util.List import java.util.TreeSet import class org.apache.lucene.util.fst.Util BytesReader decl FST T public static < public static < < throws decl_stmt org.apache.lucene.util.fst.FST final final final final final final final < = new < decl_stmt BytesReader final final = decl_stmt T = for = < ++ if + == return = if call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() return else return T BytesReader decl FST public static < public static < < throws assert == decl_stmt BytesReader final final = decl_stmt org.apache.lucene.util.fst.FST final final final final final final final < = new < decl_stmt T = for = < ++ if + & == return = if call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() return else return decl FST decl FST IntsRefBuilder BytesReader public static public static < throws decl_stmt BytesReader final final = decl_stmt org.apache.lucene.util.fst.FST < = new < decl_stmt org.apache.lucene.util.fst.FST < = new <> decl_stmt org.apache.lucene.util.IntsRefBuilder final final = new return int long long int long int byte int decl FST long boolean public static public static < < < throws decl_stmt long = decl_stmt int = while if decl_stmt long final final = + if == return else if > return if + if != decl_stmt int = decl_stmt int = - decl_stmt int = decl_stmt boolean = while <= = + >>> * decl_stmt byte final final = decl_stmt long final final if & != decl_stmt long final final = = + else = if == = break else if < = + else = - if == - return else if = - else = - ++ += else decl_stmt org.apache.lucene.util.fst.FST < = while decl_stmt long final final = + if == = ++ break else if > if == return else ++ += break else if = ++ break else = call decl FST.copyFrom() call decl FST.copyFrom() call decl FST.copyFrom() call decl FST.copyFrom() call decl FST.copyFrom() else return public < public < return new <> public public return + + + + + + + int public public < < decl_stmt int = if == return else return int int T IntsRefBuilder decl FSTPath protected protected < assert != decl_stmt T = if == decl_stmt FSTPath < = decl_stmt int = if > return else if == decl_stmt int final final = call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() - assert != if < return else decl_stmt org.apache.lucene.util.IntsRefBuilder = new call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.copyInts(int,int,int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) if == + public public < throws decl FSTPath public public < throws if = decl_stmt FSTPath < = new <> while if || != if call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() break T BytesReader decl List decl FSTPath boolean int public < public < throws decl_stmt java.util.List final final final < < = new <> decl_stmt BytesReader final final = decl_stmt T final final = decl_stmt int = while call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < decl_stmt FSTPath < if == break = if == break if == call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new <> call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() continue if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == - && == = while decl_stmt boolean = while if == if == = break else if ! = else else if != if call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() break assert if != call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() call decl FSTPath.arc() if == = if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new <> call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() else ++ break else call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() call decl FSTPath.input() = return new <> + <= protected protected < return protected protected return public < < public < < return decl TopNSearcher public static < < public static < < < < < throws decl_stmt TopNSearcher < = new <> call decl TopNSearcher.addStartPaths() call decl TopNSearcher.addStartPaths() call decl TopNSearcher.addStartPaths() call decl TopNSearcher.addStartPaths() call decl TopNSearcher.addStartPaths() new return call decl TopNSearcher.search() call decl TopNSearcher.search() call decl TopNSearcher.search() call decl TopNSearcher.search() call decl TopNSearcher.search() long String String decl FST String T boolean String decl FST int String String decl List decl List decl List BytesReader String BitSet public static < public static < < throws decl_stmt java.lang.String final final = decl_stmt org.apache.lucene.util.fst.FST final final final final final final final < = new < decl_stmt java.util.List final final final < < = new <> decl_stmt java.util.List final final final < < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.util.List final final final < = new <> decl_stmt org.apache.lucene.util.BitSet final final = new call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) int decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = if ! decl_stmt T final final = decl_stmt BytesReader final final = decl_stmt java.lang.String final final if = else = decl_stmt boolean final final decl_stmt T final final if call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() = = == : else = = : == : + + decl_stmt int = while ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() ++ + + while ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt org.apache.lucene.util.fst.FST final final final final final final final < = call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - if decl_stmt long final final = while if >= && ! call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) int decl_stmt java.lang.String final final if = else = decl_stmt java.lang.String final final if != && != = else = call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) int call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() int decl_stmt java.lang.String if != = + else = if ! && call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() && != = + + + decl_stmt java.lang.String final final if call decl FST.flag() call decl FST.flag() call decl FST.flag() call decl FST.flag() call decl FST.flag() = else = assert != + + + + + + + + call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() : + + + if call decl FST.isLast() call decl FST.isLast() call decl FST.isLast() call decl FST.isLast() call decl FST.isLast() break if && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > for : + call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() private static private static throws + + + != + : + + != + : + + != + + : + + private static private static if >= && <= && != && != return char return + int public static public static decl_stmt int final final = for = < ++ int return int int int int public static public static decl_stmt int = decl_stmt int = decl_stmt int final final = while < + decl_stmt int final final = += ++ return int int int int public static public static decl_stmt int = decl_stmt int = decl_stmt int final final = + while < + decl_stmt int final final = += ++ return public static public static for = < ++ + & return int public static public static for = < ++ decl_stmt int = + assert >= && <= : + + byte return int int int int int public static < < public static < < < < < throws if == if if <= = else = = = = = return else return if ! return if != && != decl_stmt int = decl_stmt int = - decl_stmt int = while <= = + >>> * + decl_stmt int final final = decl_stmt int final final = - if < = + else if > = - else = - return if == return = > : return while if >= return else if return else