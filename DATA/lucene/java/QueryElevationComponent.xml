org.apache.solr.handler.component org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.index.LeafReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.Fields import org.apache.lucene.index.IndexReader import org.apache.lucene.index.Term import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.BoostQuery import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.FieldComparator import org.apache.lucene.search.FieldComparatorSource import org.apache.lucene.search.Query import org.apache.lucene.search.SimpleFieldComparator import org.apache.lucene.search.Sort import org.apache.lucene.search.SortField import org.apache.lucene.search.TermQuery import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.SentinelIntSet import org.apache.solr.cloud.ZkController import org.apache.solr.common.SolrException import org.apache.solr.common.params.QueryElevationParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.StrUtils import org.apache.solr.schema.IndexSchema import org.apache.solr.search.QueryParsing import org.apache.solr.search.grouping.GroupingSpecification import org.apache.solr.util.DOMUtil import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.core.Config import org.apache.solr.core.SolrCore import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.transform.ElevatedMarkerFactory import org.apache.solr.response.transform.ExcludedMarkerFactory import org.apache.solr.schema.FieldType import org.apache.solr.schema.SchemaField import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.search.SortSpec import org.apache.solr.util.RefCounted import org.apache.solr.util.VersionedFile import org.apache.solr.util.plugin.SolrCoreAware import org.slf4j.Logger import org.slf4j.LoggerFactory import org.w3c.dom.Node import org.w3c.dom.NodeList import org.xml.sax.InputSource import com.carrotsearch.hppc.IntIntHashMap import javax.xml.xpath.XPath import javax.xml.xpath.XPathConstants import javax.xml.xpath.XPathExpressionException import javax.xml.xpath.XPathFactory import java.io.File import java.io.IOException import java.io.InputStream import java.lang.invoke.MethodHandles import java.net.MalformedURLException import java.net.URL import java.util.ArrayList import java.util.Arrays import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.List import java.util.Map import java.util.Set import java.util.WeakHashMap import class org.apache.solr.handler.component.QueryElevationComponent super super extends super implements String String String Logger decl Map String String Analyzer boolean String SolrParams String String FieldType public public = String String FieldType boolean ElevatedMarkerFactory ZkController String decl RefCounted ExcludedMarkerFactory String File File Config IndexReader SchemaField IndexSchema public public decl_stmt org.apache.solr.schema.IndexSchema = decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if != decl_stmt org.apache.solr.schema.FieldType = call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() if == throw new + + = call org.apache.solr.schema.FieldType.getQueryAnalyzer() call org.apache.solr.schema.FieldType.getQueryAnalyzer() call org.apache.solr.schema.FieldType.getQueryAnalyzer() call org.apache.solr.schema.FieldType.getQueryAnalyzer() call org.apache.solr.schema.FieldType.getQueryAnalyzer() decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) if == throw new = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() = call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if == || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) == = decl_stmt org.apache.solr.response.transform.ExcludedMarkerFactory = new decl_stmt org.apache.solr.response.transform.ElevatedMarkerFactory = new decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if == || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) == = = call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) try synchronized call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if == throw new + + decl_stmt boolean = decl_stmt org.apache.solr.cloud.ZkController = if != = call org.apache.solr.cloud.ZkController.configFileExists(String,String) call org.apache.solr.cloud.ZkController.configFileExists(String,String) call org.apache.solr.cloud.ZkController.configFileExists(String,String) call org.apache.solr.cloud.ZkController.configFileExists(String,String) call org.apache.solr.cloud.ZkController.configFileExists(String,String) call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() call org.apache.solr.cloud.ZkController.getZkStateReader() else decl_stmt File = new decl_stmt File = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() == call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() throw new + + + + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() + + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() + if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() decl_stmt org.apache.solr.core.Config = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if ! decl_stmt org.apache.solr.util.RefCounted < = try = decl_stmt org.apache.lucene.index.IndexReader = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() finally if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() catch throw new Config decl Map InputStream ZkController String < < throws synchronized decl_stmt java.util.Map < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if == throw new + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt org.apache.solr.core.Config decl_stmt org.apache.solr.cloud.ZkController = if != = new else decl_stmt java.io.InputStream = = new new = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return XPath decl Map Node String String ElevationObj Node decl ArrayList NodeList decl ArrayList NodeList String private < private < throws decl_stmt XPath = decl_stmt java.util.Map < = new <> decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt org.apache.lucene.replicator.nrt.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt java.lang.String = decl_stmt NodeList = try = call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() call XPath.evaluate() catch throw new decl_stmt java.util.ArrayList < = new <> decl_stmt java.util.ArrayList < = new <> for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt org.apache.lucene.replicator.nrt.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt java.lang.String = decl_stmt java.lang.String = if != if call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() continue call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() decl_stmt ElevationObj = new if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() throw new + + + + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return ElevationObj decl Map throws if == = new if == = new decl_stmt java.util.Map < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt ElevationObj = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() CharTermAttribute StringBuilder throws if == return decl_stmt java.lang.StringBuilder = new try = call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute = while call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() boolean boolean String decl SortField TermQuery GroupingSpecification String decl SortField Query decl List decl List boolean SolrQueryRequest decl List SolrParams IndexReader Sort Sort ElevationComparatorSource SortSpec decl BooleanQuery ElevationObj decl Builder String SolrParams SortSpec public public throws decl_stmt org.apache.solr.request.SolrQueryRequest = decl_stmt org.apache.solr.common.params.SolrParams = call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() call org.apache.solr.request.SolrQueryRequest.getParams() if ! call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) return decl_stmt boolean = call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) decl_stmt boolean = call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) decl_stmt boolean = call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt org.apache.lucene.search.Query = decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt java.lang.String = == : call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if == || == return decl_stmt ElevationObj = try if != || != decl_stmt java.util.List < = != : new < decl_stmt java.util.List < = != : new < = new else decl_stmt org.apache.lucene.index.IndexReader = call org.apache.solr.request.SolrQueryRequest.getSearcher() call org.apache.solr.request.SolrQueryRequest.getSearcher() call org.apache.solr.request.SolrQueryRequest.getSearcher() call org.apache.solr.request.SolrQueryRequest.getSearcher() call org.apache.solr.request.SolrQueryRequest.getSearcher() = = call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() call org.apache.solr.request.SolrQueryRequest.getCore() catch throw new if != if == new else decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new if != if == for : call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new else call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() decl_stmt ElevationComparatorSource = new decl_stmt org.apache.solr.search.SortSpec = if call ElevationComparatorSource.getSort() call ElevationComparatorSource.getSort() call ElevationComparatorSource.getSort() call ElevationComparatorSource.getSort() call ElevationComparatorSource.getSort() == call ElevationComparatorSource.setSortAndFields() call ElevationComparatorSource.setSortAndFields() call ElevationComparatorSource.setSortAndFields() call ElevationComparatorSource.setSortAndFields() call ElevationComparatorSource.setSortAndFields() new new new new new else decl_stmt org.apache.solr.search.SortSpec = if != decl_stmt org.apache.solr.search.grouping.GroupingSpecification = if != decl_stmt org.apache.lucene.search.SortField = call SortSpec.getGroupSort() call SortSpec.getGroupSort() call SortSpec.getGroupSort() call SortSpec.getGroupSort() call SortSpec.getGroupSort() decl_stmt org.apache.lucene.search.Sort = if != call SortSpec.setGroupSort() call SortSpec.setGroupSort() call SortSpec.setGroupSort() call SortSpec.setGroupSort() call SortSpec.setGroupSort() decl_stmt org.apache.lucene.search.SortField = call SortSpec.getSortWithinGroup() call SortSpec.getSortWithinGroup() call SortSpec.getSortWithinGroup() call SortSpec.getSortWithinGroup() call SortSpec.getSortWithinGroup() decl_stmt org.apache.lucene.search.Sort = if != call SortSpec.setSortWithinGroup() call SortSpec.setSortWithinGroup() call SortSpec.setSortWithinGroup() call SortSpec.setSortWithinGroup() call SortSpec.setSortWithinGroup() if decl_stmt java.util.List < = if != = new <> call ElevationObj.priority() call ElevationObj.priority() call ElevationObj.priority() call ElevationObj.priority() call ElevationObj.priority() call ElevationObj.priority() call ElevationObj.priority() call ElevationObj.priority() call ElevationObj.priority() for : call ElevationObj.include() call ElevationObj.include() call ElevationObj.include() call ElevationObj.include() call ElevationObj.include() call ElevationObj.include() call ElevationObj.include() call ElevationObj.include() call ElevationObj.include() decl_stmt org.apache.lucene.search.TermQuery = call Sort.add() call Sort.add() call Sort.add() call Sort.add() call Sort.add() call decl List.getTerm() call decl List.getTerm() call decl List.getTerm() call decl List.getTerm() call decl List.getTerm() decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> call TermQuery.add() call TermQuery.add() call TermQuery.add() call TermQuery.add() call TermQuery.add() call TermQuery.add() call TermQuery.add() call TermQuery.add() call TermQuery.add() call TermQuery.add() if SortSpec private private decl_stmt org.apache.solr.search.SortSpec = new new new = return == : call org.apache.solr.search.SortSpec.getSort() call org.apache.solr.search.SortSpec.getSort() call org.apache.solr.search.SortSpec.getSort() call org.apache.solr.search.SortSpec.getSort() call org.apache.solr.search.SortSpec.getSort() decl List boolean SortSpec decl List decl ArrayList SortField decl SortField private private decl_stmt boolean = decl_stmt org.apache.lucene.search.SortField = decl_stmt java.util.List < = decl_stmt java.util.ArrayList < = new <> + decl_stmt java.util.List < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + if && != call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = for = < ++ decl_stmt org.apache.lucene.search.SortField = if call org.apache.lucene.search.SortField.getType() call org.apache.lucene.search.SortField.getType() call org.apache.lucene.search.SortField.getType() call org.apache.lucene.search.SortField.getType() call org.apache.lucene.search.SortField.getType() == call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() new ! call org.apache.lucene.search.SortField.getReverse() call org.apache.lucene.search.SortField.getReverse() call org.apache.lucene.search.SortField.getReverse() call org.apache.lucene.search.SortField.getReverse() call org.apache.lucene.search.SortField.getReverse() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if decl_stmt org.apache.solr.search.SortSpec = new new call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call org.apache.solr.search.SortSpec.setOffset(int) call org.apache.solr.search.SortSpec.setOffset(int) call org.apache.solr.search.SortSpec.setOffset(int) call org.apache.solr.search.SortSpec.setOffset(int) call org.apache.solr.search.SortSpec.setOffset(int) call org.apache.solr.search.SortSpec.setCount(int) call org.apache.solr.search.SortSpec.setCount(int) call org.apache.solr.search.SortSpec.setCount(int) call org.apache.solr.search.SortSpec.setCount(int) call org.apache.solr.search.SortSpec.setCount(int) return return SchemaField Terms int decl HashSet Bits int decl List TermsEnum decl Iterator int decl Iterator IntIntHashMap LeafReader String BytesRef PostingsEnum public static public static < throws decl_stmt IntIntHashMap = if != if != = if != return decl_stmt org.apache.solr.schema.SchemaField = decl_stmt java.lang.String = call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() decl_stmt java.util.HashSet < = new <> * decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() = new decl_stmt java.util.List < = decl_stmt org.apache.lucene.index.PostingsEnum = for : decl_stmt org.apache.lucene.index.LeafReader = decl_stmt int = decl_stmt org.apache.lucene.util.Bits = call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() call LeafReader.getLiveDocs() decl_stmt org.apache.lucene.index.Terms = call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt java.util.Iterator < = call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.apache.lucene.util.BytesRef = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() while != && != && call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() == = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() if != decl_stmt int = call IntIntHashMap.put() call IntIntHashMap.put() call IntIntHashMap.put() call IntIntHashMap.put() call IntIntHashMap.put() + call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() if != return public public throws public public return public public try return new new catch throw new int BytesRefBuilder Terms Integer TermsEnum Fields Bits int decl int int int decl Set BytesRef PostingsEnum int public < public < final final throws return new < decl_stmt int private final final final = new decl_stmt int private decl_stmt int private decl_stmt org.apache.lucene.index.PostingsEnum private decl_stmt java.util.Set < = new <> public public return - public public = public public = private private if > decl_stmt int = if >= decl_stmt org.apache.lucene.util.BytesRef = decl_stmt java.lang.Integer = return == : call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() return public public return - public public = protected protected throws decl_stmt Fields = if == return decl_stmt org.apache.lucene.index.Terms = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() if == return decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.util.BytesRefBuilder = new decl_stmt org.apache.lucene.util.Bits = for : call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() == && call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() while != && != && call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() == = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() if == continue = call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() assert call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() == public public return public public decl_stmt int final final = return - public public return - public public = public public = int BytesRef Integer private private if > decl_stmt int = if >= decl_stmt org.apache.lucene.util.BytesRef = decl_stmt java.lang.Integer = return == : call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() return public public return - public public = BytesRefBuilder int Bits Fields TermsEnum Terms protected protected throws decl_stmt Fields = if == return decl_stmt org.apache.lucene.index.Terms = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() if == return decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.util.BytesRefBuilder = new decl_stmt org.apache.lucene.util.Bits = for : call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) if == && call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) decl_stmt int = while != && != && call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() == = if == continue = call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() call org.apache.lucene.util.BytesRefBuilder.toBytesRef() assert == public public return int public public decl_stmt int final final = return -