org.apache.lucene.store java.io.IOException import java.nio.file.Files import java.nio.file.Path import java.util.Arrays import java.util.List import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import class org.apache.lucene.store.TestDirectory super super extends FSDirectory IndexOutput FSDirectory decl byte Lock String FSDirectory Path decl FSDirectory String FSDirectory public public throws decl_stmt java.nio.file.Path final final = decl_stmt byte final final final = new * = new for = < ++ = byte decl_stmt org.apache.lucene.store.FSDirectory final final final = new new new new for = < ++ decl_stmt org.apache.lucene.store.FSDirectory = call String.ensureOpen() call String.ensureOpen() call String.ensureOpen() call String.ensureOpen() call String.ensureOpen() decl_stmt java.lang.String = + decl_stmt java.lang.String = + + decl_stmt org.apache.lucene.store.IndexOutput = call String.createOutput() call String.createOutput() call String.createOutput() call String.createOutput() call String.createOutput() call FSDirectory.writeByte() call FSDirectory.writeByte() call FSDirectory.writeByte() call FSDirectory.writeByte() call FSDirectory.writeByte() byte call FSDirectory.writeBytes() call FSDirectory.writeBytes() call FSDirectory.writeBytes() call FSDirectory.writeBytes() call FSDirectory.writeBytes() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() for = < ++ decl_stmt org.apache.lucene.store.FSDirectory = call Lock.ensureOpen() call Lock.ensureOpen() call Lock.ensureOpen() call Lock.ensureOpen() call Lock.ensureOpen() + call Lock.fileLength() call Lock.fileLength() call Lock.fileLength() call Lock.fileLength() call Lock.fileLength() if instanceof && ! continue decl_stmt org.apache.lucene.store.IndexInput = call Lock.openInput() call Lock.openInput() call Lock.openInput() call Lock.openInput() call Lock.openInput() byte call FSDirectory.readByte() call FSDirectory.readByte() call FSDirectory.readByte() call FSDirectory.readByte() call FSDirectory.readByte() byte call FSDirectory.readBytes() call FSDirectory.readBytes() call FSDirectory.readBytes() call FSDirectory.readBytes() call FSDirectory.readBytes() call FSDirectory.seek() call FSDirectory.seek() call FSDirectory.seek() call FSDirectory.seek() call FSDirectory.seek() byte call FSDirectory.readBytes() call FSDirectory.readBytes() call FSDirectory.readBytes() call FSDirectory.readBytes() call FSDirectory.readBytes() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() + for = < ++ decl_stmt org.apache.lucene.store.FSDirectory = decl_stmt java.util.concurrent.locks.Lock = call String.obtainLock() call String.obtainLock() call String.obtainLock() call String.obtainLock() call String.obtainLock() for : call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() = + call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() call org.apache.lucene.store.FSDirectory.close() for = < ++ decl_stmt org.apache.lucene.store.FSDirectory = call String.ensureOpen() call String.ensureOpen() call String.ensureOpen() call String.ensureOpen() call String.ensureOpen() call String.close() call String.close() call String.close() call String.close() call String.close() decl List Path RAMDirectory FSDirectory public public throws decl_stmt java.nio.file.Path = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) decl_stmt org.apache.lucene.store.FSDirectory = new decl_stmt org.apache.lucene.store.RAMDirectory = new decl_stmt java.util.List < = call org.apache.lucene.store.RAMDirectory.listAll() call org.apache.lucene.store.RAMDirectory.listAll() call org.apache.lucene.store.RAMDirectory.listAll() call org.apache.lucene.store.RAMDirectory.listAll() call org.apache.lucene.store.RAMDirectory.listAll() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() Path Directory IndexOutput public public throws decl_stmt java.nio.file.Path = decl_stmt org.apache.lucene.store.Directory = new try decl_stmt org.apache.lucene.store.IndexOutput = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() new call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) finally call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close()