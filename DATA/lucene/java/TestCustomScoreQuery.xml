org.apache.lucene.queries java.io.IOException import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.DocValues import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.NumericDocValues import org.apache.lucene.index.Term import org.apache.lucene.queries.function.FunctionQuery import org.apache.lucene.queries.function.FunctionTestSetup import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.BoostQuery import org.apache.lucene.search.CheckHits import org.apache.lucene.search.Explanation import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.QueryUtils import org.apache.lucene.search.TermQuery import org.apache.lucene.search.TermRangeQuery import org.apache.lucene.search.TopDocs import org.junit.BeforeClass import org.junit.Test import class org.apache.lucene.queries.TestCustomScoreQuery super super extends public static public static throws public public throws public public throws public public return decl List float protected protected return new public public return + public public decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt float = == : return + public public return + decl List float public public decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt float = == : return + public public return Explanation protected protected return new public public if == return if == return + return + * public public if == return if == return + else decl_stmt org.apache.lucene.search.Explanation = + return * call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() public public if == return if == return + return + * Explanation public public if == return if == return + else decl_stmt org.apache.lucene.search.Explanation = + return * call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() call org.apache.lucene.search.Explanation.getValue() NumericDocValues protected protected throws decl_stmt NumericDocValues final final = return new public public <= return call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() public public <= return decl BooleanQuery IndexSearcher int TopDocs decl Builder IndexReader Query public public throws decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new decl_stmt org.apache.lucene.search.Query final final = new call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() decl_stmt org.apache.lucene.index.IndexReader = decl_stmt org.apache.lucene.search.IndexSearcher = decl_stmt org.apache.lucene.search.TopDocs = call IndexReader.search() call IndexReader.search() call IndexReader.search() call IndexReader.search() call IndexReader.search() for = < ++ decl_stmt int final final = decl_stmt float final final = + float + * call Query.close() call Query.close() call Query.close() call Query.close() call Query.close() Query IndexSearcher IndexReader CustomScoreQuery CustomScoreQuery public public throws decl_stmt org.apache.lucene.index.IndexReader = decl_stmt org.apache.lucene.search.IndexSearcher final final = decl_stmt org.apache.lucene.search.Query = new new decl_stmt org.apache.lucene.queries.CustomScoreQuery = new decl_stmt org.apache.lucene.queries.CustomScoreQuery = call org.apache.lucene.queries.CustomScoreQuery.rewrite(IndexReader) call org.apache.lucene.queries.CustomScoreQuery.rewrite(IndexReader) call org.apache.lucene.queries.CustomScoreQuery.rewrite(IndexReader) call org.apache.lucene.queries.CustomScoreQuery.rewrite(IndexReader) call org.apache.lucene.queries.CustomScoreQuery.rewrite(IndexReader) call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() == call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) > call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) = new = new = call org.apache.lucene.queries.CustomScoreQuery.rewrite(IndexReader) call org.apache.lucene.queries.CustomScoreQuery.rewrite(IndexReader) call org.apache.lucene.queries.CustomScoreQuery.rewrite(IndexReader) call org.apache.lucene.queries.CustomScoreQuery.rewrite(IndexReader) call org.apache.lucene.queries.CustomScoreQuery.rewrite(IndexReader) call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() != call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) > call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() decl BooleanQuery TopDocs decl Map TopDocs Query TopDocs decl Builder Query decl Builder decl BooleanQuery IndexSearcher decl Map CustomScoreQuery TopDocs FunctionQuery CustomScoreQuery TopDocs Query float Query IndexReader decl Map Query private private throws decl_stmt float = float decl_stmt org.apache.lucene.queries.function.FunctionQuery = new decl_stmt org.apache.lucene.index.IndexReader = decl_stmt org.apache.lucene.search.IndexSearcher = decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new decl_stmt org.apache.lucene.search.Query = call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() decl_stmt org.apache.lucene.util.fst.Builder = new call Query.setDisableCoord() call Query.setDisableCoord() call Query.setDisableCoord() call Query.setDisableCoord() call Query.setDisableCoord() decl_stmt org.apache.lucene.search.Query = new call Query.add() call Query.add() call Query.add() call Query.add() call Query.add() new float decl_stmt org.apache.lucene.search.Query = call Query.build() call Query.build() call Query.build() call Query.build() call Query.build() = new float decl_stmt org.apache.lucene.search.Query decl_stmt org.apache.lucene.queries.CustomScoreQuery = new call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) = = new decl_stmt org.apache.lucene.search.Query decl_stmt org.apache.lucene.queries.CustomScoreQuery = new call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) = = new decl_stmt org.apache.lucene.search.Query decl_stmt org.apache.lucene.queries.CustomScoreQuery = new call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) call org.apache.lucene.queries.CustomScoreQuery.setStrict(boolean) = = new decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) decl_stmt java.util.Map < = decl_stmt java.util.Map < = decl_stmt java.util.Map < = decl_stmt java.util.Map < = decl_stmt java.util.Map < = call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() call org.apache.lucene.index.IndexReader.close() float float float float float float private private < < < < < throws + for final final : + decl_stmt float = + > decl_stmt float = decl_stmt float = * * decl_stmt float = * * * * decl_stmt float = * + * + decl_stmt float = * * + * * + private private throws + + + decl Map private < private < decl_stmt java.util.Map < = new <> for = < ++ call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return