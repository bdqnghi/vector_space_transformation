org.apache.lucene.queryparser.surround.query java.io.IOException import java.util.HashMap import java.util.Iterator import org.apache.lucene.index.IndexReader import org.apache.lucene.index.Term import org.apache.lucene.search.MatchNoDocsQuery import org.apache.lucene.search.Query import org.apache.lucene.search.spans.SpanBoostQuery import org.apache.lucene.search.spans.SpanOrQuery import org.apache.lucene.search.spans.SpanQuery import org.apache.lucene.search.spans.SpanTermQuery import class org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory decl HashMap BasicQueryFactory String IndexReader public public return public public return public public return public public return call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() public public call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() Float protected protected decl_stmt java.lang.Float = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() if != = call java.lang.Float.floatValue() call java.lang.Float.floatValue() call java.lang.Float.floatValue() call java.lang.Float.floatValue() call java.lang.Float.floatValue() + else = call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() SpanTermQuery public public throws decl_stmt org.apache.lucene.search.spans.SpanTermQuery = call org.apache.lucene.queryparser.surround.query.BasicQueryFactory.newSpanTermQuery(Term) call org.apache.lucene.queryparser.surround.query.BasicQueryFactory.newSpanTermQuery(Term) call org.apache.lucene.queryparser.surround.query.BasicQueryFactory.newSpanTermQuery(Term) call org.apache.lucene.queryparser.surround.query.BasicQueryFactory.newSpanTermQuery(Term) call org.apache.lucene.queryparser.surround.query.BasicQueryFactory.newSpanTermQuery(Term) float SpanBoostQuery public public if == return if ! instanceof throw new + decl_stmt float = if instanceof decl_stmt org.apache.lucene.search.spans.SpanBoostQuery = = call org.apache.lucene.search.spans.SpanBoostQuery.getBoost() call org.apache.lucene.search.spans.SpanBoostQuery.getBoost() call org.apache.lucene.search.spans.SpanBoostQuery.getBoost() call org.apache.lucene.search.spans.SpanBoostQuery.getBoost() call org.apache.lucene.search.spans.SpanBoostQuery.getBoost() = call org.apache.lucene.search.spans.SpanBoostQuery.getQuery() call org.apache.lucene.search.spans.SpanBoostQuery.getQuery() call org.apache.lucene.search.spans.SpanBoostQuery.getQuery() call org.apache.lucene.search.spans.SpanBoostQuery.getQuery() call org.apache.lucene.search.spans.SpanBoostQuery.getQuery() int decl Iterator decl SpanQuery float SpanQuery public public decl_stmt org.apache.lucene.search.spans.SpanQuery = new decl_stmt java.util.Iterator < = call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() decl_stmt int = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.apache.lucene.search.spans.SpanQuery = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt float = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() if != = new ++ = if == return else return new