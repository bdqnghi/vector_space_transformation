org.apache.lucene.search.highlight java.io.IOException import java.util.HashMap import java.util.HashSet import java.util.Map import java.util.Set import org.apache.lucene.analysis.CachingTokenFilter import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import org.apache.lucene.index.IndexReader import org.apache.lucene.index.memory.MemoryIndex import org.apache.lucene.search.Query import org.apache.lucene.search.spans.SpanQuery import class org.apache.lucene.search.highlight.QueryScorer super super implements boolean Query decl Map int PositionIncrementAttribute decl Set boolean IndexReader String CharTermAttribute int float float String boolean boolean public public return public public return float String WeightedSpanTerm public public += call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() decl_stmt java.lang.String = call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() decl_stmt org.apache.lucene.search.highlight.WeightedSpanTerm if = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() == return if && ! call org.apache.lucene.search.highlight.WeightedSpanTerm.checkPosition(int) call org.apache.lucene.search.highlight.WeightedSpanTerm.checkPosition(int) call org.apache.lucene.search.highlight.WeightedSpanTerm.checkPosition(int) call org.apache.lucene.search.highlight.WeightedSpanTerm.checkPosition(int) call org.apache.lucene.search.highlight.WeightedSpanTerm.checkPosition(int) return decl_stmt float = call WeightedSpanTerm.getWeight() call WeightedSpanTerm.getWeight() call WeightedSpanTerm.getWeight() call WeightedSpanTerm.getWeight() call WeightedSpanTerm.getWeight() if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() += call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return public public throws = - = = if ! if != call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() return return public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() private private = = = = WeightedSpanTermExtractor private private throws decl_stmt org.apache.lucene.search.highlight.WeightedSpanTermExtractor = call WeightedSpanTermExtractor.setMaxDocCharsToAnalyze() call WeightedSpanTermExtractor.setMaxDocCharsToAnalyze() call WeightedSpanTermExtractor.setMaxDocCharsToAnalyze() call WeightedSpanTermExtractor.setMaxDocCharsToAnalyze() call WeightedSpanTermExtractor.setMaxDocCharsToAnalyze() call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setExpandMultiTermQuery(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setExpandMultiTermQuery(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setExpandMultiTermQuery(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setExpandMultiTermQuery(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setExpandMultiTermQuery(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setWrapIfNotCachingTokenFilter(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setWrapIfNotCachingTokenFilter(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setWrapIfNotCachingTokenFilter(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setWrapIfNotCachingTokenFilter(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setWrapIfNotCachingTokenFilter(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setUsePayloads(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setUsePayloads(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setUsePayloads(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setUsePayloads(boolean) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setUsePayloads(boolean) if == = call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTerms(Query,float,TokenStream) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTerms(Query,float,TokenStream) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTerms(Query,float,TokenStream) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTerms(Query,float,TokenStream) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTerms(Query,float,TokenStream) else = call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTermsWithScores(Query,float,TokenStream,String,IndexReader) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTermsWithScores(Query,float,TokenStream,String,IndexReader) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTermsWithScores(Query,float,TokenStream,String,IndexReader) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTermsWithScores(Query,float,TokenStream,String,IndexReader) call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTermsWithScores(Query,float,TokenStream,String,IndexReader) if call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.isCachedTokenStream() call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.isCachedTokenStream() call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.isCachedTokenStream() call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.isCachedTokenStream() call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.isCachedTokenStream() return call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getTokenStream() call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getTokenStream() call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getTokenStream() call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getTokenStream() call org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getTokenStream() return protected protected return == new : new public public = new <> = public public return public public = public public return public public = public public = public public =