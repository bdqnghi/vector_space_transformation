org.apache.lucene.search.spans java.io.IOException import java.util.Map import java.util.Objects import java.util.Set import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.TwoPhaseIterator import class org.apache.lucene.search.spans.SpanNotQuery super super extends int SpanQuery int SpanQuery public public return public public return public public return call SpanQuery.getField() call SpanQuery.getField() call SpanQuery.getField() call SpanQuery.getField() call SpanQuery.getField() StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() SpanWeight SpanWeight public public throws decl_stmt org.apache.lucene.search.spans.SpanWeight = call SpanQuery.createWeight() call SpanQuery.createWeight() call SpanQuery.createWeight() call SpanQuery.createWeight() call SpanQuery.createWeight() decl_stmt org.apache.lucene.search.spans.SpanWeight = call SpanQuery.createWeight() call SpanQuery.createWeight() call SpanQuery.createWeight() call SpanQuery.createWeight() call SpanQuery.createWeight() return new : public public < int int DocIdSetIterator Spans Spans boolean TwoPhaseIterator public public final final throws decl_stmt org.apache.lucene.search.spans.Spans = if == return decl_stmt org.apache.lucene.search.spans.Spans = if == return new decl_stmt org.apache.lucene.search.TwoPhaseIterator = call org.apache.lucene.search.spans.Spans.asTwoPhaseIterator() call org.apache.lucene.search.spans.Spans.asTwoPhaseIterator() call org.apache.lucene.search.spans.Spans.asTwoPhaseIterator() call org.apache.lucene.search.spans.Spans.asTwoPhaseIterator() call org.apache.lucene.search.spans.Spans.asTwoPhaseIterator() decl_stmt org.apache.lucene.search.DocIdSetIterator = == : call org.apache.lucene.search.TwoPhaseIterator.approximation() call org.apache.lucene.search.TwoPhaseIterator.approximation() call org.apache.lucene.search.TwoPhaseIterator.approximation() call org.apache.lucene.search.TwoPhaseIterator.approximation() call org.apache.lucene.search.TwoPhaseIterator.approximation() return new decl_stmt int = - decl_stmt boolean = protected protected throws decl_stmt int = if > call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() if != if call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) == = = call TwoPhaseIterator.matches() call TwoPhaseIterator.matches() call TwoPhaseIterator.matches() call TwoPhaseIterator.matches() call TwoPhaseIterator.matches() else call Spans.advance() call Spans.advance() call Spans.advance() call Spans.advance() call Spans.advance() else if != && == call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() && != = = call TwoPhaseIterator.matches() call TwoPhaseIterator.matches() call TwoPhaseIterator.matches() call TwoPhaseIterator.matches() call TwoPhaseIterator.matches() if != call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() || == && == return if call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() == - call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() while call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() <= - if call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() == return if + <= call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() return else return int protected protected throws decl_stmt int = if > if != if == = = else else if != && == && != = = if != || == && == return if == - while <= - if == return if + <= return else return public public < SpanQuery SpanQuery public public throws decl_stmt org.apache.lucene.search.spans.SpanQuery = call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() decl_stmt org.apache.lucene.search.spans.SpanQuery = call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() if != || != return new return SpanNotQuery public public if ! return decl_stmt org.apache.lucene.search.spans.SpanNotQuery = return && && == && == int public public decl_stmt int = = ^= call SpanQuery.hashCode() call SpanQuery.hashCode() call SpanQuery.hashCode() call SpanQuery.hashCode() call SpanQuery.hashCode() = ^= call SpanQuery.hashCode() call SpanQuery.hashCode() call SpanQuery.hashCode() call SpanQuery.hashCode() call SpanQuery.hashCode() = ^= = ^= return