org.apache.lucene.index java.io.IOException import java.nio.file.Files import java.nio.file.Path import java.nio.file.Paths import java.util.ArrayList import java.util.List import org.apache.lucene.index.IndexWriterConfig.OpenMode import org.apache.lucene.store.Directory import org.apache.lucene.store.FSDirectory import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.Bits import org.apache.lucene.util.SuppressForbidden import org.apache.lucene.util.Version import class annotation org.apache.lucene.index.MultiPassIndexSplitter int int int int int IndexWriter decl List FakeDeleteIndexReader public public throws if == || < throw new if == || < throw new decl_stmt int = decl_stmt FakeDeleteIndexReader = new decl_stmt int = call FakeDeleteIndexReader.maxDoc() call FakeDeleteIndexReader.maxDoc() call FakeDeleteIndexReader.maxDoc() call FakeDeleteIndexReader.maxDoc() call FakeDeleteIndexReader.maxDoc() decl_stmt int = / for = < ++ call FakeDeleteIndexReader.undeleteAll() call FakeDeleteIndexReader.undeleteAll() call FakeDeleteIndexReader.undeleteAll() call FakeDeleteIndexReader.undeleteAll() call FakeDeleteIndexReader.undeleteAll() if decl_stmt int = * decl_stmt int = + for = < ++ call FakeDeleteIndexReader.deleteDocument() call FakeDeleteIndexReader.deleteDocument() call FakeDeleteIndexReader.deleteDocument() call FakeDeleteIndexReader.deleteDocument() call FakeDeleteIndexReader.deleteDocument() if < - for = < ++ call FakeDeleteIndexReader.deleteDocument() call FakeDeleteIndexReader.deleteDocument() call FakeDeleteIndexReader.deleteDocument() call FakeDeleteIndexReader.deleteDocument() call FakeDeleteIndexReader.deleteDocument() else for = < ++ if + - != call FakeDeleteIndexReader.deleteDocument() call FakeDeleteIndexReader.deleteDocument() call FakeDeleteIndexReader.deleteDocument() call FakeDeleteIndexReader.deleteDocument() call FakeDeleteIndexReader.deleteDocument() decl_stmt org.apache.lucene.index.IndexWriter = new new + + + decl_stmt java.util.List final final final < extends extends = call FakeDeleteIndexReader.getSequentialSubReaders() call FakeDeleteIndexReader.getSequentialSubReaders() call FakeDeleteIndexReader.getSequentialSubReaders() call FakeDeleteIndexReader.getSequentialSubReaders() call FakeDeleteIndexReader.getSequentialSubReaders() call org.apache.lucene.index.IndexWriter.addIndexes(Directory) call org.apache.lucene.index.IndexWriter.addIndexes(Directory) call org.apache.lucene.index.IndexWriter.addIndexes(Directory) call org.apache.lucene.index.IndexWriter.addIndexes(Directory) call org.apache.lucene.index.IndexWriter.addIndexes(Directory) call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() decl Directory MultiPassIndexSplitter boolean int decl ArrayList Path IndexReader Path Directory String public static public static throws if < - decl_stmt java.util.ArrayList < = new <> decl_stmt java.lang.String = decl_stmt int = - decl_stmt boolean = for = < ++ if = ++ else if = ++ else if = else decl_stmt java.nio.file.Path = if ! + continue decl_stmt org.apache.lucene.store.Directory = try if ! + continue catch + continue call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() if == throw new if < throw new if call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() == throw new decl_stmt java.nio.file.Path = decl_stmt org.apache.lucene.store.Directory = new for = < ++ = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) + decl_stmt org.apache.lucene.index.MultiPassIndexSplitter = new decl_stmt org.apache.lucene.index.IndexReader if call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() == = call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() else = new call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call MultiPassIndexSplitter.split() call MultiPassIndexSplitter.split() call MultiPassIndexSplitter.split() call MultiPassIndexSplitter.split() call MultiPassIndexSplitter.split() int decl List decl FakeDeleteLeafIndexReader private static private static throws decl_stmt java.util.List final final final < = decl_stmt FakeDeleteLeafIndexReader final final final = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = for final final : ++ = new return int public public decl_stmt int final final = - public public for : protected protected public public return Bits int public public decl_stmt int final final = = new if decl_stmt org.apache.lucene.util.Bits final final = assert != for = < ++ if call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() else public public public public return