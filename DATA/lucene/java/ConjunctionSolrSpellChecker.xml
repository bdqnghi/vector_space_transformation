org.apache.solr.spelling java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.Iterator import java.util.LinkedHashMap import java.util.List import java.util.Map import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.Token import org.apache.lucene.search.spell.StringDistance import org.apache.solr.common.util.NamedList import org.apache.solr.core.SolrCore import org.apache.solr.handler.component.SpellCheckMergeData import org.apache.solr.search.SolrIndexSearcher import class org.apache.solr.spelling.ConjunctionSolrSpellChecker super super extends decl List StringDistance Analyzer boolean String Float public public if throw new try if == = else if ! call StringDistance.equals() call StringDistance.equals() call StringDistance.equals() call StringDistance.equals() call StringDistance.equals() throw new catch try if == = else if != throw new catch if == = else if != throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() String SolrSpellChecker public public for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.apache.solr.spelling.SolrSpellChecker = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.lang.String = call org.apache.solr.spelling.SolrSpellChecker.init(NamedList,SolrCore) call org.apache.solr.spelling.SolrSpellChecker.init(NamedList,SolrCore) call org.apache.solr.spelling.SolrSpellChecker.init(NamedList,SolrCore) call org.apache.solr.spelling.SolrSpellChecker.init(NamedList,SolrCore) call org.apache.solr.spelling.SolrSpellChecker.init(NamedList,SolrCore) if != && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) throw new + + + + = if == = = return public public throws for : decl SpellingResult public public throws decl_stmt org.apache.solr.spelling.SpellingResult = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return decl SpellingResult public public decl_stmt org.apache.solr.spelling.SpellingResult = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return decl List decl Map boolean decl Map int SpellingResult decl List decl Map Token Integer private private decl_stmt java.util.Map < = new <> decl_stmt java.util.Map < < < = new <> for : if != call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() for < < : decl_stmt java.util.List < < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt org.apache.solr.spelling.SpellingResult = new for < < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt org.apache.lucene.queryparser.surround.parser.Token = decl_stmt java.util.List < < < = new <> for < : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt int = while < decl_stmt boolean = for < < : if = decl_stmt java.util.Map < = call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call SpellingResult.addFrequency() call SpellingResult.addFrequency() call SpellingResult.addFrequency() call SpellingResult.addFrequency() call SpellingResult.addFrequency() == : if ++ == break if ! if == call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) > decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call SpellingResult.addFrequency() call SpellingResult.addFrequency() call SpellingResult.addFrequency() call SpellingResult.addFrequency() call SpellingResult.addFrequency() == : break return public public throws for : public public return public public return protected protected if == return return protected protected if == return return public public return