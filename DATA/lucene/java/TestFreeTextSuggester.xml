org.apache.lucene.search.suggest.analyzing java.io.IOException import java.io.InputStream import java.io.OutputStream import java.nio.file.Files import java.nio.file.Path import java.util.ArrayList import java.util.Collections import java.util.Comparator import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Locale import java.util.Map import java.util.Set import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.analysis.MockTokenizer import org.apache.lucene.analysis.Tokenizer import org.apache.lucene.analysis.core.StopFilter import org.apache.lucene.analysis.util.CharArraySet import org.apache.lucene.document.Document import org.apache.lucene.search.suggest.Lookup.LookupResult import org.apache.lucene.search.suggest.Input import org.apache.lucene.search.suggest.InputArrayIterator import org.apache.lucene.search.suggest.InputIterator import org.apache.lucene.util.BytesRef import org.apache.lucene.util.LineFileDocs import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import org.junit.Ignore import class org.apache.lucene.search.suggest.analyzing.TestFreeTextSuggester super super extends decl Comparator Analyzer FreeTextSuggester decl Iterable InputStream Path OutputStream Path public public throws decl_stmt java.lang.Iterable < = new new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.FreeTextSuggester = new byte call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) new call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.getCount() for = < ++ call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) decl_stmt java.nio.file.Path = decl_stmt java.nio.file.Path = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) decl_stmt java.io.OutputStream = call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.store(DataOutput) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.store(DataOutput) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.store(DataOutput) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.store(DataOutput) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.store(DataOutput) call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() decl_stmt java.io.InputStream = = new byte call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.load(DataInput) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.load(DataInput) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.load(DataInput) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.load(DataInput) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.load(DataInput) call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.getCount() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() decl Iterable FreeTextSuggester Analyzer public public throws decl_stmt java.lang.Iterable < = new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.FreeTextSuggester = new call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() decl Iterable FreeTextSuggester Analyzer public public throws decl_stmt java.lang.Iterable < = new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.FreeTextSuggester = new call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) new call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() FreeTextSuggester LineFileDocs Document decl List Analyzer int public public throws decl_stmt org.apache.lucene.util.LineFileDocs final final = new call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.FreeTextSuggester = new call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) new decl_stmt int private public public return public public decl_stmt org.apache.lucene.document.Document try = call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() catch throw new if == return if ++ == return return new call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) public public return public public return public < public < return public public return if call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.ramBytesUsed() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.ramBytesUsed() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.ramBytesUsed() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.ramBytesUsed() call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.ramBytesUsed() + decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) for : + call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() public public return Document public public decl_stmt org.apache.lucene.document.Document try = catch throw new if == return if ++ == return return new call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) public public return public public return public < public < return public public return decl Iterable Analyzer FreeTextSuggester public public throws decl_stmt java.lang.Iterable < = new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.FreeTextSuggester = new byte call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) new call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() decl Iterable Analyzer FreeTextSuggester public public throws decl_stmt java.lang.Iterable < = new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.FreeTextSuggester = new byte call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) new call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() decl Iterable Analyzer FreeTextSuggester public public throws decl_stmt java.lang.Iterable < = new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.FreeTextSuggester = new byte call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) new call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Analyzer decl Iterable FreeTextSuggester Tokenizer CharArraySet public public throws decl_stmt org.apache.lucene.analysis.Analyzer = new public public decl_stmt org.apache.lucene.analysis.Tokenizer = new decl_stmt org.apache.lucene.analysis.util.CharArraySet = return new new decl_stmt java.lang.Iterable < = new decl_stmt org.apache.lucene.search.suggest.analyzing.FreeTextSuggester = new byte call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) new call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer CharArraySet public public decl_stmt org.apache.lucene.analysis.Tokenizer = new decl_stmt org.apache.lucene.analysis.util.CharArraySet = return new new Analyzer decl Iterable FreeTextSuggester Tokenizer CharArraySet public public throws decl_stmt org.apache.lucene.analysis.Analyzer = new public public decl_stmt org.apache.lucene.analysis.Tokenizer = new decl_stmt org.apache.lucene.analysis.util.CharArraySet = return new new decl_stmt java.lang.Iterable < = new decl_stmt org.apache.lucene.search.suggest.analyzing.FreeTextSuggester = new byte call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) new call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer CharArraySet public public decl_stmt org.apache.lucene.analysis.Tokenizer = new decl_stmt org.apache.lucene.analysis.util.CharArraySet = return new new public public if > return - else if < return else return int double int decl Set String decl List FreeTextSuggester long LookupResult decl List decl List int Integer decl String decl String decl String String int String int long Analyzer int StringBuilder decl List int int String String decl Map Integer String public public throws decl_stmt java.lang.String = new decl_stmt java.util.Set < = new <> while call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() < decl_stmt java.lang.String = if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() = call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt int = decl_stmt long = decl_stmt java.lang.String final final final = new for = < ++ = new if + + for = < ++ = if + if += decl_stmt int = if + + + + + + decl_stmt org.apache.lucene.search.suggest.analyzing.FreeTextSuggester = new byte call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.build(InputIterator,double) new decl_stmt int public public if == return else decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) ++ return new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public return public public return public public return public < public < return public public return decl_stmt java.util.List < < = new <> for = < ++ if + decl_stmt java.util.Map < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : for = < - ++ decl_stmt java.lang.StringBuilder = new for = <= + ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + if + + + call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt int = for = < ++ decl_stmt java.lang.String = new for = < ++ = decl_stmt int if == = else = decl_stmt int = - - = - decl_stmt int = decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if + + + + + decl_stmt java.util.List < = new <> decl_stmt double = = new <> if for = - >= -- if + if < + if continue if == && - == if continue = new for = - - < - ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if + + decl_stmt long if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == = else decl_stmt java.lang.Integer = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() - if == *= if continue = if + decl_stmt java.util.Map < = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if + - decl_stmt java.util.List < = new <> for : if - if + if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() if continue decl_stmt java.lang.String = + + decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != decl_stmt LookupResult = new * * double / call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if + + + if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : decl_stmt java.lang.String = decl_stmt int = call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) decl_stmt java.lang.String if != - = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + else = if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if + + + *= if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) call org.apache.lucene.search.suggest.analyzing.FreeTextSuggester.lookup(CharSequence,int) if + + call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() StringBuilder public public if == return else decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) ++ return new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public return public public return public public return public < public < return public public return private static private static for = < ++ if || == - return assert return StringBuilder private static private static < decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) double / return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()