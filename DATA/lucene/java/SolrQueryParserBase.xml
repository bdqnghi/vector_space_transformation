org.apache.solr.parser java.io.StringReader import java.util.EnumSet import java.util.HashMap import java.util.List import java.util.Map import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.util.TokenFilterFactory import org.apache.lucene.index.Term import org.apache.lucene.search.AutomatonQuery import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.BoostQuery import org.apache.lucene.search.ConstantScoreQuery import org.apache.lucene.search.FuzzyQuery import org.apache.lucene.search.MatchAllDocsQuery import org.apache.lucene.search.MultiPhraseQuery import org.apache.lucene.search.MultiTermQuery import org.apache.lucene.search.PhraseQuery import org.apache.lucene.search.Query import org.apache.lucene.search.RegexpQuery import org.apache.lucene.search.WildcardQuery import org.apache.lucene.util.QueryBuilder import org.apache.lucene.util.ToStringUtils import org.apache.lucene.util.Version import org.apache.lucene.util.automaton.Automata import org.apache.lucene.util.automaton.Automaton import org.apache.lucene.util.automaton.Operations import org.apache.solr.analysis.ReversedWildcardFilterFactory import org.apache.solr.analysis.TokenizerChain import org.apache.solr.common.SolrException import org.apache.solr.parser.QueryParser.Operator import org.apache.solr.query.FilterQuery import org.apache.solr.schema.FieldType import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.SchemaField import org.apache.solr.schema.TextField import org.apache.solr.search.QParser import org.apache.solr.search.SolrConstantScoreQuery import org.apache.solr.search.SyntaxError import class org.apache.solr.parser.SolrQueryParserBase super super extends int int int QParser float int Operator IndexSchema decl MultiTermQuery String String int int decl RewriteMethod Operator Operator boolean decl Map boolean int int public public return public static public static final final return public public = call IndexSchema.getReq() call IndexSchema.getReq() call IndexSchema.getReq() call IndexSchema.getReq() call IndexSchema.getReq() = = call boolean.getQueryAnalyzer() call boolean.getQueryAnalyzer() call boolean.getQueryAnalyzer() call boolean.getQueryAnalyzer() call boolean.getQueryAnalyzer() Query public public throws new new try decl_stmt org.apache.lucene.search.Query = return != : catch throw new + + + catch throw new + + public public return public public = return != : public public return public final public final return public final public final = public public return public public = public public return public public = public public = public public return public public = public public return public public = public public return public public = public public return BooleanClause boolean BooleanClause protected protected < decl_stmt boolean if > && == decl_stmt org.apache.lucene.search.BooleanClause = - if ! call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() - new call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() if > && == && == decl_stmt org.apache.lucene.search.BooleanClause = - if ! call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() call org.apache.lucene.search.BooleanClause.isProhibited() - new call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() call org.apache.lucene.search.BooleanClause.getQuery() if == return if == = == = == if == && ! = else = == = ! && != if && ! else if ! && ! else if ! && else throw new decl BooleanClause protected protected throws decl_stmt Occur = == : return || PhraseQuery decl Term decl int decl PhraseQuery decl Builder Query protected protected throws decl_stmt org.apache.lucene.search.Query = if == if instanceof decl_stmt org.apache.lucene.search.PhraseQuery = decl_stmt org.apache.lucene.index.Term = call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() decl_stmt int = call org.apache.lucene.search.PhraseQuery.getPositions() call org.apache.lucene.search.PhraseQuery.getPositions() call org.apache.lucene.search.PhraseQuery.getPositions() call org.apache.lucene.search.PhraseQuery.getPositions() call org.apache.lucene.search.PhraseQuery.getPositions() decl_stmt org.apache.lucene.util.fst.Builder = new for = < ++ call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() = call decl PhraseQuery.build() call decl PhraseQuery.build() call decl PhraseQuery.build() call decl PhraseQuery.build() call decl PhraseQuery.build() else if instanceof decl_stmt org.apache.lucene.search.MultiPhraseQuery = if != call decl Builder.getSlop() call decl Builder.getSlop() call decl Builder.getSlop() call decl Builder.getSlop() call decl Builder.getSlop() = new return protected protected return new SchemaField protected protected decl_stmt org.apache.solr.schema.SchemaField = call boolean.getField() call boolean.getField() call boolean.getField() call boolean.getField() call boolean.getField() return call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() RegexpQuery SchemaField protected protected decl_stmt org.apache.lucene.search.RegexpQuery = new decl_stmt org.apache.solr.schema.SchemaField = call boolean.getField() call boolean.getField() call boolean.getField() call boolean.getField() call boolean.getField() call RegexpQuery.setRewriteMethod() call RegexpQuery.setRewriteMethod() call RegexpQuery.setRewriteMethod() call RegexpQuery.setRewriteMethod() call RegexpQuery.setRewriteMethod() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() return String int protected protected decl_stmt java.lang.String = decl_stmt int = call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() return new protected protected return new WildcardQuery SchemaField protected protected decl_stmt org.apache.lucene.search.WildcardQuery = new decl_stmt org.apache.solr.schema.SchemaField = call boolean.getField() call boolean.getField() call boolean.getField() call boolean.getField() call boolean.getField() call WildcardQuery.setRewriteMethod() call WildcardQuery.setRewriteMethod() call WildcardQuery.setRewriteMethod() call WildcardQuery.setRewriteMethod() call WildcardQuery.setRewriteMethod() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() return decl BooleanQuery protected protected < throws if == return decl_stmt org.apache.lucene.util.fst.Builder = for final final : call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() return call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() Query String float throws decl_stmt org.apache.lucene.search.Query if = else if = - else if = - else if decl_stmt float = try = catch if < throw new else if >= && != int throw new decl_stmt java.lang.String = = else decl_stmt java.lang.String = = return int throws decl_stmt int = if != try = catch return - Query float float if == || == || == return if == decl_stmt float = decl_stmt org.apache.lucene.search.Query = if instanceof || instanceof else = new return new decl_stmt float = return new int char boolean int int decl char throws decl_stmt char = new decl_stmt int = decl_stmt boolean = decl_stmt int = decl_stmt int = for = < ++ decl_stmt char = if > += * >>>= if == ++ = char = else if if == = * * else = ++ = else if == = else = ++ if > throw new if throw new return new static final static final throws if <= && <= return - else if <= && <= return - + else if <= && <= return - + else throw new + StringBuilder char public static public static decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt char = if == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() Analyzer ReversedWildcardFilterFactory decl TokenFilterFactory TokenizerChain protected protected if == = new <> decl_stmt org.apache.solr.analysis.ReversedWildcardFilterFactory = call QParser.get() call QParser.get() call QParser.get() call QParser.get() call QParser.get() if != || call QParser.containsKey() call QParser.containsKey() call QParser.containsKey() call QParser.containsKey() call QParser.containsKey() return decl_stmt org.apache.lucene.analysis.Analyzer = if instanceof decl_stmt org.apache.solr.analysis.TokenizerChain = decl_stmt org.apache.lucene.analysis.util.TokenFilterFactory = call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() for : if instanceof = break call QParser.put() call QParser.put() call QParser.put() call QParser.put() call QParser.put() return private private throws if == && == throw new SchemaField String protected protected if == || ! instanceof || == return decl_stmt org.apache.solr.schema.SchemaField = call boolean.getFieldOrNull() call boolean.getFieldOrNull() call boolean.getFieldOrNull() call boolean.getFieldOrNull() call boolean.getFieldOrNull() if == || ! instanceof return decl_stmt java.lang.String = return FieldType MagicFieldName SchemaField protected protected throws if == && != decl_stmt MagicFieldName = if != = call IndexSchema.subQuery() call IndexSchema.subQuery() call IndexSchema.subQuery() call IndexSchema.subQuery() call IndexSchema.subQuery() return call String.getQuery() call String.getQuery() call String.getQuery() call String.getQuery() call String.getQuery() decl_stmt org.apache.solr.schema.SchemaField = call boolean.getFieldOrNull() call boolean.getFieldOrNull() call boolean.getFieldOrNull() call boolean.getFieldOrNull() call boolean.getFieldOrNull() if != decl_stmt org.apache.solr.schema.FieldType = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() if call org.apache.solr.schema.FieldType.isTokenized() call org.apache.solr.schema.FieldType.isTokenized() call org.apache.solr.schema.FieldType.isTokenized() call org.apache.solr.schema.FieldType.isTokenized() call org.apache.solr.schema.FieldType.isTokenized() && call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() return || instanceof && else return call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() return SchemaField protected protected throws decl_stmt org.apache.solr.schema.SchemaField = call boolean.getField() call boolean.getField() call boolean.getField() call boolean.getField() call boolean.getField() return call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() protected protected throws = call boolean.getFieldType() call boolean.getFieldType() call boolean.getFieldType() call boolean.getFieldType() call boolean.getFieldType() return new Term StringBuilder ReversedWildcardFilterFactory FieldType Automaton Automaton protected protected throws if if || == return decl_stmt org.apache.solr.schema.FieldType = call boolean.getFieldType() call boolean.getFieldType() call boolean.getFieldType() call boolean.getFieldType() call boolean.getFieldType() = decl_stmt org.apache.solr.analysis.ReversedWildcardFilterFactory = if != decl_stmt org.apache.lucene.index.Term = new decl_stmt org.apache.lucene.util.automaton.Automaton = if call ReversedWildcardFilterFactory.shouldReverse() call ReversedWildcardFilterFactory.shouldReverse() call ReversedWildcardFilterFactory.shouldReverse() call ReversedWildcardFilterFactory.shouldReverse() call ReversedWildcardFilterFactory.shouldReverse() = call org.apache.solr.analysis.ReversedWildcardFilterFactory.getMarkerChar() call org.apache.solr.analysis.ReversedWildcardFilterFactory.getMarkerChar() call org.apache.solr.analysis.ReversedWildcardFilterFactory.getMarkerChar() call org.apache.solr.analysis.ReversedWildcardFilterFactory.getMarkerChar() call org.apache.solr.analysis.ReversedWildcardFilterFactory.getMarkerChar() = else decl_stmt org.apache.lucene.util.automaton.Automaton = call org.apache.solr.analysis.ReversedWildcardFilterFactory.getMarkerChar() call org.apache.solr.analysis.ReversedWildcardFilterFactory.getMarkerChar() call org.apache.solr.analysis.ReversedWildcardFilterFactory.getMarkerChar() call org.apache.solr.analysis.ReversedWildcardFilterFactory.getMarkerChar() call org.apache.solr.analysis.ReversedWildcardFilterFactory.getMarkerChar() = return new public public decl_stmt java.lang.StringBuilder = new if ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.lucene.index.Term.text() call org.apache.lucene.index.Term.text() call org.apache.lucene.index.Term.text() call org.apache.lucene.index.Term.text() call org.apache.lucene.index.Term.text() return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return new StringBuilder public public decl_stmt java.lang.StringBuilder = new if ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() protected protected throws = call boolean.getFieldType() call boolean.getFieldType() call boolean.getFieldType() call boolean.getFieldType() call boolean.getFieldType() return new Term protected protected throws = call boolean.getFieldType() call boolean.getFieldType() call boolean.getFieldType() call boolean.getFieldType() call boolean.getFieldType() decl_stmt org.apache.lucene.index.Term = new return QParser protected protected throws decl_stmt org.apache.solr.search.QParser = call IndexSchema.subQuery() call IndexSchema.subQuery() call IndexSchema.subQuery() call IndexSchema.subQuery() call IndexSchema.subQuery() return call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() return new