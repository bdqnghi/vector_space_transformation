org.apache.lucene.search.suggest.analyzing java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.HashSet import java.util.List import java.util.Set import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.TokenStreamToAutomaton import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.search.suggest.InputIterator import org.apache.lucene.search.suggest.Lookup import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.ByteArrayDataOutput import org.apache.lucene.store.DataInput import org.apache.lucene.store.DataOutput import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.IOUtils import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.OfflineSorter import org.apache.lucene.util.automaton.Automaton import org.apache.lucene.util.automaton.LimitedFiniteStringsIterator import org.apache.lucene.util.automaton.Operations import org.apache.lucene.util.automaton.Transition import org.apache.lucene.util.fst.Builder import org.apache.lucene.util.fst.ByteSequenceOutputs import org.apache.lucene.util.fst.FST.BytesReader import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.PairOutputs.Pair import org.apache.lucene.util.fst.PairOutputs import org.apache.lucene.util.fst.PositiveIntOutputs import org.apache.lucene.util.fst.Util.Result import org.apache.lucene.util.fst.Util.TopResults import org.apache.lucene.util.fst.Util import static static org.apache.lucene.util.automaton.Operations.DEFAULT_MAX_DETERMINIZED_STATES import class org.apache.lucene.search.suggest.analyzing.AnalyzingSuggester super super extends super implements long boolean int String int boolean int Analyzer int int boolean int decl FST int boolean Directory int Analyzer decl Comparator public public return == : call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() public < public < if == return else return int int Transition decl int decl Builder decl Automaton private private decl_stmt int = decl_stmt org.apache.lucene.util.fst.Builder = new call decl Automaton.copyStates() call decl Automaton.copyStates() call decl Automaton.copyStates() call decl Automaton.copyStates() call decl Automaton.copyStates() decl_stmt org.apache.lucene.util.automaton.Transition = new decl_stmt int = for = < ++ decl_stmt int = - - decl_stmt int = for = < ++ if == assert == if call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() else call decl Automaton.addEpsilon() call decl Automaton.addEpsilon() call decl Automaton.addEpsilon() call decl Automaton.addEpsilon() call decl Automaton.addEpsilon() else if == assert == call decl Automaton.addEpsilon() call decl Automaton.addEpsilon() call decl Automaton.addEpsilon() call decl Automaton.addEpsilon() call decl Automaton.addEpsilon() else call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() return call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() protected protected return TokenStreamToAutomaton decl_stmt org.apache.lucene.analysis.TokenStreamToAutomaton final final = new call org.apache.lucene.analysis.TokenStreamToAutomaton.setPreservePositionIncrements(boolean) call org.apache.lucene.analysis.TokenStreamToAutomaton.setPreservePositionIncrements(boolean) call org.apache.lucene.analysis.TokenStreamToAutomaton.setPreservePositionIncrements(boolean) call org.apache.lucene.analysis.TokenStreamToAutomaton.setPreservePositionIncrements(boolean) call org.apache.lucene.analysis.TokenStreamToAutomaton.setPreservePositionIncrements(boolean) return long long int public public = = = = = = decl_stmt int = if != return decl_stmt long = decl_stmt long = assert >= assert >= if < return - else if > return if = = = = else = = = - = - return IndexOutput decl OfflineSorter BytesRefBuilder decl ByteSequencesReader BytesRef short decl OfflineSorter ByteArrayDataInput short TokenStreamToAutomaton decl PairOutputs BytesRef long int int decl ByteSequencesWriter OfflineSorter LimitedFiniteStringsIterator int IntsRefBuilder decl Builder BytesRefBuilder BytesRefBuilder BytesRef decl Set String byte public public throws if throw new = decl_stmt org.apache.lucene.util.OfflineSorter = new new decl_stmt org.apache.lucene.store.IndexOutput = call Directory.createTempOutput() call Directory.createTempOutput() call Directory.createTempOutput() call Directory.createTempOutput() call Directory.createTempOutput() decl_stmt ByteSequencesWriter = new decl_stmt ByteSequencesReader = decl_stmt org.apache.lucene.util.BytesRefBuilder = new decl_stmt org.apache.lucene.analysis.TokenStreamToAutomaton = decl_stmt java.lang.String = = decl_stmt byte = new try decl_stmt org.apache.lucene.store.ByteArrayDataOutput = new for = != decl_stmt org.apache.lucene.util.automaton.LimitedFiniteStringsIterator = new for = call byte.next() call byte.next() call byte.next() call byte.next() call byte.next() != ++ if call decl OfflineSorter.length() call decl OfflineSorter.length() call decl OfflineSorter.length() call decl OfflineSorter.length() call decl OfflineSorter.length() > - throw new + - + + call decl OfflineSorter.length() call decl OfflineSorter.length() call decl OfflineSorter.length() call decl OfflineSorter.length() call decl OfflineSorter.length() + decl_stmt short = short call decl OfflineSorter.length() call decl OfflineSorter.length() call decl OfflineSorter.length() call decl OfflineSorter.length() call decl OfflineSorter.length() decl_stmt int = + + + decl_stmt org.apache.lucene.util.BytesRef if if > - throw new + - + + + = += + else = = call String.reset() call String.reset() call String.reset() call String.reset() call String.reset() call String.writeShort() call String.writeShort() call String.writeShort() call String.writeShort() call String.writeShort() call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() call decl OfflineSorter.bytes() call decl OfflineSorter.bytes() call decl OfflineSorter.bytes() call decl OfflineSorter.bytes() call decl OfflineSorter.bytes() call decl OfflineSorter.length() call decl OfflineSorter.length() call decl OfflineSorter.length() call decl OfflineSorter.length() call decl OfflineSorter.length() call String.writeInt() call String.writeInt() call String.writeInt() call String.writeInt() call String.writeInt() if for = < ++ if == throw new call String.writeShort() call String.writeShort() call String.writeShort() call String.writeShort() call String.writeShort() short call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() else call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() assert call String.getPosition() call String.getPosition() call String.getPosition() call String.getPosition() call String.getPosition() == : call String.getPosition() call String.getPosition() call String.getPosition() call String.getPosition() call String.getPosition() + + call decl OfflineSorter.write() call decl OfflineSorter.write() call decl OfflineSorter.write() call decl OfflineSorter.write() call decl OfflineSorter.write() call String.getPosition() call String.getPosition() call String.getPosition() call String.getPosition() call String.getPosition() = call byte.size() call byte.size() call byte.size() call byte.size() call byte.size() call decl OfflineSorter.close() call decl OfflineSorter.close() call decl OfflineSorter.close() call decl OfflineSorter.close() call decl OfflineSorter.close() = call org.apache.lucene.util.OfflineSorter.sort(String) call org.apache.lucene.util.OfflineSorter.sort(String) call org.apache.lucene.util.OfflineSorter.sort(String) call org.apache.lucene.util.OfflineSorter.sort(String) call org.apache.lucene.util.OfflineSorter.sort(String) call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() = new call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) call org.apache.lucene.store.Directory.openChecksumInput(String,IOContext) decl_stmt org.apache.lucene.util.fst.PairOutputs < = new <> decl_stmt org.apache.lucene.util.fst.Builder < < = new <> decl_stmt org.apache.lucene.util.BytesRefBuilder = decl_stmt org.apache.lucene.util.BytesRefBuilder = new decl_stmt org.apache.lucene.util.BytesRef = new decl_stmt org.apache.lucene.util.IntsRefBuilder = new decl_stmt org.apache.lucene.store.ByteArrayDataInput = new decl_stmt java.util.Set < = new <> decl_stmt int = while decl_stmt org.apache.lucene.util.BytesRef = call decl ByteSequencesWriter.next() call decl ByteSequencesWriter.next() call decl ByteSequencesWriter.next() call decl ByteSequencesWriter.next() call decl ByteSequencesWriter.next() if == break call BytesRef.reset() call BytesRef.reset() call BytesRef.reset() call BytesRef.reset() call BytesRef.reset() decl_stmt short = call BytesRef.readShort() call BytesRef.readShort() call BytesRef.readShort() call BytesRef.readShort() call BytesRef.readShort() call decl Builder.grow() call decl Builder.grow() call decl Builder.grow() call decl Builder.grow() call decl Builder.grow() + call BytesRef.readBytes() call BytesRef.readBytes() call BytesRef.readBytes() call BytesRef.readBytes() call BytesRef.readBytes() call decl Builder.bytes() call decl Builder.bytes() call decl Builder.bytes() call decl Builder.bytes() call decl Builder.bytes() call decl Builder.setLength() call decl Builder.setLength() call decl Builder.setLength() call decl Builder.setLength() call decl Builder.setLength() decl_stmt long = call BytesRef.readInt() call BytesRef.readInt() call BytesRef.readInt() call BytesRef.readInt() call BytesRef.readInt() = if = call BytesRef.readShort() call BytesRef.readShort() call BytesRef.readShort() call BytesRef.readShort() call BytesRef.readShort() = call BytesRef.getPosition() call BytesRef.getPosition() call BytesRef.getPosition() call BytesRef.getPosition() call BytesRef.getPosition() else = call BytesRef.getPosition() call BytesRef.getPosition() call BytesRef.getPosition() call BytesRef.getPosition() call BytesRef.getPosition() = - if == = new call decl PairOutputs.copyBytes() call decl PairOutputs.copyBytes() call decl PairOutputs.copyBytes() call decl PairOutputs.copyBytes() call decl PairOutputs.copyBytes() call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() call IntsRefBuilder.add() call IntsRefBuilder.add() call IntsRefBuilder.add() call IntsRefBuilder.add() call IntsRefBuilder.add() else if call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl PairOutputs.get() call decl PairOutputs.get() call decl PairOutputs.get() call decl PairOutputs.get() call decl PairOutputs.get() ++ if >= continue if call IntsRefBuilder.contains() call IntsRefBuilder.contains() call IntsRefBuilder.contains() call IntsRefBuilder.contains() call IntsRefBuilder.contains() continue call IntsRefBuilder.add() call IntsRefBuilder.add() call IntsRefBuilder.add() call IntsRefBuilder.add() call IntsRefBuilder.add() else = call decl PairOutputs.copyBytes() call decl PairOutputs.copyBytes() call decl PairOutputs.copyBytes() call decl PairOutputs.copyBytes() call decl PairOutputs.copyBytes() call org.apache.lucene.util.IntsRefBuilder.clear() call org.apache.lucene.util.IntsRefBuilder.clear() call org.apache.lucene.util.IntsRefBuilder.clear() call org.apache.lucene.util.IntsRefBuilder.clear() call org.apache.lucene.util.IntsRefBuilder.clear() call IntsRefBuilder.add() call IntsRefBuilder.add() call IntsRefBuilder.add() call IntsRefBuilder.add() call IntsRefBuilder.add() call decl Builder.append() call decl Builder.append() call decl Builder.append() call decl Builder.append() call decl Builder.append() byte call decl Builder.append() call decl Builder.append() call decl Builder.append() call decl Builder.append() call decl Builder.append() byte call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() if ! call BytesRef.add() call BytesRef.add() call BytesRef.add() call BytesRef.add() call BytesRef.add() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call int.newPair() call int.newPair() call int.newPair() call int.newPair() call int.newPair() else decl_stmt int = call BytesRef.getPosition() call BytesRef.getPosition() call BytesRef.getPosition() call BytesRef.getPosition() call BytesRef.getPosition() + decl_stmt int = - decl_stmt org.apache.lucene.util.BytesRef = new + + = + = call BytesRef.add() call BytesRef.add() call BytesRef.add() call BytesRef.add() call BytesRef.add() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call int.newPair() call int.newPair() call int.newPair() call int.newPair() call int.newPair() = call BytesRef.finish() call BytesRef.finish() call BytesRef.finish() call BytesRef.finish() call BytesRef.finish() finally call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() public public throws if == return call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() : return public public throws = = new <> new <> = = == return int BytesRef LookupResult int private private decl_stmt LookupResult if decl_stmt int = - for = < ++ if + == = break assert != - decl_stmt int final final = - - decl_stmt org.apache.lucene.util.BytesRef = new + = = new else = new return private private if if >= return for = < ++ if + != + return return + == else return int decl Util Automaton decl TopResults BytesRef decl List decl FST decl List CharsRefBuilder LookupResult BytesReader decl Set BytesRef public < public < final final < assert > if throw new if != throw new if == return for = < ++ if == throw new if == throw new decl_stmt org.apache.lucene.util.BytesRef final final = new try decl_stmt org.apache.lucene.util.automaton.Automaton = decl_stmt org.apache.lucene.util.CharsRefBuilder final final = new decl_stmt BytesReader = call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getBytesReader() call decl FST.getBytesReader() decl_stmt org.apache.lucene.util.fst.FST < < = new <> decl_stmt java.util.List final final final < = new <> decl_stmt java.util.List < < < = if decl_stmt int = for < < : if call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() != ++ decl_stmt org.apache.lucene.util.fst.Util < < = new <> * * for < < : if call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() != call decl Util.addStartPaths() call decl Util.addStartPaths() call decl Util.addStartPaths() call decl Util.addStartPaths() call decl Util.addStartPaths() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() decl_stmt TopResults < < = call decl Util.search() call decl Util.search() call decl Util.search() call decl Util.search() call decl Util.search() assert for < < : decl_stmt org.apache.lucene.util.BytesRef = if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() break if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return decl_stmt org.apache.lucene.util.fst.Util < < = new < < - call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() * decl_stmt java.util.Set private final final final < = new <> protected protected < if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if ! return else if assert call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return else return = for < < : call decl Util.addStartPaths() call decl Util.addStartPaths() call decl Util.addStartPaths() call decl Util.addStartPaths() call decl Util.addStartPaths() decl_stmt TopResults < < = call decl Util.search() call decl Util.search() call decl Util.search() call decl Util.search() call decl Util.search() assert for < < : decl_stmt LookupResult = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == break return catch throw new protected protected < if return if ! return else if assert == return else return public public return protected < < < protected < < < < < < < < throws return Automaton final final final final final final throws decl_stmt org.apache.lucene.util.automaton.Automaton try = call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) = = = return Automaton final final final final throws decl_stmt org.apache.lucene.util.automaton.Automaton = try = call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) = = = return public public throw new private static private static return - private static private static if < || || throw new + return - int public public < < return