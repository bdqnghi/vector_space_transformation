org.apache.lucene.spatial.prefix.tree java.util.ArrayList import java.util.Collection import java.util.List import java.util.NoSuchElementException import org.locationtech.spatial4j.context.SpatialContext import org.locationtech.spatial4j.shape.Point import org.locationtech.spatial4j.shape.Rectangle import org.locationtech.spatial4j.shape.Shape import org.locationtech.spatial4j.shape.SpatialRelation import org.locationtech.spatial4j.shape.impl.RectangleImpl import org.apache.lucene.util.BytesRef import class org.apache.lucene.spatial.prefix.tree.PackedQuadPrefixTree super super extends decl byte int boolean protected protected return new != : public public return + + + + + + + public public return new decl List public public decl_stmt java.util.List < = new <> return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() double double protected protected < decl_stmt double = / decl_stmt double = / - + + + - - + - double double SpatialRelation protected protected < if instanceof && ! return decl_stmt double = / decl_stmt double = / decl_stmt SpatialRelation = - + - + if == return |= << - ++ << = >>> + << if == || >= new call SpatialRelation.transpose() call SpatialRelation.transpose() call SpatialRelation.transpose() call SpatialRelation.transpose() call SpatialRelation.transpose() else PackedQuadCell public public decl_stmt PackedQuadCell = if == = call PackedQuadCell.readCell() call PackedQuadCell.readCell() call PackedQuadCell.readCell() call PackedQuadCell.readCell() call PackedQuadCell.readCell() return public public if > throw new + + + return new short public public return public public = protected protected = = = = = short = private final private final final final return - << public public final final final final return != && << << - - >>> == int long boolean int public public decl_stmt int final final = decl_stmt int final final = if ! && || return decl_stmt long decl_stmt boolean final final = & == if && ! && != || == = >>> + << else = + << if >>> & == = >>> - >>> >>> << return new protected protected = & == if == = public public if |= return public public if == return new = = = return long PackedQuadCell int long public public decl_stmt PackedQuadCell = decl_stmt long final final = & == - : decl_stmt long final final = & == - : decl_stmt int final final = assert == return int public public decl_stmt int = >>> & return decl List PackedQuadCell protected < protected < decl_stmt java.util.List < = new <> decl_stmt PackedQuadCell = new & == - : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = call PackedQuadCell.nextCell() call PackedQuadCell.nextCell() call PackedQuadCell.nextCell() call PackedQuadCell.nextCell() call PackedQuadCell.nextCell() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = call PackedQuadCell.nextCell() call PackedQuadCell.nextCell() call PackedQuadCell.nextCell() call PackedQuadCell.nextCell() call PackedQuadCell.nextCell() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call PackedQuadCell.nextCell() call PackedQuadCell.nextCell() call PackedQuadCell.nextCell() call PackedQuadCell.nextCell() call PackedQuadCell.nextCell() return protected protected return + PackedQuadCell public public decl_stmt PackedQuadCell = return == || int protected protected decl_stmt int final final = - << return >>> - >>> == protected protected return | << - << + double double double byte int protected protected decl_stmt double = decl_stmt double = decl_stmt int = decl_stmt byte for = = < ++ , ++ = >>> - << & switch case += break case += += break case break case += break default: throw new decl_stmt double if > = - = - else = = return new + + private private return long & << | long & << | long & << | long & << | long & << | long & << | long & << | long & decl byte private private decl_stmt byte = new for = >= -- = & >>= return private private assert >= return + + + + + + + + StringBuilder int public public decl_stmt java.lang.StringBuilder = new decl_stmt int final final = for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() SpatialRelation public public if != return decl_stmt SpatialRelation while != = if == = else = if == = else = if == || if instanceof = else = break = break return != int private private decl_stmt int if == && && == - for = , = , ++ return == return Cell public public if == if ! throw new decl_stmt org.apache.lucene.spatial.prefix.tree.Cell = = return public public