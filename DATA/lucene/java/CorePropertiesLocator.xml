org.apache.solr.core java.io.IOException import java.io.InputStream import java.io.InputStreamReader import java.io.OutputStreamWriter import java.io.Writer import java.lang.invoke.MethodHandles import java.nio.charset.StandardCharsets import java.nio.file.FileVisitOption import java.nio.file.FileVisitResult import java.nio.file.Files import java.nio.file.Path import java.nio.file.SimpleFileVisitor import java.nio.file.attribute.BasicFileAttributes import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Properties import java.util.Set import com.google.common.collect.Lists import org.apache.solr.common.SolrException import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.core.CorePropertiesLocator super super implements String Path Logger Path public public for : decl_stmt java.nio.file.Path = if throw new + + Path public public for : decl_stmt java.nio.file.Path = Properties private private decl_stmt java.util.Properties = try try = new call java.util.Properties.store(Writer,String) call java.util.Properties.store(Writer,String) call java.util.Properties.store(Writer,String) call java.util.Properties.store(Writer,String) call java.util.Properties.store(Writer,String) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() Path public public if == return for : if == continue decl_stmt java.nio.file.Path = try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() public public public public int CoreDescriptor decl Set decl List public < public < final final call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.util.List final final final < = try decl_stmt java.util.Set < = new <> call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt int final final = new < public public throws if decl_stmt org.apache.solr.core.CoreDescriptor = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return return public public throws if call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return catch throw new + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() return CoreDescriptor public public throws if decl_stmt org.apache.solr.core.CoreDescriptor = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getName() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() return return public public throws if call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return decl Map Properties Path String protected protected decl_stmt java.nio.file.Path = decl_stmt java.util.Properties = new try = call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) new decl_stmt java.lang.String = decl_stmt java.util.Map < = new <> for : call java.util.Properties.stringPropertyNames() call java.util.Properties.stringPropertyNames() call java.util.Properties.stringPropertyNames() call java.util.Properties.stringPropertyNames() call java.util.Properties.stringPropertyNames() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) return new catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return protected static protected static return Properties protected protected decl_stmt java.util.Properties = new call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() return