org.apache.solr.handler.component java.io.IOException import java.util.ArrayList import java.util.Comparator import java.util.List import org.apache.lucene.search.FieldComparator import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.SortField import org.apache.lucene.util.PriorityQueue import org.apache.solr.common.SolrException import static static org.apache.solr.common.SolrException.ErrorCode.SERVER_ERROR import class org.apache.solr.handler.component.ShardFieldSortedHitQueue super super extends decl List decl SortField int int protected protected if == return ! < decl_stmt int final final = decl_stmt int = for = < && == ++ = : if == = - return < decl Type float decl SortField < < decl_stmt sun.tools.java.Type = if == return decl_stmt float final final = decl_stmt float final final = if < return - if > return return else if == try = catch throw new + return List assert decl_stmt java.util.List = return call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) FieldComparator < < decl_stmt org.apache.lucene.search.FieldComparator final final try = catch throw new + return new public public final final final final return - call org.apache.lucene.search.FieldComparator.compareValues(Float,Float) call org.apache.lucene.search.FieldComparator.compareValues(Float,Float) call org.apache.lucene.search.FieldComparator.compareValues(Float,Float) call org.apache.lucene.search.FieldComparator.compareValues(Float,Float) call org.apache.lucene.search.FieldComparator.compareValues(Float,Float) public public final final final final return -