org.apache.solr.request java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Comparator import java.util.Date import java.util.Iterator import java.util.List import java.util.Locale import org.apache.lucene.document.FieldType.LegacyNumericType import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.DocValues import org.apache.lucene.index.NumericDocValues import org.apache.lucene.index.SortedDocValues import org.apache.lucene.index.SortedSetDocValues import org.apache.lucene.search.DocIdSet import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.NumericUtils import org.apache.solr.common.SolrException import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.SolrParams import org.apache.solr.request.IntervalFacets.FacetInterval import org.apache.solr.schema.FieldType import org.apache.solr.schema.SchemaField import org.apache.solr.schema.TrieDateField import org.apache.solr.search.DocIterator import org.apache.solr.search.DocSet import org.apache.solr.search.Filter import org.apache.solr.search.QueryParsing import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.search.SyntaxError import class org.apache.solr.request.IntervalFacets super super implements SolrIndexSearcher decl FacetInterval SchemaField DocSet decl FacetInterval int private private throws decl_stmt FacetInterval = new decl_stmt int = for : ++ = new new < public public assert != assert != return private private if == if == return return - if == return return return public public assert != assert != return private private if == if == return return - if == return return private private throws if call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() != && ! call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() else FieldType Bits NumericDocValues int LegacyNumericType LeafReaderContext decl Iterator String long NumericDocValues long decl List NumericDocValues private private throws decl_stmt org.apache.solr.schema.FieldType final final = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() decl_stmt java.lang.String final final = call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() decl_stmt LegacyNumericType final final = call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() if == throw new decl_stmt java.util.List final final final < = call org.apache.solr.search.SolrIndexSearcher.getIndexReader() call org.apache.solr.search.SolrIndexSearcher.getIndexReader() call org.apache.solr.search.SolrIndexSearcher.getIndexReader() call org.apache.solr.search.SolrIndexSearcher.getIndexReader() call org.apache.solr.search.SolrIndexSearcher.getIndexReader() decl_stmt java.util.Iterator final final final < = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() decl_stmt org.apache.lucene.index.LeafReaderContext = decl_stmt NumericDocValues = decl_stmt org.apache.lucene.util.Bits = for = call org.apache.solr.search.DocSet.iterator() call org.apache.solr.search.DocSet.iterator() call org.apache.solr.search.DocSet.iterator() call org.apache.solr.search.DocSet.iterator() call org.apache.solr.search.DocSet.iterator() decl_stmt int final final = if == || >= + call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() do = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() == || >= + call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() assert >= switch case = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() break case = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() break case decl_stmt NumericDocValues final final = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() = new public public decl_stmt long = call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() if < ^= return break case decl_stmt NumericDocValues final final = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() = new public public decl_stmt long = call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() if < ^= return break default: throw new = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() decl_stmt long = call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() - if != || call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() - long public public decl_stmt long = if < ^= return long public public decl_stmt long = if < ^= return SortedDocValues LeafReaderContext SortedDocValues decl List Filter DocIdSetIterator DocIdSet private private throws decl_stmt org.apache.solr.search.Filter = call org.apache.solr.search.DocSet.getTopFilter() call org.apache.solr.search.DocSet.getTopFilter() call org.apache.solr.search.DocSet.getTopFilter() call org.apache.solr.search.DocSet.getTopFilter() call org.apache.solr.search.DocSet.getTopFilter() decl_stmt java.util.List < = call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.apache.lucene.index.LeafReaderContext = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.search.DocIdSet = call Filter.getDocIdSet() call Filter.getDocIdSet() call Filter.getDocIdSet() call Filter.getDocIdSet() call Filter.getDocIdSet() if == continue decl_stmt org.apache.lucene.search.DocIdSetIterator = call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() if != if call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() decl_stmt org.apache.lucene.index.SortedSetDocValues = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() if == continue decl_stmt org.apache.lucene.index.SortedDocValues final final = if != call DocIdSet.bits() call DocIdSet.bits() call DocIdSet.bits() call DocIdSet.bits() call DocIdSet.bits() else call DocIdSet.bits() call DocIdSet.bits() call DocIdSet.bits() call DocIdSet.bits() call DocIdSet.bits() else decl_stmt org.apache.lucene.index.SortedDocValues = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() if == continue call DocIdSet.bits() call DocIdSet.bits() call DocIdSet.bits() call DocIdSet.bits() call DocIdSet.bits() int boolean IntervalCompareResult long int private private throws for : decl_stmt int while = != if != && == continue decl_stmt long decl_stmt int = while = != decl_stmt boolean = while && < decl_stmt IntervalCompareResult = switch case ++ break case = break case ++ break int int private private throws for : decl_stmt int while = != if != && == continue decl_stmt int = if >= private private assert >= FacetInterval IntervalCompareResult private private for = < ++ decl_stmt FacetInterval = decl_stmt IntervalCompareResult = call FacetInterval.includes() call FacetInterval.includes() call FacetInterval.includes() call FacetInterval.includes() call FacetInterval.includes() if == call FacetInterval.incCount() call FacetInterval.incCount() call FacetInterval.incCount() call FacetInterval.incCount() call FacetInterval.incCount() else if == break private private if == = else switch call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() case if call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() instanceof = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() else = long call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() break case = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() break case = float call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() break case = double call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() break default: throw new if ++ if == = else switch call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() case if call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() instanceof = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() else = long call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() break case = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() break case = float call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() break case = double call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() break default: throw new if -- String private private throws decl_stmt java.lang.String = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == throw new return private private if return return new call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() public public if == = - else = if < = * - - else if ++ if == = else = if < = * - - else if -- public public if == = - else = if < = * - - else if ++ if == = else = if < = * - - else if -- public public if > return if < return return char private private throws for < ++ decl_stmt char = if == ++ if < = else throw new + + + else if == return + return public public return + + + + + + + + + + + public public return ++ public public return public < public < return new <