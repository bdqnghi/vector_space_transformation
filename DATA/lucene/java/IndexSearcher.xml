org.apache.lucene.search java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.List import java.util.Objects import java.util.Set import java.util.concurrent.Callable import java.util.concurrent.ExecutionException import java.util.concurrent.ExecutorService import java.util.concurrent.Future import org.apache.lucene.document.Document import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.FieldInvertState import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexReaderContext import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.MultiFields import org.apache.lucene.index.ReaderUtil import org.apache.lucene.index.StoredFieldVisitor import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.index.Terms import org.apache.lucene.search.similarities.BM25Similarity import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.store.NIOFSDirectory import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.ThreadInterruptedException import class org.apache.lucene.search.IndexSearcher QueryCachingPolicy QueryCache QueryCache IndexReaderContext Similarity Similarity decl LeafSlice decl List ExecutorService QueryCachingPolicy Similarity IndexReader public public throw new public public return new public public return public public public public return public public public public throws return new public public return public public return public public return public public return public public return public public return public static public static return public static public static return public static public static = public static public static return public static public static = public public = public public return public public = public public return decl LeafSlice protected protected < decl_stmt LeafSlice = new for = < ++ = new return public public return public public throws return call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) public public throws call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) public public < throws return call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) call org.apache.lucene.index.IndexReader.document(int) public public = public public return : int Term int decl CollectorManager public public throws = while if instanceof = else break if instanceof return call IndexReader.numDocs() call IndexReader.numDocs() call IndexReader.numDocs() call IndexReader.numDocs() call IndexReader.numDocs() else if instanceof && call org.apache.lucene.index.IndexReader.hasDeletions() call org.apache.lucene.index.IndexReader.hasDeletions() call org.apache.lucene.index.IndexReader.hasDeletions() call org.apache.lucene.index.IndexReader.hasDeletions() call org.apache.lucene.index.IndexReader.hasDeletions() == decl_stmt org.apache.lucene.index.Term = decl_stmt int = for : call org.apache.lucene.index.IndexReader.leaves() call org.apache.lucene.index.IndexReader.leaves() call org.apache.lucene.index.IndexReader.leaves() call org.apache.lucene.index.IndexReader.leaves() call org.apache.lucene.index.IndexReader.leaves() += return decl_stmt org.apache.lucene.search.CollectorManager final final final < = new < public public throws return new public public < throws decl_stmt int = for : += return return public public throws return new int public public < throws decl_stmt int = for : += return int decl CollectorManager decl TopDocs int int public public throws decl_stmt int final final = call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() if != && >= throw new + + + = decl_stmt int final final = decl_stmt org.apache.lucene.search.CollectorManager final final final < = new < public public throws return public public < throws decl_stmt org.apache.lucene.search.TopDocs final final final = new decl_stmt int = for : ++ = return return public public throws return int decl TopDocs public public < throws decl_stmt org.apache.lucene.search.TopDocs final final final = new decl_stmt int = for : ++ = return public public throws return public public throws public public throws return public public throws return public public throws return public public throws if != && ! instanceof throw new + return boolean int int decl TopFieldDocs decl CollectorManager int private private throws decl_stmt int final final = call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() if != && >= throw new + + + decl_stmt int final final = decl_stmt org.apache.lucene.search.CollectorManager final final final < = new < public public throws decl_stmt boolean final final = return public public < throws decl_stmt TopFieldDocs final final final = new decl_stmt int = for : ++ = return return boolean public public throws decl_stmt boolean final final = return int decl TopFieldDocs public public < throws decl_stmt TopFieldDocs final final final = new decl_stmt int = for : ++ = return decl List Weight decl LeafReaderContext decl List decl List C boolean public < extends extends public < extends extends < throws if == decl_stmt C final final = return else decl_stmt java.util.List final final final < = new <> decl_stmt boolean = for = < ++ decl_stmt C final final = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() |= call C.needsScores() call C.needsScores() call C.needsScores() call C.needsScores() call C.needsScores() decl_stmt org.apache.lucene.search.Weight final final = decl_stmt java.util.List final final final < < = new <> for = < ++ decl_stmt org.apache.lucene.index.LeafReaderContext final final final = decl_stmt C final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) new < public public throws return decl_stmt java.util.List final final final < = new <> for < : try call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch throw new catch throw new return public public throws return LeafCollector BulkScorer protected protected < throws for : decl_stmt org.apache.lucene.search.LeafCollector final final try = catch continue decl_stmt org.apache.lucene.search.BulkScorer = if != try call BulkScorer.score() call BulkScorer.score() call BulkScorer.score() call BulkScorer.score() call BulkScorer.score() catch Query public public throws decl_stmt org.apache.lucene.search.Query = for = call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) != = call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) = return public public throws return int Bits LeafReaderContext int protected protected throws decl_stmt int = decl_stmt org.apache.lucene.index.LeafReaderContext final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt int = - decl_stmt org.apache.lucene.util.Bits final final = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() if != && call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() == return + + return float Weight float public public throws = decl_stmt org.apache.lucene.search.Weight = decl_stmt float = call Weight.getValueForNormalization() call Weight.getValueForNormalization() call Weight.getValueForNormalization() call Weight.getValueForNormalization() call Weight.getValueForNormalization() decl_stmt float = if || = call Weight.normalize() call Weight.normalize() call Weight.normalize() call Weight.normalize() call Weight.normalize() return QueryCache Weight public public throws decl_stmt org.apache.lucene.search.QueryCache final final = decl_stmt org.apache.lucene.search.Weight = if == && != = call QueryCache.doCache() call QueryCache.doCache() call QueryCache.doCache() call QueryCache.doCache() call QueryCache.doCache() return public public return public public return + + + + public public throws return new long long Terms int public public throws decl_stmt int final final decl_stmt long final final decl_stmt long final final assert != decl_stmt org.apache.lucene.index.Terms = if == = = = else = call Terms.getDocCount() call Terms.getDocCount() call Terms.getDocCount() call Terms.getDocCount() call Terms.getDocCount() = call Terms.getSumTotalTermFreq() call Terms.getSumTotalTermFreq() call Terms.getSumTotalTermFreq() call Terms.getSumTotalTermFreq() call Terms.getSumTotalTermFreq() = call Terms.getSumDocFreq() call Terms.getSumDocFreq() call Terms.getSumDocFreq() call Terms.getSumDocFreq() call Terms.getSumDocFreq() return new call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc() call IndexReader.maxDoc()