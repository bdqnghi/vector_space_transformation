org.apache.solr.security javax.servlet.FilterChain import javax.servlet.ServletException import javax.servlet.ServletRequest import javax.servlet.ServletResponse import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletRequestWrapper import java.io.IOException import java.security.Principal import java.security.PublicKey import java.util.HashMap import java.util.Map import java.util.concurrent.atomic.AtomicReference import org.apache.http.Header import org.apache.http.auth.BasicUserPrincipal import org.apache.http.message.BasicHttpRequest import org.apache.solr.SolrTestCaseJ4 import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.core.CoreContainer import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.request.SolrRequestInfo import org.apache.solr.response.SolrQueryResponse import org.apache.solr.util.CryptoKeys import org.easymock.EasyMock import org.easymock.IAnswer import static static org.easymock.EasyMock.getCurrentArguments import class org.apache.solr.security.TestPKIAuthenticationPlugin super super extends return return return return String decl AtomicReference BasicHttpRequest PublicKey LocalSolrQueryRequest decl AtomicReference FilterChain HttpServletRequest MockPKIAuthenticationPlugin int MockPKIAuthenticationPlugin decl AtomicReference public public throws decl_stmt java.util.concurrent.atomic.AtomicReference < = new <> decl_stmt java.lang.String = decl_stmt MockPKIAuthenticationPlugin final final = new decl_stmt org.apache.solr.request.LocalSolrQueryRequest = new new public public return call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() decl_stmt PublicKey = call MockPKIAuthenticationPlugin.getPublicKey() call MockPKIAuthenticationPlugin.getPublicKey() call MockPKIAuthenticationPlugin.getPublicKey() call MockPKIAuthenticationPlugin.getPublicKey() call MockPKIAuthenticationPlugin.getPublicKey() call MockPKIAuthenticationPlugin.remoteKeys() call MockPKIAuthenticationPlugin.remoteKeys() call MockPKIAuthenticationPlugin.remoteKeys() call MockPKIAuthenticationPlugin.remoteKeys() call MockPKIAuthenticationPlugin.remoteKeys() call MockPKIAuthenticationPlugin.remoteKeys() call MockPKIAuthenticationPlugin.remoteKeys() call MockPKIAuthenticationPlugin.remoteKeys() call MockPKIAuthenticationPlugin.remoteKeys() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() new = new new decl_stmt BasicHttpRequest = new call MockPKIAuthenticationPlugin.setHeader() call MockPKIAuthenticationPlugin.setHeader() call MockPKIAuthenticationPlugin.setHeader() call MockPKIAuthenticationPlugin.setHeader() call MockPKIAuthenticationPlugin.setHeader() decl_stmt java.util.concurrent.atomic.AtomicReference final final final < = new <> call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call BasicHttpRequest.getFirstHeader() call BasicHttpRequest.getFirstHeader() call BasicHttpRequest.getFirstHeader() call BasicHttpRequest.getFirstHeader() call BasicHttpRequest.getFirstHeader() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() decl_stmt java.util.concurrent.atomic.AtomicReference final final final < = new <> decl_stmt HttpServletRequest = decl_stmt FilterChain = new public public throws call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() = new call MockPKIAuthenticationPlugin.setHeader() call MockPKIAuthenticationPlugin.setHeader() call MockPKIAuthenticationPlugin.setHeader() call MockPKIAuthenticationPlugin.setHeader() call MockPKIAuthenticationPlugin.setHeader() call BasicHttpRequest.getFirstHeader() call BasicHttpRequest.getFirstHeader() call BasicHttpRequest.getFirstHeader() call BasicHttpRequest.getFirstHeader() call BasicHttpRequest.getFirstHeader() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() = call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() = new call MockPKIAuthenticationPlugin.setHeader() call MockPKIAuthenticationPlugin.setHeader() call MockPKIAuthenticationPlugin.setHeader() call MockPKIAuthenticationPlugin.setHeader() call MockPKIAuthenticationPlugin.setHeader() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call BasicHttpRequest.getFirstHeader() call BasicHttpRequest.getFirstHeader() call BasicHttpRequest.getFirstHeader() call BasicHttpRequest.getFirstHeader() call BasicHttpRequest.getFirstHeader() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() decl_stmt MockPKIAuthenticationPlugin = new decl_stmt int = try return == new : finally ++ call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call MockPKIAuthenticationPlugin.doAuthenticate() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() public public return public public throws try return == new : finally ++ HttpServletRequest private private final final final < decl_stmt HttpServletRequest = call HttpServletRequest.getHeader() call HttpServletRequest.getHeader() call HttpServletRequest.getHeader() call HttpServletRequest.getHeader() call HttpServletRequest.getHeader() new < public public throws if if == return return else return call HttpServletRequest.getUserPrincipal() call HttpServletRequest.getUserPrincipal() call HttpServletRequest.getUserPrincipal() call HttpServletRequest.getUserPrincipal() call HttpServletRequest.getUserPrincipal() new < public public throws return call HttpServletRequest.getRequestURI() call HttpServletRequest.getRequestURI() call HttpServletRequest.getRequestURI() call HttpServletRequest.getRequestURI() call HttpServletRequest.getRequestURI() new < public public throws return return public public throws if if == return return else return public public throws return public public throws return