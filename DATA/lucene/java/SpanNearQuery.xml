org.apache.lucene.search.spans java.io.IOException import java.util.ArrayList import java.util.Iterator import java.util.LinkedList import java.util.List import java.util.Map import java.util.Objects import java.util.Set import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.index.Terms import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import class org.apache.lucene.search.spans.SpanNearQuery super super extends super implements decl List int boolean String public public if == throw new + + + return public public if ! throw new new return public public = return public public return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() public static public static return new public static public static return new public public return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() public public return public public return public public return StringBuilder decl Iterator SpanQuery public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.util.Iterator < = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.apache.lucene.search.spans.SpanQuery = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() call SpanQuery.toString() if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl List public public throws decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return new : public public < for : decl ArrayList Terms Spans public public final final throws decl_stmt org.apache.lucene.index.Terms = if == return decl_stmt java.util.ArrayList < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : decl_stmt org.apache.lucene.search.spans.Spans = if != call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() else return return ! new : new public public < for : SpanQuery decl List boolean SpanQuery SpanNearQuery public public throws decl_stmt boolean = decl_stmt java.util.List < = new <> for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.apache.lucene.search.spans.SpanQuery = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.search.spans.SpanQuery = call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() call SpanQuery.rewrite() |= != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if try decl_stmt org.apache.lucene.search.spans.SpanNearQuery = = return catch throw new return SpanNearQuery public public if ! return decl_stmt org.apache.lucene.search.spans.SpanNearQuery final final = return == && == && call decl List.equals() call decl List.equals() call decl List.equals() call decl List.equals() call decl List.equals() int int public public decl_stmt int = ^= call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() += decl_stmt int = + : return * public public return public public return + + + + public public throws return new public public < public public throws return new public public < public public throws return ++ public public throws return = public public return public public return + public public return public public throws public public return public public throws = - return ++ public public throws = - return = public public return public public throw new