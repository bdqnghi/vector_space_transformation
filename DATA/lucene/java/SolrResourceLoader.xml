org.apache.solr.core javax.naming.Context import javax.naming.InitialContext import javax.naming.NamingException import javax.naming.NoInitialContextException import java.io.Closeable import java.io.File import java.io.FileOutputStream import java.io.IOException import java.io.InputStream import java.io.OutputStream import java.lang.invoke.MethodHandles import java.lang.reflect.Constructor import java.net.URL import java.net.URLClassLoader import java.nio.charset.CharacterCodingException import java.nio.charset.Charset import java.nio.charset.StandardCharsets import java.nio.file.DirectoryStream import java.nio.file.Files import java.nio.file.Path import java.nio.file.PathMatcher import java.nio.file.Paths import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.HashMap import java.util.List import java.util.Map import java.util.Properties import java.util.concurrent.ConcurrentHashMap import java.util.regex.Matcher import java.util.regex.Pattern import org.apache.lucene.analysis.util.CharFilterFactory import org.apache.lucene.analysis.util.ResourceLoader import org.apache.lucene.analysis.util.ResourceLoaderAware import org.apache.lucene.analysis.util.TokenFilterFactory import org.apache.lucene.analysis.util.TokenizerFactory import org.apache.lucene.analysis.util.WordlistLoader import org.apache.lucene.codecs.Codec import org.apache.lucene.codecs.DocValuesFormat import org.apache.lucene.codecs.PostingsFormat import org.apache.lucene.util.IOUtils import org.apache.solr.common.SolrException import org.apache.solr.handler.admin.CoreAdminHandler import org.apache.solr.handler.component.SearchComponent import org.apache.solr.handler.component.ShardHandlerFactory import org.apache.solr.request.SolrRequestHandler import org.apache.solr.response.QueryResponseWriter import org.apache.solr.rest.RestManager import org.apache.solr.schema.FieldType import org.apache.solr.schema.ManagedIndexSchemaFactory import org.apache.solr.schema.SimilarityFactory import org.apache.solr.search.QParserPlugin import org.apache.solr.update.processor.UpdateRequestProcessorFactory import org.apache.solr.util.plugin.SolrCoreAware import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.core.SolrResourceLoader super super implements decl List Charset Logger URLClassLoader Pattern Properties boolean String String decl List String String Path decl Registry decl Class decl Object decl RestManager decl Map decl String decl List public synchronized public synchronized if == = new return URLClassLoader < decl_stmt java.net.URLClassLoader = if != = decl List ClassLoader private static private static final final < if == return decl_stmt java.util.List < = new <> call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() for : call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.lang.ClassLoader = return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl List public static < public static < < throws decl_stmt java.util.List < = new <> try < = for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public static < public static < throws return new < public public throws return public public throws return PathMatcher public static < public static < throws decl_stmt java.nio.file.PathMatcher final final = + return new < public public throws return call PathMatcher.matches() call PathMatcher.matches() call PathMatcher.matches() call PathMatcher.matches() call PathMatcher.matches() public public throws return public static public static return != && ! || + : File public public decl_stmt File = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() && call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() return call File.list() call File.list() call File.list() call File.list() call File.list() else return new public public return call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) public public return public public return public public return public public throws return public public throws return private private throws if return = if return throw new + + + + InputStream Path Path public public throws decl_stmt java.nio.file.Path = if && return decl_stmt java.nio.file.Path = if && return decl_stmt java.io.InputStream = call java.net.URLClassLoader.getResourceAsStream(String) call java.net.URLClassLoader.getResourceAsStream(String) call java.net.URLClassLoader.getResourceAsStream(String) call java.net.URLClassLoader.getResourceAsStream(String) call java.net.URLClassLoader.getResourceAsStream(String) if == && != = call java.net.URLClassLoader.getResourceAsStream(String) call java.net.URLClassLoader.getResourceAsStream(String) call java.net.URLClassLoader.getResourceAsStream(String) call java.net.URLClassLoader.getResourceAsStream(String) call java.net.URLClassLoader.getResourceAsStream(String) + if == throw new + + + + return Path Path public public decl_stmt java.nio.file.Path = if && return call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() decl_stmt java.nio.file.Path = if && return call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() try = call java.net.URLClassLoader.getResourceAsStream(String) call java.net.URLClassLoader.getResourceAsStream(String) call java.net.URLClassLoader.getResourceAsStream(String) call java.net.URLClassLoader.getResourceAsStream(String) call java.net.URLClassLoader.getResourceAsStream(String) if != return + catch return public < public < throws return public < public < throws return public < public < throws try return catch throw new + public < < extends extends public < < extends extends < return String String Matcher String decl Class public < < extends extends public < < extends extends < if == || == || == = decl_stmt java.lang.String = call decl Registry.get() call decl Registry.get() call decl Registry.get() call decl Registry.get() call decl Registry.get() if != try return catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + + decl_stmt java.lang.Class < extends extends = try decl_stmt java.util.regex.Matcher final final = call decl Map.matcher() call decl Map.matcher() call decl Map.matcher() call decl Map.matcher() call decl Map.matcher() if call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() decl_stmt java.lang.String final final = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() try if return = else if return = else if return = else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch try return = catch decl_stmt java.lang.String = if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() + for : try decl_stmt java.lang.String = + + + call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() + return = catch throw new + + finally if != if call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() call decl Class.getClassLoader() == && ! call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() && == || == call decl Registry.put() call decl Registry.put() call decl Registry.put() call decl Registry.put() call decl Registry.put() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() if call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() public < public < < return public < public < < return CoreAdminHandler decl Constructor decl Class public public final final decl_stmt java.lang.Class < extends extends = if == throw new + + + decl_stmt org.apache.solr.handler.admin.CoreAdminHandler = try decl_stmt java.lang.reflect.Constructor < extends extends = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + if ! if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl Constructor T decl Class public < public < < decl_stmt java.lang.Class < extends extends = if == throw new + + + decl_stmt T = try decl_stmt java.lang.reflect.Constructor < extends extends = try = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch try = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch throw catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + + throw catch throw new + call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() + if ! if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl SolrCoreAware public public = decl_stmt org.apache.solr.util.plugin.SolrCoreAware while call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > synchronized = call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() for : = decl ResourceLoaderAware public public throws decl_stmt org.apache.lucene.analysis.util.ResourceLoaderAware while call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > synchronized = call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() for : decl SolrInfoMBean public public < decl_stmt org.apache.solr.core.SolrInfoMBean synchronized = call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() for : if ! try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + String Context String public static public static decl_stmt java.lang.String = try decl_stmt sun.tools.tree.Context = new = call sun.tools.tree.Context.lookup(Name) call sun.tools.tree.Context.lookup(Name) call sun.tools.tree.Context.lookup(Name) call sun.tools.tree.Context.lookup(Name) call sun.tools.tree.Context.lookup(Name) + + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + if == decl_stmt java.lang.String = + = if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + if == = + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + return public public return StringBuilder decl Class static static decl_stmt java.lang.Class = call decl Object.get() call decl Object.get() call decl Object.get() call decl Object.get() call decl Object.get() if == throw new + for : if return decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) throw new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public throws public < public < return File String File public static public static decl_stmt File = new try decl_stmt File = call File.getParentFile() call File.getParentFile() call File.getParentFile() call File.getParentFile() call File.getParentFile() if ! call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() if ! call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() decl_stmt java.lang.String final final = + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new try = new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + catch decl_stmt java.lang.String final final = + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new finally try call File.toPath() call File.toPath() call File.toPath() call File.toPath() call File.toPath() catch decl_stmt java.lang.String final final = + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error()