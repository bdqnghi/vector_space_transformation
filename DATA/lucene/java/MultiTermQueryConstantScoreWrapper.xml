org.apache.lucene.search java.io.IOException import java.util.ArrayList import java.util.List import java.util.Objects import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.index.TermState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.BooleanClause.Occur import org.apache.lucene.util.BytesRef import org.apache.lucene.util.DocIdSetBuilder import class super super extends Q int public public return call Q.toString() call Q.toString() call Q.toString() call Q.toString() call Q.toString() decl MultiTermQueryConstantScoreWrapper public final public final final final if == return decl_stmt org.apache.lucene.search.MultiTermQueryConstantScoreWrapper final final final < = < return public final public final return * + call Q.hashCode() call Q.hashCode() call Q.hashCode() call Q.hashCode() call Q.hashCode() public public return public final public final return call Q.getField() call Q.getField() call Q.getField() call Q.getField() call Q.getField() BytesRef Terms WeightOrDocIdSet Query TermsEnum PostingsEnum Weight DocIdSetBuilder TermContext TermState decl Builder decl BooleanQuery Scorer int TermsEnum decl List public public throws return new private private < throws decl_stmt int final final = for = < ++ decl_stmt org.apache.lucene.util.BytesRef final final = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == return decl_stmt org.apache.lucene.index.TermState = call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() if call org.apache.lucene.index.TermState.isRealTerm() call org.apache.lucene.index.TermState.isRealTerm() call org.apache.lucene.index.TermState.isRealTerm() call org.apache.lucene.index.TermState.isRealTerm() call org.apache.lucene.index.TermState.isRealTerm() == return call Terms.add() call Terms.add() call Terms.add() call Terms.add() call Terms.add() new call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() return call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() == private private throws decl_stmt org.apache.lucene.index.Terms final final = if == return new decl_stmt org.apache.lucene.index.TermsEnum final final = call Q.getTermsEnum() call Q.getTermsEnum() call Q.getTermsEnum() call Q.getTermsEnum() call Q.getTermsEnum() assert != decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt java.util.List final final final < = new <> if decl_stmt org.apache.lucene.util.fst.Builder = new for : decl_stmt org.apache.lucene.index.TermContext final final = new call decl Builder.register() call decl Builder.register() call decl Builder.register() call decl Builder.register() call decl Builder.register() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new decl_stmt org.apache.lucene.search.Query = new call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() decl_stmt org.apache.lucene.search.Weight final final = call Query.normalize() call Query.normalize() call Query.normalize() call Query.normalize() call Query.normalize() return new decl_stmt org.apache.lucene.util.DocIdSetBuilder = new if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() == decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() for : call DocIdSetBuilder.seekExact() call DocIdSetBuilder.seekExact() call DocIdSetBuilder.seekExact() call DocIdSetBuilder.seekExact() call DocIdSetBuilder.seekExact() = call DocIdSetBuilder.postings() call DocIdSetBuilder.postings() call DocIdSetBuilder.postings() call DocIdSetBuilder.postings() call DocIdSetBuilder.postings() call Weight.add() call Weight.add() call Weight.add() call Weight.add() call Weight.add() do = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call Weight.add() call Weight.add() call Weight.add() call Weight.add() call Weight.add() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != return new call Weight.build() call Weight.build() call Weight.build() call Weight.build() call Weight.build() private private throws if == return decl_stmt org.apache.lucene.search.DocIdSetIterator final final = if == return return new public public throws decl_stmt WeightOrDocIdSet final final = if != return call Scorer.weight() call Scorer.weight() call Scorer.weight() call Scorer.weight() call Scorer.weight() call Scorer.weight() call Scorer.weight() call Scorer.weight() call Scorer.weight() else decl_stmt org.apache.lucene.search.Scorer final final = if == return return new public public throws decl_stmt WeightOrDocIdSet final final = if != return call Scorer.weight() call Scorer.weight() call Scorer.weight() call Scorer.weight() call Scorer.weight() call Scorer.weight() call Scorer.weight() call Scorer.weight() call Scorer.weight() else return int BytesRef TermState private private < throws decl_stmt int final final = for = < ++ decl_stmt org.apache.lucene.util.BytesRef final final = if == return decl_stmt org.apache.lucene.index.TermState = if call org.apache.lucene.index.TermState.isRealTerm() call org.apache.lucene.index.TermState.isRealTerm() call org.apache.lucene.index.TermState.isRealTerm() call org.apache.lucene.index.TermState.isRealTerm() call org.apache.lucene.index.TermState.isRealTerm() == return new return == Terms Query TermsEnum PostingsEnum Weight TermContext DocIdSetBuilder decl Builder decl BooleanQuery decl List private private throws decl_stmt org.apache.lucene.index.Terms final final = if == return new decl_stmt org.apache.lucene.index.TermsEnum final final = call Q.getTermsEnum() call Q.getTermsEnum() call Q.getTermsEnum() call Q.getTermsEnum() call Q.getTermsEnum() assert != decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt java.util.List final final final < = new <> if decl_stmt org.apache.lucene.util.fst.Builder = new for : decl_stmt org.apache.lucene.index.TermContext final final = new call decl Builder.register() call decl Builder.register() call decl Builder.register() call decl Builder.register() call decl Builder.register() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new decl_stmt org.apache.lucene.search.Query = new call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() decl_stmt org.apache.lucene.search.Weight final final = call Query.normalize() call Query.normalize() call Query.normalize() call Query.normalize() call Query.normalize() return new decl_stmt org.apache.lucene.util.DocIdSetBuilder = new if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() == decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() for : call DocIdSetBuilder.seekExact() call DocIdSetBuilder.seekExact() call DocIdSetBuilder.seekExact() call DocIdSetBuilder.seekExact() call DocIdSetBuilder.seekExact() = call DocIdSetBuilder.postings() call DocIdSetBuilder.postings() call DocIdSetBuilder.postings() call DocIdSetBuilder.postings() call DocIdSetBuilder.postings() call Weight.add() call Weight.add() call Weight.add() call Weight.add() call Weight.add() do = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call Weight.add() call Weight.add() call Weight.add() call Weight.add() call Weight.add() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != return new call Weight.build() call Weight.build() call Weight.build() call Weight.build() call Weight.build() DocIdSetIterator private private throws if == return decl_stmt org.apache.lucene.search.DocIdSetIterator final final = if == return return new Scorer WeightOrDocIdSet public public throws decl_stmt WeightOrDocIdSet final final = if != return call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() else decl_stmt org.apache.lucene.search.Scorer final final = if == return return new WeightOrDocIdSet public public throws decl_stmt WeightOrDocIdSet final final = if != return call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() call WeightOrDocIdSet.weight() else return