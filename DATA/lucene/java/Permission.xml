org.apache.solr.security java.util.Collection import java.util.Collections import java.util.HashSet import java.util.Map import java.util.Set import java.util.function.Predicate import com.google.common.collect.ImmutableSet import org.apache.solr.common.SolrException import org.apache.solr.common.params.CommonParams import static static java.util.Collections.singleton import static static org.apache.solr.common.params.CommonParams.NAME import class org.apache.solr.security.Permission decl Set String decl PermissionNameProvider decl Map decl Set decl Set decl Name Permission String decl HashSet static static decl_stmt org.apache.solr.security.Permission = new decl_stmt java.lang.String = if ! throw new = if != = decl_stmt java.util.HashSet < = new <> call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() for : if throw new + + = = = = = < return decl Set private static < private static < if && ! && return decl_stmt java.util.Set < = if if != for : if ! return return return == : Collection decl Set Object static < static < decl_stmt java.util.Set < = new <> decl_stmt java.lang.Object = if == if return : return if instanceof decl_stmt java.util.Collection = for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else if instanceof call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else throw new + return call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() :