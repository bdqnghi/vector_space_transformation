org.apache.solr.spelling java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.Iterator import java.util.List import java.util.Locale import java.util.regex.Pattern import org.apache.lucene.analysis.Token import org.apache.lucene.index.IndexReader import org.apache.lucene.index.Term import org.apache.lucene.search.spell.CombineSuggestion import org.apache.lucene.search.spell.SuggestWord import org.apache.lucene.search.spell.WordBreakSpellChecker import org.apache.lucene.search.spell.WordBreakSpellChecker.BreakSuggestionSortMethod import org.apache.solr.common.util.NamedList import org.apache.solr.core.SolrCore import org.apache.solr.search.SolrIndexSearcher import class org.apache.solr.spelling.WordBreakSolrSpellChecker super super extends String String boolean WordBreakSpellChecker String String BreakSuggestionSortMethod String String String Pattern String boolean int int int String int String int public public decl_stmt java.lang.String = = = = new decl_stmt java.lang.String = if != = call java.lang.String.toUpperCase(Locale) call java.lang.String.toUpperCase(Locale) call java.lang.String.toUpperCase(Locale) call java.lang.String.toUpperCase(Locale) call java.lang.String.toUpperCase(Locale) if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = else throw new + + + else = decl_stmt int = if > call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxChanges(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxChanges(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxChanges(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxChanges(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxChanges(int) decl_stmt int = if > call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxCombineWordLength(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxCombineWordLength(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxCombineWordLength(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxCombineWordLength(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxCombineWordLength(int) decl_stmt int = if > call org.apache.lucene.search.spell.WordBreakSpellChecker.setMinBreakWordLength(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMinBreakWordLength(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMinBreakWordLength(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMinBreakWordLength(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMinBreakWordLength(int) decl_stmt int = if > call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxEvaluations(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxEvaluations(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxEvaluations(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxEvaluations(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMaxEvaluations(int) decl_stmt int = if > call org.apache.lucene.search.spell.WordBreakSpellChecker.setMinSuggestionFrequency(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMinSuggestionFrequency(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMinSuggestionFrequency(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMinSuggestionFrequency(int) call org.apache.lucene.search.spell.WordBreakSpellChecker.setMinSuggestionFrequency(int) return Object private private decl_stmt java.lang.Object = return == : call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() String private private decl_stmt java.lang.String = if || return return Object private private decl_stmt java.lang.Object = if == return try return call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() catch throw new + + + boolean IndexReader decl Iterator SpellingResult boolean boolean decl List ResultEntry int boolean Term boolean decl Iterator int decl List boolean int int boolean ResultEntry int decl Token decl List decl CombineSuggestion decl List Token decl List int StringBuilder decl SuggestWord public public throws decl_stmt org.apache.lucene.index.IndexReader = decl_stmt int = decl_stmt java.lang.StringBuilder = new decl_stmt org.apache.lucene.queryparser.surround.parser.Token = new decl_stmt java.util.List < = new <> + decl_stmt java.util.List < = new <> + decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> decl_stmt boolean = decl_stmt boolean = decl_stmt boolean = for = < ++ decl_stmt boolean = & == decl_stmt boolean = & == decl_stmt boolean = & == if > && != || != || call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = = = decl_stmt org.apache.lucene.index.Term = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if decl_stmt SuggestWord = call org.apache.lucene.search.spell.WordBreakSpellChecker.suggestWordBreaks(Term,int,IndexReader,SuggestMode,BreakSuggestionSortMethod) call org.apache.lucene.search.spell.WordBreakSpellChecker.suggestWordBreaks(Term,int,IndexReader,SuggestMode,BreakSuggestionSortMethod) call org.apache.lucene.search.spell.WordBreakSpellChecker.suggestWordBreaks(Term,int,IndexReader,SuggestMode,BreakSuggestionSortMethod) call org.apache.lucene.search.spell.WordBreakSpellChecker.suggestWordBreaks(Term,int,IndexReader,SuggestMode,BreakSuggestionSortMethod) call org.apache.lucene.search.spell.WordBreakSpellChecker.suggestWordBreaks(Term,int,IndexReader,SuggestMode,BreakSuggestionSortMethod) if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new for : call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() decl_stmt boolean = decl_stmt int = for : if ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if == = else += call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() decl_stmt java.util.List < = decl_stmt CombineSuggestion = call org.apache.lucene.search.spell.WordBreakSpellChecker.suggestWordCombinations(Term,int,IndexReader,SuggestMode) call org.apache.lucene.search.spell.WordBreakSpellChecker.suggestWordCombinations(Term,int,IndexReader,SuggestMode) call org.apache.lucene.search.spell.WordBreakSpellChecker.suggestWordCombinations(Term,int,IndexReader,SuggestMode) call org.apache.lucene.search.spell.WordBreakSpellChecker.suggestWordCombinations(Term,int,IndexReader,SuggestMode) call org.apache.lucene.search.spell.WordBreakSpellChecker.suggestWordCombinations(Term,int,IndexReader,SuggestMode) call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if = new <> for : decl_stmt int = decl_stmt int = - call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call java.lang.StringBuilder.delete(int,int) call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() for = <= ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.queryparser.surround.parser.Token = new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new decl_stmt org.apache.solr.spelling.SpellingResult = new decl_stmt java.util.Iterator < = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() decl_stmt java.util.Iterator < = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() decl_stmt org.apache.solr.spelling.ResultEntry = call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() : decl_stmt org.apache.solr.spelling.ResultEntry = call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() : decl_stmt int = decl_stmt int = while != || != if == = else if == call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() new call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() = else if < = else if < call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() new call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() = else if >= = else call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() new call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() call ResultEntry.token() = if == && call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() ++ if == && call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() ++ return private private if == > else int decl String private private throws decl_stmt java.lang.String = call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) call java.util.regex.Pattern.split(CharSequence,int) decl_stmt int = if == for : = new else for : += new return public public public public throws public public return