org.apache.lucene.codecs.memory java.io.IOException import java.util.Iterator import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.DocValuesConsumer import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import static static org.apache.lucene.codecs.memory.DirectDocValuesProducer.VERSION_CURRENT import static static org.apache.lucene.codecs.memory.DirectDocValuesProducer.BYTES import static static org.apache.lucene.codecs.memory.DirectDocValuesProducer.SORTED import static static org.apache.lucene.codecs.memory.DirectDocValuesProducer.SORTED_NUMERIC import static static org.apache.lucene.codecs.memory.DirectDocValuesProducer.SORTED_NUMERIC_SINGLETON import static static org.apache.lucene.codecs.memory.DirectDocValuesProducer.SORTED_SET import static static org.apache.lucene.codecs.memory.DirectDocValuesProducer.SORTED_SET_SINGLETON import static static org.apache.lucene.codecs.memory.DirectDocValuesProducer.NUMBER import class org.apache.lucene.codecs.memory.DirectDocValuesConsumer super super extends int IndexOutput public public < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() long boolean long long long long byte private private < throws call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt long = decl_stmt long = decl_stmt boolean = decl_stmt long = for : if != decl_stmt long = = = else = ++ if >= throw new + + + + call int.writeInt() call int.writeInt() call int.writeInt() call int.writeInt() call int.writeInt() int if decl_stmt long = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() - else call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() - decl_stmt byte if >= && <= = else if >= && <= = else if >= && <= = else = call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() for : decl_stmt long if != = else = switch case call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() byte break case call IndexOutput.writeShort() call IndexOutput.writeShort() call IndexOutput.writeShort() call IndexOutput.writeShort() call IndexOutput.writeShort() short break case call IndexOutput.writeInt() call IndexOutput.writeInt() call IndexOutput.writeInt() call IndexOutput.writeInt() call IndexOutput.writeInt() int break case call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() break boolean public public throws decl_stmt boolean = try if != call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() - if != = finally if else = = public public final final final < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() int int boolean long long long private private final final final < throws decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt boolean = decl_stmt long = decl_stmt int = for : if != call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() += if > throw new + + + + else = ++ call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeInt() call int.writeInt() call int.writeInt() call int.writeInt() call int.writeInt() int call int.writeInt() call int.writeInt() call int.writeInt() call int.writeInt() call int.writeInt() if decl_stmt long = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() - else call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() - decl_stmt int = for : call IndexOutput.writeInt() call IndexOutput.writeInt() call IndexOutput.writeInt() call IndexOutput.writeInt() call IndexOutput.writeInt() if != += call IndexOutput.writeInt() call IndexOutput.writeInt() call IndexOutput.writeInt() call IndexOutput.writeInt() call IndexOutput.writeInt() int long < throws decl_stmt long = decl_stmt int = for : if == call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() = = if != |= << & ++ if > call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() public public < < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() public public < < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() if call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() else call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() public public < final final final < final final final < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() if call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() - else call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() boolean long Number decl Iterator long private < private < final final final < return new < public < public < decl_stmt java.util.Iterator final final final < = return new < decl_stmt long decl_stmt boolean public public return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() || ! public public decl_stmt long = if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.lang.Number = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if != += call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() else if ! = else assert return public public throw new boolean long Number decl Iterator long public < public < decl_stmt java.util.Iterator final final final < = return new < decl_stmt long decl_stmt boolean public public return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() || ! public public decl_stmt long = if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.lang.Number = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if != += call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() else if ! = else assert return public public throw new public public return || ! long Number public public decl_stmt long = if decl_stmt java.lang.Number = if != += call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() else if ! = else assert return public public throw new