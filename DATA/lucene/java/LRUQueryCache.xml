org.apache.lucene.search java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.ConcurrentModificationException import java.util.IdentityHashMap import java.util.Iterator import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.atomic.AtomicBoolean import org.apache.lucene.index.LeafReader.CoreClosedListener import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.ReaderUtil import org.apache.lucene.index.Term import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.RoaringDocIdSet import class org.apache.lucene.search.LRUQueryCache super super implements long long long decl Map long decl Map decl Set long int long long long long protected protected += protected protected assert != += protected protected += protected protected -= protected protected += += += protected protected -= -= protected protected = = int decl_stmt int final final = call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() if == return else return > || > DocIdSet Query LeafCache Object synchronized synchronized assert instanceof == assert instanceof == decl_stmt java.lang.Object final final = decl_stmt LeafCache final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == return decl_stmt org.apache.lucene.search.Query final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == return decl_stmt org.apache.lucene.search.DocIdSet final final = call LeafCache.get() call LeafCache.get() call LeafCache.get() call LeafCache.get() call LeafCache.get() if == else return Query LeafCache Object LeafCache synchronized synchronized assert instanceof == assert instanceof == decl_stmt org.apache.lucene.search.Query = call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() if == + else = decl_stmt java.lang.Object final final = decl_stmt LeafCache = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new decl_stmt LeafCache final final = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() += assert == new public public call LeafCache.putIfAbsent() call LeafCache.putIfAbsent() call LeafCache.putIfAbsent() call LeafCache.putIfAbsent() call LeafCache.putIfAbsent() public public Query decl Iterator int synchronized synchronized if decl_stmt java.util.Iterator < = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() do decl_stmt org.apache.lucene.search.Query final final = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt int final final = call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() if == call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() throw new + + + call Query.getClass() call Query.getClass() call Query.getClass() call Query.getClass() call Query.getClass() + + + call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() && int LeafCache public synchronized public synchronized decl_stmt LeafCache final final = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != -= decl_stmt int final final = call LeafCache.cache() call LeafCache.cache() call LeafCache.cache() call LeafCache.cache() call LeafCache.cache() call LeafCache.cache() call LeafCache.cache() call LeafCache.cache() call LeafCache.cache() if > else assert == assert == Query public synchronized public synchronized decl_stmt org.apache.lucene.search.Query final final = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != private private + for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() public synchronized public synchronized call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() decl Set long long synchronized synchronized if throw new + call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() + + + + + + for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() decl_stmt java.util.Set < = new <> call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.removeAll() call decl Set.removeAll() call decl Set.removeAll() call decl Set.removeAll() call decl Set.removeAll() if ! call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() throw new + decl_stmt long = * call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() + * call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for : += for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() += * for : += if != throw new + + + decl_stmt long = for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() += if != throw new + + + synchronized < synchronized < return new <> public public while instanceof = return new public public return public < public < synchronized return protected protected if instanceof return return decl RoaringDocIdSet protected protected throws decl_stmt org.apache.lucene.util.fst.Builder = new new public public throws public public throws call decl RoaringDocIdSet.add() call decl RoaringDocIdSet.add() call decl RoaringDocIdSet.add() call decl RoaringDocIdSet.add() call decl RoaringDocIdSet.add() return call decl RoaringDocIdSet.build() call decl RoaringDocIdSet.build() call decl RoaringDocIdSet.build() call decl RoaringDocIdSet.build() call decl RoaringDocIdSet.build() public public throws public public throws public final public final return + public final public final return public final public final return public final public final return public final public final return public final public final return - private private += private private -= assert instanceof == assert instanceof == return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() assert instanceof == assert instanceof == if call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() == + DocIdSet assert instanceof == assert instanceof == decl_stmt org.apache.lucene.search.DocIdSet = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != + call org.apache.lucene.search.DocIdSet.ramBytesUsed() call org.apache.lucene.search.DocIdSet.ramBytesUsed() call org.apache.lucene.search.DocIdSet.ramBytesUsed() call org.apache.lucene.search.DocIdSet.ramBytesUsed() call org.apache.lucene.search.DocIdSet.ramBytesUsed() public public return public public < long long private private decl_stmt long final final = / decl_stmt long final final = return * < BulkScorer private private throws decl_stmt org.apache.lucene.search.BulkScorer final final = if == return else return private private throws return && DocIdSetIterator DocIdSet public public throws if decl_stmt org.apache.lucene.search.DocIdSet = if == if = else return assert != if == return decl_stmt org.apache.lucene.search.DocIdSetIterator final final = call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() if == return return new DocIdSetIterator DocIdSet public public throws if decl_stmt org.apache.lucene.search.DocIdSet = if == if = else return assert != if == return decl_stmt org.apache.lucene.search.DocIdSetIterator final final = call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() call org.apache.lucene.search.DocIdSet.iterator() if == return return new new