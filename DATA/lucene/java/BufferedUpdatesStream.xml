org.apache.lucene.index java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.Comparator import java.util.List import java.util.Locale import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.atomic.AtomicLong import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.Scorer import org.apache.lucene.search.Weight import org.apache.lucene.store.IOContext import org.apache.lucene.util.Accountable import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.InfoStream import org.apache.lucene.util.PriorityQueue import class org.apache.lucene.index.BufferedUpdatesStream super super implements AtomicLong long BytesRef decl List InfoStream decl Comparator AtomicInteger public synchronized public synchronized ++ assert assert assert < assert call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() || call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - < : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + + + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() assert return public synchronized public synchronized call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() = call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) public public return call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() != public public return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() public public return call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() public public return decl SegmentState FrozenBufferedUpdates SegmentState decl Container boolean int long long long SegmentCommitInfo ApplyDeletesResult long int long int CoalescedUpdates public synchronized public synchronized < throws decl_stmt long final final = decl_stmt long final final = ++ if == return new decl_stmt SegmentState = decl_stmt long = decl_stmt long = decl_stmt boolean = decl_stmt ApplyDeletesResult = try if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() - assert if ! if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() return new if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = decl_stmt org.apache.lucene.index.CoalescedUpdates = decl_stmt int = - decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - while >= decl_stmt org.apache.lucene.index.FrozenBufferedUpdates final final = >= call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() : decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = decl_stmt long final final = call org.apache.lucene.index.SegmentCommitInfo.getBufferedDeletesGen() call org.apache.lucene.index.SegmentCommitInfo.getBufferedDeletesGen() call org.apache.lucene.index.SegmentCommitInfo.getBufferedDeletesGen() call org.apache.lucene.index.SegmentCommitInfo.getBufferedDeletesGen() call org.apache.lucene.index.SegmentCommitInfo.getBufferedDeletesGen() if != && < call org.apache.lucene.index.FrozenBufferedUpdates.delGen() call org.apache.lucene.index.FrozenBufferedUpdates.delGen() call org.apache.lucene.index.FrozenBufferedUpdates.delGen() call org.apache.lucene.index.FrozenBufferedUpdates.delGen() call org.apache.lucene.index.FrozenBufferedUpdates.delGen() if ! && call org.apache.lucene.index.FrozenBufferedUpdates.any() call org.apache.lucene.index.FrozenBufferedUpdates.any() call org.apache.lucene.index.FrozenBufferedUpdates.any() call org.apache.lucene.index.FrozenBufferedUpdates.any() call org.apache.lucene.index.FrozenBufferedUpdates.any() if == = new call org.apache.lucene.index.CoalescedUpdates.update(FrozenBufferedUpdates) call org.apache.lucene.index.CoalescedUpdates.update(FrozenBufferedUpdates) call org.apache.lucene.index.CoalescedUpdates.update(FrozenBufferedUpdates) call org.apache.lucene.index.CoalescedUpdates.update(FrozenBufferedUpdates) call org.apache.lucene.index.CoalescedUpdates.update(FrozenBufferedUpdates) -- else if != && == call org.apache.lucene.index.FrozenBufferedUpdates.delGen() call org.apache.lucene.index.FrozenBufferedUpdates.delGen() call org.apache.lucene.index.FrozenBufferedUpdates.delGen() call org.apache.lucene.index.FrozenBufferedUpdates.delGen() call org.apache.lucene.index.FrozenBufferedUpdates.delGen() assert : + if == = decl_stmt SegmentState = assert decl_stmt int = decl_stmt java.awt.Container final final final final final = new if != += call org.apache.lucene.index.CoalescedUpdates.queriesIterable() call org.apache.lucene.index.CoalescedUpdates.queriesIterable() call org.apache.lucene.index.CoalescedUpdates.queriesIterable() call org.apache.lucene.index.CoalescedUpdates.queriesIterable() call org.apache.lucene.index.CoalescedUpdates.queriesIterable() += call FrozenBufferedUpdates.queriesIterable() call FrozenBufferedUpdates.queriesIterable() call FrozenBufferedUpdates.queriesIterable() call FrozenBufferedUpdates.queriesIterable() call FrozenBufferedUpdates.queriesIterable() if call int.any() call int.any() call int.any() call int.any() call int.any() call decl Container.rld() call decl Container.rld() call decl Container.rld() call decl Container.rld() call decl Container.rld() call decl Container.rld() call decl Container.rld() call decl Container.rld() call decl Container.rld() += -- -- else if != if == = decl_stmt SegmentState = assert decl_stmt int = += call org.apache.lucene.index.CoalescedUpdates.queriesIterable() call org.apache.lucene.index.CoalescedUpdates.queriesIterable() call org.apache.lucene.index.CoalescedUpdates.queriesIterable() call org.apache.lucene.index.CoalescedUpdates.queriesIterable() call org.apache.lucene.index.CoalescedUpdates.queriesIterable() decl_stmt java.awt.Container = new if call int.any() call int.any() call int.any() call int.any() call int.any() call decl Container.rld() call decl Container.rld() call decl Container.rld() call decl Container.rld() call decl Container.rld() call decl Container.rld() call decl Container.rld() call decl Container.rld() call decl Container.rld() += -- if != && != if == = += assert = finally if != = if == = new if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() - return private < private < < = new <> return synchronized synchronized return ++ int long public synchronized public synchronized assert decl_stmt long = for : = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int final final = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() >= assert return assert ! assert FrozenBufferedUpdates private synchronized private synchronized if > if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - + for = < ++ decl_stmt org.apache.lucene.index.FrozenBufferedUpdates final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) - assert call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() >= call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) call java.util.concurrent.atomic.AtomicLong.addAndGet(long) - assert call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() >= call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() public public throws try finally protected protected return < decl SegmentState int boolean private private < throws decl_stmt int = decl_stmt SegmentState = new decl_stmt boolean = try for = < ++ = new = finally if == for = < ++ if != try catch return Throwable SegmentState int long int decl List private private throws decl_stmt int = decl_stmt java.lang.Throwable = decl_stmt java.util.List < = decl_stmt long = for = < ++ decl_stmt SegmentState = if += call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() - call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() decl_stmt int = call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() + call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() assert <= call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() if == call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() try catch if != = if if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + return new > decl TermsEnum long long Terms long BytesRef FieldTermIterator decl SeekStatus SegmentQueue String SegmentState long Bits int long int private synchronized private synchronized throws decl_stmt long = decl_stmt int = decl_stmt long = decl_stmt long = decl_stmt FieldTermIterator = call decl List.termIterator() call decl List.termIterator() call decl List.termIterator() call decl List.termIterator() call decl List.termIterator() decl_stmt java.lang.String = decl_stmt SegmentQueue = decl_stmt org.apache.lucene.util.BytesRef while = call FieldTermIterator.next() call FieldTermIterator.next() call FieldTermIterator.next() call FieldTermIterator.next() call FieldTermIterator.next() != if call FieldTermIterator.field() call FieldTermIterator.field() call FieldTermIterator.field() call FieldTermIterator.field() call FieldTermIterator.field() != = call FieldTermIterator.field() call FieldTermIterator.field() call FieldTermIterator.field() call FieldTermIterator.field() call FieldTermIterator.field() = new decl_stmt long = for = < ++ decl_stmt SegmentState = decl_stmt org.apache.lucene.index.Terms = call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() call SegmentState.reader() if != += call Terms.size() call Terms.size() call Terms.size() call Terms.size() call Terms.size() = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() = call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() if != call SegmentQueue.add() call SegmentQueue.add() call SegmentQueue.add() call SegmentQueue.add() call SegmentQueue.add() assert assert ++ decl_stmt long = call FieldTermIterator.delGen() call FieldTermIterator.delGen() call FieldTermIterator.delGen() call FieldTermIterator.delGen() call FieldTermIterator.delGen() while call SegmentQueue.size() call SegmentQueue.size() call SegmentQueue.size() call SegmentQueue.size() call SegmentQueue.size() != decl_stmt SegmentState = call SegmentQueue.top() call SegmentQueue.top() call SegmentQueue.top() call SegmentQueue.top() call SegmentQueue.top() ++ decl_stmt int = call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() if < break else if == else decl_stmt SeekStatus = call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() if == else if == = call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentQueue.updateTop() call SegmentQueue.updateTop() call SegmentQueue.updateTop() call SegmentQueue.updateTop() call SegmentQueue.updateTop() else call SegmentQueue.pop() call SegmentQueue.pop() call SegmentQueue.pop() call SegmentQueue.pop() call SegmentQueue.pop() continue assert != if < decl_stmt org.apache.lucene.util.Bits final final = call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() = call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() assert != while decl_stmt int final final = call SegmentState.postingsEnum() call SegmentState.postingsEnum() call SegmentState.postingsEnum() call SegmentState.postingsEnum() call SegmentState.postingsEnum() call SegmentState.postingsEnum() call SegmentState.postingsEnum() call SegmentState.postingsEnum() call SegmentState.postingsEnum() if == break if != && call decl SeekStatus.get() call decl SeekStatus.get() call decl SeekStatus.get() call decl SeekStatus.get() call decl SeekStatus.get() == continue if ! call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() = call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() call SegmentState.rld() = call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() call SegmentState.termsEnum() if == call SegmentQueue.pop() call SegmentQueue.pop() call SegmentQueue.pop() call SegmentQueue.pop() call SegmentQueue.pop() else call SegmentQueue.updateTop() call SegmentQueue.updateTop() call SegmentQueue.updateTop() call SegmentQueue.updateTop() call SegmentQueue.updateTop() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() - / call decl List.terms() call decl List.terms() call decl List.terms() call decl List.terms() call decl List.terms() call decl List.terms() call decl List.terms() call decl List.terms() call decl List.terms() return String Term Terms TermsEnum Fields DocValuesFieldUpdates Bits int int PostingsEnum private synchronized private synchronized < extends extends throws decl_stmt Fields = decl_stmt java.lang.String = decl_stmt org.apache.lucene.index.TermsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = for : decl_stmt org.apache.lucene.index.Term = decl_stmt int = if ! call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() = call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() decl_stmt org.apache.lucene.index.Terms = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() if != = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() else = if == continue if call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.Term.bytes() call org.apache.lucene.index.Term.bytes() call org.apache.lucene.index.Term.bytes() call org.apache.lucene.index.Term.bytes() call org.apache.lucene.index.Term.bytes() decl_stmt org.apache.lucene.util.Bits final final = = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) decl_stmt org.apache.lucene.index.DocValuesFieldUpdates = if == = decl_stmt int while = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() != if >= break if != && call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() == continue call DocValuesFieldUpdates.add() call DocValuesFieldUpdates.add() call DocValuesFieldUpdates.add() call DocValuesFieldUpdates.add() call DocValuesFieldUpdates.add() IndexSearcher LeafReaderContext long Weight Bits int DocIdSetIterator int Scorer Query private static private static < throws decl_stmt long = decl_stmt org.apache.lucene.index.LeafReaderContext final final = for : decl_stmt org.apache.lucene.search.Query = decl_stmt int = decl_stmt org.apache.lucene.search.IndexSearcher final final = new call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) call org.apache.lucene.search.IndexSearcher.setQueryCache(QueryCache) decl_stmt org.apache.lucene.search.Weight final final = call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) decl_stmt org.apache.lucene.search.Scorer final final = call Weight.scorer() call Weight.scorer() call Weight.scorer() call Weight.scorer() call Weight.scorer() if != decl_stmt org.apache.lucene.search.DocIdSetIterator final final = call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() call Scorer.iterator() decl_stmt org.apache.lucene.util.Bits final final = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() while decl_stmt int = call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() if >= break if != && call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() == continue if ! = if ++ return private private if != assert == || >= : + + + = == : return int long private private decl_stmt int = decl_stmt long = for : += += assert == call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() : + + + call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() assert == call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() : + + + return