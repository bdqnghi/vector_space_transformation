org.apache.solr.handler.dataimport static static org.apache.solr.handler.data.DataImportHandlerException.SEVERE import static static org.apache.solr.handler.data.DataImportHandlerException.wrapAndThrow import org.apache.solr.core.SolrCore import org.apache.lucene.analysis.util.ResourceLoader import org.apache.solr.util.SystemIdResolver import org.apache.solr.common.util.XMLErrorLogger import org.slf4j.Logger import org.slf4j.LoggerFactory import org.apache.commons.io.IOUtils import javax.xml.transform.Source import javax.xml.transform.TransformerException import javax.xml.transform.TransformerFactory import javax.xml.transform.stream.StreamResult import javax.xml.transform.stream.StreamSource import java.io.CharArrayReader import java.io.CharArrayWriter import java.io.Reader import java.lang.invoke.MethodHandles import java.util.* import java.util.concurrent.ArrayBlockingQueue import java.util.concurrent.BlockingQueue import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicBoolean import java.util.concurrent.atomic.AtomicReference import class org.apache.solr.handler.dataimport.XPathEntityProcessor super super extends decl xml Logger String String decl transform String TimeUnit decl List String XMLErrorLogger XPathRecordReader int String boolean String decl DataSource String Thread decl Transformer String decl Map decl List boolean int decl javax public public if == = = = String SolrCore String String TransformerFactory decl List ResourceLoader int StreamSource String private private = = if != = if != = decl_stmt java.lang.String = if != = try decl_stmt org.apache.solr.response.transform.TransformerFactory = decl_stmt org.apache.solr.core.SolrCore final final = decl_stmt StreamSource final final if != decl_stmt org.apache.lucene.analysis.util.ResourceLoader final final = call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call TransformerFactory.setURIResolver() call TransformerFactory.setURIResolver() call TransformerFactory.setURIResolver() call TransformerFactory.setURIResolver() call TransformerFactory.setURIResolver() new = new call org.apache.lucene.analysis.util.ResourceLoader.openResource(String) call org.apache.lucene.analysis.util.ResourceLoader.openResource(String) call org.apache.lucene.analysis.util.ResourceLoader.openResource(String) call org.apache.lucene.analysis.util.ResourceLoader.openResource(String) call org.apache.lucene.analysis.util.ResourceLoader.openResource(String) else = new call TransformerFactory.setErrorListener() call TransformerFactory.setErrorListener() call TransformerFactory.setErrorListener() call TransformerFactory.setErrorListener() call TransformerFactory.setErrorListener() try = call TransformerFactory.newTransformer() call TransformerFactory.newTransformer() call TransformerFactory.newTransformer() call TransformerFactory.newTransformer() call TransformerFactory.newTransformer() finally call StreamSource.getInputStream() call StreamSource.getInputStream() call StreamSource.getInputStream() call StreamSource.getInputStream() call StreamSource.getInputStream() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call decl javax.getClass() call decl javax.getClass() call decl javax.getClass() call decl javax.getClass() call decl javax.getClass() catch throw new if = new call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) else decl_stmt java.lang.String = if == throw new + + try = new for < : if == continue decl_stmt int = if = decl_stmt java.lang.String = = call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) call org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean) catch throw new decl_stmt java.lang.String = decl_stmt java.util.List < = == : for : if + if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + for < : if != && if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl Map public < public < decl_stmt java.util.Map < if ! return while = if == return if == || call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() != return public public < String decl Map Object private < private < decl_stmt java.util.Map < = while if == = if == decl_stmt java.lang.Object = try if || decl_stmt java.lang.String = if == = = if == return else return finally return decl Set decl Map Object private private decl_stmt java.util.Map < = new <> decl_stmt java.util.Set < = new <> if != call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() if != call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() return for : decl_stmt java.lang.Object = if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() Object private private < if != for : if == decl_stmt java.lang.Object = if != String SimpleCharArrayReader decl List Reader decl Map private private decl_stmt java.io.Reader = try decl_stmt java.util.List final final final < < = new <> try = call decl DataSource.getData() call decl DataSource.getData() call decl DataSource.getData() call decl DataSource.getData() call decl DataSource.getData() catch if else if if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + = return if != try decl_stmt SimpleCharArrayReader = new call decl javax.transform() call decl javax.transform() call decl javax.transform() call decl javax.transform() call decl javax.transform() new new = call SimpleCharArrayReader.getReader() call SimpleCharArrayReader.getReader() call SimpleCharArrayReader.getReader() call SimpleCharArrayReader.getReader() call SimpleCharArrayReader.getReader() catch if else if else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + = return if = else try call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) new public public < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch decl_stmt java.lang.String = + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > += + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - if else if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() finally if ! public public < private private try catch List Object decl List decl List decl Map protected < protected < < if decl_stmt java.util.List < = < decl_stmt java.util.List < = < decl_stmt java.util.Map < = new <> for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() && < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if instanceof decl_stmt java.util.List = call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else decl_stmt java.util.List = new call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return else return public public return new Object Object private < private < < decl_stmt java.lang.Object = if != = if != if != for : = if != for : decl_stmt java.lang.Object = if != return int AtomicBoolean AtomicBoolean String decl AtomicReference decl BlockingQueue decl Map decl Map private < < private < < final final final final decl_stmt java.util.concurrent.atomic.AtomicReference final final final < = new <> decl_stmt java.util.concurrent.BlockingQueue final final final < < = new <> decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new = new public public try call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) new public public < if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) throw new decl_stmt java.util.Map < try = catch call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) return catch if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() finally if ! call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() private private < try while ! call decl BlockingQueue.offer() call decl BlockingQueue.offer() call decl BlockingQueue.offer() call decl BlockingQueue.offer() call decl BlockingQueue.offer() if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() catch return finally synchronized call int.start() call int.start() call int.start() call int.start() call int.start() return new < < decl_stmt java.util.Map private < decl_stmt int = public public return ! call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() public < public < decl_stmt java.util.Map < do try = call decl BlockingQueue.poll() call decl BlockingQueue.poll() call decl BlockingQueue.poll() call decl BlockingQueue.poll() call decl BlockingQueue.poll() if == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) return == if == call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) if call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() != decl_stmt java.lang.String = + + + if != += + if call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() else if call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() call decl AtomicReference.get() return ++ return = public public decl Map public public try call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) call org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler) new public public < if throw new decl_stmt java.util.Map < try = catch return catch if finally if ! decl Map public public < if throw new decl_stmt java.util.Map < try = catch return private private < try while ! if return call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() catch return finally synchronized public public return ! String decl Map public < public < decl_stmt java.util.Map < do try = if == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return == if == if != decl_stmt java.lang.String = + + + if != += + if else if else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return ++ return = public public