org.apache.lucene.util.packed java.io.IOException import java.nio.ByteBuffer import java.nio.LongBuffer import java.util.ArrayList import java.util.Arrays import java.util.List import java.util.Locale import java.util.Random import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.DataInput import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.IndexOutput import org.apache.lucene.store.RAMDirectory import org.apache.lucene.util.LongValues import org.apache.lucene.util.LongsRef import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.RamUsageTester import org.apache.lucene.util.TestUtil import org.apache.lucene.util.packed.PackedInts.Reader import org.junit.Ignore import com.carrotsearch.randomizedtesting.generators.RandomInts import class org.apache.lucene.util.packed.TestPackedInts super super extends int String int long public public decl_stmt int final final = for = < ++ decl_stmt int final final = for : for = <= ++ decl_stmt long final final = decl_stmt java.lang.String = + + + + + + + * >= long * if == - * < long * public public long - - public public decl PackedInts decl Reader int int decl ReaderIterator int IndexOutput LongsRef decl PackedInts int decl long long float long IndexInput Directory decl ReaderIterator long int decl PackedInts int decl PackedInts decl Writer public public throws decl_stmt int = for = < ++ for = <= ++ decl_stmt long final final = decl_stmt int final final = decl_stmt int final final = : decl_stmt org.apache.lucene.store.Directory final final = decl_stmt org.apache.lucene.store.IndexOutput = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() decl_stmt float final final if == = else = decl_stmt Writer = decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt int final final = : decl_stmt long final final final = new for = < ++ if == = else = call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt long final final = call decl PackedInts.getFormat() call decl PackedInts.getFormat() call decl PackedInts.getFormat() call decl PackedInts.getFormat() call decl PackedInts.getFormat() - decl_stmt org.apache.lucene.store.IndexInput = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl PackedInts.getFormat() call decl PackedInts.getFormat() call decl PackedInts.getFormat() call decl PackedInts.getFormat() call decl PackedInts.getFormat() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl ReaderIterator.readVInt() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() decl_stmt org.apache.lucene.store.IndexInput = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() decl_stmt java.io.Reader = call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() for = < ++ + + + + + + + call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() decl_stmt long final final = decl_stmt long final final = call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.ramBytesUsed() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() + + + + decl_stmt org.apache.lucene.store.IndexInput = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() decl_stmt ReaderIterator = for = < ++ + + + + + + + call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.ord() call decl PackedInts.ord() call decl PackedInts.ord() call decl PackedInts.ord() call decl PackedInts.ord() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() decl_stmt org.apache.lucene.store.IndexInput = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() decl_stmt ReaderIterator = decl_stmt int = while < decl_stmt int final final = decl_stmt org.apache.lucene.util.LongsRef final final = call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.next() for = < ++ + + + + + + + call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() + + += call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() decl_stmt org.apache.lucene.store.IndexInput = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() decl_stmt java.io.Reader = for = < ++ decl_stmt java.lang.String final final = + + + + + + + call int.getClass() call int.getClass() call int.getClass() call int.getClass() call int.getClass() decl_stmt int final final = call int.get() call int.get() call int.get() call int.get() call int.get() call int.get() call int.get() call int.get() call int.get() call int.get() call int.size() call int.size() call int.size() call int.size() call int.size() - call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.getFilePointer() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() call decl ReaderIterator.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() decl ReaderIterator long decl PackedInts int IndexInput String Directory IndexOutput public public throws decl_stmt org.apache.lucene.store.Directory final final = decl_stmt int final final = decl_stmt org.apache.lucene.store.IndexOutput final final = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() for = < ++ call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput final final = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() for = <= ++ for = <= ++ for : if ! continue decl_stmt long final final = decl_stmt java.lang.String = + + + + + + + call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt ReaderIterator final final final final final = << for = < ++ call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.next() call decl PackedInts.next() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt java.io.Reader final final final final final = call decl ReaderIterator.get() call decl ReaderIterator.get() call decl ReaderIterator.get() call decl ReaderIterator.get() call decl ReaderIterator.get() - call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() int decl List int public public decl_stmt int final final = decl_stmt int final final = decl_stmt java.util.List < = for : for = < ++ + int decl Mutable long decl PackedInts decl long long int int int int int int decl Mutable decl PackedInts int public public decl_stmt int final final = for = < ++ if + decl_stmt int final final = decl_stmt int = decl_stmt int = if > decl_stmt int = = = if + + + + + decl_stmt Mutable final final final final final = decl_stmt Mutable final final final final final = decl_stmt long final final = for = < ++ decl_stmt long final final = call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl Mutable.set() call decl Mutable.set() call decl Mutable.set() call decl Mutable.set() call decl Mutable.set() decl_stmt long final final final = new for = < ++ decl_stmt int = - decl_stmt int = - decl_stmt int if + + + if == = else = - if decl_stmt int = call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() <= decl_stmt int = call decl Mutable.set() call decl Mutable.set() call decl Mutable.set() call decl Mutable.set() call decl Mutable.set() <= else * for = < ++ + call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl Mutable.get() call decl Mutable.get() call decl Mutable.get() call decl Mutable.get() call decl Mutable.get() int int public public decl_stmt int final final = : for = < ++ decl_stmt int final final = for = <= ++ decl List private static private static decl_stmt java.util.List < = for : try catch decl List private static < private static < decl_stmt java.util.List < = new <> if <= call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new if <= call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new if <= && <= call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new if <= call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new if <= && <= call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new if <= call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new for = <= ++ if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return Random long private static private static decl_stmt java.util.Random = new for = < ++ decl_stmt long = private static private static < extends extends extends extends decl Reader decl PackedInts private static private static < extends extends extends extends if == return decl_stmt java.io.Reader = decl_stmt int = call decl PackedInts.size() call decl PackedInts.size() call decl PackedInts.size() call decl PackedInts.size() call decl PackedInts.size() for : + for = < ++ for = < ++ call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() long IndexInput decl Writer decl PackedInts long Reader Directory IndexOutput public public throws for = <= ++ decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.store.IndexOutput = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() decl_stmt Writer = decl_stmt long = & call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() decl_stmt java.io.Reader = decl_stmt java.lang.String = + call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() call decl PackedInts.getClass() + + call IndexInput.size() call IndexInput.size() call IndexInput.size() call IndexInput.size() call IndexInput.size() call IndexInput.get() call IndexInput.get() call IndexInput.get() call IndexInput.get() call IndexInput.get() call long.getFilePointer() call long.getFilePointer() call long.getFilePointer() call long.getFilePointer() call long.getFilePointer() call long.close() call long.close() call long.close() call long.close() call long.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() decl PackedInts public public decl_stmt Mutable = new call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.set() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() int Packed64SingleBlock Packed64 int Packed8ThreeBlocks Packed16ThreeBlocks int public public decl_stmt int = int + decl_stmt int = decl_stmt org.apache.lucene.util.packed.Packed64 = try = new catch if != call org.apache.lucene.util.packed.Packed64.set(int,long) call org.apache.lucene.util.packed.Packed64.set(int,long) call org.apache.lucene.util.packed.Packed64.set(int,long) call org.apache.lucene.util.packed.Packed64.set(int,long) call org.apache.lucene.util.packed.Packed64.set(int,long) - + - + call org.apache.lucene.util.packed.Packed64.get(int,long,int,int) call org.apache.lucene.util.packed.Packed64.get(int,long,int,int) call org.apache.lucene.util.packed.Packed64.get(int,long,int,int) call org.apache.lucene.util.packed.Packed64.get(int,long,int,int) call org.apache.lucene.util.packed.Packed64.get(int,long,int,int) - = decl_stmt org.apache.lucene.util.packed.Packed64SingleBlock = try = catch if != call org.apache.lucene.util.packed.Packed64SingleBlock.set(int,long) call org.apache.lucene.util.packed.Packed64SingleBlock.set(int,long) call org.apache.lucene.util.packed.Packed64SingleBlock.set(int,long) call org.apache.lucene.util.packed.Packed64SingleBlock.set(int,long) call org.apache.lucene.util.packed.Packed64SingleBlock.set(int,long) - + - + + call Packed64SingleBlock.getClass() call Packed64SingleBlock.getClass() call Packed64SingleBlock.getClass() call Packed64SingleBlock.getClass() call Packed64SingleBlock.getClass() call org.apache.lucene.util.packed.Packed64SingleBlock.get(int) call org.apache.lucene.util.packed.Packed64SingleBlock.get(int) call org.apache.lucene.util.packed.Packed64SingleBlock.get(int) call org.apache.lucene.util.packed.Packed64SingleBlock.get(int) call org.apache.lucene.util.packed.Packed64SingleBlock.get(int) - decl_stmt int = / + decl_stmt org.apache.lucene.util.packed.Packed8ThreeBlocks = try = new catch if != call org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int,long,int,int) call org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int,long,int,int) call org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int,long,int,int) call org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int,long,int,int) call org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int,long,int,int) - + - + call org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int,long,int,int) call org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int,long,int,int) call org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int,long,int,int) call org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int,long,int,int) call org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int,long,int,int) - = = / + decl_stmt org.apache.lucene.util.packed.Packed16ThreeBlocks = try = new catch if != call org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int,long,int,int) call org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int,long,int,int) call org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int,long,int,int) call org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int,long,int,int) call org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int,long,int,int) - + - + call org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int,long,int,int) call org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int,long,int,int) call org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int,long,int,int) call org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int,long,int,int) call org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int,long,int,int) - = decl List int long int int String public public decl_stmt int final final = decl_stmt int final final = + decl_stmt int final final = + + - for = <= ++ decl_stmt long final final = decl_stmt java.util.List < = for : decl_stmt java.lang.String = + + + + + + + + for = < ++ if >= && < + + else + + Reader decl long int int public public decl_stmt int = decl_stmt java.io.Reader = new call Reader.get() call Reader.get() call Reader.get() call Reader.get() call Reader.get() - decl_stmt long = new + decl_stmt int = call Reader.get() call Reader.get() call Reader.get() call Reader.get() call Reader.get() - - for -- >= -- = call Reader.get() call Reader.get() call Reader.get() call Reader.get() call Reader.get() + - for = < - ++ decl List int decl long int String long int int String int public public decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = * decl_stmt int final final = for = <= ++ decl_stmt long = decl_stmt java.util.List < = for : for = < ++ * - & decl_stmt long = new + decl_stmt java.lang.String = + + + + + + + + decl_stmt int final final = > <= <= - for = < ++ decl_stmt java.lang.String = + + if >= && < + - + else decl List int decl long int String long int int int String public public decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = * decl_stmt int final final = decl_stmt long = new + for = <= ++ decl_stmt long = decl_stmt java.util.List < = for = < ++ = * + & for : decl_stmt java.lang.String = + + + + + + + + decl_stmt int final final = > <= for = < ++ decl_stmt java.lang.String = + + if >= && < + - + else int int int String long int int String public public decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = - - decl_stmt int final final = for = <= ++ decl_stmt long = for : for = < ++ * - & for : decl_stmt java.lang.String = + + + + + + + + + + + for = < ++ decl_stmt java.lang.String = + + if >= && < + - + else int GrowableWriter public public decl_stmt int final final = + decl_stmt org.apache.lucene.util.packed.GrowableWriter = new call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) - call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) - << << call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) - call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) << - << call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) - call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) call org.apache.lucene.util.packed.GrowableWriter.set(int,long) - call GrowableWriter.getBitsPerValue() call GrowableWriter.getBitsPerValue() call GrowableWriter.getBitsPerValue() call GrowableWriter.getBitsPerValue() call GrowableWriter.getBitsPerValue() << call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) - call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) - call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) << - call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) - << call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) call org.apache.lucene.util.packed.GrowableWriter.get(int) - call org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed() call org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed() call org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed() call org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed() call org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed() int int PagedGrowableWriter long LongValues decl PackedLongValues PagedGrowableWriter decl Builder public public decl_stmt int = << decl_stmt org.apache.lucene.util.packed.PagedGrowableWriter = new call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() decl_stmt org.apache.lucene.util.fst.Builder = decl_stmt int = decl_stmt long = for = < ++ call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() if = : = new call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() decl_stmt org.apache.lucene.util.LongValues final final = call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() for = - >= -- call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call long.get() call long.get() call long.get() call long.get() call long.get() for = < ++ call long.get() call long.get() call long.get() call long.get() call long.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.ramBytesUsed() call PagedGrowableWriter.ramBytesUsed() call PagedGrowableWriter.ramBytesUsed() call PagedGrowableWriter.ramBytesUsed() call PagedGrowableWriter.ramBytesUsed() decl_stmt org.apache.lucene.util.packed.PagedGrowableWriter = call PagedGrowableWriter.resize() call PagedGrowableWriter.resize() call PagedGrowableWriter.resize() call PagedGrowableWriter.resize() call PagedGrowableWriter.resize() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() / call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() * / for = < call LongValues.size() call LongValues.size() call LongValues.size() call LongValues.size() call LongValues.size() ++ if < call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) else call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) decl_stmt org.apache.lucene.util.packed.PagedGrowableWriter = call PagedGrowableWriter.grow() call PagedGrowableWriter.grow() call PagedGrowableWriter.grow() call PagedGrowableWriter.grow() call PagedGrowableWriter.grow() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() / call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() * / for = < call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() ++ if < call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() else call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() int long PagedMutable int int LongValues decl PackedLongValues PagedMutable decl Builder public public decl_stmt int final final = decl_stmt long final final = decl_stmt int = << decl_stmt org.apache.lucene.util.packed.PagedMutable = new / call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() decl_stmt org.apache.lucene.util.fst.Builder = decl_stmt int = for = < ++ call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() == : = new call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() decl_stmt org.apache.lucene.util.LongValues final final = call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() for = - >= -- call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call PagedMutable.set() call int.get() call int.get() call int.get() call int.get() call int.get() for = < ++ call int.get() call int.get() call int.get() call int.get() call int.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() - call PagedMutable.ramBytesUsed() call PagedMutable.ramBytesUsed() call PagedMutable.ramBytesUsed() call PagedMutable.ramBytesUsed() call PagedMutable.ramBytesUsed() decl_stmt org.apache.lucene.util.packed.PagedMutable = call PagedMutable.resize() call PagedMutable.resize() call PagedMutable.resize() call PagedMutable.resize() call PagedMutable.resize() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() / call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() * / for = < call LongValues.size() call LongValues.size() call LongValues.size() call LongValues.size() call LongValues.size() ++ if < call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) else call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) call org.apache.lucene.util.LongValues.get(long) decl_stmt org.apache.lucene.util.packed.PagedMutable = call PagedMutable.grow() call PagedMutable.grow() call PagedMutable.grow() call PagedMutable.grow() call PagedMutable.grow() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() / call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() * / for = < call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() ++ if < call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.size() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() else call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() call PagedMutable.get() long PagedGrowableWriter long int long public public decl_stmt long final final = * long * long decl_stmt int final final = << decl_stmt org.apache.lucene.util.packed.PagedGrowableWriter final final = new decl_stmt long final final = long - call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() for = < ++ decl_stmt long final final = if == call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() else call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() decl List decl PackedInts int int IndexInput RAMDirectory IndexOutput public public throws decl_stmt int final final = for = <= ++ decl_stmt int final final = int decl_stmt org.apache.lucene.store.RAMDirectory final final = new decl_stmt java.util.List < = for : for = < ++ decl_stmt org.apache.lucene.store.IndexOutput = call RAMDirectory.createOutput() call RAMDirectory.createOutput() call RAMDirectory.createOutput() call RAMDirectory.createOutput() call RAMDirectory.createOutput() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput = call org.apache.lucene.store.RAMDirectory.openInput(String,IOContext) call org.apache.lucene.store.RAMDirectory.openInput(String,IOContext) call org.apache.lucene.store.RAMDirectory.openInput(String,IOContext) call org.apache.lucene.store.RAMDirectory.openInput(String,IOContext) call org.apache.lucene.store.RAMDirectory.openInput(String,IOContext) decl_stmt java.io.Reader = call decl PackedInts.size() call decl PackedInts.size() call decl PackedInts.size() call decl PackedInts.size() call decl PackedInts.size() if instanceof instanceof else instanceof for = < ++ call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call decl PackedInts.get() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call org.apache.lucene.store.RAMDirectory.deleteFile(String) call org.apache.lucene.store.RAMDirectory.deleteFile(String) call org.apache.lucene.store.RAMDirectory.deleteFile(String) call org.apache.lucene.store.RAMDirectory.deleteFile(String) call org.apache.lucene.store.RAMDirectory.deleteFile(String) call org.apache.lucene.store.RAMDirectory.close() call org.apache.lucene.store.RAMDirectory.close() call org.apache.lucene.store.RAMDirectory.close() call org.apache.lucene.store.RAMDirectory.close() call org.apache.lucene.store.RAMDirectory.close() int decl byte int int String int int int decl long int decl PackedInts decl PackedInts int decl Encoder int decl long decl long decl Decoder decl long decl long int decl int int public public for : for = <= ++ if ! continue decl_stmt java.lang.String = + + decl_stmt org.apache.lucene.search.highlight.Encoder final final final final final = decl_stmt org.apache.solr.core.Decoder final final final final final = decl_stmt int final final = call decl PackedInts.longBlockCount() call decl PackedInts.longBlockCount() call decl PackedInts.longBlockCount() call decl PackedInts.longBlockCount() call decl PackedInts.longBlockCount() decl_stmt int final final = call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() call decl PackedInts.longValueCount() decl_stmt int final final = call decl PackedInts.byteBlockCount() call decl PackedInts.byteBlockCount() call decl PackedInts.byteBlockCount() call decl PackedInts.byteBlockCount() call decl PackedInts.byteBlockCount() decl_stmt int final final = call decl PackedInts.byteValueCount() call decl PackedInts.byteValueCount() call decl PackedInts.byteValueCount() call decl PackedInts.byteValueCount() call decl PackedInts.byteValueCount() call decl Encoder.longBlockCount() call decl Encoder.longBlockCount() call decl Encoder.longBlockCount() call decl Encoder.longBlockCount() call decl Encoder.longBlockCount() call decl Encoder.longValueCount() call decl Encoder.longValueCount() call decl Encoder.longValueCount() call decl Encoder.longValueCount() call decl Encoder.longValueCount() call decl Encoder.byteBlockCount() call decl Encoder.byteBlockCount() call decl Encoder.byteBlockCount() call decl Encoder.byteBlockCount() call decl Encoder.byteBlockCount() call decl Encoder.byteValueCount() call decl Encoder.byteValueCount() call decl Encoder.byteValueCount() call decl Encoder.byteValueCount() call decl Encoder.byteValueCount() decl_stmt int final final = decl_stmt int final final = * / * * decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = * decl_stmt long final final final = new + for = < ++ = if == && != decl_stmt int final final = = << >>> decl_stmt long final final final = new + * call decl Encoder.decode() call decl Encoder.decode() call decl Encoder.decode() call decl Encoder.decode() call decl Encoder.decode() for : <= decl_stmt int final final final if <= = new call decl Encoder.decode() call decl Encoder.decode() call decl Encoder.decode() call decl Encoder.decode() call decl Encoder.decode() else = decl_stmt long final final final = new + call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() if <= decl_stmt long final final final = new call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() decl_stmt byte final final final = new * decl_stmt long final final final = new + * call decl Encoder.decode() call decl Encoder.decode() call decl Encoder.decode() call decl Encoder.decode() call decl Encoder.decode() * for : <= if <= decl_stmt int final final final = new call decl Encoder.decode() call decl Encoder.decode() call decl Encoder.decode() call decl Encoder.decode() call decl Encoder.decode() * decl_stmt byte final final final = new * + call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() * if <= decl_stmt byte final final final = new call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() call decl PackedInts.encode() * private static private static if != return for = < ++ if & != return return float long long int public public decl_stmt int final final = << decl_stmt float final final = decl_stmt long final final = decl_stmt long final final = + + + * decl long int PackedLongValues int decl Iterator decl float float long decl PackedLongValues decl PackedLongValues decl Builder public public decl_stmt long final final final = new : decl_stmt float = new for : new for : decl_stmt int final final = << decl_stmt float = - decl_stmt org.apache.lucene.util.fst.Builder decl_stmt int final final switch case = = break case = = break case = = - break default: throw new if == = for = < ++ = - + else if == for = < ++ = else decl_stmt long final final = - for = < ++ = + * + & for = < ++ call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() if decl_stmt long final final = decl_stmt long final final = call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() call decl PackedLongValues.size() decl_stmt org.apache.lucene.util.packed.PackedLongValues final final = call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.build() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call long.size() call long.size() call long.size() call long.size() call long.size() for = < ++ call long.get() call long.get() call long.get() call long.get() call long.get() decl_stmt java.util.Iterator final final final final final = call long.iterator() call long.iterator() call long.iterator() call long.iterator() call long.iterator() for = < ++ if call org.apache.lucene.util.packed.PackedLongValues.hasNext() call org.apache.lucene.util.packed.PackedLongValues.hasNext() call org.apache.lucene.util.packed.PackedLongValues.hasNext() call org.apache.lucene.util.packed.PackedLongValues.hasNext() call org.apache.lucene.util.packed.PackedLongValues.hasNext() call org.apache.lucene.util.packed.PackedLongValues.next() call org.apache.lucene.util.packed.PackedLongValues.next() call org.apache.lucene.util.packed.PackedLongValues.next() call org.apache.lucene.util.packed.PackedLongValues.next() call org.apache.lucene.util.packed.PackedLongValues.next() call org.apache.lucene.util.packed.PackedLongValues.hasNext() call org.apache.lucene.util.packed.PackedLongValues.hasNext() call org.apache.lucene.util.packed.PackedLongValues.hasNext() call org.apache.lucene.util.packed.PackedLongValues.hasNext() call org.apache.lucene.util.packed.PackedLongValues.hasNext() decl_stmt long final final = decl_stmt long final final = call long.ramBytesUsed() call long.ramBytesUsed() call long.ramBytesUsed() call long.ramBytesUsed() call long.ramBytesUsed() PackedDataInput decl long decl boolean decl int IndexInput PackedDataOutput int long Directory IndexOutput public public throws decl_stmt long final final final = new decl_stmt int final final final = new decl_stmt boolean final final final = new for = < ++ decl_stmt int final final = = : if == = else = = decl_stmt org.apache.lucene.store.Directory final final = decl_stmt org.apache.lucene.store.IndexOutput final final = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() decl_stmt org.apache.lucene.util.packed.PackedDataOutput = new decl_stmt long = for = < ++ call PackedDataOutput.writeLong() call PackedDataOutput.writeLong() call PackedDataOutput.writeLong() call PackedDataOutput.writeLong() call PackedDataOutput.writeLong() += if call org.apache.lucene.util.packed.PackedDataOutput.flush() call org.apache.lucene.util.packed.PackedDataOutput.flush() call org.apache.lucene.util.packed.PackedDataOutput.flush() call org.apache.lucene.util.packed.PackedDataOutput.flush() call org.apache.lucene.util.packed.PackedDataOutput.flush() = * long double / call org.apache.lucene.util.packed.PackedDataOutput.flush() call org.apache.lucene.util.packed.PackedDataOutput.flush() call org.apache.lucene.util.packed.PackedDataOutput.flush() call org.apache.lucene.util.packed.PackedDataOutput.flush() call org.apache.lucene.util.packed.PackedDataOutput.flush() long double / call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput final final = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() decl_stmt org.apache.lucene.util.packed.PackedDataInput final final = new for = < ++ + call PackedDataInput.readLong() call PackedDataInput.readLong() call PackedDataInput.readLong() call PackedDataInput.readLong() call PackedDataInput.readLong() if call org.apache.lucene.util.packed.PackedDataInput.skipToNextByte() call org.apache.lucene.util.packed.PackedDataInput.skipToNextByte() call org.apache.lucene.util.packed.PackedDataInput.skipToNextByte() call org.apache.lucene.util.packed.PackedDataInput.skipToNextByte() call org.apache.lucene.util.packed.PackedDataInput.skipToNextByte() long double / call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() long BlockPackedReader DataInput BlockPackedReaderIterator int int BlockPackedWriter IndexInput ByteArrayDataInput long int int decl long int BlockPackedReaderIterator LongsRef decl byte int Directory IndexOutput public public throws decl_stmt int final final = for = < ++ decl_stmt int final final = << decl_stmt int final final = << decl_stmt long final final final = new decl_stmt long = decl_stmt int = for = < ++ if == = : - : = if == = else if == = else = + << - decl_stmt org.apache.lucene.store.Directory final final = decl_stmt org.apache.lucene.store.IndexOutput final final = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() decl_stmt org.apache.lucene.util.packed.BlockPackedWriter final final = new for = < ++ call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.ord() decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() decl_stmt byte = new int call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() int call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt org.apache.lucene.store.ByteArrayDataInput = new decl_stmt org.apache.lucene.store.DataInput final final = : decl_stmt org.apache.lucene.util.packed.BlockPackedReaderIterator final final = new for = < if + call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() ++ else decl_stmt org.apache.lucene.util.LongsRef final final = call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() for = < ++ + + + + += call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() instanceof : call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() if instanceof else decl_stmt org.apache.lucene.util.packed.BlockPackedReaderIterator final final = new decl_stmt int = while decl_stmt int final final = - call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) += call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() call org.apache.lucene.util.packed.BlockPackedReaderIterator.ord() if == break else call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() ++ instanceof : call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt org.apache.lucene.util.packed.BlockPackedReader final final = new call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() call IndexInput.length() for = < ++ + call BlockPackedReader.get() call BlockPackedReader.get() call BlockPackedReader.get() call BlockPackedReader.get() call BlockPackedReader.get() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() long int int MonotonicBlockPackedWriter MonotonicBlockPackedReader int int decl long IndexInput Directory IndexOutput public public throws decl_stmt int final final = for = < ++ decl_stmt int final final = << decl_stmt int final final = << decl_stmt long final final final = new if > = : decl_stmt int = for = < ++ if < = = - + - decl_stmt org.apache.lucene.store.Directory final final = decl_stmt org.apache.lucene.store.IndexOutput final final = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedWriter final final = new for = < ++ call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput final final = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedReader final final = call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() for = < ++ + call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long) call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() BlockPackedReader int BlockPackedWriter BlockPackedReaderIterator long long long long IndexInput Directory IndexOutput public public throws decl_stmt long final final = + long * decl_stmt int final final = << decl_stmt org.apache.lucene.store.Directory final final = decl_stmt org.apache.lucene.store.IndexOutput final final = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() decl_stmt org.apache.lucene.util.packed.BlockPackedWriter final final = new decl_stmt long = & decl_stmt long = - for = < call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.ord() call BlockPackedWriter.ord() if & - == && + < || || && + < call BlockPackedWriter.addBlockOfZeros() call BlockPackedWriter.addBlockOfZeros() call BlockPackedWriter.addBlockOfZeros() call BlockPackedWriter.addBlockOfZeros() call BlockPackedWriter.addBlockOfZeros() += else if == call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() ++ else call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() ++ call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput final final = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() decl_stmt org.apache.lucene.util.packed.BlockPackedReaderIterator final final = new call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long) call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call org.apache.lucene.util.packed.BlockPackedReaderIterator.next() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt org.apache.lucene.util.packed.BlockPackedReader final final = new call BlockPackedReader.get() call BlockPackedReader.get() call BlockPackedReader.get() call BlockPackedReader.get() call BlockPackedReader.get() for = < ++ decl_stmt long final final = - if == call BlockPackedReader.get() call BlockPackedReader.get() call BlockPackedReader.get() call BlockPackedReader.get() call BlockPackedReader.get() else call BlockPackedReader.get() call BlockPackedReader.get() call BlockPackedReader.get() call BlockPackedReader.get() call BlockPackedReader.get() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close()