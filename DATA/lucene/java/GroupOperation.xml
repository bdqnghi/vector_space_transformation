org.apache.solr.client.solrj.io.ops org.apache.solr.client.solrj.io.Tuple import org.apache.solr.client.solrj.io.comp.FieldComparator import org.apache.solr.client.solrj.io.comp.StreamComparator import org.apache.solr.client.solrj.io.stream.expr.Expressible import org.apache.solr.client.solrj.io.stream.expr.StreamExpression import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionNamedParameter import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionParameter import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionValue import org.apache.solr.client.solrj.io.stream.expr.StreamFactory import java.io.IOException import java.io.Serializable import java.util.Comparator import java.util.List import java.util.ArrayList import java.util.Locale import java.util.Map import java.util.HashMap import java.util.LinkedList import java.util.PriorityQueue import class org.apache.solr.client.solrj.io.ops.GroupOperation super super implements decl PriorityQueue Comparator StreamComparator int private private = = = new = new StreamExpression public public throws decl_stmt org.apache.solr.client.solrj.io.stream.expr.StreamExpression = new call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new call StreamComparator.toExpression() call StreamComparator.toExpression() call StreamComparator.toExpression() call StreamComparator.toExpression() call StreamComparator.toExpression() return Map LinkedList decl List Map public public decl_stmt java.util.Map = new decl_stmt java.util.List < = new decl_stmt java.util.LinkedList = new while call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() > call java.util.LinkedList.addFirst(E) call java.util.LinkedList.addFirst(E) call java.util.LinkedList.addFirst(E) call java.util.LinkedList.addFirst(E) call java.util.LinkedList.addFirst(E) call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() decl_stmt java.util.Map = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.util.Map.putAll(Map) call java.util.Map.putAll(Map) call java.util.Map.putAll(Map) call java.util.Map.putAll(Map) call java.util.Map.putAll(Map) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) return new Tuple public public if call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() >= decl_stmt org.apache.solr.client.solrj.io.Tuple = call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() if call StreamComparator.compare() call StreamComparator.compare() call StreamComparator.compare() call StreamComparator.compare() call StreamComparator.compare() < call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() else call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() public public return call Comparator.compare() call Comparator.compare() call Comparator.compare() call Comparator.compare() call Comparator.compare() * -