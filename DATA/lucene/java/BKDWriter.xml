org.apache.lucene.util.bkd java.io.Closeable import java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Comparator import java.util.List import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.index.MergeState import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.ChecksumIndexInput import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexOutput import org.apache.lucene.store.TrackingDirectoryWrapper import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.IOUtils import org.apache.lucene.util.IntroSorter import org.apache.lucene.util.LongBitSet import org.apache.lucene.util.NumericUtils import org.apache.lucene.util.OfflineSorter import org.apache.lucene.util.PriorityQueue import org.apache.lucene.util.StringHelper import class org.apache.lucene.util.bkd.BKDWriter super super implements int int IndexOutput int float int decl byte OfflinePointWriter decl byte long double decl int String int decl BufferSize int int decl byte int FixedBitSet long boolean decl byte TrackingDirectoryWrapper int int BytesRef HeapPointWriter boolean decl byte String int decl OfflineSorter public static public static if < || || throw new + + + + if <= throw new + if > throw new + + + if < throw new + + if < throw new + + boolean PointReader private private throws = new = decl_stmt org.apache.lucene.util.bkd.PointReader = call org.apache.lucene.util.bkd.HeapPointWriter.getReader(long,long) call org.apache.lucene.util.bkd.HeapPointWriter.getReader(long,long) call org.apache.lucene.util.bkd.HeapPointWriter.getReader(long,long) call org.apache.lucene.util.bkd.HeapPointWriter.getReader(long,long) call org.apache.lucene.util.bkd.HeapPointWriter.getReader(long,long) for = < ++ decl_stmt boolean = call PointReader.next() call PointReader.next() call PointReader.next() call PointReader.next() call PointReader.next() assert call org.apache.lucene.util.bkd.OfflinePointWriter.append(byte,long,int) call org.apache.lucene.util.bkd.OfflinePointWriter.append(byte,long,int) call org.apache.lucene.util.bkd.OfflinePointWriter.append(byte,long,int) call org.apache.lucene.util.bkd.OfflinePointWriter.append(byte,long,int) call org.apache.lucene.util.bkd.OfflinePointWriter.append(byte,long,int) call PointReader.packedValue() call PointReader.packedValue() call PointReader.packedValue() call PointReader.packedValue() call PointReader.packedValue() = int public public throws if != throw new + + + + if >= if == call org.apache.lucene.util.bkd.OfflinePointWriter.append(byte,long,int) call org.apache.lucene.util.bkd.OfflinePointWriter.append(byte,long,int) call org.apache.lucene.util.bkd.OfflinePointWriter.append(byte,long,int) call org.apache.lucene.util.bkd.OfflinePointWriter.append(byte,long,int) call org.apache.lucene.util.bkd.OfflinePointWriter.append(byte,long,int) else call org.apache.lucene.util.bkd.HeapPointWriter.append(byte,long,int) call org.apache.lucene.util.bkd.HeapPointWriter.append(byte,long,int) call org.apache.lucene.util.bkd.HeapPointWriter.append(byte,long,int) call org.apache.lucene.util.bkd.HeapPointWriter.append(byte,long,int) call org.apache.lucene.util.bkd.HeapPointWriter.append(byte,long,int) if == else for = < ++ decl_stmt int = * if < if > ++ if > throw new + + + + call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) public public return int int int public public throws while if == if == return = assert > = for = < ++ decl_stmt int = = if > * ++ decl_stmt int = ++ decl_stmt int if == = else = for = < ++ decl_stmt int = * + - if != - = return int public public assert != decl_stmt int = if < return else if > return return < BKDReader int decl byte decl int decl List int int decl List MergeReader long int BKDMergeQueue MergeReader decl byte decl byte int long decl byte decl MergeState public public < < < throws if != throw new + if != throw new if == && == throw new = assert == || == decl_stmt BKDMergeQueue = new for = < ++ decl_stmt org.apache.lucene.util.bkd.BKDReader = decl_stmt DocMap if == = else = decl_stmt MergeReader = new if call decl byte.next() call decl byte.next() call decl byte.next() call decl byte.next() call decl byte.next() call BKDMergeQueue.add() call BKDMergeQueue.add() call BKDMergeQueue.add() call BKDMergeQueue.add() call BKDMergeQueue.add() if call BKDMergeQueue.size() call BKDMergeQueue.size() call BKDMergeQueue.size() call BKDMergeQueue.size() call BKDMergeQueue.size() == return - decl_stmt int = decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> decl_stmt int = * decl_stmt byte = new decl_stmt byte = new decl_stmt long = decl_stmt int = new decl_stmt byte = new for = < ++ = new while call BKDMergeQueue.size() call BKDMergeQueue.size() call BKDMergeQueue.size() call BKDMergeQueue.size() call BKDMergeQueue.size() != decl_stmt MergeReader = call BKDMergeQueue.top() call BKDMergeQueue.top() call BKDMergeQueue.top() call BKDMergeQueue.top() call BKDMergeQueue.top() decl_stmt int = + = call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) if == assert > || ++ if > throw new + + + + if == if call int.size() call int.size() call int.size() call int.size() call int.size() > call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else for = < ++ decl_stmt int = * for = < ++ if + != + = break ++ if call decl byte.next() call decl byte.next() call decl byte.next() call decl byte.next() call decl byte.next() call BKDMergeQueue.updateTop() call BKDMergeQueue.updateTop() call BKDMergeQueue.updateTop() call BKDMergeQueue.updateTop() call BKDMergeQueue.updateTop() else call BKDMergeQueue.pop() call BKDMergeQueue.pop() call BKDMergeQueue.pop() call BKDMergeQueue.pop() call BKDMergeQueue.pop() if == || call BKDMergeQueue.size() call BKDMergeQueue.size() call BKDMergeQueue.size() call BKDMergeQueue.size() call BKDMergeQueue.size() == call int.add() call int.add() call int.add() call int.add() call int.add() call int.size() call int.size() call int.size() call int.size() call int.size() for = < ++ = = decl_stmt long = decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt byte = new + * + decl_stmt long = new call int.size() call int.size() call int.size() call int.size() call int.size() for = < call int.size() call int.size() call int.size() call int.size() call int.size() ++ = call int.get() call int.get() call int.get() call int.get() call int.get() return int int int int int int private private < if == * + + else if > decl_stmt int = decl_stmt int = while decl_stmt int = - if <= decl_stmt int = / assert >= decl_stmt int = - / + decl_stmt int = + * + + * * + + - - return += *= else assert == int int int int decl byte int int int int int int int int private private final final assert < new decl_stmt byte private final final final = new decl_stmt int private protected protected = decl_stmt int = / decl_stmt int = * + * protected protected decl_stmt int = / decl_stmt int = assert >= : + + + decl_stmt int = * * + if != return return protected protected decl_stmt int = = = if == if decl_stmt long = = = else decl_stmt int = = = decl_stmt byte = / decl_stmt int = * decl_stmt byte = / decl_stmt int = * protected protected decl_stmt int = / decl_stmt int = decl_stmt int = / decl_stmt int = decl_stmt int = * * + * * + if != return return int int protected protected = decl_stmt int = / decl_stmt int = * + * int int int protected protected decl_stmt int = / decl_stmt int = assert >= : + + + decl_stmt int = * * + if != return return int int int int decl byte decl byte protected protected decl_stmt int = = = if == if decl_stmt long = = = else decl_stmt int = = = decl_stmt byte = / decl_stmt int = * decl_stmt byte = / decl_stmt int = * int int int int int protected protected decl_stmt int = / decl_stmt int = decl_stmt int = / decl_stmt int = decl_stmt int = * * + * * + if != return return String BytesRef int OfflineSorter ByteArrayDataInput HeapPointWriter int private private throws if != assert == decl_stmt org.apache.lucene.util.bkd.HeapPointWriter if == = else = new int int call org.apache.lucene.util.bkd.HeapPointWriter.copyFrom(HeapPointWriter) call org.apache.lucene.util.bkd.HeapPointWriter.copyFrom(HeapPointWriter) call org.apache.lucene.util.bkd.HeapPointWriter.copyFrom(HeapPointWriter) call org.apache.lucene.util.bkd.HeapPointWriter.copyFrom(HeapPointWriter) call org.apache.lucene.util.bkd.HeapPointWriter.copyFrom(HeapPointWriter) call org.apache.lucene.util.bkd.HeapPointWriter.close() call org.apache.lucene.util.bkd.HeapPointWriter.close() call org.apache.lucene.util.bkd.HeapPointWriter.close() call org.apache.lucene.util.bkd.HeapPointWriter.close() call org.apache.lucene.util.bkd.HeapPointWriter.close() return else assert != decl_stmt int final final = * decl_stmt java.util.Comparator < = new < decl_stmt org.apache.lucene.store.ByteArrayDataInput final final = new public public decl_stmt int = + + if != return return + + decl_stmt org.apache.lucene.util.OfflineSorter = new + + protected protected return new public public throws assert == : + + + protected protected throws return new decl_stmt org.apache.lucene.util.BytesRef final final = new new public public throws if >= return return decl_stmt java.lang.String = call org.apache.lucene.util.OfflineSorter.sort(String) call org.apache.lucene.util.OfflineSorter.sort(String) call org.apache.lucene.util.OfflineSorter.sort(String) call org.apache.lucene.util.OfflineSorter.sort(String) call org.apache.lucene.util.OfflineSorter.sort(String) call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() return new int public public decl_stmt int = + + if != return return + + protected protected return new public public throws assert == : + + + public public throws assert == : + + + BytesRef protected protected throws return new decl_stmt org.apache.lucene.util.BytesRef final final = new new public public throws if >= return return public public throws if >= return return private private if + * long > throw new + + decl long boolean decl PathSlice long long long LongBitSet int decl List decl byte public public throws if == && == throw new if != call org.apache.lucene.util.bkd.OfflinePointWriter.close() call org.apache.lucene.util.bkd.OfflinePointWriter.close() call org.apache.lucene.util.bkd.OfflinePointWriter.close() call org.apache.lucene.util.bkd.OfflinePointWriter.close() call org.apache.lucene.util.bkd.OfflinePointWriter.close() if == throw new decl_stmt org.apache.lucene.util.LongBitSet if > if = new else = new else = decl_stmt long = decl_stmt long = while > = + / *= decl_stmt int = int decl_stmt byte = new * + decl_stmt long = new assert / <= : + + + + + decl_stmt PathSlice = new decl_stmt java.util.List < = new <> decl_stmt boolean = try for = < ++ = new if != call org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(String) call org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(String) call org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(String) call org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(String) call org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(String) call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() = else assert != = for : assert call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() = finally if == call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() call org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles() decl_stmt long = return long long protected protected throws assert > call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() decl_stmt long = for = < ++ decl_stmt long = - = protected protected throws assert > : + for = < ++ + int protected protected throws for = < ++ decl_stmt int = + * + - protected protected throws for = < ++ * public public throws if != try call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() finally call org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(String) call org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(String) call org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(String) call org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(String) call org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(String) call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() call org.apache.lucene.store.IndexOutput.getName() = public public return + + + + + + String private private throws if instanceof decl_stmt java.lang.String = try = call TrackingDirectoryWrapper.openChecksumInput() call TrackingDirectoryWrapper.openChecksumInput() call TrackingDirectoryWrapper.openChecksumInput() call TrackingDirectoryWrapper.openChecksumInput() call TrackingDirectoryWrapper.openChecksumInput() else boolean private private throws try = + - decl_stmt boolean = assert * if > assert == - catch return int private private for = < ++ decl_stmt int = * if + < return if + > return return int protected protected decl_stmt int = - for = < ++ if == - || > = return int boolean PointReader private private < throws decl_stmt int = decl_stmt org.apache.lucene.util.bkd.PointReader = try = new for = < ++ decl_stmt boolean = call PointReader.next() call PointReader.next() call PointReader.next() call PointReader.next() call PointReader.next() assert call PointReader.packedValue() call PointReader.packedValue() call PointReader.packedValue() call PointReader.packedValue() call PointReader.packedValue() call PointReader.ord() call PointReader.ord() call PointReader.ord() call PointReader.ord() call PointReader.ord() call PointReader.docID() call PointReader.docID() call PointReader.docID() call PointReader.docID() call PointReader.docID() return new catch return int long HeapPointWriter int decl byte int decl byte PointReader PathSlice decl byte decl byte int long int decl PathSlice long decl PathSlice private private < throws for : assert == if == && instanceof && <= = if >= for = < ++ if instanceof == = decl_stmt PathSlice = decl_stmt org.apache.lucene.util.bkd.HeapPointWriter = call org.apache.lucene.util.bkd.HeapPointWriter.readPackedValue(int,byte) call org.apache.lucene.util.bkd.HeapPointWriter.readPackedValue(int,byte) call org.apache.lucene.util.bkd.HeapPointWriter.readPackedValue(int,byte) call org.apache.lucene.util.bkd.HeapPointWriter.readPackedValue(int,byte) call org.apache.lucene.util.bkd.HeapPointWriter.readPackedValue(int,byte) call org.apache.lucene.util.bkd.HeapPointWriter.readPackedValue(int,byte) call org.apache.lucene.util.bkd.HeapPointWriter.readPackedValue(int,byte) call org.apache.lucene.util.bkd.HeapPointWriter.readPackedValue(int,byte) call org.apache.lucene.util.bkd.HeapPointWriter.readPackedValue(int,byte) call org.apache.lucene.util.bkd.HeapPointWriter.readPackedValue(int,byte) + - decl_stmt int = * = for = < ++ if + != + = break decl_stmt PathSlice = decl_stmt org.apache.lucene.util.bkd.HeapPointWriter = - = decl_stmt int = assert > : + + + decl_stmt byte = new for = < ++ call org.apache.lucene.util.bkd.HeapPointWriter.getPackedValueSlice(int,BytesRef) call org.apache.lucene.util.bkd.HeapPointWriter.getPackedValueSlice(int,BytesRef) call org.apache.lucene.util.bkd.HeapPointWriter.getPackedValueSlice(int,BytesRef) call org.apache.lucene.util.bkd.HeapPointWriter.getPackedValueSlice(int,BytesRef) call org.apache.lucene.util.bkd.HeapPointWriter.getPackedValueSlice(int,BytesRef) + assert != || assert else decl_stmt int if > = else = decl_stmt PathSlice = assert < : + + + decl_stmt long = / decl_stmt long = - decl_stmt byte = decl_stmt int = * + = byte + decl_stmt PathSlice = new decl_stmt PathSlice = new decl_stmt byte = new decl_stmt byte = new decl_stmt int if - == = - else = - for = < ++ if == = new = new + * * continue decl_stmt org.apache.lucene.util.bkd.PointReader = try = + , decl_stmt long = call org.apache.lucene.util.bkd.PointReader.split(long,LongBitSet,PointWriter,PointWriter,boolean) call org.apache.lucene.util.bkd.PointReader.split(long,LongBitSet,PointWriter,PointWriter,boolean) call org.apache.lucene.util.bkd.PointReader.split(long,LongBitSet,PointWriter,PointWriter,boolean) call org.apache.lucene.util.bkd.PointReader.split(long,LongBitSet,PointWriter,PointWriter,boolean) call org.apache.lucene.util.bkd.PointReader.split(long,LongBitSet,PointWriter,PointWriter,boolean) == if != throw new + + + = new = new catch * for = < ++ if != * + for = < ++ if !=