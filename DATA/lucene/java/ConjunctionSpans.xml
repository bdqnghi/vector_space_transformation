org.apache.lucene.search.spans java.io.IOException import java.util.List import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.ConjunctionDISI import org.apache.lucene.search.TwoPhaseIterator import class org.apache.lucene.search.spans.ConjunctionSpans super super extends decl Spans DocIdSetIterator boolean boolean public public return call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() call org.apache.lucene.search.DocIdSetIterator.docID() public public return call org.apache.lucene.search.DocIdSetIterator.cost() call org.apache.lucene.search.DocIdSetIterator.cost() call org.apache.lucene.search.DocIdSetIterator.cost() call org.apache.lucene.search.DocIdSetIterator.cost() call org.apache.lucene.search.DocIdSetIterator.cost() public public throws return call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() == : public public throws return call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) call org.apache.lucene.search.DocIdSetIterator.advance(int) == : throws = while if return if call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() == return float float TwoPhaseIterator public public decl_stmt float = for : decl_stmt org.apache.lucene.search.TwoPhaseIterator = if != += call TwoPhaseIterator.matchCost() call TwoPhaseIterator.matchCost() call TwoPhaseIterator.matchCost() call TwoPhaseIterator.matchCost() call TwoPhaseIterator.matchCost() else += decl_stmt float final final = return new public public throws return public public return public public throws return public public return public public throw new public public return