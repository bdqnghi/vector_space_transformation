org.apache.lucene.analysis.ja.dict java.io.BufferedInputStream import java.io.EOFException import java.io.IOException import java.io.FileNotFoundException import java.io.InputStream import java.nio.ByteBuffer import java.nio.channels.Channels import java.nio.channels.ReadableByteChannel import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.store.DataInput import org.apache.lucene.store.InputStreamDataInput import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IOUtils import class org.apache.lucene.analysis.ja.dict.BinaryDictionary super super implements int int int String ByteBuffer decl String String String String decl String String decl int int decl String String protected final protected final throws return InputStream public static final public static final < throws decl_stmt java.io.InputStream final final = + if == throw new + + return public public = = = + - public public return call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() >>> public public return call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() >>> public public return call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() + int char int int int public public if decl_stmt int = decl_stmt int = call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() ++ & decl_stmt int = >>> decl_stmt int = & decl_stmt char = new + for = < ++ + = call ByteBuffer.getChar() call ByteBuffer.getChar() call ByteBuffer.getChar() call ByteBuffer.getChar() call ByteBuffer.getChar() + << return new else return char char int int public public if decl_stmt int = decl_stmt int = call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() ++ & return >>> & == else decl_stmt char = new for = < ++ decl_stmt char = + if > && < = + else = return new public public return int int public public if decl_stmt int = decl_stmt int = call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() ++ & return >>> & == else return public public return public public return private static private static return + int int private private decl_stmt int = if decl_stmt int = call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() ++ & return + << else return int int int private private if decl_stmt int = decl_stmt int = call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() ++ & decl_stmt int final final if & == = & else = >>> return + else return private private return call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() & != private private return call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() & != private private return call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() call ByteBuffer.getShort() & != char private private decl_stmt char = new if for = < ++ = + call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() + & else for = < ++ = call ByteBuffer.getChar() call ByteBuffer.getChar() call ByteBuffer.getChar() call ByteBuffer.getChar() call ByteBuffer.getChar() + << return new