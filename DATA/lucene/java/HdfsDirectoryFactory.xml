org.apache.solr.core static static org.apache.hadoop.fs.CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION import java.io.IOException import java.lang.invoke.MethodHandles import java.net.URLEncoder import java.util.Arrays import java.util.Collection import java.util.Locale import java.util.Set import java.util.concurrent.Callable import java.util.concurrent.ExecutionException import java.util.concurrent.TimeUnit import org.apache.hadoop.conf.Configuration import org.apache.hadoop.fs.FileStatus import org.apache.hadoop.fs.FileSystem import org.apache.hadoop.fs.Path import org.apache.hadoop.fs.PathFilter import org.apache.hadoop.security.UserGroupInformation import org.apache.lucene.store.Directory import org.apache.lucene.store.LockFactory import org.apache.lucene.store.NRTCachingDirectory import org.apache.lucene.store.NoLockFactory import org.apache.lucene.store.SingleInstanceLockFactory import org.apache.solr.cloud.ZkController import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.IOUtils import org.apache.solr.common.util.NamedList import org.apache.solr.store.blockcache.BlockCache import org.apache.solr.store.blockcache.BlockDirectory import org.apache.solr.store.blockcache.BlockDirectoryCache import org.apache.solr.store.blockcache.BufferStore import org.apache.solr.store.blockcache.Cache import org.apache.solr.store.blockcache.Metrics import org.apache.solr.store.hdfs.HdfsDirectory import org.apache.solr.store.hdfs.HdfsLocalityReporter import org.apache.solr.store.hdfs.HdfsLockFactory import org.apache.solr.util.HdfsUtil import org.apache.solr.util.plugin.SolrCoreAware import org.slf4j.Logger import org.slf4j.LoggerFactory import com.google.common.annotations.VisibleForTesting import com.google.common.cache.CacheBuilder import com.google.common.cache.RemovalListener import com.google.common.cache.RemovalNotification import class org.apache.solr.core.HdfsDirectoryFactory super super extends super implements boolean Logger String String boolean Boolean String String String String String decl com SolrParams String String String String String String String String Metrics String String String String String BlockCache public public < decl Collection public public throws decl_stmt java.util.Collection < = call decl com.asMap() call decl com.asMap() call decl com.asMap() call decl com.asMap() call decl com.asMap() for : call decl com.invalidateAll() call decl com.invalidateAll() call decl com.invalidateAll() call decl com.invalidateAll() call decl com.invalidateAll() call decl com.cleanUp() call decl com.cleanUp() call decl com.cleanUp() call decl com.cleanUp() call decl com.cleanUp() boolean public public = = if != && == = else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + = = decl_stmt boolean = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + : if String protected protected throws if == = call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + decl_stmt java.lang.String final final = switch case return case return new case return default: throw new + int BlockCache int int int int Cache double HdfsDirectory boolean boolean boolean boolean Configuration boolean int Directory double protected protected throws assert != : call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt Configuration = if == = decl_stmt boolean = decl_stmt boolean = decl_stmt boolean = decl_stmt org.apache.solr.store.hdfs.HdfsDirectory final final decl_stmt org.apache.lucene.store.Directory final final if && != decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt boolean = decl_stmt int = * call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) new long * long decl_stmt int = decl_stmt int = * decl_stmt org.apache.solr.store.blockcache.BlockCache = decl_stmt org.apache.solr.common.util.Cache = new = new new = new else = new new = if call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) decl_stmt boolean = if decl_stmt double = decl_stmt double = return new return String Boolean decl_stmt java.lang.Boolean = call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) if == decl_stmt java.lang.String = if != = return == : String Integer decl_stmt java.lang.Integer = call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) if == decl_stmt java.lang.String = if != = return == : String decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if == = return == : private private if ! call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return synchronized if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = return BlockCache long private private decl_stmt long = long * long * long decl_stmt org.apache.solr.store.blockcache.BlockCache try = new catch throw new + + + + / + return Path Configuration FileSystem public public decl_stmt java.nio.file.Path final final = new decl_stmt Configuration final final = decl_stmt java.io.FileSystem = try = call decl com.get() call decl com.get() call decl com.get() call decl com.get() call decl com.get() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() catch throw new try return call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new Configuration private private decl_stmt Configuration = new = call Configuration.setBoolean() call Configuration.setBoolean() call Configuration.setBoolean() call Configuration.setBoolean() call Configuration.setBoolean() return boolean Configuration FileSystem protected synchronized protected synchronized final final throws decl_stmt Configuration final final = decl_stmt java.io.FileSystem = try = call decl com.get() call decl com.get() call decl com.get() call decl com.get() call decl com.get() new catch throw new try decl_stmt boolean = call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() new if ! throw new catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new public public return public public return public public return public public return String public public throws if == throw new + + + + decl_stmt java.lang.String if != = + + else = return + + + + public public return String Configuration String String Configuration String private private decl_stmt java.lang.String = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == throw new + + + decl_stmt java.lang.String = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == throw new + + + synchronized if == = new decl_stmt Configuration final final = decl_stmt java.lang.String final final = call Configuration.get() call Configuration.get() call Configuration.get() call Configuration.get() call Configuration.get() decl_stmt java.lang.String final final = if != && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) throw new + + + + decl_stmt Configuration final final = new call Configuration.set() call Configuration.set() call Configuration.set() call Configuration.set() call Configuration.set() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try catch throw new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) public < public < return > public public Path FileSystem decl Set FileSystem boolean Path String decl FileStatus Configuration boolean Path public public final final final final decl_stmt java.nio.file.Path final final = new decl_stmt Configuration final final = decl_stmt java.io.FileSystem = try = call decl com.get() call decl com.get() call decl com.get() call decl com.get() call decl com.get() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() catch throw new decl_stmt boolean = try = call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() call FileSystem.exists() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + if ! call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return decl_stmt java.nio.file.Path final final = new decl_stmt java.io.FileSystem final final = decl_stmt FileStatus = try = call FileSystem.listStatus() call FileSystem.listStatus() call FileSystem.listStatus() call FileSystem.listStatus() call FileSystem.listStatus() new public public decl_stmt boolean = decl_stmt java.lang.String = try = call FileSystem.isDirectory() call FileSystem.isDirectory() call FileSystem.isDirectory() call FileSystem.isDirectory() call FileSystem.isDirectory() && ! && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.matches(String) call java.lang.String.matches(String) call java.lang.String.matches(String) call java.lang.String.matches(String) call java.lang.String.matches(String) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() if == || == return decl_stmt java.util.Set < = for : decl_stmt java.nio.file.Path = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() else try if call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call FileSystem.delete() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() String boolean public public decl_stmt boolean = decl_stmt java.lang.String = try = && ! && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.matches(String) call java.lang.String.matches(String) call java.lang.String.matches(String) call java.lang.String.matches(String) call java.lang.String.matches(String) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return