org.apache.solr.morphlines.solr java.io.File import java.io.IOException import java.lang.invoke.MethodHandles import java.util.List import org.apache.solr.cloud.ZkController import org.apache.solr.common.cloud.Aliases import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkConfigManager import org.apache.solr.common.cloud.ZkNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.util.StrUtils import org.apache.zookeeper.KeeperException import org.slf4j.Logger import org.slf4j.LoggerFactory import com.google.common.base.Preconditions import com.google.common.io.Files import class org.apache.solr.morphlines.solr.ZooKeeperDownloader Logger SolrZkClient public public if == throw new decl_stmt org.apache.solr.common.cloud.SolrZkClient try = new catch throw new + return String decl byte String decl List ZkNodeProps String decl byte Aliases public public throws if == throw new decl_stmt java.lang.String = decl_stmt byte = decl_stmt org.apache.solr.common.cloud.Aliases = decl_stmt java.lang.String = call org.apache.solr.common.cloud.Aliases.getCollectionAlias(String) call org.apache.solr.common.cloud.Aliases.getCollectionAlias(String) call org.apache.solr.common.cloud.Aliases.getCollectionAlias(String) call org.apache.solr.common.cloud.Aliases.getCollectionAlias(String) call org.apache.solr.common.cloud.Aliases.getCollectionAlias(String) if != decl_stmt java.util.List < = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > throw new = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.lang.String = + + if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt byte = if != decl_stmt org.apache.solr.common.cloud.ZkNodeProps = = call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) if != && ! + + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + throw new + return File ZkConfigManager public public throws decl_stmt org.apache.solr.common.cloud.ZkConfigManager = new call org.apache.solr.common.cloud.ZkConfigManager.downloadConfigDir(String,Path) call org.apache.solr.common.cloud.ZkConfigManager.downloadConfigDir(String,Path) call org.apache.solr.common.cloud.ZkConfigManager.downloadConfigDir(String,Path) call org.apache.solr.common.cloud.ZkConfigManager.downloadConfigDir(String,Path) call org.apache.solr.common.cloud.ZkConfigManager.downloadConfigDir(String,Path) decl_stmt File = new if ! call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() = new call File.getParentFile() call File.getParentFile() call File.getParentFile() call File.getParentFile() call File.getParentFile() = call File.getParentFile() call File.getParentFile() call File.getParentFile() call File.getParentFile() call File.getParentFile() return File private private throws decl_stmt File = new if ! call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() throw new + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() if ! call File.isFile() call File.isFile() call File.isFile() call File.isFile() call File.isFile() throw new + call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() if ! call File.canRead() call File.canRead() call File.canRead() call File.canRead() call File.canRead() throw new +