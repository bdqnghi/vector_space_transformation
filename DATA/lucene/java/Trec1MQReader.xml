org.apache.lucene.benchmark.quality.trec java.io.BufferedReader import java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.HashMap import org.apache.lucene.benchmark.quality.QualityQuery import class org.apache.lucene.benchmark.quality.trec.Trec1MQReader String decl HashMap String int QualityQuery QualityQuery decl ArrayList String String public public throws decl_stmt java.util.ArrayList < = new <> decl_stmt java.lang.String try while != = = call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) continue decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + decl_stmt HashMap < = new <> call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() decl_stmt org.apache.lucene.benchmark.quality.QualityQuery = new call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() finally decl_stmt org.apache.lucene.benchmark.quality.QualityQuery = call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new return