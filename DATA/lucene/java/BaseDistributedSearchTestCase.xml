org.apache.solr javax.servlet.Filter import java.io.File import java.io.IOException import java.lang.annotation.ElementType import java.lang.annotation.Retention import java.lang.annotation.RetentionPolicy import java.lang.annotation.Target import java.lang.invoke.MethodHandles import java.nio.file.Files import java.nio.file.Path import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.Date import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Properties import java.util.Random import java.util.Set import java.util.SortedMap import java.util.concurrent.atomic.AtomicInteger import junit.framework.Assert import org.apache.commons.io.FileUtils import org.apache.lucene.util.Constants import org.apache.lucene.util.TestUtil import org.apache.solr.client.solrj.SolrClient import org.apache.solr.client.solrj.SolrResponse import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.embedded.JettyConfig import org.apache.solr.client.solrj.embedded.JettySolrRunner import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.request.UpdateRequest import org.apache.solr.client.solrj.response.QueryResponse import org.apache.solr.client.solrj.response.UpdateResponse import org.apache.solr.common.SolrDocument import org.apache.solr.common.SolrDocumentList import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.eclipse.jetty.servlet.ServletHolder import org.junit.AfterClass import org.junit.BeforeClass import org.junit.Rule import org.junit.rules.TestRule import org.junit.runner.Description import org.junit.runners.model.Statement import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.BaseDistributedSearchTestCase super super extends RandVal decl List decl String JettySolrRunner String File RandVal int Logger SolrClient boolean decl String boolean double int AtomicInteger int boolean decl Map int decl RandVal decl String RandVal int boolean boolean RandVal int int decl List String RandVal ShardsRepeatRule Random int String int int public static public static && = new String StringBuilder public static public static decl_stmt java.lang.StringBuilder = new if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if ! call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else decl_stmt java.lang.String final final = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + public static public static throws String private static private static decl_stmt java.lang.String = if = if call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - if ! call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = + return public public return public public = = public public return call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) public public return call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() public public return call java.util.Random.nextFloat() call java.util.Random.nextFloat() call java.util.Random.nextFloat() call java.util.Random.nextFloat() call java.util.Random.nextFloat() public public return call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() protected protected return protected protected return public public return public public throws = = public public throws = Path JettySolrRunner File protected protected throws decl_stmt java.nio.file.Path = call File.toPath() call File.toPath() call File.toPath() call File.toPath() call File.toPath() decl_stmt File = call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) decl_stmt org.apache.solr.client.solrj.embedded.JettySolrRunner = return String String JettySolrRunner File StringBuilder Path protected protected throws = = call JettySolrRunner.getLocalPort() call JettySolrRunner.getLocalPort() call JettySolrRunner.getLocalPort() call JettySolrRunner.getLocalPort() call JettySolrRunner.getLocalPort() = new decl_stmt java.lang.StringBuilder = new for = < ++ if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String final final = + decl_stmt java.nio.file.Path = call File.toPath() call File.toPath() call File.toPath() call File.toPath() call File.toPath() decl_stmt File = call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) decl_stmt org.apache.solr.client.solrj.embedded.JettySolrRunner = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call JettySolrRunner.getLocalPort() call JettySolrRunner.getLocalPort() call JettySolrRunner.getLocalPort() call JettySolrRunner.getLocalPort() call JettySolrRunner.getLocalPort() decl_stmt java.lang.String = call JettySolrRunner.getLocalPort() call JettySolrRunner.getLocalPort() call JettySolrRunner.getLocalPort() call JettySolrRunner.getLocalPort() call JettySolrRunner.getLocalPort() + + = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() protected protected StringBuilder int decl List protected protected if == return decl_stmt java.lang.StringBuilder = new for : if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + if > decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + for = < + ++ if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() protected protected throws if != call org.apache.solr.client.solrj.embedded.JettySolrRunner.stop() call org.apache.solr.client.solrj.embedded.JettySolrRunner.stop() call org.apache.solr.client.solrj.embedded.JettySolrRunner.stop() call org.apache.solr.client.solrj.embedded.JettySolrRunner.stop() call org.apache.solr.client.solrj.embedded.JettySolrRunner.stop() if != call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() call SolrClient.close() for : for : call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() public public throws return public public throws return public public throws return JettySolrRunner Properties public public throws decl_stmt java.util.Properties = new if != call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() if != call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() if != call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() if != call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() if call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() decl_stmt org.apache.solr.client.solrj.embedded.JettySolrRunner = new call org.apache.solr.client.solrj.embedded.JettySolrRunner.start() call org.apache.solr.client.solrj.embedded.JettySolrRunner.start() call org.apache.solr.client.solrj.embedded.JettySolrRunner.start() call org.apache.solr.client.solrj.embedded.JettySolrRunner.start() call org.apache.solr.client.solrj.embedded.JettySolrRunner.start() return public < public < return public < < extends extends public < < extends extends return HttpSolrClient protected protected try decl_stmt org.apache.solr.client.solrj.impl.HttpSolrClient = + + return catch throw new protected protected return protected protected for = < += + SolrInputDocument protected protected throws decl_stmt org.apache.solr.common.SolrInputDocument = new protected protected return SolrInputDocument protected protected throws decl_stmt org.apache.solr.common.SolrInputDocument = new SolrClient int protected protected throws call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) decl_stmt int = & call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.solr.client.solrj.SolrClient = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) UpdateResponse UpdateResponse protected protected throws decl_stmt UpdateResponse = decl_stmt UpdateResponse = return UpdateRequest protected protected throws decl_stmt org.apache.solr.client.solrj.request.UpdateRequest = new call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() new for : call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) call org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument,Integer,Boolean) return call UpdateRequest.process() call UpdateRequest.process() call UpdateRequest.process() call UpdateRequest.process() call UpdateRequest.process() UpdateRequest protected protected throws decl_stmt org.apache.solr.client.solrj.request.UpdateRequest = new call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() new for : call org.apache.solr.client.solrj.request.UpdateRequest.deleteById(String,String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteById(String,String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteById(String,String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteById(String,String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteById(String,String) call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() return call UpdateRequest.process() call UpdateRequest.process() call UpdateRequest.process() call UpdateRequest.process() call UpdateRequest.process() UpdateRequest protected protected throws decl_stmt org.apache.solr.client.solrj.request.UpdateRequest = new call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() new for : call org.apache.solr.client.solrj.request.UpdateRequest.deleteByQuery(String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteByQuery(String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteByQuery(String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteByQuery(String) call org.apache.solr.client.solrj.request.UpdateRequest.deleteByQuery(String) return call UpdateRequest.process() call UpdateRequest.process() call UpdateRequest.process() call UpdateRequest.process() call UpdateRequest.process() SolrInputDocument SolrClient protected protected throws decl_stmt org.apache.solr.common.SolrInputDocument = new for = < += call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) + call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) decl_stmt org.apache.solr.client.solrj.SolrClient = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) call org.apache.solr.client.solrj.SolrClient.add(Collection,int) protected protected throws call org.apache.solr.client.solrj.SolrClient.deleteByQuery(String,String,int) call org.apache.solr.client.solrj.SolrClient.deleteByQuery(String,String,int) call org.apache.solr.client.solrj.SolrClient.deleteByQuery(String,String,int) call org.apache.solr.client.solrj.SolrClient.deleteByQuery(String,String,int) call org.apache.solr.client.solrj.SolrClient.deleteByQuery(String,String,int) for : protected protected throws call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) call org.apache.solr.client.solrj.SolrClient.commit(String,boolean,boolean) for : SolrClient QueryResponse int protected protected throws decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.solr.client.solrj.SolrClient = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.solr.client.solrj.response.QueryResponse = call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) return protected protected throws return protected protected throws return ModifiableSolrParams protected protected throws decl_stmt org.apache.solr.common.params.ModifiableSolrParams final final = new for = < += call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) + return QueryResponse SolrClient decl Thread int ModifiableSolrParams QueryResponse protected protected throws decl_stmt org.apache.solr.common.params.ModifiableSolrParams final final = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) decl_stmt org.apache.solr.client.solrj.response.QueryResponse final final = call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) call org.apache.solr.common.params.ModifiableSolrParams.remove(String) if decl_stmt org.apache.solr.client.solrj.response.QueryResponse = if > call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.lang.Thread = new for = < ++ = new public public for = < ++ decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.solr.client.solrj.SolrClient = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() try decl_stmt org.apache.solr.client.solrj.response.QueryResponse = call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) new if catch throw new for : return SolrClient QueryResponse int public public for = < ++ decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.solr.client.solrj.SolrClient = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() try decl_stmt org.apache.solr.client.solrj.response.QueryResponse = call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) call org.apache.solr.client.solrj.SolrClient.query(SolrParams) new if catch throw new public public throws return > QueryResponse QueryResponse public public < throws decl_stmt org.apache.solr.client.solrj.response.QueryResponse = for : decl_stmt org.apache.solr.client.solrj.response.QueryResponse = new if == = else return public static public static return == || != && Integer public static public static < if == return decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return == : Map Map boolean int String int int String Object Object public static public static < decl_stmt boolean = & == if ! decl_stmt java.util.Map = new for = < ++ decl_stmt java.lang.Object = call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) decl_stmt java.util.Map = new for = < ++ decl_stmt java.lang.Object = call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) return decl_stmt int = = decl_stmt int = = for if >= && >= break decl_stmt java.lang.String = = decl_stmt java.lang.Object = = decl_stmt int = = while < = = ++ = if & != = = ++ continue break while < = = ++ = if & != = = ++ continue if break return + + + + if & != continue decl_stmt java.lang.String = if != return + + if - != - return + + + + + + + return Object Object int String public static public static < decl_stmt java.lang.String for : decl_stmt java.lang.Object = decl_stmt int = if & != continue if ! return + + if & != continue decl_stmt java.lang.Object = = if != return + + + return String public static public static < decl_stmt java.lang.String = if != return return public static public static < return boolean int SolrDocument Object SolrDocument String public static public static < decl_stmt boolean = & == decl_stmt java.lang.String decl_stmt int = if == = if != return + else if & == assert & != if != if == return = if != return + = if != return + = if != return + if for = < ++ = if != return + + + return for = < ++ decl_stmt org.apache.solr.common.SolrDocument = decl_stmt java.lang.Object = call org.apache.solr.common.SolrDocument.getFirstValue(String) call org.apache.solr.common.SolrDocument.getFirstValue(String) call org.apache.solr.common.SolrDocument.getFirstValue(String) call org.apache.solr.common.SolrDocument.getFirstValue(String) call org.apache.solr.common.SolrDocument.getFirstValue(String) decl_stmt org.apache.solr.common.SolrDocument = if == = else for = < ++ = if call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call org.apache.solr.common.SolrDocument.getFirstValue(String) call org.apache.solr.common.SolrDocument.getFirstValue(String) call org.apache.solr.common.SolrDocument.getFirstValue(String) call org.apache.solr.common.SolrDocument.getFirstValue(String) call org.apache.solr.common.SolrDocument.getFirstValue(String) break = if != return + + + return String public static public static < if != return + + + for = < ++ decl_stmt java.lang.String = if != return + + + return double double double double public static public static < if == return if == || == return + + + if instanceof && instanceof return if instanceof && instanceof return if instanceof && instanceof return if instanceof && instanceof return if instanceof && instanceof return if instanceof && instanceof if ! return + + + return if instanceof && instanceof return if & != if instanceof && instanceof decl_stmt double = decl_stmt double = if == || && return if == || == return + + + decl_stmt double = - decl_stmt double = / / if > return + + + else return if ! return + + + return String protected protected call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.String = if != call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + protected protected if != if != for : if != for : public public throws if ! try finally if ! public public throws = new try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() public public throws for = <= ++ = new ShardsFixed ShardsRepeat public public decl_stmt ShardsFixed = decl_stmt ShardsRepeat = if != && != throw new else if != return new call ShardsFixed.num() call ShardsFixed.num() call ShardsFixed.num() call ShardsFixed.num() call ShardsFixed.num() else if != return new call ShardsRepeat.min() call ShardsRepeat.min() call ShardsRepeat.min() call ShardsRepeat.min() call ShardsRepeat.min() call ShardsRepeat.max() call ShardsRepeat.max() call ShardsRepeat.max() call ShardsRepeat.max() call ShardsRepeat.max() else return new : new decl Object public static public static decl_stmt java.lang.Object = new * for = < ++ * = * + = return public public throws Object public public for decl_stmt java.lang.Object = if return Date long public public decl_stmt long = call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() decl_stmt java.util.Date = new return call Date.toInstant() call Date.toInstant() call Date.toInstant() call Date.toInstant() call Date.toInstant() protected protected return String protected protected throws new decl_stmt java.lang.String = if != new new Path private private throws decl_stmt java.nio.file.Path = if call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) Properties protected protected throws decl_stmt java.util.Properties = new call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty()