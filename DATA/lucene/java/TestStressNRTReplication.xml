org.apache.lucene.replicator.nrt java.io.BufferedReader import java.io.Closeable import java.io.IOException import java.io.InputStreamReader import java.io.UnsupportedEncodingException import java.io.Writer import java.nio.charset.StandardCharsets import java.nio.file.Files import java.nio.file.Path import java.nio.file.StandardOpenOption import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Locale import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.atomic.AtomicBoolean import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.atomic.AtomicLong import java.util.regex.Pattern import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.index.Term import org.apache.lucene.search.Query import org.apache.lucene.search.TermQuery import org.apache.lucene.store.MockDirectoryWrapper import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LineFileDocs import org.apache.lucene.util.LuceneTestCase.Nightly import org.apache.lucene.util.LuceneTestCase.SuppressCodecs import org.apache.lucene.util.LuceneTestCase.SuppressSysoutChecks import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.SuppressForbidden import org.apache.lucene.util.TestUtil import org.apache.lucene.util.ThreadInterruptedException import com.carrotsearch.randomizedtesting.SeedUtils import class annotation annotation org.apache.lucene.replicator.nrt.TestStressNRTReplication super super extends boolean decl long AtomicInteger NodeProcess boolean decl Map AtomicLong boolean boolean Integer AtomicBoolean boolean decl Map Path decl NodeProcess AtomicInteger boolean SimpleTransLog AtomicBoolean decl Map decl Set long decl Path boolean long Path decl boolean decl Thread decl Thread NodeProcess int int Thread long long NodeProcess StringBuilder int decl List long int MockDirectoryWrapper public public throws = + = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt int if == = else = call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() + + = = new = new = new = new = new for = < ++ = + decl_stmt java.lang.Thread = new + + for = < ++ = new + decl_stmt java.lang.Thread = new + + for = < ++ = new + decl_stmt java.lang.Thread = new call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() decl_stmt int if = * else = * + + decl_stmt long = + * while call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() == && < * * if != && decl_stmt org.apache.lucene.replicator.nrt.NodeProcess = if != decl_stmt long = call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() decl_stmt int = call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() + decl_stmt long try = call NodeProcess.flush() call NodeProcess.flush() call NodeProcess.flush() call NodeProcess.flush() call NodeProcess.flush() catch + = - if > + = decl_stmt java.lang.StringBuilder = new decl_stmt int = for = < ++ decl_stmt org.apache.lucene.replicator.nrt.NodeProcess = if != if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) ++ if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + == : + + + + + + if == decl_stmt org.apache.lucene.replicator.nrt.NodeProcess = if != && call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() == + try call org.apache.lucene.replicator.nrt.NodeProcess.commitAsync() call org.apache.lucene.replicator.nrt.NodeProcess.commitAsync() call org.apache.lucene.replicator.nrt.NodeProcess.commitAsync() call org.apache.lucene.replicator.nrt.NodeProcess.commitAsync() call org.apache.lucene.replicator.nrt.NodeProcess.commitAsync() catch + + call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) for : for : call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) decl_stmt java.util.List < = new <> for : if != && != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() == for : + decl_stmt org.apache.lucene.store.MockDirectoryWrapper = call MockDirectoryWrapper.setCrossCheckTermVectorsOnClose() call MockDirectoryWrapper.setCrossCheckTermVectorsOnClose() call MockDirectoryWrapper.setCrossCheckTermVectorsOnClose() call MockDirectoryWrapper.setCrossCheckTermVectorsOnClose() call MockDirectoryWrapper.setCrossCheckTermVectorsOnClose() call org.apache.lucene.store.MockDirectoryWrapper.close() call org.apache.lucene.store.MockDirectoryWrapper.close() call org.apache.lucene.store.MockDirectoryWrapper.close() call org.apache.lucene.store.MockDirectoryWrapper.close() call org.apache.lucene.store.MockDirectoryWrapper.close() else private private for = < ++ if return return long long int NodeProcess private private throws decl_stmt long = - decl_stmt org.apache.lucene.replicator.nrt.NodeProcess = for : if != + + decl_stmt long try = catch + + continue + + if > = = if == return + + + + try call org.apache.lucene.replicator.nrt.NodeProcess.commit() call org.apache.lucene.replicator.nrt.NodeProcess.commit() call org.apache.lucene.replicator.nrt.NodeProcess.commit() call org.apache.lucene.replicator.nrt.NodeProcess.commit() call org.apache.lucene.replicator.nrt.NodeProcess.commit() catch + + return + if call org.apache.lucene.replicator.nrt.NodeProcess.shutdown() call org.apache.lucene.replicator.nrt.NodeProcess.shutdown() call org.apache.lucene.replicator.nrt.NodeProcess.shutdown() call org.apache.lucene.replicator.nrt.NodeProcess.shutdown() call org.apache.lucene.replicator.nrt.NodeProcess.shutdown() == + + return decl_stmt int = + long long Integer long Long NodeProcess throws + + assert == decl_stmt org.apache.lucene.replicator.nrt.NodeProcess = + if == return decl_stmt java.lang.Long decl_stmt java.lang.Integer if == = = else = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() assert != : + + + call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() assert != : + + + call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() assert >= + + + + + = decl_stmt long = call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() decl_stmt long = + + + + + + try call org.apache.lucene.replicator.nrt.SimpleTransLog.replay(NodeProcess,long,long) call org.apache.lucene.replicator.nrt.SimpleTransLog.replay(NodeProcess,long,long) call org.apache.lucene.replicator.nrt.SimpleTransLog.replay(NodeProcess,long,long) call org.apache.lucene.replicator.nrt.SimpleTransLog.replay(NodeProcess,long,long) call org.apache.lucene.replicator.nrt.SimpleTransLog.replay(NodeProcess,long,long) catch call org.apache.lucene.replicator.nrt.NodeProcess.shutdown() call org.apache.lucene.replicator.nrt.NodeProcess.shutdown() call org.apache.lucene.replicator.nrt.NodeProcess.shutdown() call org.apache.lucene.replicator.nrt.NodeProcess.shutdown() call org.apache.lucene.replicator.nrt.NodeProcess.shutdown() return decl_stmt long = + - / + = = Thread boolean boolean Pattern Path long AtomicBoolean decl List Writer String ProcessBuilder Process int long NodeProcess int NodeProcess long BufferedReader long = = final final throws = decl_stmt java.util.List < = new <> decl_stmt org.apache.lucene.replicator.nrt.NodeProcess = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + + + + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + else if == return call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt long = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + decl_stmt long = * call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt Writer if decl_stmt java.nio.file.Path = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) + + = call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.write() else = decl_stmt java.lang.ProcessBuilder = new call java.lang.ProcessBuilder.redirectErrorStream(boolean) call java.lang.ProcessBuilder.redirectErrorStream(boolean) call java.lang.ProcessBuilder.redirectErrorStream(boolean) call java.lang.ProcessBuilder.redirectErrorStream(boolean) call java.lang.ProcessBuilder.redirectErrorStream(boolean) call java.lang.ProcessBuilder.directory() call java.lang.ProcessBuilder.directory() call java.lang.ProcessBuilder.directory() call java.lang.ProcessBuilder.directory() call java.lang.ProcessBuilder.directory() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() call java.nio.file.Path.toFile() decl_stmt Process = call java.lang.ProcessBuilder.start() call java.lang.ProcessBuilder.start() call java.lang.ProcessBuilder.start() call java.lang.ProcessBuilder.start() call java.lang.ProcessBuilder.start() decl_stmt java.io.BufferedReader try = new new call Process.getInputStream() call Process.getInputStream() call Process.getInputStream() call Process.getInputStream() call Process.getInputStream() catch throw new decl_stmt int = - decl_stmt long = - decl_stmt long = - decl_stmt java.util.regex.Pattern = decl_stmt boolean = while decl_stmt java.lang.String = call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) if == + + try call Process.waitFor() call Process.waitFor() call Process.waitFor() call Process.waitFor() call Process.waitFor() catch throw new + call Process.exitValue() call Process.exitValue() call Process.exitValue() call Process.exitValue() call Process.exitValue() if call Process.exitValue() call Process.exitValue() call Process.exitValue() call Process.exitValue() call Process.exitValue() == return if == for = < ++ decl_stmt org.apache.lucene.replicator.nrt.NodeProcess = if != || == || call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() call NodeProcess.nodeIsClosing() + + return else try catch throw new + + call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) throw new + + if != call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.flush() call Writer.flush() call Writer.flush() call Writer.flush() call Writer.flush() else if call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) else if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) else if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) else if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) else if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) = else if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) break decl_stmt boolean final final = decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new decl_stmt java.lang.Thread = new public public + try call Process.waitFor() call Process.waitFor() call Process.waitFor() call Process.waitFor() call Process.waitFor() catch throw new + decl_stmt int = call Process.exitValue() call Process.exitValue() call Process.exitValue() call Process.exitValue() call Process.exitValue() + + + if != try call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.write() + + call Writer.close() call Writer.close() call Writer.close() call Writer.close() call Writer.close() catch throw new if != && == && call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() == call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) if != throw new + + + + + + else throw new + + + call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) + + + + + + + + return new int public public + try catch throw new + decl_stmt int = + + + if != try + + catch throw new if != && == && call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() == call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) if != throw new + + + + + + else throw new + + + NodeProcess private private decl_stmt org.apache.lucene.replicator.nrt.NodeProcess = if != && == + + = ++ else + + if != = = = NodeProcess decl List private private decl_stmt org.apache.lucene.replicator.nrt.NodeProcess = if != decl_stmt java.util.List < = new <> for : if != && == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + try = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : catch + + + int if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() decl_stmt int = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != + + + + + throw new + + + + + else + + + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + + + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() NodeProcess decl List StringBuilder long int decl List String double Thread public public decl_stmt java.util.List < = new <> try while call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() == if && == for = < ++ if + + while + + decl_stmt org.apache.lucene.replicator.nrt.NodeProcess = if != call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() + + call org.apache.lucene.replicator.nrt.NodeProcess.crash() call org.apache.lucene.replicator.nrt.NodeProcess.crash() call org.apache.lucene.replicator.nrt.NodeProcess.crash() call org.apache.lucene.replicator.nrt.NodeProcess.crash() call org.apache.lucene.replicator.nrt.NodeProcess.crash() + + decl_stmt java.util.List < = new <> decl_stmt java.lang.StringBuilder = new decl_stmt long = for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt double = - / decl_stmt java.lang.String if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if = else = else = if != && == += call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() + if == if continue if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() == decl_stmt int = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if == if == if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == + + else if < double call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() / = + + decl_stmt java.lang.Thread = new public public try + + = - catch call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) throw new finally = call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) + call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + while call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > catch call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) throw new public public try + + = - catch call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) throw new finally = NodeProcess Integer Connection boolean decl Map long int String Query Integer public public decl_stmt org.apache.lucene.search.Query = new new decl_stmt java.util.Map < = new <> while call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() == decl_stmt org.apache.lucene.replicator.nrt.NodeProcess = if == || == continue if call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() == continue decl_stmt boolean = == try + decl_stmt org.apache.lucene.replicator.nrt.Connection = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt long try if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() while call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() == if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() break if == throw new = call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() while call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() == if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() break if == throw new decl_stmt int = call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + + + + + if && > + + + = else if call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() != call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) + + + call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() + + + + + call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() + + catch call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() continue decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != && > && == try call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() while call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() == if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() break if == throw new = call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() while call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() == if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() break if == throw new decl_stmt int = call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() if < decl_stmt java.lang.String = + + + + + + + call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) catch call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() continue catch call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) throw new finally call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call NodeProcess.lock() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() Connection int int LineFileDocs double long Document NodeProcess int String int String int public public try decl_stmt org.apache.lucene.util.LineFileDocs = new decl_stmt int = decl_stmt double = decl_stmt int = + + + decl_stmt long = call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() call org.apache.lucene.replicator.nrt.SimpleTransLog.getNextLocation() decl_stmt org.apache.lucene.replicator.nrt.NodeProcess = decl_stmt org.apache.lucene.replicator.nrt.Connection = while call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() == try while call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() == && == = if != = new call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() break if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() break + if == decl_stmt org.apache.lucene.document.Document = new decl_stmt int = call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() decl_stmt java.lang.String = + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.SimpleTransLog.addDocument(String,Document) call org.apache.lucene.replicator.nrt.SimpleTransLog.addDocument(String,Document) call org.apache.lucene.replicator.nrt.SimpleTransLog.addDocument(String,Document) call org.apache.lucene.replicator.nrt.SimpleTransLog.addDocument(String,Document) call org.apache.lucene.replicator.nrt.SimpleTransLog.addDocument(String,Document) call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() if > && < decl_stmt int = decl_stmt java.lang.String = if decl_stmt org.apache.lucene.document.Document = call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call Document.getField() call Document.getField() call Document.getField() call Document.getField() call Document.getField() call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.SimpleTransLog.updateDocument(String,Document) call org.apache.lucene.replicator.nrt.SimpleTransLog.updateDocument(String,Document) call org.apache.lucene.replicator.nrt.SimpleTransLog.updateDocument(String,Document) call org.apache.lucene.replicator.nrt.SimpleTransLog.updateDocument(String,Document) call org.apache.lucene.replicator.nrt.SimpleTransLog.updateDocument(String,Document) else call org.apache.lucene.replicator.nrt.NodeProcess.deleteDocument(Connection,String) call org.apache.lucene.replicator.nrt.NodeProcess.deleteDocument(Connection,String) call org.apache.lucene.replicator.nrt.NodeProcess.deleteDocument(Connection,String) call org.apache.lucene.replicator.nrt.NodeProcess.deleteDocument(Connection,String) call org.apache.lucene.replicator.nrt.NodeProcess.deleteDocument(Connection,String) call org.apache.lucene.replicator.nrt.SimpleTransLog.deleteDocuments(String) call org.apache.lucene.replicator.nrt.SimpleTransLog.deleteDocuments(String) call org.apache.lucene.replicator.nrt.SimpleTransLog.deleteDocuments(String) call org.apache.lucene.replicator.nrt.SimpleTransLog.deleteDocuments(String) call org.apache.lucene.replicator.nrt.SimpleTransLog.deleteDocuments(String) else decl_stmt org.apache.lucene.document.Document = call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() decl_stmt java.lang.String = ++ call Document.getField() call Document.getField() call Document.getField() call Document.getField() call Document.getField() call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.NodeProcess.addOrUpdateDocument(Connection,Document,boolean) call org.apache.lucene.replicator.nrt.SimpleTransLog.addDocument(String,Document) call org.apache.lucene.replicator.nrt.SimpleTransLog.addDocument(String,Document) call org.apache.lucene.replicator.nrt.SimpleTransLog.addDocument(String,Document) call org.apache.lucene.replicator.nrt.SimpleTransLog.addDocument(String,Document) call org.apache.lucene.replicator.nrt.SimpleTransLog.addDocument(String,Document) catch if != try call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() catch = = if == if == decl_stmt int = + + if != try call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() catch try call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() catch = = catch call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) throw new long static static decl_stmt long = - / long static static decl_stmt long = - / - /