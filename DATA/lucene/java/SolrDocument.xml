org.apache.solr.common java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Iterator import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Set import org.apache.solr.common.util.NamedList import class org.apache.solr.common.SolrDocument super super extends super implements decl List decl Map public < public < return public public call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() if != call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() public public return != decl ArrayList public public if instanceof = new else if instanceof else if instanceof else if instanceof decl_stmt java.util.ArrayList < = new <> for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl Collection decl Collection Object public public decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == if instanceof decl_stmt java.util.Collection < = new <> for : < call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() else return decl_stmt java.util.Collection < = if instanceof = < else = new <> call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() if instanceof for : < call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() else if instanceof for : call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() else call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() Collection Object public public decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == || ! instanceof return decl_stmt java.util.Collection = if call java.util.Collection.size() call java.util.Collection.size() call java.util.Collection.size() call java.util.Collection.size() call java.util.Collection.size() > return call java.util.Collection.iterator() call java.util.Collection.iterator() call java.util.Collection.iterator() call java.util.Collection.iterator() call java.util.Collection.iterator() return public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl ArrayList Object public < public < decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if instanceof return < if != decl_stmt java.util.ArrayList < = new <> call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return return public public return + public < < public < < return call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() public < < public < < return new < < public < public < return public public return call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() public < public < return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() public public return call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() public public return call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() public public throw new public public throw new public < < < public < < < throw new public public < extends extends extends extends extends < throw new public < < public < < throw new public < public < < throw new public < public < throw new public public return call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() public < public < return public public return call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() public < public < return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() public public return call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() public public return call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() public public throw new public public throw new public < < < public < < < throw new public public < extends extends extends extends extends < throw new public < < public < < throw new public < public < < throw new public < public < throw new public public return call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() public < public < return new < public public return public public return call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() public < public < return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() public public return call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() public public return call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() public public throw new public public throw new public < < public < < throw new public public < extends extends extends extends throw new public < public < throw new public < public < throw new public < public < throw new public public return call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() public public return public public return call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() public < public < return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() public public return call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() public public return call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() public public throw new public public throw new public < < public < < throw new public public < extends extends extends extends throw new public < public < throw new public < public < throw new public < public < throw new public public return call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() call decl Map.toString() public public return call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() public public return call decl Map.containsValue() call decl Map.containsValue() call decl Map.containsValue() call decl Map.containsValue() call decl Map.containsValue() public < < public < < return call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() public public return call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() public < public < return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() public public return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public < extends extends extends extends call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() public public return call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() public public return call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() public < public < return call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() public public if == = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public < for : public < public < return boolean public public decl_stmt boolean = == || call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return ! public public return call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size()