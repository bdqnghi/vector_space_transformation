org.apache.lucene.util java.util.Collections import java.util.Iterator import java.util.LinkedHashMap import java.util.LinkedHashSet import java.util.Map import java.util.Map.Entry import java.util.NoSuchElementException import java.util.Objects import java.util.Set import org.apache.lucene.analysis.TokenStream import class org.apache.lucene.util.AttributeSource decl ClassValue decl Map decl Map AttributeFactory decl State State public public decl_stmt sun.security.provider.certpath.State = new = if != = return public final public final return public final < < extends extends public final < < extends extends return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() State State AttributeImpl public final < public final < decl_stmt sun.security.provider.certpath.State final final = if != return new < decl_stmt sun.security.provider.certpath.State private = public public throw new public public if == throw new decl_stmt org.apache.lucene.util.AttributeImpl final final = = return public public return != else return > public public throw new AttributeImpl public public if == throw new decl_stmt org.apache.lucene.util.AttributeImpl final final = = return public public return != decl Set protected < extends extends protected < extends extends < decl_stmt java.util.Set final final final < < extends extends = new <> do for < : if != && call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() = != decl_stmt java.util.Set final final final < < extends extends = new <> do for < : if != && call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() = != return static < extends extends static < extends extends final final final < extends extends return call decl ClassValue.get() call decl ClassValue.get() call decl ClassValue.get() call decl ClassValue.get() call decl ClassValue.get() decl Class public final public final final final decl_stmt java.lang.Class final final final < extends extends = if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() return for final final final < extends extends : if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() AttributeImpl public final < extends extends public final < extends extends < decl_stmt org.apache.lucene.util.AttributeImpl = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == if ! && throw new + + = return public final public final return ! public final public final < extends extends return public final < extends extends public final < extends extends < return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() State State decl Iterator private private decl_stmt sun.security.provider.certpath.State = if != || ! return decl_stmt sun.security.provider.certpath.State = = = new decl_stmt java.util.Iterator final final final < = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() = new = = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() return public final public final for = != = public final public final call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() State public final public final decl_stmt sun.security.provider.certpath.State final final = return == : call State.clone() call State.clone() call State.clone() call State.clone() call State.clone() AttributeImpl public final public final if == return do decl_stmt org.apache.lucene.util.AttributeImpl = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + + = != int public public decl_stmt int = for = != = = * + return State AttributeSource State public public if == return if instanceof decl_stmt org.apache.lucene.util.AttributeSource = if if ! call org.apache.lucene.util.AttributeSource.hasAttributes() call org.apache.lucene.util.AttributeSource.hasAttributes() call org.apache.lucene.util.AttributeSource.hasAttributes() call org.apache.lucene.util.AttributeSource.hasAttributes() call org.apache.lucene.util.AttributeSource.hasAttributes() return if != call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() return decl_stmt sun.security.provider.certpath.State = decl_stmt sun.security.provider.certpath.State = call org.apache.lucene.util.AttributeSource.getCurrentState() call org.apache.lucene.util.AttributeSource.getCurrentState() call org.apache.lucene.util.AttributeSource.getCurrentState() call org.apache.lucene.util.AttributeSource.getCurrentState() call org.apache.lucene.util.AttributeSource.getCurrentState() while != && != if call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() != call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() || ! call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() call State.attribute() return = = return else return ! call org.apache.lucene.util.AttributeSource.hasAttributes() call org.apache.lucene.util.AttributeSource.hasAttributes() call org.apache.lucene.util.AttributeSource.hasAttributes() call org.apache.lucene.util.AttributeSource.hasAttributes() call org.apache.lucene.util.AttributeSource.hasAttributes() else return StringBuilder public final public final final final decl_stmt java.lang.StringBuilder final final = new new public public < extends extends if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) == : return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public < extends extends if > if == : public final public final for = != = AttributeSource public final public final decl_stmt org.apache.lucene.util.AttributeSource final final = new if for = != = call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() for < < extends extends : call AttributeSource.attributes() call AttributeSource.attributes() call AttributeSource.attributes() call AttributeSource.attributes() call AttributeSource.attributes() call AttributeSource.attributes() call AttributeSource.attributes() call AttributeSource.attributes() call AttributeSource.attributes() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() call AttributeSource.attributeImpls() return AttributeImpl public final public final for = != = decl_stmt org.apache.lucene.util.AttributeImpl final final = if == throw new + + public public return + + + +