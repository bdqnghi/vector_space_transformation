org.apache.solr.store.blockcache java.nio.ByteBuffer import java.util.concurrent.ConcurrentMap import java.util.concurrent.atomic.AtomicInteger import com.github.benmanes.caffeine.cache.Cache import com.github.benmanes.caffeine.cache.Caffeine import com.github.benmanes.caffeine.cache.RemovalListener import class org.apache.solr.store.blockcache.BlockCache int int int decl AtomicInteger int int decl Cache Metrics decl BlockLocks decl ByteBuffer public public call decl Cache.invalidate() call decl Cache.invalidate() call decl Cache.invalidate() call decl Cache.invalidate() call decl Cache.invalidate() int int private private if == return decl_stmt int = decl_stmt int = call Metrics.blockCacheEviction() call Metrics.blockCacheEviction() call Metrics.blockCacheEviction() call Metrics.blockCacheEviction() call Metrics.blockCacheEviction() call Metrics.blockCacheEviction() call Metrics.blockCacheEviction() call Metrics.blockCacheEviction() call Metrics.blockCacheEviction() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() int boolean BlockCacheLocation ByteBuffer int public public if + > throw new + + + + + + decl_stmt org.apache.solr.store.blockcache.BlockCacheLocation = call decl Cache.getIfPresent() call decl Cache.getIfPresent() call decl Cache.getIfPresent() call decl Cache.getIfPresent() call decl Cache.getIfPresent() decl_stmt boolean = if == = = new if ! return if call org.apache.solr.store.blockcache.BlockCacheLocation.isRemoved() call org.apache.solr.store.blockcache.BlockCacheLocation.isRemoved() call org.apache.solr.store.blockcache.BlockCacheLocation.isRemoved() call org.apache.solr.store.blockcache.BlockCacheLocation.isRemoved() call org.apache.solr.store.blockcache.BlockCacheLocation.isRemoved() return decl_stmt int = call BlockCacheLocation.getBankId() call BlockCacheLocation.getBankId() call BlockCacheLocation.getBankId() call BlockCacheLocation.getBankId() call BlockCacheLocation.getBankId() decl_stmt int = call org.apache.solr.store.blockcache.BlockCacheLocation.getBlock() call org.apache.solr.store.blockcache.BlockCacheLocation.getBlock() call org.apache.solr.store.blockcache.BlockCacheLocation.getBlock() call org.apache.solr.store.blockcache.BlockCacheLocation.getBlock() call org.apache.solr.store.blockcache.BlockCacheLocation.getBlock() * decl_stmt ByteBuffer = call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() + call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() call ByteBuffer.put() if call decl Cache.put() call decl Cache.put() call decl Cache.put() call decl Cache.put() call decl Cache.put() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() call Metrics.blockCacheSize() return int BlockCacheLocation ByteBuffer int public public decl_stmt org.apache.solr.store.blockcache.BlockCacheLocation = call decl Cache.getIfPresent() call decl Cache.getIfPresent() call decl Cache.getIfPresent() call decl Cache.getIfPresent() call decl Cache.getIfPresent() if == return if call org.apache.solr.store.blockcache.BlockCacheLocation.isRemoved() call org.apache.solr.store.blockcache.BlockCacheLocation.isRemoved() call org.apache.solr.store.blockcache.BlockCacheLocation.isRemoved() call org.apache.solr.store.blockcache.BlockCacheLocation.isRemoved() call org.apache.solr.store.blockcache.BlockCacheLocation.isRemoved() return decl_stmt int = call BlockCacheLocation.getBankId() call BlockCacheLocation.getBankId() call BlockCacheLocation.getBankId() call BlockCacheLocation.getBankId() call BlockCacheLocation.getBankId() decl_stmt int = call org.apache.solr.store.blockcache.BlockCacheLocation.getBlock() call org.apache.solr.store.blockcache.BlockCacheLocation.getBlock() call org.apache.solr.store.blockcache.BlockCacheLocation.getBlock() call org.apache.solr.store.blockcache.BlockCacheLocation.getBlock() call org.apache.solr.store.blockcache.BlockCacheLocation.getBlock() * call org.apache.solr.store.blockcache.BlockCacheLocation.touch() call org.apache.solr.store.blockcache.BlockCacheLocation.touch() call org.apache.solr.store.blockcache.BlockCacheLocation.touch() call org.apache.solr.store.blockcache.BlockCacheLocation.touch() call org.apache.solr.store.blockcache.BlockCacheLocation.touch() decl_stmt ByteBuffer = call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() + call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() call ByteBuffer.get() return public public return AtomicInteger int BlockLocks private private for = < ++ for = < ++ decl_stmt java.util.concurrent.atomic.AtomicInteger = decl_stmt org.apache.solr.store.blockcache.BlockLocks = if call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() == continue continue decl_stmt int = call org.apache.solr.store.blockcache.BlockLocks.nextClearBit(int) call org.apache.solr.store.blockcache.BlockLocks.nextClearBit(int) call org.apache.solr.store.blockcache.BlockLocks.nextClearBit(int) call org.apache.solr.store.blockcache.BlockLocks.nextClearBit(int) call org.apache.solr.store.blockcache.BlockLocks.nextClearBit(int) while != - if >= continue continue if ! call org.apache.solr.store.blockcache.BlockLocks.set(int) call org.apache.solr.store.blockcache.BlockLocks.set(int) call org.apache.solr.store.blockcache.BlockLocks.set(int) call org.apache.solr.store.blockcache.BlockLocks.set(int) call org.apache.solr.store.blockcache.BlockLocks.set(int) = call org.apache.solr.store.blockcache.BlockLocks.nextClearBit(int) call org.apache.solr.store.blockcache.BlockLocks.nextClearBit(int) call org.apache.solr.store.blockcache.BlockLocks.nextClearBit(int) call org.apache.solr.store.blockcache.BlockLocks.nextClearBit(int) call org.apache.solr.store.blockcache.BlockLocks.nextClearBit(int) continue continue else call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() return return private private if != throw new + + + + private private return public public return call decl Cache.asMap() call decl Cache.asMap() call decl Cache.asMap() call decl Cache.asMap() call decl Cache.asMap()