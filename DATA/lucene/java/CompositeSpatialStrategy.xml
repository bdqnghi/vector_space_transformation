org.apache.lucene.spatial.composite java.util.ArrayList import java.util.Collections import java.util.List import org.locationtech.spatial4j.shape.Point import org.locationtech.spatial4j.shape.Shape import org.apache.lucene.document.Field import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.search.Query import org.apache.lucene.spatial.SpatialStrategy import org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy import org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree import org.apache.lucene.spatial.query.SpatialArgs import org.apache.lucene.spatial.query.SpatialOperation import org.apache.lucene.spatial.query.UnsupportedSpatialOperation import org.apache.lucene.spatial.serialized.SerializedDVStrategy import org.apache.lucene.spatial.util.ShapePredicateValueSource import class org.apache.lucene.spatial.composite.CompositeSpatialStrategy super super extends boolean RecursivePrefixTreeStrategy SerializedDVStrategy public public return public public return public public return public public = decl List public public decl_stmt java.util.List < = new <> call RecursivePrefixTreeStrategy.createIndexableFields() call RecursivePrefixTreeStrategy.createIndexableFields() call RecursivePrefixTreeStrategy.createIndexableFields() call RecursivePrefixTreeStrategy.createIndexableFields() call RecursivePrefixTreeStrategy.createIndexableFields() call org.apache.lucene.spatial.serialized.SerializedDVStrategy.createIndexableFields(Shape) call org.apache.lucene.spatial.serialized.SerializedDVStrategy.createIndexableFields(Shape) call org.apache.lucene.spatial.serialized.SerializedDVStrategy.createIndexableFields(Shape) call org.apache.lucene.spatial.serialized.SerializedDVStrategy.createIndexableFields(Shape) call org.apache.lucene.spatial.serialized.SerializedDVStrategy.createIndexableFields(Shape) return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() public public throw new Query SpatialOperation SpatialArgs SpatialPrefixTree ShapePredicateValueSource int public public decl_stmt org.apache.lucene.spatial.query.SpatialOperation final final = if == || == throw new if == throw new decl_stmt org.apache.lucene.spatial.util.ShapePredicateValueSource final final = new call org.apache.lucene.spatial.serialized.SerializedDVStrategy.makeShapeValueSource() call org.apache.lucene.spatial.serialized.SerializedDVStrategy.makeShapeValueSource() call org.apache.lucene.spatial.serialized.SerializedDVStrategy.makeShapeValueSource() call org.apache.lucene.spatial.serialized.SerializedDVStrategy.makeShapeValueSource() call org.apache.lucene.spatial.serialized.SerializedDVStrategy.makeShapeValueSource() if == && decl_stmt org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree final final = call RecursivePrefixTreeStrategy.getGrid() call RecursivePrefixTreeStrategy.getGrid() call RecursivePrefixTreeStrategy.getGrid() call RecursivePrefixTreeStrategy.getGrid() call RecursivePrefixTreeStrategy.getGrid() decl_stmt int final final = call SpatialPrefixTree.getLevelForDistance() call SpatialPrefixTree.getLevelForDistance() call SpatialPrefixTree.getLevelForDistance() call SpatialPrefixTree.getLevelForDistance() call SpatialPrefixTree.getLevelForDistance() return new call RecursivePrefixTreeStrategy.getFieldName() call RecursivePrefixTreeStrategy.getFieldName() call RecursivePrefixTreeStrategy.getFieldName() call RecursivePrefixTreeStrategy.getFieldName() call RecursivePrefixTreeStrategy.getFieldName() call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.getPrefixGridScanLevel() call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.getPrefixGridScanLevel() call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.getPrefixGridScanLevel() call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.getPrefixGridScanLevel() call org.apache.lucene.spatial.prefix.RecursivePrefixTreeStrategy.getPrefixGridScanLevel() else decl_stmt org.apache.lucene.spatial.query.SpatialArgs if == = else = new call org.apache.lucene.spatial.query.SpatialArgs.setDistErr(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErr(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErr(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErr(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErr(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) if call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() == && call org.apache.lucene.spatial.query.SpatialArgs.getDistErrPct() call org.apache.lucene.spatial.query.SpatialArgs.getDistErrPct() call org.apache.lucene.spatial.query.SpatialArgs.getDistErrPct() call org.apache.lucene.spatial.query.SpatialArgs.getDistErrPct() call org.apache.lucene.spatial.query.SpatialArgs.getDistErrPct() == call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErrPct(Double) decl_stmt org.apache.lucene.search.Query final final = call RecursivePrefixTreeStrategy.makeQuery() call RecursivePrefixTreeStrategy.makeQuery() call RecursivePrefixTreeStrategy.makeQuery() call RecursivePrefixTreeStrategy.makeQuery() call RecursivePrefixTreeStrategy.makeQuery() return new