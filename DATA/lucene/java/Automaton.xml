org.apache.lucene.util.automaton java.util.Arrays import java.util.BitSet import java.util.HashSet import java.util.Set import org.apache.lucene.util.Accountable import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.InPlaceMergeSorter import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.Sorter import class org.apache.lucene.util.automaton.Automaton super super implements Sorter int boolean int decl int BitSet decl int int Sorter int public public decl_stmt int = / = - += return public public if >= throw new + + + + if call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) else call java.util.BitSet.clear(int) call java.util.BitSet.clear(int) call java.util.BitSet.clear(int) call java.util.BitSet.clear(int) call java.util.BitSet.clear(int) Transition decl Transition int int public public decl_stmt int = decl_stmt org.apache.lucene.util.automaton.Transition = new for = < ++ decl_stmt int = = new for = < ++ decl_stmt org.apache.lucene.util.automaton.Transition = new = return return public public return call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) public public public public assert == if >= / throw new + + + / - + if >= / throw new + + + / - + if != if != - = if * != - throw new + + assert * + == * = ++ = ++ = ++ = * + ++ int Transition public public decl_stmt org.apache.lucene.util.automaton.Transition = new decl_stmt int = for = < ++ if int int int BitSet public public decl_stmt int = = + for = < += if + != - + += += decl_stmt int = decl_stmt org.apache.lucene.util.BitSet = decl_stmt int = while < && = call java.util.BitSet.nextSetBit(int) call java.util.BitSet.nextSetBit(int) call java.util.BitSet.nextSetBit(int) call java.util.BitSet.nextSetBit(int) call java.util.BitSet.nextSetBit(int) != - + ++ = + for = < += + += += if == = int int int int int int int int int int int private private decl_stmt int = * + assert > decl_stmt int = * decl_stmt int = / call org.apache.lucene.util.Sorter.sort(int,DocComparator) call org.apache.lucene.util.Sorter.sort(int,DocComparator) call org.apache.lucene.util.Sorter.sort(int,DocComparator) call org.apache.lucene.util.Sorter.sort(int,DocComparator) call org.apache.lucene.util.Sorter.sort(int,DocComparator) + decl_stmt int = decl_stmt int = - decl_stmt int = - decl_stmt int = - for = < ++ decl_stmt int = + * decl_stmt int = + * + decl_stmt int = + * + if == if <= + if > = else if != - + * = + * + = + * + = ++ = = else if != - + * = + * + = + * + = ++ = = = if != - + * = + * + = + * + = ++ -= - * * + = call org.apache.lucene.util.Sorter.sort(int,DocComparator) call org.apache.lucene.util.Sorter.sort(int,DocComparator) call org.apache.lucene.util.Sorter.sort(int,DocComparator) call org.apache.lucene.util.Sorter.sort(int,DocComparator) call org.apache.lucene.util.Sorter.sort(int,DocComparator) + if && > decl_stmt int = + for = < ++ = + * + if <= = break = + * + public public return public public if != - = - public public return / public public return / int public public assert >= decl_stmt int = * + if == - return else return private private if + >= = + private private if + >= = + int private private decl_stmt int = = = int int protected protected decl_stmt int = * decl_stmt int = * + + + + int int int int int int int int protected protected decl_stmt int = * decl_stmt int = * decl_stmt int = decl_stmt int = if < return - else if > return decl_stmt int = + decl_stmt int = + if < return - else if > return decl_stmt int = + decl_stmt int = + if < return - else if > return return int private private decl_stmt int = = = int int protected protected decl_stmt int = * decl_stmt int = * + + + + int int int int int int int int protected protected decl_stmt int = * decl_stmt int = * decl_stmt int = + decl_stmt int = + if < return - else if > return decl_stmt int = + decl_stmt int = + if < return - else if > return decl_stmt int = decl_stmt int = if < return - else if > return return public public assert < / : + + + = = * return public public assert + - * <= * * + assert = ++ = ++ = ++ int int int int private private decl_stmt int = if == * return decl_stmt int = decl_stmt int = + decl_stmt int = + if > return else if < return if > return else if < return if > return else if < return return int public public decl_stmt int = * + * = = ++ = ++ = ++ String static static if >= && <= && != && != else decl_stmt java.lang.String = if < else if < else if < else if < else if < else if < else if < else StringBuilder Transition int int public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int final final = if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt org.apache.lucene.util.automaton.Transition = new for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + decl_stmt int = for = < ++ assert >= call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() int int int decl Set decl int int int decl_stmt java.util.Set < = new <> call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() for = < += decl_stmt int = decl_stmt int = + * + while < decl_stmt int = + decl_stmt int = + call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() + += decl_stmt int = new call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() decl_stmt int = for : ++ = return int int int int int public public assert >= assert >= decl_stmt int = * decl_stmt int = + * * + while < decl_stmt int = decl_stmt int = + decl_stmt int = + if <= && <= return += return - public public public public if < + = + ++ = ++ = ++ = ++ = public public for = < += if == + + + if int private private decl_stmt int = = = int int protected protected decl_stmt int = * decl_stmt int = * + + + + + + int int int int int int int int int int protected protected decl_stmt int = * decl_stmt int = * decl_stmt int = decl_stmt int = if < return - else if > return decl_stmt int = + decl_stmt int = + if < return - else if > return decl_stmt int = + decl_stmt int = + if < return - else if > return decl_stmt int = + decl_stmt int = + if < return - else if > return return Automaton int int public public decl_stmt int = decl_stmt int = / decl_stmt org.apache.lucene.util.automaton.Automaton = new for = < ++ call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) for = < += call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) + + + call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() return public public return ++ public public if >= throw new + + + + public public return public public return int int Transition int public public decl_stmt int = decl_stmt int = decl_stmt org.apache.lucene.util.automaton.Transition = new for = < ++ decl_stmt int = for = < ++ + + int int public public decl_stmt int = for = < ++ decl_stmt int = public public return + + + + call java.util.BitSet.size() call java.util.BitSet.size() call java.util.BitSet.size() call java.util.BitSet.size() call java.util.BitSet.size() / + + * + * +