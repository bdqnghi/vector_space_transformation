org.apache.lucene.queryparser.flexible.standard.builders org.apache.lucene.index.Term import org.apache.lucene.queryparser.flexible.core.QueryNodeException import org.apache.lucene.queryparser.flexible.core.nodes.QueryNode import org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode import org.apache.lucene.queryparser.flexible.standard.processors.MultiTermRewriteMethodProcessor import org.apache.lucene.search.MultiTermQuery import org.apache.lucene.search.RegexpQuery import class org.apache.lucene.queryparser.flexible.standard.builders.RegexpQueryNodeBuilder super super implements RegexpQuery RegexpQueryNode decl MultiTermQuery public public throws decl_stmt org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode = decl_stmt org.apache.lucene.search.RegexpQuery = new new call org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode.getFieldAsString() call org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode.getFieldAsString() call org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode.getFieldAsString() call org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode.getFieldAsString() call org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode.getFieldAsString() call org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode.textToBytesRef() call org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode.textToBytesRef() call org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode.textToBytesRef() call org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode.textToBytesRef() call org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode.textToBytesRef() decl_stmt RewriteMethod = if != call RegexpQuery.setRewriteMethod() call RegexpQuery.setRewriteMethod() call RegexpQuery.setRewriteMethod() call RegexpQuery.setRewriteMethod() call RegexpQuery.setRewriteMethod() return