org.apache.lucene.util class org.apache.lucene.util.TestUnicodeUtil super super extends decl byte String int int public public - new new new new new decl_stmt int = for = < ++ decl_stmt java.lang.String final final = decl_stmt byte final final final = new call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() * decl_stmt int final final = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() new decl byte private private decl_stmt byte = new for = < ++ = byte return private private new decl int decl byte int String int decl int int public public decl_stmt int = new decl_stmt int = for = < ++ decl_stmt java.lang.String final final = decl_stmt byte final final final = new call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() * decl_stmt int final final = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() = decl_stmt int final final = new decl_stmt int = call String.codePoints() call String.codePoints() call String.codePoints() call String.codePoints() call String.codePoints() if ! for = < call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() ++ + + + call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) for = < ++ + + + int int String int decl int decl int String int decl int public public decl_stmt int final final final = - decl_stmt java.lang.String final final = + + + + + + decl_stmt int final final final = - - - - for = < ++ decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = try decl_stmt java.lang.String = == - call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + continue catch == - int BytesRef CharsRefBuilder String public public decl_stmt int = for = < ++ decl_stmt java.lang.String = decl_stmt org.apache.lucene.util.BytesRef = new decl_stmt org.apache.lucene.util.CharsRefBuilder = new call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() decl byte int int String public public decl_stmt int = for = < ++ decl_stmt java.lang.String = decl_stmt byte = new call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() * decl_stmt int = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length()