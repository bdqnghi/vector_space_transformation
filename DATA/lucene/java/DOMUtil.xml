org.apache.solr.util java.util.ArrayList import java.util.HashMap import java.util.Iterator import java.util.List import java.util.Map import java.util.Properties import org.apache.solr.common.SolrException import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.StrUtils import org.w3c.dom.NamedNodeMap import org.w3c.dom.Node import org.w3c.dom.NodeList import static static org.apache.solr.common.params.CommonParams.NAME import class org.apache.solr.util.DOMUtil String public static < public static < return String decl Map Node String public static < public static < decl_stmt java.util.Map < = new <> for = < ++ decl_stmt org.apache.lucene.replicator.nrt.Node = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call Node.getPrefix() call Node.getPrefix() call Node.getPrefix() call Node.getPrefix() call Node.getPrefix() continue continue decl_stmt java.lang.String = call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() for : if continue continue decl_stmt java.lang.String = call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return NodeList Node public static public static if ! return decl_stmt NodeList = if == return for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt org.apache.lucene.replicator.nrt.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() return return public static public static return public static public static return Node String public static public static decl_stmt org.apache.lucene.replicator.nrt.Node = == : if == if == return throw new + + + decl_stmt java.lang.String = call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() return public static public static return public static < public static < return public static public static return decl NamedList public static < public static < decl_stmt org.apache.solr.common.util.NamedList < = new <> for = < ++ return List public static public static decl_stmt java.util.List = new for = < ++ return String String Object String public static public static if != return decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = decl_stmt java.lang.Object = if = else if = else decl_stmt java.lang.String final final = try if = else if = else if = else if = else if = else if = catch throw new + != + + : + + + + + if != if != StringBuilder short public static public static decl_stmt short = switch case case case return decl_stmt java.lang.StringBuilder = new return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() NodeList short short Node private static private static decl_stmt short = switch case case case case decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt org.apache.lucene.replicator.nrt.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt short = call Node.getNodeType() call Node.getNodeType() call Node.getNodeType() call Node.getNodeType() call Node.getNodeType() if != && != break case case case case case break case case case default: public static public static Node NamedNodeMap Node Node public static public static decl_stmt org.apache.lucene.replicator.nrt.Node decl_stmt org.apache.lucene.replicator.nrt.Node = while = != = call Node.getNextSibling() call Node.getNextSibling() call Node.getNextSibling() call Node.getNextSibling() call Node.getNextSibling() if call Node.getNodeType() call Node.getNodeType() call Node.getNodeType() call Node.getNodeType() call Node.getNodeType() == call Node.setNodeValue() call Node.setNodeValue() call Node.setNodeValue() call Node.setNodeValue() call Node.setNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() else if call Node.getNodeType() call Node.getNodeType() call Node.getNodeType() call Node.getNodeType() call Node.getNodeType() == decl_stmt NamedNodeMap = call Node.getAttributes() call Node.getAttributes() call Node.getAttributes() call Node.getAttributes() call Node.getAttributes() for = < call NamedNodeMap.getLength() call NamedNodeMap.getLength() call NamedNodeMap.getLength() call NamedNodeMap.getLength() call NamedNodeMap.getLength() ++ decl_stmt org.apache.lucene.replicator.nrt.Node = call NamedNodeMap.item() call NamedNodeMap.item() call NamedNodeMap.item() call NamedNodeMap.item() call NamedNodeMap.item() call Node.setNodeValue() call Node.setNodeValue() call Node.setNodeValue() call Node.setNodeValue() call Node.setNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() call Node.getNodeValue() decl List decl Iterator String decl Iterator String StringBuilder decl List int String public static public static if == || == - return decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> decl_stmt java.lang.StringBuilder = new decl_stmt java.util.Iterator < = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() decl_stmt java.util.Iterator < = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if == decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.lang.String = decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if > - = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if != = if == = if == throw new + + + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() String int int int private static private static < < decl_stmt int = decl_stmt int while = >= if > if == - = + else if + != if + == = + else + = + else decl_stmt int = if < throw new + decl_stmt java.lang.String = + = + if <