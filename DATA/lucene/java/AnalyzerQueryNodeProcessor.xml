org.apache.lucene.queryparser.flexible.standard.processors java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.LinkedList import java.util.List import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.CachingTokenFilter import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import org.apache.lucene.queryparser.flexible.core.QueryNodeException import org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler import org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode import org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode import org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode import org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode import org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode import org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode.Modifier import org.apache.lucene.queryparser.flexible.core.nodes.NoTokenFoundQueryNode import org.apache.lucene.queryparser.flexible.core.nodes.QueryNode import org.apache.lucene.queryparser.flexible.core.nodes.QuotedFieldQueryNode import org.apache.lucene.queryparser.flexible.core.nodes.RangeQueryNode import org.apache.lucene.queryparser.flexible.core.nodes.TextableQueryNode import org.apache.lucene.queryparser.flexible.core.nodes.TokenizedPhraseQueryNode import org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl import org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler.ConfigurationKeys import org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler.Operator import org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode import org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode import org.apache.lucene.queryparser.flexible.standard.nodes.StandardBooleanQueryNode import org.apache.lucene.queryparser.flexible.standard.nodes.WildcardQueryNode import class org.apache.lucene.queryparser.flexible.standard.processors.AnalyzerQueryNodeProcessor super super extends Operator Analyzer boolean Operator Analyzer Boolean public public throws decl_stmt org.apache.lucene.analysis.Analyzer = if != = = decl_stmt java.lang.Boolean = decl_stmt sun.tools.jstat.Operator = = != : if != = if != return return int boolean String QueryNode int decl LinkedList decl List TokenizedPhraseQueryNode String boolean int CachingTokenFilter PositionIncrementAttribute FieldQueryNode MultiPhraseQueryNode FieldQueryNode String int QueryNode CharTermAttribute QueryNode int int protected protected throws if instanceof && ! instanceof && ! instanceof && ! instanceof && ! instanceof decl_stmt org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode = decl_stmt java.lang.String = call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.getTextAsString() call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.getTextAsString() call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.getTextAsString() call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.getTextAsString() call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.getTextAsString() decl_stmt java.lang.String = call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.getFieldAsString() call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.getFieldAsString() call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.getFieldAsString() call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.getFieldAsString() call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.getFieldAsString() decl_stmt org.apache.lucene.analysis.CachingTokenFilter = decl_stmt org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute = decl_stmt int = decl_stmt int = decl_stmt boolean = try try = = new call org.apache.lucene.analysis.CachingTokenFilter.reset() call org.apache.lucene.analysis.CachingTokenFilter.reset() call org.apache.lucene.analysis.CachingTokenFilter.reset() call org.apache.lucene.analysis.CachingTokenFilter.reset() call org.apache.lucene.analysis.CachingTokenFilter.reset() if call CachingTokenFilter.hasAttribute() call CachingTokenFilter.hasAttribute() call CachingTokenFilter.hasAttribute() call CachingTokenFilter.hasAttribute() call CachingTokenFilter.hasAttribute() = call CachingTokenFilter.getAttribute() call CachingTokenFilter.getAttribute() call CachingTokenFilter.getAttribute() call CachingTokenFilter.getAttribute() call CachingTokenFilter.getAttribute() try while call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() ++ decl_stmt int = != call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() : if != += else = catch call org.apache.lucene.analysis.CachingTokenFilter.reset() call org.apache.lucene.analysis.CachingTokenFilter.reset() call org.apache.lucene.analysis.CachingTokenFilter.reset() call org.apache.lucene.analysis.CachingTokenFilter.reset() call org.apache.lucene.analysis.CachingTokenFilter.reset() catch throw new if ! call CachingTokenFilter.hasAttribute() call CachingTokenFilter.hasAttribute() call CachingTokenFilter.hasAttribute() call CachingTokenFilter.hasAttribute() call CachingTokenFilter.hasAttribute() return new decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute = call CachingTokenFilter.getAttribute() call CachingTokenFilter.getAttribute() call CachingTokenFilter.getAttribute() call CachingTokenFilter.getAttribute() call CachingTokenFilter.getAttribute() if == return new else if == decl_stmt java.lang.String = try decl_stmt boolean = call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() assert == = call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() catch call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setText(CharSequence) call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setText(CharSequence) call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setText(CharSequence) call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setText(CharSequence) call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setText(CharSequence) return else if || ! instanceof if == || ! instanceof if == decl_stmt java.util.LinkedList < = new <> for = < ++ decl_stmt java.lang.String = try decl_stmt boolean = call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() assert == = call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() catch call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() new - - return new new == else decl_stmt org.apache.lucene.queryparser.flexible.core.nodes.QueryNode = new > decl_stmt org.apache.lucene.queryparser.flexible.core.nodes.QueryNode = for = < ++ decl_stmt java.lang.String = try decl_stmt boolean = call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() assert == = call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() catch if != && call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() == if ! instanceof decl_stmt org.apache.lucene.queryparser.flexible.core.nodes.QueryNode = = new > new - - else if != if == call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) else call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) new = new - - if == call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) else call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) call org.apache.lucene.queryparser.flexible.core.nodes.QueryNode.add(List) new if instanceof = new return else decl_stmt org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode = new decl_stmt java.util.List < = new <> decl_stmt int = - decl_stmt int = decl_stmt int = for < ++ decl_stmt java.lang.String = decl_stmt int = try decl_stmt boolean = call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() assert == = call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() if != = call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() catch if > && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > for : if else call MultiPhraseQueryNode.add() call MultiPhraseQueryNode.add() call MultiPhraseQueryNode.add() call MultiPhraseQueryNode.add() call MultiPhraseQueryNode.add() ++ call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() += call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new - - for : if else call MultiPhraseQueryNode.add() call MultiPhraseQueryNode.add() call MultiPhraseQueryNode.add() call MultiPhraseQueryNode.add() call MultiPhraseQueryNode.add() return else decl_stmt org.apache.lucene.queryparser.flexible.core.nodes.TokenizedPhraseQueryNode = new decl_stmt int = - for = < ++ decl_stmt java.lang.String = decl_stmt int = try decl_stmt boolean = call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() call org.apache.lucene.analysis.CachingTokenFilter.incrementToken() assert == = call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() if != = call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() catch decl_stmt org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode = new - - if += call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setPositionIncrement(int) call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setPositionIncrement(int) call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setPositionIncrement(int) call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setPositionIncrement(int) call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setPositionIncrement(int) else call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setPositionIncrement(int) call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setPositionIncrement(int) call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setPositionIncrement(int) call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setPositionIncrement(int) call org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode.setPositionIncrement(int) call TokenizedPhraseQueryNode.add() call TokenizedPhraseQueryNode.add() call TokenizedPhraseQueryNode.add() call TokenizedPhraseQueryNode.add() call TokenizedPhraseQueryNode.add() return finally if != try call CachingTokenFilter.close() call CachingTokenFilter.close() call CachingTokenFilter.close() call CachingTokenFilter.close() call CachingTokenFilter.close() catch return protected protected throws return protected < protected < < throws return