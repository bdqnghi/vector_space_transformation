org.apache.lucene.search.postingshighlight java.io.IOException import java.nio.charset.StandardCharsets import java.text.BreakIterator import java.util.ArrayList import java.util.Arrays import java.util.Comparator import java.util.HashMap import java.util.List import java.util.Locale import java.util.Map import java.util.PriorityQueue import java.util.SortedSet import java.util.TreeSet import org.apache.lucene.analysis.Analyzer import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexReaderContext import org.apache.lucene.index.LeafReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.MultiReader import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.ReaderUtil import org.apache.lucene.index.StoredFieldVisitor import org.apache.lucene.index.Term import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.TopDocs import org.apache.lucene.util.BytesRef import org.apache.lucene.util.InPlaceMergeSorter import org.apache.lucene.util.UnicodeUtil import org.apache.lucene.util.automaton.CharacterRunAutomaton import class org.apache.lucene.search.postingshighlight.PostingsHighlighter IndexSearcher PassageScorer int PassageFormatter int PostingsEnum protected protected return protected protected if == = new return protected protected if == = new return public public throws return decl Map public public throws decl_stmt java.util.Map < = new new return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() int public < public < throws decl_stmt int = new return int public < public < throws decl_stmt org.apache.lucene.search.ScoreDoc final final = decl_stmt int = new for = < ++ = return Object decl String decl Map decl Object public < public < throws decl_stmt java.util.Map < = new <> for < : decl_stmt java.lang.Object = decl_stmt java.lang.String = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for = < ++ decl_stmt java.lang.Object = if != = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() return String Term IndexReaderContext int Term decl Map decl List int String BytesRef decl Object decl int decl SortedSet decl Map decl SortedSet decl String int protected < protected < throws if < throw new if != throw new decl_stmt java.util.SortedSet < = new <> call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) decl_stmt IndexReaderContext = decl_stmt java.util.List < = call IndexReaderContext.leaves() call IndexReaderContext.leaves() call IndexReaderContext.leaves() call IndexReaderContext.leaves() call IndexReaderContext.leaves() decl_stmt int = new decl_stmt java.lang.String final final = new decl_stmt int final final = new new protected protected decl_stmt java.lang.String = = = decl_stmt int = = = protected protected return decl_stmt java.lang.String = decl_stmt java.util.Map < = new <> for = < ++ decl_stmt java.lang.String = decl_stmt int = decl_stmt org.apache.lucene.index.Term = new decl_stmt org.apache.lucene.index.Term = new decl_stmt java.util.SortedSet < = call decl SortedSet.subSet() call decl SortedSet.subSet() call decl SortedSet.subSet() call decl SortedSet.subSet() call decl SortedSet.subSet() decl_stmt org.apache.lucene.util.BytesRef = new call decl SortedSet.size() call decl SortedSet.size() call decl SortedSet.size() call decl SortedSet.size() call decl SortedSet.size() decl_stmt int = for : ++ = decl_stmt java.util.Map < = decl_stmt java.lang.Object = new for = < ++ = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return String int protected protected decl_stmt java.lang.String = = = decl_stmt int = = = protected protected return LimitedStoredFieldVisitor char protected protected throws decl_stmt java.lang.String = new decl_stmt char = new for = < ++ = decl_stmt LimitedStoredFieldVisitor = new for = < ++ for = < ++ = call LimitedStoredFieldVisitor.getValue() call LimitedStoredFieldVisitor.getValue() call LimitedStoredFieldVisitor.getValue() call LimitedStoredFieldVisitor.getValue() call LimitedStoredFieldVisitor.getValue() call LimitedStoredFieldVisitor.reset() call LimitedStoredFieldVisitor.reset() call LimitedStoredFieldVisitor.reset() call LimitedStoredFieldVisitor.reset() call LimitedStoredFieldVisitor.reset() return protected protected return protected protected return PassageFormatter int TermsEnum int decl Map Analyzer String Passage LeafReader LeafReaderContext int PostingsEnum Terms private < private < < throws decl_stmt java.util.Map < = new <> decl_stmt PassageFormatter = if == throw new decl_stmt org.apache.lucene.analysis.Analyzer = decl_stmt org.apache.lucene.util.automaton.CharacterRunAutomaton = new if != = if > decl_stmt org.apache.lucene.util.BytesRef = new + = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.TermsEnum = decl_stmt int = - for = < ++ decl_stmt java.lang.String = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == continue decl_stmt int = decl_stmt int = decl_stmt org.apache.lucene.index.LeafReaderContext = decl_stmt org.apache.lucene.index.LeafReader = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() assert >= if != decl_stmt org.apache.lucene.index.Terms = call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) call org.apache.lucene.index.LeafReader.terms(String) if != if ! call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() call Terms.hasOffsets() throw new + + = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() = new else = if == continue if > decl_stmt org.apache.lucene.index.PostingsEnum = call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() - - = decl_stmt org.apache.lucene.search.postingshighlight.Passage = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - if == = if > call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call PassageFormatter.format() call PassageFormatter.format() call PassageFormatter.format() call PassageFormatter.format() call PassageFormatter.format() = return decl PriorityQueue BytesRef decl PriorityQueue OffsetsEnum PostingsEnum Passage int Passage PostingsEnum PassageScorer int int int private private throws decl_stmt org.apache.lucene.search.postingshighlight.PassageScorer = if == throw new decl_stmt org.apache.lucene.util.PriorityQueue < = new <> decl_stmt float = new for = < ++ decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt int if == continue else if == = if ! continue = = assert != = call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() else = call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() if < = call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() if == = call org.apache.lucene.search.postingshighlight.PassageScorer.weight(int,int) call org.apache.lucene.search.postingshighlight.PassageScorer.weight(int,int) call org.apache.lucene.search.postingshighlight.PassageScorer.weight(int,int) call org.apache.lucene.search.postingshighlight.PassageScorer.weight(int,int) call org.apache.lucene.search.postingshighlight.PassageScorer.weight(int,int) call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() new call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() new decl_stmt org.apache.lucene.util.PriorityQueue < = new <> new < public public if < return - else if > return else return - decl_stmt org.apache.lucene.search.postingshighlight.Passage = new decl_stmt OffsetsEnum while = call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() != decl_stmt org.apache.lucene.index.PostingsEnum final final = decl_stmt int = call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() assert >= decl_stmt int = call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() assert call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() == if < && && continue if >= if >= *= call PassageScorer.norm() call PassageScorer.norm() call PassageScorer.norm() call PassageScorer.norm() call PassageScorer.norm() if call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() == && < call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call org.apache.lucene.search.postingshighlight.Passage.reset() call org.apache.lucene.search.postingshighlight.Passage.reset() call org.apache.lucene.search.postingshighlight.Passage.reset() call org.apache.lucene.search.postingshighlight.Passage.reset() call org.apache.lucene.search.postingshighlight.Passage.reset() else call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() if call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() > = call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call org.apache.lucene.search.postingshighlight.Passage.reset() call org.apache.lucene.search.postingshighlight.Passage.reset() call org.apache.lucene.search.postingshighlight.Passage.reset() call org.apache.lucene.search.postingshighlight.Passage.reset() call org.apache.lucene.search.postingshighlight.Passage.reset() else = new if >= decl_stmt org.apache.lucene.search.postingshighlight.Passage = new call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.toArray() call decl PriorityQueue.toArray() call decl PriorityQueue.toArray() call decl PriorityQueue.toArray() call decl PriorityQueue.toArray() for : new < public public return - return assert < = + = decl_stmt int = while ++ decl_stmt org.apache.lucene.util.BytesRef = if == = call OffsetsEnum.dp() call OffsetsEnum.dp() call OffsetsEnum.dp() call OffsetsEnum.dp() call OffsetsEnum.dp() call OffsetsEnum.dp() call OffsetsEnum.dp() call OffsetsEnum.dp() call OffsetsEnum.dp() assert != call org.apache.lucene.search.postingshighlight.Passage.addMatch(int,int,BytesRef) call org.apache.lucene.search.postingshighlight.Passage.addMatch(int,int,BytesRef) call org.apache.lucene.search.postingshighlight.Passage.addMatch(int,int,BytesRef) call org.apache.lucene.search.postingshighlight.Passage.addMatch(int,int,BytesRef) call org.apache.lucene.search.postingshighlight.Passage.addMatch(int,int,BytesRef) if == call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() break else ++ call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() = call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() = call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() if >= || > call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() break += * call org.apache.lucene.search.postingshighlight.PassageScorer.tf(int,int) call org.apache.lucene.search.postingshighlight.PassageScorer.tf(int,int) call org.apache.lucene.search.postingshighlight.PassageScorer.tf(int,int) call org.apache.lucene.search.postingshighlight.PassageScorer.tf(int,int) call org.apache.lucene.search.postingshighlight.PassageScorer.tf(int,int) - assert return public public if < return - else if > return else return - public public return - Passage decl List int int protected protected decl_stmt java.util.List < = new <> decl_stmt int = assert == while call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < decl_stmt int = if == break decl_stmt org.apache.lucene.search.postingshighlight.Passage = new = = = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() int int public public try decl_stmt int = decl_stmt int = if == return - else return catch throw new public public throws return - public public throws return public public throws return public public throws return public public throws return public public return public public throws return public public throws return public public return StringBuilder String public public throws decl_stmt java.lang.String = new assert >= decl_stmt java.lang.StringBuilder = if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > && call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() < call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) - call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) public public throws = if < return else if > return == : return return = - for = < ++