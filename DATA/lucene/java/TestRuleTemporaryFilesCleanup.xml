org.apache.lucene.util java.io.IOException import java.net.URI import java.nio.file.FileSystem import java.nio.file.FileSystems import java.nio.file.Files import java.nio.file.Path import java.nio.file.spi.FileSystemProvider import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.HashSet import java.util.List import java.util.Locale import java.util.Random import java.util.Set import org.apache.lucene.mockfile.DisableFsyncFS import org.apache.lucene.mockfile.ExtrasFS import org.apache.lucene.mockfile.HandleLimitFS import org.apache.lucene.mockfile.LeakFS import org.apache.lucene.mockfile.ShuffleFS import org.apache.lucene.mockfile.VerboseFS import org.apache.lucene.mockfile.WindowsFS import org.apache.lucene.util.LuceneTestCase.SuppressFileSystems import org.apache.lucene.util.LuceneTestCase.SuppressFsync import org.apache.lucene.util.LuceneTestCase.SuppressTempFileChecks import com.carrotsearch.randomizedtesting.RandomizedContext import com.carrotsearch.randomizedtesting.rules.TestRuleAdapter import class org.apache.lucene.util.TestRuleTemporaryFilesCleanup super super extends int TestRuleMarkFailure decl List Path FileSystem Path int assert != if + return synchronized call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() protected protected throws assert == = = private private < < extends extends if || return else return SuppressFileSystems decl Class FileSystem decl Set Random private private decl_stmt java.lang.Class < = decl_stmt java.util.Set < = new <> if call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() decl_stmt SuppressFileSystems = call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call SuppressFileSystems.value() call SuppressFileSystems.value() call SuppressFileSystems.value() call SuppressFileSystems.value() call SuppressFileSystems.value() decl_stmt java.io.FileSystem = if && = new new decl_stmt java.util.Random = if call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() || call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) > if = new if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) > if = new call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) > if = new if = new if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == if ! && = new if = new call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if + call FileSystem.provider() call FileSystem.provider() call FileSystem.provider() call FileSystem.provider() call FileSystem.provider() return call FileSystem.provider() call FileSystem.provider() call FileSystem.provider() call FileSystem.provider() call FileSystem.provider() Path private private throws decl_stmt java.nio.file.Path = call FileSystem.getPath() call FileSystem.getPath() call FileSystem.getPath() call FileSystem.getPath() call FileSystem.getPath() assert && return call java.nio.file.Path.toRealPath(LinkOption) call java.nio.file.Path.toRealPath(LinkOption) call java.nio.file.Path.toRealPath(LinkOption) call java.nio.file.Path.toRealPath(LinkOption) call java.nio.file.Path.toRealPath(LinkOption) decl Path String decl Class protected protected < throws decl_stmt java.nio.file.Path final final final decl_stmt java.lang.String final final synchronized = != call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() : = = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() if call TestRuleMarkFailure.wasSuccessful() call TestRuleMarkFailure.wasSuccessful() call TestRuleMarkFailure.wasSuccessful() call TestRuleMarkFailure.wasSuccessful() call TestRuleMarkFailure.wasSuccessful() try catch decl_stmt java.lang.Class < = if call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() + call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() + + return throw if != call FileSystem.close() call FileSystem.close() call FileSystem.close() call FileSystem.close() call FileSystem.close() else if != + int boolean Path RandomizedContext decl Class String if == decl_stmt RandomizedContext = decl_stmt java.lang.Class < = call RandomizedContext.getTargetClass() call RandomizedContext.getTargetClass() call RandomizedContext.getTargetClass() call RandomizedContext.getTargetClass() call RandomizedContext.getTargetClass() decl_stmt java.lang.String = call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() = call java.lang.String.replaceFirst(String,String) call java.lang.String.replaceFirst(String,String) call java.lang.String.replaceFirst(String,String) call java.lang.String.replaceFirst(String,String) call java.lang.String.replaceFirst(String,String) = call java.lang.String.replaceFirst(String,String) call java.lang.String.replaceFirst(String,String) call java.lang.String.replaceFirst(String,String) call java.lang.String.replaceFirst(String,String) call java.lang.String.replaceFirst(String,String) decl_stmt int = decl_stmt java.nio.file.Path decl_stmt boolean = do if ++ >= throw new + call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) + + call RandomizedContext.getRunnerSeedAsString() call RandomizedContext.getRunnerSeedAsString() call RandomizedContext.getRunnerSeedAsString() call RandomizedContext.getRunnerSeedAsString() call RandomizedContext.getRunnerSeedAsString() + + try = catch ! = return Path int boolean Path public public decl_stmt java.nio.file.Path = decl_stmt int = decl_stmt java.nio.file.Path decl_stmt boolean = do if ++ >= throw new + call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) + + try = catch ! return Path int boolean Path public public throws decl_stmt java.nio.file.Path = decl_stmt int = decl_stmt java.nio.file.Path decl_stmt boolean = do if ++ >= throw new + call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() call java.nio.file.Path.toAbsolutePath() = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) + + + try = catch ! return