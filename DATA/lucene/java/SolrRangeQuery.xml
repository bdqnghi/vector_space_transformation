org.apache.solr.query java.io.IOException import java.util.ArrayList import java.util.List import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.index.TermState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.BulkScorer import org.apache.lucene.search.ConstantScoreQuery import org.apache.lucene.search.ConstantScoreScorer import org.apache.lucene.search.ConstantScoreWeight import org.apache.lucene.search.DocIdSet import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.Scorer import org.apache.lucene.search.TermQuery import org.apache.lucene.search.Weight import org.apache.lucene.util.AttributeSource import org.apache.lucene.util.BytesRef import org.apache.lucene.util.DocIdSetBuilder import org.apache.lucene.util.FixedBitSet import org.apache.solr.search.BitDocSet import org.apache.solr.search.DocSet import org.apache.solr.search.DocSetBuilder import org.apache.solr.search.DocSetProducer import org.apache.solr.search.ExtendedQueryBase import org.apache.solr.search.Filter import org.apache.solr.search.SolrIndexSearcher import class org.apache.solr.query.SolrRangeQuery super super extends super implements BytesRef BytesRef byte byte String byte public public return public public return & != public public return & != int public public decl_stmt int = * + = * + == : call org.apache.lucene.util.BytesRef.hashCode() call org.apache.lucene.util.BytesRef.hashCode() call org.apache.lucene.util.BytesRef.hashCode() call org.apache.lucene.util.BytesRef.hashCode() call org.apache.lucene.util.BytesRef.hashCode() = * + == : call org.apache.lucene.util.BytesRef.hashCode() call org.apache.lucene.util.BytesRef.hashCode() call org.apache.lucene.util.BytesRef.hashCode() call org.apache.lucene.util.BytesRef.hashCode() call org.apache.lucene.util.BytesRef.hashCode() return SolrRangeQuery public public if == return if ! instanceof return decl_stmt org.apache.solr.query.SolrRangeQuery = return == && && == || != && != && && == || != && != && StringBuilder public public decl_stmt java.lang.StringBuilder = new if ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) : return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() String private private if == return decl_stmt java.lang.String = if = return public public throws return public public throws return new public public throws return >>> + int BitDocSet int decl List int FixedBitSet TermsEnum DocSetBuilder private private throws decl_stmt int = decl_stmt org.apache.solr.search.BitDocSet = decl_stmt org.apache.lucene.util.FixedBitSet = call org.apache.solr.search.BitDocSet.size() call org.apache.solr.search.BitDocSet.size() call org.apache.solr.search.BitDocSet.size() call org.apache.solr.search.BitDocSet.size() call org.apache.solr.search.BitDocSet.size() == : call org.apache.solr.search.BitDocSet.getBits() call org.apache.solr.search.BitDocSet.getBits() call org.apache.solr.search.BitDocSet.getBits() call org.apache.solr.search.BitDocSet.getBits() call org.apache.solr.search.BitDocSet.getBits() decl_stmt org.apache.solr.search.DocSetBuilder = new decl_stmt java.util.List < = decl_stmt int = for : decl_stmt org.apache.lucene.index.TermsEnum = decl_stmt int = call org.apache.solr.search.DocSetBuilder.add(int) call org.apache.solr.search.DocSetBuilder.add(int) call org.apache.solr.search.DocSetBuilder.add(int) call org.apache.solr.search.DocSetBuilder.add(int) call org.apache.solr.search.DocSetBuilder.add(int) = return <= call org.apache.solr.search.DocSetBuilder.buildUniqueInOrder(FixedBitSet) call org.apache.solr.search.DocSetBuilder.buildUniqueInOrder(FixedBitSet) call org.apache.solr.search.DocSetBuilder.buildUniqueInOrder(FixedBitSet) call org.apache.solr.search.DocSetBuilder.buildUniqueInOrder(FixedBitSet) call org.apache.solr.search.DocSetBuilder.buildUniqueInOrder(FixedBitSet) : call org.apache.solr.search.DocSetBuilder.build(FixedBitSet) call org.apache.solr.search.DocSetBuilder.build(FixedBitSet) call org.apache.solr.search.DocSetBuilder.build(FixedBitSet) call org.apache.solr.search.DocSetBuilder.build(FixedBitSet) call org.apache.solr.search.DocSetBuilder.build(FixedBitSet) public public throws return public public throws public public throws return public public throws return public public throws return public public throws return public public throws return int public public throws if = else = if == return if != decl_stmt int = if < || == && return else = return public public return public public throws return public public throws public public throws return public public throws return new long int BytesRef int TermState private private < throws decl_stmt long = decl_stmt int final final = for = < ++ decl_stmt org.apache.lucene.util.BytesRef final final = if == return - - decl_stmt org.apache.lucene.index.TermState = if call org.apache.lucene.index.TermState.isRealTerm() call org.apache.lucene.index.TermState.isRealTerm() call org.apache.lucene.index.TermState.isRealTerm() call org.apache.lucene.index.TermState.isRealTerm() call org.apache.lucene.index.TermState.isRealTerm() == return decl_stmt int = += new return == - - : long TermsEnum Terms Query TermsEnum PostingsEnum DocSet boolean TermContext DocIdSetBuilder decl Builder decl BooleanQuery SegState Weight decl List SolrIndexSearcher private private throws decl_stmt SegState = if != return decl_stmt boolean = ! && == = decl_stmt org.apache.solr.search.SolrIndexSearcher = if && instanceof = if call org.apache.solr.search.SolrIndexSearcher.getFilterCache() call org.apache.solr.search.SolrIndexSearcher.getFilterCache() call org.apache.solr.search.SolrIndexSearcher.getFilterCache() call org.apache.solr.search.SolrIndexSearcher.getFilterCache() call org.apache.solr.search.SolrIndexSearcher.getFilterCache() == = else = decl_stmt org.apache.solr.search.DocSet = call org.apache.solr.search.SolrIndexSearcher.getFilterCache() call org.apache.solr.search.SolrIndexSearcher.getFilterCache() call org.apache.solr.search.SolrIndexSearcher.getFilterCache() call org.apache.solr.search.SolrIndexSearcher.getFilterCache() call org.apache.solr.search.SolrIndexSearcher.getFilterCache() if != = call Weight.getTopFilter() call Weight.getTopFilter() call Weight.getTopFilter() call Weight.getTopFilter() call Weight.getTopFilter() if != return = new decl_stmt org.apache.lucene.index.Terms final final = if == return = new decl_stmt org.apache.lucene.index.TermsEnum final final = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt java.util.List final final final < = new <> decl_stmt long = if < decl_stmt org.apache.lucene.util.fst.Builder = new for : decl_stmt org.apache.lucene.index.TermContext final final = new call decl Builder.register() call decl Builder.register() call decl Builder.register() call decl Builder.register() call decl Builder.register() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new decl_stmt org.apache.lucene.search.Query = new call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() decl_stmt org.apache.lucene.search.Weight final final = call Query.normalize() call Query.normalize() call Query.normalize() call Query.normalize() call Query.normalize() return = new if decl_stmt org.apache.solr.search.DocSet = call org.apache.solr.search.SolrIndexSearcher.getFilterCache() call org.apache.solr.search.SolrIndexSearcher.getFilterCache() call org.apache.solr.search.SolrIndexSearcher.getFilterCache() call org.apache.solr.search.SolrIndexSearcher.getFilterCache() call org.apache.solr.search.SolrIndexSearcher.getFilterCache() = call Weight.getTopFilter() call Weight.getTopFilter() call Weight.getTopFilter() call Weight.getTopFilter() call Weight.getTopFilter() return = new decl_stmt org.apache.lucene.util.DocIdSetBuilder = new call DocSet.grow() call DocSet.grow() call DocSet.grow() call DocSet.grow() call DocSet.grow() int if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() == decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() for : call DocIdSetBuilder.seekExact() call DocIdSetBuilder.seekExact() call DocIdSetBuilder.seekExact() call DocIdSetBuilder.seekExact() call DocIdSetBuilder.seekExact() = call DocIdSetBuilder.postings() call DocIdSetBuilder.postings() call DocIdSetBuilder.postings() call DocIdSetBuilder.postings() call DocIdSetBuilder.postings() call org.apache.solr.search.DocSet.add(int) call org.apache.solr.search.DocSet.add(int) call org.apache.solr.search.DocSet.add(int) call org.apache.solr.search.DocSet.add(int) call org.apache.solr.search.DocSet.add(int) do = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.solr.search.DocSet.add(int) call org.apache.solr.search.DocSet.add(int) call org.apache.solr.search.DocSet.add(int) call org.apache.solr.search.DocSet.add(int) call org.apache.solr.search.DocSet.add(int) call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != decl_stmt org.apache.lucene.search.DocIdSet = call DocSet.build() call DocSet.build() call DocSet.build() call DocSet.build() call DocSet.build() return = new DocIdSetIterator private private throws if == return decl_stmt org.apache.lucene.search.DocIdSetIterator final final = if == return return new Scorer SegState public public throws decl_stmt SegState final final = if != return call SegState.weight() call SegState.weight() call SegState.weight() call SegState.weight() call SegState.weight() call SegState.weight() call SegState.weight() call SegState.weight() call SegState.weight() else decl_stmt org.apache.lucene.search.Scorer final final = if == return return new SegState public public throws decl_stmt SegState final final = if != return call SegState.weight() call SegState.weight() call SegState.weight() call SegState.weight() call SegState.weight() call SegState.weight() call SegState.weight() call SegState.weight() call SegState.weight() else return