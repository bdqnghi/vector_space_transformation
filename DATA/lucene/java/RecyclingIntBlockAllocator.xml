org.apache.lucene.util org.apache.lucene.util.IntBlockPool.Allocator import class org.apache.lucene.util.RecyclingIntBlockAllocator super super extends decl int int int int Counter decl int public public if == call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) * return new decl_stmt int final final final = -- = return decl int int int int public public decl_stmt int final final = - - decl_stmt int final final = + if >= decl_stmt int final final final = new = decl_stmt int final final = + for = < ++ ++ = = for = < ++ = call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) - - * * assert call Counter.get() call Counter.get() call Counter.get() call Counter.get() call Counter.get() >= public public return public public return call Counter.get() call Counter.get() call Counter.get() call Counter.get() call Counter.get() public public return int int public public assert >= : + decl_stmt int final final decl_stmt int final final if > = = else = - = while > -- = call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) - * * assert call Counter.get() call Counter.get() call Counter.get() call Counter.get() call Counter.get() >= return