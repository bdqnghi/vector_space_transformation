org.apache.lucene.util java.lang.reflect.Array import java.lang.reflect.Field import java.lang.reflect.Modifier import java.security.AccessController import java.security.PrivilegedAction import java.util.AbstractList import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.IdentityHashMap import java.util.List import java.util.Map import java.util.Set import class org.apache.lucene.util.RamUsageTester public public < < for : return public public < < return public static public static return public static public static return new public static public static return long decl Class long decl List decl IdentityHashMap Object int decl Map decl Class decl Set ClassCache decl ArrayList private static private static decl_stmt java.util.Set final final final < = new < decl_stmt java.util.IdentityHashMap final final final < < = new <> decl_stmt java.util.ArrayList final final final < = new <> call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() decl_stmt long = while ! call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() decl_stmt java.lang.Object final final = call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() - if == || call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() continue call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt java.lang.Class final final final < = call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() assert != : if call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() decl_stmt long final final = decl_stmt int final final = decl_stmt java.util.List final final final < decl_stmt java.lang.Class < = call decl Class.getComponentType() call decl Class.getComponentType() call decl Class.getComponentType() call decl Class.getComponentType() call decl Class.getComponentType() if call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() = else = new < public public return public public return += else try decl_stmt ClassCache = call decl IdentityHashMap.get() call decl IdentityHashMap.get() call decl IdentityHashMap.get() call decl IdentityHashMap.get() call decl IdentityHashMap.get() if == call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl IdentityHashMap.put() call decl IdentityHashMap.put() = decl_stmt java.util.Map < = new <> for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() += catch throw new call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl ArrayList.clear() call decl IdentityHashMap.clear() call decl IdentityHashMap.clear() call decl IdentityHashMap.clear() call decl IdentityHashMap.clear() call decl IdentityHashMap.clear() return public public return public public return = private static = private static final final final < return < -> long = < = new <> for < = != = if == continue = : if ! = if !