org.apache.solr.response.transform org.apache.lucene.document.Field import org.apache.solr.common.SolrDocument import org.apache.solr.schema.FieldType import java.util.Set import class org.apache.solr.response.transform.BaseEditorialTransformer super super extends FieldType String String public public return decl Set String public public decl_stmt java.util.Set < = if != && call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() == decl_stmt java.lang.String = call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() else Object String Number protected protected decl_stmt java.lang.String decl_stmt java.lang.Object = decl_stmt java.lang.Number final final if instanceof = else = if != = call Number.toString() call Number.toString() call Number.toString() call Number.toString() call Number.toString() = call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) else if instanceof = else = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() return