org.apache.lucene.analysis.cn.smart.hhmm java.util.ArrayList import java.util.Collection import java.util.HashMap import java.util.List import java.util.Map import org.apache.lucene.analysis.cn.smart.Utility import class org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph decl List BigramDictionary decl Map int int double decl char double int int decl List decl List SegTokenPair private private decl_stmt double = decl_stmt int = decl_stmt int = decl_stmt double = / decl_stmt int decl_stmt char = decl_stmt int = - decl_stmt java.util.List < = while < if decl_stmt java.util.List < = for : = = = while <= if = break ++ if == break for : = new + + = + = call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getFrequency(char) call org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getFrequency(char) = - * + / + + - * - * / + + decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.SegTokenPair = new ++ public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() != public < public < return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() int decl List decl ArrayList public public decl_stmt int = if ! decl_stmt java.util.ArrayList < = new <> call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public return call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() PathNode Integer double decl List decl List SegTokenPair PathNode SegToken int decl List int PathNode int decl List int double public < public < decl_stmt int decl_stmt int = decl_stmt java.util.List < = new <> decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.PathNode = new = = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for = <= ++ decl_stmt double decl_stmt java.util.List < = decl_stmt double = decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.SegTokenPair = for : = decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.PathNode = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if + < = + = decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.PathNode = new = = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - = decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() while != decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.PathNode = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = for = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - >= -- decl_stmt java.lang.Integer = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt int = call int.intValue() call int.intValue() call int.intValue() call int.intValue() call int.intValue() decl_stmt org.apache.lucene.analysis.cn.smart.hhmm.SegToken = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call PathNode.add() call PathNode.add() call PathNode.add() call PathNode.add() call PathNode.add() return StringBuilder decl Collection public public decl_stmt java.lang.StringBuilder = new decl_stmt java.util.Collection < < = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for < : for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()