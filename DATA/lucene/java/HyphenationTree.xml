org.apache.lucene.analysis.compound.hyphenation java.io.IOException import java.io.PrintStream import java.util.ArrayList import java.util.HashMap import org.xml.sax.InputSource import class org.apache.lucene.analysis.compound.hyphenation.HyphenationTree super super extends super implements decl HashMap ByteVector TernaryTree TernaryTree int int byte int int decl byte protected protected decl_stmt int = decl_stmt int = & == >> + : >> + decl_stmt int = call org.apache.lucene.analysis.compound.hyphenation.ByteVector.alloc(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.alloc(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.alloc(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.alloc(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.alloc(int) decl_stmt byte = call org.apache.lucene.analysis.compound.hyphenation.ByteVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.ByteVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.ByteVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.ByteVector.getArray() call org.apache.lucene.analysis.compound.hyphenation.ByteVector.getArray() for = < ++ decl_stmt int = >> decl_stmt byte = - + & if & == + = + | else + = << - + = return char StringBuilder byte protected protected decl_stmt java.lang.StringBuilder = new decl_stmt byte = call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) ++ while != decl_stmt char = >>> - + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = & if == break = - + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) ++ return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() PatternParser public public throws decl_stmt org.apache.lucene.analysis.compound.hyphenation.PatternParser = new = new call org.apache.lucene.analysis.compound.hyphenation.PatternParser.parse(InputSource) call org.apache.lucene.analysis.compound.hyphenation.PatternParser.parse(InputSource) call org.apache.lucene.analysis.compound.hyphenation.PatternParser.parse(InputSource) call org.apache.lucene.analysis.compound.hyphenation.PatternParser.parse(InputSource) call org.apache.lucene.analysis.compound.hyphenation.PatternParser.parse(InputSource) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.trimToSize() call org.apache.lucene.analysis.compound.hyphenation.ByteVector.trimToSize() call org.apache.lucene.analysis.compound.hyphenation.ByteVector.trimToSize() call org.apache.lucene.analysis.compound.hyphenation.ByteVector.trimToSize() call org.apache.lucene.analysis.compound.hyphenation.ByteVector.trimToSize() call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.trimToSize() call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.trimToSize() call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.trimToSize() call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.trimToSize() call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.trimToSize() = int public public decl_stmt int = if >= return return protected protected for == ++ , ++ if == return if == return return - decl byte char StringBuilder byte protected protected decl_stmt java.lang.StringBuilder = new decl_stmt byte = call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) ++ while != decl_stmt char = >>> - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = & if == break = - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) call org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int) ++ decl_stmt byte = new call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() for = < ++ = byte call StringBuilder.charAt() call StringBuilder.charAt() call StringBuilder.charAt() call StringBuilder.charAt() call StringBuilder.charAt() return int int int int char char decl byte protected protected decl_stmt byte decl_stmt int = decl_stmt char decl_stmt char = = while > && < if == if == = decl_stmt int = for = < ++ if < && && && = ++ return decl_stmt int = - if == if == break = ++ = = while > && < if == break if == = decl_stmt int = for = < ++ if < && && && = ++ break else = else = < : decl char public public decl_stmt char = return decl char int boolean int decl int int int String decl ArrayList Object int decl int int decl char decl byte public public decl_stmt int decl_stmt char = new + decl_stmt char = new decl_stmt int = decl_stmt int = decl_stmt boolean = for = <= ++ = + - decl_stmt int = call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(char,int) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(char,int) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(char,int) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(char,int) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(char,int) if < if == + ++ else = -- else if ! - = char else return = if < + return decl_stmt int = new + decl_stmt int = decl_stmt java.lang.String = new if call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.containsKey() decl_stmt java.util.ArrayList < = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() decl_stmt int = for = < call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() ++ decl_stmt java.lang.Object = call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() if instanceof += if >= && < - ++ = + else = + = + = decl_stmt byte = new + for = < + ++ for = < ++ if + & == && >= && <= - ++ = + if > decl_stmt int = new + = + = return new else return decl char char public public if > decl_stmt char = decl_stmt char = new = for = < ++ = call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(String,char) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(String,char) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(String,char) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(String,char) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(String,char) public public < call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() int public public decl_stmt int = call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(char,int) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(char,int) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(char,int) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(char,int) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(char,int) if <= = call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(String,char) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(String,char) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(String,char) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(String,char) call org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(String,char) char char public public + call org.apache.lucene.analysis.compound.hyphenation.ByteVector.length() call org.apache.lucene.analysis.compound.hyphenation.ByteVector.length() call org.apache.lucene.analysis.compound.hyphenation.ByteVector.length() call org.apache.lucene.analysis.compound.hyphenation.ByteVector.length() call org.apache.lucene.analysis.compound.hyphenation.ByteVector.length()