org.apache.lucene.sandbox.queries java.io.IOException import java.util.ArrayList import java.util.HashMap import java.util.HashSet import java.util.Iterator import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.MultiFields import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.BoostAttribute import org.apache.lucene.search.BoostQuery import org.apache.lucene.search.ConstantScoreQuery import org.apache.lucene.search.MaxNonCompetitiveBoostAttribute import org.apache.lucene.search.Query import org.apache.lucene.search.TermQuery import org.apache.lucene.search.similarities.ClassicSimilarity import org.apache.lucene.search.similarities.TFIDFSimilarity import org.apache.lucene.util.AttributeSource import org.apache.lucene.util.BytesRef import org.apache.lucene.util.PriorityQueue import class org.apache.lucene.sandbox.queries.FuzzyLikeThisQuery super super extends decl ArrayList boolean Analyzer int int TFIDFSimilarity int int public public decl_stmt int final final = decl_stmt int = = * + == : call Analyzer.hashCode() call Analyzer.hashCode() call Analyzer.hashCode() call Analyzer.hashCode() call Analyzer.hashCode() = * + == : call decl ArrayList.hashCode() call decl ArrayList.hashCode() call decl ArrayList.hashCode() call decl ArrayList.hashCode() call decl ArrayList.hashCode() = * + : = * + return FuzzyLikeThisQuery public public if == return if == return if != return if ! return decl_stmt org.apache.lucene.sandbox.queries.FuzzyLikeThisQuery = if == if != return else if ! call Analyzer.equals() call Analyzer.equals() call Analyzer.equals() call Analyzer.equals() call Analyzer.equals() return if == if != return else if ! call decl ArrayList.equals() call decl ArrayList.equals() call decl ArrayList.equals() call decl ArrayList.equals() call decl ArrayList.equals() return if != return if != return return int int public public decl_stmt int final final = decl_stmt int = = * + == : = * + = * + = * + == : return FieldVals public public if == return if == return if != return decl_stmt FieldVals = if == if != return else if ! return if != return if != return if == if != return else if ! return return public public call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() new String int BytesRef int int int float Term BoostAttribute ScoreTermQueue MaxNonCompetitiveBoostAttribute ScoreTerm decl HashSet CharTermAttribute SlowFuzzyTermsEnum int AttributeSource Terms float int private private throws if == return decl_stmt org.apache.lucene.index.Terms final final = if == return try = call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) call org.apache.lucene.analysis.Analyzer.tokenStream(String,String) decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute = decl_stmt int = decl_stmt java.util.HashSet < = new <> while decl_stmt java.lang.String = call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() if ! call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() decl_stmt ScoreTermQueue = new decl_stmt float = decl_stmt org.apache.lucene.index.Term = new decl_stmt org.apache.lucene.util.AttributeSource = new decl_stmt org.apache.lucene.search.MaxNonCompetitiveBoostAttribute = call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) call org.apache.lucene.util.AttributeSource.addAttribute(Class) decl_stmt org.apache.lucene.sandbox.queries.SlowFuzzyTermsEnum = new decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt org.apache.lucene.util.BytesRef decl_stmt org.apache.lucene.search.BoostAttribute = call SlowFuzzyTermsEnum.attributes() call SlowFuzzyTermsEnum.attributes() call SlowFuzzyTermsEnum.attributes() call SlowFuzzyTermsEnum.attributes() call SlowFuzzyTermsEnum.attributes() while = call SlowFuzzyTermsEnum.next() call SlowFuzzyTermsEnum.next() call SlowFuzzyTermsEnum.next() call SlowFuzzyTermsEnum.next() call SlowFuzzyTermsEnum.next() != ++ += call SlowFuzzyTermsEnum.docFreq() call SlowFuzzyTermsEnum.docFreq() call SlowFuzzyTermsEnum.docFreq() call SlowFuzzyTermsEnum.docFreq() call SlowFuzzyTermsEnum.docFreq() decl_stmt float = call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() if call ScoreTermQueue.size() call ScoreTermQueue.size() call ScoreTermQueue.size() call ScoreTermQueue.size() call ScoreTermQueue.size() < || > decl_stmt ScoreTerm = new new call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call ScoreTermQueue.insertWithOverflow() call ScoreTermQueue.insertWithOverflow() call ScoreTermQueue.insertWithOverflow() call ScoreTermQueue.insertWithOverflow() call ScoreTermQueue.insertWithOverflow() = call ScoreTermQueue.top() call ScoreTermQueue.top() call ScoreTermQueue.top() call ScoreTermQueue.top() call ScoreTermQueue.top() call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call ScoreTermQueue.size() call ScoreTermQueue.size() call ScoreTermQueue.size() call ScoreTermQueue.size() call ScoreTermQueue.size() >= : if > decl_stmt int = / if == = decl_stmt int = call ScoreTermQueue.size() call ScoreTermQueue.size() call ScoreTermQueue.size() call ScoreTermQueue.size() call ScoreTermQueue.size() for = < ++ decl_stmt ScoreTerm = call ScoreTermQueue.pop() call ScoreTermQueue.pop() call ScoreTermQueue.pop() call ScoreTermQueue.pop() call ScoreTermQueue.pop() = * * call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() int Terms TermContext TermsEnum private private throws if return new new else decl_stmt org.apache.lucene.index.TermContext = new for : decl_stmt org.apache.lucene.index.Terms = if != decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() if call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) decl_stmt int = - call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.docFreq() call org.apache.lucene.index.TermContext.register(TermState,int) call org.apache.lucene.index.TermContext.register(TermState,int) call org.apache.lucene.index.TermContext.register(TermState,int) call org.apache.lucene.index.TermContext.register(TermState,int) call org.apache.lucene.index.TermContext.register(TermState,int) call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() return new decl Builder ScoreTerm decl BooleanQuery ScoreTermQueue decl BooleanQuery decl ArrayList decl Builder Query decl HashMap public public throws decl_stmt ScoreTermQueue = new for : decl_stmt org.apache.lucene.util.fst.Builder = new decl_stmt HashMap < < = new <> decl_stmt int = call ScoreTermQueue.size() call ScoreTermQueue.size() call ScoreTermQueue.size() call ScoreTermQueue.size() call ScoreTermQueue.size() for = < ++ decl_stmt ScoreTerm = call ScoreTermQueue.pop() call ScoreTermQueue.pop() call ScoreTermQueue.pop() call ScoreTermQueue.pop() call ScoreTermQueue.pop() decl_stmt java.util.ArrayList < = call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() if == = new <> call decl Builder.put() call decl Builder.put() call decl Builder.put() call decl Builder.put() call decl Builder.put() call ScoreTerm.add() call ScoreTerm.add() call ScoreTerm.add() call ScoreTerm.add() call ScoreTerm.add() for < < = call decl Builder.values() call decl Builder.values() call decl Builder.values() call decl Builder.values() call decl Builder.values() decl_stmt java.util.ArrayList < = if call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() == decl_stmt ScoreTerm = call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() decl_stmt org.apache.lucene.search.Query = call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new else decl_stmt org.apache.lucene.util.fst.Builder = new call Query.setDisableCoord() call Query.setDisableCoord() call Query.setDisableCoord() call Query.setDisableCoord() call Query.setDisableCoord() for < = call decl ArrayList.iterator() call decl ArrayList.iterator() call decl ArrayList.iterator() call decl ArrayList.iterator() call decl ArrayList.iterator() decl_stmt ScoreTerm = decl_stmt org.apache.lucene.search.Query = call Query.add() call Query.add() call Query.add() call Query.add() call Query.add() new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call Query.build() call Query.build() call Query.build() call Query.build() call Query.build() return call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() protected protected if == return > else return < public public return public public return public public =