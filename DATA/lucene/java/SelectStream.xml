org.apache.solr.client.solrj.io.stream java.io.IOException import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Locale import java.util.Map import org.apache.solr.client.solrj.io.Tuple import org.apache.solr.client.solrj.io.comp.StreamComparator import org.apache.solr.client.solrj.io.ops.StreamOperation import org.apache.solr.client.solrj.io.stream.expr.Expressible import org.apache.solr.client.solrj.io.stream.expr.StreamExpression import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionParameter import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionValue import org.apache.solr.client.solrj.io.stream.expr.StreamFactory import class org.apache.solr.client.solrj.io.stream.SelectStream super super extends super implements decl List decl Map TupleStream long StreamExpression public public throws decl_stmt org.apache.solr.client.solrj.io.stream.expr.StreamExpression = new if instanceof call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) else throw new for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) else call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) for : call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) return public public decl List public < public < decl_stmt java.util.List < = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public throws call TupleStream.open() call TupleStream.open() call TupleStream.open() call TupleStream.open() call TupleStream.open() public public throws call TupleStream.close() call TupleStream.close() call TupleStream.close() call TupleStream.close() call TupleStream.close() Tuple Tuple public public throws decl_stmt org.apache.solr.client.solrj.io.Tuple = call TupleStream.read() call TupleStream.read() call TupleStream.read() call TupleStream.read() call TupleStream.read() if return decl_stmt org.apache.solr.client.solrj.io.Tuple = new new <> for : call Tuple.fields() call Tuple.fields() call Tuple.fields() call Tuple.fields() call Tuple.fields() call Tuple.fields() call Tuple.fields() call Tuple.fields() call Tuple.fields() if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call org.apache.solr.client.solrj.io.Tuple.get(Object) call org.apache.solr.client.solrj.io.Tuple.get(Object) call org.apache.solr.client.solrj.io.Tuple.get(Object) call org.apache.solr.client.solrj.io.Tuple.get(Object) call org.apache.solr.client.solrj.io.Tuple.get(Object) for : return public public return call TupleStream.getStreamSort() call TupleStream.getStreamSort() call TupleStream.getStreamSort() call TupleStream.getStreamSort() call TupleStream.getStreamSort() public public return