org.apache.solr.handler.dataimport java.io.StringReader import java.io.StringWriter import java.lang.invoke.MethodHandles import java.nio.charset.StandardCharsets import java.util.Map import java.util.Properties import org.apache.solr.common.cloud.SolrZkClient import org.apache.zookeeper.KeeperException.NodeExistsException import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.handler.dataimport.ZKPropertiesWriter super super extends SolrZkClient String Logger public public < = String protected protected < decl_stmt java.lang.String = = + + + public public return StringWriter decl byte Properties public public < decl_stmt java.util.Properties = call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() decl_stmt StringWriter = new try call java.util.Properties.store(Writer,String) call java.util.Properties.store(Writer,String) call java.util.Properties.store(Writer,String) call java.util.Properties.store(Writer,String) call java.util.Properties.store(Writer,String) decl_stmt byte = call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() if ! call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) try call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) catch call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + decl byte Properties public < public < decl_stmt java.util.Properties = new try decl_stmt byte = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) if != call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) new new catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + return