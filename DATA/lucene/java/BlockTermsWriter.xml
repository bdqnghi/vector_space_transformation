org.apache.lucene.codecs.blockterms java.io.Closeable import java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.List import org.apache.lucene.codecs.BlockTermState import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.FieldsConsumer import org.apache.lucene.codecs.PostingsWriterBase import org.apache.lucene.codecs.TermStats import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.Fields import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.IndexOutput import org.apache.lucene.store.RAMOutputStream import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.IOUtils import org.apache.lucene.util.RamUsageEstimator import class org.apache.lucene.codecs.blockterms.BlockTermsWriter super super extends super implements FieldInfo TermsIndexWriterBase int int FieldInfos String decl List String int PostingsWriterBase IndexOutput BytesRef TermsWriter Terms TermsEnum public public throws for : decl_stmt org.apache.lucene.index.Terms = call decl List.terms() call decl List.terms() call decl List.terms() call decl List.terms() call decl List.terms() if == continue decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt TermsWriter = call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) while decl_stmt org.apache.lucene.util.BytesRef = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == break call TermsWriter.write() call TermsWriter.write() call TermsWriter.write() call TermsWriter.write() call TermsWriter.write() call TermsWriter.finish() call TermsWriter.finish() call TermsWriter.finish() call TermsWriter.finish() call TermsWriter.finish() decl TermsIndexWriterBase private private throws assert == || call sun.reflect.FieldInfo.name() call sun.reflect.FieldInfo.name() call sun.reflect.FieldInfo.name() call sun.reflect.FieldInfo.name() call sun.reflect.FieldInfo.name() call sun.reflect.FieldInfo.name() call sun.reflect.FieldInfo.name() call sun.reflect.FieldInfo.name() call sun.reflect.FieldInfo.name() < = decl_stmt FieldWriter = call TermsIndexWriterBase.addField() call TermsIndexWriterBase.addField() call TermsIndexWriterBase.addField() call TermsIndexWriterBase.addField() call TermsIndexWriterBase.addField() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() return new long public public throws if != try decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() if != call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() finally = private private throws call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() boolean BlockTermState TermEntry TermStats throws decl_stmt org.apache.lucene.codecs.BlockTermState = call PostingsWriterBase.writeTerm() call PostingsWriterBase.writeTerm() call PostingsWriterBase.writeTerm() call PostingsWriterBase.writeTerm() call PostingsWriterBase.writeTerm() if == return += += assert > decl_stmt org.apache.solr.search.stats.TermStats = new decl_stmt boolean final final = if if > call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() if == = + for = < ++ = new decl_stmt TermEntry final final = call TermEntry.term() call TermEntry.term() call TermEntry.term() call TermEntry.term() call TermEntry.term() call TermEntry.term() call TermEntry.term() call TermEntry.term() call TermEntry.term() = ++ ++ throws if > call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() if > call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new >= : - int int int private private assert == assert == decl_stmt int = decl_stmt int = + decl_stmt int = while < if != return ++ ++ return decl long BlockTermState int int boolean private private throws decl_stmt int = for = < ++ = call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() for = < ++ decl_stmt int final final = - call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() int for = < ++ decl_stmt org.apache.lucene.codecs.BlockTermState final final = assert != if != - call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() int decl_stmt long = new decl_stmt boolean = for = < ++ decl_stmt org.apache.lucene.codecs.BlockTermState final final = call PostingsWriterBase.encodeTerm() call PostingsWriterBase.encodeTerm() call PostingsWriterBase.encodeTerm() call PostingsWriterBase.encodeTerm() call PostingsWriterBase.encodeTerm() for = < ++ = call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() int - =