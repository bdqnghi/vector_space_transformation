org.apache.solr.analytics.facet java.io.ByteArrayInputStream import java.io.FileNotFoundException import java.io.IOException import java.io.InputStream import java.nio.charset.StandardCharsets import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Scanner import org.apache.lucene.util.IOUtils import org.apache.solr.SolrTestCaseJ4 import org.apache.solr.analytics.util.MedianCalculator import org.apache.solr.analytics.util.PercentileCalculator import org.apache.solr.request.SolrQueryRequest import org.junit.AfterClass import org.junit.BeforeClass import com.google.common.collect.ObjectArrays import org.w3c.dom.Document import org.w3c.dom.Node import org.w3c.dom.NodeList import org.xml.sax.InputSource import org.xml.sax.SAXException import javax.xml.parsers.DocumentBuilder import javax.xml.parsers.DocumentBuilderFactory import javax.xml.parsers.ParserConfigurationException import javax.xml.xpath.XPathConstants import javax.xml.xpath.XPathExpressionException import javax.xml.xpath.XPathFactory import class org.apache.solr.analytics.facet.AbstractAnalyticsFacetTest super super extends decl String Document decl HashMap String XPathFactory String public static public static = public static public static = = = call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() call decl HashMap.clear() DocumentBuilder DocumentBuilderFactory protected static protected static throws decl_stmt DocumentBuilderFactory = call DocumentBuilderFactory.setNamespaceAware() call DocumentBuilderFactory.setNamespaceAware() call DocumentBuilderFactory.setNamespaceAware() call DocumentBuilderFactory.setNamespaceAware() call DocumentBuilderFactory.setNamespaceAware() decl_stmt org.apache.solr.update.DocumentBuilder = call DocumentBuilderFactory.newDocumentBuilder() call DocumentBuilderFactory.newDocumentBuilder() call DocumentBuilderFactory.newDocumentBuilder() call DocumentBuilderFactory.newDocumentBuilder() call DocumentBuilderFactory.newDocumentBuilder() = call DocumentBuilder.parse() call DocumentBuilder.parse() call DocumentBuilder.parse() call DocumentBuilder.parse() call DocumentBuilder.parse() new new = protected protected return protected protected throws return call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() StringBuilder private private throws decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call XPathFactory.newXPath() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() NodeList decl ArrayList protected < protected < throws decl_stmt java.util.ArrayList < = new <> decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() return NodeList decl ArrayList protected < protected < throws decl_stmt java.util.ArrayList < = new <> decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() return NodeList decl ArrayList protected < protected < throws decl_stmt java.util.ArrayList < = new <> decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() return NodeList decl ArrayList protected < protected < throws decl_stmt java.util.ArrayList < = new <> decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() return NodeList decl ArrayList protected < protected < throws decl_stmt java.util.ArrayList < = new <> decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() return Long public static public static < decl_stmt java.lang.Long = + decl List public static public static decl_stmt java.util.List < = new <> for = < += if + || + || + || + || + || + continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new protected protected = String double ArrayList double double public < extends extends & extends extends & extends extends & < public < extends extends & extends extends & extends extends & < < < decl_stmt java.util.ArrayList if = new < for < : call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) else if = new < for < : decl_stmt double = for : += call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) / else if = new < for < : decl_stmt double = for : += call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) else if = new < for < : decl_stmt double = for : += * call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) else if = new < for < : decl_stmt double = decl_stmt double = for : += += * decl_stmt java.lang.String = / - * / * call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) else throw new return decl double decl HashSet ArrayList public < extends extends extends < public < extends extends extends < < < decl_stmt java.util.ArrayList if decl_stmt double = new / = new < for < : if == continue call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) else if = new < for < : call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) long else if = new < for < : if == continue call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) else if = new < for < : decl_stmt java.util.HashSet < = new <> call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) long call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() else if = new < for < : if == continue call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) - else if = new < for < : if == continue < call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) else = return long T public < extends extends extends < public < extends extends extends < < decl_stmt T = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() decl_stmt long = for : if == ++ return public static public static return decl ArrayList decl String String Scanner InputStream public static public static < throws decl_stmt java.io.InputStream = if == throw new + decl_stmt sun.tools.java.Scanner = new try decl_stmt java.util.ArrayList < = new <> while call sun.tools.java.Scanner.hasNextLine() call sun.tools.java.Scanner.hasNextLine() call sun.tools.java.Scanner.hasNextLine() call sun.tools.java.Scanner.hasNextLine() call sun.tools.java.Scanner.hasNextLine() decl_stmt java.lang.String = call sun.tools.java.Scanner.nextLine() call sun.tools.java.Scanner.nextLine() call sun.tools.java.Scanner.nextLine() call sun.tools.java.Scanner.nextLine() call sun.tools.java.Scanner.nextLine() if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() < continue decl_stmt java.lang.String = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new finally