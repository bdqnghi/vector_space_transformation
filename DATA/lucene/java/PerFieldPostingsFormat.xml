org.apache.lucene.codecs.perfield java.io.Closeable import java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.IdentityHashMap import java.util.Iterator import java.util.List import java.util.Map import java.util.ServiceLoader import java.util.Set import java.util.TreeMap import java.util.TreeSet import org.apache.lucene.codecs.FieldsConsumer import org.apache.lucene.codecs.FieldsProducer import org.apache.lucene.codecs.PostingsFormat import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.Fields import org.apache.lucene.index.FilterLeafReader.FilterFields import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.SegmentReadState import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.index.Terms import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.IOUtils import org.apache.lucene.util.RamUsageEstimator import class org.apache.lucene.codecs.perfield.PerFieldPostingsFormat super super extends String String String static static return + + static static if == return else throw new + + String FieldsGroup Integer boolean PostingsFormat Fields decl Map String FieldInfo FieldsConsumer String decl Map public public throws decl_stmt java.util.Map < = new <> decl_stmt java.util.Map < = new <> for : decl_stmt org.apache.lucene.index.FieldInfo = decl_stmt org.apache.lucene.codecs.PostingsFormat final final = if == throw new + + decl_stmt java.lang.String = call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() decl_stmt FieldsGroup = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = else = + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.String = = new = new = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() throw new + + + call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() decl_stmt java.lang.String = call org.apache.lucene.index.FieldInfo.putAttribute(String,String) call org.apache.lucene.index.FieldInfo.putAttribute(String,String) call org.apache.lucene.index.FieldInfo.putAttribute(String,String) call org.apache.lucene.index.FieldInfo.putAttribute(String,String) call org.apache.lucene.index.FieldInfo.putAttribute(String,String) if != throw new + + + + + + + = call org.apache.lucene.index.FieldInfo.putAttribute(String,String) call org.apache.lucene.index.FieldInfo.putAttribute(String,String) call org.apache.lucene.index.FieldInfo.putAttribute(String,String) call org.apache.lucene.index.FieldInfo.putAttribute(String,String) call org.apache.lucene.index.FieldInfo.putAttribute(String,String) if != throw new + + + + + + + decl_stmt boolean = try for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt org.apache.lucene.codecs.PostingsFormat = decl_stmt FieldsGroup final final = decl_stmt Fields = new public < public < return call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() call FieldsGroup.fields() decl_stmt org.apache.lucene.codecs.FieldsConsumer = call PostingsFormat.fieldsConsumer() call PostingsFormat.fieldsConsumer() call PostingsFormat.fieldsConsumer() call PostingsFormat.fieldsConsumer() call PostingsFormat.fieldsConsumer() call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() = finally if == public < public < return public public throws public < public < return FieldsProducer public public throws decl_stmt org.apache.lucene.codecs.FieldsProducer = return == : call FieldsProducer.terms() call FieldsProducer.terms() call FieldsProducer.terms() call FieldsProducer.terms() call FieldsProducer.terms() public public return public public throws long public public decl_stmt long = += * * += * * for < : += return public < public < return public public throws for : public public throws return new public public return + + + + public final public final throws return new public final public final throws return new