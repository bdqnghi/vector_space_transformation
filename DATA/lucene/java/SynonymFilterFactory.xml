org.apache.lucene.analysis.synonym java.io.IOException import java.io.InputStreamReader import java.io.Reader import java.nio.charset.Charset import java.nio.charset.CharsetDecoder import java.nio.charset.CodingErrorAction import java.nio.charset.StandardCharsets import java.text.ParseException import java.util.HashMap import java.util.Iterator import java.util.List import java.util.Map import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.Tokenizer import org.apache.lucene.analysis.core.LowerCaseFilter import org.apache.lucene.analysis.core.WhitespaceTokenizer import org.apache.lucene.analysis.util.ResourceLoader import org.apache.lucene.analysis.util.ResourceLoaderAware import org.apache.lucene.analysis.util.TokenFilterFactory import org.apache.lucene.analysis.util.TokenizerFactory import org.apache.lucene.util.Version import class org.apache.lucene.analysis.synonym.SynonymFilterFactory super super extends super implements SynonymMap String String decl Map boolean String boolean String public public return == : new TokenStream Tokenizer String TokenizerFactory Analyzer public public throws decl_stmt org.apache.lucene.analysis.util.TokenizerFactory final final = == : decl_stmt org.apache.lucene.analysis.Analyzer if != = else = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = == new : call TokenizerFactory.create() call TokenizerFactory.create() call TokenizerFactory.create() call TokenizerFactory.create() call TokenizerFactory.create() decl_stmt org.apache.lucene.analysis.TokenStream = new : return new try = decl_stmt java.lang.String = if == || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = = catch throw new TokenStream Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = == new : decl_stmt org.apache.lucene.analysis.TokenStream = new : return new decl Class decl Parser decl SynonymMap CharsetDecoder protected protected throws decl_stmt CharsetDecoder = decl_stmt org.apache.solr.analytics.util.Parser decl_stmt java.lang.Class < extends extends extends extends = try = call decl Parser.getConstructor() call decl Parser.getConstructor() call decl Parser.getConstructor() call decl Parser.getConstructor() call decl Parser.getConstructor() catch throw new decl_stmt java.util.List < = for : call CharsetDecoder.reset() call CharsetDecoder.reset() call CharsetDecoder.reset() call CharsetDecoder.reset() call CharsetDecoder.reset() try final final = new call decl SynonymMap.parse() call decl SynonymMap.parse() call decl SynonymMap.parse() call decl SynonymMap.parse() call decl SynonymMap.parse() return call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() TokenizerFactory decl Class private private throws decl_stmt java.lang.Class < extends extends = try decl_stmt org.apache.lucene.analysis.util.TokenizerFactory = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() if instanceof return catch throw new Analyzer decl Class private private throws decl_stmt java.lang.Class < extends extends = try decl_stmt org.apache.lucene.analysis.Analyzer = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() if instanceof return catch throw new