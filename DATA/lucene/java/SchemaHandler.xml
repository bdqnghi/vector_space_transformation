org.apache.solr.handler java.io.IOException import java.lang.invoke.MethodHandles import java.util.Arrays import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Locale import java.util.Map import java.util.Set import com.google.common.collect.ImmutableMap import com.google.common.collect.ImmutableSet import org.apache.solr.cloud.ZkSolrResourceLoader import org.apache.solr.common.SolrException import org.apache.solr.common.util.ContentStream import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.common.util.StrUtils import org.apache.solr.core.SolrCore import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.SolrRequestHandler import org.apache.solr.response.SolrQueryResponse import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.ManagedIndexSchema import org.apache.solr.schema.SchemaManager import org.apache.solr.schema.ZkIndexSchemaReader import org.apache.solr.security.AuthorizationContext import org.apache.solr.security.PermissionNameProvider import org.apache.solr.util.plugin.SolrCoreAware import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.common.params.CommonParams.JSON import class org.apache.solr.handler.SchemaHandler super super extends super implements boolean decl Set Logger decl Map List String public public throws decl_stmt java.lang.String = if if return if == return for : try decl_stmt java.util.List = new if ! call List.isEmpty() call List.isEmpty() call List.isEmpty() call List.isEmpty() call List.isEmpty() catch + break else public public switch case return case return default: return SimpleOrderedMap Object String List ZkSolrResourceLoader Object String ZkIndexSchemaReader int decl List String decl SimpleOrderedMap int String String decl SimpleOrderedMap String ManagedIndexSchema IndexSchema private private try decl_stmt java.lang.String = switch case break case break case break case break case decl_stmt java.lang.String final final = if == decl_stmt java.lang.String = throw new break case decl_stmt java.lang.String final final = if == decl_stmt java.lang.String final final = + throw new break case decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = new <> call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() break case decl_stmt int = - decl_stmt java.lang.Object = if != = instanceof : call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() decl_stmt int = - decl_stmt org.apache.solr.schema.IndexSchema = if instanceof decl_stmt org.apache.solr.schema.ManagedIndexSchema = = call org.apache.solr.schema.ManagedIndexSchema.getSchemaZkVersion() call org.apache.solr.schema.ManagedIndexSchema.getSchemaZkVersion() call org.apache.solr.schema.ManagedIndexSchema.getSchemaZkVersion() call org.apache.solr.schema.ManagedIndexSchema.getSchemaZkVersion() call org.apache.solr.schema.ManagedIndexSchema.getSchemaZkVersion() if != - && < call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + decl_stmt org.apache.solr.cloud.ZkSolrResourceLoader = decl_stmt org.apache.solr.schema.ZkIndexSchemaReader = call org.apache.solr.cloud.ZkSolrResourceLoader.getZkIndexSchemaReader() call org.apache.solr.cloud.ZkSolrResourceLoader.getZkIndexSchemaReader() call org.apache.solr.cloud.ZkSolrResourceLoader.getZkIndexSchemaReader() call org.apache.solr.cloud.ZkSolrResourceLoader.getZkIndexSchemaReader() call org.apache.solr.cloud.ZkSolrResourceLoader.getZkIndexSchemaReader() = call org.apache.solr.schema.ZkIndexSchemaReader.refreshSchemaFromZk(int) call org.apache.solr.schema.ZkIndexSchemaReader.refreshSchemaFromZk(int) call org.apache.solr.schema.ZkIndexSchemaReader.refreshSchemaFromZk(int) call org.apache.solr.schema.ZkIndexSchemaReader.refreshSchemaFromZk(int) call org.apache.solr.schema.ZkIndexSchemaReader.refreshSchemaFromZk(int) = call org.apache.solr.schema.ManagedIndexSchema.getSchemaZkVersion() call org.apache.solr.schema.ManagedIndexSchema.getSchemaZkVersion() call org.apache.solr.schema.ManagedIndexSchema.getSchemaZkVersion() call org.apache.solr.schema.ManagedIndexSchema.getSchemaZkVersion() call org.apache.solr.schema.ManagedIndexSchema.getSchemaZkVersion() break case break default: decl_stmt java.util.List < = if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > && call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = decl_stmt java.lang.Object = call decl SimpleOrderedMap.get() call decl SimpleOrderedMap.get() call decl SimpleOrderedMap.get() call decl SimpleOrderedMap.get() call decl SimpleOrderedMap.get() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if instanceof decl_stmt java.util.List = for : if instanceof decl_stmt org.apache.solr.common.util.SimpleOrderedMap = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call SimpleOrderedMap.get() call SimpleOrderedMap.get() call SimpleOrderedMap.get() call SimpleOrderedMap.get() call SimpleOrderedMap.get() call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - return throw new + else return throw new + catch String decl List public public decl_stmt java.util.List < = if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return return public public return public public =