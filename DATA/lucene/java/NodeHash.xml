org.apache.lucene.util.fst java.io.IOException import org.apache.lucene.util.packed.PackedInts import org.apache.lucene.util.packed.PagedGrowableWriter import class long long decl FST decl FST decl FST PagedGrowableWriter decl Builder private private < throws call decl FST.readFirstRealTargetArc() call decl FST.readFirstRealTargetArc() call decl FST.readFirstRealTargetArc() call decl FST.readFirstRealTargetArc() call decl FST.readFirstRealTargetArc() if != && != return for = < ++ decl_stmt org.apache.lucene.util.fst.Builder final final final final final final final < = if != || ! call decl Builder.output() call decl Builder.output() call decl Builder.output() call decl Builder.output() call decl Builder.output() call decl Builder.output() call decl Builder.output() call decl Builder.output() call decl Builder.output() || != || ! call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() || != call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() return if call decl FST.isLast() call decl FST.isLast() call decl FST.isLast() call decl FST.isLast() call decl FST.isLast() if == - return else return call decl FST.readNextRealArc() call decl FST.readNextRealArc() call decl FST.readNextRealArc() call decl FST.readNextRealArc() call decl FST.readNextRealArc() return int long decl Builder long private private < decl_stmt int final final = decl_stmt long = for = < ++ decl_stmt org.apache.lucene.util.fst.Builder final final final final final final final < = = * + decl_stmt long = = * + ^ >> = * + call decl Builder.output() call decl Builder.output() call decl Builder.output() call decl Builder.output() call decl Builder.output() call decl Builder.output() call decl Builder.output() call decl Builder.output() call decl Builder.output() = * + call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() call decl Builder.nextFinalOutput() if += return & int long private private throws decl_stmt int final final = decl_stmt long = call decl FST.readFirstRealTargetArc() call decl FST.readFirstRealTargetArc() call decl FST.readFirstRealTargetArc() call decl FST.readFirstRealTargetArc() call decl FST.readFirstRealTargetArc() while = * + = * + ^ >> = * + call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() = * + call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() if call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() += if call decl FST.isLast() call decl FST.isLast() call decl FST.isLast() call decl FST.isLast() call decl FST.isLast() break call decl FST.readNextRealArc() call decl FST.readNextRealArc() call decl FST.readNextRealArc() call decl FST.readNextRealArc() call decl FST.readNextRealArc() return & long long int long long public public < < throws decl_stmt long final final = decl_stmt long = & decl_stmt int = while decl_stmt long final final = call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() if == decl_stmt long final final = call decl FST.addNode() call decl FST.addNode() call decl FST.addNode() call decl FST.addNode() call decl FST.addNode() assert == : + + + ++ call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() if > * call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() / return else if return = + ++ & int long private private throws decl_stmt long = & decl_stmt int = while if call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() == call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() call PagedGrowableWriter.set() break = + ++ & PagedGrowableWriter long private private throws decl_stmt org.apache.lucene.util.packed.PagedGrowableWriter final final = = new * call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() << = call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() - for = < call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() call PagedGrowableWriter.size() ++ decl_stmt long final final = call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() call PagedGrowableWriter.get() if !=