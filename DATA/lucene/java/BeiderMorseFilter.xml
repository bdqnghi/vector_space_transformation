org.apache.lucene.analysis.phonetic java.io.IOException import java.util.regex.Matcher import java.util.regex.Pattern import org.apache.commons.codec.language.bm.BeiderMorseEncoder import org.apache.commons.codec.language.bm.Languages.LanguageSet import org.apache.commons.codec.language.bm.PhoneticEngine import org.apache.lucene.analysis.TokenFilter import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import class org.apache.lucene.analysis.phonetic.BeiderMorseFilter super super extends PhoneticEngine Matcher PositionIncrementAttribute LanguageSet State CharTermAttribute Pattern String public public throws if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) assert != && != call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) return if = == call PhoneticEngine.encode() call PhoneticEngine.encode() call PhoneticEngine.encode() call PhoneticEngine.encode() call PhoneticEngine.encode() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() : call PhoneticEngine.encode() call PhoneticEngine.encode() call PhoneticEngine.encode() call PhoneticEngine.encode() call PhoneticEngine.encode() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() = call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) return else return public public throws call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence)