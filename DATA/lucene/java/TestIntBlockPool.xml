org.apache.lucene.index java.util.ArrayList import java.util.List import org.apache.lucene.util.Counter import org.apache.lucene.util.IntBlockPool import org.apache.lucene.util.LuceneTestCase import class org.apache.lucene.index.TestIntBlockPool super super extends int Counter decl IntBlockPool decl SliceWriter int int IntBlockPool public public decl_stmt org.apache.lucene.util.Counter = decl_stmt org.apache.lucene.util.IntBlockPool = new new for = < ++ decl_stmt SliceWriter = new decl_stmt int = call decl IntBlockPool.startNewSlice() call decl IntBlockPool.startNewSlice() call decl IntBlockPool.startNewSlice() call decl IntBlockPool.startNewSlice() call decl IntBlockPool.startNewSlice() decl_stmt int = for = < ++ call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() decl_stmt int = call decl IntBlockPool.getCurrentOffset() call decl IntBlockPool.getCurrentOffset() call decl IntBlockPool.getCurrentOffset() call decl IntBlockPool.getCurrentOffset() call decl IntBlockPool.getCurrentOffset() decl_stmt SliceReader = new call int.reset() call int.reset() call int.reset() call int.reset() call int.reset() for = < ++ call int.readInt() call int.readInt() call int.readInt() call int.readInt() call int.readInt() call int.endOfSlice() call int.endOfSlice() call int.endOfSlice() call int.endOfSlice() call int.endOfSlice() if call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call Counter.get() call Counter.get() call Counter.get() call Counter.get() call Counter.get() else call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) * call Counter.get() call Counter.get() call Counter.get() call Counter.get() call Counter.get() Counter decl IntBlockPool int int decl SliceWriter decl List decl IntBlockPool IntBlockPool public public decl_stmt org.apache.lucene.util.Counter = decl_stmt org.apache.lucene.util.IntBlockPool = new new for = < ++ decl_stmt java.util.List < = new <> decl_stmt int = for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new decl_stmt SliceWriter = new decl_stmt SliceReader = new decl_stmt int = for = < ++ decl_stmt StartEndAndValues = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if == = call decl IntBlockPool.startNewSlice() call decl IntBlockPool.startNewSlice() call decl IntBlockPool.startNewSlice() call decl IntBlockPool.startNewSlice() call decl IntBlockPool.startNewSlice() else call decl IntBlockPool.reset() call decl IntBlockPool.reset() call decl IntBlockPool.reset() call decl IntBlockPool.reset() call decl IntBlockPool.reset() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call decl IntBlockPool.writeInt() call int.nextValue() call int.nextValue() call int.nextValue() call int.nextValue() call int.nextValue() = call decl IntBlockPool.getCurrentOffset() call decl IntBlockPool.getCurrentOffset() call decl IntBlockPool.getCurrentOffset() call decl IntBlockPool.getCurrentOffset() call decl IntBlockPool.getCurrentOffset() if == call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() while ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt StartEndAndValues = call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call Counter.get() call Counter.get() call Counter.get() call Counter.get() call Counter.get() else call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) call org.apache.lucene.util.IntBlockPool.reset(int,int) * call Counter.get() call Counter.get() call Counter.get() call Counter.get() call Counter.get() public public * return new public public - - * * private private for = < ++ + public public return + ++