org.apache.solr.analytics.util.valuesource java.io.IOException import java.util.Map import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.queries.function.docvalues.StrDocValues import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.mutable.MutableValue import org.apache.lucene.util.mutable.MutableValueStr import class org.apache.solr.analytics.util.valuesource.SingleStringFunction super super extends ValueSource public public return + + call ValueSource.description() call ValueSource.description() call ValueSource.description() call ValueSource.description() call ValueSource.description() + FunctionValues CharSequence MutableValueStr public public throws decl_stmt org.apache.lucene.queries.function.FunctionValues final final = call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() return new public public decl_stmt java.lang.CharSequence = return != call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() : public public decl_stmt java.lang.CharSequence = if != return else return public public return public public return call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) call org.apache.lucene.queries.function.FunctionValues.exists(int) public public return + + + public public return new decl_stmt org.apache.lucene.util.mutable.MutableValueStr private final final = new public public return public public = CharSequence public public decl_stmt java.lang.CharSequence = return != call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() call CharSequence.toString() : CharSequence public public decl_stmt java.lang.CharSequence = if != return else return public public return public public return public public return + + + MutableValueStr public public return new decl_stmt org.apache.lucene.util.mutable.MutableValueStr private final final = new public public return public public = public public return public public = SingleStringFunction public public if != return decl_stmt org.apache.solr.analytics.util.valuesource.SingleStringFunction = return public public return call ValueSource.hashCode() call ValueSource.hashCode() call ValueSource.hashCode() call ValueSource.hashCode() call ValueSource.hashCode() +