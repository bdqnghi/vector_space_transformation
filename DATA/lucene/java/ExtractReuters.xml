org.apache.lucene.benchmark.utils java.io.BufferedReader import java.io.BufferedWriter import java.io.IOException import java.nio.charset.StandardCharsets import java.nio.file.DirectoryStream import java.nio.file.Files import java.nio.file.Path import java.nio.file.Paths import java.nio.file.StandardCopyOption import java.util.regex.Matcher import java.util.regex.Pattern import org.apache.lucene.util.IOUtils import class org.apache.lucene.benchmark.utils.ExtractReuters Pattern Path Path decl String decl String long public public throws decl_stmt long = try < = for : ++ if == + int StringBuilder StringBuilder Matcher Path String String protected protected try = decl_stmt java.lang.StringBuilder = new decl_stmt java.lang.StringBuilder = new decl_stmt java.lang.String = decl_stmt int = while = != if call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) == - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) while call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) for = <= call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() ++ if call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() for = < ++ = call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) decl_stmt java.nio.file.Path = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) + + ++ + try = call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() call StringBuilder.setLength() catch throw new ExtractReuters Path Path public static public static throws if != + + return decl_stmt java.nio.file.Path = if ! + + return decl_stmt java.nio.file.Path = + decl_stmt org.apache.lucene.benchmark.utils.ExtractReuters = new call ExtractReuters.extract() call ExtractReuters.extract() call ExtractReuters.extract() call ExtractReuters.extract() call ExtractReuters.extract() private static private static + +