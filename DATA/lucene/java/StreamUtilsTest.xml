org.apache.lucene.benchmark.byTask.utils java.io.BufferedReader import java.io.BufferedWriter import java.io.IOException import java.io.InputStream import java.io.InputStreamReader import java.io.OutputStream import java.io.OutputStreamWriter import java.nio.charset.StandardCharsets import java.nio.file.Files import java.nio.file.Path import org.apache.commons.compress.compressors.CompressorStreamFactory import org.apache.lucene.benchmark.BenchmarkTestCase import org.junit.Before import org.junit.Test import class org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest super super extends String Path public public throws public public throws public public throws public public throws public public throws public public throws BufferedWriter Path private private throws decl_stmt java.nio.file.Path = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) + decl_stmt BufferedWriter = call BufferedWriter.write() call BufferedWriter.write() call BufferedWriter.write() call BufferedWriter.write() call BufferedWriter.write() call BufferedWriter.newLine() call BufferedWriter.newLine() call BufferedWriter.newLine() call BufferedWriter.newLine() call BufferedWriter.newLine() call BufferedWriter.close() call BufferedWriter.close() call BufferedWriter.close() call BufferedWriter.close() call BufferedWriter.close() return OutputStream Path private private throws decl_stmt java.nio.file.Path = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) + decl_stmt java.io.OutputStream = new return OutputStream Path private private throws decl_stmt java.nio.file.Path = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) + decl_stmt java.io.OutputStream = new return OutputStream Path private private throws decl_stmt java.nio.file.Path = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) + decl_stmt java.io.OutputStream = return BufferedWriter private private throws decl_stmt BufferedWriter = new new call BufferedWriter.write() call BufferedWriter.write() call BufferedWriter.write() call BufferedWriter.write() call BufferedWriter.write() call BufferedWriter.newLine() call BufferedWriter.newLine() call BufferedWriter.newLine() call BufferedWriter.newLine() call BufferedWriter.newLine() call BufferedWriter.close() call BufferedWriter.close() call BufferedWriter.close() call BufferedWriter.close() call BufferedWriter.close() BufferedReader InputStream String InputStreamReader private private throws decl_stmt java.io.InputStream = decl_stmt InputStreamReader = new decl_stmt java.io.BufferedReader = new decl_stmt java.lang.String = call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) + call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() public public throws =