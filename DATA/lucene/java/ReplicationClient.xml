org.apache.lucene.replicator java.io.Closeable import java.io.IOException import java.io.InputStream import java.io.PrintWriter import java.io.StringWriter import java.util.ArrayList import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Map.Entry import java.util.Set import java.util.concurrent.CountDownLatch import java.util.concurrent.TimeUnit import java.util.concurrent.locks.Lock import java.util.concurrent.locks.ReentrantLock import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.IOUtils import org.apache.lucene.util.InfoStream import org.apache.lucene.util.ThreadInterruptedException import class org.apache.lucene.replicator.ReplicationClient super super implements ReplicationThread InfoStream String decl byte SourceDirectoryFactory Lock ReplicationHandler boolean Replicator long long public public while decl_stmt long = call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() try catch finally call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() = - decl_stmt long final final = - if > try if return catch throw new int private private throws decl_stmt int while = > String String InputStream decl Map SessionToken boolean decl Map decl List decl Map Directory IndexOutput private private throws decl_stmt org.apache.lucene.replicator.SessionToken = decl_stmt java.util.Map final final final < = new <> decl_stmt java.util.Map final final final < < = new <> decl_stmt boolean = try decl_stmt java.lang.String final final = call org.apache.lucene.replicator.ReplicationHandler.currentVersion() call org.apache.lucene.replicator.ReplicationHandler.currentVersion() call org.apache.lucene.replicator.ReplicationHandler.currentVersion() call org.apache.lucene.replicator.ReplicationHandler.currentVersion() call org.apache.lucene.replicator.ReplicationHandler.currentVersion() = call org.apache.lucene.replicator.Replicator.checkForUpdate(String) call org.apache.lucene.replicator.Replicator.checkForUpdate(String) call org.apache.lucene.replicator.Replicator.checkForUpdate(String) call org.apache.lucene.replicator.Replicator.checkForUpdate(String) call org.apache.lucene.replicator.Replicator.checkForUpdate(String) if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + if == return decl_stmt java.util.Map < < = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = decl_stmt org.apache.lucene.store.Directory = call SourceDirectoryFactory.getDirectory() call SourceDirectoryFactory.getDirectory() call SourceDirectoryFactory.getDirectory() call SourceDirectoryFactory.getDirectory() call SourceDirectoryFactory.getDirectory() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.util.List < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for : if if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() return decl_stmt java.io.InputStream = decl_stmt org.apache.lucene.store.IndexOutput = try = call org.apache.lucene.replicator.Replicator.obtainFile(String,String,String) call org.apache.lucene.replicator.Replicator.obtainFile(String,String,String) call org.apache.lucene.replicator.Replicator.obtainFile(String,String,String) call org.apache.lucene.replicator.Replicator.obtainFile(String,String,String) call org.apache.lucene.replicator.Replicator.obtainFile(String,String,String) = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() finally = finally if != try call org.apache.lucene.replicator.Replicator.release(String) call org.apache.lucene.replicator.Replicator.release(String) call org.apache.lucene.replicator.Replicator.release(String) call org.apache.lucene.replicator.Replicator.release(String) call org.apache.lucene.replicator.Replicator.release(String) finally if ! call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call SourceDirectoryFactory.cleanupSession() call SourceDirectoryFactory.cleanupSession() call SourceDirectoryFactory.cleanupSession() call SourceDirectoryFactory.cleanupSession() call SourceDirectoryFactory.cleanupSession() try if && ! call ReplicationHandler.revisionReady() call ReplicationHandler.revisionReady() call ReplicationHandler.revisionReady() call ReplicationHandler.revisionReady() call ReplicationHandler.revisionReady() finally call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if != call SourceDirectoryFactory.cleanupSession() call SourceDirectoryFactory.cleanupSession() call SourceDirectoryFactory.cleanupSession() call SourceDirectoryFactory.cleanupSession() call SourceDirectoryFactory.cleanupSession() protected final protected final if throw new StringWriter protected protected decl_stmt StringWriter final final = new new if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() decl Map decl Map String decl Set decl ArrayList protected < < protected < < < < decl_stmt java.util.Map < < = call org.apache.lucene.replicator.ReplicationHandler.currentRevisionFiles() call org.apache.lucene.replicator.ReplicationHandler.currentRevisionFiles() call org.apache.lucene.replicator.ReplicationHandler.currentRevisionFiles() call org.apache.lucene.replicator.ReplicationHandler.currentRevisionFiles() call org.apache.lucene.replicator.ReplicationHandler.currentRevisionFiles() if == return decl_stmt java.util.Map < < = new <> for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.util.Set < = new <> for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt java.util.ArrayList < = new <> decl_stmt java.lang.String = assert : + for : if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return public synchronized public synchronized if ! = public synchronized public synchronized if != && call ReplicationThread.isAlive() call ReplicationThread.isAlive() call ReplicationThread.isAlive() call ReplicationThread.isAlive() call ReplicationThread.isAlive() throw new = == : + = new call ReplicationThread.setName() call ReplicationThread.setName() call ReplicationThread.setName() call ReplicationThread.setName() call ReplicationThread.setName() call ReplicationThread.start() call ReplicationThread.start() call ReplicationThread.start() call ReplicationThread.start() call ReplicationThread.start() assert call ReplicationThread.isAlive() call ReplicationThread.isAlive() call ReplicationThread.isAlive() call ReplicationThread.isAlive() call ReplicationThread.isAlive() : public synchronized public synchronized if != call ReplicationThread.stop() call ReplicationThread.stop() call ReplicationThread.stop() call ReplicationThread.stop() call ReplicationThread.stop() call ReplicationThread.stop() call ReplicationThread.stop() call ReplicationThread.stop() call ReplicationThread.stop() try call ReplicationThread.join() call ReplicationThread.join() call ReplicationThread.join() call ReplicationThread.join() call ReplicationThread.join() catch throw new = public synchronized public synchronized return != && call ReplicationThread.isAlive() call ReplicationThread.isAlive() call ReplicationThread.isAlive() call ReplicationThread.isAlive() call ReplicationThread.isAlive() String public public decl_stmt java.lang.String = if != += + call ReplicationThread.getName() call ReplicationThread.getName() call ReplicationThread.getName() call ReplicationThread.getName() call ReplicationThread.getName() + return public public throws call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() call Lock.lock() try finally call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() call java.util.concurrent.locks.Lock.unlock() public public if == = =