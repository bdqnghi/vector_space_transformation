org.apache.solr.handler java.io.File import java.io.FileInputStream import java.io.FileNotFoundException import java.io.IOException import java.io.InputStream import java.io.InputStreamReader import java.io.OutputStream import java.lang.invoke.MethodHandles import java.nio.ByteBuffer import java.nio.channels.FileChannel import java.nio.charset.StandardCharsets import java.nio.file.NoSuchFileException import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.Date import java.util.HashMap import java.util.List import java.util.Map import java.util.Properties import java.util.Random import java.util.concurrent.ExecutorService import java.util.concurrent.Executors import java.util.concurrent.Future import java.util.concurrent.ScheduledExecutorService import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicBoolean import java.util.concurrent.locks.ReentrantLock import java.util.regex.Matcher import java.util.regex.Pattern import java.util.zip.Adler32 import java.util.zip.Checksum import java.util.zip.DeflaterOutputStream import org.apache.commons.io.IOUtils import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.IndexCommit import org.apache.lucene.index.IndexDeletionPolicy import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.SegmentCommitInfo import org.apache.lucene.index.SegmentInfos import org.apache.lucene.search.IndexSearcher import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.RateLimiter import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.common.util.FastOutputStream import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.common.util.StrUtils import org.apache.solr.common.util.SuppressForbidden import org.apache.solr.core.CloseHook import org.apache.solr.core.DirectoryFactory import org.apache.solr.core.DirectoryFactory.DirContext import org.apache.solr.core.IndexDeletionPolicyWrapper import org.apache.solr.core.SolrCore import org.apache.solr.core.SolrDeletionPolicy import org.apache.solr.core.SolrEventListener import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.update.CdcrUpdateLog import org.apache.solr.update.SolrIndexWriter import org.apache.solr.update.UpdateLog import org.apache.solr.update.VersionInfo import org.apache.solr.util.DefaultSolrThreadFactory import org.apache.solr.util.NumberUtils import org.apache.solr.util.PropertiesInputStream import org.apache.solr.util.RefCounted import org.apache.solr.util.plugin.SolrCoreAware import org.slf4j.Logger import org.slf4j.LoggerFactory import org.slf4j.MDC import static static org.apache.solr.common.params.CommonParams.NAME import class org.apache.solr.handler.ReplicationHandler super super extends super implements String String String Logger String String String String ReentrantLock String ExecutorService String long String String String boolean String String String String int boolean Integer Long String String String String String String decl NamedList boolean IndexFetcher String String String String int String SolrCore String String String String String String String String decl NamedList AtomicBoolean boolean boolean IndexCommit Pattern String ScheduledExecutorService String String String String boolean String decl Future String String String AtomicBoolean String String int String IndexFetcher decl Map String String String String String long long decl Map String public static public static decl_stmt long = decl_stmt long = try decl_stmt java.util.Map final final final < = decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != try = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return new return Thread IndexCommit SolrParams IndexFetcher SolrParams String String public public throws decl_stmt org.apache.solr.common.params.SolrParams final final = decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if == return if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt org.apache.lucene.index.IndexCommit = if == = call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() if != && call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call IndexCommit.getGeneration() call IndexCommit.getGeneration() call IndexCommit.getGeneration() call IndexCommit.getGeneration() call IndexCommit.getGeneration() call IndexCommit.getGeneration() call IndexCommit.getGeneration() call IndexCommit.getGeneration() call IndexCommit.getGeneration() call IndexCommit.getGeneration() else else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) new else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) new else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) new else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if ! && == return decl_stmt org.apache.solr.common.params.SolrParams final final = new decl_stmt java.lang.Thread = new public public call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() if call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) if != else else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) if != else else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) decl_stmt org.apache.solr.handler.IndexFetcher = if != call org.apache.solr.handler.IndexFetcher.abortFetch() call org.apache.solr.handler.IndexFetcher.abortFetch() call org.apache.solr.handler.IndexFetcher.abortFetch() call org.apache.solr.handler.IndexFetcher.abortFetch() call org.apache.solr.handler.IndexFetcher.abortFetch() else else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) public public SnapShooter String private private decl_stmt java.lang.String = if == throw new decl_stmt org.apache.solr.handler.SnapShooter = new call org.apache.solr.handler.SnapShooter.validateDeleteSnapshot() call org.apache.solr.handler.SnapShooter.validateDeleteSnapshot() call org.apache.solr.handler.SnapShooter.validateDeleteSnapshot() call org.apache.solr.handler.SnapShooter.validateDeleteSnapshot() call org.apache.solr.handler.SnapShooter.validateDeleteSnapshot() call org.apache.solr.handler.SnapShooter.deleteSnapAsync(ReplicationHandler) call org.apache.solr.handler.SnapShooter.deleteSnapAsync(ReplicationHandler) call org.apache.solr.handler.SnapShooter.deleteSnapAsync(ReplicationHandler) call org.apache.solr.handler.SnapShooter.deleteSnapAsync(ReplicationHandler) call org.apache.solr.handler.SnapShooter.deleteSnapAsync(ReplicationHandler) decl Map decl NamedList decl List decl List private < < private < < decl_stmt java.util.Map < = call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() decl_stmt java.util.List < < = new <> for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() try decl_stmt org.apache.solr.common.util.NamedList < = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt java.util.List < = new <> call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return decl byte FileInputStream int static static decl_stmt FileInputStream = decl_stmt byte = new * decl_stmt int try = new while = call FileInputStream.read() call FileInputStream.read() call FileInputStream.read() call FileInputStream.read() call FileInputStream.read() >= return catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + finally return String public public decl_stmt java.lang.String = == : if ! call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() call java.util.concurrent.locks.ReentrantLock.tryLock() return try if != if != && != call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() = new else = return call org.apache.solr.handler.IndexFetcher.fetchLatestIndex(boolean) call org.apache.solr.handler.IndexFetcher.fetchLatestIndex(boolean) call org.apache.solr.handler.IndexFetcher.fetchLatestIndex(boolean) call org.apache.solr.handler.IndexFetcher.fetchLatestIndex(boolean) call org.apache.solr.handler.IndexFetcher.fetchLatestIndex(boolean) catch if != call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() finally if != if != call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() = call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() return return call java.util.concurrent.locks.ReentrantLock.isLocked() call java.util.concurrent.locks.ReentrantLock.isLocked() call java.util.concurrent.locks.ReentrantLock.isLocked() call java.util.concurrent.locks.ReentrantLock.isLocked() call java.util.concurrent.locks.ReentrantLock.isLocked() decl File decl List String OldBackupDirectory String RestoreCore private private if != && ! call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() throw new + decl_stmt java.lang.String = decl_stmt java.lang.String = if == = call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() if == decl_stmt File = new decl_stmt java.util.List < = new <> for : decl_stmt org.apache.solr.handler.OldBackupDirectory = new if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == throw new + call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else = + decl_stmt org.apache.solr.handler.RestoreCore = new try call org.apache.solr.core.SolrCore.getName() call org.apache.solr.core.SolrCore.getName() call org.apache.solr.core.SolrCore.getName() call org.apache.solr.core.SolrCore.getName() call org.apache.solr.core.SolrCore.getName() = call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) = finally decl NamedList boolean private < private < decl_stmt org.apache.solr.common.util.NamedList < = new <> if == call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() return call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() if call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() call decl Future.isDone() try decl_stmt boolean = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() if call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() else call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() catch call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() else call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() return IndexCommit SnapShooter IndexDeletionPolicyWrapper int private private try decl_stmt int = if > && > throw new + + + + = if < = decl_stmt org.apache.solr.core.IndexDeletionPolicyWrapper = call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() decl_stmt org.apache.lucene.index.IndexCommit = call org.apache.solr.core.IndexDeletionPolicyWrapper.getLatestCommit() call org.apache.solr.core.IndexDeletionPolicyWrapper.getLatestCommit() call org.apache.solr.core.IndexDeletionPolicyWrapper.getLatestCommit() call org.apache.solr.core.IndexDeletionPolicyWrapper.getLatestCommit() call org.apache.solr.core.IndexDeletionPolicyWrapper.getLatestCommit() if == = decl_stmt org.apache.solr.handler.SnapShooter = new call SnapShooter.validateCreateSnapshot() call SnapShooter.validateCreateSnapshot() call SnapShooter.validateCreateSnapshot() call SnapShooter.validateCreateSnapshot() call SnapShooter.validateCreateSnapshot() call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() String ModifiableSolrParams String private private decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) decl_stmt java.lang.String = decl_stmt java.lang.String = if != new else if != new else new long decl Map decl List decl List String IndexCommit SegmentInfos long Directory private private decl_stmt java.lang.String = if == return decl_stmt long = decl_stmt org.apache.lucene.index.IndexCommit = call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() if == return call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() decl_stmt java.util.List < < = new <> decl_stmt org.apache.lucene.store.Directory = try = call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getNewIndexDir() call org.apache.solr.core.SolrCore.getNewIndexDir() call org.apache.solr.core.SolrCore.getNewIndexDir() call org.apache.solr.core.SolrCore.getNewIndexDir() call org.apache.solr.core.SolrCore.getNewIndexDir() call org.apache.solr.core.SolrCore.getSolrConfig() call org.apache.solr.core.SolrCore.getSolrConfig() call org.apache.solr.core.SolrCore.getSolrConfig() call org.apache.solr.core.SolrCore.getSolrConfig() call org.apache.solr.core.SolrCore.getSolrConfig() decl_stmt org.apache.lucene.index.SegmentInfos = call IndexCommit.getSegmentsFileName() call IndexCommit.getSegmentsFileName() call IndexCommit.getSegmentsFileName() call IndexCommit.getSegmentsFileName() call IndexCommit.getSegmentsFileName() for : for : decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call Directory.fileLength() call Directory.fileLength() call Directory.fileLength() call Directory.fileLength() call Directory.fileLength() try final final = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() try decl_stmt long = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call Directory.fileLength() call Directory.fileLength() call Directory.fileLength() call Directory.fileLength() call Directory.fileLength() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() if call org.apache.lucene.index.SegmentInfos.getId() call org.apache.lucene.index.SegmentInfos.getId() call org.apache.lucene.index.SegmentInfos.getId() call org.apache.lucene.index.SegmentInfos.getId() call org.apache.lucene.index.SegmentInfos.getId() != try final final = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() try call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call org.apache.lucene.index.SegmentInfos.getSegmentsFileName() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + finally if != try call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() catch if call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() != && call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() instanceof try decl_stmt java.util.List < < = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + if call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() < || call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() return call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + CdcrUpdateLog long long decl String decl Map decl List < < < < throws decl_stmt long = decl_stmt org.apache.solr.update.CdcrUpdateLog = call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() decl_stmt java.lang.String = call CdcrUpdateLog.getLogList() call CdcrUpdateLog.getLogList() call CdcrUpdateLog.getLogList() call CdcrUpdateLog.getLogList() call CdcrUpdateLog.getLogList() new call CdcrUpdateLog.getLogDir() call CdcrUpdateLog.getLogDir() call CdcrUpdateLog.getLogDir() call CdcrUpdateLog.getLogDir() call CdcrUpdateLog.getLogDir() decl_stmt java.util.List < < = new <> for : decl_stmt long = + if < decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new call CdcrUpdateLog.getLogDir() call CdcrUpdateLog.getLogDir() call CdcrUpdateLog.getLogDir() call CdcrUpdateLog.getLogDir() call CdcrUpdateLog.getLogDir() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return IndexSearcher VersionInfo private private throws try = decl_stmt org.apache.lucene.search.IndexSearcher = new decl_stmt org.apache.solr.update.VersionInfo = call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() return call org.apache.solr.update.VersionInfo.getMaxVersionFromIndex(IndexSearcher) call org.apache.solr.update.VersionInfo.getMaxVersionFromIndex(IndexSearcher) call org.apache.solr.update.VersionInfo.getMaxVersionFromIndex(IndexSearcher) call org.apache.solr.update.VersionInfo.getMaxVersionFromIndex(IndexSearcher) call org.apache.solr.update.VersionInfo.getMaxVersionFromIndex(IndexSearcher) FileInfo File File Checksum decl List decl Map String < < < < < final final final < decl_stmt java.util.List < < = new <> synchronized decl_stmt File = new call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() decl_stmt sun.security.krb5.Checksum = for = < ++ decl_stmt java.lang.String = decl_stmt File = new if ! call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() || call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() continue decl_stmt FileInfo = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == || != call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() || != call File.length() call File.length() call File.length() call File.length() call File.length() if == = new = new call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() call File.length() call File.length() call File.length() call File.length() call File.length() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.util.Map < = call FileInfo.getAsMap() call FileInfo.getAsMap() call FileInfo.getAsMap() call FileInfo.getAsMap() call FileInfo.getAsMap() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl Map < < decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return if call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + if call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + return call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() = private = private = Date private private decl_stmt java.util.Date = if > = new + return return ++ Directory long decl_stmt org.apache.lucene.store.Directory decl_stmt long = try = call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getSolrConfig() call org.apache.solr.core.SolrCore.getSolrConfig() call org.apache.solr.core.SolrCore.getSolrConfig() call org.apache.solr.core.SolrCore.getSolrConfig() call org.apache.solr.core.SolrCore.getSolrConfig() try = finally call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() catch return public public return decl RefCounted CommitVersionInfo private private decl_stmt CommitVersionInfo = decl_stmt org.apache.solr.util.RefCounted < = call org.apache.solr.core.SolrCore.getSearcher() call org.apache.solr.core.SolrCore.getSearcher() call org.apache.solr.core.SolrCore.getSearcher() call org.apache.solr.core.SolrCore.getSearcher() call org.apache.solr.core.SolrCore.getSearcher() try = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() return long CommitVersionInfo NamedList long IndexFetcher Properties public public decl_stmt org.apache.solr.common.util.NamedList = if != call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) decl_stmt CommitVersionInfo = != && ! call org.apache.solr.core.SolrCore.isClosed() call org.apache.solr.core.SolrCore.isClosed() call org.apache.solr.core.SolrCore.isClosed() call org.apache.solr.core.SolrCore.isClosed() call org.apache.solr.core.SolrCore.isClosed() : call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) == : call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) == : call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) decl_stmt org.apache.solr.handler.IndexFetcher = if != call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.handler.IndexFetcher.getMasterUrl() call org.apache.solr.handler.IndexFetcher.getMasterUrl() call org.apache.solr.handler.IndexFetcher.getMasterUrl() call org.apache.solr.handler.IndexFetcher.getMasterUrl() call org.apache.solr.handler.IndexFetcher.getMasterUrl() if != call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) decl_stmt long = call org.apache.solr.handler.IndexFetcher.getReplicationTimeElapsed() call org.apache.solr.handler.IndexFetcher.getReplicationTimeElapsed() call org.apache.solr.handler.IndexFetcher.getReplicationTimeElapsed() call org.apache.solr.handler.IndexFetcher.getReplicationTimeElapsed() call org.apache.solr.handler.IndexFetcher.getReplicationTimeElapsed() decl_stmt long = call IndexFetcher.getTotalBytesDownloaded() call IndexFetcher.getTotalBytesDownloaded() call IndexFetcher.getTotalBytesDownloaded() call IndexFetcher.getTotalBytesDownloaded() call IndexFetcher.getTotalBytesDownloaded() if > call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) / decl_stmt java.util.Properties = if if != call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() return float CommitVersionInfo boolean long IndexFetcher long decl List NamedList Date long CommitVersionInfo decl NamedList decl NamedList Properties Date long decl NamedList float decl List long NamedList decl Map long IndexCommit String private < private < decl_stmt org.apache.solr.common.util.NamedList < = new <> decl_stmt org.apache.solr.common.util.NamedList < = new <> decl_stmt org.apache.solr.common.util.NamedList < = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getIndexDir() call org.apache.solr.core.SolrCore.getIndexDir() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt CommitVersionInfo = call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() == : call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() == : decl_stmt org.apache.lucene.index.IndexCommit = if if != call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() if && != decl_stmt CommitVersionInfo = call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt org.apache.solr.handler.IndexFetcher = if != decl_stmt java.util.Properties = if try decl_stmt org.apache.solr.common.util.NamedList = call org.apache.solr.handler.IndexFetcher.getDetails() call org.apache.solr.handler.IndexFetcher.getDetails() call org.apache.solr.handler.IndexFetcher.getDetails() call org.apache.solr.handler.IndexFetcher.getDetails() call org.apache.solr.handler.IndexFetcher.getDetails() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call org.apache.solr.handler.IndexFetcher.getMasterUrl() call org.apache.solr.handler.IndexFetcher.getMasterUrl() call org.apache.solr.handler.IndexFetcher.getMasterUrl() call org.apache.solr.handler.IndexFetcher.getMasterUrl() call org.apache.solr.handler.IndexFetcher.getMasterUrl() if != call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt java.util.Date = if != && ! call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call java.util.Date.toString() call java.util.Date.toString() call java.util.Date.toString() call java.util.Date.toString() call java.util.Date.toString() else if call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() new call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt boolean = call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() if try decl_stmt long = decl_stmt java.util.List < = new <> for < : call org.apache.solr.handler.IndexFetcher.getFilesToDownload() call org.apache.solr.handler.IndexFetcher.getFilesToDownload() call org.apache.solr.handler.IndexFetcher.getFilesToDownload() call org.apache.solr.handler.IndexFetcher.getFilesToDownload() call org.apache.solr.handler.IndexFetcher.getFilesToDownload() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() += for < : call org.apache.solr.handler.IndexFetcher.getConfFilesToDownload() call org.apache.solr.handler.IndexFetcher.getConfFilesToDownload() call org.apache.solr.handler.IndexFetcher.getConfFilesToDownload() call org.apache.solr.handler.IndexFetcher.getConfFilesToDownload() call org.apache.solr.handler.IndexFetcher.getConfFilesToDownload() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() += call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt long = decl_stmt java.util.List < = new <> for < : call org.apache.solr.handler.IndexFetcher.getFilesDownloaded() call org.apache.solr.handler.IndexFetcher.getFilesDownloaded() call org.apache.solr.handler.IndexFetcher.getFilesDownloaded() call org.apache.solr.handler.IndexFetcher.getFilesDownloaded() call org.apache.solr.handler.IndexFetcher.getFilesDownloaded() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() += for < : call org.apache.solr.handler.IndexFetcher.getConfFilesDownloaded() call org.apache.solr.handler.IndexFetcher.getConfFilesDownloaded() call org.apache.solr.handler.IndexFetcher.getConfFilesDownloaded() call org.apache.solr.handler.IndexFetcher.getConfFilesDownloaded() call org.apache.solr.handler.IndexFetcher.getConfFilesDownloaded() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() += decl_stmt java.util.Map < = call org.apache.solr.handler.IndexFetcher.getCurrentFile() call org.apache.solr.handler.IndexFetcher.getCurrentFile() call org.apache.solr.handler.IndexFetcher.getCurrentFile() call org.apache.solr.handler.IndexFetcher.getCurrentFile() call org.apache.solr.handler.IndexFetcher.getCurrentFile() decl_stmt java.lang.String = decl_stmt long = = decl_stmt float = if != = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() += if > = * / call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt long = decl_stmt java.util.Date = call org.apache.solr.handler.IndexFetcher.getReplicationStartTimeStamp() call org.apache.solr.handler.IndexFetcher.getReplicationStartTimeStamp() call org.apache.solr.handler.IndexFetcher.getReplicationStartTimeStamp() call org.apache.solr.handler.IndexFetcher.getReplicationStartTimeStamp() call org.apache.solr.handler.IndexFetcher.getReplicationStartTimeStamp() if != call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call long.toString() call long.toString() call long.toString() call long.toString() call long.toString() decl_stmt long = call org.apache.solr.handler.IndexFetcher.getReplicationTimeElapsed() call org.apache.solr.handler.IndexFetcher.getReplicationTimeElapsed() call org.apache.solr.handler.IndexFetcher.getReplicationTimeElapsed() call org.apache.solr.handler.IndexFetcher.getReplicationTimeElapsed() call org.apache.solr.handler.IndexFetcher.getReplicationTimeElapsed() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() + if > = - * / decl_stmt float = decl_stmt long = if > = * / if > = / if != call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() + call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() if call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() if call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() > call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt org.apache.solr.common.util.NamedList = if != call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() return String String decl List private private < decl_stmt java.lang.String = if == || call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() == return if == try decl_stmt java.lang.Long = new catch else if == decl_stmt java.lang.String = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new else decl List private < private < decl_stmt java.util.List < = new <> if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return IndexInput InputStream Directory Properties decl_stmt org.apache.lucene.store.Directory = try try = call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getDataDir() call org.apache.solr.core.SolrCore.getSolrConfig() call org.apache.solr.core.SolrCore.getSolrConfig() call org.apache.solr.core.SolrCore.getSolrConfig() call org.apache.solr.core.SolrCore.getSolrConfig() call org.apache.solr.core.SolrCore.getSolrConfig() decl_stmt org.apache.lucene.store.IndexInput try = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() catch return new try decl_stmt java.io.InputStream final final = new decl_stmt java.util.Properties = new call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) new return finally call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() finally if != call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() call org.apache.solr.core.SolrCore.getDirectoryFactory() catch throw new long Runnable private private = = if == || <= call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return decl_stmt java.lang.Runnable = if call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return try call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() = new decl_stmt long = new + call java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable,long,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable,long,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable,long,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable,long,long,TimeUnit) call java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable,long,long,TimeUnit) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl List List NamedList decl String boolean decl Collection Object decl RefCounted IndexDeletionPolicyWrapper boolean SolrDeletionPolicy NamedList decl RefCounted DirectoryReader IndexDeletionPolicy boolean boolean List String public public = decl_stmt java.lang.Object = if != = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() else = decl_stmt org.apache.solr.common.util.NamedList = decl_stmt boolean = if = = new call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) = decl_stmt org.apache.solr.common.util.NamedList = decl_stmt boolean = if || if call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() call org.apache.solr.core.SolrCore.getCoreDescriptor() != call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + call org.apache.solr.core.SolrCore.getName() call org.apache.solr.core.SolrCore.getName() call org.apache.solr.core.SolrCore.getName() call org.apache.solr.core.SolrCore.getName() call org.apache.solr.core.SolrCore.getName() + + + + + if ! && ! = = new <> if = call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) if != && call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() > decl_stmt java.util.List < = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) for : if == continue decl_stmt java.lang.String = call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() > : call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt java.util.List = call org.apache.solr.common.util.NamedList.getAll(String) call org.apache.solr.common.util.NamedList.getAll(String) call org.apache.solr.common.util.NamedList.getAll(String) call org.apache.solr.common.util.NamedList.getAll(String) call org.apache.solr.common.util.NamedList.getAll(String) decl_stmt boolean = call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) decl_stmt boolean = ! && call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) decl_stmt java.util.List = call org.apache.solr.common.util.NamedList.getAll(String) call org.apache.solr.common.util.NamedList.getAll(String) call org.apache.solr.common.util.NamedList.getAll(String) call org.apache.solr.common.util.NamedList.getAll(String) call org.apache.solr.common.util.NamedList.getAll(String) = call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) = ! && call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) if ! && ! = if decl_stmt org.apache.solr.core.IndexDeletionPolicyWrapper = call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() decl_stmt IndexDeletionPolicy = == : call org.apache.solr.core.IndexDeletionPolicyWrapper.getWrappedDeletionPolicy() call org.apache.solr.core.IndexDeletionPolicyWrapper.getWrappedDeletionPolicy() call org.apache.solr.core.IndexDeletionPolicyWrapper.getWrappedDeletionPolicy() call org.apache.solr.core.IndexDeletionPolicyWrapper.getWrappedDeletionPolicy() call org.apache.solr.core.IndexDeletionPolicyWrapper.getWrappedDeletionPolicy() if instanceof decl_stmt org.apache.solr.core.SolrDeletionPolicy = if call org.apache.solr.core.SolrDeletionPolicy.getMaxOptimizedCommitsToKeep() call org.apache.solr.core.SolrDeletionPolicy.getMaxOptimizedCommitsToKeep() call org.apache.solr.core.SolrDeletionPolicy.getMaxOptimizedCommitsToKeep() call org.apache.solr.core.SolrDeletionPolicy.getMaxOptimizedCommitsToKeep() call org.apache.solr.core.SolrDeletionPolicy.getMaxOptimizedCommitsToKeep() < call org.apache.solr.core.SolrDeletionPolicy.setMaxOptimizedCommitsToKeep(int) call org.apache.solr.core.SolrDeletionPolicy.setMaxOptimizedCommitsToKeep(int) call org.apache.solr.core.SolrDeletionPolicy.setMaxOptimizedCommitsToKeep(int) call org.apache.solr.core.SolrDeletionPolicy.setMaxOptimizedCommitsToKeep(int) call org.apache.solr.core.SolrDeletionPolicy.setMaxOptimizedCommitsToKeep(int) else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + if || call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() if || = call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() if call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) = decl_stmt org.apache.solr.util.RefCounted < = call org.apache.solr.core.SolrCore.getNewestSearcher(boolean) call org.apache.solr.core.SolrCore.getNewestSearcher(boolean) call org.apache.solr.core.SolrCore.getNewestSearcher(boolean) call org.apache.solr.core.SolrCore.getNewestSearcher(boolean) call org.apache.solr.core.SolrCore.getNewestSearcher(boolean) try decl_stmt org.apache.lucene.index.DirectoryReader = == : call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() if != && call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() != && call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() != try if decl_stmt java.util.Collection < = call org.apache.lucene.index.DirectoryReader.directory() call org.apache.lucene.index.DirectoryReader.directory() call org.apache.lucene.index.DirectoryReader.directory() call org.apache.lucene.index.DirectoryReader.directory() call org.apache.lucene.index.DirectoryReader.directory() for : if == if == || call IndexCommit.getGeneration() call IndexCommit.getGeneration() call IndexCommit.getGeneration() call IndexCommit.getGeneration() call IndexCommit.getGeneration() < = else = call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() call DirectoryReader.getIndexCommit() finally decl_stmt org.apache.solr.util.RefCounted < = call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() finally if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() decl_stmt java.lang.String = call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) call org.apache.solr.common.util.NamedList.get(String) if != && ! call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + = Object private private if == return decl_stmt java.lang.Object = if == return if instanceof return return private private call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) new public public if != call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() public public if != call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() if != && != call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) call org.apache.solr.core.SolrCore.addCloseHook(CloseHook) new public public if != call decl Future.cancel() call decl Future.cancel() call decl Future.cancel() call decl Future.cancel() call decl Future.cancel() public public public public if != call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() call ScheduledExecutorService.shutdown() public public if != call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() if != && != call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() call org.apache.solr.handler.IndexFetcher.destroy() public public if != call decl Future.cancel() call decl Future.cancel() call decl Future.cancel() call decl Future.cancel() call decl Future.cancel() public public SnapShooter IndexCommit int private private final final final final return new public public public public decl_stmt org.apache.lucene.index.IndexCommit = call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() if = if try decl_stmt int = if < = decl_stmt org.apache.solr.handler.SnapShooter = new call SnapShooter.validateCreateSnapshot() call SnapShooter.validateCreateSnapshot() call SnapShooter.validateCreateSnapshot() call SnapShooter.validateCreateSnapshot() call SnapShooter.validateCreateSnapshot() call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() public public public public public public SnapShooter IndexCommit int public public decl_stmt org.apache.lucene.index.IndexCommit = call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() call org.apache.solr.core.SolrCore.getDeletionPolicy() if = if try decl_stmt int = if < = decl_stmt org.apache.solr.handler.SnapShooter = new call SnapShooter.validateCreateSnapshot() call SnapShooter.validateCreateSnapshot() call SnapShooter.validateCreateSnapshot() call SnapShooter.validateCreateSnapshot() call SnapShooter.validateCreateSnapshot() call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) call org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() public public public public protected protected throws if != = if != = if == && == && == = new == - || > : if != protected protected if = new new else = new protected protected if != SolrIndexSearcher long decl RefCounted int IndexInput long Directory public public throws decl_stmt org.apache.lucene.store.IndexInput = try decl_stmt org.apache.solr.util.RefCounted < = call org.apache.solr.core.SolrCore.getSearcher() call org.apache.solr.core.SolrCore.getSearcher() call org.apache.solr.core.SolrCore.getSearcher() call org.apache.solr.core.SolrCore.getSearcher() call org.apache.solr.core.SolrCore.getSearcher() decl_stmt org.apache.lucene.store.Directory try decl_stmt org.apache.solr.search.SolrIndexSearcher = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() = call org.apache.solr.search.SolrIndexSearcher.getIndexReader() call org.apache.solr.search.SolrIndexSearcher.getIndexReader() call org.apache.solr.search.SolrIndexSearcher.getIndexReader() call org.apache.solr.search.SolrIndexSearcher.getIndexReader() call org.apache.solr.search.SolrIndexSearcher.getIndexReader() finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() if != - call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt long = call Directory.fileLength() call Directory.fileLength() call Directory.fileLength() call Directory.fileLength() call Directory.fileLength() decl_stmt long = while = == - : decl_stmt int = int - call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() if call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + += if >= = if != break += call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + finally if != call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() protected protected throws long ByteBuffer FileChannel FileInputStream public public throws decl_stmt FileInputStream = try if && = new decl_stmt java.nio.channels.FileChannel = call FileInputStream.getChannel() call FileInputStream.getChannel() call FileInputStream.getChannel() call FileInputStream.getChannel() call FileInputStream.getChannel() if != - call FileChannel.position() call FileChannel.position() call FileChannel.position() call FileChannel.position() call FileChannel.position() decl_stmt ByteBuffer = while call ByteBuffer.clear() call ByteBuffer.clear() call ByteBuffer.clear() call ByteBuffer.clear() call ByteBuffer.clear() decl_stmt long = call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) call java.nio.channels.FileChannel.read(ByteBuffer) if <= break int if int int else catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + finally protected protected return new call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() protected protected return new call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() private static private static return int String String Matcher int String private static private static if == return decl_stmt int = decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) decl_stmt java.lang.String = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) decl_stmt java.lang.String = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) decl_stmt java.lang.String = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) = try if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > += if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > += * if != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > += * * return catch throw new else throw new