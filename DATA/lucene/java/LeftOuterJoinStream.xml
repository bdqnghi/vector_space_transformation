org.apache.solr.client.solrj.io.stream java.io.IOException import java.util.LinkedList import org.apache.solr.client.solrj.io.Tuple import org.apache.solr.client.solrj.io.comp.FieldComparator import org.apache.solr.client.solrj.io.comp.MultipleFieldComparator import org.apache.solr.client.solrj.io.comp.StreamComparator import org.apache.solr.client.solrj.io.eq.FieldEqualitor import org.apache.solr.client.solrj.io.eq.MultipleFieldEqualitor import org.apache.solr.client.solrj.io.eq.StreamEqualitor import org.apache.solr.client.solrj.io.stream.expr.Expressible import org.apache.solr.client.solrj.io.stream.expr.StreamExpression import org.apache.solr.client.solrj.io.stream.expr.StreamFactory import class org.apache.solr.client.solrj.io.stream.LeftOuterJoinStream super super extends super implements decl LinkedList decl LinkedList decl LinkedList Tuple Tuple int public public throws if call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() > return call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() while if == call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() decl_stmt org.apache.solr.client.solrj.io.Tuple = if return if == call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() if == call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() || call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() return call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() if call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() for : for : decl_stmt org.apache.solr.client.solrj.io.Tuple = call org.apache.solr.client.solrj.io.Tuple.merge(Tuple) call org.apache.solr.client.solrj.io.Tuple.merge(Tuple) call org.apache.solr.client.solrj.io.Tuple.merge(Tuple) call org.apache.solr.client.solrj.io.Tuple.merge(Tuple) call org.apache.solr.client.solrj.io.Tuple.merge(Tuple) call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() return call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() else decl_stmt int = call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() if < return call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() else call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() call decl LinkedList.clear() public public return