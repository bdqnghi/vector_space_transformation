org.apache.lucene.classification.utils java.io.IOException import java.util.Arrays import java.util.Collections import java.util.HashMap import java.util.Map import java.util.concurrent.ExecutionException import java.util.concurrent.ExecutorService import java.util.concurrent.Executors import java.util.concurrent.TimeUnit import java.util.concurrent.TimeoutException import org.apache.lucene.classification.ClassificationResult import org.apache.lucene.classification.Classifier import org.apache.lucene.document.Document import org.apache.lucene.index.LeafReader import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.TermRangeQuery import org.apache.lucene.search.TopDocs import org.apache.lucene.util.BytesRef import org.apache.lucene.util.NamedThreadFactory import class org.apache.lucene.classification.utils.ConfusionMatrixGenerator decl Map String TopDocs long Document int IndexSearcher long String decl String double String decl Map ExecutorService T Long decl ClassificationResult public static < public static < < throws decl_stmt java.util.concurrent.ExecutorService = new try decl_stmt java.util.Map < < = new <> decl_stmt org.apache.lucene.search.IndexSearcher = new decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new decl_stmt double = decl_stmt int = for : if > && >= break decl_stmt org.apache.lucene.document.Document = decl_stmt java.lang.String = call org.apache.lucene.document.Document.getValues(String) call org.apache.lucene.document.Document.getValues(String) call org.apache.lucene.document.Document.getValues(String) call org.apache.lucene.document.Document.getValues(String) call org.apache.lucene.document.Document.getValues(String) if != && > decl_stmt org.apache.lucene.classification.ClassificationResult < decl_stmt java.lang.String = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) if != try decl_stmt long = = call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) decl_stmt long = += - if != decl_stmt T = call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getAssignedClass() call decl ClassificationResult.getAssignedClass() if != ++ decl_stmt java.lang.String = instanceof : call T.toString() call T.toString() call T.toString() call T.toString() call T.toString() decl_stmt java.lang.String if >= = else = decl_stmt java.util.Map < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != decl_stmt java.lang.Long = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() catch += catch throw new return new / finally call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() public < < public < < return double decl Map double public public decl_stmt java.util.Map < = decl_stmt double = decl_stmt double = if != for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if += for < : if += return > / + : decl Map double double public public decl_stmt java.util.Map < = decl_stmt double = decl_stmt double = if != for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if += else += return + > / + : double double public public decl_stmt double = decl_stmt double = return > && > * * / + : double double public public decl_stmt double = decl_stmt double = return > && > * * / + : double double double double String public public if == - decl_stmt double = decl_stmt double = decl_stmt double = decl_stmt double = for < < : decl_stmt java.lang.String = for < : if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) += else += for < : if += else ++ = + / + + + return double String double public public decl_stmt double = decl_stmt double = for < < : decl_stmt java.lang.String = for < : if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) += for < : if += return > / + : double double String public public decl_stmt double = decl_stmt double = for < < : decl_stmt java.lang.String = for < : if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) += else += return + > / + : public public return + + + + + + + public public return public public return