org.apache.lucene.search java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.Iterator import java.util.List import java.util.Objects import java.util.Set import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.IndexReader import org.apache.lucene.index.Term import class org.apache.lucene.search.DisjunctionMaxQuery super super extends super implements decl Query float public < public < return public < public < return public public return public public < for : float float public public throws decl_stmt float = = for : decl_stmt float = += = return - * * + public public for : Scorer decl List public public throws decl_stmt java.util.List < = new <> for : decl_stmt org.apache.lucene.search.Scorer = if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return else if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else return new float Explanation float decl List String boolean public public throws decl_stmt boolean = decl_stmt float = = decl_stmt java.util.List < = new <> for : decl_stmt org.apache.lucene.search.Explanation = if call float.isMatch() call float.isMatch() call float.isMatch() call float.isMatch() call float.isMatch() = call Explanation.add() call Explanation.add() call Explanation.add() call Explanation.add() call Explanation.add() += call float.getValue() call float.getValue() call float.getValue() call float.getValue() call float.getValue() = call float.getValue() call float.getValue() call float.getValue() call float.getValue() call float.getValue() if decl_stmt float final final = + - * decl_stmt java.lang.String final final = == : + + return else return public public throws return new decl List boolean Query public public throws if == return decl_stmt boolean = decl_stmt java.util.List < = new <> for : decl_stmt org.apache.lucene.search.Query = |= != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if return new return StringBuilder Query public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < ++ decl_stmt org.apache.lucene.search.Query = if instanceof call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() if != - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() DisjunctionMaxQuery public public if ! instanceof return decl_stmt org.apache.lucene.search.DisjunctionMaxQuery = return && == && int public public decl_stmt int = = * + = * + return