org.apache.lucene.index java.util.ArrayList import java.util.HashMap import java.util.Iterator import java.util.List import java.util.Map import org.apache.lucene.index.BufferedUpdatesStream.QueryAndLimit import org.apache.lucene.index.DocValuesUpdate.BinaryDocValuesUpdate import org.apache.lucene.index.DocValuesUpdate.NumericDocValuesUpdate import org.apache.lucene.search.Query import org.apache.lucene.util.BytesRef import class org.apache.lucene.index.CoalescedUpdates decl List decl List decl List long decl Map public public return + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + + + call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + Query BinaryDocValuesUpdate += call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for = < ++ decl_stmt org.apache.lucene.search.Query final final = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for : decl_stmt NumericDocValuesUpdate = new = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : decl_stmt BinaryDocValuesUpdate = new = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else return new decl Map decl Iterator public < public < return new < public < public < return new < decl_stmt java.util.Iterator private final final final < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() public public return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public decl_stmt java.util.Map final final final final final final final < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() return new call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() public public throw new decl Map decl Iterator public < public < return new < decl_stmt java.util.Iterator private final final final < < = call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() public public return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public decl_stmt java.util.Map final final final final final final final < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() return new call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() public public throw new public public return decl Map public public decl_stmt java.util.Map final final final final final final final < = return new call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() public public throw new