org.apache.solr.client.solrj.io.stream java.io.IOException import java.util.ArrayList import java.util.List import java.util.Locale import org.apache.solr.client.solrj.io.Tuple import org.apache.solr.client.solrj.io.comp.FieldComparator import org.apache.solr.client.solrj.io.comp.StreamComparator import org.apache.solr.client.solrj.io.stream.expr.Expressible import org.apache.solr.client.solrj.io.stream.expr.StreamExpression import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionNamedParameter import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionValue import org.apache.solr.client.solrj.io.stream.expr.StreamFactory import class org.apache.solr.client.solrj.io.stream.MergeStream super super extends super implements StreamComparator decl PushBackStream long private private throws for : if ! call org.apache.solr.client.solrj.io.comp.StreamComparator.isDerivedFrom(StreamComparator) call org.apache.solr.client.solrj.io.comp.StreamComparator.isDerivedFrom(StreamComparator) call org.apache.solr.client.solrj.io.comp.StreamComparator.isDerivedFrom(StreamComparator) call org.apache.solr.client.solrj.io.comp.StreamComparator.isDerivedFrom(StreamComparator) call org.apache.solr.client.solrj.io.comp.StreamComparator.isDerivedFrom(StreamComparator) throw new = new for = < ++ = new = StreamExpression public public throws decl_stmt org.apache.solr.client.solrj.io.stream.expr.StreamExpression = new for : call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new call StreamComparator.toExpression() call StreamComparator.toExpression() call StreamComparator.toExpression() call StreamComparator.toExpression() call StreamComparator.toExpression() return public public for : decl List public < public < decl_stmt java.util.List < = new for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public throws for : public public throws for : Tuple PushBackStream Tuple public public throws decl_stmt org.apache.solr.client.solrj.io.Tuple = decl_stmt org.apache.solr.client.solrj.io.stream.PushBackStream = for : decl_stmt org.apache.solr.client.solrj.io.Tuple = if continue if == = = continue if call StreamComparator.compare() call StreamComparator.compare() call StreamComparator.compare() call StreamComparator.compare() call StreamComparator.compare() < call org.apache.solr.client.solrj.io.stream.PushBackStream.pushBack(Tuple) call org.apache.solr.client.solrj.io.stream.PushBackStream.pushBack(Tuple) call org.apache.solr.client.solrj.io.stream.PushBackStream.pushBack(Tuple) call org.apache.solr.client.solrj.io.stream.PushBackStream.pushBack(Tuple) call org.apache.solr.client.solrj.io.stream.PushBackStream.pushBack(Tuple) = = continue else if == return return public public return public public return