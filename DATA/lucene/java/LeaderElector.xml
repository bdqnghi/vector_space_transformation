org.apache.solr.cloud java.io.IOException import java.lang.invoke.MethodHandles import java.util.Collections import java.util.Iterator import java.util.List import java.util.Map import java.util.regex.Matcher import java.util.regex.Pattern import org.apache.solr.cloud.ZkController.ContextKey import org.apache.solr.common.SolrException import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkCmdExecutor import org.apache.solr.common.cloud.ZooKeeperException import org.apache.zookeeper.CreateMode import org.apache.zookeeper.KeeperException import org.apache.zookeeper.KeeperException.ConnectionLossException import org.apache.zookeeper.WatchedEvent import org.apache.zookeeper.Watcher import org.apache.zookeeper.Watcher.Event.EventType import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.cloud.LeaderElector String Logger ZkCmdExecutor decl Map Pattern Pattern Pattern ContextKey ElectionContext SolrZkClient ElectionWatcher public public return String String String decl Iterator String String decl List String String private private final final throws call ElectionContext.checkIfIamLeaderFired() call ElectionContext.checkIfIamLeaderFired() call ElectionContext.checkIfIamLeaderFired() call ElectionContext.checkIfIamLeaderFired() call ElectionContext.checkIfIamLeaderFired() decl_stmt java.lang.String final final = + decl_stmt java.util.List < = call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) decl_stmt java.lang.String = call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() call ElectionContext.leaderSeqPath() + if ! call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return decl_stmt java.lang.String = call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() + + + decl_stmt java.util.Iterator < = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) try decl_stmt java.lang.String = + + call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) - catch call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return else decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for : if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) break = try decl_stmt java.lang.String = + + call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) = new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch throw catch catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() protected protected final final throws call ElectionContext.runLeaderProcess() call ElectionContext.runLeaderProcess() call ElectionContext.runLeaderProcess() call ElectionContext.runLeaderProcess() call ElectionContext.runLeaderProcess() Matcher int public static public static decl_stmt int = decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) else throw new + return Matcher String private private decl_stmt java.lang.String decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) else throw new + return Matcher String public static public static decl_stmt java.lang.String decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) else throw new + return public public throws return boolean String String Matcher int String String long boolean decl List decl List String public public throws call org.apache.solr.cloud.ElectionContext.joinedElectionFired() call org.apache.solr.cloud.ElectionContext.joinedElectionFired() call org.apache.solr.cloud.ElectionContext.joinedElectionFired() call org.apache.solr.cloud.ElectionContext.joinedElectionFired() call org.apache.solr.cloud.ElectionContext.joinedElectionFired() decl_stmt java.lang.String final final = + decl_stmt long = call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() decl_stmt java.lang.String = + + decl_stmt java.lang.String = decl_stmt boolean = decl_stmt int = while try if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.util.List < = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < = call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) + + + else decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if ! call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() throw new + = + + + + call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) else = call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) + + + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = = catch decl_stmt java.util.List < = call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) decl_stmt boolean = for : decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = break if ! = if ++ > throw new try catch catch if ++ > = throw new = try catch return = public public if return if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) - catch catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() String public public final final throws decl_stmt java.lang.String = + call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) = int public static public static < decl_stmt int = - return == : ElectionContext ElectionWatcher throws decl_stmt ElectionWatcher = decl_stmt org.apache.solr.cloud.ElectionContext = call org.apache.solr.cloud.ElectionContext.copy() call org.apache.solr.cloud.ElectionContext.copy() call org.apache.solr.cloud.ElectionContext.copy() call org.apache.solr.cloud.ElectionContext.copy() call org.apache.solr.cloud.ElectionContext.copy() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if != call ElectionWatcher.cancel() call ElectionWatcher.cancel() call ElectionWatcher.cancel() call ElectionWatcher.cancel() call ElectionWatcher.cancel() =