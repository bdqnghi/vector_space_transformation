org.apache.lucene.codecs.blockterms java.io.IOException import java.util.ArrayList import java.util.List import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.TermStats import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.IOUtils import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.fst.Builder import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.PositiveIntOutputs import org.apache.lucene.util.fst.Util import class org.apache.lucene.codecs.blockterms.VariableGapTermsIndexWriter super super extends String int decl List String FieldInfos IndexTermSelector int IndexOutput public public if >= = return else ++ return public public = public public if >= || >= = return else ++ return public public = FSTFieldWriter public public throws call IndexTermSelector.newField() call IndexTermSelector.newField() call IndexTermSelector.newField() call IndexTermSelector.newField() call IndexTermSelector.newField() decl_stmt FSTFieldWriter = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return int int int protected protected final final final final decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = for = < ++ if + != + return + return + public public throws if call IndexTermSelector.isIndexTerm() call IndexTermSelector.isIndexTerm() call IndexTermSelector.isIndexTerm() call IndexTermSelector.isIndexTerm() call IndexTermSelector.isIndexTerm() || = return else return int public public throws if == assert == return decl_stmt int final final = = try finally = public public throws = if != FSTFieldWriter int int long public public throws if != try decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt int final final = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = for = < ++ decl_stmt FSTFieldWriter = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if != ++ call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() for = < ++ decl_stmt FSTFieldWriter = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if != call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() finally call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() = private private throws call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong()