org.apache.solr javax.xml.xpath.XPathExpressionException import java.io.File import java.io.IOException import java.io.OutputStreamWriter import java.io.Reader import java.io.StringReader import java.io.StringWriter import java.io.Writer import java.lang.annotation.Documented import java.lang.annotation.ElementType import java.lang.annotation.Inherited import java.lang.annotation.Retention import java.lang.annotation.RetentionPolicy import java.lang.annotation.Target import java.lang.invoke.MethodHandles import java.net.MalformedURLException import java.net.URL import java.nio.charset.Charset import java.nio.charset.StandardCharsets import java.nio.file.Files import java.nio.file.Path import java.nio.file.Paths import java.time.Instant import java.util.ArrayList import java.util.Arrays import java.util.Comparator import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.LinkedHashMap import java.util.List import java.util.Locale import java.util.Map import java.util.Properties import java.util.logging.Level import com.carrotsearch.randomizedtesting.RandomizedContext import com.carrotsearch.randomizedtesting.annotations.ThreadLeakFilters import com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule import org.apache.commons.codec.Charsets import org.apache.commons.io.FileUtils import org.apache.http.client.HttpClient import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.analysis.MockTokenizer import org.apache.lucene.index.IndexWriterConfig import org.apache.lucene.util.Constants import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.LuceneTestCase.SuppressFileSystems import org.apache.lucene.util.LuceneTestCase.SuppressSysoutChecks import org.apache.lucene.util.QuickPatchThreadsFilter import org.apache.lucene.util.TestUtil import org.apache.solr.client.solrj.embedded.JettyConfig import org.apache.solr.client.solrj.impl.CloudSolrClient import org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrClient import org.apache.solr.client.solrj.impl.HttpClientUtil import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.impl.HttpSolrClient.Builder import org.apache.solr.client.solrj.impl.LBHttpSolrClient import org.apache.solr.client.solrj.ResponseParser import org.apache.solr.client.solrj.util.ClientUtils import org.apache.solr.cloud.IpTables import org.apache.solr.common.SolrDocument import org.apache.solr.common.SolrDocumentList import org.apache.solr.common.SolrException import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.SolrInputField import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.ObjectReleaseTracker import org.apache.solr.common.util.SuppressForbidden import org.apache.solr.common.util.XML import org.apache.solr.core.CoreContainer import org.apache.solr.core.CoresLocator import org.apache.solr.core.NodeConfig import org.apache.solr.core.SolrConfig import org.apache.solr.core.SolrCore import org.apache.solr.core.SolrResourceLoader import org.apache.solr.core.SolrXmlConfig import org.apache.solr.handler.UpdateRequestHandler import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.SolrRequestHandler import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.SchemaField import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.servlet.DirectSolrConnection import org.apache.solr.util.AbstractSolrTestCase import org.apache.solr.util.RefCounted import org.apache.solr.util.RevertDefaultThreadHandlerRule import org.apache.solr.util.SSLTestConfig import org.apache.solr.util.TestHarness import org.apache.solr.util.TestInjection import org.apache.zookeeper.KeeperException import org.junit.AfterClass import org.junit.BeforeClass import org.junit.ClassRule import org.junit.Rule import org.junit.rules.RuleChain import org.junit.rules.TestRule import org.noggit.CharArr import org.noggit.JSONUtil import org.noggit.ObjectBuilder import org.slf4j.Logger import org.slf4j.LoggerFactory import org.xml.sax.SAXException import static static com.google.common.base.Preconditions.checkNotNull import class annotation annotation annotation comment org.apache.solr.SolrTestCaseJ4 super super extends String long TestRule String String SSLTestConfig IRange long int Logger SolrConfig String TestRule File String decl TestHarness boolean String String String String String String String TestHarness decl LocalRequestFactory Path String IRange Properties protected protected throws decl_stmt java.util.Properties = new call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() public static public static throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try = new private static private static = + call decl LocalRequestFactory.getAbsolutePath() call decl LocalRequestFactory.getAbsolutePath() call decl LocalRequestFactory.getAbsolutePath() call decl LocalRequestFactory.getAbsolutePath() call decl LocalRequestFactory.getAbsolutePath() : = call org.apache.solr.util.SSLTestConfig.getHttpClientBuilder() call org.apache.solr.util.SSLTestConfig.getHttpClientBuilder() call org.apache.solr.util.SSLTestConfig.getHttpClientBuilder() call org.apache.solr.util.SSLTestConfig.getHttpClientBuilder() call org.apache.solr.util.SSLTestConfig.getHttpClientBuilder() if String private static private static throws try if if ! decl_stmt java.lang.String = else decl_stmt java.lang.String = if != call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() = finally = = = protected static protected static return != && call SSLTestConfig.isSSLMode() call SSLTestConfig.isSSLMode() call SSLTestConfig.isSSLMode() call SSLTestConfig.isSSLMode() call SSLTestConfig.isSSLMode() public static public static throws if ! = if == = < : = public static public static throws if ! return = if != else boolean boolean private static private static if return new decl_stmt boolean final final = < decl_stmt boolean = < if = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return new protected static protected static return protected static protected static final final final final return : + + + MockTokenizer protected static protected static throws decl_stmt org.apache.lucene.analysis.MockTokenizer = new call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() return MockTokenizer protected static protected static throws decl_stmt org.apache.lucene.analysis.MockTokenizer = new call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() new return public static public static throws if == = = new = call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) String IndexWriterConfig public static public static decl_stmt org.apache.lucene.index.IndexWriterConfig = new call IndexWriterConfig.getUseCompoundFile() call IndexWriterConfig.getUseCompoundFile() call IndexWriterConfig.getUseCompoundFile() call IndexWriterConfig.getUseCompoundFile() call IndexWriterConfig.getUseCompoundFile() call org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDocs() call org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDocs() call org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDocs() call org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDocs() call org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDocs() call IndexWriterConfig.getRAMBufferSizeMB() call IndexWriterConfig.getRAMBufferSizeMB() call IndexWriterConfig.getRAMBufferSizeMB() call IndexWriterConfig.getRAMBufferSizeMB() call IndexWriterConfig.getRAMBufferSizeMB() decl_stmt java.lang.String = call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) = public static public static while != && != && != = return public public throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + public public throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl java = public static = public static decl_stmt java.util.logging.Logger = call decl java.setLevel() call decl java.setLevel() call decl java.setLevel() call decl java.setLevel() call decl java.setLevel() public static public static throws public static public static throws = = = public static public static throws = public static public static = = if != || != call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + = = String int long long public static public static decl_stmt long = decl_stmt long = decl_stmt int = while - != - if ++ > break try catch = = if - != - decl_stmt java.lang.String = + - + + - call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + else if public static public static if == = new <> public static public static if != public static public static = protected static protected static return protected static protected static return public static public static return public static public static return String public static public static throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = if == decl_stmt java.lang.String = if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) public static public static = = new == call decl LocalRequestFactory.getAbsolutePath() call decl LocalRequestFactory.getAbsolutePath() call decl LocalRequestFactory.getAbsolutePath() call decl LocalRequestFactory.getAbsolutePath() call decl LocalRequestFactory.getAbsolutePath() : = call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) public static public static = = new = call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) return call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() public static public static = = new = call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) return call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() CoreContainer CoresLocator NodeConfig public static public static decl_stmt org.apache.solr.core.NodeConfig = new decl_stmt org.apache.solr.core.CoresLocator = new decl_stmt org.apache.solr.core.CoreContainer = = return public static public static = = new call decl LocalRequestFactory.getAbsolutePath() call decl LocalRequestFactory.getAbsolutePath() call decl LocalRequestFactory.getAbsolutePath() call decl LocalRequestFactory.getAbsolutePath() call decl LocalRequestFactory.getAbsolutePath() = call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) call org.apache.solr.util.TestHarness.getRequestFactory(String,int,int) return call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() public static public static for < : call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() if return return public static public static < extends extends for < : call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() if return return public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + CoreContainer public static public static call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if != decl_stmt org.apache.solr.core.CoreContainer = call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() call org.apache.solr.util.TestHarness.getCoreContainer() if ! call org.apache.solr.core.CoreContainer.getCores() call org.apache.solr.core.CoreContainer.getCores() call org.apache.solr.core.CoreContainer.getCores() call org.apache.solr.core.CoreContainer.getCores() call org.apache.solr.core.CoreContainer.getCores() && call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() try call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() catch call org.apache.solr.util.TestHarness.close() call org.apache.solr.util.TestHarness.close() call org.apache.solr.util.TestHarness.close() call org.apache.solr.util.TestHarness.close() call org.apache.solr.util.TestHarness.close() if == = = = = = public static public static public static public static public static public static public static public static String String private static private static try decl_stmt java.lang.String = == : + if decl_stmt java.lang.String = call TestHarness.validateUpdate() call TestHarness.validateUpdate() call TestHarness.validateUpdate() call TestHarness.validateUpdate() call TestHarness.validateUpdate() if != + + else decl_stmt java.lang.String = call TestHarness.validateErrorUpdate() call TestHarness.validateErrorUpdate() call TestHarness.validateErrorUpdate() call TestHarness.validateErrorUpdate() call TestHarness.validateErrorUpdate() if != + + catch throw new public static public static String decl String String String String public static public static try decl_stmt java.lang.String = == : + decl_stmt java.lang.String = call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) if decl_stmt java.lang.String = new + = = decl_stmt java.lang.String = call TestHarness.validateXPath() call TestHarness.validateXPath() call TestHarness.validateXPath() call TestHarness.validateXPath() call TestHarness.validateXPath() if != decl_stmt java.lang.String = + + + + + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch throw new catch + throw new boolean SolrParams ModifiableSolrParams String public static public static throws decl_stmt org.apache.solr.common.params.SolrParams = if ! call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() || call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() == decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) if call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() == call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) decl_stmt java.lang.String decl_stmt boolean = try = call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) = finally if call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + return public static public static throws return ModifiableSolrParams String boolean SolrParams String String public static public static throws decl_stmt org.apache.solr.common.params.SolrParams = try = if ! call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() || call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() == decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) if call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() == call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) decl_stmt java.lang.String decl_stmt boolean = try = call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) = finally if call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + for : if == || == continue decl_stmt java.lang.String = try = decl_stmt java.lang.String = = if != call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + + + + + throw new finally if call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + + + + return finally if != && != public static public static try call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) catch catch throw new finally public static public static try call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) catch catch throw new finally public static public static try call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) catch + + + + != && catch throw new finally public static public static return public static public static return XmlDoc public static public static decl_stmt XmlDoc = return StringWriter public static public static decl_stmt StringWriter = new try call StringWriter.append() call StringWriter.append() call StringWriter.append() call StringWriter.append() call StringWriter.append() call StringWriter.append() call StringWriter.append() call StringWriter.append() call StringWriter.append() call StringWriter.append() catch throw new return call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() StringWriter public static public static try decl_stmt StringWriter = new if == || == call StringWriter.write() call StringWriter.write() call StringWriter.write() call StringWriter.write() call StringWriter.write() call StringWriter.write() call StringWriter.write() call StringWriter.write() call StringWriter.write() call StringWriter.write() call StringWriter.write() call StringWriter.write() call StringWriter.write() call StringWriter.write() call StringWriter.write() else return call StringWriter.getBuffer() call StringWriter.getBuffer() call StringWriter.getBuffer() call StringWriter.getBuffer() call StringWriter.getBuffer() catch throw new public static public static return public static public static return XmlDoc public static public static decl_stmt XmlDoc = new = return ModifiableSolrParams public static public static decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new for = < += call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) + return Object LinkedHashMap public static public static decl_stmt java.util.LinkedHashMap = new for = < += decl_stmt java.lang.Object = call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() + return public static public static return call decl TestHarness.makeRequest() call decl TestHarness.makeRequest() call decl TestHarness.makeRequest() call decl TestHarness.makeRequest() call decl TestHarness.makeRequest() decl String int public static public static decl_stmt java.lang.String = if != decl_stmt int = + = new return call decl TestHarness.makeRequest() call decl TestHarness.makeRequest() call decl TestHarness.makeRequest() call decl TestHarness.makeRequest() call decl TestHarness.makeRequest() ModifiableSolrParams public static public static decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new for = < += call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) + return new call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() public public return public public SolrCore ModifiableSolrParams SolrRequestHandler DirectSolrConnection public static public static throws decl_stmt org.apache.solr.core.SolrCore = call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() if == = else decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new if call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) == call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) if call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) call org.apache.solr.common.params.ModifiableSolrParams.get(String) == call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) = decl_stmt org.apache.solr.servlet.DirectSolrConnection = new decl_stmt org.apache.solr.request.SolrRequestHandler = call org.apache.solr.core.SolrCore.getRequestHandler(String) call org.apache.solr.core.SolrCore.getRequestHandler(String) call org.apache.solr.core.SolrCore.getRequestHandler(String) call org.apache.solr.core.SolrCore.getRequestHandler(String) call org.apache.solr.core.SolrCore.getRequestHandler(String) if == = new call SolrRequestHandler.init() call SolrRequestHandler.init() call SolrRequestHandler.init() call SolrRequestHandler.init() call SolrRequestHandler.init() return call org.apache.solr.servlet.DirectSolrConnection.request(SolrRequestHandler,SolrParams,String) call org.apache.solr.servlet.DirectSolrConnection.request(SolrRequestHandler,SolrParams,String) call org.apache.solr.servlet.DirectSolrConnection.request(SolrRequestHandler,SolrParams,String) call org.apache.solr.servlet.DirectSolrConnection.request(SolrRequestHandler,SolrParams,String) call org.apache.solr.servlet.DirectSolrConnection.request(SolrRequestHandler,SolrParams,String) SolrInputDocument public static public static decl_stmt org.apache.solr.common.SolrInputDocument = new for = < += call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) call org.apache.solr.common.SolrInputDocument.addField(String,Object) + return public static < public static < return public static public static return CharArr public static public static decl_stmt CharArr = new return call CharArr.toString() call CharArr.toString() call CharArr.toString() call CharArr.toString() call CharArr.toString() boolean boolean decl List boolean public static public static try decl_stmt boolean = for : if = else if > decl_stmt boolean = for : if = else else decl_stmt boolean = if decl_stmt java.util.List < = for : if = else catch boolean CharArr public static public static decl_stmt CharArr = new try call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() decl_stmt boolean = for : if = else call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() catch return call CharArr.toString() call CharArr.toString() call CharArr.toString() call CharArr.toString() call CharArr.toString() boolean CharArr public static public static decl_stmt CharArr = new try call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() decl_stmt boolean = for : if = else call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() catch return call CharArr.toString() call CharArr.toString() call CharArr.toString() call CharArr.toString() call CharArr.toString() boolean CharArr public static public static decl_stmt CharArr = new try call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() decl_stmt boolean = for : if = else call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() catch return call CharArr.toString() call CharArr.toString() call CharArr.toString() call CharArr.toString() call CharArr.toString() ModifiableSolrParams List Map String public static public static throws if == || == decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) = decl_stmt java.lang.String = decl_stmt java.util.Map = decl_stmt java.util.List = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) if == || call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() == return return call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) ModifiableSolrParams List Map String public static public static throws if == || == decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) = decl_stmt java.lang.String = decl_stmt java.util.Map = decl_stmt java.util.List = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) if == || call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() == return return call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) ModifiableSolrParams List Map String public static public static throws if == || == decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) = decl_stmt java.lang.String = decl_stmt java.util.Map = decl_stmt java.util.List = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) if == || call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() == return return call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) public public return protected protected return != - + + : public public return public public return int int public public decl_stmt int = decl_stmt int = for = < += += if < return + return - public public return public public if >= return return + * - public public return decl char public public decl_stmt char = new for = < ++ = char return new public public return + + + public public return Doc public public if ! instanceof return decl_stmt javax.print.Doc = return == || != && Doc public public if ! instanceof return - decl_stmt javax.print.Doc = return public < public < for : if return return decl List public public decl_stmt java.util.List < = return == || call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == : call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl Map SchemaField public < public < decl_stmt java.util.Map < = new <> for : decl_stmt org.apache.solr.schema.SchemaField = if ! call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return public public return + + == : public public return decl List int public < public < decl_stmt int = if <= return decl_stmt java.util.List < = new <> for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl List Fld public public decl_stmt java.util.List < = if == return decl_stmt Fld = new = = return Doc Doc int Object String Object decl List int public < public < < < throws if == = new <> decl_stmt int = / for = < ++ decl_stmt javax.print.Doc = if == if == if == else if == else decl_stmt java.lang.String = call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) call org.apache.solr.util.TestHarness.query(String,SolrQueryRequest) * decl_stmt java.lang.Object = = = decl_stmt java.util.List < = < decl_stmt int = for : decl_stmt java.lang.Object = call Doc.get() call Doc.get() call Doc.get() call Doc.get() call Doc.get() decl_stmt javax.print.Doc = if == continue = ++ return Doc Fld public static public static < decl_stmt javax.print.Doc = new = new <> for : decl_stmt Fld = if != call Doc.fields() call Doc.fields() call Doc.fields() call Doc.fields() call Doc.fields() call Doc.fields() call Doc.fields() call Doc.fields() call Doc.fields() if = call Fld.vals() call Fld.vals() call Fld.vals() call Fld.vals() call Fld.vals() call Fld.vals() call Fld.vals() call Fld.vals() call Fld.vals() return StringBuilder boolean String int decl List SchemaField int public static < public static < < decl_stmt java.lang.StringBuilder = new decl_stmt int = decl_stmt java.util.List < < = new <> for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int = + decl_stmt boolean = if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if == + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else decl_stmt java.lang.String = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) : decl_stmt org.apache.solr.schema.SchemaField = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.solr.schema.SchemaField.sortMissingLast() call org.apache.solr.schema.SchemaField.sortMissingLast() call org.apache.solr.schema.SchemaField.sortMissingLast() call org.apache.solr.schema.SchemaField.sortMissingLast() call org.apache.solr.schema.SchemaField.sortMissingLast() call org.apache.solr.schema.SchemaField.sortMissingFirst() call org.apache.solr.schema.SchemaField.sortMissingFirst() call org.apache.solr.schema.SchemaField.sortMissingFirst() call org.apache.solr.schema.SchemaField.sortMissingFirst() call org.apache.solr.schema.SchemaField.sortMissingFirst() ! call org.apache.solr.schema.SchemaField.sortMissingLast() call org.apache.solr.schema.SchemaField.sortMissingLast() call org.apache.solr.schema.SchemaField.sortMissingLast() call org.apache.solr.schema.SchemaField.sortMissingLast() call org.apache.solr.schema.SchemaField.sortMissingLast() || call org.apache.solr.schema.SchemaField.sortMissingFirst() call org.apache.solr.schema.SchemaField.sortMissingFirst() call org.apache.solr.schema.SchemaField.sortMissingFirst() call org.apache.solr.schema.SchemaField.sortMissingFirst() call org.apache.solr.schema.SchemaField.sortMissingFirst() = call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() : if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return int Comparable int Comparable public static < public static < final final final final final final final final final final decl_stmt int final final = : - if return - * if return return new < private private if == return if instanceof return if instanceof return if instanceof return long if instanceof return float if instanceof return double if instanceof return short if instanceof return byte if instanceof return char return public public decl_stmt java.lang.Comparable = decl_stmt java.lang.Comparable = = == : = == : decl_stmt int = if == = else if == if = else if = - else = - else if == if = - else if = else = else = call Comparable.compareTo() call Comparable.compareTo() call Comparable.compareTo() call Comparable.compareTo() call Comparable.compareTo() = * return private private if == return if instanceof return if instanceof return if instanceof return long if instanceof return float if instanceof return double if instanceof return short if instanceof return byte if instanceof return char return Comparable Comparable int public public decl_stmt java.lang.Comparable = decl_stmt java.lang.Comparable = = == : = == : decl_stmt int = if == = else if == if = else if = - else = - else if == if = - else if = else = else = call Comparable.compareTo() call Comparable.compareTo() call Comparable.compareTo() call Comparable.compareTo() call Comparable.compareTo() = * return int public static < public static < final final final < < return decl_stmt int = for < : = if != return return - boolean boolean CharArr public static public static decl_stmt CharArr = new try call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() decl_stmt boolean = for : if = else call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() if > call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() decl_stmt boolean = for : if = else call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() if > call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() call CharArr.append() catch return call CharArr.toString() call CharArr.toString() call CharArr.toString() call CharArr.toString() call CharArr.toString() decl List Doc decl Map decl List public < < public < < < decl_stmt java.util.Map < < = new <> for : decl_stmt javax.print.Doc = decl_stmt java.util.List < = call Doc.getValues() call Doc.getValues() call Doc.getValues() call Doc.getValues() call Doc.getValues() if == continue for : decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return URL File public static public static decl_stmt java.net.URL final final = if != try return new call java.net.URL.toURI() call java.net.URL.toURI() call java.net.URL.toURI() call java.net.URL.toURI() call java.net.URL.toURI() catch throw new + + decl_stmt File final final = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() return throw new + public static public static return public static public static return Throwable public static public static decl_stmt java.lang.Throwable = for = != = = return String String String public static public static final final throws try decl_stmt java.lang.String = decl_stmt java.lang.String = if != decl_stmt java.lang.String = + + + + + catch throw new Object SolrDocument Object public static public static if != + + + for = <= ++ decl_stmt org.apache.solr.common.SolrDocument = - decl_stmt java.lang.Object = - decl_stmt java.lang.Object = call org.apache.solr.common.SolrDocument.get(Object) call org.apache.solr.common.SolrDocument.get(Object) call org.apache.solr.common.SolrDocument.get(Object) call org.apache.solr.common.SolrDocument.get(Object) call org.apache.solr.common.SolrDocument.get(Object) if == && != || != && == || != && != && ! call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) + + + + + + + + public static public static throws File String public static public static throws decl_stmt File = new if ! if != new decl_stmt java.lang.String = + new new new new new new File public static public static throws if ! decl_stmt File = new new public static public static throws File String public static public static throws if ! if new new else new new decl_stmt File = new + + decl_stmt java.lang.String = + new new new new new new new new new new new new new new new new new new new new new new decl Iterator decl Iterator decl Iterator SolrDocument SolrDocument decl Iterator String Object Object String public public if ! instanceof || ! instanceof return if == return decl_stmt org.apache.solr.common.SolrDocument = decl_stmt org.apache.solr.common.SolrDocument = if call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() != call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() return decl_stmt java.util.Iterator < = call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() decl_stmt java.util.Iterator < = call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() call org.apache.solr.common.SolrDocument.getFieldNames() if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.lang.Object = call org.apache.solr.common.SolrDocument.getFieldValues(String) call org.apache.solr.common.SolrDocument.getFieldValues(String) call org.apache.solr.common.SolrDocument.getFieldValues(String) call org.apache.solr.common.SolrDocument.getFieldValues(String) call org.apache.solr.common.SolrDocument.getFieldValues(String) decl_stmt java.lang.Object = call org.apache.solr.common.SolrDocument.getFieldValues(String) call org.apache.solr.common.SolrDocument.getFieldValues(String) call org.apache.solr.common.SolrDocument.getFieldValues(String) call org.apache.solr.common.SolrDocument.getFieldValues(String) call org.apache.solr.common.SolrDocument.getFieldValues(String) if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || ! call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) return if call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() == && call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() == return if call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() == || call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() == return else if call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() != call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() return else decl_stmt java.util.Iterator < = call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() decl_stmt java.util.Iterator < = call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() call org.apache.solr.common.SolrDocument.getChildDocuments() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() if ! call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() return return SolrDocumentList SolrDocumentList public public if ! instanceof || ! instanceof return if == return decl_stmt org.apache.solr.common.SolrDocumentList = decl_stmt org.apache.solr.common.SolrDocumentList = if call org.apache.solr.common.SolrDocumentList.getMaxScore() call org.apache.solr.common.SolrDocumentList.getMaxScore() call org.apache.solr.common.SolrDocumentList.getMaxScore() call org.apache.solr.common.SolrDocumentList.getMaxScore() call org.apache.solr.common.SolrDocumentList.getMaxScore() call org.apache.solr.common.SolrDocumentList.getMaxScore() call org.apache.solr.common.SolrDocumentList.getMaxScore() call org.apache.solr.common.SolrDocumentList.getMaxScore() call org.apache.solr.common.SolrDocumentList.getMaxScore() call org.apache.solr.common.SolrDocumentList.getMaxScore() != || call SolrDocumentList.getNumFound() call SolrDocumentList.getNumFound() call SolrDocumentList.getNumFound() call SolrDocumentList.getNumFound() call SolrDocumentList.getNumFound() != call SolrDocumentList.getNumFound() call SolrDocumentList.getNumFound() call SolrDocumentList.getNumFound() call SolrDocumentList.getNumFound() call SolrDocumentList.getNumFound() || call org.apache.solr.common.SolrDocumentList.getStart() call org.apache.solr.common.SolrDocumentList.getStart() call org.apache.solr.common.SolrDocumentList.getStart() call org.apache.solr.common.SolrDocumentList.getStart() call org.apache.solr.common.SolrDocumentList.getStart() != call org.apache.solr.common.SolrDocumentList.getStart() call org.apache.solr.common.SolrDocumentList.getStart() call org.apache.solr.common.SolrDocumentList.getStart() call org.apache.solr.common.SolrDocumentList.getStart() call org.apache.solr.common.SolrDocumentList.getStart() return for = < call SolrDocumentList.getNumFound() call SolrDocumentList.getNumFound() call SolrDocumentList.getNumFound() call SolrDocumentList.getNumFound() call SolrDocumentList.getNumFound() ++ if ! call SolrDocumentList.get() call SolrDocumentList.get() call SolrDocumentList.get() call SolrDocumentList.get() call SolrDocumentList.get() call SolrDocumentList.get() call SolrDocumentList.get() call SolrDocumentList.get() call SolrDocumentList.get() call SolrDocumentList.get() return return decl Iterator decl Iterator decl Iterator decl Iterator SolrInputDocument SolrInputDocument String Object Object String public public if ! instanceof || ! instanceof return if == return decl_stmt org.apache.solr.common.SolrInputDocument = decl_stmt org.apache.solr.common.SolrInputDocument = if call org.apache.solr.common.SolrInputDocument.getDocumentBoost() call org.apache.solr.common.SolrInputDocument.getDocumentBoost() call org.apache.solr.common.SolrInputDocument.getDocumentBoost() call org.apache.solr.common.SolrInputDocument.getDocumentBoost() call org.apache.solr.common.SolrInputDocument.getDocumentBoost() call org.apache.solr.common.SolrInputDocument.getDocumentBoost() call org.apache.solr.common.SolrInputDocument.getDocumentBoost() call org.apache.solr.common.SolrInputDocument.getDocumentBoost() call org.apache.solr.common.SolrInputDocument.getDocumentBoost() call org.apache.solr.common.SolrInputDocument.getDocumentBoost() != return if call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() != call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() return decl_stmt java.util.Iterator < = call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() decl_stmt java.util.Iterator < = call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() call org.apache.solr.common.SolrInputDocument.getFieldNames() if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.lang.Object = call org.apache.solr.common.SolrInputDocument.getFieldValues(String) call org.apache.solr.common.SolrInputDocument.getFieldValues(String) call org.apache.solr.common.SolrInputDocument.getFieldValues(String) call org.apache.solr.common.SolrInputDocument.getFieldValues(String) call org.apache.solr.common.SolrInputDocument.getFieldValues(String) decl_stmt java.lang.Object = call org.apache.solr.common.SolrInputDocument.getFieldValues(String) call org.apache.solr.common.SolrInputDocument.getFieldValues(String) call org.apache.solr.common.SolrInputDocument.getFieldValues(String) call org.apache.solr.common.SolrInputDocument.getFieldValues(String) call org.apache.solr.common.SolrInputDocument.getFieldValues(String) if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || ! call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) return if call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() == && call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() == return if call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() == || call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() == return else if call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() != call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() return else decl_stmt java.util.Iterator < = call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() decl_stmt java.util.Iterator < = call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() call org.apache.solr.common.SolrInputDocument.getChildDocuments() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() if ! call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() return return SolrInputField SolrInputField public public if ! instanceof || ! instanceof return if == return decl_stmt org.apache.solr.common.SolrInputField = decl_stmt org.apache.solr.common.SolrInputField = if ! call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() call org.apache.solr.common.SolrInputField.getName() return if ! call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() call org.apache.solr.common.SolrInputField.getValue() return if call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() call org.apache.solr.common.SolrInputField.getBoost() != return return public static public static return == : public static public static if return new return new public static public static if return new return new public static public static if return new if return new return new public static public static if return new if return new return new public static public static if return new return new public static public static if return new return new public static public static if return new return new public static public static throws if return new return new public static public static if return new return new public static public static if return new return new public static public static if return new return new public static public static if return new return new public static public static return public static public static return String public static public static decl_stmt java.lang.String = if call java.lang.String.matches(String) call java.lang.String.matches(String) call java.lang.String.matches(String) call java.lang.String.matches(String) call java.lang.String.matches(String) = return decl RefCounted decl RefCounted protected protected throws decl_stmt org.apache.solr.util.RefCounted < = call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() decl_stmt org.apache.solr.util.RefCounted < = call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() while == || call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() != call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() = call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() = call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call org.apache.solr.util.TestHarness.getCore() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() public static public static throws if else public static public static protected static protected static protected static protected static protected static protected static protected static protected static