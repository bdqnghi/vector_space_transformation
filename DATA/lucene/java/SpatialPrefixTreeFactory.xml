org.apache.lucene.spatial.prefix.tree java.util.Map import org.locationtech.spatial4j.context.SpatialContext import org.locationtech.spatial4j.distance.DistanceUtils import class org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory Integer double decl Map SpatialContext String String String SpatialPrefixTreeFactory decl Class String public static public static < decl_stmt org.apache.lucene.spatial.prefix.tree.SpatialPrefixTreeFactory decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call SpatialContext.isGeo() call SpatialContext.isGeo() call SpatialContext.isGeo() call SpatialContext.isGeo() call SpatialContext.isGeo() : if = new else if = new else if = new else try decl_stmt java.lang.Class < = = call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch throw new call SpatialPrefixTreeFactory.init() call SpatialPrefixTreeFactory.init() call SpatialPrefixTreeFactory.init() call SpatialPrefixTreeFactory.init() call SpatialPrefixTreeFactory.init() return call SpatialPrefixTreeFactory.newSPT() call SpatialPrefixTreeFactory.newSPT() call SpatialPrefixTreeFactory.newSPT() call SpatialPrefixTreeFactory.newSPT() call SpatialPrefixTreeFactory.newSPT() protected protected < = = String String double protected protected decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != = return decl_stmt double decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == if ! call SpatialContext.isGeo() call SpatialContext.isGeo() call SpatialContext.isGeo() call SpatialContext.isGeo() call SpatialContext.isGeo() return = else = =