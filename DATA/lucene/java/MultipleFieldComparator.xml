org.apache.solr.client.solrj.io.comp java.io.IOException import java.util.List import java.util.Map import org.apache.solr.client.solrj.io.Tuple import org.apache.solr.client.solrj.io.stream.expr.Expressible import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionParameter import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionValue import org.apache.solr.client.solrj.io.stream.expr.StreamFactory import class org.apache.solr.client.solrj.io.comp.MultipleFieldComparator super super implements decl StreamComparator long public public return int public public for : decl_stmt int = if != return return StringBuilder public public throws decl_stmt java.lang.StringBuilder = new for : if instanceof if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else throw new return new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() MultipleFieldComparator public public if == return if instanceof decl_stmt org.apache.solr.client.solrj.io.comp.MultipleFieldComparator = if >= for = < ++ if ! return return return decl StreamComparator public public < decl_stmt org.apache.solr.client.solrj.io.comp.StreamComparator = new for = < ++ = return new