org.apache.solr.update.processor org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.schema.FieldType import org.apache.solr.schema.IntValueFieldType import org.slf4j.Logger import org.slf4j.LoggerFactory import java.lang.invoke.MethodHandles import java.text.NumberFormat import java.text.ParsePosition import java.util.Locale import class org.apache.solr.update.processor.ParseIntFieldUpdateProcessorFactory super super extends Logger public public return new NumberFormat protected protected decl_stmt java.text.NumberFormat = call java.text.NumberFormat.setParseIntegerOnly(boolean) call java.text.NumberFormat.setParseIntegerOnly(boolean) call java.text.NumberFormat.setParseIntegerOnly(boolean) call java.text.NumberFormat.setParseIntegerOnly(boolean) call java.text.NumberFormat.setParseIntegerOnly(boolean) return String int ParsePosition Number protected protected if instanceof decl_stmt java.lang.String = decl_stmt java.text.ParsePosition = new decl_stmt java.lang.Number = if call java.text.ParsePosition.getIndex() call java.text.ParsePosition.getIndex() call java.text.ParsePosition.getIndex() call java.text.ParsePosition.getIndex() call java.text.ParsePosition.getIndex() != call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() new call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.text.ParsePosition.getIndex() call java.text.ParsePosition.getIndex() call java.text.ParsePosition.getIndex() call java.text.ParsePosition.getIndex() call java.text.ParsePosition.getIndex() return decl_stmt int = call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() call Number.intValue() if call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() == long return call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return if instanceof return return protected protected return instanceof