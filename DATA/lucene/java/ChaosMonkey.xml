org.apache.solr.cloud java.lang.invoke.MethodHandles import java.net.InetSocketAddress import java.util.ArrayList import java.util.HashSet import java.util.List import java.util.Map import java.util.Random import java.util.Set import java.util.concurrent.atomic.AtomicInteger import org.apache.lucene.util.LuceneTestCase import org.apache.solr.client.solrj.SolrClient import org.apache.solr.client.solrj.embedded.JettySolrRunner import org.apache.solr.cloud.AbstractFullDistribZkTestBase.CloudJettyRunner import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.core.CoreContainer import org.apache.solr.core.SolrCore import org.apache.solr.servlet.SolrDispatchFilter import org.apache.solr.update.DirectUpdateHandler2 import org.apache.solr.util.RTimer import org.apache.zookeeper.KeeperException import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.cloud.ChaosMonkey AtomicInteger decl List boolean Boolean Random Boolean ZkStateReader Logger AtomicInteger boolean decl Map decl Map AtomicInteger boolean String Boolean int int Thread AtomicInteger RTimer decl Map ZkTestServer boolean CoreContainer long public public final final + + decl_stmt org.apache.solr.core.CoreContainer = if != decl_stmt long = call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.cloud.ZkTestServer.expire(long) call org.apache.solr.cloud.ZkTestServer.expire(long) call org.apache.solr.cloud.ZkTestServer.expire(long) call org.apache.solr.cloud.ZkTestServer.expire(long) call org.apache.solr.cloud.ZkTestServer.expire(long) String CloudJettyRunner public public throws decl_stmt java.lang.String = decl_stmt CloudJettyRunner = if != call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() String CloudJettyRunner public public throws decl_stmt java.lang.String = decl_stmt CloudJettyRunner = if != call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() SolrZkClient CoreContainer public static public static decl_stmt org.apache.solr.core.CoreContainer = if != decl_stmt org.apache.solr.common.cloud.SolrZkClient = call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() call org.apache.solr.common.cloud.SolrZkClient.getSolrZooKeeper() CloudJettyRunner public public throws decl_stmt CloudJettyRunner = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return public public throws call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() public public throws call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() public public throws call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() SolrDispatchFilter private static private static throws assert != + decl_stmt org.apache.solr.servlet.SolrDispatchFilter = if != try call org.apache.solr.servlet.SolrDispatchFilter.destroy() call org.apache.solr.servlet.SolrDispatchFilter.destroy() call org.apache.solr.servlet.SolrDispatchFilter.destroy() call org.apache.solr.servlet.SolrDispatchFilter.destroy() call org.apache.solr.servlet.SolrDispatchFilter.destroy() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() try catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if ! if ! throw new public static public static < throws for : int CoreContainer public static public static throws decl_stmt org.apache.solr.core.CoreContainer = if != if call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() decl_stmt int = call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() + if ! throw new public static public static throws decl Set decl List Thread decl List public public throws decl_stmt java.util.Set < = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt java.util.List < = new <> call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() for : decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for : decl_stmt java.lang.Thread = new public public try catch throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() for : call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) public public try catch throw new decl Set decl List public public throws decl_stmt java.util.Set < = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() for : decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for : decl List public public throws decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for : decl List public public throws decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for : if ! JettySolrRunner public public throws decl_stmt org.apache.solr.client.solrj.embedded.JettySolrRunner = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return String public public throws decl_stmt java.lang.String = return CloudJettyRunner public public throws decl_stmt CloudJettyRunner = if != return String public public throws decl_stmt java.lang.String = return String decl List decl Map private private decl_stmt java.util.Map < = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl_stmt java.util.List < = new <> call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() return CloudJettyRunner public public throws decl_stmt CloudJettyRunner = if != return int decl List int CoreContainer int int CloudJettyRunner boolean ZkNodeProps boolean public public throws decl_stmt int = = if < return decl_stmt int = for : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if ! call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() ++ if < return decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt CloudJettyRunner if <= && = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() else decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.solr.common.cloud.ZkNodeProps = try = call org.apache.solr.common.cloud.ZkStateReader.getLeaderRetry(String,String) call org.apache.solr.common.cloud.ZkStateReader.getLeaderRetry(String,String) call org.apache.solr.common.cloud.ZkStateReader.getLeaderRetry(String,String) call org.apache.solr.common.cloud.ZkStateReader.getLeaderRetry(String,String) call org.apache.solr.common.cloud.ZkStateReader.getLeaderRetry(String,String) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return decl_stmt boolean decl_stmt org.apache.solr.core.CoreContainer = call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() if != try = call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) if == return = else return decl_stmt boolean = call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() || if ! && return if call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() == - return + call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() call CloudJettyRunner.jetty() return decl Replica ZkNodeProps decl State Slice private private throws for : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl_stmt org.apache.solr.common.cloud.ZkNodeProps = call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() if == throw new + + + call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() decl_stmt sun.security.provider.certpath.State final final final final final = call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) decl_stmt java.lang.String final final = call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) if && == && call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() ++ return public public final final if ! return if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() = = = new = = new public public while ! try call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) catch catch + call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() / + + + + + + call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() + + + call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() public public while ! try call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) catch catch + call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() / + + + + + + call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() + + + public static public static call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + double public public = try call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) catch call org.apache.solr.util.RTimer.stop() call org.apache.solr.util.RTimer.stop() call org.apache.solr.util.RTimer.stop() call org.apache.solr.util.RTimer.stop() call org.apache.solr.util.RTimer.stop() = decl_stmt double = call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() call org.apache.solr.util.RTimer.getTime() / if > && call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() == int CloudJettyRunner JettySolrRunner int public public throws if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.solr.client.solrj.embedded.JettySolrRunner = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call org.apache.solr.client.solrj.embedded.JettySolrRunner.isStopped() call org.apache.solr.client.solrj.embedded.JettySolrRunner.isStopped() call org.apache.solr.client.solrj.embedded.JettySolrRunner.isStopped() call org.apache.solr.client.solrj.embedded.JettySolrRunner.isStopped() call org.apache.solr.client.solrj.embedded.JettySolrRunner.isStopped() && ! return call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() return decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) if && < if && < decl_stmt CloudJettyRunner if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() = else = if == else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() public static public static < throws for : public static public static throws public static public static < throws for : int CoreContainer public static public static throws try catch try catch try catch try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return decl_stmt org.apache.solr.core.CoreContainer = if != if call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() decl_stmt int = call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() return