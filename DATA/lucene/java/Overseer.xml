org.apache.solr.cloud java.io.Closeable import java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.LinkedList import java.util.List import java.util.ListIterator import java.util.Locale import java.util.Map import java.util.Random import java.util.Set import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import org.apache.commons.lang.StringUtils import org.apache.solr.client.solrj.SolrResponse import org.apache.solr.cloud.overseer.ClusterStateMutator import org.apache.solr.cloud.overseer.CollectionMutator import org.apache.solr.cloud.overseer.NodeMutator import org.apache.solr.cloud.overseer.OverseerAction import org.apache.solr.cloud.overseer.ReplicaMutator import org.apache.solr.cloud.overseer.SliceMutator import org.apache.solr.cloud.overseer.ZkStateWriter import org.apache.solr.cloud.overseer.ZkWriteCommand import org.apache.solr.common.SolrException import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.DocCollection import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.params.CollectionParams import org.apache.solr.common.util.IOUtils import org.apache.solr.common.util.Utils import org.apache.solr.core.CloudConfig import org.apache.solr.handler.admin.CollectionsHandler import org.apache.solr.handler.component.ShardHandler import org.apache.solr.update.UpdateShardHandler import org.apache.solr.util.stats.Clock import org.apache.solr.util.stats.Timer import org.apache.solr.util.stats.TimerContext import org.apache.zookeeper.CreateMode import org.apache.zookeeper.KeeperException import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.ONLY_ACTIVE_NODES import static static org.apache.solr.cloud.OverseerCollectionMessageHandler.SHARD_UNIQUE import static static org.apache.solr.common.params.CollectionParams.CollectionAction.BALANCESHARDUNIQUE import class org.apache.solr.cloud.Overseer super super implements String Stats Logger UpdateShardHandler ZkStateReader OverseerCollectionConfigSetProcessor String ShardHandler OverseerThread OverseerThread int CloudConfig OverseerThread boolean String ZkController int public public return public public return ZkStateWriter decl byte boolean ClusterState boolean ZkNodeProps LeaderStatus decl byte public public decl_stmt LeaderStatus = while == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try decl_stmt org.apache.solr.cloud.overseer.ZkStateWriter = decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt boolean = while ! = if == break else if != call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() continue if try call org.apache.solr.common.cloud.ZkStateReader.updateClusterState() call org.apache.solr.common.cloud.ZkStateReader.updateClusterState() call org.apache.solr.common.cloud.ZkStateReader.updateClusterState() call org.apache.solr.common.cloud.ZkStateReader.updateClusterState() call org.apache.solr.common.cloud.ZkStateReader.updateClusterState() = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() = new = decl_stmt byte = decl_stmt boolean = != while != decl_stmt org.apache.solr.common.cloud.ZkNodeProps final final = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = = if = call org.apache.solr.cloud.overseer.ZkStateWriter.writePendingUpdates() call org.apache.solr.cloud.overseer.ZkStateWriter.writePendingUpdates() call org.apache.solr.cloud.overseer.ZkStateWriter.writePendingUpdates() call org.apache.solr.cloud.overseer.ZkStateWriter.writePendingUpdates() call org.apache.solr.cloud.overseer.ZkStateWriter.writePendingUpdates() catch if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() catch return catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() decl_stmt byte = try = catch if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() catch return catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() try while != decl_stmt byte = decl_stmt org.apache.solr.common.cloud.ZkNodeProps final final = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() = new public public throws public public throws while != if break = = call org.apache.solr.cloud.overseer.ZkStateWriter.writePendingUpdates() call org.apache.solr.cloud.overseer.ZkStateWriter.writePendingUpdates() call org.apache.solr.cloud.overseer.ZkStateWriter.writePendingUpdates() call org.apache.solr.cloud.overseer.ZkStateWriter.writePendingUpdates() call org.apache.solr.cloud.overseer.ZkStateWriter.writePendingUpdates() while != catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() = catch if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() = catch return catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() = finally call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) new public public public public throws public public throws while != public public String TimerContext decl List private private throws decl_stmt java.lang.String final final = decl_stmt java.util.List < = decl_stmt org.apache.solr.util.stats.TimerContext final final = call Stats.time() call Stats.time() call Stats.time() call Stats.time() call Stats.time() try = call Stats.success() call Stats.success() call Stats.success() call Stats.success() call Stats.success() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Stats.error() call Stats.error() call Stats.error() call Stats.error() call Stats.error() finally call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() if != for : = if ! = return decl apache decl org decl zookeeper decl data decl Stat private private if != && call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.getCoreContainer() return decl_stmt Stat = new decl_stmt java.lang.String = + decl_stmt byte try = catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return try decl_stmt java.util.Map = decl_stmt java.lang.String = call decl data.get() call decl data.get() call decl data.get() call decl data.get() call decl data.get() if call OverseerCollectionConfigSetProcessor.getId() call OverseerCollectionConfigSetProcessor.getId() call OverseerCollectionConfigSetProcessor.getId() call OverseerCollectionConfigSetProcessor.getId() call OverseerCollectionConfigSetProcessor.getId() try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl org.getVersion() call decl org.getVersion() call decl org.getVersion() call decl org.getVersion() call decl org.getVersion() catch catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) finally try if != && ! call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.rejoinOverseerElection(String,boolean) call org.apache.solr.cloud.ZkController.rejoinOverseerElection(String,boolean) call org.apache.solr.cloud.ZkController.rejoinOverseerElection(String,boolean) call org.apache.solr.cloud.ZkController.rejoinOverseerElection(String,boolean) call org.apache.solr.cloud.ZkController.rejoinOverseerElection(String,boolean) catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() String decl CollectionParams ExclusiveSliceProperty decl CollectionAction private < private < final final final final decl_stmt CollectionAction = if != switch case return new case return new case return new case return new case return new case return new case return new case decl_stmt ExclusiveSliceProperty = new if call decl CollectionAction.balanceProperty() call decl CollectionAction.balanceProperty() call decl CollectionAction.balanceProperty() call decl CollectionAction.balanceProperty() call decl CollectionAction.balanceProperty() decl_stmt java.lang.String = return new call decl CollectionAction.getDocCollection() call decl CollectionAction.getDocCollection() call decl CollectionAction.getDocCollection() call decl CollectionAction.getDocCollection() call decl CollectionAction.getDocCollection() break case call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.getCoreContainer() call org.apache.solr.cloud.ZkController.getCoreContainer() return new case return new default: throw new + + + else decl_stmt OverseerAction = if == throw new + + + switch case return new case return new case return new case return new case return new case return new case if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call OverseerCollectionConfigSetProcessor.close() call OverseerCollectionConfigSetProcessor.close() call OverseerCollectionConfigSetProcessor.close() call OverseerCollectionConfigSetProcessor.close() call OverseerCollectionConfigSetProcessor.close() else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() break case return new default: throw new + + + return TimerContext boolean ZkNodeProps private private decl_stmt org.apache.solr.util.stats.TimerContext = call Stats.time() call Stats.time() call Stats.time() call Stats.time() call Stats.time() decl_stmt boolean = try decl_stmt org.apache.solr.common.cloud.ZkNodeProps = + if call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) return catch = if == call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return else if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch = finally call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() call TimerContext.stop() if call Stats.success() call Stats.success() call Stats.success() call Stats.success() call Stats.success() else call Stats.error() call Stats.error() call Stats.error() call Stats.error() call Stats.error() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + return public public = private private return private private return == int int boolean decl Set String private private decl_stmt int = decl_stmt java.util.Set < = new <> for : decl_stmt boolean = for : if && == if continue call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt java.lang.String = if if throw new + + + if == new < new ++ = = if == new < new = / call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() = call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() if > ++ if != return decl_stmt int = for < : if == -- if == return return SliceReplica decl ListIterator private private for < < : decl_stmt java.util.ListIterator < = while call decl ListIterator.hasNext() call decl ListIterator.hasNext() call decl ListIterator.hasNext() call decl ListIterator.hasNext() call decl ListIterator.hasNext() decl_stmt SliceReplica = call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() if call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call decl ListIterator.remove() call decl ListIterator.remove() call decl ListIterator.remove() call decl ListIterator.remove() call decl ListIterator.remove() int SliceReplica SliceReplica String decl ListIterator private private = = while > decl_stmt java.lang.String = decl_stmt int = decl_stmt SliceReplica = for : for < < : if == && > = decl_stmt java.util.ListIterator < = while call decl ListIterator.hasNext() call decl ListIterator.hasNext() call decl ListIterator.hasNext() call decl ListIterator.hasNext() call decl ListIterator.hasNext() decl_stmt SliceReplica = call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() if call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() == continue if == new < if > && < = = = call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() if == new < call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.replica() call SliceReplica.replica() call SliceReplica.replica() call SliceReplica.replica() call SliceReplica.replica() call SliceReplica.replica() call SliceReplica.replica() call SliceReplica.replica() call SliceReplica.replica() private private < if == if < return -- if == -- -- private private = = for < < : while > private private private private Replica Slice private private decl_stmt org.apache.solr.common.cloud.Slice = decl_stmt org.apache.solr.common.cloud.Replica if != = call Slice.getReplica() call Slice.getReplica() call Slice.getReplica() call Slice.getReplica() call Slice.getReplica() else = new = call Slice.getReplica() call Slice.getReplica() call Slice.getReplica() call Slice.getReplica() call Slice.getReplica() if == throw new + + + + return SliceReplica decl ListIterator DocCollection private private if == return for < < : for : for < < : decl_stmt java.util.ListIterator < = while call decl ListIterator.hasNext() call decl ListIterator.hasNext() call decl ListIterator.hasNext() call decl ListIterator.hasNext() call decl ListIterator.hasNext() decl_stmt SliceReplica = call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() call decl ListIterator.next() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() call SliceReplica.slice() for : decl_stmt org.apache.solr.common.cloud.DocCollection = = return public public throws = public public return ThreadGroup ThreadGroup OverseerAutoReplicaFailoverThread ThreadGroup OverseerNodePrioritizer public synchronized public synchronized = = = new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() decl_stmt java.lang.ThreadGroup = new = new new + call OverseerThread.setDaemon() call OverseerThread.setDaemon() call OverseerThread.setDaemon() call OverseerThread.setDaemon() call OverseerThread.setDaemon() decl_stmt java.lang.ThreadGroup = new decl_stmt org.apache.solr.cloud.OverseerNodePrioritizer = new call ShardHandler.getShardHandlerFactory() call ShardHandler.getShardHandlerFactory() call ShardHandler.getShardHandlerFactory() call ShardHandler.getShardHandlerFactory() call ShardHandler.getShardHandlerFactory() = new = new + call OverseerThread.setDaemon() call OverseerThread.setDaemon() call OverseerThread.setDaemon() call OverseerThread.setDaemon() call OverseerThread.setDaemon() decl_stmt java.lang.ThreadGroup = new decl_stmt org.apache.solr.cloud.OverseerAutoReplicaFailoverThread = new = new + call OverseerThread.setDaemon() call OverseerThread.setDaemon() call OverseerThread.setDaemon() call OverseerThread.setDaemon() call OverseerThread.setDaemon() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() call OverseerThread.start() public public return return public synchronized public synchronized return public synchronized public synchronized if return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + = private private if != call OverseerThread.interrupt() call OverseerThread.interrupt() call OverseerThread.interrupt() call OverseerThread.interrupt() call OverseerThread.interrupt() if != call OverseerThread.interrupt() call OverseerThread.interrupt() call OverseerThread.interrupt() call OverseerThread.interrupt() call OverseerThread.interrupt() if != call OverseerThread.interrupt() call OverseerThread.interrupt() call OverseerThread.interrupt() call OverseerThread.interrupt() call OverseerThread.interrupt() = = = public static public static final final return new static static final final return new static static final final return new static static final final return new static static final final return new static static final final return new static static final final return new static static final final return new static static final final return new static static final final return private static private static final final try new catch catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new public static public static return ! public public return public < public < return Stat public public decl_stmt Stat = call Stats.get() call Stats.get() call Stats.get() call Stats.get() call Stats.get() return == : call Stat.success() call Stat.success() call Stat.success() call Stat.success() call Stat.success() call Stat.success() call Stat.success() call Stat.success() call Stat.success() Stat public public decl_stmt Stat = call Stats.get() call Stats.get() call Stats.get() call Stats.get() call Stats.get() return == : call Stat.errors() call Stat.errors() call Stat.errors() call Stat.errors() call Stat.errors() call Stat.errors() call Stat.errors() call Stat.errors() call Stat.errors() Stat String public public decl_stmt java.lang.String = decl_stmt Stat = call Stats.get() call Stats.get() call Stats.get() call Stats.get() call Stats.get() if == = new call Stats.put() call Stats.put() call Stats.put() call Stats.put() call Stats.put() call Stat.success() call Stat.success() call Stat.success() call Stat.success() call Stat.success() call Stat.success() call Stat.success() call Stat.success() call Stat.success() Stat String public public decl_stmt java.lang.String = decl_stmt Stat = call Stats.get() call Stats.get() call Stats.get() call Stats.get() call Stats.get() if == = new call Stats.put() call Stats.put() call Stats.put() call Stats.put() call Stats.put() call Stat.errors() call Stat.errors() call Stat.errors() call Stat.errors() call Stat.errors() call Stat.errors() call Stat.errors() call Stat.errors() call Stat.errors() Stat String public public decl_stmt java.lang.String = decl_stmt Stat = call Stats.get() call Stats.get() call Stats.get() call Stats.get() call Stats.get() if == = new call Stats.put() call Stats.put() call Stats.put() call Stats.put() call Stats.put() return call Stat.requestTime() call Stat.requestTime() call Stat.requestTime() call Stat.requestTime() call Stat.requestTime() call Stat.requestTime() call Stat.requestTime() call Stat.requestTime() call Stat.requestTime() decl LinkedList Stat String public public decl_stmt java.lang.String = decl_stmt Stat = call Stats.get() call Stats.get() call Stats.get() call Stats.get() call Stats.get() if == = new call Stats.put() call Stats.put() call Stats.put() call Stats.put() call Stats.put() decl_stmt java.util.LinkedList < = synchronized if call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() >= call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.addLast() call decl LinkedList.addLast() call decl LinkedList.addLast() call decl LinkedList.addLast() call decl LinkedList.addLast() new decl LinkedList Stat decl ArrayList public < public < decl_stmt Stat = call Stats.get() call Stats.get() call Stats.get() call Stats.get() call Stats.get() if == || call Stat.failureDetails() call Stat.failureDetails() call Stat.failureDetails() call Stat.failureDetails() call Stat.failureDetails() call Stat.failureDetails() call Stat.failureDetails() call Stat.failureDetails() call Stat.failureDetails() return decl_stmt java.util.LinkedList < = synchronized decl_stmt java.util.ArrayList < = new <> return public public return public public = public public call Stats.clear() call Stats.clear() call Stats.clear() call Stats.clear() call Stats.clear()