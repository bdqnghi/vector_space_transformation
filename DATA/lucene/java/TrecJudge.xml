org.apache.lucene.benchmark.quality.trec java.io.BufferedReader import java.io.IOException import java.io.PrintWriter import java.util.ArrayList import java.util.HashMap import java.util.StringTokenizer import org.apache.lucene.benchmark.quality.Judge import org.apache.lucene.benchmark.quality.QualityQuery import class org.apache.lucene.benchmark.quality.trec.TrecJudge super super implements decl HashMap QRelJudgement public public decl_stmt QRelJudgement = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() return != && call QRelJudgement.isRelevant() call QRelJudgement.isRelevant() call QRelJudgement.isRelevant() call QRelJudgement.isRelevant() call QRelJudgement.isRelevant() public public return public public return decl ArrayList String decl HashMap boolean public public decl_stmt HashMap < = new <> decl_stmt java.util.ArrayList < = new <> for = < ++ decl_stmt java.lang.String = if call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.remove() call decl HashMap.remove() call decl HashMap.remove() call decl HashMap.remove() call decl HashMap.remove() else call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() decl_stmt boolean = if call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() > = if != + call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() + for = < call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() ++ + call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() call decl ArrayList.get() if call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() > = if != + call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() call decl HashMap.size() + for final final : call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() + return QRelJudgement public public decl_stmt QRelJudgement = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() if != return call QRelJudgement.maxRecall() call QRelJudgement.maxRecall() call QRelJudgement.maxRecall() call QRelJudgement.maxRecall() call QRelJudgement.maxRecall() return