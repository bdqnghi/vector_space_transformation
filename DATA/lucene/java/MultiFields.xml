org.apache.lucene.index java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.HashSet import java.util.Iterator import java.util.List import java.util.Map import java.util.concurrent.ConcurrentHashMap import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.MergedIterator import class org.apache.lucene.index.MultiFields super super extends decl ReaderSlice decl Map decl Fields decl List decl List LeafReader Fields decl List public static public static throws decl_stmt java.util.List final final final < = switch call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() case return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() default: decl_stmt java.util.List final final final < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.util.List final final final < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for final final : decl_stmt org.apache.lucene.index.LeafReader final final = decl_stmt Fields final final = call LeafReader.fields() call LeafReader.fields() call LeafReader.fields() call LeafReader.fields() call LeafReader.fields() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call LeafReader.maxDoc() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() decl int decl List decl Bits LeafReaderContext int public static public static if decl_stmt java.util.List final final final < = decl_stmt int final final = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() assert > : if == return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.util.Bits final final final = new decl_stmt int final final final = new + for = < ++ decl_stmt org.apache.lucene.index.LeafReaderContext final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() = = return new else return public static public static throws return public static public static throws return Terms TermsEnum public static public static throws assert != assert != decl_stmt org.apache.lucene.index.Terms final final = if != decl_stmt org.apache.lucene.index.TermsEnum final final = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() if call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) return call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) return public static public static throws return Terms TermsEnum public static public static throws assert != assert != decl_stmt org.apache.lucene.index.Terms final final = if != decl_stmt org.apache.lucene.index.TermsEnum final final = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() if call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) return call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) return decl Iterator public < public < decl_stmt java.util.Iterator < = new for = < ++ = return new <> Terms decl List Terms decl List public public throws decl_stmt org.apache.lucene.index.Terms = call Terms.get() call Terms.get() call Terms.get() call Terms.get() call Terms.get() if != return decl_stmt java.util.List final final final < = new <> decl_stmt java.util.List final final final < = new <> for = < ++ decl_stmt org.apache.lucene.index.Terms final final = if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == = else = new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call Terms.put() call Terms.put() call Terms.put() call Terms.put() call Terms.put() return public public return - decl FieldInfos public static public static decl_stmt org.apache.lucene.util.fst.Builder final final final final final = new for final final : call decl FieldInfos.add() call decl FieldInfos.add() call decl FieldInfos.add() call decl FieldInfos.add() call decl FieldInfos.add() return call decl FieldInfos.finish() call decl FieldInfos.finish() call decl FieldInfos.finish() call decl FieldInfos.finish() call decl FieldInfos.finish() decl Collection public static < public static < decl_stmt java.util.Collection final final final < = new <> for final final : if != call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() return