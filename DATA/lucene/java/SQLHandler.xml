org.apache.solr.handler java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collections import java.util.HashSet import java.util.Iterator import java.util.Locale import java.util.Set import com.facebook.presto.sql.tree.* import com.google.common.base.Strings import com.google.common.collect.Iterables import org.apache.solr.client.solrj.impl.CloudSolrClient import org.apache.solr.client.solrj.io.Tuple import org.apache.solr.client.solrj.io.comp.ComparatorOrder import org.apache.solr.client.solrj.io.comp.FieldComparator import org.apache.solr.client.solrj.io.comp.MultipleFieldComparator import org.apache.solr.client.solrj.io.comp.StreamComparator import org.apache.solr.client.solrj.io.eq.FieldEqualitor import org.apache.solr.client.solrj.io.eq.MultipleFieldEqualitor import org.apache.solr.client.solrj.io.eq.StreamEqualitor import org.apache.solr.client.solrj.io.stream.CloudSolrStream import org.apache.solr.client.solrj.io.stream.FacetStream import org.apache.solr.client.solrj.io.stream.ParallelStream import org.apache.solr.client.solrj.io.stream.RankStream import org.apache.solr.client.solrj.io.stream.RollupStream import org.apache.solr.client.solrj.io.stream.SelectStream import org.apache.solr.client.solrj.io.stream.StatsStream import org.apache.solr.client.solrj.io.stream.StreamContext import org.apache.solr.client.solrj.io.stream.TupleStream import org.apache.solr.client.solrj.io.stream.ExceptionStream import org.apache.solr.client.solrj.io.stream.UniqueStream import org.apache.solr.client.solrj.io.stream.expr.StreamFactory import org.apache.solr.client.solrj.io.stream.metrics.* import org.apache.solr.common.SolrException import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.SolrParams import org.apache.solr.core.CoreContainer import org.apache.solr.core.SolrCore import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.security.AuthorizationContext import org.apache.solr.security.PermissionNameProvider import org.apache.solr.util.plugin.SolrCoreAware import java.util.List import java.util.Map import java.util.HashMap import org.slf4j.Logger import org.slf4j.LoggerFactory import com.facebook.presto.sql.parser.SqlParser import class org.apache.solr.handler.SQLHandler super super extends super implements String String Logger decl List CoreContainer public public decl_stmt org.apache.solr.core.CoreContainer = if call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() = = public public return boolean String String String SolrParams String StreamContext int TupleStream public public throws decl_stmt org.apache.solr.common.params.SolrParams = = decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt int = call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt org.apache.solr.client.solrj.io.stream.StreamContext = new decl_stmt boolean = call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) try if == throw new call org.apache.solr.client.solrj.io.stream.StreamContext.setSolrClientCache(SolrClientCache) call org.apache.solr.client.solrj.io.stream.StreamContext.setSolrClientCache(SolrClientCache) call org.apache.solr.client.solrj.io.stream.StreamContext.setSolrClientCache(SolrClientCache) call org.apache.solr.client.solrj.io.stream.StreamContext.setSolrClientCache(SolrClientCache) call org.apache.solr.client.solrj.io.stream.StreamContext.setSolrClientCache(SolrClientCache) decl_stmt org.apache.solr.client.solrj.io.stream.TupleStream = new new catch new ModifiableSolrParams private private decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) return public public return public public return SqlParser SQLVisitor TupleStream Statement public static public static throws decl_stmt SqlParser = new decl_stmt sun.tools.tree.Statement = call SqlParser.createStatement() call SqlParser.createStatement() call SqlParser.createStatement() call SqlParser.createStatement() call SqlParser.createStatement() decl_stmt SQLVisitor = new new call SQLVisitor.process() call SQLVisitor.process() call SQLVisitor.process() call SQLVisitor.process() call SQLVisitor.process() new call SQLVisitor.reverseAliases() call SQLVisitor.reverseAliases() call SQLVisitor.reverseAliases() call SQLVisitor.reverseAliases() call SQLVisitor.reverseAliases() decl_stmt org.apache.solr.client.solrj.io.stream.TupleStream = if call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() = new new else if call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() = new new else if call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() call SQLVisitor.table() = new new else if if == = else = = else if if == = else = = else = if = new call TupleStream.setStreamContext() call TupleStream.setStreamContext() call TupleStream.setStreamContext() call TupleStream.setStreamContext() call TupleStream.setStreamContext() return String decl Set String int CloudSolrStream decl Bucket StreamFactory String decl Metric String TableSpec TupleStream decl Map StreamComparator ParallelStream String private static private static throws decl_stmt java.util.Set < = new decl_stmt org.apache.solr.client.solrj.io.stream.metrics.Bucket = decl_stmt org.apache.solr.client.solrj.io.stream.metrics.Metric = if == throw new decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt TableSpec = new decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.util.Map < = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if > call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.client.solrj.io.stream.TupleStream = decl_stmt org.apache.solr.client.solrj.io.stream.CloudSolrStream = new = new if > decl_stmt org.apache.solr.client.solrj.io.comp.StreamComparator = decl_stmt org.apache.solr.client.solrj.io.stream.ParallelStream = new decl_stmt org.apache.solr.client.solrj.io.stream.expr.StreamFactory = new call org.apache.solr.client.solrj.io.stream.ParallelStream.setStreamFactory(StreamFactory) call org.apache.solr.client.solrj.io.stream.ParallelStream.setStreamFactory(StreamFactory) call org.apache.solr.client.solrj.io.stream.ParallelStream.setStreamFactory(StreamFactory) call org.apache.solr.client.solrj.io.stream.ParallelStream.setStreamFactory(StreamFactory) call org.apache.solr.client.solrj.io.stream.ParallelStream.setStreamFactory(StreamFactory) = if != = new if != && > if ! decl_stmt int = == - : decl_stmt org.apache.solr.client.solrj.io.comp.StreamComparator = = new else if > - = new if = new return decl StreamComparator decl FieldEqualitor StreamEqualitor decl Set String StringBuilder StreamFactory TableSpec TupleStream CloudSolrStream String StreamComparator decl Bucket String decl Metric ParallelStream decl FieldEqualitor decl StreamComparator StringBuilder FieldComparator decl Map String private static private static throws decl_stmt java.util.Set < = new decl_stmt org.apache.solr.client.solrj.io.stream.metrics.Bucket = decl_stmt org.apache.solr.client.solrj.io.stream.metrics.Metric = if > throw new decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt org.apache.solr.client.solrj.io.eq.StreamEqualitor = decl_stmt org.apache.solr.client.solrj.io.comp.StreamComparator = if != && > decl_stmt org.apache.solr.client.solrj.io.comp.StreamComparator = decl_stmt org.apache.solr.client.solrj.io.eq.FieldEqualitor = new decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt org.apache.lucene.search.FieldComparator = = new call org.apache.lucene.search.FieldComparator.getLeftFieldName() call org.apache.lucene.search.FieldComparator.getLeftFieldName() call org.apache.lucene.search.FieldComparator.getLeftFieldName() call org.apache.lucene.search.FieldComparator.getLeftFieldName() call org.apache.lucene.search.FieldComparator.getLeftFieldName() if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.lucene.search.FieldComparator.getLeftFieldName() call org.apache.lucene.search.FieldComparator.getLeftFieldName() call org.apache.lucene.search.FieldComparator.getLeftFieldName() call org.apache.lucene.search.FieldComparator.getLeftFieldName() call org.apache.lucene.search.FieldComparator.getLeftFieldName() call org.apache.lucene.search.FieldComparator.getOrder() call org.apache.lucene.search.FieldComparator.getOrder() call org.apache.lucene.search.FieldComparator.getOrder() call org.apache.lucene.search.FieldComparator.getOrder() call org.apache.lucene.search.FieldComparator.getOrder() = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if == = = else = new = new else decl_stmt java.lang.StringBuilder = new decl_stmt org.apache.solr.client.solrj.io.eq.FieldEqualitor = new decl_stmt org.apache.solr.client.solrj.io.comp.StreamComparator = new for = < ++ = new = new if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if == = = else = new = new decl_stmt TableSpec = new decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.util.Map < = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if > call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.client.solrj.io.stream.TupleStream = decl_stmt org.apache.solr.client.solrj.io.stream.CloudSolrStream = new = new if > decl_stmt org.apache.solr.client.solrj.io.stream.ParallelStream = new decl_stmt org.apache.solr.client.solrj.io.stream.expr.StreamFactory = new call org.apache.solr.client.solrj.io.stream.ParallelStream.setStreamFactory(StreamFactory) call org.apache.solr.client.solrj.io.stream.ParallelStream.setStreamFactory(StreamFactory) call org.apache.solr.client.solrj.io.stream.ParallelStream.setStreamFactory(StreamFactory) call org.apache.solr.client.solrj.io.stream.ParallelStream.setStreamFactory(StreamFactory) call org.apache.solr.client.solrj.io.stream.ParallelStream.setStreamFactory(StreamFactory) = if > = new if = new return decl List decl Set String decl Set String private static private static < < throws decl_stmt java.util.List < = new decl_stmt java.util.Set < = new decl_stmt java.util.Set < = new for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() for : decl_stmt java.lang.String = if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() throw new if < for : decl_stmt java.lang.String = if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl Set String decl Bucket int String decl Metric decl StreamComparator TableSpec TupleStream decl Map decl FieldComparator private static private static throws decl_stmt java.util.Set < = new decl_stmt org.apache.solr.client.solrj.io.stream.metrics.Bucket = decl_stmt org.apache.solr.client.solrj.io.stream.metrics.Metric = if > throw new decl_stmt TableSpec = new decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.util.Map < = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt int = > : decl_stmt org.apache.lucene.search.FieldComparator = if == = new for = < ++ = new else decl_stmt org.apache.solr.client.solrj.io.comp.StreamComparator = = new for = < ++ = decl_stmt org.apache.solr.client.solrj.io.stream.TupleStream = new if > = new return new decl Set String decl Bucket int String decl Metric TableSpec TupleStream decl Map decl FieldComparator private static private static throws decl_stmt java.util.Set < = new decl_stmt org.apache.solr.client.solrj.io.stream.metrics.Bucket = decl_stmt org.apache.solr.client.solrj.io.stream.metrics.Metric = if == throw new decl_stmt TableSpec = new decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.util.Map < = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt int = > : decl_stmt org.apache.lucene.search.FieldComparator = if == = new for = < ++ = new else = decl_stmt org.apache.solr.client.solrj.io.stream.TupleStream = new if != = new if > = new if = new return TupleStream decl Set String decl List StringBuilder String decl Metric boolean StringBuilder decl Map TableSpec boolean decl List String private static private static throws decl_stmt java.util.List < = decl_stmt java.util.Set < = new decl_stmt org.apache.solr.client.solrj.io.stream.metrics.Metric = if > return decl_stmt java.lang.StringBuilder = new decl_stmt boolean = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == throw new decl_stmt TableSpec = new decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt boolean = for : if throw new if throw new if if < throw new else = if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.util.List < = decl_stmt java.lang.StringBuilder = new = if != for : if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + else if < call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = + else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if ! = + decl_stmt java.util.Map < = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt org.apache.solr.client.solrj.io.stream.TupleStream if > - call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = new new else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = new return new SortItem Bucket private static private static < < if != return for = < ++ decl_stmt org.apache.solr.client.solrj.io.stream.metrics.Bucket = decl_stmt SortItem = if ! call Bucket.toString() call Bucket.toString() call Bucket.toString() call Bucket.toString() call Bucket.toString() return if ! call SortItem.getOrdering() call SortItem.getOrdering() call SortItem.getOrdering() call SortItem.getOrdering() call SortItem.getOrdering() return return decl Map TableSpec String String TupleStream private static private static throws if != throw new decl_stmt TableSpec = new decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.util.Map < = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.client.solrj.io.stream.TupleStream = new if = new return boolean StringBuilder private static private static decl_stmt java.lang.StringBuilder = new decl_stmt boolean = for : if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() boolean StringBuilder private static private static decl_stmt java.lang.StringBuilder = new decl_stmt boolean = for : if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() private static private static < if != && > for : return return decl FieldComparator ComparatorOrder String private static private static decl_stmt org.apache.lucene.search.FieldComparator = new for = < ++ decl_stmt ComparatorOrder = decl_stmt java.lang.String = = new if == return else return new String decl FieldComparator ComparatorOrder String SortItem private static private static < < decl_stmt org.apache.lucene.search.FieldComparator = new for = < ++ decl_stmt SortItem = decl_stmt java.lang.String = call SortItem.getOrdering() call SortItem.getOrdering() call SortItem.getOrdering() call SortItem.getOrdering() call SortItem.getOrdering() decl_stmt ComparatorOrder = decl_stmt java.lang.String = = new if == return else return new String decl FieldComparator ComparatorOrder String SortItem private static private static < < decl_stmt org.apache.lucene.search.FieldComparator = new for = < ++ decl_stmt SortItem = decl_stmt java.lang.String = call SortItem.getOrdering() call SortItem.getOrdering() call SortItem.getOrdering() call SortItem.getOrdering() call SortItem.getOrdering() decl_stmt ComparatorOrder = decl_stmt java.lang.String = = new return boolean StringBuilder private static private static < decl_stmt java.lang.StringBuilder = new decl_stmt boolean = for : if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl List String decl String String private static private static < < throws decl_stmt java.util.List < = new for : if = - decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() private static private static throws if || || || || return else throw new + decl List String private static private static < < decl_stmt java.util.List < = new for : decl_stmt java.lang.String = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() private static private static if return else return private static private static if return else return char StringBuilder private static private static decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt char = if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() char StringBuilder private static private static decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt char = if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() protected protected return protected protected return String String protected protected decl_stmt java.lang.String = decl_stmt java.lang.String = = if ! call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) && ! call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = + + + + return protected protected throw new + decl List protected protected for : decl_stmt java.util.List < = new for : if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = protected protected return WithQuery With Iterator protected protected if decl_stmt With = if call With.isRecursive() call With.isRecursive() call With.isRecursive() call With.isRecursive() call With.isRecursive() decl_stmt java.util.Iterator = call With.getQueries() call With.getQueries() call With.getQueries() call With.getQueries() call With.getQueries() while call Iterator.hasNext() call Iterator.hasNext() call Iterator.hasNext() call Iterator.hasNext() call Iterator.hasNext() decl_stmt WithQuery = call java.util.Iterator.next() call java.util.Iterator.next() call java.util.Iterator.next() call java.util.Iterator.next() call java.util.Iterator.next() new call WithQuery.getQuery() call WithQuery.getQuery() call WithQuery.getQuery() call WithQuery.getQuery() call WithQuery.getQuery() if call Iterator.hasNext() call Iterator.hasNext() call Iterator.hasNext() call Iterator.hasNext() call Iterator.hasNext() if ! = if if return ExpressionVisitor StringBuilder Expression decl List protected protected if if decl_stmt org.apache.solr.analytics.expression.Expression = decl_stmt ExpressionVisitor = new decl_stmt java.lang.StringBuilder = new call ExpressionVisitor.process() call ExpressionVisitor.process() call ExpressionVisitor.process() call ExpressionVisitor.process() call ExpressionVisitor.process() = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if ! = decl_stmt java.util.List < = for : if = if ! = if = return String String protected protected decl_stmt java.lang.String = decl_stmt java.lang.String = = + + return SelectItem boolean protected protected if = if > decl_stmt boolean = for = = decl_stmt SelectItem = else return String decl List StringLiteral String decl List FunctionCall Expression QualifiedNameReference String protected protected decl_stmt org.apache.solr.analytics.expression.Expression = decl_stmt java.lang.String = if instanceof decl_stmt QualifiedNameReference = decl_stmt java.util.List < = call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else if instanceof decl_stmt FunctionCall = decl_stmt java.util.List < = call FunctionCall.getName() call FunctionCall.getName() call FunctionCall.getName() call FunctionCall.getName() call FunctionCall.getName() decl_stmt java.util.List < = call FunctionCall.getArguments() call FunctionCall.getArguments() call FunctionCall.getArguments() call FunctionCall.getArguments() call FunctionCall.getArguments() decl_stmt java.lang.String = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > && call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() instanceof decl_stmt QualifiedNameReference = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + + + else = call FunctionCall.toString() call FunctionCall.toString() call FunctionCall.toString() call FunctionCall.toString() call FunctionCall.toString() else if instanceof decl_stmt StringLiteral = = call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() if decl_stmt java.lang.String = = else return protected protected return protected protected = return protected protected return Expression boolean protected protected decl_stmt boolean = for = = decl_stmt org.apache.solr.analytics.expression.Expression = return private private if instanceof else private private return private static private static return decl List StringLiteral String decl List FunctionCall Expression QualifiedNameReference String private static private static < decl_stmt java.lang.String decl_stmt org.apache.solr.analytics.expression.Expression = if instanceof decl_stmt QualifiedNameReference = decl_stmt java.util.List < = call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else if instanceof decl_stmt FunctionCall = decl_stmt java.util.List < = call FunctionCall.getName() call FunctionCall.getName() call FunctionCall.getName() call FunctionCall.getName() call FunctionCall.getName() decl_stmt java.util.List < = call FunctionCall.getArguments() call FunctionCall.getArguments() call FunctionCall.getArguments() call FunctionCall.getArguments() call FunctionCall.getArguments() decl_stmt java.lang.String = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > && call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() instanceof decl_stmt QualifiedNameReference = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + + + else = call FunctionCall.toString() call FunctionCall.toString() call FunctionCall.toString() call FunctionCall.toString() call FunctionCall.toString() else decl_stmt StringLiteral = = call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() if = return decl List StringLiteral String decl List FunctionCall QualifiedNameReference String private static private static decl_stmt java.lang.String if instanceof decl_stmt QualifiedNameReference = decl_stmt java.util.List < = call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else if instanceof decl_stmt FunctionCall = decl_stmt java.util.List < = call FunctionCall.getName() call FunctionCall.getName() call FunctionCall.getName() call FunctionCall.getName() call FunctionCall.getName() decl_stmt java.util.List < = call FunctionCall.getArguments() call FunctionCall.getArguments() call FunctionCall.getArguments() call FunctionCall.getArguments() call FunctionCall.getArguments() decl_stmt java.lang.String = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > && call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() instanceof decl_stmt QualifiedNameReference = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + + + else = call FunctionCall.toString() call FunctionCall.toString() call FunctionCall.toString() call FunctionCall.toString() call FunctionCall.toString() else decl_stmt StringLiteral = = call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() return String decl List QualifiedNameReference StringLiteral private static private static decl_stmt java.lang.String if instanceof decl_stmt QualifiedNameReference = decl_stmt java.util.List < = call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else decl_stmt StringLiteral = = call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() return String decl List QualifiedNameReference StringLiteral private static private static decl_stmt java.lang.String if instanceof decl_stmt QualifiedNameReference = decl_stmt java.util.List < = call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() call QualifiedNameReference.getName() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else decl_stmt StringLiteral = = call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() call StringLiteral.toString() return public public throws public public throws decl List public < public < decl_stmt java.util.List < = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return public public Map Tuple public public throws ++ if > decl_stmt java.util.Map = new call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) return new decl_stmt org.apache.solr.client.solrj.io.Tuple = return public static public static throws if return else if return else throw new + public public throws public public throws public public return decl List public < public < decl_stmt java.util.List < = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public Tuple public public throws while decl_stmt org.apache.solr.client.solrj.io.Tuple = if return if return public < public < return new <> public public throws = new <> decl Map public public throws decl_stmt java.util.Map < = new <> if < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() += else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return new public public return public public throws public public = public < public < return new <> public public throws decl Map public public throws decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return new public public return public public throws public public = public < public < return new <> ZkStateReader CloudSolrClient public public throws = new <> decl_stmt org.apache.solr.client.solrj.impl.CloudSolrClient = call org.apache.solr.client.solrj.impl.CloudSolrClient.connect() call org.apache.solr.client.solrj.impl.CloudSolrClient.connect() call org.apache.solr.client.solrj.impl.CloudSolrClient.connect() call org.apache.solr.client.solrj.impl.CloudSolrClient.connect() call org.apache.solr.client.solrj.impl.CloudSolrClient.connect() decl_stmt org.apache.solr.common.cloud.ZkStateReader = call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() if call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() != call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl Map public public throws decl_stmt java.util.Map < = new <> if < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() += else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return new public public return public public throws public public = public < public < return public public throws Map public public throws if = decl_stmt java.util.Map = new <> call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) return new return public public return public public throws public public Boolean protected protected decl_stmt java.lang.Boolean = if == if ! return else return else if return else return String double double decl ComparisonExpression protected protected decl_stmt java.lang.String = if = decl_stmt double = decl_stmt double = decl_stmt sun.tools.java.Type = switch case return < case return <= case return != case return == case return > case return >= default: return