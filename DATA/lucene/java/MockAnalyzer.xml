org.apache.lucene.analysis java.io.Reader import java.util.HashMap import java.util.Map import java.util.Random import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.automaton.CharacterRunAutomaton import class org.apache.lucene.analysis.MockAnalyzer super super extends boolean decl Map int Random Integer CharacterRunAutomaton CharacterRunAutomaton boolean int MockTokenizer MockTokenFilter public public decl_stmt org.apache.lucene.analysis.MockTokenizer = new call org.apache.lucene.analysis.MockTokenizer.setEnableChecks(boolean) call org.apache.lucene.analysis.MockTokenizer.setEnableChecks(boolean) call org.apache.lucene.analysis.MockTokenizer.setEnableChecks(boolean) call org.apache.lucene.analysis.MockTokenizer.setEnableChecks(boolean) call org.apache.lucene.analysis.MockTokenizer.setEnableChecks(boolean) decl_stmt org.apache.lucene.analysis.MockTokenFilter = new return new Integer private synchronized private synchronized decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = - if switch call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) case = - break case = break case = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) break if if == + + else if != - + + + + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if == - return else if == return new else return new public public = public public return public public = public public return == : public public = public public =