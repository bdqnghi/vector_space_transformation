org.apache.solr.highlight java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collections import java.util.Comparator import java.util.HashMap import java.util.HashSet import java.util.LinkedList import java.util.List import java.util.ListIterator import java.util.Map import java.util.Set import org.apache.lucene.analysis.CachingTokenFilter import org.apache.lucene.analysis.TokenFilter import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.OffsetAttribute import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import org.apache.lucene.document.Document import org.apache.lucene.index.Fields import org.apache.lucene.index.FilterLeafReader import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexableField import org.apache.lucene.index.LeafReader import org.apache.lucene.index.Terms import org.apache.lucene.search.Query import org.apache.lucene.search.highlight.Encoder import org.apache.lucene.search.highlight.Formatter import org.apache.lucene.search.highlight.Fragmenter import org.apache.lucene.search.highlight.Highlighter import org.apache.lucene.search.highlight.InvalidTokenOffsetsException import org.apache.lucene.search.highlight.OffsetLimitTokenFilter import org.apache.lucene.search.highlight.QueryScorer import org.apache.lucene.search.highlight.QueryTermScorer import org.apache.lucene.search.highlight.Scorer import org.apache.lucene.search.highlight.TextFragment import org.apache.lucene.search.highlight.TokenSources import org.apache.lucene.search.vectorhighlight.BoundaryScanner import org.apache.lucene.search.vectorhighlight.FastVectorHighlighter import org.apache.lucene.search.vectorhighlight.FieldQuery import org.apache.lucene.search.vectorhighlight.FragListBuilder import org.apache.lucene.search.vectorhighlight.FragmentsBuilder import org.apache.lucene.util.AttributeSource.State import org.apache.solr.common.SolrException import org.apache.solr.common.params.HighlightParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.core.PluginInfo import org.apache.solr.core.SolrCore import org.apache.solr.request.SolrQueryRequest import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.SchemaField import org.apache.solr.search.DocIterator import org.apache.solr.search.DocList import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.util.plugin.PluginInfoInitialized import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.highlight.DefaultSolrHighlighter super super extends super implements decl Map Logger decl Map decl Map decl Map decl Map decl Map SolrCore SolrFragmenter SolrEncoder SolrFormatter SolrFragmentsBuilder SolrBoundaryScanner SolrFragListBuilder public public call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() decl_stmt org.apache.solr.highlight.SolrFragmenter = call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.highlight.SolrFormatter = call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.highlight.SolrEncoder = call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.highlight.SolrFragListBuilder = call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.highlight.SolrFragmentsBuilder = call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.highlight.SolrBoundaryScanner = call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) call org.apache.solr.core.SolrCore.initPlugins(List,Class,String) if == = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() SolrParams Highlighter protected protected throws decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt org.apache.lucene.search.highlight.Highlighter = new call org.apache.lucene.search.highlight.Highlighter.setTextFragmenter(Fragmenter) call org.apache.lucene.search.highlight.Highlighter.setTextFragmenter(Fragmenter) call org.apache.lucene.search.highlight.Highlighter.setTextFragmenter(Fragmenter) call org.apache.lucene.search.highlight.Highlighter.setTextFragmenter(Fragmenter) call org.apache.lucene.search.highlight.Highlighter.setTextFragmenter(Fragmenter) return SolrParams Highlighter protected protected decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt org.apache.lucene.search.highlight.Highlighter = new call org.apache.lucene.search.highlight.Highlighter.setTextFragmenter(Fragmenter) call org.apache.lucene.search.highlight.Highlighter.setTextFragmenter(Fragmenter) call org.apache.lucene.search.highlight.Highlighter.setTextFragmenter(Fragmenter) call org.apache.lucene.search.highlight.Highlighter.setTextFragmenter(Fragmenter) call org.apache.lucene.search.highlight.Highlighter.setTextFragmenter(Fragmenter) return boolean Terms QueryScorer protected protected decl_stmt org.apache.lucene.search.highlight.QueryScorer = new : call org.apache.lucene.search.highlight.QueryScorer.setExpandMultiTermQuery(boolean) call org.apache.lucene.search.highlight.QueryScorer.setExpandMultiTermQuery(boolean) call org.apache.lucene.search.highlight.QueryScorer.setExpandMultiTermQuery(boolean) call org.apache.lucene.search.highlight.QueryScorer.setExpandMultiTermQuery(boolean) call org.apache.lucene.search.highlight.QueryScorer.setExpandMultiTermQuery(boolean) decl_stmt boolean = try decl_stmt org.apache.lucene.index.Terms final final = if != = call Terms.hasPayloads() call Terms.hasPayloads() call Terms.hasPayloads() call Terms.hasPayloads() call Terms.hasPayloads() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call org.apache.lucene.search.highlight.QueryScorer.setUsePayloads(boolean) call org.apache.lucene.search.highlight.QueryScorer.setUsePayloads(boolean) call org.apache.lucene.search.highlight.QueryScorer.setUsePayloads(boolean) call org.apache.lucene.search.highlight.QueryScorer.setUsePayloads(boolean) call org.apache.lucene.search.highlight.QueryScorer.setUsePayloads(boolean) return boolean protected protected decl_stmt boolean = if return new else return new protected protected return protected protected return SolrFormatter String protected protected decl_stmt java.lang.String = decl_stmt org.apache.solr.highlight.SolrFormatter = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + return call SolrFormatter.getFormatter() call SolrFormatter.getFormatter() call SolrFormatter.getFormatter() call SolrFormatter.getFormatter() call SolrFormatter.getFormatter() String SolrEncoder protected protected decl_stmt java.lang.String = decl_stmt org.apache.solr.highlight.SolrEncoder = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + return call org.apache.solr.highlight.SolrEncoder.getEncoder(String,SolrParams) call org.apache.solr.highlight.SolrEncoder.getEncoder(String,SolrParams) call org.apache.solr.highlight.SolrEncoder.getEncoder(String,SolrParams) call org.apache.solr.highlight.SolrEncoder.getEncoder(String,SolrParams) call org.apache.solr.highlight.SolrEncoder.getEncoder(String,SolrParams) SolrFragmenter String protected protected decl_stmt java.lang.String = decl_stmt org.apache.solr.highlight.SolrFragmenter = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + return call org.apache.solr.highlight.SolrFragmenter.getFragmenter(String,SolrParams) call org.apache.solr.highlight.SolrFragmenter.getFragmenter(String,SolrParams) call org.apache.solr.highlight.SolrFragmenter.getFragmenter(String,SolrParams) call org.apache.solr.highlight.SolrFragmenter.getFragmenter(String,SolrParams) call org.apache.solr.highlight.SolrFragmenter.getFragmenter(String,SolrParams) String SolrFragListBuilder protected protected decl_stmt java.lang.String = decl_stmt org.apache.solr.highlight.SolrFragListBuilder = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + return call SolrFragListBuilder.getFragListBuilder() call SolrFragListBuilder.getFragListBuilder() call SolrFragListBuilder.getFragListBuilder() call SolrFragListBuilder.getFragListBuilder() call SolrFragListBuilder.getFragListBuilder() BoundaryScanner protected protected decl_stmt org.apache.lucene.search.vectorhighlight.BoundaryScanner = return String SolrFragmentsBuilder protected protected decl_stmt java.lang.String = decl_stmt org.apache.solr.highlight.SolrFragmentsBuilder = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + return SolrBoundaryScanner String protected protected decl_stmt java.lang.String = decl_stmt org.apache.solr.highlight.SolrBoundaryScanner = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + return call SolrBoundaryScanner.getBoundaryScanner() call SolrBoundaryScanner.getBoundaryScanner() call SolrBoundaryScanner.getBoundaryScanner() call SolrBoundaryScanner.getBoundaryScanner() call SolrBoundaryScanner.getBoundaryScanner() SolrIndexSearcher decl Set int DocIterator FastVectorHighlighter Document SchemaField decl String FieldQuery SchemaField SolrParams IndexReader Object NamedList NamedList IndexSchema public < public < throws decl_stmt org.apache.solr.common.params.SolrParams = if ! return decl_stmt org.apache.solr.search.SolrIndexSearcher = decl_stmt org.apache.solr.schema.IndexSchema = call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() call org.apache.solr.search.SolrIndexSearcher.getSchema() decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.getUniqueKeyField(org,apache,lucene,document,Document) if == return decl_stmt java.lang.String = decl_stmt java.util.Set < = if != call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() decl_stmt org.apache.lucene.search.vectorhighlight.FastVectorHighlighter = decl_stmt org.apache.lucene.search.vectorhighlight.FieldQuery = decl_stmt org.apache.lucene.index.IndexReader = new decl_stmt org.apache.solr.common.util.NamedList = new decl_stmt org.apache.solr.search.DocIterator = for = < ++ decl_stmt int = call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() call org.apache.solr.search.DocIterator.nextDoc() decl_stmt org.apache.lucene.document.Document = call org.apache.solr.search.SolrIndexSearcher.doc(int,Set) call org.apache.solr.search.SolrIndexSearcher.doc(int,Set) call org.apache.solr.search.SolrIndexSearcher.doc(int,Set) call org.apache.solr.search.SolrIndexSearcher.doc(int,Set) call org.apache.solr.search.SolrIndexSearcher.doc(int,Set) decl_stmt org.apache.solr.common.util.NamedList = new for : decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) call org.apache.solr.schema.IndexSchema.getFieldOrNull(String) decl_stmt java.lang.Object if == = else if call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() instanceof = else if if == = new call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.setPhraseLimit(int) call org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.setPhraseLimit(int) call org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.setPhraseLimit(int) call org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.setPhraseLimit(int) call org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.setPhraseLimit(int) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) = call org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getFieldQuery(Query) call org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getFieldQuery(Query) call org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getFieldQuery(Query) call org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getFieldQuery(Query) call org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getFieldQuery(Query) = else = if == = if != call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.schema.IndexSchema.printableUniqueKey(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.printableUniqueKey(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.printableUniqueKey(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.printableUniqueKey(org,apache,lucene,document,Document) call org.apache.solr.schema.IndexSchema.printableUniqueKey(org,apache,lucene,document,Document) return decl Set protected < protected < decl_stmt java.util.Set < = new <> + return boolean boolean protected protected decl_stmt boolean = if ! return decl_stmt boolean = && if ! call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return String SolrParams decl String SolrFragmentsBuilder protected protected throws decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt java.lang.String = decl_stmt org.apache.solr.highlight.SolrFragmentsBuilder = decl_stmt java.lang.String = call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call SolrFragmentsBuilder.getPreTags() call SolrFragmentsBuilder.getPreTags() call SolrFragmentsBuilder.getPreTags() call SolrFragmentsBuilder.getPreTags() call SolrFragmentsBuilder.getPreTags() call org.apache.solr.highlight.SolrFragmentsBuilder.getPostTags(SolrParams,String) call org.apache.solr.highlight.SolrFragmentsBuilder.getPostTags(SolrParams,String) call org.apache.solr.highlight.SolrFragmentsBuilder.getPostTags(SolrParams,String) call org.apache.solr.highlight.SolrFragmentsBuilder.getPostTags(SolrParams,String) call org.apache.solr.highlight.SolrFragmentsBuilder.getPostTags(SolrParams,String) if != && > return return Fields boolean Highlighter TokenStream int TokenStream int int OffsetWindowTokenFilter String TokenStream decl TextFragment SolrParams decl List int decl List boolean protected protected throws decl_stmt org.apache.solr.common.params.SolrParams final final = decl_stmt java.lang.String final final = decl_stmt int final final = : decl_stmt int = if <= || <= return decl_stmt int = call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) if < = decl_stmt java.util.List < = if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return decl_stmt boolean = call org.apache.solr.common.params.SolrParams.getFieldBool(String,String) call org.apache.solr.common.params.SolrParams.getFieldBool(String,String) call org.apache.solr.common.params.SolrParams.getFieldBool(String,String) call org.apache.solr.common.params.SolrParams.getFieldBool(String,String) call org.apache.solr.common.params.SolrParams.getFieldBool(String,String) decl_stmt int = decl_stmt boolean = decl_stmt java.util.List < = new <> decl_stmt Fields final final = : decl_stmt org.apache.lucene.analysis.TokenStream final final = - decl_stmt OffsetWindowTokenFilter final final if != && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > = new else = for : if <= || <= break decl_stmt org.apache.lucene.analysis.TokenStream if != = call OffsetWindowTokenFilter.advanceToNextWindowOfLength() call OffsetWindowTokenFilter.advanceToNextWindowOfLength() call OffsetWindowTokenFilter.advanceToNextWindowOfLength() call OffsetWindowTokenFilter.advanceToNextWindowOfLength() call OffsetWindowTokenFilter.advanceToNextWindowOfLength() else if != = else = decl_stmt org.apache.lucene.search.highlight.Highlighter if decl_stmt org.apache.lucene.analysis.TokenStream final final if != if >= = new else = new new else = = if instanceof && = else = call org.apache.lucene.search.highlight.Highlighter.setMaxDocCharsToAnalyze(int) call org.apache.lucene.search.highlight.Highlighter.setMaxDocCharsToAnalyze(int) call org.apache.lucene.search.highlight.Highlighter.setMaxDocCharsToAnalyze(int) call org.apache.lucene.search.highlight.Highlighter.setMaxDocCharsToAnalyze(int) call org.apache.lucene.search.highlight.Highlighter.setMaxDocCharsToAnalyze(int) -= try decl_stmt org.apache.lucene.search.highlight.TextFragment = call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) for : if == continue if > || call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if > -- catch throw new if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > if ! if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > && ! = call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() return return decl List String protected < protected < decl_stmt java.util.List < = new <> for : if ! continue decl_stmt java.lang.String = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() -= call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() -- if <= || <= break return decl ArrayList protected protected < decl_stmt java.util.ArrayList < = new <> for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() decl IndexableField int decl List String int Encoder SolrParams decl String decl List protected protected decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt java.lang.String = call org.apache.solr.common.params.SolrParams.getFieldParam(String,String) call org.apache.solr.common.params.SolrParams.getFieldParam(String,String) call org.apache.solr.common.params.SolrParams.getFieldParam(String,String) call org.apache.solr.common.params.SolrParams.getFieldParam(String,String) call org.apache.solr.common.params.SolrParams.getFieldParam(String,String) if == || call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() == return decl_stmt org.apache.lucene.index.IndexableField = if == = decl_stmt java.util.List < = new <> for : if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return decl_stmt java.lang.String = call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.lucene.search.highlight.Encoder = decl_stmt int = call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) call org.apache.solr.common.params.SolrParams.getFieldInt(String,String) decl_stmt java.util.List < = new <> decl_stmt int = for : if <= call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + > call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() new - : call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() call Encoder.encodeText() += if >= break return TokenStream protected protected throws decl_stmt org.apache.lucene.analysis.TokenStream final final = return new