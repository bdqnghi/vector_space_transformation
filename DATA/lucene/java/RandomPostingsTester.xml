org.apache.lucene.index java.io.IOException import java.nio.file.Path import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.EnumSet import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.List import java.util.Map import java.util.NoSuchElementException import java.util.Random import java.util.Set import java.util.SortedMap import java.util.TreeMap import org.apache.lucene.codecs.Codec import org.apache.lucene.codecs.FieldsConsumer import org.apache.lucene.codecs.FieldsProducer import org.apache.lucene.store.Directory import org.apache.lucene.store.FlushInfo import org.apache.lucene.store.IOContext import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.StringHelper import org.apache.lucene.util.TestUtil import org.apache.lucene.util.UnicodeUtil import org.apache.lucene.util.Version import org.apache.lucene.util.automaton.Automaton import org.apache.lucene.util.automaton.AutomatonTestUtil import org.apache.lucene.util.automaton.AutomatonTestUtil.RandomAcceptedStrings import org.apache.lucene.util.automaton.CompiledAutomaton import static static org.junit.Assert.assertEquals import static static org.junit.Assert.assertFalse import static static org.junit.Assert.assertNotNull import static static org.junit.Assert.assertNull import static static org.junit.Assert.assertTrue import class org.apache.lucene.index.RandomPostingsTester long int decl Map decl List Random FieldInfos FieldInfos long int public static public static decl_stmt int if = * = * else if = * = * else if = = * else = = return new public public while return private private if == - = while < if < if == && else if == ++ else += if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == = else if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == = else = = = = = ++ return else return = public public return public public return int public public if ! = return - assert < if == && call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() else if == ++ else += if != if = call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) else decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) if != = call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) else = else = if ! = = + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) = + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) = ++ return public public return public public return public public return == : public public throws return public public return public < public < return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl SortedMap public public decl_stmt java.util.SortedMap < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == return else return new call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) public public return call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() SeedTermsEnum public public decl_stmt SeedTermsEnum = new call SeedTermsEnum.reset() call SeedTermsEnum.reset() call SeedTermsEnum.reset() call SeedTermsEnum.reset() call SeedTermsEnum.reset() return public public return public public throw new public public throw new public public throw new public public return >= public public return >= public public return >= public public return && = decl SortedMap public public decl_stmt java.util.SortedMap < = if call decl SortedMap.isEmpty() call decl SortedMap.isEmpty() call decl SortedMap.isEmpty() call decl SortedMap.isEmpty() call decl SortedMap.isEmpty() return else = call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() call decl SortedMap.entrySet() = if call decl SortedMap.firstKey() call decl SortedMap.firstKey() call decl SortedMap.firstKey() call decl SortedMap.firstKey() call decl SortedMap.firstKey() return else return public public if = return else return public public throw new public public return public public return public public throw new public public throw new public final public final throws if if < return if && < return if && == return if && < return return boolean boolean FieldsConsumer SegmentReadState long FieldInfo decl FieldInfo int SegmentInfo IndexOptions FieldInfos SegmentWriteState Fields public public throws decl_stmt org.apache.lucene.index.SegmentInfo = new new <> decl_stmt int = if decl_stmt org.apache.lucene.index.FieldInfo = new call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for = < call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() ++ decl_stmt org.apache.lucene.index.FieldInfo = call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) decl_stmt IndexOptions = : decl_stmt boolean = call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() >= && = new - new <> decl_stmt org.apache.lucene.index.FieldInfos = new decl_stmt long = * + decl_stmt org.apache.lucene.index.SegmentWriteState = new new new decl_stmt Fields = new decl_stmt org.apache.lucene.codecs.FieldsConsumer = decl_stmt boolean = try call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() = finally if else if for : + + + + = decl_stmt SegmentReadState = new return BytesRef int boolean int BytesRef PostingsEnum double boolean boolean PostingsEnum SeedPostings double int boolean int int boolean int int boolean FieldInfo int boolean int int int double boolean int int int double private private < throws if + + + decl_stmt org.apache.lucene.index.FieldInfo = call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) decl_stmt SeedPostings = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt boolean = call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() >= && >= decl_stmt boolean = && || call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) <= decl_stmt boolean = call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() >= && >= decl_stmt boolean = && || call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) <= decl_stmt boolean = call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() >= && >= decl_stmt boolean = && || call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) <= decl_stmt boolean = && && call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() && || call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) <= decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.PostingsEnum if ! if && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == if && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < = decl_stmt int = if || call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() |= if || call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() |= if + = = else if if && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < = = : = else if && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < = decl_stmt int = if || || call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == |= if || || call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == |= if + = = decl_stmt int = call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() + - if if == + else if == + else + + + + decl_stmt int if ! && && > && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - if + + + + else = if decl_stmt double = : call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() decl_stmt int = < : / decl_stmt int = / decl_stmt int = / decl_stmt boolean = && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == decl_stmt double = : call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() decl_stmt double = : call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() decl_stmt double = : call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() if if + + + else if + if + if + while <= if == if == call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() break if && || call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() <= decl_stmt int = - if < && call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt int final final = for = < ++ if call SeedPostings.nextDoc() call SeedPostings.nextDoc() call SeedPostings.nextDoc() call SeedPostings.nextDoc() call SeedPostings.nextDoc() == break else decl_stmt int final final = if > = call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() + call SeedPostings.advance() call SeedPostings.advance() call SeedPostings.advance() call SeedPostings.advance() call SeedPostings.advance() if >= decl_stmt int = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() : if + + call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() break else if if != - + + + + + + + call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() else + call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() + + + + + + call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() call PostingsEnum.docID() decl_stmt int = call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() call PostingsEnum.advance() != - : call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() else call SeedPostings.nextDoc() call SeedPostings.nextDoc() call SeedPostings.nextDoc() call SeedPostings.nextDoc() call SeedPostings.nextDoc() if + call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() + + + + + decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() call SeedPostings.docID() if == break if && call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() <= if + call SeedPostings.freq() call SeedPostings.freq() call SeedPostings.freq() call SeedPostings.freq() call SeedPostings.freq() decl_stmt int = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call SeedPostings.freq() call SeedPostings.freq() call SeedPostings.freq() call SeedPostings.freq() call SeedPostings.freq() if decl_stmt int = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() decl_stmt int if ! && && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) else = for = < ++ decl_stmt int = call SeedPostings.nextPosition() call SeedPostings.nextPosition() call SeedPostings.nextPosition() call SeedPostings.nextPosition() call SeedPostings.nextPosition() if + call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() if decl_stmt org.apache.lucene.util.BytesRef = call SeedPostings.getPayload() call SeedPostings.getPayload() call SeedPostings.getPayload() call SeedPostings.getPayload() call SeedPostings.getPayload() if call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() <= if + == : if == || == call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() else decl_stmt org.apache.lucene.util.BytesRef = call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() for = < ++ + + = call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() else if + == : if if call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() call java.util.Random.nextDouble() <= if + call SeedPostings.startOffset() call SeedPostings.startOffset() call SeedPostings.startOffset() call SeedPostings.startOffset() call SeedPostings.startOffset() + + call SeedPostings.endOffset() call SeedPostings.endOffset() call SeedPostings.endOffset() call SeedPostings.endOffset() call SeedPostings.endOffset() call SeedPostings.startOffset() call SeedPostings.startOffset() call SeedPostings.startOffset() call SeedPostings.startOffset() call SeedPostings.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call SeedPostings.endOffset() call SeedPostings.endOffset() call SeedPostings.endOffset() call SeedPostings.endOffset() call SeedPostings.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() else if else if call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() < if - call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() - call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() public public try try catch throw new finally = = int decl Thread public public final final final final final < final final final final final final throws if decl_stmt int = decl_stmt java.lang.Thread = new for = < ++ = new new call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() for = < ++ else boolean CompiledAutomaton RandomAcceptedStrings decl List TermsEnum BytesRef decl int ThreadState int Terms boolean Automaton BytesRef TermState int TermsEnum FieldAndTerm long boolean boolean boolean decl Set decl List private private < throws decl_stmt ThreadState = new decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> decl_stmt boolean = decl_stmt int = while < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt boolean = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() != && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == decl_stmt boolean = && == && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == decl_stmt FieldAndTerm decl_stmt org.apache.lucene.index.TermsEnum decl_stmt org.apache.lucene.index.TermState = if ! = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() ++ if if + + + call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() + + else + + + call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() else decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if + + + call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() call FieldAndTerm.term() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.index.Terms = = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() if ! if try call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) catch = call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) else call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) else call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() decl_stmt long if try = call org.apache.lucene.index.TermsEnum.ord() call org.apache.lucene.index.TermsEnum.ord() call org.apache.lucene.index.TermsEnum.ord() call org.apache.lucene.index.TermsEnum.ord() call org.apache.lucene.index.TermsEnum.ord() catch = = - else = - if != - call org.apache.lucene.index.TermsEnum.ord() call org.apache.lucene.index.TermsEnum.ord() call org.apache.lucene.index.TermsEnum.ord() call org.apache.lucene.index.TermsEnum.ord() call org.apache.lucene.index.TermsEnum.ord() decl_stmt boolean = if && ! && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = if && ! && ! && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = if || call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == if for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() while decl_stmt org.apache.lucene.util.automaton.Automaton = decl_stmt org.apache.lucene.util.automaton.CompiledAutomaton = new if != continue decl_stmt org.apache.lucene.util.BytesRef = if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt RandomAcceptedStrings = new for = < ++ decl_stmt int = call RandomAcceptedStrings.getRandomAcceptedString() call RandomAcceptedStrings.getRandomAcceptedString() call RandomAcceptedStrings.getRandomAcceptedString() call RandomAcceptedStrings.getRandomAcceptedString() call RandomAcceptedStrings.getRandomAcceptedString() if == continue = new break if == continue decl_stmt org.apache.lucene.index.TermsEnum = decl_stmt java.util.Set < = new < decl_stmt org.apache.lucene.util.BytesRef while = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != if != call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if == call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() else for : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt boolean if != && call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() >= = else = call CompiledAutomaton.runAutomaton() call CompiledAutomaton.runAutomaton() call CompiledAutomaton.runAutomaton() call CompiledAutomaton.runAutomaton() call CompiledAutomaton.runAutomaton() call CompiledAutomaton.runAutomaton() call CompiledAutomaton.runAutomaton() call CompiledAutomaton.runAutomaton() call CompiledAutomaton.runAutomaton() + call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() break decl Iterator public public throws decl_stmt java.util.Iterator < = call decl Map.iterator() call decl Map.iterator() call decl Map.iterator() call decl Map.iterator() call decl Map.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() try call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() throw new catch call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() int FieldsProducer Directory decl IndexOptions public public throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.codecs.FieldsProducer = decl_stmt IndexOptions = decl_stmt int = for = <= ++ if call FieldsProducer.close() call FieldsProducer.close() call FieldsProducer.close() call FieldsProducer.close() call FieldsProducer.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close()