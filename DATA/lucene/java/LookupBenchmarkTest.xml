org.apache.lucene.search.suggest java.io.BufferedReader import java.io.InputStreamReader import java.lang.reflect.Constructor import java.net.URL import java.nio.charset.Charset import java.nio.charset.StandardCharsets import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.List import java.util.Locale import java.util.Random import java.util.concurrent.Callable import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.analysis.MockTokenizer import org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester import org.apache.lucene.search.suggest.analyzing.AnalyzingSuggester import org.apache.lucene.search.suggest.analyzing.BlendedInfixSuggester import org.apache.lucene.search.suggest.analyzing.FreeTextSuggester import org.apache.lucene.search.suggest.analyzing.FuzzySuggester import org.apache.lucene.search.suggest.fst.FSTCompletionLookup import org.apache.lucene.search.suggest.fst.WFSTCompletionLookup import org.apache.lucene.search.suggest.jaspell.JaspellLookup import org.apache.lucene.search.suggest.tst.TSTLookup import org.apache.lucene.store.Directory import org.apache.lucene.store.FSDirectory import org.apache.lucene.util.* import org.junit.BeforeClass import org.junit.Ignore import class annotation org.apache.lucene.search.suggest.LookupBenchmarkTest super super extends Charset int decl Input Random boolean decl List int int int decl List decl List public static public static throws assert : decl_stmt java.util.List < = = call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = String URL BufferedReader int int decl List String public static < public static < throws decl_stmt java.util.List < = new <> decl_stmt java.net.URL = assert != : decl_stmt java.lang.String = decl_stmt java.io.BufferedReader = new new call java.net.URL.openStream() call java.net.URL.openStream() call java.net.URL.openStream() call java.net.URL.openStream() call java.net.URL.openStream() while = call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) != decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) + >= decl_stmt int = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() return Lookup BenchmarkResult public public throws for final final final < extends extends : decl_stmt BenchmarkResult = new < public public throws decl_stmt org.apache.lucene.search.suggest.Lookup final final = return call Lookup.hashCode() call Lookup.hashCode() call Lookup.hashCode() call Lookup.hashCode() call Lookup.hashCode() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() Lookup public public throws decl_stmt org.apache.lucene.search.suggest.Lookup final final = return call Lookup.hashCode() call Lookup.hashCode() call Lookup.hashCode() call Lookup.hashCode() call Lookup.hashCode() long Lookup public public throws for < extends extends : decl_stmt org.apache.lucene.search.suggest.Lookup = decl_stmt long = call Lookup.ramBytesUsed() call Lookup.ramBytesUsed() call Lookup.ramBytesUsed() call Lookup.ramBytesUsed() call Lookup.ramBytesUsed() call Lookup.getClass() call Lookup.getClass() call Lookup.getClass() call Lookup.getClass() call Lookup.getClass() Analyzer Lookup decl Constructor private private < extends extends throws decl_stmt org.apache.lucene.search.suggest.Lookup = try = catch decl_stmt org.apache.lucene.analysis.Analyzer = new if == || == decl_stmt java.lang.reflect.Constructor < extends extends = = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() else decl_stmt java.lang.reflect.Constructor < extends extends = = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call org.apache.lucene.search.suggest.Lookup.build(Dictionary) call org.apache.lucene.search.suggest.Lookup.build(Dictionary) call org.apache.lucene.search.suggest.Lookup.build(Dictionary) call org.apache.lucene.search.suggest.Lookup.build(Dictionary) call org.apache.lucene.search.suggest.Lookup.build(Dictionary) new return int int public public throws decl_stmt int final final = decl_stmt int final final = int int public public throws decl_stmt int final final = decl_stmt int final final = int int public public throws decl_stmt int final final = decl_stmt int final final = String String Lookup BenchmarkResult int decl List public public final final final final final final final final throws for < extends extends : decl_stmt org.apache.lucene.search.suggest.Lookup final final = decl_stmt java.util.List final final final < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : decl_stmt java.lang.String = decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt BenchmarkResult = new < public public throws decl_stmt int = for : += call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) call org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,BooleanQuery,int,boolean,boolean) return call Lookup.getClass() call Lookup.getClass() call Lookup.getClass() call Lookup.getClass() call Lookup.getClass() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call BenchmarkResult.average() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() / int public public throws decl_stmt int = for : += return double long decl List private private < decl_stmt double final final = try decl_stmt java.util.List < = new <> for = < + ++ decl_stmt long final final = = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() - / return new catch throw new