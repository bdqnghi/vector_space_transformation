org.apache.lucene.codecs.simpletext java.io.IOException import java.nio.charset.StandardCharsets import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.Iterator import java.util.Map import java.util.TreeMap import org.apache.lucene.codecs.FieldsProducer import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.SegmentReadState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.BufferedChecksumIndexInput import org.apache.lucene.store.ChecksumIndexInput import org.apache.lucene.store.IndexInput import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.CharsRef import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.IOUtils import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.StringHelper import org.apache.lucene.util.fst.Builder import org.apache.lucene.util.fst.BytesRefFSTEnum import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.PairOutputs import org.apache.lucene.util.fst.PositiveIntOutputs import org.apache.lucene.util.fst.Util import static static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.DOC import static static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.END import static static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.END_OFFSET import static static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.FIELD import static static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.FREQ import static static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.PAYLOAD import static static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.POS import static static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.START_OFFSET import static static org.apache.lucene.codecs.simpletext.SimpleTextFieldsWriter.TERM import class org.apache.lucene.codecs.simpletext.SimpleTextFieldsReader super super extends long long int FieldInfos IndexInput decl TreeMap decl Map ChecksumIndexInput String decl TreeMap BytesRefBuilder private < private < throws decl_stmt org.apache.lucene.store.ChecksumIndexInput = new decl_stmt org.apache.lucene.util.BytesRefBuilder = new decl_stmt java.util.TreeMap < = new <> while if call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() return else if call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() decl_stmt java.lang.String = new call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() call BytesRefBuilder.length() - call decl TreeMap.put() call decl TreeMap.put() call decl TreeMap.put() call decl TreeMap.put() call decl TreeMap.put() call ChecksumIndexInput.getFilePointer() call ChecksumIndexInput.getFilePointer() call ChecksumIndexInput.getFilePointer() call ChecksumIndexInput.getFilePointer() call ChecksumIndexInput.getFilePointer() decl PairOutputs decl PairOutputs decl BytesRefFSTEnum public public throws decl_stmt org.apache.lucene.util.fst.BytesRefFSTEnum final final final final final final final < < < = if != decl_stmt org.apache.lucene.util.fst.PairOutputs < < = decl_stmt org.apache.lucene.util.fst.PairOutputs < = = = call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() = return else return decl PairOutputs decl PairOutputs decl BytesRefFSTEnum public public throws decl_stmt org.apache.lucene.util.fst.BytesRefFSTEnum final final final final final final final < < < = if == return else decl_stmt org.apache.lucene.util.fst.PairOutputs < < = decl_stmt org.apache.lucene.util.fst.PairOutputs < = = = call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() = if call decl BytesRefFSTEnum.input() call decl BytesRefFSTEnum.input() call decl BytesRefFSTEnum.input() call decl BytesRefFSTEnum.input() call decl BytesRefFSTEnum.input() call decl BytesRefFSTEnum.input() call decl BytesRefFSTEnum.input() call decl BytesRefFSTEnum.input() call decl BytesRefFSTEnum.input() return else return decl PairOutputs decl PairOutputs decl BytesRefFSTEnum public public throws assert ! decl_stmt org.apache.lucene.util.fst.BytesRefFSTEnum final final final final final final final < < < = if != decl_stmt org.apache.lucene.util.fst.PairOutputs < < = decl_stmt org.apache.lucene.util.fst.PairOutputs < = = = call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() call decl PairOutputs.output1() = return else return public public return public public throws throw new public public throw new public public return public public return == - : SimpleTextDocsEnum SimpleTextPostingsEnum boolean public public throws decl_stmt boolean = >= if && decl_stmt SimpleTextPostingsEnum if != && instanceof && = else = new return call SimpleTextPostingsEnum.reset() call SimpleTextPostingsEnum.reset() call SimpleTextPostingsEnum.reset() call SimpleTextPostingsEnum.reset() call SimpleTextPostingsEnum.reset() decl_stmt SimpleTextDocsEnum if != && instanceof && = else = new return call SimpleTextDocsEnum.reset() call SimpleTextDocsEnum.reset() call SimpleTextDocsEnum.reset() call SimpleTextDocsEnum.reset() call SimpleTextDocsEnum.reset() == public public return == public public throws call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = = - = = return public public return public public throws return public public throws return - public public throws return - public public throws return - public public throws return long int boolean public public throws if == return decl_stmt boolean = decl_stmt int = while decl_stmt long final final = call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() if if ! call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() if ! = return - = = = else if - = else if else if else if else if else assert || || : + if ! call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() if ! = return return = public public throws return public public return public public return == public public = = - = >= = >= if ! = - = - = return public public return public public throws return long long boolean public public throws decl_stmt boolean = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt long = while decl_stmt long final final = call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() if if ! = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() return - = = = else if - = = call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() else if else if else if else if else assert || || if ! = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() return return = public public throws return long int public public throws if assert : + - = else = - if assert : + - = assert : + - - = decl_stmt long final final = call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() if decl_stmt int final final = - = else = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() return public public throws return public public throws return public public return public public return IntsRefBuilder decl PairOutputs decl Builder int decl PairOutputs int FixedBitSet BytesRefBuilder PositiveIntOutputs long long int IndexInput private private throws decl_stmt org.apache.lucene.util.fst.PositiveIntOutputs = decl_stmt org.apache.lucene.util.fst.Builder final final final < < < decl_stmt org.apache.lucene.util.fst.PairOutputs final final final < = new <> decl_stmt org.apache.lucene.util.fst.PairOutputs final final final < < = new <> = new <> decl_stmt org.apache.lucene.store.IndexInput = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() decl_stmt org.apache.lucene.util.BytesRefBuilder final final = new decl_stmt long = - decl_stmt int = decl_stmt long = decl_stmt org.apache.lucene.util.FixedBitSet = new decl_stmt org.apache.lucene.util.IntsRefBuilder final final = new while if || if != - call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() long += break else if ++ ++ - decl_stmt int = call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) else if - += else if if != - call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() call decl PairOutputs.newPair() long = call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() decl_stmt int final final = - call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.grow(int) call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.bytes() call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) call org.apache.lucene.util.BytesRefBuilder.setLength(int) = += = ++ = call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() = call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() public public return + != : + + public < public < if == return else return public public return + + + + + + + + + public public throws if != return new else return public public return long public public return == - : public public throws return public public throws return public public return >= public public return >= public public return >= public public return public < public < return call decl TreeMap.keySet() call decl TreeMap.keySet() call decl TreeMap.keySet() call decl TreeMap.keySet() call decl TreeMap.keySet() Long SimpleTextTerms synchronized public synchronized public throws decl_stmt SimpleTextTerms = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == decl_stmt java.lang.Long = call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() call decl TreeMap.get() if == return else = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return public public return - public public throws call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() long public synchronized public synchronized decl_stmt long = + call decl TreeMap.size() call decl TreeMap.size() call decl TreeMap.size() call decl TreeMap.size() call decl TreeMap.size() * * for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() += != : return public synchronized < public synchronized < return public public return + + call decl TreeMap.size() call decl TreeMap.size() call decl TreeMap.size() call decl TreeMap.size() call decl TreeMap.size() + public public throws