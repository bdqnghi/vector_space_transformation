org.apache.lucene.search.join java.io.IOException import java.util.Arrays import java.util.HashMap import java.util.LinkedList import java.util.Map import java.util.Queue import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.search.Collector import org.apache.lucene.search.FieldComparator import org.apache.lucene.search.FieldValueHitQueue import org.apache.lucene.search.LeafCollector import org.apache.lucene.search.LeafFieldComparator import org.apache.lucene.search.Query import org.apache.lucene.search.ScoreCachingWrappingScorer import org.apache.lucene.search.Scorer import org.apache.lucene.search.Scorer.ChildScorer import org.apache.lucene.search.Sort import org.apache.lucene.search.TopDocs import org.apache.lucene.search.TopDocsCollector import org.apache.lucene.search.TopFieldCollector import org.apache.lucene.search.TopScoreDocCollector import org.apache.lucene.search.grouping.GroupDocs import org.apache.lucene.search.grouping.TopGroups import org.apache.lucene.util.ArrayUtil import class org.apache.lucene.search.join.ToParentBlockJoinCollector super super implements Sort decl OneGroup decl ToParentBlockJoinQuery boolean decl BlockJoinScorer float OneGroup boolean decl FieldValueHitQueue int decl Map int boolean int int int int OneGroup decl Queue float Scorer decl int decl LeafFieldComparator decl ToParentBlockJoinQuery public public final final throws decl_stmt org.apache.lucene.search.LeafFieldComparator final final final = call decl Queue.getComparators() call decl Queue.getComparators() call decl Queue.getComparators() call decl Queue.getComparators() call decl Queue.getComparators() decl_stmt int final final final = call decl Queue.getReverseMul() call decl Queue.getReverseMul() call decl Queue.getReverseMul() call decl Queue.getReverseMul() call decl Queue.getReverseMul() decl_stmt int final final = return new decl_stmt org.apache.lucene.search.Scorer private public public throws if instanceof == = new = for : decl_stmt java.util.Queue < = new <> call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() while = call decl Queue.poll() call decl Queue.poll() call decl Queue.poll() call decl Queue.poll() call decl Queue.poll() != if instanceof call org.apache.lucene.search.Scorer.getWeight() call org.apache.lucene.search.Scorer.getWeight() call org.apache.lucene.search.Scorer.getWeight() call org.apache.lucene.search.Scorer.getWeight() call org.apache.lucene.search.Scorer.getWeight() for : call Scorer.getChildren() call Scorer.getChildren() call Scorer.getChildren() call Scorer.getChildren() call Scorer.getChildren() call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() public public throws ++ decl_stmt float = if = call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() = if decl_stmt int = for = < ++ = * if != break if <= return for : if ! && = call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() = + = = = call decl Queue.updateTop() call decl Queue.updateTop() call decl Queue.updateTop() call decl Queue.updateTop() call decl Queue.updateTop() for : else decl_stmt int final final = - for : if ! && = call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() decl_stmt OneGroup final final = new + = = call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() = == if for : private private decl_stmt int final final = if < = if < = if && < = for = < ++ decl_stmt BlockJoinScorer final final final final final = if != && + call decl ToParentBlockJoinQuery.getParentDoc() call decl ToParentBlockJoinQuery.getParentDoc() call decl ToParentBlockJoinQuery.getParentDoc() call decl ToParentBlockJoinQuery.getParentDoc() call decl ToParentBlockJoinQuery.getParentDoc() == = call decl ToParentBlockJoinQuery.getChildCount() call decl ToParentBlockJoinQuery.getChildCount() call decl ToParentBlockJoinQuery.getChildCount() call decl ToParentBlockJoinQuery.getChildCount() call decl ToParentBlockJoinQuery.getChildCount() = call decl ToParentBlockJoinQuery.swapChildDocs() call decl ToParentBlockJoinQuery.swapChildDocs() call decl ToParentBlockJoinQuery.swapChildDocs() call decl ToParentBlockJoinQuery.swapChildDocs() call decl ToParentBlockJoinQuery.swapChildDocs() assert >= : + + + if = call decl ToParentBlockJoinQuery.swapChildScores() call decl ToParentBlockJoinQuery.swapChildScores() call decl ToParentBlockJoinQuery.swapChildScores() call decl ToParentBlockJoinQuery.swapChildScores() call decl ToParentBlockJoinQuery.swapChildScores() assert >= : + + + else = decl Queue public public throws if instanceof == = new = for : decl_stmt java.util.Queue < = new <> call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() while = call decl Queue.poll() call decl Queue.poll() call decl Queue.poll() call decl Queue.poll() call decl Queue.poll() != if instanceof for : call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() call decl Queue.add() OneGroup int float int public public throws ++ decl_stmt float = if = = if decl_stmt int = for = < ++ = * if != break if <= return for : if ! && = = + = = = call decl FieldValueHitQueue.updateTop() call decl FieldValueHitQueue.updateTop() call decl FieldValueHitQueue.updateTop() call decl FieldValueHitQueue.updateTop() call decl FieldValueHitQueue.updateTop() for : else decl_stmt int final final = - for : if ! && = decl_stmt OneGroup final final = new + = = call decl FieldValueHitQueue.add() call decl FieldValueHitQueue.add() call decl FieldValueHitQueue.add() call decl FieldValueHitQueue.add() call decl FieldValueHitQueue.add() = == if for : int decl ToParentBlockJoinQuery private private decl_stmt int final final = if < = if < = if && < = for = < ++ decl_stmt BlockJoinScorer final final final final final = if != && + call decl ToParentBlockJoinQuery.getParentDoc() call decl ToParentBlockJoinQuery.getParentDoc() call decl ToParentBlockJoinQuery.getParentDoc() call decl ToParentBlockJoinQuery.getParentDoc() call decl ToParentBlockJoinQuery.getParentDoc() == = call decl ToParentBlockJoinQuery.getChildCount() call decl ToParentBlockJoinQuery.getChildCount() call decl ToParentBlockJoinQuery.getChildCount() call decl ToParentBlockJoinQuery.getChildCount() call decl ToParentBlockJoinQuery.getChildCount() = call decl ToParentBlockJoinQuery.swapChildDocs() call decl ToParentBlockJoinQuery.swapChildDocs() call decl ToParentBlockJoinQuery.swapChildDocs() call decl ToParentBlockJoinQuery.swapChildDocs() call decl ToParentBlockJoinQuery.swapChildDocs() assert >= : + + + if = call decl ToParentBlockJoinQuery.swapChildScores() call decl ToParentBlockJoinQuery.swapChildScores() call decl ToParentBlockJoinQuery.swapChildScores() call decl ToParentBlockJoinQuery.swapChildScores() call decl ToParentBlockJoinQuery.swapChildScores() assert >= : + + + else = Integer decl ToParentBlockJoinQuery private private decl_stmt java.lang.Integer final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt BlockJoinScorer final final final final final = new + = - = else = private private = new call decl FieldValueHitQueue.size() call decl FieldValueHitQueue.size() call decl FieldValueHitQueue.size() call decl FieldValueHitQueue.size() call decl FieldValueHitQueue.size() for = call decl FieldValueHitQueue.size() call decl FieldValueHitQueue.size() call decl FieldValueHitQueue.size() call decl FieldValueHitQueue.size() call decl FieldValueHitQueue.size() - >= -- = call decl FieldValueHitQueue.pop() call decl FieldValueHitQueue.pop() call decl FieldValueHitQueue.pop() call decl FieldValueHitQueue.pop() call decl FieldValueHitQueue.pop() Integer public < public < throws decl_stmt java.lang.Integer final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == && == return if == if >= call decl FieldValueHitQueue.size() call decl FieldValueHitQueue.size() call decl FieldValueHitQueue.size() call decl FieldValueHitQueue.size() call decl FieldValueHitQueue.size() return else if > return return == - : call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() TopDocs int decl Object decl TopDocsCollector OneGroup FakeScorer int int int LeafCollector private < private < throws decl_stmt org.apache.lucene.search.FakeScorer final final = new decl_stmt int = for = < ++ decl_stmt OneGroup final final = decl_stmt int final final if == - || >= = else = decl_stmt int final final = decl_stmt org.apache.lucene.search.TopDocsCollector final final final < if == if ! throw new = else = decl_stmt org.apache.lucene.search.LeafCollector = call LeafCollector.getLeafCollector() call LeafCollector.getLeafCollector() call LeafCollector.getLeafCollector() call LeafCollector.getLeafCollector() call LeafCollector.getLeafCollector() call int.setScorer() call int.setScorer() call int.setScorer() call int.setScorer() call int.setScorer() for = < ++ decl_stmt int final final = = if = call int.collect() call int.collect() call int.collect() call int.collect() call int.collect() += decl_stmt java.lang.Object final final final if = new for = < ++ = else = decl_stmt org.apache.lucene.search.TopDocs final final = call LeafCollector.topDocs() call LeafCollector.topDocs() call LeafCollector.topDocs() call LeafCollector.topDocs() call LeafCollector.topDocs() - = new <> return new <> new <> call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() == : public < public < throws return public public return public public return