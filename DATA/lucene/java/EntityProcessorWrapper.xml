org.apache.solr.handler.dataimport org.apache.solr.common.SolrException import org.apache.solr.handler.data.config.ConfigNameConstants import org.apache.solr.handler.data.config.Entity import static static org.apache.solr.handler.data.DataImportHandlerException.* import static static org.apache.solr.handler.data.EntityProcessorBase.* import static static org.apache.solr.handler.data.EntityProcessorBase.SKIP import org.slf4j.Logger import org.slf4j.LoggerFactory import java.lang.invoke.MethodHandles import java.lang.reflect.Method import java.util.ArrayList import java.util.Collections import java.util.List import java.util.Map import class org.apache.solr.handler.dataimport.EntityProcessorWrapper super super extends DocBuilder decl List decl List Logger String String VariableResolver Entity DataSource Context boolean decl List EntityProcessor public public = = = call Context.getVariableResolver() call Context.getVariableResolver() call Context.getVariableResolver() call Context.getVariableResolver() call Context.getVariableResolver() if == = call org.apache.solr.handler.dataimport.VariableResolver.replaceTokens(String) call org.apache.solr.handler.dataimport.VariableResolver.replaceTokens(String) call org.apache.solr.handler.dataimport.VariableResolver.replaceTokens(String) call org.apache.solr.handler.dataimport.VariableResolver.replaceTokens(String) call org.apache.solr.handler.dataimport.VariableResolver.replaceTokens(String) call Context.getEntityAttribute() call Context.getEntityAttribute() call Context.getEntityAttribute() call Context.getEntityAttribute() call Context.getEntityAttribute() if == = = call Context.getEntityAttribute() call Context.getEntityAttribute() call Context.getEntityAttribute() call Context.getEntityAttribute() call Context.getEntityAttribute() call EntityProcessor.init() call EntityProcessor.init() call EntityProcessor.init() call EntityProcessor.init() call EntityProcessor.init() String ScriptTransformer String Class decl String String Method String decl_stmt java.lang.String = call Context.getEntityAttribute() call Context.getEntityAttribute() call Context.getEntityAttribute() call Context.getEntityAttribute() call Context.getEntityAttribute() if == = return decl_stmt java.lang.String = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) = new < public public if != && = call org.apache.solr.handler.dataimport.DocBuilder.getDebugLogger() call org.apache.solr.handler.dataimport.DocBuilder.getDebugLogger() call org.apache.solr.handler.dataimport.DocBuilder.getDebugLogger() call org.apache.solr.handler.dataimport.DocBuilder.getDebugLogger() call org.apache.solr.handler.dataimport.DocBuilder.getDebugLogger() return for : decl_stmt java.lang.String = if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt org.apache.solr.handler.dataimport.ScriptTransformer = new call org.apache.solr.handler.dataimport.ScriptTransformer.setFunctionName(String) call org.apache.solr.handler.dataimport.ScriptTransformer.setFunctionName(String) call org.apache.solr.handler.dataimport.ScriptTransformer.setFunctionName(String) call org.apache.solr.handler.dataimport.ScriptTransformer.setFunctionName(String) call org.apache.solr.handler.dataimport.ScriptTransformer.setFunctionName(String) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() continue try decl_stmt java.lang.Class = call Context.getSolrCore() call Context.getSolrCore() call Context.getSolrCore() call Context.getSolrCore() call Context.getSolrCore() if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.Class.newInstance() call java.lang.Class.newInstance() call java.lang.Class.newInstance() call java.lang.Class.newInstance() call java.lang.Class.newInstance() else decl_stmt com.sun.jdi.Method = call Class.getMethod() call Class.getMethod() call Class.getMethod() call Class.getMethod() call Class.getMethod() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new catch decl_stmt java.lang.String = + + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + public public if != && = call org.apache.solr.handler.dataimport.DocBuilder.getDebugLogger() call org.apache.solr.handler.dataimport.DocBuilder.getDebugLogger() call org.apache.solr.handler.dataimport.DocBuilder.getDebugLogger() call org.apache.solr.handler.dataimport.DocBuilder.getDebugLogger() call org.apache.solr.handler.dataimport.DocBuilder.getDebugLogger() return public public < try return catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + throw new decl Map protected < protected < decl_stmt java.util.Map < = call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() = return boolean decl List Object decl List VariableResolver Map decl Map protected < protected < < if == return if == if == return decl_stmt java.util.Map < = decl_stmt java.util.List < < = decl_stmt boolean = decl_stmt org.apache.solr.handler.dataimport.VariableResolver = call Context.getVariableResolver() call Context.getVariableResolver() call Context.getVariableResolver() call Context.getVariableResolver() call Context.getVariableResolver() for : if break try if != decl_stmt java.util.List < < = new <> for < : call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) decl_stmt java.lang.Object = if == continue if instanceof decl_stmt java.util.Map = = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if instanceof call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() else call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() = else call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) call org.apache.solr.handler.dataimport.VariableResolver.addNamespace(String,Map) decl_stmt java.lang.Object = if == return if instanceof decl_stmt java.util.Map = = = else if instanceof = else call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() if else if if == return else = return private private return != && decl Map public < public < if != return while decl_stmt java.util.Map < = try = call EntityProcessor.nextRow() call EntityProcessor.nextRow() call EntityProcessor.nextRow() call EntityProcessor.nextRow() call EntityProcessor.nextRow() catch if else + return if == return else = if != call org.apache.solr.handler.dataimport.EntityProcessor.postTransform(Map) call org.apache.solr.handler.dataimport.EntityProcessor.postTransform(Map) call org.apache.solr.handler.dataimport.EntityProcessor.postTransform(Map) call org.apache.solr.handler.dataimport.EntityProcessor.postTransform(Map) call org.apache.solr.handler.dataimport.EntityProcessor.postTransform(Map) return decl Map public < public < decl_stmt java.util.Map < = call EntityProcessor.nextModifiedRowKey() call EntityProcessor.nextModifiedRowKey() call EntityProcessor.nextModifiedRowKey() call EntityProcessor.nextModifiedRowKey() call EntityProcessor.nextModifiedRowKey() = = return decl Map public < public < decl_stmt java.util.Map < = call EntityProcessor.nextDeletedRowKey() call EntityProcessor.nextDeletedRowKey() call EntityProcessor.nextDeletedRowKey() call EntityProcessor.nextDeletedRowKey() call EntityProcessor.nextDeletedRowKey() = = return public < public < return call EntityProcessor.nextModifiedParentRowKey() call EntityProcessor.nextModifiedParentRowKey() call EntityProcessor.nextModifiedParentRowKey() call EntityProcessor.nextModifiedParentRowKey() call EntityProcessor.nextModifiedParentRowKey() public public call EntityProcessor.destroy() call EntityProcessor.destroy() call EntityProcessor.destroy() call EntityProcessor.destroy() call EntityProcessor.destroy() public public return call Context.getVariableResolver() call Context.getVariableResolver() call Context.getVariableResolver() call Context.getVariableResolver() call Context.getVariableResolver() public public return public public call EntityProcessor.close() call EntityProcessor.close() call EntityProcessor.close() call EntityProcessor.close() call EntityProcessor.close() public public return public < public < return public public return public public = public public return public public =