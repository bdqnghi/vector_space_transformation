org.apache.lucene.search java.io.IOException import java.util.Map import org.apache.lucene.search.TermAutomatonQuery.EnumAndScorer import org.apache.lucene.search.TermAutomatonQuery.TermAutomatonWeight import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.PriorityQueue import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.automaton.Automaton import org.apache.lucene.util.automaton.RunAutomaton import class org.apache.lucene.search.TermAutomatonScorer super super extends long decl EnumAndScorer int decl PriorityQueue decl EnumAndScorer decl Map decl Similarity int int decl PosState int RunAutomaton decl PriorityQueue decl SimScorer protected protected return < protected protected return < private private assert == assert call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() > ++ = call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() = while call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() > && call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() == ++ = call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() private private for = < ++ call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() = EnumAndScorer EnumAndScorer public public return new public public return public public return public public throws for = < ++ decl_stmt EnumAndScorer = if call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() != = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() - = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() return public public throws if call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() > decl_stmt EnumAndScorer = call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() while call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() < if call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() != = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() - = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() = call decl PriorityQueue.updateTop() call decl PriorityQueue.updateTop() call decl PriorityQueue.updateTop() call decl PriorityQueue.updateTop() call decl PriorityQueue.updateTop() for = < ++ decl_stmt EnumAndScorer = if call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() != = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() - = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() return private private throws assert == assert call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() > while if == return if > return for = < ++ decl_stmt EnumAndScorer = if call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() != = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() - = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() public public return public public return EnumAndScorer public public throws for = < ++ decl_stmt EnumAndScorer = if call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() != = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() - = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() return EnumAndScorer EnumAndScorer public public throws if call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() > decl_stmt EnumAndScorer = call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() while call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() < if call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() != = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() - = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() = call decl PriorityQueue.updateTop() call decl PriorityQueue.updateTop() call decl PriorityQueue.updateTop() call decl PriorityQueue.updateTop() call decl PriorityQueue.updateTop() for = < ++ decl_stmt EnumAndScorer = if call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() != = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() - = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() return EnumAndScorer private private throws assert == assert call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() call decl PriorityQueue.top() > while if == return if > return for = < ++ decl_stmt EnumAndScorer = if call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() != = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() - = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() private private return - int private private decl_stmt int = - for = < ++ = = EnumAndScorer decl PosState int PosState PosState int int int int private private throws = for = < ++ call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() decl_stmt int = - = - while call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() != decl_stmt EnumAndScorer = call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() call decl PriorityQueue.pop() decl_stmt int final final = if == - = if + - >= decl_stmt PosState = new + - for = < ++ = new = decl_stmt PosState decl_stmt PosState if != - if != - decl_stmt int = while < = if == && > = break = + for = < ++ decl_stmt int = call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) if != - call PosState.add() call PosState.add() call PosState.add() call PosState.add() call PosState.add() ++ = = + if == && == = = + for = < ++ decl_stmt int = call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) if != - call PosState.add() call PosState.add() call PosState.add() call PosState.add() call PosState.add() if call RunAutomaton.isAccept() call RunAutomaton.isAccept() call RunAutomaton.isAccept() call RunAutomaton.isAccept() call RunAutomaton.isAccept() ++ decl_stmt int = call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) call org.apache.lucene.util.automaton.RunAutomaton.step(int,int) if != - call PosState.add() call PosState.add() call PosState.add() call PosState.add() call PosState.add() if call RunAutomaton.isAccept() call RunAutomaton.isAccept() call RunAutomaton.isAccept() call RunAutomaton.isAccept() call RunAutomaton.isAccept() ++ if > = call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() call EnumAndScorer.posEnum() -- call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() call decl PriorityQueue.add() = decl_stmt int = + - for = <= ++ = public public return + + public public return public public return public public return call decl Similarity.score() call decl Similarity.score() call decl Similarity.score() call decl Similarity.score() call decl Similarity.score() public public if == = ++ =