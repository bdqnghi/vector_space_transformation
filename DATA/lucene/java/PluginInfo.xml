org.apache.solr.core org.apache.solr.common.util.NamedList import org.apache.solr.util.DOMUtil import org.w3c.dom.Node import org.w3c.dom.NodeList import java.util.* import static static java.util.Arrays.asList import static static java.util.Collections.unmodifiableList import static static java.util.Collections.unmodifiableMap import static static org.apache.solr.common.params.CoreAdminParams.NAME import static static org.apache.solr.schema.FieldType.CLASS_NAME import class org.apache.solr.core.PluginInfo super super implements String String decl HashSet String NamedList String boolean decl List decl Map PluginInfo NodeList Node decl List PluginInfo private < private < decl_stmt java.util.List < = new <> decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt org.apache.lucene.replicator.nrt.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() if call Node.getNodeType() call Node.getNodeType() call Node.getNodeType() call Node.getNodeType() call Node.getNodeType() != continue if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() call Node.getNodeName() continue decl_stmt org.apache.solr.core.PluginInfo = new if call org.apache.solr.core.PluginInfo.isEnabled() call org.apache.solr.core.PluginInfo.isEnabled() call org.apache.solr.core.PluginInfo.isEnabled() call org.apache.solr.core.PluginInfo.isEnabled() call org.apache.solr.core.PluginInfo.isEnabled() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() > : StringBuilder public public decl_stmt java.lang.StringBuilder = new if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + if != && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() String public public decl_stmt java.lang.String = call boolean.get() call boolean.get() call boolean.get() call boolean.get() call boolean.get() return == || public public return call boolean.get() call boolean.get() call boolean.get() call boolean.get() call boolean.get() decl List public public decl_stmt java.util.List < = return call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() : call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() Object List LinkedHashMap ArrayList public < public < decl_stmt java.util.LinkedHashMap = new if != call LinkedHashMap.putAll() call LinkedHashMap.putAll() call LinkedHashMap.putAll() call LinkedHashMap.putAll() call LinkedHashMap.putAll() call decl List.asMap() call decl List.asMap() call decl List.asMap() call decl List.asMap() call decl List.asMap() if != for : decl_stmt java.lang.Object = call java.util.LinkedHashMap.get(Object) call java.util.LinkedHashMap.get(Object) call java.util.LinkedHashMap.get(Object) call java.util.LinkedHashMap.get(Object) call java.util.LinkedHashMap.get(Object) if == call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() else if instanceof decl_stmt java.util.List = call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) else decl_stmt java.util.ArrayList = new call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call java.util.ArrayList.add(E) call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() return decl List public < public < if call PluginInfo.isEmpty() call PluginInfo.isEmpty() call PluginInfo.isEmpty() call PluginInfo.isEmpty() call PluginInfo.isEmpty() return decl_stmt java.util.List < = new <> for : if call decl Map.equals() call decl Map.equals() call decl Map.equals() call decl Map.equals() call decl Map.equals() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return PluginInfo public public decl_stmt org.apache.solr.core.PluginInfo = new call decl List.clone() call decl List.clone() call decl List.clone() call decl List.clone() call decl List.clone() = return