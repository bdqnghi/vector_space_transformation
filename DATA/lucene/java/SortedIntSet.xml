org.apache.lucene.util.automaton java.util.TreeMap import java.util.Map import org.apache.lucene.util.ArrayUtil import class org.apache.lucene.util.automaton.SortedIntSet int decl Map int int int decl int decl int boolean int Integer Integer public public if decl_stmt java.lang.Integer final final = decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + return if == = + = + for = < ++ if == ++ return else if < decl_stmt int = - while >= + = + = -- = = ++ return = = ++ if == = for = < ++ call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() int int public public if decl_stmt int final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() - if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == = = return for = < ++ if == -- if == decl_stmt int final final = - while < = + = + ++ = return assert int public public if if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() > decl_stmt int final final = call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() = new = new = call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() = for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() = * + ++ = else = for = < ++ = * + decl int public public decl_stmt int final final final = new return new public public return FrozenIntSet public public if == return if ! instanceof return decl_stmt FrozenIntSet = if != return if != return for = < ++ if != return return StringBuilder public public decl_stmt java.lang.StringBuilder = new for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public return SortedIntSet public public if == return if instanceof decl_stmt FrozenIntSet = if != return if != return for = < ++ if != return return else if instanceof decl_stmt org.apache.lucene.util.automaton.SortedIntSet = if != return if != return for = < ++ if != return return return StringBuilder public public decl_stmt java.lang.StringBuilder = new for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()