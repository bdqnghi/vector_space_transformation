org.apache.lucene.index java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.List import java.util.Locale import java.util.Map import class org.apache.lucene.index.LogMergePolicy super super extends int int long int long int double double boolean long protected protected return != && protected protected if public public return public public if < throw new = public public = public public return int protected protected throws if decl_stmt int = assert <= return - long else return protected protected throws if return return SegmentCommitInfo Boolean boolean SegmentCommitInfo int int protected protected < throws decl_stmt int final final = decl_stmt int = decl_stmt org.apache.lucene.index.SegmentCommitInfo = decl_stmt boolean = for = < && <= ++ decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = decl_stmt java.lang.Boolean final final = if != = ++ = return <= && != || ! || SegmentCommitInfo int decl List MergeSpecification private private throws decl_stmt MergeSpecification = new decl_stmt java.util.List final final final < = decl_stmt int = - while >= decl_stmt org.apache.lucene.index.SegmentCommitInfo = if > || > if + + + + + + if - - > || != - && ! + call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() + = else if - == call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() = -- if > && ++ + < || ! call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() return call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() == : int decl List long int long MergeSpecification private private throws decl_stmt MergeSpecification = new decl_stmt java.util.List final final final < = while - + >= call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() - -= if == call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() if == if > || ! call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() else if > decl_stmt int final final = - + decl_stmt long = decl_stmt int = for = < - + ++ decl_stmt long = for = < ++ += + if == || < * - && < = = call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() + return call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() call MergeSpecification.merges() == : SegmentCommitInfo int boolean public public < throws assert > if + + + if if return decl_stmt int = while > decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = -- if != ++ break if == if return if == && == && if return decl_stmt boolean = for = < ++ decl_stmt org.apache.lucene.index.SegmentCommitInfo = if > || > = break if return else return SegmentCommitInfo int decl List int int MergeSpecification public public throws decl_stmt java.util.List final final final < = decl_stmt int final final = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if + + decl_stmt MergeSpecification = new decl_stmt int = - assert != for = < ++ decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = decl_stmt int = if > if + + if == - = else if - == if + + + - + call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() = else if != - if + + + - + call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() = - if != - if + + + - + call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() return public public return SegmentCommitInfo int int String float int float boolean SegmentInfoAndLevel int float decl List float boolean decl List long int decl Collection MergeSpecification float long public public throws decl_stmt int final final = if + + decl_stmt java.util.List final final final < = new <> decl_stmt float final final = float decl_stmt java.util.Collection final final final < = for = < ++ decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = decl_stmt long = if < = decl_stmt SegmentInfoAndLevel final final = new float / call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if decl_stmt long final final = decl_stmt java.lang.String = call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() : if >= += + + + + + / / + decl_stmt float final final if <= = float else = / decl_stmt MergeSpecification = decl_stmt int final final = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = while < decl_stmt float = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for = + < ++ decl_stmt float final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if > = decl_stmt float if <= = - else = - if < && >= = decl_stmt int = - while >= if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() >= break -- if + + + + + + - + decl_stmt int = + while <= + decl_stmt boolean = decl_stmt boolean = for = < ++ decl_stmt org.apache.lucene.index.SegmentCommitInfo final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() |= >= || >= if call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() call decl Collection.contains() = break if else if ! if == = new decl_stmt java.util.List final final final < = new <> - for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() assert call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if + + + + + call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() call MergeSpecification.add() new else if + + + + = = + = + return public public = public public return StringBuilder public public decl_stmt java.lang.StringBuilder = new + + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()