org.apache.solr.handler.dataimport java.io.File import java.io.FileInputStream import java.io.FileOutputStream import java.io.InputStream import java.io.InputStreamReader import java.io.OutputStreamWriter import java.io.Writer import java.lang.invoke.MethodHandles import java.nio.charset.StandardCharsets import java.security.AccessControlException import java.text.ParseException import java.text.SimpleDateFormat import java.util.Date import java.util.HashMap import java.util.Locale import java.util.Map import java.util.Properties import org.apache.lucene.util.IOUtils import org.apache.solr.core.SolrCore import org.apache.solr.core.SolrResourceLoader import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.handler.data.DataImportHandlerException.SEVERE import class org.apache.solr.handler.dataimport.SimplePropertiesWriter super super extends String Logger SimpleDateFormat Locale String String String String String String String public public < if != = else if != = + else = if != decl_stmt java.lang.String = for : if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = break if == throw new + else = if != = new else = new SolrCore protected protected < if != = else decl_stmt org.apache.solr.core.SolrCore = if == = else = call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() File private private decl_stmt File final final if new || == = new else = new new return File public public decl_stmt File = try return call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() call File.canWrite() call File.canWrite() call File.canWrite() call File.canWrite() call File.canWrite() : call File.getParentFile() call File.getParentFile() call File.getParentFile() call File.getParentFile() call File.getParentFile() catch return public public return call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) call java.text.SimpleDateFormat.format(Date,StringBuffer,FieldDelegate) protected protected try return call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) call java.text.SimpleDateFormat.parse(String,ParsePosition) catch throw new + + + call java.text.SimpleDateFormat.toLocalizedPattern() call java.text.SimpleDateFormat.toLocalizedPattern() call java.text.SimpleDateFormat.toLocalizedPattern() call java.text.SimpleDateFormat.toLocalizedPattern() call java.text.SimpleDateFormat.toLocalizedPattern() + + Properties int String String String protected protected < decl_stmt java.util.Properties = new for < : decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt int = call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) if != - && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > + = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && instanceof = else = call Properties.put() call Properties.put() call Properties.put() call Properties.put() call Properties.put() return Object String decl Map protected < protected < decl_stmt java.util.Map < = new <> for < : decl_stmt java.lang.String = decl_stmt java.lang.Object = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return Writer Properties Properties public public < decl_stmt Writer = decl_stmt java.util.Properties = decl_stmt java.util.Properties = try call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() = new new call java.util.Properties.store(Writer,String) call java.util.Properties.store(Writer,String) call java.util.Properties.store(Writer,String) call java.util.Properties.store(Writer,String) call java.util.Properties.store(Writer,String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + catch throw new finally String InputStream Properties public < public < decl_stmt java.util.Properties = new decl_stmt java.io.InputStream = try decl_stmt java.lang.String = if != && ! call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) += += = new call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + finally return