org.apache.solr.core org.apache.lucene.index.IndexCommit import org.apache.lucene.index.IndexDeletionPolicy import org.apache.lucene.index.IndexWriter import org.apache.lucene.store.Directory import org.apache.solr.update.SolrIndexWriter import org.slf4j.Logger import org.slf4j.LoggerFactory import java.io.IOException import java.lang.invoke.MethodHandles import java.util.* import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import class org.apache.solr.core.IndexDeletionPolicyWrapper super super extends decl Map Logger IndexDeletionPolicy decl Map IndexCommit decl ConcurrentHashMap public public return public public return Long long public public decl_stmt long = + for decl_stmt java.lang.Long = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if == || <= call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() break = long private private decl_stmt long = for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if < call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl List private < private < < extends extends decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return AtomicInteger public synchronized public synchronized decl_stmt java.util.concurrent.atomic.AtomicInteger = call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() if == = new call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() AtomicInteger public synchronized public synchronized decl_stmt java.util.concurrent.atomic.AtomicInteger = call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() if == return if call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() <= call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() decl List public public < extends extends throws decl_stmt java.util.List < = call IndexDeletionPolicy.onInit() call IndexDeletionPolicy.onInit() call IndexDeletionPolicy.onInit() call IndexDeletionPolicy.onInit() call IndexDeletionPolicy.onInit() decl List public public < extends extends throws decl_stmt java.util.List < = call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() public public return public public throws return public public return Long Long public public decl_stmt java.lang.Long = decl_stmt java.lang.Long = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != && < return if call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() return public public return public public return public public return public public return public public return public public throws return public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() public < public < return decl Map private private < decl_stmt java.util.Map < = new <> for : if ! call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = if ! = - decl Map String public static public static throws decl_stmt java.util.Map final final final < = decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return else return public public return