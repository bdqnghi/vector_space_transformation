org.apache.lucene.util.automaton org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.RamUsageEstimator import java.util.ArrayList import java.util.Arrays import java.util.BitSet import java.util.Collection import java.util.HashMap import java.util.HashSet import java.util.LinkedList import java.util.List import java.util.Map import java.util.Set import class org.apache.lucene.util.automaton.Operations int static public static public return Automaton int Automaton Automaton int int int int Automaton Transition static public static public < decl_stmt org.apache.lucene.util.automaton.Automaton = new for : if call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() == call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() return decl_stmt int = call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() for = < ++ call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() decl_stmt int = decl_stmt org.apache.lucene.util.automaton.Transition = new for = < ++ decl_stmt org.apache.lucene.util.automaton.Automaton = decl_stmt int = call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() decl_stmt org.apache.lucene.util.automaton.Automaton = == - : + for = < ++ decl_stmt int = call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) for = < ++ call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) + + if call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) decl_stmt org.apache.lucene.util.automaton.Automaton = decl_stmt int = decl_stmt int = + while if != = call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) call org.apache.lucene.util.automaton.Automaton.initTransition(int,Transition) for = < ++ call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.getNextTransition(Transition) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) + + + if call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) call org.apache.lucene.util.automaton.Automaton.isAccept(int) += call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() = == - : + ++ else break else call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) + break += if call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() == call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() return Automaton static public static public decl_stmt org.apache.lucene.util.automaton.Automaton = new call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) if > call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.addEpsilon(int,int) call org.apache.lucene.util.automaton.Automaton.addEpsilon(int,int) call org.apache.lucene.util.automaton.Automaton.addEpsilon(int,int) call org.apache.lucene.util.automaton.Automaton.addEpsilon(int,int) call org.apache.lucene.util.automaton.Automaton.addEpsilon(int,int) call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() return Transition decl Automaton decl Builder int static public static public if == return decl_stmt org.apache.lucene.util.fst.Builder = new call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.copy() call decl Automaton.copy() call decl Automaton.copy() call decl Automaton.copy() call decl Automaton.copy() decl_stmt org.apache.lucene.util.automaton.Transition = new decl_stmt int = for = < ++ call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() + decl_stmt int = for = < ++ if = for = < ++ call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() + + return call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() decl List static public static public if == return decl_stmt java.util.List < = new <> while -- > call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl Set decl List Automaton decl Automaton decl Builder static public static public if > return decl_stmt org.apache.lucene.util.automaton.Automaton if == = else if == = new call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.copy(Automaton) else decl_stmt java.util.List < = new <> for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = decl_stmt java.util.Set < = decl_stmt org.apache.lucene.util.fst.Builder = new call decl Automaton.copy() call decl Automaton.copy() call decl Automaton.copy() call decl Automaton.copy() call decl Automaton.copy() for = < ++ decl_stmt int = call decl Automaton.getNumStates() call decl Automaton.getNumStates() call decl Automaton.getNumStates() call decl Automaton.getNumStates() call decl Automaton.getNumStates() call decl Automaton.copy() call decl Automaton.copy() call decl Automaton.copy() call decl Automaton.copy() call decl Automaton.copy() for : call decl Automaton.addEpsilon() call decl Automaton.addEpsilon() call decl Automaton.addEpsilon() call decl Automaton.addEpsilon() call decl Automaton.addEpsilon() = return call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() BitSet int decl Set int private static < private static < decl_stmt int = decl_stmt org.apache.lucene.util.BitSet = decl_stmt java.util.Set < = new < decl_stmt int = while < && = call java.util.BitSet.nextSetBit(int) call java.util.BitSet.nextSetBit(int) call java.util.BitSet.nextSetBit(int) call java.util.BitSet.nextSetBit(int) call java.util.BitSet.nextSetBit(int) != - call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() + ++ return int static public static public = decl_stmt int = for = < ++ ! return static public static public if || == return if return return Automaton int int decl Transition decl Transition decl Transition decl Transition StatePair StatePair StatePair decl HashMap decl LinkedList static public static public if == return if == return if == return decl_stmt org.apache.lucene.util.automaton.Transition = decl_stmt org.apache.lucene.util.automaton.Transition = decl_stmt org.apache.lucene.util.automaton.Automaton = new call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() decl_stmt java.util.LinkedList < = new <> decl_stmt HashMap < = new <> decl_stmt org.apache.lucene.util.automaton.StatePair = new call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() while call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() > = call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) && decl_stmt org.apache.lucene.util.automaton.Transition = decl_stmt org.apache.lucene.util.automaton.Transition = for = = < ++ while < && < ++ for = < && >= ++ if >= decl_stmt org.apache.lucene.util.automaton.StatePair = new decl_stmt org.apache.lucene.util.automaton.StatePair = call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() if == = call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() = decl_stmt int = > : decl_stmt int = < : call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() return public static public static if == return return && int BitSet int public static public static decl_stmt org.apache.lucene.util.BitSet = decl_stmt int = call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() call BitSet.cardinality() decl_stmt int = assert <= : + + + + + return < BitSet BitSet public static public static decl_stmt org.apache.lucene.util.BitSet = decl_stmt org.apache.lucene.util.BitSet = call java.util.BitSet.andNot(BitSet) call java.util.BitSet.andNot(BitSet) call java.util.BitSet.andNot(BitSet) call java.util.BitSet.andNot(BitSet) call java.util.BitSet.andNot(BitSet) return call java.util.BitSet.isEmpty() call java.util.BitSet.isEmpty() call java.util.BitSet.isEmpty() call java.util.BitSet.isEmpty() call java.util.BitSet.isEmpty() == BitSet BitSet public static public static decl_stmt org.apache.lucene.util.BitSet = decl_stmt org.apache.lucene.util.BitSet = call java.util.BitSet.andNot(BitSet) call java.util.BitSet.andNot(BitSet) call java.util.BitSet.andNot(BitSet) call java.util.BitSet.andNot(BitSet) call java.util.BitSet.andNot(BitSet) return call java.util.BitSet.isEmpty() call java.util.BitSet.isEmpty() call java.util.BitSet.isEmpty() call java.util.BitSet.isEmpty() call java.util.BitSet.isEmpty() == StatePair decl Transition decl Transition decl Transition decl Transition StatePair int decl HashSet decl LinkedList public static public static if == throw new if == throw new assert == assert == if == return else if == return decl_stmt org.apache.lucene.util.automaton.Transition = decl_stmt org.apache.lucene.util.automaton.Transition = decl_stmt java.util.LinkedList < = new <> decl_stmt java.util.HashSet < = new <> decl_stmt org.apache.lucene.util.automaton.StatePair = new call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() while call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() > = call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() if && == return decl_stmt org.apache.lucene.util.automaton.Transition = decl_stmt org.apache.lucene.util.automaton.Transition = for = = < ++ while < && < ++ decl_stmt int = = for = < && >= ++ if > return if < = + else = = decl_stmt org.apache.lucene.util.automaton.StatePair = new if ! call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() if <= return return public static public static return Automaton int public static public static < decl_stmt org.apache.lucene.util.automaton.Automaton = new call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() for : call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.copy(Automaton) call org.apache.lucene.util.automaton.Automaton.copy(Automaton) decl_stmt int = for : if == continue call org.apache.lucene.util.automaton.Automaton.addEpsilon(int,int) call org.apache.lucene.util.automaton.Automaton.addEpsilon(int,int) call org.apache.lucene.util.automaton.Automaton.addEpsilon(int,int) call org.apache.lucene.util.automaton.Automaton.addEpsilon(int,int) call org.apache.lucene.util.automaton.Automaton.addEpsilon(int,int) += call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() return public public if < + = + = + = + = += public public return - public public = = = public public return == public public return PointTransitions decl PointTransitions private private if == decl_stmt PointTransitions final final final = new + = decl_stmt PointTransitions = if == = = new call PointTransitions.reset() call PointTransitions.reset() call PointTransitions.reset() call PointTransitions.reset() call PointTransitions.reset() ++ return PointTransitions Integer private private if decl_stmt java.lang.Integer final final = decl_stmt PointTransitions = if == = return else for = < ++ if == return decl_stmt PointTransitions final final = if == assert == for = < ++ = return public public if = = public public if > public public + StringBuilder public public decl_stmt java.lang.StringBuilder = new for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) / / return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl int int decl Automaton int int int decl FrozenIntSet Transition decl FrozenIntSet decl SortedIntSet int int SortedIntSet decl LinkedList Integer PointTransitionSet decl FrozenIntSet decl SortedIntSet decl Builder decl Map public static public static if return if <= return decl_stmt org.apache.lucene.util.fst.Builder = new decl_stmt FrozenIntSet = new call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() decl_stmt java.util.LinkedList < = new <> decl_stmt java.util.Map < = new <> call decl SortedIntSet.add() call decl SortedIntSet.add() call decl SortedIntSet.add() call decl SortedIntSet.add() call decl SortedIntSet.add() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl FrozenIntSet.put() call decl FrozenIntSet.put() call decl FrozenIntSet.put() call decl FrozenIntSet.put() call decl FrozenIntSet.put() decl_stmt PointTransitionSet final final = new decl_stmt org.apache.lucene.util.automaton.SortedIntSet final final = new decl_stmt org.apache.lucene.util.automaton.Transition = new while call decl SortedIntSet.size() call decl SortedIntSet.size() call decl SortedIntSet.size() call decl SortedIntSet.size() call decl SortedIntSet.size() > decl_stmt FrozenIntSet = call decl SortedIntSet.removeFirst() call decl SortedIntSet.removeFirst() call decl SortedIntSet.removeFirst() call decl SortedIntSet.removeFirst() call decl SortedIntSet.removeFirst() for = < ++ decl_stmt int final final = decl_stmt int = for = < ++ call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() if == continue call decl LinkedList.sort() call decl LinkedList.sort() call decl LinkedList.sort() call decl LinkedList.sort() call decl LinkedList.sort() decl_stmt int = - decl_stmt int = decl_stmt int final final = for = < ++ decl_stmt int final final = if > assert != - call decl Map.computeHash() call decl Map.computeHash() call decl Map.computeHash() call decl Map.computeHash() call decl Map.computeHash() decl_stmt java.lang.Integer = call decl FrozenIntSet.get() call decl FrozenIntSet.get() call decl FrozenIntSet.get() call decl FrozenIntSet.get() call decl FrozenIntSet.get() if == = call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() if >= throw new decl_stmt FrozenIntSet final final final final final = call decl Map.freeze() call decl Map.freeze() call decl Map.freeze() call decl Map.freeze() call decl Map.freeze() call decl SortedIntSet.add() call decl SortedIntSet.add() call decl SortedIntSet.add() call decl SortedIntSet.add() call decl SortedIntSet.add() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() > call decl FrozenIntSet.put() call decl FrozenIntSet.put() call decl FrozenIntSet.put() call decl FrozenIntSet.put() call decl FrozenIntSet.put() else assert > : == call decl Automaton.isAccept() call decl Automaton.isAccept() call decl Automaton.isAccept() call decl Automaton.isAccept() call decl Automaton.isAccept() : + + + call decl Automaton.isAccept() call decl Automaton.isAccept() call decl Automaton.isAccept() call decl Automaton.isAccept() call decl Automaton.isAccept() + + call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() - decl_stmt int = decl_stmt int = for = < += decl_stmt int = call decl Map.decr() call decl Map.decr() call decl Map.decr() call decl Map.decr() call decl Map.decr() -= : = = = for = < += decl_stmt int = call decl Map.incr() call decl Map.incr() call decl Map.incr() call decl Map.incr() call decl Map.incr() += : = = call decl LinkedList.reset() call decl LinkedList.reset() call decl LinkedList.reset() call decl LinkedList.reset() call decl LinkedList.reset() assert == : + decl_stmt org.apache.lucene.util.automaton.Automaton = call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() assert call decl int.isDeterministic() call decl int.isDeterministic() call decl int.isDeterministic() call decl int.isDeterministic() call decl int.isDeterministic() return int BitSet int decl LinkedList Transition public static public static if == return if == && == return if == return decl_stmt java.util.LinkedList < = new <> decl_stmt org.apache.lucene.util.BitSet = new call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) decl_stmt org.apache.lucene.util.automaton.Transition = new while call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() == decl_stmt int = call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() if return decl_stmt int = for = < ++ if call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) == call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) return public static public static return Transition public static public static if && == decl_stmt org.apache.lucene.util.automaton.Transition = new return == && == && == return int int public static public static assert decl_stmt int = for = = < += decl_stmt int = = if == - return = return int int public static public static assert decl_stmt int = for = < ++ decl_stmt int = + if == - return = return BitSet private static private static decl_stmt org.apache.lucene.util.BitSet = call java.util.BitSet.and(BitSet) call java.util.BitSet.and(BitSet) call java.util.BitSet.and(BitSet) call java.util.BitSet.and(BitSet) call java.util.BitSet.and(BitSet) return int BitSet int int Transition decl LinkedList private static private static decl_stmt int = decl_stmt org.apache.lucene.util.BitSet = new if == return decl_stmt java.util.LinkedList < = new <> call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() decl_stmt org.apache.lucene.util.automaton.Transition = new while call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() == decl_stmt int = call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() decl_stmt int = for = < ++ if call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) == call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() return int decl Automaton BitSet Transition decl LinkedList int decl Builder BitSet Automaton private static private static decl_stmt org.apache.lucene.util.fst.Builder = new decl_stmt org.apache.lucene.util.automaton.Transition = new decl_stmt int = for = < ++ call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() for = < ++ decl_stmt int = for = < ++ call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() decl_stmt org.apache.lucene.util.automaton.Automaton = call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() decl_stmt java.util.LinkedList < = new <> decl_stmt org.apache.lucene.util.BitSet = new decl_stmt org.apache.lucene.util.BitSet = decl_stmt int = while < && = call java.util.BitSet.nextSetBit(int) call java.util.BitSet.nextSetBit(int) call java.util.BitSet.nextSetBit(int) call java.util.BitSet.nextSetBit(int) call java.util.BitSet.nextSetBit(int) != - call decl LinkedList.set() call decl LinkedList.set() call decl LinkedList.set() call decl LinkedList.set() call decl LinkedList.set() call Automaton.add() call Automaton.add() call Automaton.add() call Automaton.add() call Automaton.add() ++ while call Automaton.isEmpty() call Automaton.isEmpty() call Automaton.isEmpty() call Automaton.isEmpty() call Automaton.isEmpty() == = call Automaton.removeFirst() call Automaton.removeFirst() call Automaton.removeFirst() call Automaton.removeFirst() call Automaton.removeFirst() decl_stmt int = call int.initTransition() call int.initTransition() call int.initTransition() call int.initTransition() call int.initTransition() for = < ++ call int.getNextTransition() call int.getNextTransition() call int.getNextTransition() call int.getNextTransition() call int.getNextTransition() if call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() call decl LinkedList.get() == call decl LinkedList.set() call decl LinkedList.set() call decl LinkedList.set() call decl LinkedList.set() call decl LinkedList.set() call Automaton.add() call Automaton.add() call Automaton.add() call Automaton.add() call Automaton.add() return decl int int int BitSet Transition Automaton public static public static decl_stmt int = decl_stmt org.apache.lucene.util.BitSet = decl_stmt int = new decl_stmt org.apache.lucene.util.automaton.Automaton = new for = < ++ if call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) = call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) decl_stmt org.apache.lucene.util.automaton.Transition = new for = < ++ if call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) decl_stmt int = for = < ++ if call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() assert == return int int int static static decl_stmt int = decl_stmt int = while - > decl_stmt int = + >>> if > = else if < = else return return public static public static if == return return new new new int private static private static decl_stmt int = for = < ++ if || ! && ! return return decl HashSet int StringBuilder boolean Transition public static public static if == throw new decl_stmt java.lang.StringBuilder = new decl_stmt java.util.HashSet < = new <> decl_stmt int = decl_stmt boolean decl_stmt org.apache.lucene.util.automaton.Transition = new do = call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() if == && == if == && ! call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) call java.lang.StringBuilder.appendCodePoint(int) = = ! return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl HashSet BytesRefBuilder boolean int Transition public static public static decl_stmt org.apache.lucene.util.BytesRefBuilder = new decl_stmt java.util.HashSet < = new <> decl_stmt int = decl_stmt boolean decl_stmt org.apache.lucene.util.automaton.Transition = new do = call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() if == && == if == && ! call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) byte = = ! return call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() decl HashSet IntsRefBuilder int Transition public static public static if == throw new decl_stmt org.apache.lucene.util.IntsRefBuilder = new decl_stmt java.util.HashSet < = new <> decl_stmt int = decl_stmt org.apache.lucene.util.automaton.Transition = new while call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() if == if == if == && ! call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) call org.apache.lucene.util.IntsRefBuilder.append(int) = continue else if == return call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() return Automaton BytesRef public static public static decl_stmt org.apache.lucene.util.automaton.Automaton = decl_stmt org.apache.lucene.util.BytesRef = return int byte private static private static if <= return decl_stmt int = >> for = < + ++ decl_stmt byte = = * + - - * + - - = public static public static return decl Automaton int Transition int Automaton int decl Builder static static < if return new decl_stmt int = decl_stmt org.apache.lucene.util.fst.Builder = new call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() for = < ++ call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() decl_stmt org.apache.lucene.util.automaton.Transition = new for = < ++ decl_stmt int = for = < ++ call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() + + decl_stmt org.apache.lucene.util.automaton.Automaton = call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() decl_stmt int = decl_stmt org.apache.lucene.util.BitSet = while < && = call int.nextSetBit() call int.nextSetBit() call int.nextSetBit() call int.nextSetBit() call int.nextSetBit() != - call int.addEpsilon() call int.addEpsilon() call int.addEpsilon() call int.addEpsilon() call int.addEpsilon() + if != + ++ call int.finishState() call int.finishState() call int.finishState() call int.finishState() call int.finishState() return int int int Transition int Automaton static static decl_stmt org.apache.lucene.util.automaton.Automaton = new decl_stmt int = for = < ++ call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) decl_stmt int = call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) decl_stmt org.apache.lucene.util.automaton.Transition = new for = < ++ decl_stmt int = decl_stmt int = for = < ++ call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) if > call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) - if + > = + if <= call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() return int int decl int int decl int BitSet public static public static if == return new decl_stmt int = decl_stmt int = new decl_stmt org.apache.lucene.util.BitSet final final = new decl_stmt int = if < decl_stmt int = new = for = < / ++ decl_stmt int = = - - - - = return int Transition private static private static decl_stmt org.apache.lucene.util.automaton.Transition = new decl_stmt int = for = < ++ if ! = = ++ return