org.apache.solr.update java.io.IOException import java.util.Set import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.Term import org.apache.lucene.search.Explanation import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.Scorer import org.apache.lucene.search.Weight import org.apache.lucene.uninverting.UninvertingReader import org.apache.lucene.util.Bits import org.apache.solr.schema.IndexSchema import class org.apache.solr.update.DeleteByQueryWrapper super super extends IndexSchema Query return new call org.apache.solr.schema.IndexSchema.getUninversionMap(IndexReader) call org.apache.solr.schema.IndexSchema.getUninversionMap(IndexReader) call org.apache.solr.schema.IndexSchema.getUninversionMap(IndexReader) call org.apache.solr.schema.IndexSchema.getUninversionMap(IndexReader) call org.apache.solr.schema.IndexSchema.getUninversionMap(IndexReader) Query public public throws decl_stmt org.apache.lucene.search.Query = call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) call org.apache.lucene.search.Query.rewrite(IndexReader) if != return new else return LeafReader IndexSearcher Weight public public throws decl_stmt org.apache.lucene.index.LeafReader final final = decl_stmt org.apache.lucene.search.IndexSearcher final final = new decl_stmt org.apache.lucene.search.Weight final final = call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) call org.apache.lucene.search.Query.createWeight(IndexSearcher,boolean) return new public public < throw new public public throws throw new public public throws return call Weight.getValueForNormalization() call Weight.getValueForNormalization() call Weight.getValueForNormalization() call Weight.getValueForNormalization() call Weight.getValueForNormalization() public public call Weight.normalize() call Weight.normalize() call Weight.normalize() call Weight.normalize() call Weight.normalize() public public throws return call Weight.scorer() call Weight.scorer() call Weight.scorer() call Weight.scorer() call Weight.scorer() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() public public < throw new public public throws throw new public public throws return public public public public throws return public public return + call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() call org.apache.lucene.search.Query.toString() + int int public public decl_stmt int final final = decl_stmt int = = * + == : call org.apache.lucene.search.Query.hashCode() call org.apache.lucene.search.Query.hashCode() call org.apache.lucene.search.Query.hashCode() call org.apache.lucene.search.Query.hashCode() call org.apache.lucene.search.Query.hashCode() = * + == : call IndexSchema.hashCode() call IndexSchema.hashCode() call IndexSchema.hashCode() call IndexSchema.hashCode() call IndexSchema.hashCode() return DeleteByQueryWrapper public public if == return if ! return if != return decl_stmt org.apache.solr.update.DeleteByQueryWrapper = if == if != return else if ! call Query.equals() call Query.equals() call Query.equals() call Query.equals() call Query.equals() return if == if != return else if ! call IndexSchema.equals() call IndexSchema.equals() call IndexSchema.equals() call IndexSchema.equals() call IndexSchema.equals() return return