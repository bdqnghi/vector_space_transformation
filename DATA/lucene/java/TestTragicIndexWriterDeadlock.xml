org.apache.lucene.index java.util.concurrent.CountDownLatch import java.util.concurrent.atomic.AtomicBoolean import org.apache.lucene.document.Document import org.apache.lucene.store.MockDirectoryWrapper import org.apache.lucene.util.LuceneTestCase import class org.apache.lucene.index.TestTragicIndexWriterDeadlock super super extends IndexWriterConfig DirectoryReader CountDownLatch Thread DirectoryReader AtomicBoolean IndexWriter DirectoryReader DirectoryReader Thread MockDirectoryWrapper public public throws decl_stmt org.apache.lucene.store.MockDirectoryWrapper = decl_stmt org.apache.lucene.index.IndexWriterConfig = if call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() call org.apache.lucene.index.IndexWriterConfig.getMergeScheduler() instanceof call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) new protected protected return decl_stmt org.apache.lucene.index.IndexWriter final final = new decl_stmt java.util.concurrent.CountDownLatch final final = new decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new decl_stmt java.lang.Thread = new public public try call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) while call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() == call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) new call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) catch call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() decl_stmt org.apache.lucene.index.DirectoryReader final final = decl_stmt java.lang.Thread = new public public decl_stmt org.apache.lucene.index.DirectoryReader = try try call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) while call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() == decl_stmt org.apache.lucene.index.DirectoryReader = decl_stmt org.apache.lucene.index.DirectoryReader = if != = call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() finally call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() catch call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call org.apache.lucene.store.MockDirectoryWrapper.setRandomIOExceptionRate(double) call org.apache.lucene.store.MockDirectoryWrapper.setRandomIOExceptionRate(double) call org.apache.lucene.store.MockDirectoryWrapper.setRandomIOExceptionRate(double) call org.apache.lucene.store.MockDirectoryWrapper.setRandomIOExceptionRate(double) call org.apache.lucene.store.MockDirectoryWrapper.setRandomIOExceptionRate(double) call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call org.apache.lucene.store.MockDirectoryWrapper.setRandomIOExceptionRate(double) call org.apache.lucene.store.MockDirectoryWrapper.setRandomIOExceptionRate(double) call org.apache.lucene.store.MockDirectoryWrapper.setRandomIOExceptionRate(double) call org.apache.lucene.store.MockDirectoryWrapper.setRandomIOExceptionRate(double) call org.apache.lucene.store.MockDirectoryWrapper.setRandomIOExceptionRate(double) call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.store.MockDirectoryWrapper.close() call org.apache.lucene.store.MockDirectoryWrapper.close() call org.apache.lucene.store.MockDirectoryWrapper.close() call org.apache.lucene.store.MockDirectoryWrapper.close() call org.apache.lucene.store.MockDirectoryWrapper.close() protected protected return public public try while == new catch DirectoryReader DirectoryReader DirectoryReader public public decl_stmt org.apache.lucene.index.DirectoryReader = try try while == decl_stmt org.apache.lucene.index.DirectoryReader = decl_stmt org.apache.lucene.index.DirectoryReader = if != = call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() call DirectoryReader.decRef() finally call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() call DirectoryReader.close() catch