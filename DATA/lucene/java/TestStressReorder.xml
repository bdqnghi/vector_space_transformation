org.apache.solr.search org.noggit.ObjectBuilder import org.apache.solr.request.SolrQueryRequest import org.apache.solr.util.TestHarness import org.junit.BeforeClass import org.junit.Test import org.slf4j.Logger import org.slf4j.LoggerFactory import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import java.util.Random import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.atomic.AtomicLong import static static org.apache.solr.update.processor.DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM import class org.apache.solr.search.TestStressReorder super super extends Logger public static public static throws StringBuilder public static public static decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) == : call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() AtomicLong Random AtomicLong boolean int int boolean long decl Map long AtomicInteger long int int int long DocInfo Long int long int decl List List SolrQueryRequest Map String int DocInfo Thread int int int public public throws decl_stmt int final final = + decl_stmt int final final = + decl_stmt int final final = + decl_stmt int final final = decl_stmt int final final = + : decl_stmt int = + decl_stmt int final final = decl_stmt int final final = decl_stmt java.util.concurrent.atomic.AtomicLong final final = new decl_stmt int = + decl_stmt java.util.concurrent.atomic.AtomicInteger final final = new decl_stmt java.util.List < = new <> decl_stmt java.util.concurrent.atomic.AtomicLong final final = new for = < ++ decl_stmt java.lang.Thread = new + decl_stmt java.util.Random = new public public try while call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() > decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) if < if call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() <= decl_stmt java.util.Map < decl_stmt long synchronized = new <> = ++ if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < else synchronized if >= if + = = call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() continue decl_stmt int if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) else = decl_stmt boolean = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if = decl_stmt DocInfo = decl_stmt long = decl_stmt long = + decl_stmt long = call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if < + decl_stmt java.lang.Long = - if != - call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new - else if < + + decl_stmt java.lang.Long = + - if != - call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new - else decl_stmt java.lang.Long = if != call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new if if ! = catch call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) - call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for = < ++ decl_stmt java.lang.Thread = new + decl_stmt java.util.Random = new public public try while call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() >= decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < : call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt boolean = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < decl_stmt DocInfo if = else synchronized = if decl_stmt org.apache.solr.request.SolrQueryRequest if = else = + decl_stmt java.lang.String = decl_stmt java.util.Map = decl_stmt java.util.List = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) if call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() == else call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() decl_stmt long = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) decl_stmt long = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) if < || == && != call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + + + catch call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) - call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() for : call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) int DocInfo long long DocInfo decl Map Long long int boolean public public try while > decl_stmt int = if < if <= decl_stmt java.util.Map < decl_stmt long synchronized = new <> = ++ if < else synchronized if >= if + = = continue decl_stmt int if = else = decl_stmt boolean = if = decl_stmt DocInfo = decl_stmt long = decl_stmt long = + decl_stmt long = if if < + decl_stmt java.lang.Long = - if != - call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new - else if < + + decl_stmt java.lang.Long = + - if != - call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new - else decl_stmt java.lang.Long = if != call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new if if ! = catch - call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new DocInfo boolean int long long List SolrQueryRequest Map String public public try while >= decl_stmt int = < : decl_stmt boolean = < decl_stmt DocInfo if = else synchronized = if decl_stmt org.apache.solr.request.SolrQueryRequest if = else = + decl_stmt java.lang.String = decl_stmt java.util.Map = decl_stmt java.util.List = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) if call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() == else call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() decl_stmt long = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) decl_stmt long = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) if < || == && != call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + + + catch - call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new