org.apache.lucene.analysis.tokenattributes java.nio.CharBuffer import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.AttributeImpl import org.apache.lucene.util.AttributeReflector import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import class org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl super super extends super implements int BytesRefBuilder int decl char public final public final = public final public final return decl char public final public final if < decl_stmt char final final final = new = return private private if < = new public final public final if > throw new + + + + = return public final public final = return public public call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) call org.apache.lucene.util.BytesRefBuilder.copyChars(char,int,int) return call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() public final public final return public final public final if >= throw new return public final public final final final final final if > || > throw new return new - public final public final if == return return CharBuffer int public final public final if == = decl_stmt int final final = - = if < || || || > throw new if == return + if > if instanceof else if instanceof else if instanceof else if instanceof && decl_stmt org.apache.solr.internal.csv.CharBuffer final final = + + else if instanceof else while < ++ = ++ return += return else while < ++ = ++ return public final public final + ++ = return int public final public final if == return decl_stmt int final final = + += return int public final public final if == return decl_stmt int final final = + += return int public final public final if == return decl_stmt int final final = + += return private private + ++ = ++ = ++ = ++ = return int public public decl_stmt int = = * + return public public = CharTermAttributeImpl public public decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl = = new = new call CharTermAttributeImpl.builder() call CharTermAttributeImpl.builder() call CharTermAttributeImpl.builder() call CharTermAttributeImpl.builder() call CharTermAttributeImpl.builder() call CharTermAttributeImpl.builder() call CharTermAttributeImpl.builder() call CharTermAttributeImpl.builder() call CharTermAttributeImpl.builder() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() return CharTermAttributeImpl public public if == return if instanceof decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl final final = if != return for = < ++ if != return return return public public return new public public CharTermAttribute public public decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute = call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.copyBuffer(char,int,int) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.copyBuffer(char,int,int) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.copyBuffer(char,int,int) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.copyBuffer(char,int,int) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.copyBuffer(char,int,int)