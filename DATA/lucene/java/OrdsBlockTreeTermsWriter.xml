org.apache.lucene.codecs.blocktreeords java.io.IOException import java.util.ArrayList import java.util.List import org.apache.lucene.codecs.BlockTermState import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.FieldsConsumer import org.apache.lucene.codecs.PostingsWriterBase import org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter import org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.Output import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.Fields import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.IndexOutput import org.apache.lucene.store.RAMOutputStream import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.IOUtils import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.StringHelper import org.apache.lucene.util.fst.Builder import org.apache.lucene.util.fst.BytesRefFSTEnum import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.Util import org.apache.lucene.util.packed.PackedInts import class org.apache.lucene.codecs.blocktreeords.OrdsBlockTreeTermsWriter super super extends int Output FieldInfos int int IndexOutput IntsRefBuilder int int int int boolean int RAMOutputStream String String int String int PostingsWriterBase String IndexOutput decl List int FSTOrdsOutputs BytesRef TermsWriter Terms String TermsEnum public public throws decl_stmt java.lang.String = for : assert == || call java.lang.String.compareTo(String) call java.lang.String.compareTo(String) call java.lang.String.compareTo(String) call java.lang.String.compareTo(String) call java.lang.String.compareTo(String) < = decl_stmt org.apache.lucene.index.Terms = call decl List.terms() call decl List.terms() call decl List.terms() call decl List.terms() call decl List.terms() if == continue decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt TermsWriter = new call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) while decl_stmt org.apache.lucene.util.BytesRef = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == break call TermsWriter.write() call TermsWriter.write() call TermsWriter.write() call TermsWriter.write() call TermsWriter.write() call TermsWriter.finish() call TermsWriter.finish() call TermsWriter.finish() call TermsWriter.finish() call TermsWriter.finish() static static assert < << return << | : | : public public return static static try return + + catch return static static return new public public return + long long decl byte decl Builder long PendingBlock public public < throws assert && > || == && == : + + + assert == assert call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.getFilePointer() == decl_stmt long = decl_stmt long = call RAMOutputStream.writeVLong() call RAMOutputStream.writeVLong() call RAMOutputStream.writeVLong() call RAMOutputStream.writeVLong() call RAMOutputStream.writeVLong() if call RAMOutputStream.writeVInt() call RAMOutputStream.writeVInt() call RAMOutputStream.writeVInt() call RAMOutputStream.writeVInt() call RAMOutputStream.writeVInt() - for = < ++ decl_stmt PendingBlock = assert != - call org.apache.lucene.store.RAMOutputStream.writeByte(byte) call org.apache.lucene.store.RAMOutputStream.writeByte(byte) call org.apache.lucene.store.RAMOutputStream.writeByte(byte) call org.apache.lucene.store.RAMOutputStream.writeByte(byte) call org.apache.lucene.store.RAMOutputStream.writeByte(byte) byte call RAMOutputStream.writeVLong() call RAMOutputStream.writeVLong() call RAMOutputStream.writeVLong() call RAMOutputStream.writeVLong() call RAMOutputStream.writeVLong() - = += assert > call RAMOutputStream.writeVLong() call RAMOutputStream.writeVLong() call RAMOutputStream.writeVLong() call RAMOutputStream.writeVLong() call RAMOutputStream.writeVLong() - << | : decl_stmt org.apache.lucene.util.fst.Builder final final final < = new <> decl_stmt byte final final final = new int call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.getFilePointer() call org.apache.lucene.store.RAMOutputStream.getFilePointer() assert > call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call org.apache.lucene.store.RAMOutputStream.writeTo(DataOutput) call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.newOutput(BytesRef,long,long) call org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.newOutput(BytesRef,long,long) call org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.newOutput(BytesRef,long,long) call org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.newOutput(BytesRef,long,long) call org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.newOutput(BytesRef,long,long) new - - call org.apache.lucene.store.RAMOutputStream.reset() call org.apache.lucene.store.RAMOutputStream.reset() call org.apache.lucene.store.RAMOutputStream.reset() call org.apache.lucene.store.RAMOutputStream.reset() call org.apache.lucene.store.RAMOutputStream.reset() decl_stmt long = for : if != for : + = += = assert == = call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() assert == decl BytesRefFSTEnum decl BytesRefFSTEnum Output Output private private < < throws decl_stmt org.apache.lucene.util.fst.BytesRefFSTEnum final final final < = new <> decl_stmt org.apache.lucene.util.fst.BytesRefFSTEnum < while = call decl BytesRefFSTEnum.next() call decl BytesRefFSTEnum.next() call decl BytesRefFSTEnum.next() call decl BytesRefFSTEnum.next() call decl BytesRefFSTEnum.next() != decl_stmt Output = decl_stmt Output = call org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.newOutput(BytesRef,long,long) call org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.newOutput(BytesRef,long,long) call org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.newOutput(BytesRef,long,long) call org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.newOutput(BytesRef,long,long) call org.apache.lucene.codecs.blocktreeords.FSTOrdsOutputs.newOutput(BytesRef,long,long) + - int int int int int PendingTerm boolean boolean boolean PendingBlock PendingEntry PendingBlock int int throws assert > assert > || == decl_stmt int = - decl_stmt boolean = decl_stmt boolean = decl_stmt int = - decl_stmt int = decl_stmt int = decl_stmt int = - for = < ++ decl_stmt PendingEntry = decl_stmt int if decl_stmt PendingTerm = if == assert == - = - else = & else decl_stmt PendingBlock = assert > = + & if != decl_stmt int = - if >= && - > decl_stmt boolean = < = = = = = if = else = if < decl_stmt int = - decl_stmt boolean = < assert == decl_stmt PendingBlock = assert || == call PendingBlock.compileIndex() call PendingBlock.compileIndex() call PendingBlock.compileIndex() call PendingBlock.compileIndex() call PendingBlock.compileIndex() - PendingTerm int int decl List int BlockTermState BytesRef PendingEntry boolean boolean long long PendingBlock boolean private private throws assert > decl_stmt long = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt boolean = && != - decl_stmt org.apache.lucene.util.BytesRef final final = new + : = decl_stmt int = - decl_stmt int = << if == |= call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt java.util.List final final final < decl_stmt boolean = == decl_stmt long decl_stmt boolean = if = for = < ++ decl_stmt PendingEntry = assert : + decl_stmt PendingTerm = assert : + + + decl_stmt org.apache.lucene.codecs.BlockTermState = decl_stmt int final final = - assert == - || & >= if != assert >= : + + - call PostingsWriterBase.encodeTerm() call PostingsWriterBase.encodeTerm() call PostingsWriterBase.encodeTerm() call PostingsWriterBase.encodeTerm() call PostingsWriterBase.encodeTerm() for = < ++ assert >= = = - else = new <> = for = < ++ decl_stmt PendingEntry = if decl_stmt PendingTerm = assert : + + + decl_stmt org.apache.lucene.codecs.BlockTermState = decl_stmt int final final = - << assert == - || & >= if != assert >= - call PostingsWriterBase.encodeTerm() call PostingsWriterBase.encodeTerm() call PostingsWriterBase.encodeTerm() call PostingsWriterBase.encodeTerm() call PostingsWriterBase.encodeTerm() for = < ++ assert >= = ++ else decl_stmt PendingBlock = assert decl_stmt int final final = - assert > << | assert == - || & >= assert < - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new += assert call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() != call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() << | : call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() int call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() int if ++ = byte return new BlockTermState PendingTerm public public throws decl_stmt org.apache.lucene.codecs.BlockTermState = call PostingsWriterBase.writeTerm() call PostingsWriterBase.writeTerm() call PostingsWriterBase.writeTerm() call PostingsWriterBase.writeTerm() call PostingsWriterBase.writeTerm() if != assert != assert == || >= : + += += decl_stmt PendingTerm = new ++ if == = = int int int private private throws decl_stmt int = decl_stmt int = while < && == + ++ for = - >= -- decl_stmt int = - if >= + -= - if < = for = < ++ = BytesRef PendingBlock BytesRef public public throws if > assert == && ! : + + + decl_stmt PendingBlock final final = assert == assert call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() != = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() call PendingBlock.index() assert != decl_stmt org.apache.lucene.util.BytesRef = new assert != decl_stmt org.apache.lucene.util.BytesRef = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new else assert == long boolean long public public throws if return = decl_stmt boolean = try decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() assert > call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() if != call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() = finally if else private static private static throws call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes()