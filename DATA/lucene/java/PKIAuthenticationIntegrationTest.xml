org.apache.solr.security javax.servlet.ServletRequest import javax.servlet.http.HttpServletRequest import java.lang.invoke.MethodHandles import java.security.Principal import java.util.concurrent.atomic.AtomicInteger import java.util.function.Predicate import org.apache.solr.SolrTestCaseJ4 import org.apache.solr.client.solrj.embedded.JettySolrRunner import org.apache.solr.client.solrj.request.QueryRequest import org.apache.solr.cloud.AbstractFullDistribZkTestBase import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.util.Utils import org.junit.Test import org.slf4j.Logger import org.slf4j.LoggerFactory import static static java.util.Collections.singletonMap import static static org.apache.solr.common.util.Utils.makeMap import static static org.apache.solr.security.TestAuthorizationFramework.verifySecurityStatus import class annotation org.apache.solr.security.PKIAuthenticationIntegrationTest super super extends Logger int AtomicInteger decl byte String String ModifiableSolrParams QueryRequest Principal public public throws decl_stmt byte = try = new for : decl_stmt java.lang.String = + + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) call org.apache.solr.common.params.ModifiableSolrParams.add(String,String) decl_stmt java.util.concurrent.atomic.AtomicInteger final final = new = new < public public if decl_stmt java.security.Principal = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if != && call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() return = new < public public decl_stmt java.lang.String = if != && call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) && call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) return decl_stmt org.apache.solr.client.solrj.request.QueryRequest = new call QueryRequest.process() call QueryRequest.process() call QueryRequest.process() call QueryRequest.process() call QueryRequest.process() + call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() > Principal public public if decl_stmt java.security.Principal = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if != && call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() return String public public decl_stmt java.lang.String = if != && call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) && call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) return public public throws = =