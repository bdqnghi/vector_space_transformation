org.apache.lucene.analysis.pattern java.io.IOException import java.io.Reader import java.io.StringReader import java.util.regex.Matcher import java.util.regex.Pattern import org.apache.lucene.analysis.charfilter.BaseCharFilter import class org.apache.lucene.analysis.pattern.PatternReplaceCharFilter super super extends Pattern Reader String public public throws if == return call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) StringBuilder decl char private private throws decl_stmt java.lang.StringBuilder = new decl_stmt char = new for = > = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = new public public throws if == return call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) call java.io.Reader.read(char) protected protected return int int StringBuffer int Matcher int int int int decl_stmt java.util.regex.Matcher final final = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) decl_stmt java.lang.StringBuffer final final = new decl_stmt int = decl_stmt int = while call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) decl_stmt int final final = call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) - call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) decl_stmt int final final = call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) call java.util.regex.Matcher.start(int) - = call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) call java.util.regex.Matcher.end(int) decl_stmt int final final = call java.lang.StringBuffer.length() call java.lang.StringBuffer.length() call java.lang.StringBuffer.length() call java.lang.StringBuffer.length() call java.lang.StringBuffer.length() + call java.util.regex.Matcher.appendReplacement(StringBuffer,String) call java.util.regex.Matcher.appendReplacement(StringBuffer,String) call java.util.regex.Matcher.appendReplacement(StringBuffer,String) call java.util.regex.Matcher.appendReplacement(StringBuffer,String) call java.util.regex.Matcher.appendReplacement(StringBuffer,String) decl_stmt int final final = call java.lang.StringBuffer.length() call java.lang.StringBuffer.length() call java.lang.StringBuffer.length() call java.lang.StringBuffer.length() call java.lang.StringBuffer.length() - if != if < += - decl_stmt int = + else for = < ++ + -- call java.util.regex.Matcher.appendTail(StringBuffer) call java.util.regex.Matcher.appendTail(StringBuffer) call java.util.regex.Matcher.appendTail(StringBuffer) call java.util.regex.Matcher.appendTail(StringBuffer) call java.util.regex.Matcher.appendTail(StringBuffer) return