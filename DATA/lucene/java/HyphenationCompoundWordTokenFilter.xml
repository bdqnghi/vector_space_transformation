org.apache.lucene.analysis.compound org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.compound.hyphenation.Hyphenation import org.apache.lucene.analysis.compound.hyphenation.HyphenationTree import org.apache.lucene.analysis.util.CharArraySet import org.xml.sax.InputSource import java.io.File import java.io.IOException import class org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter super super extends HyphenationTree public static public static throws return new HyphenationTree public static public static throws decl_stmt org.apache.lucene.analysis.compound.hyphenation.HyphenationTree = new call org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.loadPatterns(InputSource) call org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.loadPatterns(InputSource) call org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.loadPatterns(InputSource) call org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.loadPatterns(InputSource) call org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.loadPatterns(InputSource) return decl int int int Hyphenation int CompoundToken protected protected decl_stmt org.apache.lucene.analysis.compound.hyphenation.Hyphenation = call org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.hyphenate(char,int,int,int,int) call org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.hyphenate(char,int,int,int,int) call org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.hyphenate(char,int,int,int,int) call org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.hyphenate(char,int,int,int,int) call org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.hyphenate(char,int,int,int,int) if == return decl_stmt int final final final = call Hyphenation.getHyphenationPoints() call Hyphenation.getHyphenationPoints() call Hyphenation.getHyphenationPoints() call Hyphenation.getHyphenationPoints() call Hyphenation.getHyphenationPoints() for = < ++ decl_stmt int = - decl_stmt int = decl_stmt CompoundToken = for = < ++ decl_stmt int = + - if > break if < continue if == || if if != if call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() < = new else = new else new else if - if if != if call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() call CompoundToken.txt() < - = new - else = new - else new - if && !=