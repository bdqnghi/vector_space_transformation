org.apache.lucene.search java.io.IOException import java.util.Objects import org.apache.lucene.index.DocValues import org.apache.lucene.index.DocValuesType import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.SortedNumericDocValues import org.apache.lucene.index.SortedSetDocValues import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import class org.apache.lucene.search.DocValuesRangeQuery super super extends String Object boolean public static public static return new public static public static return new private static private static if == return else return DocValuesRangeQuery public public if == return decl_stmt org.apache.lucene.search.DocValuesRangeQuery final final = return call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && && && == && == && public public return * + public public return public public return public public return public public return public public return StringBuilder public public decl_stmt java.lang.StringBuilder = new if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) == : call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) == : call boolean.toString() call boolean.toString() call boolean.toString() call boolean.toString() call boolean.toString() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) : return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public throws if == && == return new return int long long long long long SortedSetDocValues long public public throws if == && == throw new return new protected protected throws if instanceof || instanceof decl_stmt SortedNumericDocValues final final = decl_stmt long final final if == = else if = long else if long == return = + long decl_stmt long final final if == = else if = long else if long == return = - + long if > return return new public public call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() decl_stmt int final final = call SortedSetDocValues.count() call SortedSetDocValues.count() call SortedSetDocValues.count() call SortedSetDocValues.count() call SortedSetDocValues.count() for = < ++ decl_stmt long final final = call SortedSetDocValues.valueAt() call SortedSetDocValues.valueAt() call SortedSetDocValues.valueAt() call SortedSetDocValues.valueAt() call SortedSetDocValues.valueAt() if >= && <= return return public public return else if instanceof || instanceof decl_stmt org.apache.lucene.index.SortedSetDocValues final final = decl_stmt long final final if == = else decl_stmt long final final = call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() if < = - - else if = else = + decl_stmt long final final if == = call SortedSetDocValues.getValueCount() call SortedSetDocValues.getValueCount() call SortedSetDocValues.getValueCount() call SortedSetDocValues.getValueCount() call SortedSetDocValues.getValueCount() - else decl_stmt long final final = call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() if < = - - else if = else = - if > return return new public public call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() for = call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() != = call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() if >= && <= return return public public return else throw new int long long long long long SortedSetDocValues long protected protected throws if instanceof || instanceof decl_stmt SortedNumericDocValues final final = decl_stmt long final final if == = else if = long else if long == return = + long decl_stmt long final final if == = else if = long else if long == return = - + long if > return return new public public call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() decl_stmt int final final = call SortedSetDocValues.count() call SortedSetDocValues.count() call SortedSetDocValues.count() call SortedSetDocValues.count() call SortedSetDocValues.count() for = < ++ decl_stmt long final final = call SortedSetDocValues.valueAt() call SortedSetDocValues.valueAt() call SortedSetDocValues.valueAt() call SortedSetDocValues.valueAt() call SortedSetDocValues.valueAt() if >= && <= return return public public return else if instanceof || instanceof decl_stmt org.apache.lucene.index.SortedSetDocValues final final = decl_stmt long final final if == = else decl_stmt long final final = call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() if < = - - else if = else = + decl_stmt long final final if == = call SortedSetDocValues.getValueCount() call SortedSetDocValues.getValueCount() call SortedSetDocValues.getValueCount() call SortedSetDocValues.getValueCount() call SortedSetDocValues.getValueCount() - else decl_stmt long final final = call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() call SortedSetDocValues.lookupTerm() if < = - - else if = else = - if > return return new public public call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() for = call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() != = call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() if >= && <= return return public public return else throw new int long public public decl_stmt int final final = for = < ++ decl_stmt long final final = if >= && <= return return public public return public public for = != = if >= && <= return return public public return