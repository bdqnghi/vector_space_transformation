org.apache.lucene.analysis java.io.IOException import java.io.PrintWriter import java.io.Reader import java.io.StringReader import java.io.StringWriter import java.io.Writer import java.nio.charset.StandardCharsets import java.nio.file.Files import java.nio.file.Paths import java.util.* import java.util.concurrent.CountDownLatch import org.apache.lucene.analysis.tokenattributes.* import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.FieldType import org.apache.lucene.document.TextField import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.RandomIndexWriter import org.apache.lucene.store.Directory import org.apache.lucene.util.Attribute import org.apache.lucene.util.AttributeFactory import org.apache.lucene.util.AttributeImpl import org.apache.lucene.util.AttributeReflector import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LineFileDocs import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.Rethrow import org.apache.lucene.util.TestUtil import class org.apache.lucene.analysis.BaseTokenStreamTestCase super super extends public public try return finally = public public = public public return instanceof && == public public return ^ public public public public CheckClearAttributesAttribute decl Map int KeywordAttribute PositionIncrementAttribute int decl Map int int PositionLengthAttribute CharTermAttribute int int int OffsetAttribute TypeAttribute public static public static throws decl_stmt org.apache.lucene.analysis.CheckClearAttributesAttribute = decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute = if > = decl_stmt org.apache.lucene.analysis.tokenattributes.OffsetAttribute = if != || != || != = decl_stmt org.apache.lucene.analysis.tokenattributes.TypeAttribute = if != = decl_stmt org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute = if != || != = decl_stmt org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute = if != = decl_stmt org.apache.lucene.analysis.tokenattributes.KeywordAttribute = if != = decl_stmt java.util.Map final final final < = new <> decl_stmt java.util.Map final final final < = new <> decl_stmt int = - decl_stmt int = for = < ++ call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() if != call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) if != call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) if != call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) if != call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) if != call KeywordAttribute.setKeyword() call KeywordAttribute.setKeyword() call KeywordAttribute.setKeyword() call KeywordAttribute.setKeyword() call KeywordAttribute.setKeyword() & == call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() + + call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() + call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() if != + call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() if != + call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() if != + call TypeAttribute.type() call TypeAttribute.type() call TypeAttribute.type() call TypeAttribute.type() call TypeAttribute.type() if != + call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() if != + call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() if != + call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() if != decl_stmt int final final = call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() decl_stmt int final final = call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() if != <= + + + <= if + + + call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() >= = call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() if && != && != decl_stmt int final final = call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() += decl_stmt int final final = call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else + + + + + call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt int final final = + if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else + + + + + call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != if == call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() >= else call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() >= if != call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() >= if + + + if != call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() if != call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int) if != call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) call org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String) if != call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) if != call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int) call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() call CheckClearAttributesAttribute.getAndResetClearCalled() if != call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() if != call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() >= if != call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws public static public static throws TokenStream static static throws decl_stmt org.apache.lucene.analysis.TokenStream = try if call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() catch catch + finally call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() while call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() = call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() while call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() try = catch finally call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() public static public static final final final final throws new public static public static throws public static public static throws public static public static throws int public static public static throws decl_stmt int = while ++ boolean public public decl_stmt boolean = try new = catch finally = ! public static public static throws boolean int boolean RandomIndexWriter AnalysisThread long String CountDownLatch boolean Directory public static public static throws decl_stmt long = decl_stmt boolean = decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.RandomIndexWriter = decl_stmt java.lang.String final final = decl_stmt boolean = * < || ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if && = = new new decl_stmt boolean = try new decl_stmt int = decl_stmt java.util.concurrent.CountDownLatch final final = new decl_stmt AnalysisThread = new for = < ++ = new for = < ++ call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() for = < ++ try catch throw new for = < ++ if throw new if != call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() = finally if else StringReader String LineFileDocs Field int FieldType Document int FieldType private static private static throws decl_stmt org.apache.lucene.util.LineFileDocs final final = new decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.solr.handler.dataimport.config.Field = = decl_stmt java.io.StringReader = new if != = new decl_stmt org.apache.solr.schema.FieldType = new if call String.setStoreTermVectors() call String.setStoreTermVectors() call String.setStoreTermVectors() call String.setStoreTermVectors() call String.setStoreTermVectors() call String.setStoreTermVectorOffsets() call String.setStoreTermVectorOffsets() call String.setStoreTermVectorOffsets() call String.setStoreTermVectorOffsets() call String.setStoreTermVectorOffsets() call String.setStoreTermVectorPositions() call String.setStoreTermVectorPositions() call String.setStoreTermVectorPositions() call String.setStoreTermVectorPositions() call String.setStoreTermVectorPositions() if call String.storeTermVectorPositions() call String.storeTermVectorPositions() call String.storeTermVectorPositions() call String.storeTermVectorPositions() call String.storeTermVectorPositions() call String.setStoreTermVectorPayloads() call String.setStoreTermVectorPayloads() call String.setStoreTermVectorPayloads() call String.setStoreTermVectorPayloads() call String.setStoreTermVectorPayloads() if call String.setOmitNorms() call String.setOmitNorms() call String.setOmitNorms() call String.setOmitNorms() call String.setOmitNorms() switch case call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() break case call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() break case call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() break default: if call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() else call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() call String.setIndexOptions() = = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) try for = < ++ decl_stmt java.lang.String if == = call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() if call int.length() call int.length() call int.length() call int.length() call int.length() > decl_stmt int = call int.length() call int.length() call int.length() call int.length() call int.length() - if > && call int.charAt() call int.charAt() call int.charAt() call int.charAt() call int.charAt() -- assert call int.charAt() call int.charAt() call int.charAt() call int.charAt() call int.charAt() decl_stmt int = + - if call int.charAt() call int.charAt() call int.charAt() call int.charAt() call int.charAt() -- = call int.substring() call int.substring() call int.substring() call int.substring() call int.substring() + else = try if != if == decl_stmt org.apache.solr.schema.FieldType = call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() call org.apache.solr.handler.dataimport.config.Field.fieldType() = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) else if call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() > = call org.apache.lucene.document.Document.removeFields(String) call org.apache.lucene.document.Document.removeFields(String) call org.apache.lucene.document.Document.removeFields(String) call org.apache.lucene.document.Document.removeFields(String) call org.apache.lucene.document.Document.removeFields(String) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) catch + + + + finally int StringBuilder int public static public static decl_stmt int = decl_stmt java.lang.StringBuilder final final = new while < decl_stmt int final final = if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if >= && < call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) char else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) ++ return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public static public static throws public static public static throws decl List decl List decl List PositionIncrementAttribute TokenStream decl List decl List MockReaderWrapper PositionLengthAttribute CharTermAttribute decl List int Reader OffsetAttribute int long TypeAttribute int private static private static throws if + + decl_stmt int = decl_stmt java.io.Reader = new decl_stmt org.apache.lucene.analysis.TokenStream = new : decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute = call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() decl_stmt org.apache.lucene.analysis.tokenattributes.OffsetAttribute = call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() decl_stmt org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute = call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() decl_stmt org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute = call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() decl_stmt org.apache.lucene.analysis.tokenattributes.TypeAttribute = call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() call TokenStream.getAttribute() decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() while call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call TypeAttribute.type() call TypeAttribute.type() call TypeAttribute.type() call TypeAttribute.type() call TypeAttribute.type() if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() call PositionIncrementAttribute.getPositionIncrement() if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() call PositionLengthAttribute.getPositionLength() if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() if != decl_stmt int final final = if == if + decl_stmt org.apache.lucene.analysis.MockReaderWrapper = new new call org.apache.lucene.analysis.MockReaderWrapper.throwExcAfterChar(int) call org.apache.lucene.analysis.MockReaderWrapper.throwExcAfterChar(int) call org.apache.lucene.analysis.MockReaderWrapper.throwExcAfterChar(int) call org.apache.lucene.analysis.MockReaderWrapper.throwExcAfterChar(int) call org.apache.lucene.analysis.MockReaderWrapper.throwExcAfterChar(int) + = try = new : call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() while call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() catch try call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() catch if else throw call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() else if == decl_stmt int final final = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if + + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + = new = new : call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() for = < ++ call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() try call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() call org.apache.lucene.analysis.TokenStream.end() catch if else throw call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() call org.apache.lucene.analysis.TokenStream.close() if + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + = new decl_stmt long = = new if == if + = new = new : if != && != && != && != call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() else if != && != && != call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() else if != && != && != call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() else if != && != call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() else if != call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() else call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if != = new = new if == if + = new new : StringWriter TokenStream protected protected throws decl_stmt StringWriter final final = new decl_stmt org.apache.lucene.analysis.TokenStream final final = call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() new new return call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() TokenStream Writer protected protected throws decl_stmt Writer = decl_stmt org.apache.lucene.analysis.TokenStream final final = call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() call org.apache.lucene.analysis.TokenStream.reset() new new call Writer.close() call Writer.close() call Writer.close() call Writer.close() call Writer.close() int int static static < decl_stmt int = new decl_stmt int = for : ++ = return MockTokenizer protected static protected static throws decl_stmt org.apache.lucene.analysis.MockTokenizer = new call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() return MockTokenizer protected static protected static throws decl_stmt org.apache.lucene.analysis.MockTokenizer = new call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() new return MockTokenizer protected static protected static throws decl_stmt org.apache.lucene.analysis.MockTokenizer = new call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() return MockTokenizer protected static protected static throws decl_stmt org.apache.lucene.analysis.MockTokenizer = new call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() call MockTokenizer.setReader() new return public static public static switch case return case return case return default: throw new public static public static return