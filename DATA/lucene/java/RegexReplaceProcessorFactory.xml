org.apache.solr.update.processor org.apache.solr.core.SolrCore import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.util.NamedList import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import java.util.regex.PatternSyntaxException import java.util.regex.Pattern import java.util.regex.Matcher import class org.apache.solr.update.processor.RegexReplaceProcessorFactory super super extends boolean String String Pattern String String Boolean Object Object public public decl_stmt java.lang.Object = if == throw new + try = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() catch throw new + decl_stmt java.lang.Object = if == throw new + decl_stmt java.lang.Boolean = if != = if = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() else = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() protected protected final final return CharSequence public public return new protected protected final final if instanceof decl_stmt java.lang.CharSequence = return call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) return CharSequence protected protected final final if instanceof decl_stmt java.lang.CharSequence = return call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) return