org.apache.lucene.search.suggest.tst java.io.IOException import java.util.ArrayList import java.util.Comparator import java.util.List import java.util.Set import org.apache.lucene.search.suggest.InputIterator import org.apache.lucene.search.suggest.Lookup import org.apache.lucene.search.suggest.SortedInputIterator import org.apache.lucene.store.DataInput import org.apache.lucene.store.DataOutput import org.apache.lucene.store.Directory import org.apache.lucene.util.BytesRef import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.RamUsageEstimator import class org.apache.lucene.search.suggest.tst.TSTLookup super super extends long byte decl Comparator byte byte byte String TSTAutocomplete Directory byte TernaryTreeNode decl ArrayList decl ArrayList CharsRefBuilder BytesRef public public throws if throw new if throw new = new = new = decl_stmt java.util.ArrayList < = new <> decl_stmt java.util.ArrayList < = new <> decl_stmt org.apache.lucene.util.BytesRef decl_stmt org.apache.lucene.util.CharsRefBuilder = new while = != call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte,int,int) call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call org.apache.lucene.util.CharsRefBuilder.toString() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() ++ call org.apache.lucene.search.suggest.tst.TSTAutocomplete.balancedTree(Object,Object,int,int,TernaryTreeNode) call org.apache.lucene.search.suggest.tst.TSTAutocomplete.balancedTree(Object,Object,int,int,TernaryTreeNode) call org.apache.lucene.search.suggest.tst.TSTAutocomplete.balancedTree(Object,Object,int,int,TernaryTreeNode) call org.apache.lucene.search.suggest.tst.TSTAutocomplete.balancedTree(Object,Object,int,int,TernaryTreeNode) call org.apache.lucene.search.suggest.tst.TSTAutocomplete.balancedTree(Object,Object,int,int,TernaryTreeNode) call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() - public public call org.apache.lucene.search.suggest.tst.TSTAutocomplete.insert(TernaryTreeNode,CharSequence,Object,int) call org.apache.lucene.search.suggest.tst.TSTAutocomplete.insert(TernaryTreeNode,CharSequence,Object,int) call org.apache.lucene.search.suggest.tst.TSTAutocomplete.insert(TernaryTreeNode,CharSequence,Object,int) call org.apache.lucene.search.suggest.tst.TSTAutocomplete.insert(TernaryTreeNode,CharSequence,Object,int) call org.apache.lucene.search.suggest.tst.TSTAutocomplete.insert(TernaryTreeNode,CharSequence,Object,int) return decl List public public decl_stmt java.util.List < = call TSTAutocomplete.prefixCompletion() call TSTAutocomplete.prefixCompletion() call TSTAutocomplete.prefixCompletion() call TSTAutocomplete.prefixCompletion() call TSTAutocomplete.prefixCompletion() if == || call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return for : if return return int private static private static decl_stmt int = if != return for = < ++ if != return return LookupPriorityQueue decl List decl List TernaryTreeNode int public < public < < if != throw new decl_stmt java.util.List < = call TSTAutocomplete.prefixCompletion() call TSTAutocomplete.prefixCompletion() call TSTAutocomplete.prefixCompletion() call TSTAutocomplete.prefixCompletion() call TSTAutocomplete.prefixCompletion() decl_stmt java.util.List < = new <> if == || call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if decl_stmt LookupPriorityQueue = new for : call LookupPriorityQueue.insertWithOverflow() call LookupPriorityQueue.insertWithOverflow() call LookupPriorityQueue.insertWithOverflow() call LookupPriorityQueue.insertWithOverflow() call LookupPriorityQueue.insertWithOverflow() new for : call LookupPriorityQueue.getResults() call LookupPriorityQueue.getResults() call LookupPriorityQueue.getResults() call LookupPriorityQueue.getResults() call LookupPriorityQueue.getResults() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else for = < ++ decl_stmt org.apache.lucene.search.suggest.tst.TernaryTreeNode = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return byte private private throws = decl_stmt byte = if & != = if & != = if & != = new if & != = new if & != = new byte private private throws new new decl_stmt byte = if != |= if != |= if != |= if != |= if != |= if != if != if != if != if != public synchronized public synchronized throws return public synchronized public synchronized throws = = new return long public public decl_stmt long = if != += call TernaryTreeNode.sizeInBytes() call TernaryTreeNode.sizeInBytes() call TernaryTreeNode.sizeInBytes() call TernaryTreeNode.sizeInBytes() call TernaryTreeNode.sizeInBytes() return public public return