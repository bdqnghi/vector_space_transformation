org.apache.solr.core java.io.Closeable import java.io.File import java.io.FileNotFoundException import java.io.IOException import java.io.InputStream import java.io.InputStreamReader import java.io.OutputStream import java.lang.invoke.MethodHandles import java.lang.reflect.Constructor import java.net.URL import java.nio.charset.StandardCharsets import java.nio.file.NoSuchFileException import java.util.* import java.util.concurrent.Callable import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.CopyOnWriteArrayList import java.util.concurrent.CountDownLatch import java.util.concurrent.ExecutorService import java.util.concurrent.Future import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.locks.ReentrantLock import org.apache.commons.io.FileUtils import org.apache.lucene.analysis.util.ResourceLoader import org.apache.lucene.codecs.Codec import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.IndexDeletionPolicy import org.apache.lucene.index.IndexWriter import org.apache.lucene.search.BooleanQuery import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.LockObtainFailedException import org.apache.solr.client.solrj.impl.BinaryResponseParser import org.apache.solr.cloud.CloudDescriptor import org.apache.solr.cloud.ZkSolrResourceLoader import org.apache.solr.common.SolrException import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.CommonParams.EchoParamStyle import org.apache.solr.common.params.SolrParams import org.apache.solr.common.params.UpdateParams import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.common.util.IOUtils import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.ObjectReleaseTracker import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.common.util.Utils import org.apache.solr.core.DirectoryFactory.DirContext import org.apache.solr.handler.IndexFetcher import org.apache.solr.handler.ReplicationHandler import org.apache.solr.handler.RequestHandlerBase import org.apache.solr.handler.admin.ShowFileRequestHandler import org.apache.solr.handler.component.HighlightComponent import org.apache.solr.handler.component.SearchComponent import org.apache.solr.logging.MDCLoggingContext import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.SolrRequestHandler import org.apache.solr.response.* import org.apache.solr.response.transform.TransformerFactory import org.apache.solr.rest.ManagedResourceStorage import org.apache.solr.rest.ManagedResourceStorage.StorageIO import org.apache.solr.rest.RestManager import org.apache.solr.schema.FieldType import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.IndexSchemaFactory import org.apache.solr.schema.ManagedIndexSchema import org.apache.solr.schema.SimilarityFactory import org.apache.solr.search.QParserPlugin import org.apache.solr.search.SolrFieldCacheMBean import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.search.ValueSourceParser import org.apache.solr.search.stats.LocalStatsCache import org.apache.solr.search.stats.StatsCache import org.apache.solr.update.DefaultSolrCoreState import org.apache.solr.update.DirectUpdateHandler2 import org.apache.solr.update.SolrCoreState import org.apache.solr.update.SolrCoreState.IndexWriterCloser import org.apache.solr.update.SolrIndexWriter import org.apache.solr.update.UpdateHandler import org.apache.solr.update.VersionInfo import org.apache.solr.update.processor.DistributedUpdateProcessorFactory import org.apache.solr.update.processor.LogUpdateProcessorFactory import org.apache.solr.update.processor.RunUpdateProcessorFactory import org.apache.solr.update.processor.UpdateRequestProcessorChain import org.apache.solr.update.processor.UpdateRequestProcessorChain.ProcessorInfo import org.apache.solr.update.processor.UpdateRequestProcessorFactory import org.apache.solr.util.DefaultSolrThreadFactory import org.apache.solr.util.PropertiesInputStream import org.apache.solr.util.RefCounted import org.apache.solr.util.plugin.NamedListInitializedPlugin import org.apache.solr.util.plugin.PluginInfoInitialized import org.apache.solr.util.plugin.SolrCoreAware import org.apache.zookeeper.KeeperException import org.apache.zookeeper.data.Stat import org.slf4j.Logger import org.slf4j.LoggerFactory import static static com.google.common.base.Preconditions.checkNotNull import static static org.apache.solr.common.params.CommonParams.NAME import static static org.apache.solr.common.params.CommonParams.PATH import class org.apache.solr.core.SolrCore super super implements int decl PluginBag int ReentrantLock MemClassLoader IndexReaderFactory decl RefCounted RequestHandlers decl Map decl PluginBag String RestManager int decl PluginBag String NamedList Logger boolean decl Callable SolrConfig decl Collection String CoreDescriptor Logger StatsCache Codec decl RefCounted IndexSchema decl Set decl List DirectoryFactory decl PluginBag String decl PluginBag decl LinkedList IndexDeletionPolicyWrapper decl Map Date decl List int boolean Object decl LinkedList Map String decl PluginBag decl List SolrResourceLoader AtomicInteger String UpdateHandler ReentrantLock ExecutorService long SolrCoreState decl Map public public return public public return public public return - public public return synchronized if == = else if != call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() public public return public public return call SolrConfig.getResourceName() call SolrConfig.getResourceName() call SolrConfig.getResourceName() call SolrConfig.getResourceName() call SolrConfig.getResourceName() public public return public public return public public return SimilarityFactory public public decl_stmt org.apache.solr.schema.SimilarityFactory final final = if instanceof = public public return public public return public public return SolrIndexSearcher public public synchronized if == return decl_stmt org.apache.solr.search.SolrIndexSearcher = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() return call org.apache.solr.search.SolrIndexSearcher.getPath() call org.apache.solr.search.SolrIndexSearcher.getPath() call org.apache.solr.search.SolrIndexSearcher.getPath() call org.apache.solr.search.SolrIndexSearcher.getPath() call org.apache.solr.search.SolrIndexSearcher.getPath() == + : call org.apache.solr.search.SolrIndexSearcher.getPath() call org.apache.solr.search.SolrIndexSearcher.getPath() call org.apache.solr.search.SolrIndexSearcher.getPath() call org.apache.solr.search.SolrIndexSearcher.getPath() call org.apache.solr.search.SolrIndexSearcher.getPath() InputStream Properties String String IndexInput Directory public public decl_stmt java.lang.String = + decl_stmt java.util.Properties = new decl_stmt org.apache.lucene.store.Directory = try = decl_stmt org.apache.lucene.store.IndexInput try = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() catch = if != decl_stmt java.io.InputStream final final = new try call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) call java.util.Properties.load(Reader) new decl_stmt java.lang.String = call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) if != && call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() > = + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + finally catch finally if != try catch if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + = return public public return public public return public public return public public = = == : + + = new public public return public < public < return PluginInfo IndexDeletionPolicy private private if != return decl_stmt org.apache.solr.core.PluginInfo final final = call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) decl_stmt IndexDeletionPolicy final final if != = if instanceof else = new return new String SolrEventListener String decl Class private private decl_stmt java.lang.Class final final final < = decl_stmt java.lang.String final final = for : call org.apache.solr.core.SolrConfig.getPluginInfos(String) call org.apache.solr.core.SolrConfig.getPluginInfos(String) call org.apache.solr.core.SolrConfig.getPluginInfos(String) call org.apache.solr.core.SolrConfig.getPluginInfos(String) call org.apache.solr.core.SolrConfig.getPluginInfos(String) decl_stmt java.lang.String final final = if decl_stmt org.apache.solr.core.SolrEventListener = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else if decl_stmt org.apache.solr.core.SolrEventListener = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) public public call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public return call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() SolrCore boolean SolrCore public public throws call SolrCoreState.increfSolrCoreState() call SolrCoreState.increfSolrCoreState() call SolrCoreState.increfSolrCoreState() call SolrCoreState.increfSolrCoreState() call SolrCoreState.increfSolrCoreState() decl_stmt org.apache.solr.core.SolrCore final final if ! = else = decl_stmt boolean = decl_stmt org.apache.solr.core.SolrCore = try = new call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getUpdateHandler() call org.apache.solr.core.SolrCore.getSearcher() call org.apache.solr.core.SolrCore.getSearcher() call org.apache.solr.core.SolrCore.getSearcher() call org.apache.solr.core.SolrCore.getSearcher() call org.apache.solr.core.SolrCore.getSearcher() = return finally if ! PluginInfo DirectoryFactory private private decl_stmt org.apache.solr.core.PluginInfo final final = call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) decl_stmt org.apache.solr.core.DirectoryFactory final final if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = call org.apache.solr.core.DirectoryFactory.initCoreContainer(CoreContainer) call org.apache.solr.core.DirectoryFactory.initCoreContainer(CoreContainer) call org.apache.solr.core.DirectoryFactory.initCoreContainer(CoreContainer) call org.apache.solr.core.DirectoryFactory.initCoreContainer(CoreContainer) call org.apache.solr.core.DirectoryFactory.initCoreContainer(CoreContainer) call DirectoryFactory.init() call DirectoryFactory.init() call DirectoryFactory.init() call DirectoryFactory.init() call DirectoryFactory.init() else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = new call org.apache.solr.core.DirectoryFactory.initCoreContainer(CoreContainer) call org.apache.solr.core.DirectoryFactory.initCoreContainer(CoreContainer) call org.apache.solr.core.DirectoryFactory.initCoreContainer(CoreContainer) call org.apache.solr.core.DirectoryFactory.initCoreContainer(CoreContainer) call org.apache.solr.core.DirectoryFactory.initCoreContainer(CoreContainer) return PluginInfo IndexReaderFactory private private decl_stmt org.apache.solr.core.IndexReaderFactory decl_stmt org.apache.solr.core.PluginInfo = call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) if != = call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call IndexReaderFactory.init() call IndexReaderFactory.init() call IndexReaderFactory.init() call IndexReaderFactory.init() call IndexReaderFactory.init() else = new = boolean String SolrIndexWriter String Directory boolean throws decl_stmt java.lang.String = decl_stmt boolean = decl_stmt boolean synchronized = call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if && && ! decl_stmt java.lang.String final final = decl_stmt org.apache.lucene.store.Directory = call DirectoryFactory.get() call DirectoryFactory.get() call DirectoryFactory.get() call DirectoryFactory.get() call DirectoryFactory.get() try if call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + throw new + + + + + + + finally call DirectoryFactory.release() call DirectoryFactory.release() call DirectoryFactory.release() call DirectoryFactory.release() call DirectoryFactory.release() if ! call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + new + + decl_stmt org.apache.solr.update.SolrIndexWriter = call SolrIndexWriter.close() call SolrIndexWriter.close() call SolrIndexWriter.close() call SolrIndexWriter.close() call SolrIndexWriter.close() SolrException decl Class public static < public static < < decl_stmt java.lang.Class < extends extends = if == = try = call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) = call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) call org.apache.solr.core.SolrResourceLoader.findClass(String,Class,String) for < : if == && == return return call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) catch throw catch if != && instanceof decl_stmt org.apache.solr.common.SolrException = throw throw new + + + + + SolrException decl Class private private decl_stmt java.lang.Class < extends extends = if == = try = = for < : if == && == && == return throw new + + + + + catch throw catch if != && instanceof decl_stmt org.apache.solr.common.SolrException = throw throw new + + + + + T public < extends extends public < extends extends < if == return decl_stmt T = == : if instanceof else if instanceof if instanceof return private private return private private return UpdateHandler decl RefCounted public public decl_stmt org.apache.solr.update.UpdateHandler = if != && call UpdateHandler.getUpdateLog() call UpdateHandler.getUpdateLog() call UpdateHandler.getUpdateLog() call UpdateHandler.getUpdateLog() call UpdateHandler.getUpdateLog() != decl_stmt org.apache.solr.util.RefCounted < = if != try call UpdateHandler.getUpdateLog() call UpdateHandler.getUpdateLog() call UpdateHandler.getUpdateLog() call UpdateHandler.getUpdateLog() call UpdateHandler.getUpdateLog() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() CoreContainer ClusterState Slice private private decl_stmt org.apache.solr.core.CoreContainer final final = call org.apache.solr.core.CoreDescriptor.getCoreContainer() call org.apache.solr.core.CoreDescriptor.getCoreContainer() call org.apache.solr.core.CoreDescriptor.getCoreContainer() call org.apache.solr.core.CoreDescriptor.getCoreContainer() call org.apache.solr.core.CoreDescriptor.getCoreContainer() if != && call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() call org.apache.solr.core.CoreContainer.isZooKeeperAware() if call RequestHandlers.get() call RequestHandlers.get() call RequestHandlers.get() call RequestHandlers.get() call RequestHandlers.get() == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + decl_stmt org.apache.solr.common.cloud.ClusterState final final = call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() decl_stmt org.apache.solr.common.cloud.Slice final final = call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() if call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() == SolrCore IndexWriter decl RefCounted private private throws decl_stmt org.apache.solr.util.RefCounted < = if != = if != decl_stmt org.apache.lucene.index.IndexWriter final final = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() decl_stmt org.apache.solr.core.SolrCore final final = = call IndexReaderFactory.newReader() call IndexReaderFactory.newReader() call IndexReaderFactory.newReader() call IndexReaderFactory.newReader() call IndexReaderFactory.newReader() try finally = if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() String UpdateHandler private private decl_stmt java.lang.String = call org.apache.solr.core.SolrConfig.getUpdateHandlerInfo() call org.apache.solr.core.SolrConfig.getUpdateHandlerInfo() call org.apache.solr.core.SolrConfig.getUpdateHandlerInfo() call org.apache.solr.core.SolrConfig.getUpdateHandlerInfo() call org.apache.solr.core.SolrConfig.getUpdateHandlerInfo() if == = decl_stmt org.apache.solr.update.UpdateHandler final final if == = else = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return private private if == = private < private < if return new < else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + return new <> private private if != call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() try catch throw new + private private if == if call org.apache.solr.core.CoreDescriptor.usingDefaultDataDir() call org.apache.solr.core.CoreDescriptor.usingDefaultDataDir() call org.apache.solr.core.CoreDescriptor.usingDefaultDataDir() call org.apache.solr.core.CoreDescriptor.usingDefaultDataDir() call org.apache.solr.core.CoreDescriptor.usingDefaultDataDir() = if == try = call org.apache.solr.core.CoreDescriptor.getDataDir() call org.apache.solr.core.CoreDescriptor.getDataDir() call org.apache.solr.core.CoreDescriptor.getDataDir() call org.apache.solr.core.CoreDescriptor.getDataDir() call org.apache.solr.core.CoreDescriptor.getDataDir() if ! call DirectoryFactory.isAbsolute() call DirectoryFactory.isAbsolute() call DirectoryFactory.isAbsolute() call DirectoryFactory.isAbsolute() call DirectoryFactory.isAbsolute() = call org.apache.solr.core.DirectoryFactory.getDataHome(CoreDescriptor) call org.apache.solr.core.DirectoryFactory.getDataHome(CoreDescriptor) call org.apache.solr.core.DirectoryFactory.getDataHome(CoreDescriptor) call org.apache.solr.core.DirectoryFactory.getDataHome(CoreDescriptor) call org.apache.solr.core.DirectoryFactory.getDataHome(CoreDescriptor) catch throw new return String private private decl_stmt java.lang.String = call org.apache.solr.core.CoreDescriptor.getUlogDir() call org.apache.solr.core.CoreDescriptor.getUlogDir() call org.apache.solr.core.CoreDescriptor.getUlogDir() call org.apache.solr.core.CoreDescriptor.getUlogDir() call org.apache.solr.core.CoreDescriptor.getUlogDir() if == = call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() return long public public while ! decl_stmt long final final = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try catch throw new + + + PluginInfo String CodecFactory private private final final decl_stmt org.apache.solr.core.PluginInfo final final = call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) decl_stmt org.apache.solr.core.CodecFactory final final if != = call org.apache.solr.schema.IndexSchema.getResourceLoader() call org.apache.solr.schema.IndexSchema.getResourceLoader() call org.apache.solr.schema.IndexSchema.getResourceLoader() call org.apache.solr.schema.IndexSchema.getResourceLoader() call org.apache.solr.schema.IndexSchema.getResourceLoader() call CodecFactory.init() call CodecFactory.init() call CodecFactory.init() call CodecFactory.init() call CodecFactory.init() else = new public public return if instanceof else for : call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() if != decl_stmt java.lang.String = + + + call CodecFactory.getClass() call CodecFactory.getClass() call CodecFactory.getClass() call CodecFactory.getClass() call CodecFactory.getClass() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new if != decl_stmt java.lang.String = + + + call CodecFactory.getClass() call CodecFactory.getClass() call CodecFactory.getClass() call CodecFactory.getClass() call CodecFactory.getClass() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new return call CodecFactory.getCodec() call CodecFactory.getCodec() call CodecFactory.getCodec() call CodecFactory.getCodec() call CodecFactory.getCodec() public public return StatsCache PluginInfo private private decl_stmt StatsCache final final decl_stmt org.apache.solr.core.PluginInfo = call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) call org.apache.solr.core.SolrConfig.getPluginInfo(String) if != && != && call PluginInfo.className() call PluginInfo.className() call PluginInfo.className() call PluginInfo.className() call PluginInfo.className() call PluginInfo.className() call PluginInfo.className() call PluginInfo.className() call PluginInfo.className() > = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call StatsCache.getClass() call StatsCache.getClass() call StatsCache.getClass() call StatsCache.getClass() call StatsCache.getClass() else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + = new return public public return decl Map decl UpdateRequestProcessorFactory UpdateRequestProcessorChain private < private < decl_stmt java.util.Map < = new <> decl_stmt org.apache.solr.update.processor.UpdateRequestProcessorChain = if == = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.update.processor.UpdateRequestProcessorFactory = new new new new = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return public public return UpdateRequestProcessorChain public public final final decl_stmt org.apache.solr.update.processor.UpdateRequestProcessorChain = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + return UpdateRequestProcessorChain ProcessorInfo String public public decl_stmt java.lang.String = decl_stmt org.apache.solr.update.processor.UpdateRequestProcessorChain = decl_stmt ProcessorInfo = new if call ProcessorInfo.isEmpty() call ProcessorInfo.isEmpty() call ProcessorInfo.isEmpty() call ProcessorInfo.isEmpty() call ProcessorInfo.isEmpty() return return public < public < return public public call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() int boolean public public decl_stmt int = call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() if > return if < call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() assert : return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + if != for : try catch if instanceof throw if != call org.apache.solr.core.RequestHandlers.close() call org.apache.solr.core.RequestHandlers.close() call org.apache.solr.core.RequestHandlers.close() call org.apache.solr.core.RequestHandlers.close() call org.apache.solr.core.RequestHandlers.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() call decl PluginBag.close() if != try call org.apache.solr.core.MemClassLoader.close() call org.apache.solr.core.MemClassLoader.close() call org.apache.solr.core.MemClassLoader.close() call org.apache.solr.core.MemClassLoader.close() call org.apache.solr.core.MemClassLoader.close() catch try if != call UpdateHandler.close() call UpdateHandler.close() call UpdateHandler.close() call UpdateHandler.close() call UpdateHandler.close() catch if instanceof throw decl_stmt boolean = try if != if instanceof = call org.apache.solr.update.SolrCoreState.decrefSolrCoreState(IndexWriterCloser) call org.apache.solr.update.SolrCoreState.decrefSolrCoreState(IndexWriterCloser) call org.apache.solr.update.SolrCoreState.decrefSolrCoreState(IndexWriterCloser) call org.apache.solr.update.SolrCoreState.decrefSolrCoreState(IndexWriterCloser) call org.apache.solr.update.SolrCoreState.decrefSolrCoreState(IndexWriterCloser) else = call org.apache.solr.update.SolrCoreState.decrefSolrCoreState(IndexWriterCloser) call org.apache.solr.update.SolrCoreState.decrefSolrCoreState(IndexWriterCloser) call org.apache.solr.update.SolrCoreState.decrefSolrCoreState(IndexWriterCloser) call org.apache.solr.update.SolrCoreState.decrefSolrCoreState(IndexWriterCloser) call org.apache.solr.update.SolrCoreState.decrefSolrCoreState(IndexWriterCloser) catch if instanceof throw try catch if instanceof throw assert try catch if instanceof throw try call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() catch if instanceof throw if try call DirectoryFactory.close() call DirectoryFactory.close() call DirectoryFactory.close() call DirectoryFactory.close() call DirectoryFactory.close() catch if instanceof throw if != for : try catch if instanceof throw assert public public return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() public public return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() <= protected protected throws try if != call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + + + finally public public if == = new <> call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() StringBuilder public static public static if ! return decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) == : call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public return public < public < return public public return call org.apache.solr.core.RequestHandlers.register(String,SolrRequestHandler) call org.apache.solr.core.RequestHandlers.register(String,SolrRequestHandler) call org.apache.solr.core.RequestHandlers.register(String,SolrRequestHandler) call org.apache.solr.core.RequestHandlers.register(String,SolrRequestHandler) call org.apache.solr.core.RequestHandlers.register(String,SolrRequestHandler) decl Map private private decl_stmt java.util.Map < = for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl PluginBag.init() call decl PluginBag.init() call decl PluginBag.init() call decl PluginBag.init() call decl PluginBag.init() for : call decl PluginBag.keySet() call decl PluginBag.keySet() call decl PluginBag.keySet() call decl PluginBag.keySet() call decl PluginBag.keySet() if call decl PluginBag.isLoaded() call decl PluginBag.isLoaded() call decl PluginBag.isLoaded() call decl PluginBag.isLoaded() call decl PluginBag.isLoaded() && call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() instanceof if ! call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.getRegistry() call decl PluginBag.getRegistry() call decl PluginBag.getRegistry() call decl PluginBag.getRegistry() call decl PluginBag.getRegistry() break public public return call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() public < public < return public public return public < public < return public < public < synchronized if != call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() return decl RefCounted public < public < synchronized if ! call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() call decl LinkedList.isEmpty() decl_stmt org.apache.solr.util.RefCounted < = call decl LinkedList.getLast() call decl LinkedList.getLast() call decl LinkedList.getLast() call decl LinkedList.getLast() call decl LinkedList.getLast() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() return return : public < public < synchronized if != call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() return call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() try synchronized if != call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() return return finally call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() public < public < final final final return SolrIndexSearcher DirectoryReader decl RefCounted String String decl RefCounted boolean DirectoryReader String String decl RefCounted decl List public < public < if throw new decl_stmt org.apache.solr.search.SolrIndexSearcher decl_stmt org.apache.solr.util.RefCounted < = call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() try decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = if ! = = synchronized = if != call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() if != && || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt org.apache.lucene.index.DirectoryReader decl_stmt org.apache.lucene.index.DirectoryReader = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() decl_stmt org.apache.solr.util.RefCounted < = try if != = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() else = finally if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() if == if call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() return else if call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() && call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() == call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() return call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() call DirectoryReader.incRef() = decl_stmt boolean final final = ! decl_stmt java.lang.String final final = : = new else if != decl_stmt org.apache.lucene.index.DirectoryReader = call decl Callable.call() call decl Callable.call() call decl Callable.call() call decl Callable.call() call decl Callable.call() = new : ! else decl_stmt org.apache.solr.util.RefCounted < = decl_stmt org.apache.lucene.index.DirectoryReader = try = call IndexReaderFactory.newReader() call IndexReaderFactory.newReader() call IndexReaderFactory.newReader() call IndexReaderFactory.newReader() call IndexReaderFactory.newReader() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() = new : ! decl_stmt java.util.List < < = : decl_stmt org.apache.solr.util.RefCounted < = call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() synchronized if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return catch throw new finally call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() decl boolean SolrIndexSearcher boolean decl RefCounted decl RefCounted SolrIndexSearcher decl RefCounted decl RefCounted boolean String Future public < public < final final final synchronized if != && ! if call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() return else return if > && ! && == try call java.lang.Object.wait(long,int) call java.lang.Object.wait(long,int) call java.lang.Object.wait(long,int) call java.lang.Object.wait(long,int) call java.lang.Object.wait(long,int) catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if != && ! if call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() return else return ++ if < call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + = else if > -- decl_stmt java.lang.String = + + call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + throw new else if > call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + decl_stmt boolean final final final = new decl_stmt org.apache.solr.util.RefCounted < = decl_stmt org.apache.solr.util.RefCounted < = decl_stmt boolean = call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() try = if call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() decl_stmt org.apache.solr.util.RefCounted final final final < = decl_stmt org.apache.solr.search.SolrIndexSearcher final final = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() decl_stmt boolean = synchronized if == if = = else = call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() decl_stmt org.apache.solr.search.SolrIndexSearcher final final = == : call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() decl_stmt java.util.concurrent.Future = if != if != = call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) try call org.apache.solr.search.SolrIndexSearcher.warm(SolrIndexSearcher) call org.apache.solr.search.SolrIndexSearcher.warm(SolrIndexSearcher) call org.apache.solr.search.SolrIndexSearcher.warm(SolrIndexSearcher) call org.apache.solr.search.SolrIndexSearcher.warm(SolrIndexSearcher) call org.apache.solr.search.SolrIndexSearcher.warm(SolrIndexSearcher) catch if instanceof throw return if == = call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) try for : catch if instanceof throw return if != = call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) try for : catch if instanceof throw return decl_stmt org.apache.solr.util.RefCounted final final final < = if ! = call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) try catch if instanceof throw finally if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() return if != = = return : catch if instanceof throw throw new finally if ! synchronized -- if < call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + = call Object.notify() call Object.notify() call Object.notify() call Object.notify() call Object.notify() if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() if call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() decl RefCounted private < private < final final final < < decl_stmt org.apache.solr.util.RefCounted < = new < public public try synchronized if > return catch + call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() call decl RefCounted.incref() return public public try synchronized if > return catch + public public return SolrIndexSearcher private private < synchronized try if == return if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() = = decl_stmt org.apache.solr.search.SolrIndexSearcher = call org.apache.solr.search.SolrIndexSearcher.register() call org.apache.solr.search.SolrIndexSearcher.register() call org.apache.solr.search.SolrIndexSearcher.register() call org.apache.solr.search.SolrIndexSearcher.register() call org.apache.solr.search.SolrIndexSearcher.register() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + catch finally -- call Object.notifyAll() call Object.notifyAll() call Object.notifyAll() call Object.notifyAll() call Object.notifyAll() public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + synchronized if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() = if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() String long public public if == decl_stmt java.lang.String = + + if call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + throw new if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() && > call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() if > if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.isWarnEnabled() call Logger.isWarnEnabled() && >= decl_stmt long final final = if >= call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + SolrParams decl NamedList decl NamedList String public static public static decl_stmt org.apache.solr.common.util.NamedList final final final < = new <> decl_stmt org.apache.solr.common.util.NamedList < = call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt org.apache.solr.common.params.SolrParams final final = decl_stmt java.lang.String final final = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if == call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() + + else if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() + call org.apache.solr.common.params.SolrParams.toFilteredSolrParams(List) call org.apache.solr.common.params.SolrParams.toFilteredSolrParams(List) call org.apache.solr.common.params.SolrParams.toFilteredSolrParams(List) call org.apache.solr.common.params.SolrParams.toFilteredSolrParams(List) call org.apache.solr.common.params.SolrParams.toFilteredSolrParams(List) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) + int Exception EchoParamStyle int decl NamedList SolrParams String public static public static decl_stmt org.apache.solr.common.util.NamedList < = decl_stmt int final final = decl_stmt int = decl_stmt Exception = if != if instanceof = else = call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() if > decl_stmt org.apache.solr.common.params.SolrParams = if != && call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if != decl_stmt EchoParamStyle = if == throw new + + + + + + + + if == call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() else if == call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() final public static final public static public < public < return RawWriter private static private static return new public public throws decl_stmt org.apache.solr.core.RawWriter = if != call RawWriter.write() call RawWriter.write() call RawWriter.write() call RawWriter.write() call RawWriter.write() public public return RawWriter public public throws decl_stmt org.apache.solr.core.RawWriter = if != call RawWriter.write() call RawWriter.write() call RawWriter.write() call RawWriter.write() call RawWriter.write() public public return public public return private private call decl PluginBag.init() call decl PluginBag.init() call decl PluginBag.init() call decl PluginBag.init() call decl PluginBag.init() if call decl PluginBag.getDefault() call decl PluginBag.getDefault() call decl PluginBag.getDefault() call decl PluginBag.getDefault() call decl PluginBag.getDefault() == call decl PluginBag.setDefault() call decl PluginBag.setDefault() call decl PluginBag.setDefault() call decl PluginBag.setDefault() call decl PluginBag.setDefault() public final public final return call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() public final public final return public public return call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() decl Map Object < < < < < < extends extends decl_stmt java.util.Map < = new <> for < < extends extends : try decl_stmt java.lang.Object = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() catch throw new return public public return call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() public public call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() call decl PluginBag.put() private < private < < < return call org.apache.solr.core.SolrConfig.getPluginInfos(String) call org.apache.solr.core.SolrConfig.getPluginInfos(String) call org.apache.solr.core.SolrConfig.getPluginInfos(String) call org.apache.solr.core.SolrConfig.getPluginInfos(String) call org.apache.solr.core.SolrConfig.getPluginInfos(String) T T public < public < < < < decl_stmt T = for : decl_stmt T = if = return decl List public < < public < < < < if return decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public < public < < < return public public return call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() call decl PluginBag.get() decl NamedList PluginInfo StorageIO String RestManager protected protected throws decl_stmt org.apache.solr.core.PluginInfo = decl_stmt org.apache.solr.common.util.NamedList < = decl_stmt org.apache.solr.rest.RestManager = if != if != = call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) call org.apache.solr.core.SolrResourceLoader.newInstance(String,Class,String,Class,Object) if != = < if == = new if == = new <> decl_stmt java.lang.String = call org.apache.solr.core.CoreDescriptor.getCollectionName() call org.apache.solr.core.CoreDescriptor.getCollectionName() call org.apache.solr.core.CoreDescriptor.getCollectionName() call org.apache.solr.core.CoreDescriptor.getCollectionName() call org.apache.solr.core.CoreDescriptor.getCollectionName() decl_stmt org.apache.solr.rest.StorageIO = call org.apache.solr.rest.RestManager.init(SolrResourceLoader,NamedList,StorageIO) call org.apache.solr.rest.RestManager.init(SolrResourceLoader,NamedList,StorageIO) call org.apache.solr.rest.RestManager.init(SolrResourceLoader,NamedList,StorageIO) call org.apache.solr.rest.RestManager.init(SolrResourceLoader,NamedList,StorageIO) call org.apache.solr.rest.RestManager.init(SolrResourceLoader,NamedList,StorageIO) return public public return public public return public public return public public return public public return public public return public public return public public return String decl NamedList CloudDescriptor String CoreDescriptor public public decl_stmt org.apache.solr.common.util.NamedList < = new <> call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() == : call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt org.apache.solr.core.CoreDescriptor = if != if != && call org.apache.solr.core.CoreDescriptor.getCoreContainer() call org.apache.solr.core.CoreDescriptor.getCoreContainer() call org.apache.solr.core.CoreDescriptor.getCoreContainer() call org.apache.solr.core.CoreDescriptor.getCoreContainer() call org.apache.solr.core.CoreDescriptor.getCoreContainer() != call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt org.apache.solr.cloud.CloudDescriptor = call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() call org.apache.solr.core.CoreDescriptor.getCloudDescriptor() if != decl_stmt java.lang.String = call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() if == = call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt java.lang.String = call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() if == = call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() return public public return CoreDescriptor public public if try call DirectoryFactory.remove() call DirectoryFactory.remove() call DirectoryFactory.remove() call DirectoryFactory.remove() call DirectoryFactory.remove() catch + + + if try call DirectoryFactory.remove() call DirectoryFactory.remove() call DirectoryFactory.remove() call DirectoryFactory.remove() call DirectoryFactory.remove() catch + + + if new public public public public decl_stmt org.apache.solr.core.CoreDescriptor = if != try call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() catch + + + call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() public public CoreDescriptor public public decl_stmt org.apache.solr.core.CoreDescriptor = if != try call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() catch + + + call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() call org.apache.solr.core.CoreDescriptor.getInstanceDir() File public static public static if decl_stmt File = new try catch + + + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() if try catch + + + public public call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public return call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() ZkSolrResourceLoader private private if ! instanceof return decl_stmt org.apache.solr.cloud.ZkSolrResourceLoader final final = if != call org.apache.solr.cloud.ZkSolrResourceLoader.getZkController() call org.apache.solr.cloud.ZkSolrResourceLoader.getZkController() call org.apache.solr.cloud.ZkSolrResourceLoader.getZkController() call org.apache.solr.cloud.ZkSolrResourceLoader.getZkController() call org.apache.solr.cloud.ZkSolrResourceLoader.getZkController() call org.apache.solr.cloud.ZkSolrResourceLoader.getConfigSetZkPath() call org.apache.solr.cloud.ZkSolrResourceLoader.getConfigSetZkPath() call org.apache.solr.cloud.ZkSolrResourceLoader.getConfigSetZkPath() call org.apache.solr.cloud.ZkSolrResourceLoader.getConfigSetZkPath() call org.apache.solr.cloud.ZkSolrResourceLoader.getConfigSetZkPath() String CoreContainer String int String String String SolrZkClient ManagedIndexSchema SolrConfig public static public static decl_stmt java.lang.String final final = decl_stmt org.apache.solr.core.CoreContainer final final = decl_stmt java.lang.String final final = + + decl_stmt java.lang.String final final = + + decl_stmt java.lang.String = if && instanceof decl_stmt org.apache.solr.schema.ManagedIndexSchema = = call ManagedIndexSchema.getResourceName() call ManagedIndexSchema.getResourceName() call ManagedIndexSchema.getResourceName() call ManagedIndexSchema.getResourceName() call ManagedIndexSchema.getResourceName() decl_stmt java.lang.String final final = == : + + return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.common.cloud.SolrZkClient = call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() call org.apache.solr.core.CoreContainer.getZkController() decl_stmt int = decl_stmt org.apache.solr.core.SolrConfig = try = call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() if == || return = = = if != = if != if || || call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try call org.apache.solr.core.CoreContainer.reload(String) call org.apache.solr.core.CoreContainer.reload(String) call org.apache.solr.core.CoreContainer.reload(String) call org.apache.solr.core.CoreContainer.reload(String) call org.apache.solr.core.CoreContainer.reload(String) catch return try = call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() call CoreContainer.solrCores() if == || return for : try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() public public call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() Stat private static private static if == return try decl_stmt Stat = if == if > - return return if call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() > call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() return return catch catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() catch return Thread String String String DirectoryFactory public public decl_stmt org.apache.solr.core.DirectoryFactory final final = decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = if != && != && != decl_stmt java.lang.Thread = new public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try call org.apache.solr.core.DirectoryFactory.cleanupOldIndexDirectories(String,String) call org.apache.solr.core.DirectoryFactory.cleanupOldIndexDirectories(String,String) call org.apache.solr.core.DirectoryFactory.cleanupOldIndexDirectories(String,String) call org.apache.solr.core.DirectoryFactory.cleanupOldIndexDirectories(String,String) call org.apache.solr.core.DirectoryFactory.cleanupOldIndexDirectories(String,String) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) call java.lang.Thread.setName(String) + call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.setDaemon(boolean) call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + Map decl Map Map decl List public < public < decl_stmt java.util.List < = new <> decl_stmt java.util.Map = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) for : call java.util.Map.entrySet() call java.util.Map.entrySet() call java.util.Map.entrySet() call java.util.Map.entrySet() call java.util.Map.entrySet() decl_stmt java.util.Map < = < decl_stmt java.util.Map = call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return