org.egothor.stemmer java.io.BufferedOutputStream import java.io.DataOutputStream import java.io.LineNumberReader import java.nio.charset.Charset import java.nio.file.Files import java.nio.file.Paths import java.util.Locale import java.util.StringTokenizer import org.apache.lucene.util.SuppressForbidden import class org.egothor.stemmer.Compile Trie boolean boolean int Optimizer2 String Lift Gener String String Optimizer StringTokenizer char LineNumberReader Diff String DataOutputStream boolean Lift = public static = public static throws if < return = == decl_stmt int = : decl_stmt boolean = if == = ++ = == if ++ decl_stmt java.lang.String = decl_stmt char = new - for = < ++ = + for = < ++ decl_stmt java.io.LineNumberReader decl_stmt org.egothor.stemmer.Diff = new = new for = call java.io.LineNumberReader.readLine() call java.io.LineNumberReader.readLine() call java.io.LineNumberReader.readLine() call java.io.LineNumberReader.readLine() call java.io.LineNumberReader.readLine() != = call java.io.LineNumberReader.readLine() call java.io.LineNumberReader.readLine() call java.io.LineNumberReader.readLine() call java.io.LineNumberReader.readLine() call java.io.LineNumberReader.readLine() try = decl_stmt java.util.StringTokenizer = new decl_stmt java.lang.String = call java.util.StringTokenizer.nextToken(String) call java.util.StringTokenizer.nextToken(String) call java.util.StringTokenizer.nextToken(String) call java.util.StringTokenizer.nextToken(String) call java.util.StringTokenizer.nextToken(String) if call org.egothor.stemmer.Trie.add(CharSequence,CharSequence) call org.egothor.stemmer.Trie.add(CharSequence,CharSequence) call org.egothor.stemmer.Trie.add(CharSequence,CharSequence) call org.egothor.stemmer.Trie.add(CharSequence,CharSequence) call org.egothor.stemmer.Trie.add(CharSequence,CharSequence) while call java.util.StringTokenizer.hasMoreTokens() call java.util.StringTokenizer.hasMoreTokens() call java.util.StringTokenizer.hasMoreTokens() call java.util.StringTokenizer.hasMoreTokens() call java.util.StringTokenizer.hasMoreTokens() decl_stmt java.lang.String = call java.util.StringTokenizer.nextToken(String) call java.util.StringTokenizer.nextToken(String) call java.util.StringTokenizer.nextToken(String) call java.util.StringTokenizer.nextToken(String) call java.util.StringTokenizer.nextToken(String) if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) == call org.egothor.stemmer.Trie.add(CharSequence,CharSequence) call org.egothor.stemmer.Trie.add(CharSequence,CharSequence) call org.egothor.stemmer.Trie.add(CharSequence,CharSequence) call org.egothor.stemmer.Trie.add(CharSequence,CharSequence) call org.egothor.stemmer.Trie.add(CharSequence,CharSequence) call org.egothor.stemmer.Diff.exec(String,String) call org.egothor.stemmer.Diff.exec(String,String) call org.egothor.stemmer.Diff.exec(String,String) call org.egothor.stemmer.Diff.exec(String,String) call org.egothor.stemmer.Diff.exec(String,String) catch call LineNumberReader.close() call LineNumberReader.close() call LineNumberReader.close() call LineNumberReader.close() call LineNumberReader.close() decl_stmt org.egothor.stemmer.Optimizer = new decl_stmt org.egothor.stemmer.Optimizer2 = new decl_stmt org.egothor.stemmer.Lift = new decl_stmt org.egothor.stemmer.Lift = new decl_stmt org.egothor.stemmer.Gener = new for = < ++ decl_stmt java.lang.String switch case = call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) = break case = call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) = break case = call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) = break case = call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) = break case = call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) call org.egothor.stemmer.Trie.reduce(Reduce) = break default: continue call Trie.printInfo() call Trie.printInfo() call Trie.printInfo() call Trie.printInfo() call Trie.printInfo() + decl_stmt DataOutputStream = new new + call DataOutputStream.writeUTF() call DataOutputStream.writeUTF() call DataOutputStream.writeUTF() call DataOutputStream.writeUTF() call DataOutputStream.writeUTF() call org.egothor.stemmer.Trie.store(DataOutput) call org.egothor.stemmer.Trie.store(DataOutput) call org.egothor.stemmer.Trie.store(DataOutput) call org.egothor.stemmer.Trie.store(DataOutput) call org.egothor.stemmer.Trie.store(DataOutput) call DataOutputStream.close() call DataOutputStream.close() call DataOutputStream.close() call DataOutputStream.close() call DataOutputStream.close() static static if = new ! else = new !