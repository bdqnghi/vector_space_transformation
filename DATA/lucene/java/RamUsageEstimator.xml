org.apache.lucene.util java.lang.reflect.Array import java.lang.reflect.Field import java.lang.reflect.Method import java.lang.reflect.Modifier import java.security.AccessController import java.security.PrivilegedAction import java.text.DecimalFormat import java.text.DecimalFormatSymbols import java.util.IdentityHashMap import java.util.Locale import java.util.Map import class org.apache.lucene.util.RamUsageEstimator int String long int long String int long int int decl Map int int int int int int int boolean int long boolean public static public static += long - return - public static public static if >= && <= return return public static public static return long + public static public static return long + public static public static return long + long * public static public static return long + long * public static public static return long + long * public static public static return long + long * public static public static return long + long * public static public static return long + long * public static public static return long + long * decl Class public static public static if == return decl_stmt java.lang.Class final final final < = if call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() call decl Class.isArray() return else return decl Field decl Class long public static public static < if throw new if return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt long = for != = decl_stmt java.lang.Class final final final < = decl_stmt org.apache.solr.handler.dataimport.config.Field final final final = new < public public return call decl Class.getDeclaredFields() call decl Class.getDeclaredFields() call decl Class.getDeclaredFields() call decl Class.getDeclaredFields() call decl Class.getDeclaredFields() for : if ! = return public public return decl Class int long private static private static decl_stmt long = decl_stmt int final final = if > decl_stmt java.lang.Class < = if call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() += long * call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() else += long * return int decl Class static static final final decl_stmt java.lang.Class final final final < = decl_stmt int final final = call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Class.isPrimitive() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() : return + public static public static return new public static public static if / > return float / + else if / > return float / + else if / > return float / + else return + long public static public static decl_stmt long = for : if != += return