org.apache.lucene.analysis.icu.segmentation java.io.BufferedReader import java.io.IOException import java.io.InputStream import java.nio.charset.StandardCharsets import java.util.HashMap import java.util.List import java.util.Map import org.apache.lucene.analysis.util.ResourceLoader import org.apache.lucene.analysis.util.ResourceLoaderAware import org.apache.lucene.analysis.util.TokenizerFactory import org.apache.lucene.util.AttributeFactory import org.apache.lucene.util.IOUtils import com.ibm.icu.lang.UCharacter import com.ibm.icu.lang.UProperty import com.ibm.icu.lang.UScript import com.ibm.icu.text.BreakIterator import com.ibm.icu.text.RuleBasedBreakIterator import class org.apache.lucene.analysis.icu.segmentation.ICUTokenizerFactory super super extends super implements String ICUTokenizerConfig decl Map boolean BreakIterator int String public public throws assert != : if call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() = new else decl_stmt java.text.BreakIterator final final = new for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt int = decl_stmt java.lang.String = = = new public public if != return else return public public if != return else return StringBuilder String InputStream BufferedReader private private throws decl_stmt java.lang.StringBuilder = new decl_stmt java.io.InputStream = decl_stmt java.io.BufferedReader = new decl_stmt java.lang.String = while = call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) != if ! call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() return new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public assert != : return new