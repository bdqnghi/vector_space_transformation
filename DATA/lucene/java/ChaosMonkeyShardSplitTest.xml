org.apache.solr.cloud org.apache.lucene.util.LuceneTestCase.Slow import org.apache.solr.client.solrj.SolrClient import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.DocCollection import org.apache.solr.common.cloud.DocRouter import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.core.CloudConfig import org.apache.solr.handler.component.HttpShardHandlerFactory import org.apache.solr.update.UpdateShardHandler import org.apache.solr.update.UpdateShardHandlerConfig import org.apache.zookeeper.KeeperException import org.junit.Ignore import org.junit.Test import org.slf4j.Logger import org.slf4j.LoggerFactory import java.io.IOException import java.lang.invoke.MethodHandles import java.util.Collection import java.util.List import java.util.concurrent.atomic.AtomicInteger import class annotation annotation org.apache.solr.cloud.ChaosMonkeyShardSplitTest super super extends Logger int AtomicInteger Thread Thread decl List SolrClient int CloudJettyRunner Slice decl Range ClusterState decl int int OverseerRestarter DocRouter decl DocRouter public public throws decl_stmt org.apache.solr.common.cloud.ClusterState = decl_stmt org.apache.solr.common.cloud.DocRouter final final = call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) call org.apache.solr.common.cloud.ClusterState.getSlice(String,String) decl_stmt org.apache.lucene.facet.range.Range = call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() != call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() call org.apache.solr.common.cloud.Slice.getRange() : call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() call org.apache.solr.common.cloud.DocRouter.fullRange() decl_stmt java.util.List final final final < = call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) call org.apache.solr.common.cloud.DocRouter.partitionRange(int,Range) decl_stmt int final final final = new call decl Range.size() call decl Range.size() call decl Range.size() call decl Range.size() call decl Range.size() decl_stmt int = call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() decl_stmt java.lang.Thread = decl_stmt OverseerRestarter = decl_stmt java.lang.Thread = decl_stmt org.apache.solr.client.solrj.SolrClient final final = try for = < ++ = new public public decl_stmt int = for = < ++ try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call int.start() call int.start() call int.start() call int.start() call int.start() decl_stmt CloudJettyRunner = decl_stmt CloudJettyRunner = while == = = new = new call OverseerRestarter.start() call OverseerRestarter.start() call OverseerRestarter.start() call OverseerRestarter.start() call OverseerRestarter.start() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) finally if != call int.join() call int.join() call int.join() call int.join() call int.join() if != call Thread.commit() call Thread.commit() call Thread.commit() call Thread.commit() call Thread.commit() if != = if != call OverseerRestarter.join() call OverseerRestarter.join() call OverseerRestarter.join() call OverseerRestarter.join() call OverseerRestarter.join() int public public decl_stmt int = for = < ++ try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() public public try = while if call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() > try call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = catch try catch catch finally if != try catch Slice DocCollection decl Collection ClusterState boolean ZkStateReader private private throws for = < ++ decl_stmt org.apache.solr.common.cloud.ZkStateReader = call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) decl_stmt java.util.Collection < = call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() decl_stmt boolean = for : if ! call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) || != = break if return SolrInputDocument protected protected throws decl_stmt org.apache.solr.common.SolrInputDocument = new UpdateShardHandler ZkStateReader LeaderElector ElectionContext Overseer SolrZkClient private private throws decl_stmt org.apache.solr.common.cloud.SolrZkClient = new decl_stmt org.apache.solr.common.cloud.ZkStateReader = new decl_stmt org.apache.solr.cloud.LeaderElector = new decl_stmt org.apache.solr.update.UpdateShardHandler = new decl_stmt org.apache.solr.cloud.Overseer = new new new call org.apache.solr.cloud.Overseer.close() call org.apache.solr.cloud.Overseer.close() call org.apache.solr.cloud.Overseer.close() call org.apache.solr.cloud.Overseer.close() call org.apache.solr.cloud.Overseer.close() decl_stmt org.apache.solr.cloud.ElectionContext = new call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) return