org.apache.lucene.search.join java.io.IOException import java.util.HashMap import java.util.Iterator import java.util.Locale import java.util.Map import java.util.TreeSet import java.util.function.BiConsumer import java.util.function.LongFunction import org.apache.lucene.document.DoublePoint import org.apache.lucene.document.FieldType.LegacyNumericType import org.apache.lucene.document.FloatPoint import org.apache.lucene.document.IntPoint import org.apache.lucene.document.LongPoint import org.apache.lucene.index.BinaryDocValues import org.apache.lucene.index.DocValues import org.apache.lucene.index.DocValuesType import org.apache.lucene.index.IndexReader import org.apache.lucene.index.LeafReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.MultiDocValues import org.apache.lucene.index.NumericDocValues import org.apache.lucene.index.SortedDocValues import org.apache.lucene.index.SortedNumericDocValues import org.apache.lucene.index.SortedSetDocValues import org.apache.lucene.search.Collector import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.MatchNoDocsQuery import org.apache.lucene.search.PointInSetQuery import org.apache.lucene.search.Query import org.apache.lucene.search.Scorer import org.apache.lucene.search.SimpleCollector import org.apache.lucene.search.join.DocValuesTermsCollector.Function import org.apache.lucene.util.BytesRef import class org.apache.lucene.search.join.JoinUtil GenericTermsCollector decl Function decl Function public static public static throws decl_stmt org.apache.lucene.search.join.GenericTermsCollector final final if decl_stmt org.apache.lucene.search.join.Function < = = else decl_stmt org.apache.lucene.search.join.Function < = = return decl Function decl Function GenericTermsCollector public static public static throws decl_stmt org.apache.lucene.search.join.GenericTermsCollector final final if decl_stmt org.apache.lucene.search.join.Function < = = else decl_stmt org.apache.lucene.search.join.Function < = = return Float Integer decl Iterator SortedNumericDocValues Float Integer decl PointInSetIncludingScoreQuery long Float Scorer decl Map decl Map NumericDocValues decl TreeSet BytesRef decl LongFunction Collector boolean decl BiConsumer int public static public static < extends extends throws decl_stmt java.util.TreeSet < = new <> decl_stmt java.util.Map < = new <> decl_stmt java.util.Map < = new <> decl_stmt boolean = != decl_stmt BiConsumer < if == = decl_stmt java.lang.Float = call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == = decl_stmt java.lang.Float = call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if == = decl_stmt java.lang.Float = call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + else if == = decl_stmt java.lang.Float = call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + decl_stmt java.lang.Integer = call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() ++ else = throw new decl_stmt LongFunction < if == = decl_stmt java.lang.Float = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return / else = :: decl_stmt org.apache.lucene.search.Collector if = new decl_stmt SortedNumericDocValues decl_stmt org.apache.lucene.search.Scorer public public throws call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() for = < call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() ++ decl_stmt long = call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() if call decl BiConsumer.accept() call decl BiConsumer.accept() call decl BiConsumer.accept() call decl BiConsumer.accept() call decl BiConsumer.accept() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() protected protected throws = public public throws = public public return else = new decl_stmt NumericDocValues decl_stmt org.apache.lucene.search.Scorer public public throws decl_stmt long = call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() if call decl BiConsumer.accept() call decl BiConsumer.accept() call decl BiConsumer.accept() call decl BiConsumer.accept() call decl BiConsumer.accept() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() call Scorer.score() protected protected throws = public public throws = public public return decl_stmt java.util.Iterator < = call decl TreeSet.iterator() call decl TreeSet.iterator() call decl TreeSet.iterator() call decl TreeSet.iterator() call decl TreeSet.iterator() decl_stmt int final final decl_stmt org.apache.lucene.util.BytesRef final final = new decl_stmt Stream final final final final final if = = new public public if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt long = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() int if = call decl LongFunction.apply() call decl LongFunction.apply() call decl LongFunction.apply() call decl LongFunction.apply() call decl LongFunction.apply() return else return else if = = new public public if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt long = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if = call decl LongFunction.apply() call decl LongFunction.apply() call decl LongFunction.apply() call decl LongFunction.apply() call decl LongFunction.apply() return else return else if = = new public public if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt long = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() int if = call decl LongFunction.apply() call decl LongFunction.apply() call decl LongFunction.apply() call decl LongFunction.apply() call decl LongFunction.apply() return else return else if = = new public public if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt long = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if = call decl LongFunction.apply() call decl LongFunction.apply() call decl LongFunction.apply() call decl LongFunction.apply() call decl LongFunction.apply() return else return else throw new = new = if return new protected protected return else return new protected protected return long public public throws for = < ++ decl_stmt long = if protected protected throws = public public throws = public public return long public public throws decl_stmt long = if protected protected throws = public public throws = public public return long public public if decl_stmt long = int if = return else return long public public if decl_stmt long = if = return else return long public public if decl_stmt long = int if = return else return long public public if decl_stmt long = if = return else return protected protected return protected protected return private static private static final final throws switch case return new case case case case return new default: throw new public static public static throws return IndexReader Query SortedDocValues long GlobalOrdinalsWithScoreCollector Query int LeafReader GlobalOrdinalsCollector public static public static throws decl_stmt org.apache.lucene.index.IndexReader = decl_stmt int = call org.apache.lucene.index.IndexReader.leaves() call org.apache.lucene.index.IndexReader.leaves() call org.apache.lucene.index.IndexReader.leaves() call org.apache.lucene.index.IndexReader.leaves() call org.apache.lucene.index.IndexReader.leaves() decl_stmt long final final if == return new else if == = decl_stmt org.apache.lucene.index.LeafReader = decl_stmt org.apache.lucene.index.SortedDocValues = call LeafReader.getSortedDocValues() call LeafReader.getSortedDocValues() call LeafReader.getSortedDocValues() call LeafReader.getSortedDocValues() call LeafReader.getSortedDocValues() if != = call SortedDocValues.getValueCount() call SortedDocValues.getValueCount() call SortedDocValues.getValueCount() call SortedDocValues.getValueCount() call SortedDocValues.getValueCount() else return new else if == throw new = decl_stmt org.apache.lucene.search.Query final final = decl_stmt org.apache.lucene.search.Query final final = decl_stmt org.apache.lucene.search.join.GlobalOrdinalsWithScoreCollector switch case = new break case = new break case = new break case = new break case if <= && == decl_stmt org.apache.lucene.search.join.GlobalOrdinalsCollector = new return new call org.apache.lucene.search.join.GlobalOrdinalsCollector.getCollectorOrdinals() call org.apache.lucene.search.join.GlobalOrdinalsCollector.getCollectorOrdinals() call org.apache.lucene.search.join.GlobalOrdinalsCollector.getCollectorOrdinals() call org.apache.lucene.search.join.GlobalOrdinalsCollector.getCollectorOrdinals() call org.apache.lucene.search.join.GlobalOrdinalsCollector.getCollectorOrdinals() else = new break default: throw new return new