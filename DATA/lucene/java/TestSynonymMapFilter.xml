org.apache.lucene.analysis.synonym java.io.IOException import java.io.StringReader import java.util.ArrayList import java.util.Arrays import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Random import java.util.Set import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.BaseTokenStreamTestCase import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.analysis.MockTokenizer import org.apache.lucene.analysis.Tokenizer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.MockGraphTokenFilter import org.apache.lucene.analysis.core.KeywordTokenizer import org.apache.lucene.analysis.tokenattributes.* import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.TestUtil import class org.apache.lucene.analysis.synonym.TestSynonymMapFilter super super extends PositionIncrementAttribute decl SynonymMap CharTermAttribute decl Builder Tokenizer SynonymFilter PositionLengthAttribute CharsRefBuilder CharsRefBuilder private private if + + + + + decl_stmt org.apache.lucene.util.CharsRefBuilder = new decl_stmt org.apache.lucene.util.CharsRefBuilder = new call decl SynonymMap.add() call decl SynonymMap.add() call decl SynonymMap.add() call decl SynonymMap.add() call decl SynonymMap.add() call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() call org.apache.lucene.util.CharsRefBuilder.get() decl char private private decl_stmt char final final final = for = < ++ int int int int int int int decl String String decl String private private throws if + + + call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() new call org.apache.lucene.analysis.Tokenizer.reset() call org.apache.lucene.analysis.Tokenizer.reset() call org.apache.lucene.analysis.Tokenizer.reset() call org.apache.lucene.analysis.Tokenizer.reset() call org.apache.lucene.analysis.Tokenizer.reset() decl_stmt java.lang.String final final final = decl_stmt int = while call Tokenizer.incrementToken() call Tokenizer.incrementToken() call Tokenizer.incrementToken() call Tokenizer.incrementToken() call Tokenizer.incrementToken() if + call SynonymFilter.toString() call SynonymFilter.toString() call SynonymFilter.toString() call SynonymFilter.toString() call SynonymFilter.toString() + + call CharTermAttribute.getPositionIncrement() call CharTermAttribute.getPositionIncrement() call CharTermAttribute.getPositionIncrement() call CharTermAttribute.getPositionIncrement() call CharTermAttribute.getPositionIncrement() + + call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() + + call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() < decl_stmt int final final = call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() decl_stmt int final final = call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() decl_stmt java.lang.String final final final = ++ for = < ++ if > call Tokenizer.incrementToken() call Tokenizer.incrementToken() call Tokenizer.incrementToken() call Tokenizer.incrementToken() call Tokenizer.incrementToken() if + call SynonymFilter.toString() call SynonymFilter.toString() call SynonymFilter.toString() call SynonymFilter.toString() call SynonymFilter.toString() + + call CharTermAttribute.getPositionIncrement() call CharTermAttribute.getPositionIncrement() call CharTermAttribute.getPositionIncrement() call CharTermAttribute.getPositionIncrement() call CharTermAttribute.getPositionIncrement() + + call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() + + call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() decl_stmt int final final = decl_stmt int final final = decl_stmt java.lang.String final final decl_stmt int final final decl_stmt int final final if != - = if != - = + = + else = + = else = = = call SynonymFilter.toString() call SynonymFilter.toString() call SynonymFilter.toString() call SynonymFilter.toString() call SynonymFilter.toString() == : call CharTermAttribute.getPositionIncrement() call CharTermAttribute.getPositionIncrement() call CharTermAttribute.getPositionIncrement() call CharTermAttribute.getPositionIncrement() call CharTermAttribute.getPositionIncrement() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionIncrementAttribute.getPositionLength() call PositionIncrementAttribute.getPositionLength() call PositionIncrementAttribute.getPositionLength() call PositionIncrementAttribute.getPositionLength() call PositionIncrementAttribute.getPositionLength() call Tokenizer.end() call Tokenizer.end() call Tokenizer.end() call Tokenizer.end() call Tokenizer.end() call org.apache.lucene.analysis.Tokenizer.close() call org.apache.lucene.analysis.Tokenizer.close() call org.apache.lucene.analysis.Tokenizer.close() call org.apache.lucene.analysis.Tokenizer.close() call org.apache.lucene.analysis.Tokenizer.close() if SynonymMap Tokenizer Analyzer public public throws = new decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt org.apache.lucene.analysis.Analyzer final final = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new new new new new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new SynonymMap Tokenizer Analyzer public public throws = new decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt org.apache.lucene.analysis.Analyzer final final = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new new new new new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new public public throws = new = new call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() new call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() = new call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() > call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() call Tokenizer.getCaptureCount() decl char private private assert <= decl_stmt char = new * for = < ++ * = + * + = return new int int decl OneSyn decl String decl boolean OneSyn boolean int int decl String int OneSyn decl boolean decl String StringBuilder int int int int public public < == decl_stmt int final final = / decl_stmt boolean = new decl_stmt boolean = new decl_stmt java.lang.String = new + decl_stmt OneSyn = new for : decl_stmt int = - while = + if == - break == decl_stmt int final final = / call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() == if == = else if call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() > = else call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() < for = < ++ decl_stmt OneSyn final final = if != decl_stmt int final final = + call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() / for = + < && < + ++ = for = < ++ decl_stmt OneSyn final final = if == continue for = < + call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() / ++ + = + |= for : decl_stmt java.lang.String final final final = + / decl_stmt int final final = + decl_stmt int = for = < ++ if == = ++ else = + + ++ decl_stmt int final final if < decl_stmt int final final if == = * + call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() = + call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() call OneSyn.in() / : else = * + = = + + + + decl_stmt java.lang.StringBuilder = new decl_stmt java.lang.String = decl_stmt int final final = + for = < ++ decl_stmt boolean = if >= && == break if < && ! || != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = if != if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if ! continue if < - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() String decl Map boolean int OneSyn int int String String decl List String public public throws decl_stmt int final final = decl_stmt int final final = decl_stmt java.lang.String final final = if + decl_stmt int final final = decl_stmt java.util.Map final final final < = new <> decl_stmt java.util.List final final final < = new <> decl_stmt boolean final final = if + = new for = < ++ decl_stmt java.lang.String final final = decl_stmt OneSyn = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = decl_stmt java.lang.String final final = call OneSyn.out() call OneSyn.out() call OneSyn.out() call OneSyn.out() call OneSyn.out() call OneSyn.out() call OneSyn.out() call OneSyn.out() call OneSyn.out() if + + + + + + + = new call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() new call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() = new call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() if decl_stmt java.lang.String final final = if + decl Set int String private private < decl_stmt java.util.Set < = new <> for : decl_stmt int = while < decl_stmt java.lang.String = if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() ++ else call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() String private private while decl_stmt java.lang.String final final = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() != && call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) == - return SynonymMap Tokenizer int Analyzer boolean int public public throws decl_stmt int final final = for = < ++ = new decl_stmt int final final = for = < ++ decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt boolean final final = decl_stmt org.apache.lucene.analysis.Analyzer final final = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new SynonymMap Tokenizer TokenStream int Random Analyzer boolean int TokenStream public public throws decl_stmt int final final = decl_stmt java.util.Random = for = < ++ = new call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt int final final = for = < ++ call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt boolean final final = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt org.apache.lucene.analysis.Analyzer final final = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new decl_stmt org.apache.lucene.analysis.TokenStream = new decl_stmt org.apache.lucene.analysis.TokenStream = new return new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() TokenStream TokenStream Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new decl_stmt org.apache.lucene.analysis.TokenStream = new decl_stmt org.apache.lucene.analysis.TokenStream = new return new SynonymMap Tokenizer int Random Analyzer boolean int public public throws decl_stmt java.util.Random = decl_stmt int final final = for = < ++ = new call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt int final final = for = < ++ call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt boolean final final = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt org.apache.lucene.analysis.Analyzer final final = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new SynonymMap Tokenizer int Random Analyzer boolean int public public throws decl_stmt java.util.Random = decl_stmt int final final = for = < ++ = new call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt int final final = if + + + for = < ++ call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt boolean final final = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt org.apache.lucene.analysis.Analyzer final final = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new SynonymMap Tokenizer SolrSynonymParser Analyzer Analyzer String public public throws decl_stmt java.lang.String = + decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.analysis.synonym.SolrSynonymParser = new call org.apache.lucene.analysis.synonym.SolrSynonymParser.parse(Reader) call org.apache.lucene.analysis.synonym.SolrSynonymParser.parse(Reader) call org.apache.lucene.analysis.synonym.SolrSynonymParser.parse(Reader) call org.apache.lucene.analysis.synonym.SolrSynonymParser.parse(Reader) call org.apache.lucene.analysis.synonym.SolrSynonymParser.parse(Reader) new decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call SolrSynonymParser.build() call SolrSynonymParser.build() call SolrSynonymParser.build() call SolrSynonymParser.build() call SolrSynonymParser.build() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new boolean public public throws = new decl_stmt boolean final final = = new call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() new call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() = new call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() if else Analyzer SynonymMap boolean Tokenizer public public throws = new decl_stmt boolean final final = decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new new new new new new new new new new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new Analyzer SynonymMap boolean Tokenizer public public throws = new decl_stmt boolean final final = decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new Analyzer SynonymMap boolean Tokenizer public public throws = new decl_stmt boolean final final = decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new Analyzer SynonymMap boolean Tokenizer public public throws = new decl_stmt boolean final final = decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new Analyzer SynonymMap boolean Tokenizer public public throws = new decl_stmt boolean final final = decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new boolean public public throws = new decl_stmt boolean final final = = new call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() call decl Builder.setReader() new call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() = new call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() Analyzer SynonymMap boolean Tokenizer public public throws = new decl_stmt boolean final final = decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new new new new new new new new new new new new new new new new new new new new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new Analyzer SynonymMap boolean Tokenizer public public throws = new decl_stmt boolean final final = decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new Analyzer SynonymMap boolean Tokenizer public public throws = new decl_stmt boolean final final = decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new Analyzer SynonymMap boolean Tokenizer public public throws = new decl_stmt boolean final final = decl_stmt org.apache.lucene.analysis.synonym.SynonymMap final final = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new new new new new call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Tokenizer protected protected decl_stmt org.apache.lucene.analysis.Tokenizer = new return new new IllegalArgumentException Tokenizer public public throws decl_stmt org.apache.lucene.analysis.Tokenizer = new call org.apache.lucene.analysis.Tokenizer.setReader(Reader) call org.apache.lucene.analysis.Tokenizer.setReader(Reader) call org.apache.lucene.analysis.Tokenizer.setReader(Reader) call org.apache.lucene.analysis.Tokenizer.setReader(Reader) call org.apache.lucene.analysis.Tokenizer.setReader(Reader) new decl_stmt IllegalArgumentException = new new call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage() call IllegalArgumentException.getMessage()