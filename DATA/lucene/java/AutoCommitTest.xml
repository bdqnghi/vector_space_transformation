org.apache.solr.update java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collection import java.util.HashMap import java.util.concurrent.TimeUnit import org.apache.lucene.util.LuceneTestCase.Slow import org.apache.solr.common.params.MapSolrParams import org.apache.solr.common.util.ContentStream import org.apache.solr.common.util.ContentStreamBase import org.apache.solr.common.util.NamedList import org.apache.solr.core.SolrCore import org.apache.solr.core.SolrEventListener import org.apache.solr.handler.UpdateRequestHandler import org.apache.solr.request.SolrQueryRequestBase import org.apache.solr.response.SolrQueryResponse import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.util.AbstractSolrTestCase import org.apache.solr.util.RefCounted import org.apache.solr.util.TimeOut import org.junit.BeforeClass import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.update.NewSearcherListener super super implements TriggerOn SolrIndexSearcher TriggerOn boolean public public public public if == && == = else if == && == = else if == = = public public = public public = public public = decl RefCounted SolrIndexSearcher TimeOut decl_stmt org.apache.solr.util.TimeOut = new while ! call org.apache.solr.util.TimeOut.hasTimedOut() call org.apache.solr.util.TimeOut.hasTimedOut() call org.apache.solr.util.TimeOut.hasTimedOut() call org.apache.solr.util.TimeOut.hasTimedOut() call org.apache.solr.util.TimeOut.hasTimedOut() if decl_stmt org.apache.solr.util.RefCounted < = call org.apache.solr.search.SolrIndexSearcher.getCore() call org.apache.solr.search.SolrIndexSearcher.getCore() call org.apache.solr.search.SolrIndexSearcher.getCore() call org.apache.solr.search.SolrIndexSearcher.getCore() call org.apache.solr.search.SolrIndexSearcher.getCore() decl_stmt org.apache.solr.search.SolrIndexSearcher = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() if == return try catch return