org.apache.lucene.util java.util.Arrays import java.util.concurrent.atomic.AtomicLong import org.apache.lucene.util.ByteBlockPool.DirectAllocator import static static org.apache.lucene.util.ByteBlockPool.BYTE_BLOCK_MASK import static static org.apache.lucene.util.ByteBlockPool.BYTE_BLOCK_SHIFT import static static org.apache.lucene.util.ByteBlockPool.BYTE_BLOCK_SIZE import class org.apache.lucene.util.BytesRefHash int int Counter decl int int decl int int BytesRef int BytesStartArray int ByteBlockPool public public return public public assert != : assert < : + call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) return int assert != : decl_stmt int = for = < ++ if != - if < = = - ++ assert == = return decl int int BytesRef int int public public decl_stmt int final final final = new protected protected decl_stmt int final final = = = protected protected decl_stmt int final final = = assert > && > call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) return call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() protected protected decl_stmt int final final = assert > call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) protected protected decl_stmt int final final = assert > call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) return decl_stmt org.apache.lucene.util.BytesRef private final final = new = new = new return int protected protected decl_stmt int final final = = = int protected protected decl_stmt int final final = = assert > && > call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) return call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() call BytesRef.compareTo() int protected protected decl_stmt int final final = assert > call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) int protected protected decl_stmt int final final = assert > call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) return private private call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) call org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int) return call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) call org.apache.lucene.util.BytesRef.bytesEquals(BytesRef) int private private decl_stmt int = while >= && / > /= if != call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) * - - = = new - = / = - return else return public public = = if call org.apache.lucene.util.ByteBlockPool.reset() call org.apache.lucene.util.ByteBlockPool.reset() call org.apache.lucene.util.ByteBlockPool.reset() call org.apache.lucene.util.ByteBlockPool.reset() call org.apache.lucene.util.ByteBlockPool.reset() = call BytesStartArray.clear() call BytesStartArray.clear() call BytesStartArray.clear() call BytesStartArray.clear() call BytesStartArray.clear() if != - && return - public public public public = call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) * - int decl byte int int int int public public assert != : decl_stmt int final final = decl_stmt int final final = decl_stmt int = if == - decl_stmt int final final = + if + > if > throw new + - + + call org.apache.lucene.util.ByteBlockPool.nextBuffer() call org.apache.lucene.util.ByteBlockPool.nextBuffer() call org.apache.lucene.util.ByteBlockPool.nextBuffer() call org.apache.lucene.util.ByteBlockPool.nextBuffer() call org.apache.lucene.util.ByteBlockPool.nextBuffer() decl_stmt byte final final final = decl_stmt int final final = if >= = call BytesStartArray.grow() call BytesStartArray.grow() call BytesStartArray.grow() call BytesStartArray.grow() call BytesStartArray.grow() assert < + : + + + = ++ = + if < = byte += + assert >= : + + else = | & + = >> & += + + assert == - = if == * return return - + public public return int int int private private assert != : decl_stmt int = decl_stmt int = & decl_stmt int = if != - && ! do ++ = & = != - && ! return int int int public public assert != : decl_stmt int = decl_stmt int = & decl_stmt int = if != - && != do ++ = & = != - && != if == - if >= = call BytesStartArray.grow() call BytesStartArray.grow() call BytesStartArray.grow() call BytesStartArray.grow() call BytesStartArray.grow() assert < + : + + + = ++ = assert == - = if == * return return - + int int int int decl byte int int int decl int int private private final final decl_stmt int final final = - call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) * decl_stmt int final final final = new - for = < ++ decl_stmt int final final = if != - decl_stmt int if decl_stmt int final final = decl_stmt int final final = & decl_stmt byte final final final = >> decl_stmt int final final decl_stmt int if & == = = + else = & + + & << = + = else = decl_stmt int = & assert >= if != - do ++ = & != - = = call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) * - = = = / private private return public public if == = call BytesStartArray.init() call BytesStartArray.init() call BytesStartArray.init() call BytesStartArray.init() call BytesStartArray.init() if == = new call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) * public public assert != : assert >= && < : return public public return = public public assert != return = + public public return = new public public return