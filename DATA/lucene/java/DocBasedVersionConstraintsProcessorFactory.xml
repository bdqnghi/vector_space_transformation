org.apache.solr.update.processor org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.solr.common.SolrException import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.util.NamedList import org.apache.solr.core.SolrCore import org.apache.solr.handler.component.RealTimeGetComponent import org.apache.solr.request.SolrQueryRequest import org.apache.solr.response.SolrQueryResponse import org.apache.solr.schema.FieldType import org.apache.solr.schema.SchemaField import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.update.AddUpdateCommand import org.apache.solr.update.DeleteUpdateCommand import org.apache.solr.update.UpdateCommand import org.apache.solr.update.VersionInfo import org.apache.solr.util.RefCounted import org.apache.solr.util.plugin.SolrCoreAware import org.slf4j.Logger import org.slf4j.LoggerFactory import java.io.IOException import java.lang.invoke.MethodHandles import java.util.Map import static static org.apache.solr.common.SolrException.ErrorCode.BAD_REQUEST import static static org.apache.solr.common.SolrException.ErrorCode.CONFLICT import static static org.apache.solr.common.SolrException.ErrorCode.SERVER_ERROR import static static org.apache.solr.update.processor.DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM import class org.apache.solr.update.processor.DocBasedVersionConstraintsProcessorFactory super super extends super implements String boolean String Logger boolean Object public public decl_stmt java.lang.Object = if == throw new if ! instanceof throw new = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() = if != if ! instanceof throw new = call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() = if != if ! instanceof throw new = public public return new ValueSource SchemaField public public if == throw new if == throw new decl_stmt org.apache.solr.schema.SchemaField = if == || ! call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() call org.apache.solr.schema.SchemaField.stored() || call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() throw new + + try decl_stmt org.apache.lucene.queries.function.ValueSource = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + BytesRefBuilder FieldType private private final final if instanceof decl_stmt org.apache.solr.schema.FieldType = decl_stmt org.apache.lucene.util.BytesRefBuilder = new call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) return call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.solr.schema.FieldType.toObject(SchemaField,BytesRef) call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() return SolrIndexSearcher decl RefCounted FunctionValues Object SolrInputDocument ValueSource long Map Object private private throws assert != assert != = - = decl_stmt java.lang.Object = decl_stmt org.apache.solr.common.SolrInputDocument = if = if == return if == decl_stmt org.apache.solr.util.RefCounted < = try decl_stmt org.apache.solr.search.SolrIndexSearcher = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() decl_stmt long = call org.apache.solr.search.SolrIndexSearcher.lookupId(BytesRef) call org.apache.solr.search.SolrIndexSearcher.lookupId(BytesRef) call org.apache.solr.search.SolrIndexSearcher.lookupId(BytesRef) call org.apache.solr.search.SolrIndexSearcher.lookupId(BytesRef) call org.apache.solr.search.SolrIndexSearcher.lookupId(BytesRef) if < return decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt java.util.Map = call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) decl_stmt org.apache.lucene.queries.function.FunctionValues = call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() >> = call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) call org.apache.lucene.queries.function.FunctionValues.longVal(int,long) int = = call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) call org.apache.lucene.queries.function.ValueSource.createWeight(Map,IndexSearcher) = call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call ValueSource.getValues() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() call SolrIndexSearcher.getTopReaderContext() >> = call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) call org.apache.lucene.queries.function.FunctionValues.objectVal(int) int catch throw new finally if != call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() else = if == return if != = call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) = decl_stmt java.lang.Object = call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) if == throw new + = instanceof : call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() if == throw new + if ! instanceof && instanceof throw new + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() + + try if < return if if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + return else throw new + catch throw new + call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() + + + + boolean public public if & | != return if == return decl_stmt boolean = return Object SolrInputDocument public public throws if ! return decl_stmt org.apache.solr.common.SolrInputDocument final final = decl_stmt java.lang.Object = call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) call org.apache.solr.common.SolrInputDocument.getFieldValue(String) if == throw new + for = ++ if & == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + if ! return try return catch if == continue throw String AddUpdateCommand SolrInputDocument public public throws if == return if ! return decl_stmt java.lang.String = if == throw new + if ! decl_stmt org.apache.solr.common.SolrInputDocument = new call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) decl_stmt org.apache.solr.update.AddUpdateCommand = new = = return for = ++ if & == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + if ! return try decl_stmt org.apache.solr.common.SolrInputDocument = new call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) call org.apache.solr.common.SolrInputDocument.setField(String,Object,float) decl_stmt org.apache.solr.update.AddUpdateCommand = new = = call AddUpdateCommand.setVersion() call AddUpdateCommand.setVersion() call AddUpdateCommand.setVersion() call AddUpdateCommand.setVersion() call AddUpdateCommand.setVersion() return catch if == continue throw