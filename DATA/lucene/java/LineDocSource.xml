org.apache.lucene.benchmark.byTask.feeds java.io.BufferedReader import java.io.IOException import java.io.InputStream import java.io.InputStreamReader import java.lang.reflect.Constructor import java.nio.file.Path import java.nio.file.Paths import java.util.Arrays import java.util.Properties import org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask import org.apache.lucene.benchmark.byTask.utils.Config import org.apache.lucene.benchmark.byTask.utils.StreamUtils import org.apache.lucene.util.IOUtils import class org.apache.lucene.benchmark.byTask.feeds.LineDocSource super super extends int boolean LineParser Path BufferedReader int int public public decl_stmt int = decl_stmt int = if < throw new + + = + = if < throw new + + = + = if >= throw new + + int int int public public decl_stmt int = decl_stmt int = decl_stmt int while = >= if >= throw new + + + + + + + ++ = + if != - throw new + + + + + + + Properties private private switch case break case break case break case break case decl_stmt java.util.Properties = if == = new call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() call Properties.setProperty() break InputStream private synchronized private synchronized try if != call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() decl_stmt java.io.InputStream = = new new if call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) catch throw new public public throws if != call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() = int String public public throws decl_stmt java.lang.String final final decl_stmt int final final synchronized = call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) if == if ! throw new return if == = if return = ++ call LineParser.parseLine() call LineParser.parseLine() call LineParser.parseLine() call LineParser.parseLine() call LineParser.parseLine() return String decl String String decl Constructor decl Class private private decl_stmt java.lang.String decl_stmt java.lang.String = + if = call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() = else = decl_stmt java.lang.String = if != try decl_stmt java.lang.Class final final final < extends extends = decl_stmt java.lang.reflect.Constructor < extends extends = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() return call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch throw new + if return new return new public public throws String public public decl_stmt java.lang.String = if == throw new = if == =