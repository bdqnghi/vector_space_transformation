org.apache.solr.client.solrj.io.stream java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Locale import java.util.Map import java.util.Map.Entry import java.util.Set import java.util.Random import java.util.TreeSet import java.util.concurrent.Callable import java.util.concurrent.ExecutorService import java.util.concurrent.Future import org.apache.solr.client.solrj.impl.CloudSolrClient import org.apache.solr.client.solrj.impl.CloudSolrClient.Builder import org.apache.solr.client.solrj.io.SolrClientCache import org.apache.solr.client.solrj.io.Tuple import org.apache.solr.client.solrj.io.comp.ComparatorOrder import org.apache.solr.client.solrj.io.comp.FieldComparator import org.apache.solr.client.solrj.io.comp.MultipleFieldComparator import org.apache.solr.client.solrj.io.comp.StreamComparator import org.apache.solr.client.solrj.io.stream.expr.Expressible import org.apache.solr.client.solrj.io.stream.expr.StreamExpression import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionNamedParameter import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionParameter import org.apache.solr.client.solrj.io.stream.expr.StreamExpressionValue import org.apache.solr.client.solrj.io.stream.expr.StreamFactory import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.ZkCoreNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.common.util.SolrjNamedThreadFactory import class org.apache.solr.client.solrj.io.stream.CloudSolrStream super super extends super implements decl List String int StreamComparator SolrClientCache String decl TreeSet decl Map int int boolean decl Map int StreamContext decl Map long CloudSolrClient StringBuilder StreamExpression String public public throws decl_stmt org.apache.solr.client.solrj.io.stream.expr.StreamExpression = new call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new if != && != call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() decl_stmt java.lang.StringBuilder = new for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) call org.apache.solr.client.solrj.io.stream.expr.StreamExpression.addParameter(String) new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return private private throws = = = if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() throw new if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() throw new = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() public public < = public public = public public = = = = public public throws = new = new = new if != = else = new public public return public < public < return HashSet decl String String decl StreamComparator String String decl String decl String private private throws decl_stmt java.lang.String = decl_stmt java.util.HashSet = new for : call java.util.HashSet.add(E) call java.util.HashSet.add(E) call java.util.HashSet.add(E) call java.util.HashSet.add(E) call java.util.HashSet.add(E) decl_stmt java.lang.String = decl_stmt org.apache.solr.client.solrj.io.comp.StreamComparator = new for = < ++ decl_stmt java.lang.String = decl_stmt java.lang.String = call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() decl_stmt java.lang.String = decl_stmt java.lang.String = if ! call java.util.HashSet.contains(Object) call java.util.HashSet.contains(Object) call java.util.HashSet.contains(Object) call java.util.HashSet.contains(Object) call java.util.HashSet.contains(Object) throw new + if != && call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = new call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) : if > return new else return SolrStream decl Set decl Collection String Replica decl Collection ClusterState decl List ZkCoreNodeProps ZkStateReader protected protected throws try decl_stmt org.apache.solr.common.cloud.ZkStateReader = call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() call org.apache.solr.client.solrj.impl.CloudSolrClient.getZkStateReader() decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl_stmt java.util.Set < = call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() decl_stmt java.util.Collection < = call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) if == for : call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() if = call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) call org.apache.solr.common.cloud.ClusterState.getActiveSlices(String) break if == throw new + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for : decl_stmt java.util.Collection < = decl_stmt java.util.List < = new for : if == && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new decl_stmt org.apache.solr.common.cloud.Replica = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = new decl_stmt java.lang.String = call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() decl_stmt org.apache.solr.client.solrj.io.stream.SolrStream = new if != call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setStreamContext(StreamContext) call org.apache.solr.client.solrj.io.stream.SolrStream.setFieldMappings(Map) call org.apache.solr.client.solrj.io.stream.SolrStream.setFieldMappings(Map) call org.apache.solr.client.solrj.io.stream.SolrStream.setFieldMappings(Map) call org.apache.solr.client.solrj.io.stream.SolrStream.setFieldMappings(Map) call org.apache.solr.client.solrj.io.stream.SolrStream.setFieldMappings(Map) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch throw new decl Future decl List StreamOpener TupleWrapper ExecutorService private private throws decl_stmt java.util.concurrent.ExecutorService = new try decl_stmt java.util.List < < = new for : decl_stmt StreamOpener = new decl_stmt java.util.concurrent.Future < = call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() try for < : decl_stmt TupleWrapper = if != call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() catch throw new finally call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() public public throws if != for : if == && != call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() public public return public public throws return TupleWrapper Map Tuple protected protected throws decl_stmt TupleWrapper = call decl TreeSet.pollFirst() call decl TreeSet.pollFirst() call decl TreeSet.pollFirst() call decl TreeSet.pollFirst() call decl TreeSet.pollFirst() if != decl_stmt org.apache.solr.client.solrj.io.Tuple = call TupleWrapper.getTuple() call TupleWrapper.getTuple() call TupleWrapper.getTuple() call TupleWrapper.getTuple() call TupleWrapper.getTuple() if call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) call org.apache.solr.client.solrj.io.Tuple.put(Object,Object) if call TupleWrapper.next() call TupleWrapper.next() call TupleWrapper.next() call TupleWrapper.next() call TupleWrapper.next() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() return else decl_stmt java.util.Map = new if call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) return new int public public if == return decl_stmt int = call StreamComparator.compare() call StreamComparator.compare() call StreamComparator.compare() call StreamComparator.compare() call StreamComparator.compare() if == return else return public public return == public public return public public throws = if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return ! TupleWrapper public public throws decl_stmt TupleWrapper = new if call TupleWrapper.next() call TupleWrapper.next() call TupleWrapper.next() call TupleWrapper.next() call TupleWrapper.next() return else return