org.apache.solr.security java.io.IOException import java.lang.invoke.MethodHandles import java.security.Principal import java.util.ArrayList import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Objects import java.util.Set import org.apache.solr.util.CommandOperation import org.slf4j.Logger import org.slf4j.LoggerFactory import static static java.util.Arrays.asList import static static java.util.Collections.unmodifiableMap import static static java.util.function.Function.identity import static static java.util.stream.Collectors.toMap import static static org.apache.solr.handler.admin.SecurityConfHandler.getListValue import static static org.apache.solr.handler.admin.SecurityConfHandler.getMapValue import class org.apache.solr.security.RuleBasedAuthorizationPlugin super super implements decl Map decl List Logger decl Map public < public < < if != && = - return decl List decl List public < public < decl_stmt java.util.List < = if == || != return if ! for : if decl_stmt java.util.List < = if != = == new <> : new <> call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return MatchStatus decl List public public decl_stmt java.util.List < = if == decl_stmt MatchStatus = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return for : decl_stmt MatchStatus = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return decl_stmt MatchStatus = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return String MatchStatus private private < < if == return decl_stmt java.lang.String = decl_stmt MatchStatus = if != return return decl PermissionNameProvider String Permission decl Name Object PermissionNameProvider Principal private private < if == || call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return decl_stmt java.security.Principal = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.apache.solr.security.Permission = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if if instanceof decl_stmt org.apache.solr.security.PermissionNameProvider = decl_stmt javax.naming.Name = call PermissionNameProvider.getPermissionName() call PermissionNameProvider.getPermissionName() call PermissionNameProvider.getPermissionName() call PermissionNameProvider.getPermissionName() call PermissionNameProvider.getPermissionName() if == || ! call Permission.name() call Permission.name() call Permission.name() call Permission.name() call Permission.name() call Permission.name() call Permission.name() call Permission.name() call Permission.name() continue else if != continue else if != && ! call Permission.method() call Permission.method() call Permission.method() call Permission.method() call Permission.method() call Permission.method() call Permission.method() call Permission.method() call Permission.method() continue if != for < : call Permission.params() call Permission.params() call Permission.params() call Permission.params() call Permission.params() call Permission.params() call Permission.params() call Permission.params() call Permission.params() decl_stmt java.lang.String = decl_stmt java.lang.Object = if instanceof if ! continue continue else if ! continue continue if == return if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return else if call Permission.role() call Permission.role() call Permission.role() call Permission.role() call Permission.role() call Permission.role() call Permission.role() call Permission.role() call Permission.role() return for : decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() if != && call Object.contains() call Object.contains() call Object.contains() call Object.contains() call Object.contains() return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return String decl Map decl Map decl List decl Entry public public < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new decl_stmt java.util.Map < = for : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt Entry = decl_stmt java.lang.String = call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.util.List < = for : decl_stmt org.apache.solr.security.Permission try = catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl List WildCardSupportMap private private for : decl_stmt WildCardSupportMap = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = new for : decl_stmt java.util.List < = call WildCardSupportMap.get() call WildCardSupportMap.get() call WildCardSupportMap.get() call WildCardSupportMap.get() call WildCardSupportMap.get() if == call WildCardSupportMap.put() call WildCardSupportMap.put() call WildCardSupportMap.put() call WildCardSupportMap.put() call WildCardSupportMap.put() = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public throws