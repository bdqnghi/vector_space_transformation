org.apache.lucene.spatial3d.geom java.util.ArrayList import java.util.BitSet import java.util.List import java.util.HashMap import java.util.Map import class org.apache.lucene.spatial3d.geom.GeoConcavePolygon super super extends decl SidedPlane decl GeoPoint BitSet decl GeoPoint decl List decl SidedPlane decl List decl Map boolean public public final final final final final final if throw new if call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new int GeoPoint int int int GeoPoint SidedPlane SidedPlane GeoPoint Plane public public final final if throw new if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < throw new if call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - = = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.apache.lucene.spatial3d.geom.GeoPoint final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.spatial3d.geom.GeoPoint final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + decl_stmt org.apache.lucene.spatial3d.geom.Plane final final = new decl_stmt int = - for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt int final final = + + if ! call org.apache.lucene.spatial3d.geom.Plane.evaluateIsZero(Vector) call org.apache.lucene.spatial3d.geom.Plane.evaluateIsZero(Vector) call org.apache.lucene.spatial3d.geom.Plane.evaluateIsZero(Vector) call org.apache.lucene.spatial3d.geom.Plane.evaluateIsZero(Vector) call org.apache.lucene.spatial3d.geom.Plane.evaluateIsZero(Vector) call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = break if == - throw new decl_stmt org.apache.lucene.spatial3d.geom.GeoPoint final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = new = new = new = new <> for = < ++ decl_stmt org.apache.lucene.spatial3d.geom.SidedPlane final final = decl_stmt org.apache.lucene.spatial3d.geom.SidedPlane final final = decl_stmt int = + while ++ decl_stmt int = - while -- call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new = new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() protected protected while >= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() -= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() while < += call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() return public public final final final final final final if ! return if != for final final : if return return protected protected final final return boolean protected protected final final final final final final decl_stmt boolean = for final final : if = break return public public return SidedPlane SidedPlane decl GeoPoint public public final final final final final final final for = < ++ decl_stmt org.apache.lucene.spatial3d.geom.SidedPlane final final = decl_stmt org.apache.lucene.spatial3d.geom.SidedPlane final final = decl_stmt org.apache.lucene.spatial3d.geom.GeoPoint final final final = if ! call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) call java.util.BitSet.get(int) if call SidedPlane.intersects() call SidedPlane.intersects() call SidedPlane.intersects() call SidedPlane.intersects() call SidedPlane.intersects() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return if != for final final : if return return public public final final return && public public final final final final final final return && public public if if if if if if for final final : for final final : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() double double protected protected final final final final final final final final decl_stmt double = for final final : decl_stmt double final final = if < = for final final : decl_stmt double final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if < = return GeoConcavePolygon public public if ! instanceof return decl_stmt org.apache.lucene.spatial3d.geom.GeoConcavePolygon = if ! return if ! call GeoConcavePolygon.isInternalEdges() call GeoConcavePolygon.isInternalEdges() call GeoConcavePolygon.isInternalEdges() call GeoConcavePolygon.isInternalEdges() call GeoConcavePolygon.isInternalEdges() call GeoConcavePolygon.isInternalEdges() call GeoConcavePolygon.isInternalEdges() call GeoConcavePolygon.isInternalEdges() call GeoConcavePolygon.isInternalEdges() return if != || != if == || == return if ! call GeoConcavePolygon.holes() call GeoConcavePolygon.holes() call GeoConcavePolygon.holes() call GeoConcavePolygon.holes() call GeoConcavePolygon.holes() call GeoConcavePolygon.holes() call GeoConcavePolygon.holes() call GeoConcavePolygon.holes() call GeoConcavePolygon.holes() return return call GeoConcavePolygon.points() call GeoConcavePolygon.points() call GeoConcavePolygon.points() call GeoConcavePolygon.points() call GeoConcavePolygon.points() call GeoConcavePolygon.points() call GeoConcavePolygon.points() call GeoConcavePolygon.points() call GeoConcavePolygon.points() int public public decl_stmt int = = * + call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() if != = * + call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() call decl List.hashCode() return public public return + + + + + + == : + +