org.apache.solr.util.stats java.util.ArrayList import java.util.List import java.util.Random import java.util.concurrent.atomic.AtomicLong import java.util.concurrent.atomic.AtomicLongArray import class org.apache.solr.util.stats.UniformSample super super implements int AtomicLong Random AtomicLongArray public public for = < call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() ++ call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) long public public decl_stmt long final final = call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() if > call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() return call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() return int long long public public decl_stmt long final final = call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if <= call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLongArray.set(int,long) int - else decl_stmt long final final = if < call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.length() call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLongArray.set(int,long) call java.util.concurrent.atomic.AtomicLongArray.set(int,long) int long private static private static decl_stmt long do = call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() & ~ << = - + - < return int decl List public public decl_stmt int final final = decl_stmt java.util.List final final final < = new <> for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.util.concurrent.atomic.AtomicLongArray.get(int) call java.util.concurrent.atomic.AtomicLongArray.get(int) call java.util.concurrent.atomic.AtomicLongArray.get(int) call java.util.concurrent.atomic.AtomicLongArray.get(int) call java.util.concurrent.atomic.AtomicLongArray.get(int) return new