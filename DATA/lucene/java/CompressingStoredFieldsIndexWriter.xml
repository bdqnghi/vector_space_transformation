org.apache.lucene.codecs.compressing static static org.apache.lucene.util.BitUtil.zigZagEncode import java.io.Closeable import java.io.IOException import org.apache.lucene.codecs.Codec import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.store.DataOutput import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.packed.PackedInts import class org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter super super implements long int int long int decl long IndexOutput decl int int private private = = = - long int long decl PackedInts long int int int long private private throws assert > call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt int final final if == = else = - - / - call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() - call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt int = decl_stmt long = for = < ++ decl_stmt int final final = - * |= += decl_stmt int final final = call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt Writer = = for = < ++ decl_stmt long final final = - * assert <= call decl PackedInts.bitsPerValue() call decl PackedInts.bitsPerValue() call decl PackedInts.bitsPerValue() call decl PackedInts.bitsPerValue() call decl PackedInts.bitsPerValue() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() += call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() decl_stmt long final final if == = else = - / - call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() decl_stmt long = = for = < ++ += decl_stmt long final final = - * |= decl_stmt int final final = call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() = = for = < ++ += decl_stmt long final final = - * assert <= call decl PackedInts.bitsPerValue() call decl PackedInts.bitsPerValue() call decl PackedInts.bitsPerValue() call decl PackedInts.bitsPerValue() call decl PackedInts.bitsPerValue() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() throws if == if == - = = assert > && >= = = - ++ += += = throws if != throw new + + + if > call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() public public throws call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close()