org.apache.solr.handler.dataimport static static org.apache.solr.handler.data.DataImportHandlerException.wrapAndThrow import java.lang.invoke.MethodHandles import java.lang.reflect.Constructor import java.util.ArrayList import java.util.Collections import java.util.HashMap import java.util.Iterator import java.util.List import java.util.Map import org.apache.solr.common.SolrException import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.handler.dataimport.DIHCacheSupport String Logger String String String String decl Map boolean String String decl Map decl Iterator public public return + + + DIHCache decl Class decl Constructor private private decl_stmt org.apache.solr.handler.dataimport.DIHCache = try decl_stmt java.lang.Class < = decl_stmt java.lang.reflect.Constructor < = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call org.apache.solr.handler.dataimport.DIHCache.open(Context) call org.apache.solr.handler.dataimport.DIHCache.open(Context) call org.apache.solr.handler.dataimport.DIHCache.open(Context) call org.apache.solr.handler.dataimport.DIHCache.open(Context) call org.apache.solr.handler.dataimport.DIHCache.open(Context) catch throw new + return public public = = new <> for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public if != for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() = = = DIHCache decl Map public public < < decl_stmt java.util.Map < = decl_stmt org.apache.solr.handler.dataimport.DIHCache = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() while = != call DIHCache.add() call DIHCache.add() call DIHCache.add() call DIHCache.add() call DIHCache.add() private < private < < < try if == return if return return catch + + return public < public < < < if return else return DIHCache Object protected < protected < < < decl_stmt java.lang.Object = if == throw new + + + if == decl_stmt org.apache.solr.handler.dataimport.DIHCache = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = call org.apache.solr.handler.dataimport.DIHCache.iterator(Object) call org.apache.solr.handler.dataimport.DIHCache.iterator(Object) call org.apache.solr.handler.dataimport.DIHCache.iterator(Object) call org.apache.solr.handler.dataimport.DIHCache.iterator(Object) call org.apache.solr.handler.dataimport.DIHCache.iterator(Object) return DIHCache decl Iterator protected < protected < < < if == decl_stmt org.apache.solr.handler.dataimport.DIHCache = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.handler.dataimport.DIHCache.iterator(Object) call org.apache.solr.handler.dataimport.DIHCache.iterator(Object) call org.apache.solr.handler.dataimport.DIHCache.iterator(Object) call org.apache.solr.handler.dataimport.DIHCache.iterator(Object) call org.apache.solr.handler.dataimport.DIHCache.iterator(Object) decl_stmt java.util.Iterator < < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = return decl Map protected < protected < if == || ! call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() = return decl_stmt java.util.Map < = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() return