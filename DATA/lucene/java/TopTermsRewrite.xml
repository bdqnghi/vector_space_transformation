org.apache.lucene.search java.io.IOException import java.util.Comparator import java.util.HashMap import java.util.Map import java.util.PriorityQueue import org.apache.lucene.index.IndexReader import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.index.TermState import org.apache.lucene.index.TermsEnum import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import class super super extends decl Comparator int public public return BoostAttribute B Term TermsEnum TermState BytesRefBuilder decl Map decl ScoreTerm int ScoreTerm ScoreTerm MaxNonCompetitiveBoostAttribute float decl PriorityQueue public final public final final final final final throws decl_stmt int final final = decl_stmt org.apache.lucene.util.PriorityQueue final final final < = new <> new decl_stmt org.apache.lucene.search.MaxNonCompetitiveBoostAttribute private final final = decl_stmt java.util.Map private final final final < = new <> decl_stmt org.apache.lucene.index.TermsEnum private decl_stmt org.apache.lucene.search.BoostAttribute private decl_stmt ScoreTerm private public public = assert if == = new new = call org.apache.lucene.index.TermsEnum.attributes() call org.apache.lucene.index.TermsEnum.attributes() call org.apache.lucene.index.TermsEnum.attributes() call org.apache.lucene.index.TermsEnum.attributes() call org.apache.lucene.index.TermsEnum.attributes() decl_stmt org.apache.lucene.util.BytesRefBuilder private private private if == && != = new call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) call org.apache.lucene.util.BytesRefBuilder.append(byte) else if == = else assert call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() < : + + + call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) return public public throws decl_stmt float final final = call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() assert if call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() == decl_stmt ScoreTerm final final = call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() if < return if == && call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() > return decl_stmt ScoreTerm = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.index.TermState final final = call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() assert != if != assert == : call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() else call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() assert call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() == call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() call decl PriorityQueue.offer() if call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() > = call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl PriorityQueue.poll() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() else = new new assert call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() <= : if call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() == = call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call decl PriorityQueue.peek() call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setMaxNonCompetitiveBoost(float) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setCompetitiveTerm(BytesRef) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setCompetitiveTerm(BytesRef) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setCompetitiveTerm(BytesRef) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setCompetitiveTerm(BytesRef) call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.setCompetitiveTerm(BytesRef) call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() return decl_stmt B final final = decl_stmt ScoreTerm final final final = call decl PriorityQueue.toArray() call decl PriorityQueue.toArray() call decl PriorityQueue.toArray() call decl PriorityQueue.toArray() call decl PriorityQueue.toArray() new call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() call decl PriorityQueue.size() for final final : decl_stmt org.apache.lucene.index.Term final final = new call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() return public public = assert if == = new new = private private if == && != = new else if == = else assert < : + + + return TermState float ScoreTerm public public throws decl_stmt float final final = assert if == decl_stmt ScoreTerm final final = if < return if == && call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() > return decl_stmt ScoreTerm = decl_stmt org.apache.lucene.index.TermState final final = assert != if != assert == : call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() call ScoreTerm.termState() else = assert == if > = else = new new assert <= : if == = call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() call ScoreTerm.bytes() return public public return * decl TopTermsRewrite public public if == return if == return if != return decl_stmt org.apache.lucene.search.TopTermsRewrite final final final < = < if != return return public public return public public if == return else return