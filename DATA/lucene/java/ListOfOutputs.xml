org.apache.lucene.util.fst java.io.IOException import java.util.ArrayList import java.util.List import org.apache.lucene.store.DataInput import org.apache.lucene.store.DataOutput import org.apache.lucene.util.IntsRef import org.apache.lucene.util.RamUsageEstimator import class annotation super super extends decl Outputs long public public return call decl Outputs.common() call decl Outputs.common() call decl Outputs.common() call decl Outputs.common() call decl Outputs.common() public public return call decl Outputs.subtract() call decl Outputs.subtract() call decl Outputs.subtract() call decl Outputs.subtract() call decl Outputs.subtract() decl List decl List public public assert ! instanceof if ! instanceof return call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() else decl_stmt java.util.List < = < decl_stmt java.util.List < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() call decl Outputs.add() return public public throws assert ! instanceof call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() decl List public public throws if ! instanceof call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() else decl_stmt java.util.List < = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() call decl Outputs.write() public public throws return call decl Outputs.read() call decl Outputs.read() call decl Outputs.read() call decl Outputs.read() call decl Outputs.read() public public throws call decl Outputs.skipOutput() call decl Outputs.skipOutput() call decl Outputs.skipOutput() call decl Outputs.skipOutput() call decl Outputs.skipOutput() int decl List public public throws decl_stmt int = if == return call decl Outputs.read() call decl Outputs.read() call decl Outputs.read() call decl Outputs.read() call decl Outputs.read() else decl_stmt java.util.List < = new <> for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl Outputs.read() call decl Outputs.read() call decl Outputs.read() call decl Outputs.read() call decl Outputs.read() return int public public throws decl_stmt int = for = < ++ call decl Outputs.skipOutput() call decl Outputs.skipOutput() call decl Outputs.skipOutput() call decl Outputs.skipOutput() call decl Outputs.skipOutput() public public return call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() decl List StringBuilder public public if ! instanceof return call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() else decl_stmt java.util.List < = < decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl Outputs.outputToString() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl List public public decl_stmt java.util.List < = new <> if ! instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() < if ! instanceof call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() < return public public return + + decl List public < public < if ! instanceof decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return else return < decl List long public public decl_stmt long = if instanceof += decl_stmt java.util.List < = < for : += call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() += * call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() * else += call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() call decl Outputs.ramBytesUsed() return