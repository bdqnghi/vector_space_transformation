org.apache.lucene.util.automaton java.util.ArrayList import java.util.HashMap import java.util.HashSet import java.util.LinkedList import java.util.List import java.util.Map import java.util.Random import java.util.Set import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.TestUtil import org.apache.lucene.util.UnicodeUtil import class org.apache.lucene.util.automaton.AutomatonTestUtil int String public static public static while decl_stmt java.lang.String = if ! continue try new return catch decl char int int private static private static decl_stmt int final final = if == return decl_stmt char final final final = new for = < ++ decl_stmt int = if == && < - ++ = char = char else if <= = char else if == = char else if == = char else if == = char else if == = else if == = else if == = else if == = else if == = else if == = else if == = else if == = else if == = else if == = return new int int int int private static private static final final decl_stmt int final final if < || || = + - + else if >= if > = + + - else throw new + + + else if <= if < = + - else throw new + + + else decl_stmt int = - decl_stmt int = - decl_stmt int = + if < = + else = + - + assert >= && <= && < || || : + + + + + return decl List boolean int Transition decl List public public decl_stmt java.util.List final final final < = new <> decl_stmt int = while if if == break else if break if == throw new decl_stmt boolean = decl_stmt org.apache.lucene.util.automaton.Transition final final if decl_stmt java.util.List < = new <> for : if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == = else = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() else = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = return Automaton private static private static while try decl_stmt org.apache.lucene.util.automaton.Automaton = new if = return catch Automaton Automaton public static public static decl_stmt org.apache.lucene.util.automaton.Automaton = decl_stmt org.apache.lucene.util.automaton.Automaton = switch case return case return case return default: return decl Set public static public static decl_stmt java.util.Set < = new < = call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() = return decl Set public static public static decl_stmt java.util.Set < = new <> call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return decl Set decl Set int decl Map int int Transition decl int decl Automaton decl Map decl LinkedList int decl Builder public static public static < if == return decl_stmt int = decl_stmt java.util.Map < < < = new <> decl_stmt java.util.LinkedList < < = new <> decl_stmt java.util.Map < < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() decl_stmt org.apache.lucene.util.fst.Builder = new call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.lucene.util.automaton.Transition = new while call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() call decl LinkedList.size() > decl_stmt java.util.Set < = call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() call decl LinkedList.removeFirst() decl_stmt int = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for : if call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() break for = < ++ decl_stmt java.util.Set < = new <> for : decl_stmt int = for = < ++ if <= && <= call int.add() call int.add() call int.add() call int.add() call int.add() if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl LinkedList.add() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() decl_stmt int = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt int = decl_stmt int if + < = + - else = call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() return call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() decl HashSet public static < public static < decl_stmt java.util.HashSet < = new <> if ! new < new return return int Transition private static private static < < decl_stmt org.apache.lucene.util.automaton.Transition = new decl_stmt int = for = < ++ if return for = <= ++ if if >= && > return if ! return - return public static public static if == return return new < int Transition private static private static < decl_stmt org.apache.lucene.util.automaton.Transition = new decl_stmt int = for = < ++ if || ! return return Automaton public static public static decl_stmt org.apache.lucene.util.automaton.Automaton = assert == call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() : + - call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() call org.apache.lucene.util.automaton.Automaton.getNumStates() + int int Transition int public static public static decl_stmt org.apache.lucene.util.automaton.Transition = new decl_stmt int = for = < ++ decl_stmt int = decl_stmt int = - for = < ++ if <= assert == return = assert == return