org.apache.solr.util.hll java.util.Arrays import com.carrotsearch.hppc.IntByteHashMap import com.carrotsearch.hppc.LongHashSet import com.carrotsearch.hppc.cursors.IntByteCursor import com.carrotsearch.hppc.cursors.LongCursor import class org.apache.solr.util.hll.HLL super super implements boolean double BitVector boolean int double long int int int int HLLType int int int LongHashSet IntByteHashMap int boolean int int int double int int int public public return int byte public public final final switch case if > call LongHashSet.add() call LongHashSet.add() call LongHashSet.add() call LongHashSet.add() call LongHashSet.add() else if ! else return case call LongHashSet.add() call LongHashSet.add() call LongHashSet.add() call LongHashSet.add() call LongHashSet.add() if call LongHashSet.size() call LongHashSet.size() call LongHashSet.size() call LongHashSet.size() call LongHashSet.size() > if ! for : else for : = return case if call IntByteHashMap.size() call IntByteHashMap.size() call IntByteHashMap.size() call IntByteHashMap.size() call IntByteHashMap.size() > for : decl_stmt int final final = decl_stmt byte final final = call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) = return case return default: throw new + byte byte int int long private private final final decl_stmt long final final = >>> decl_stmt byte final final if == = else = + | if == return decl_stmt int final final = & decl_stmt byte final final decl_stmt int final final = call IntByteHashMap.indexOf() call IntByteHashMap.indexOf() call IntByteHashMap.indexOf() call IntByteHashMap.indexOf() call IntByteHashMap.indexOf() if >= = call IntByteHashMap.indexGet() call IntByteHashMap.indexGet() call IntByteHashMap.indexGet() call IntByteHashMap.indexGet() call IntByteHashMap.indexGet() else = if > call IntByteHashMap.put() call IntByteHashMap.put() call IntByteHashMap.put() call IntByteHashMap.put() call IntByteHashMap.put() byte int long private private final final decl_stmt long final final = >>> decl_stmt byte final final if == = else = + | if == return decl_stmt int final final = & call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) private private final final = switch case break case = new break case = new break case = new break default: throw new + public public switch case return case return call LongHashSet.size() call LongHashSet.size() call LongHashSet.size() call LongHashSet.size() call LongHashSet.size() case return long case return long default: throw new + int double long int double decl_stmt int final final = decl_stmt double = decl_stmt int = for = < ++ decl_stmt long final final if call IntByteHashMap.containsKey() call IntByteHashMap.containsKey() call IntByteHashMap.containsKey() call IntByteHashMap.containsKey() call IntByteHashMap.containsKey() = call IntByteHashMap.get() call IntByteHashMap.get() call IntByteHashMap.get() call IntByteHashMap.get() call IntByteHashMap.get() else = += / << if == ++ decl_stmt double final final = / if != && < return else if <= return else return LongIterator double long int double int decl_stmt int final final = decl_stmt double = decl_stmt int = decl_stmt org.apache.solr.util.hll.LongIterator final final = call org.apache.solr.util.hll.BitVector.registerIterator() call org.apache.solr.util.hll.BitVector.registerIterator() call org.apache.solr.util.hll.BitVector.registerIterator() call org.apache.solr.util.hll.BitVector.registerIterator() call org.apache.solr.util.hll.BitVector.registerIterator() while call LongIterator.hasNext() call LongIterator.hasNext() call LongIterator.hasNext() call LongIterator.hasNext() call LongIterator.hasNext() decl_stmt long final final = call org.apache.solr.util.hll.LongIterator.next() call org.apache.solr.util.hll.LongIterator.next() call org.apache.solr.util.hll.LongIterator.next() call org.apache.solr.util.hll.LongIterator.next() call org.apache.solr.util.hll.LongIterator.next() += / << if == ++ decl_stmt double final final = / if != && < return else if <= return else return public public switch case return case call LongHashSet.clear() call LongHashSet.clear() call LongHashSet.clear() call LongHashSet.clear() call LongHashSet.clear() return case call IntByteHashMap.clear() call IntByteHashMap.clear() call IntByteHashMap.clear() call IntByteHashMap.clear() call IntByteHashMap.clear() return case call org.apache.solr.util.hll.BitVector.fill(long) call org.apache.solr.util.hll.BitVector.fill(long) call org.apache.solr.util.hll.BitVector.fill(long) call org.apache.solr.util.hll.BitVector.fill(long) call org.apache.solr.util.hll.BitVector.fill(long) return default: throw new + HLLType public public final final decl_stmt HLLType final final = if call HLLType.equals() call HLLType.equals() call HLLType.equals() call HLLType.equals() call HLLType.equals() return else return int byte final final if switch case if <= = = else if ! else for : return case if ! = = else for : decl_stmt int final final = decl_stmt byte final final = call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) return default = = return else if return switch case if if ! = = else for : decl_stmt int final final = decl_stmt byte final final = call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) else = = for : = return case if for : else = = for : decl_stmt int final final = decl_stmt byte final final = call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) = return default if for : else for : decl_stmt int final final = decl_stmt byte final final = call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) int byte long private private final final switch case return case for : return case for : decl_stmt int final final = decl_stmt byte final final = decl_stmt byte final final = call IntByteHashMap.get() call IntByteHashMap.get() call IntByteHashMap.get() call IntByteHashMap.get() call IntByteHashMap.get() if > call IntByteHashMap.put() call IntByteHashMap.put() call IntByteHashMap.put() call IntByteHashMap.put() call IntByteHashMap.put() if call IntByteHashMap.size() call IntByteHashMap.size() call IntByteHashMap.size() call IntByteHashMap.size() call IntByteHashMap.size() > for : decl_stmt int final final = decl_stmt byte final final = call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) = return case for = < ++ decl_stmt long final final = call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) call org.apache.solr.util.hll.BitVector.setMaxRegister(long,long) return default: throw new + public public return decl byte IHLLMetadata decl long decl int long IWordSerializer long public public final final decl_stmt byte final final final switch case = new break case decl_stmt org.apache.solr.util.hll.IWordSerializer final final = call LongHashSet.size() call LongHashSet.size() call LongHashSet.size() call LongHashSet.size() call LongHashSet.size() decl_stmt long final final final = call LongHashSet.toArray() call LongHashSet.toArray() call LongHashSet.toArray() call LongHashSet.toArray() call LongHashSet.toArray() for final final : call IWordSerializer.writeWord() call IWordSerializer.writeWord() call IWordSerializer.writeWord() call IWordSerializer.writeWord() call IWordSerializer.writeWord() = call org.apache.solr.util.hll.IWordSerializer.getBytes() call org.apache.solr.util.hll.IWordSerializer.getBytes() call org.apache.solr.util.hll.IWordSerializer.getBytes() call org.apache.solr.util.hll.IWordSerializer.getBytes() call org.apache.solr.util.hll.IWordSerializer.getBytes() break case decl_stmt org.apache.solr.util.hll.IWordSerializer final final = call IntByteHashMap.size() call IntByteHashMap.size() call IntByteHashMap.size() call IntByteHashMap.size() call IntByteHashMap.size() decl_stmt int final final final = call IntByteHashMap.keys() call IntByteHashMap.keys() call IntByteHashMap.keys() call IntByteHashMap.keys() call IntByteHashMap.keys() for final final : assert call IntByteHashMap.containsKey() call IntByteHashMap.containsKey() call IntByteHashMap.containsKey() call IntByteHashMap.containsKey() call IntByteHashMap.containsKey() decl_stmt long final final = call IntByteHashMap.get() call IntByteHashMap.get() call IntByteHashMap.get() call IntByteHashMap.get() call IntByteHashMap.get() decl_stmt long final final = << | call IWordSerializer.writeWord() call IWordSerializer.writeWord() call IWordSerializer.writeWord() call IWordSerializer.writeWord() call IWordSerializer.writeWord() = call org.apache.solr.util.hll.IWordSerializer.getBytes() call org.apache.solr.util.hll.IWordSerializer.getBytes() call org.apache.solr.util.hll.IWordSerializer.getBytes() call org.apache.solr.util.hll.IWordSerializer.getBytes() call org.apache.solr.util.hll.IWordSerializer.getBytes() break case decl_stmt org.apache.solr.util.hll.IWordSerializer final final = call org.apache.solr.util.hll.BitVector.getRegisterContents(IWordSerializer) call org.apache.solr.util.hll.BitVector.getRegisterContents(IWordSerializer) call org.apache.solr.util.hll.BitVector.getRegisterContents(IWordSerializer) call org.apache.solr.util.hll.BitVector.getRegisterContents(IWordSerializer) call org.apache.solr.util.hll.BitVector.getRegisterContents(IWordSerializer) = call org.apache.solr.util.hll.IWordSerializer.getBytes() call org.apache.solr.util.hll.IWordSerializer.getBytes() call org.apache.solr.util.hll.IWordSerializer.getBytes() call org.apache.solr.util.hll.IWordSerializer.getBytes() call org.apache.solr.util.hll.IWordSerializer.getBytes() break default: throw new + decl_stmt org.apache.solr.util.hll.IHLLMetadata final final = new int ! return long int int HLL byte IWordDeserializer ISchemaVersion boolean HLLType int int IHLLMetadata public static public static final final final decl_stmt org.apache.solr.util.hll.ISchemaVersion final final = decl_stmt org.apache.solr.util.hll.IHLLMetadata final final = call org.apache.solr.util.hll.ISchemaVersion.readMetadata(byte) call org.apache.solr.util.hll.ISchemaVersion.readMetadata(byte) call org.apache.solr.util.hll.ISchemaVersion.readMetadata(byte) call org.apache.solr.util.hll.ISchemaVersion.readMetadata(byte) call org.apache.solr.util.hll.ISchemaVersion.readMetadata(byte) decl_stmt HLLType final final = call org.apache.solr.util.hll.IHLLMetadata.HLLType() call org.apache.solr.util.hll.IHLLMetadata.HLLType() call org.apache.solr.util.hll.IHLLMetadata.HLLType() call org.apache.solr.util.hll.IHLLMetadata.HLLType() call org.apache.solr.util.hll.IHLLMetadata.HLLType() decl_stmt int final final = call org.apache.solr.util.hll.IHLLMetadata.registerWidth() call org.apache.solr.util.hll.IHLLMetadata.registerWidth() call org.apache.solr.util.hll.IHLLMetadata.registerWidth() call org.apache.solr.util.hll.IHLLMetadata.registerWidth() call org.apache.solr.util.hll.IHLLMetadata.registerWidth() decl_stmt int final final = call org.apache.solr.util.hll.IHLLMetadata.registerCountLog2() call org.apache.solr.util.hll.IHLLMetadata.registerCountLog2() call org.apache.solr.util.hll.IHLLMetadata.registerCountLog2() call org.apache.solr.util.hll.IHLLMetadata.registerCountLog2() call org.apache.solr.util.hll.IHLLMetadata.registerCountLog2() decl_stmt boolean final final = call IHLLMetadata.sparseEnabled() call IHLLMetadata.sparseEnabled() call IHLLMetadata.sparseEnabled() call IHLLMetadata.sparseEnabled() call IHLLMetadata.sparseEnabled() decl_stmt int final final if call org.apache.solr.util.hll.IHLLMetadata.explicitAuto() call org.apache.solr.util.hll.IHLLMetadata.explicitAuto() call org.apache.solr.util.hll.IHLLMetadata.explicitAuto() call org.apache.solr.util.hll.IHLLMetadata.explicitAuto() call org.apache.solr.util.hll.IHLLMetadata.explicitAuto() = - else if call org.apache.solr.util.hll.IHLLMetadata.explicitOff() call org.apache.solr.util.hll.IHLLMetadata.explicitOff() call org.apache.solr.util.hll.IHLLMetadata.explicitOff() call org.apache.solr.util.hll.IHLLMetadata.explicitOff() call org.apache.solr.util.hll.IHLLMetadata.explicitOff() = else = call org.apache.solr.util.hll.IHLLMetadata.log2ExplicitCutoff() call org.apache.solr.util.hll.IHLLMetadata.log2ExplicitCutoff() call org.apache.solr.util.hll.IHLLMetadata.log2ExplicitCutoff() call org.apache.solr.util.hll.IHLLMetadata.log2ExplicitCutoff() call org.apache.solr.util.hll.IHLLMetadata.log2ExplicitCutoff() + decl_stmt org.apache.solr.util.hll.HLL final final = new if return decl_stmt int final final switch case = break case = break case = break default: throw new + decl_stmt org.apache.solr.util.hll.IWordDeserializer final final = call org.apache.solr.util.hll.ISchemaVersion.getDeserializer(HLLType,int,byte) call org.apache.solr.util.hll.ISchemaVersion.getDeserializer(HLLType,int,byte) call org.apache.solr.util.hll.ISchemaVersion.getDeserializer(HLLType,int,byte) call org.apache.solr.util.hll.ISchemaVersion.getDeserializer(HLLType,int,byte) call org.apache.solr.util.hll.ISchemaVersion.getDeserializer(HLLType,int,byte) switch case for = < call IWordDeserializer.totalWordCount() call IWordDeserializer.totalWordCount() call IWordDeserializer.totalWordCount() call IWordDeserializer.totalWordCount() call IWordDeserializer.totalWordCount() ++ call HLL.explicitStorage() call HLL.explicitStorage() call HLL.explicitStorage() call HLL.explicitStorage() call HLL.explicitStorage() call HLL.explicitStorage() call HLL.explicitStorage() call HLL.explicitStorage() call HLL.explicitStorage() call org.apache.solr.util.hll.IWordDeserializer.readWord() call org.apache.solr.util.hll.IWordDeserializer.readWord() call org.apache.solr.util.hll.IWordDeserializer.readWord() call org.apache.solr.util.hll.IWordDeserializer.readWord() call org.apache.solr.util.hll.IWordDeserializer.readWord() break case for = < call IWordDeserializer.totalWordCount() call IWordDeserializer.totalWordCount() call IWordDeserializer.totalWordCount() call IWordDeserializer.totalWordCount() call IWordDeserializer.totalWordCount() ++ decl_stmt long final final = call org.apache.solr.util.hll.IWordDeserializer.readWord() call org.apache.solr.util.hll.IWordDeserializer.readWord() call org.apache.solr.util.hll.IWordDeserializer.readWord() call org.apache.solr.util.hll.IWordDeserializer.readWord() call org.apache.solr.util.hll.IWordDeserializer.readWord() decl_stmt byte final final = & if != call HLL.sparseProbabilisticStorage() call HLL.sparseProbabilisticStorage() call HLL.sparseProbabilisticStorage() call HLL.sparseProbabilisticStorage() call HLL.sparseProbabilisticStorage() call HLL.sparseProbabilisticStorage() call HLL.sparseProbabilisticStorage() call HLL.sparseProbabilisticStorage() call HLL.sparseProbabilisticStorage() >>> break case for = < ++ call HLL.probabilisticStorage() call HLL.probabilisticStorage() call HLL.probabilisticStorage() call HLL.probabilisticStorage() call HLL.probabilisticStorage() call HLL.probabilisticStorage() call HLL.probabilisticStorage() call HLL.probabilisticStorage() call HLL.probabilisticStorage() call org.apache.solr.util.hll.IWordDeserializer.readWord() call org.apache.solr.util.hll.IWordDeserializer.readWord() call org.apache.solr.util.hll.IWordDeserializer.readWord() call org.apache.solr.util.hll.IWordDeserializer.readWord() call org.apache.solr.util.hll.IWordDeserializer.readWord() break default: throw new + return HLL int public public throws decl_stmt int final final if = - else if = else = + decl_stmt org.apache.solr.util.hll.HLL final final = new ! switch case break case = break case = break case = break default: throw new + return