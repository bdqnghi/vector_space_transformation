org.apache.lucene.analysis.util java.util.Arrays import java.util.AbstractMap import java.util.AbstractSet import java.util.Iterator import java.util.Map import java.util.Set import org.apache.lucene.analysis.util.CharacterUtils import class super super extends int decl CharArrayMap decl char EntrySet boolean CharArraySet int decl V CharacterUtils public public = public public return != public public return != decl char public public if instanceof decl_stmt char final final final = return return public public return public public return decl char public public if instanceof decl_stmt char final final final = return return decl char int int int private private decl_stmt int = decl_stmt int = & - decl_stmt char = if != && ! decl_stmt int final final = >> + | do += = & - = != && ! return decl char int int int private private decl_stmt int = decl_stmt int = & - decl_stmt char = if != && ! decl_stmt int final final = >> + | do += = & - = != && ! return public public return public public if instanceof return return public public return int V public public if call org.apache.lucene.analysis.util.CharacterUtils.toLowerCase(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.toLowerCase(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.toLowerCase(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.toLowerCase(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.toLowerCase(char,int,int) decl_stmt int = if != decl_stmt V final final = = return = = ++ if + >> > return decl char decl V int int decl char private private assert == decl_stmt int final final = * decl_stmt char final final final = decl_stmt V final final final = = new = new for = < ++ decl_stmt char = if != decl_stmt int final final = = = int int private private if != return decl_stmt int final final = + if for = < decl_stmt int final final = call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) + if != call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) return += else for = < ++ if + != return return int int private private decl_stmt int = if != return if for = < decl_stmt int final final = call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) if != call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) return += else for = < ++ if != return return int int int private private if == throw new decl_stmt int = decl_stmt int final final = + if for = < decl_stmt int final final = call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) = * + += else for = < ++ = * + return int int int private private if == throw new decl_stmt int = decl_stmt int = if for = < decl_stmt int = call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) call org.apache.lucene.analysis.util.CharacterUtils.codePointAt(char,int,int) = * + += else for = < ++ = * + return public public throw new public public return StringBuilder public public decl_stmt java.lang.StringBuilder final final = new for < : if call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return new public final public final if == = return final < final < return public final public final if == = new public public throw new public public throw new public public throw new public public throw new return public public throw new public public throw new public public throw new public public throw new private private = ++ while < && == ++ public public return < public public return public public return new public public return V public public if ! throw new decl_stmt V = = return public < public < return new public public throw new public public return public public return V public public if ! throw new decl_stmt V final final = = return public public return new == : public public return new decl Map Object Object Object public public if ! instanceof return decl_stmt java.util.Map final final final final final final final < = < decl_stmt java.lang.Object final final = call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() decl_stmt java.lang.Object final final = call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() decl_stmt java.lang.Object final final = return == == : call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) public public throw new public public return public public if ! throw new public static < < public static < < < if == throw new if == || return if instanceof return return new <> decl char decl V decl CharArrayMap public static < < public static < < final final final < extends extends if == return if instanceof decl_stmt org.apache.lucene.analysis.util.CharArrayMap < = < decl_stmt char final final final = new decl_stmt V final final final = new = new <> = = return return new <> public static < < public static < < return < public public throw new public public throw new public public throw new public public throw new public public throw new public public throw new return new public public if == throw new return public public if == throw new return public public if == throw new return public public if == throw new return public public if == throw new return public public if == throw new return