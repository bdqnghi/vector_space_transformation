org.apache.lucene.search.spans java.io.IOException import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.TwoPhaseIterator import class org.apache.lucene.search.spans.AssertingSpans super super extends int State Spans int int public public throws assert != : + + + assert != : + + + assert != : + + + decl_stmt int = call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() decl_stmt int = call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() call Spans.nextStartPosition() assert >= : + + + if == = else = return int int private private decl_stmt int = call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() decl_stmt int = call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() if == || == || == assert == - : + assert == - : + else if == assert == : + assert == : + else assert >= : + assert <= : + public public return call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() public public return call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() int public public assert == decl_stmt int final final = call Spans.width() call Spans.width() call Spans.width() call Spans.width() call Spans.width() assert >= return public public throws assert == : + + + call Spans.collect() call Spans.collect() call Spans.collect() call Spans.collect() call Spans.collect() int public public decl_stmt int = call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() assert == : + + + + + return int public public throws assert != : + decl_stmt int = call Spans.nextDoc() call Spans.nextDoc() call Spans.nextDoc() call Spans.nextDoc() call Spans.nextDoc() assert > : + + + + + if == = else assert call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() == - : + assert call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() == - : + = = return int public public throws assert != : + assert > : + + + + + decl_stmt int = call Spans.advance() call Spans.advance() call Spans.advance() call Spans.advance() call Spans.advance() assert >= : + + + + + if == = else assert call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() call Spans.startPosition() == - : + assert call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() call Spans.endPosition() == - : + = = return public public return + + public public return call Spans.cost() call Spans.cost() call Spans.cost() call Spans.cost() call Spans.cost() float public public decl_stmt float = call Spans.positionsCost() call Spans.positionsCost() call Spans.positionsCost() call Spans.positionsCost() call Spans.positionsCost() assert ! : assert > : return TwoPhaseIterator public public decl_stmt org.apache.lucene.search.TwoPhaseIterator final final = call org.apache.lucene.search.spans.Spans.asTwoPhaseIterator() call org.apache.lucene.search.spans.Spans.asTwoPhaseIterator() call org.apache.lucene.search.spans.Spans.asTwoPhaseIterator() call org.apache.lucene.search.spans.Spans.asTwoPhaseIterator() call org.apache.lucene.search.spans.Spans.asTwoPhaseIterator() if == return return new boolean public public throws if == - || == throw new + if == throw new + = decl_stmt boolean = call Spans.matches() call Spans.matches() call Spans.matches() call Spans.matches() call Spans.matches() if = return float public public decl_stmt float = call Spans.matchCost() call Spans.matchCost() call Spans.matchCost() call Spans.matchCost() call Spans.matchCost() if throw new + + + if < throw new + + + return public public assert call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() == return call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() call Spans.docID() int public public throws assert != : + decl_stmt int = call Spans.nextDoc() call Spans.nextDoc() call Spans.nextDoc() call Spans.nextDoc() call Spans.nextDoc() assert > : + + + + + if == = else = = return int public public throws assert != : + assert > : + + + + + decl_stmt int = call Spans.advance() call Spans.advance() call Spans.advance() call Spans.advance() call Spans.advance() assert >= : + + + + + if == = else = = return public public return call Spans.cost() call Spans.cost() call Spans.cost() call Spans.cost() call Spans.cost()