org.apache.lucene.codecs.compressing java.io.IOException import java.util.ArrayDeque import java.util.Arrays import java.util.Deque import java.util.Iterator import java.util.SortedSet import java.util.TreeSet import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.TermVectorsReader import org.apache.lucene.codecs.TermVectorsWriter import org.apache.lucene.index.CorruptIndexException import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.FieldInfos import org.apache.lucene.index.Fields import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.MergeState import org.apache.lucene.index.SegmentInfo import org.apache.lucene.store.DataInput import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.StringHelper import org.apache.lucene.util.packed.BlockPackedWriter import org.apache.lucene.util.packed.PackedInts import class org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter super super extends int int GrowableByteArrayDataOutput int int int boolean GrowableByteArrayDataOutput CompressingStoredFieldsIndexWriter decl Deque int BlockPackedWriter String DocData long String long Compressor decl int int String int String int int String FieldData BytesRef String CompressionMode int IndexOutput FieldData int FieldData int int decl_stmt FieldData final final if = new else decl_stmt FieldData final final = decl_stmt int final final = + : decl_stmt int final final = + : decl_stmt int final final = + : = new return DocData int FieldData int int private private decl_stmt FieldData = for < = call decl Deque.descendingIterator() call decl Deque.descendingIterator() call decl Deque.descendingIterator() call decl Deque.descendingIterator() call decl Deque.descendingIterator() decl_stmt org.apache.lucene.benchmark.byTask.feeds.DocData final final = if ! call DocData.fields() call DocData.fields() call DocData.fields() call DocData.fields() call DocData.fields() call DocData.fields() call DocData.fields() call DocData.fields() call DocData.fields() = call DocData.fields() call DocData.fields() call DocData.fields() call DocData.fields() call DocData.fields() call DocData.fields() call DocData.fields() call DocData.fields() call DocData.fields() break decl_stmt org.apache.lucene.benchmark.byTask.feeds.DocData final final if == = new else decl_stmt int final final = + : decl_stmt int final final = + : decl_stmt int final final = + : = new call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() call decl Deque.add() return = = = ++ int if if + == = + = if if + == decl_stmt int final final = + = = + = + = if if + == = + = ++ public public throws try finally = = public public throws = public public throws call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() = ++ if = public public throws = call DocData.addField() call DocData.addField() call DocData.addField() call DocData.addField() call DocData.addField() = public public throws = int public public throws assert >= decl_stmt int final final = call FieldData.addTerm() call FieldData.addTerm() call FieldData.addTerm() call FieldData.addTerm() call FieldData.addTerm() - call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() call String.writeBytes() + - if < = new = = public public throws assert != call FieldData.addPosition() call FieldData.addPosition() call FieldData.addPosition() call FieldData.addPosition() call FieldData.addPosition() - == : if && != call boolean.writeBytes() call boolean.writeBytes() call boolean.writeBytes() call boolean.writeBytes() call boolean.writeBytes() private private return >= || call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() >= decl int int int int private private throws decl_stmt int final final = call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() call decl Deque.size() assert > : call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.writeIndex(int,long) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.writeIndex(int,long) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.writeIndex(int,long) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.writeIndex(int,long) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.writeIndex(int,long) call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt int final final = - call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt int final final = if > decl_stmt int final final final = call Compressor.compress() call Compressor.compress() call Compressor.compress() call Compressor.compress() call Compressor.compress() call decl Deque.clear() call decl Deque.clear() call decl Deque.clear() call decl Deque.clear() call decl Deque.clear() = = = ++ int int private private throws if == decl_stmt int final final = call decl Deque.getFirst() call decl Deque.getFirst() call decl Deque.getFirst() call decl Deque.getFirst() call decl Deque.getFirst() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() return else decl_stmt int = for : += return decl Writer int decl int decl PackedInts int int decl SortedSet private private throws decl_stmt java.util.SortedSet < = new <> for : for : call decl SortedSet.add() call decl SortedSet.add() call decl SortedSet.add() call decl SortedSet.add() call decl SortedSet.add() decl_stmt int final final = call decl SortedSet.size() call decl SortedSet.size() call decl SortedSet.size() call decl SortedSet.size() call decl SortedSet.size() assert > decl_stmt int final final = call decl SortedSet.last() call decl SortedSet.last() call decl SortedSet.last() call decl SortedSet.last() call decl SortedSet.last() decl_stmt int final final = - << | call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() call IndexOutput.writeByte() byte if - >= call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() - - decl_stmt Writer final final final final final = call decl SortedSet.size() call decl SortedSet.size() call decl SortedSet.size() call decl SortedSet.size() call decl SortedSet.size() for : call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() decl_stmt int = new call decl SortedSet.size() call decl SortedSet.size() call decl SortedSet.size() call decl SortedSet.size() call decl SortedSet.size() decl_stmt int = for : ++ = return decl PackedInts decl Writer private private throws decl_stmt Writer final final final final final = - for : for : decl_stmt int final final = assert >= call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() int boolean decl Writer decl int private private throws decl_stmt boolean = decl_stmt int = new - for : for : decl_stmt int final final = assert >= if == - = else if != = break break if call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt Writer final final final final final = for : assert >= call decl Writer.add() call decl Writer.add() call decl Writer.add() call decl Writer.add() call decl Writer.add() assert call decl Writer.ord() call decl Writer.ord() call decl Writer.ord() call decl Writer.ord() call decl Writer.ord() == - call decl Writer.finish() call decl Writer.finish() call decl Writer.finish() call decl Writer.finish() call decl Writer.finish() else call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt Writer final final final final final = for : for : call decl Writer.add() call decl Writer.add() call decl Writer.add() call decl Writer.add() call decl Writer.add() assert call decl Writer.ord() call decl Writer.ord() call decl Writer.ord() call decl Writer.ord() call decl Writer.ord() == - call decl Writer.finish() call decl Writer.finish() call decl Writer.finish() call decl Writer.finish() call decl Writer.finish() decl PackedInts int int private private throws decl_stmt int = for : for : |= decl_stmt int final final = call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt Writer final final final final final = for : for : call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() call decl PackedInts.add() assert call decl PackedInts.ord() call decl PackedInts.ord() call decl PackedInts.ord() call decl PackedInts.ord() call decl PackedInts.ord() == - call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() call decl PackedInts.finish() private private throws for : for : for = < ++ for : for : for = < ++ private private throws for : for : for = < ++ - int int int private private throws for : for : if decl_stmt int = for = < ++ decl_stmt int = for = < ++ decl_stmt int final final = + ++ - = assert == int int int int decl long boolean int int float decl float decl long private private throws decl_stmt boolean = decl_stmt long = new decl_stmt long = new for : for : |= if && decl_stmt int final final = decl_stmt int = for = < ++ decl_stmt int = decl_stmt int = for = < ++ decl_stmt int final final = + decl_stmt int final final = + += - += - = = ++ assert == if ! return decl_stmt float final final final = new for = < ++ = <= || <= : double / for = < ++ call IndexOutput.writeInt() call IndexOutput.writeInt() call IndexOutput.writeInt() call IndexOutput.writeInt() call IndexOutput.writeInt() for : for : if & != decl_stmt int final final = decl_stmt float final final = decl_stmt int = for = < ++ decl_stmt int = decl_stmt int = for = < ++ decl_stmt int final final = + : decl_stmt int final final = + - - * - = = ++ for : for : if & != decl_stmt int = for = < ++ for = < ++ + ++ - - assert == private private throws for : for : if for = < ++ + public public throws if ! call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() ++ if != throw new + + + call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.finish(int,long) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.finish(int,long) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.finish(int,long) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.finish(int,long) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.finish(int,long) call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() call IndexOutput.writeVLong() int int int int int int int int public public throws assert == != assert == != if decl_stmt int final final = + if + > = + decl_stmt int = if decl_stmt int final final = + if + > = + for = < ++ decl_stmt int final final = if & != decl_stmt int final final = + = call boolean.copyBytes() call boolean.copyBytes() call boolean.copyBytes() call boolean.copyBytes() call boolean.copyBytes() else + = += >>> + = else for = < ++ += >>> + = if decl_stmt int final final = + if + > decl_stmt int final final = + = = decl_stmt int = for = < ++ = + = + = + = + = - += int CompressingStoredFieldsIndexReader int int Bits Fields IndexInput int int TermVectorsReader long int MatchingReaders CompressingTermVectorsReader public public throws decl_stmt int = decl_stmt int = decl_stmt MatchingReaders = new for = < ++ decl_stmt org.apache.lucene.codecs.compressing.CompressingTermVectorsReader = decl_stmt org.apache.lucene.codecs.TermVectorsReader final final = if if != && instanceof = decl_stmt int final final = decl_stmt org.apache.lucene.util.Bits final final = if != && call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getCompressionMode() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getCompressionMode() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getCompressionMode() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getCompressionMode() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getCompressionMode() == && call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getChunkSize() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getChunkSize() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getChunkSize() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getChunkSize() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getChunkSize() == && call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getVersion() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getVersion() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getVersion() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getVersion() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getVersion() == && call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getPackedIntsVersion() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getPackedIntsVersion() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getPackedIntsVersion() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getPackedIntsVersion() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getPackedIntsVersion() == && && == && ! call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.checkIntegrity() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.checkIntegrity() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.checkIntegrity() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.checkIntegrity() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.checkIntegrity() if ! call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() call decl Deque.isEmpty() ++ decl_stmt org.apache.lucene.store.IndexInput = call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getVectorsStream() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getVectorsStream() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getVectorsStream() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getVectorsStream() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getVectorsStream() decl_stmt org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader = call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getIndexReader() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getIndexReader() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getIndexReader() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getIndexReader() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getIndexReader() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) decl_stmt int = while < decl_stmt int = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if != throw new + + + decl_stmt int = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.writeIndex(int,long) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.writeIndex(int,long) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.writeIndex(int,long) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.writeIndex(int,long) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.writeIndex(int,long) call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() += += += if > throw new + + + + + decl_stmt long final final if == = call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() else = call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.getStartPointer(int) call IndexOutput.copyBytes() call IndexOutput.copyBytes() call IndexOutput.copyBytes() call IndexOutput.copyBytes() call IndexOutput.copyBytes() - call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() if call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() != call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() throw new + call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() + + call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getMaxPointer() += call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getNumChunks() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getNumChunks() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getNumChunks() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getNumChunks() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getNumChunks() += call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getNumDirtyChunks() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getNumDirtyChunks() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getNumDirtyChunks() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getNumDirtyChunks() call org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.getNumDirtyChunks() else if != call TermVectorsReader.checkIntegrity() call TermVectorsReader.checkIntegrity() call TermVectorsReader.checkIntegrity() call TermVectorsReader.checkIntegrity() call TermVectorsReader.checkIntegrity() for = < ++ if != && call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() == continue decl_stmt Fields if == = else = call TermVectorsReader.get() call TermVectorsReader.get() call TermVectorsReader.get() call TermVectorsReader.get() call TermVectorsReader.get() ++ return return > || * >