org.apache.lucene.mockfile java.io.FileNotFoundException import java.io.IOException import java.io.InputStream import java.io.OutputStream import java.lang.Exception import java.lang.InterruptedException import java.lang.NoSuchFieldException import java.lang.RuntimeException import java.net.URI import java.nio.file.FileSystem import java.nio.file.Files import java.nio.file.NoSuchFileException import java.nio.file.Path import java.nio.file.StandardCopyOption import java.util.concurrent.CyclicBarrier import java.util.concurrent.atomic.AtomicBoolean import org.apache.lucene.mockfile.FilterPath import org.apache.lucene.mockfile.WindowsFS import org.apache.lucene.util.Constants import class org.apache.lucene.mockfile.TestWindowsFS super super extends public public throws FileSystem protected protected decl_stmt java.io.FileSystem = new return new InputStream OutputStream Path public public throws decl_stmt java.nio.file.Path = decl_stmt java.io.OutputStream = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() decl_stmt java.io.InputStream = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) try call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) catch call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() InputStream OutputStream Path public public throws decl_stmt java.nio.file.Path = decl_stmt java.io.OutputStream = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() decl_stmt java.io.InputStream = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) try call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) catch call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() InputStream OutputStream Path public public throws decl_stmt java.nio.file.Path = decl_stmt java.io.OutputStream = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() decl_stmt java.io.InputStream = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) try call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) catch call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() Path CyclicBarrier int AtomicBoolean Thread Path Path boolean public public throws decl_stmt java.nio.file.Path final final = decl_stmt java.nio.file.Path final final = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) decl_stmt java.util.concurrent.CyclicBarrier final final = new decl_stmt java.util.concurrent.atomic.AtomicBoolean final final = new decl_stmt java.lang.Thread = new public public try call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) catch throw new while call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() == try if else if else decl_stmt java.nio.file.Path = call java.nio.file.Path.resolveSibling(Path) call java.nio.file.Path.resolveSibling(Path) call java.nio.file.Path.resolveSibling(Path) call java.nio.file.Path.resolveSibling(Path) call java.nio.file.Path.resolveSibling(Path) catch call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) call java.util.concurrent.CyclicBarrier.await(long,TimeUnit) try decl_stmt int final final = + for = < ++ decl_stmt boolean = try = = catch call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() finally call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) Path public public try catch throw new while == try if else if else decl_stmt java.nio.file.Path = catch