org.apache.lucene.util.automaton java.util.Arrays import java.util.ArrayList import java.util.List import class org.apache.lucene.util.automaton.UTF32ToUTF8 decl int decl Automaton decl int UTF8Sequence UTF8Sequence UTF8Sequence UTF8Sequence decl int public public return public public return private private if < = = = else if < = << | >> = = else if < = << | >> = = else = << | >> = = private private for = < ++ - = | & - = = >> StringBuilder public public decl_stmt java.lang.StringBuilder = new for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() int int int private private if call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() == call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() if == - && == - call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() return else assert > + assert > + decl_stmt int = call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() + else if == if == - call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() else if call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() - call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() > call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() + call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() - - - else decl_stmt int = + - decl_stmt int final final = - while < call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() - call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() call UTF8Sequence.set() - call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() - ++ int int private private if == - call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() | call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() - else decl_stmt int = call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() + decl_stmt int = call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() | call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() - if && call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() != call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() + - - int int private private if == - call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() & ~ call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() - call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() else decl_stmt int final final if call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() == = else = call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() & ~ call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() call UTF8Sequence.numBits() - if && call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() != call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() - - - decl_stmt int = call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() call UTF8Sequence.byteAt() + int int private private if == call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() else decl_stmt int = call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() while > decl_stmt int = call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() -- = call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() call decl Automaton.addTransition() decl int int Transition int int int int decl List public public if == return decl_stmt int = new - decl_stmt java.util.List < = new <> decl_stmt int = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = new decl_stmt int = call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() = decl_stmt org.apache.lucene.util.automaton.Transition = new while call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() != = call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - = assert != - decl_stmt int = for = < ++ decl_stmt int = decl_stmt int = if == - = call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.createState() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() call decl Automaton.setAccept() = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish() call decl Automaton.finish()