org.apache.lucene.util java.io.Closeable import java.io.FileNotFoundException import java.io.IOException import java.io.InputStream import java.io.PrintStream import java.lang.annotation.Documented import java.lang.annotation.ElementType import java.lang.annotation.Inherited import java.lang.annotation.Retention import java.lang.annotation.RetentionPolicy import java.lang.annotation.Target import java.lang.reflect.Constructor import java.lang.reflect.Method import java.net.URI import java.nio.file.FileSystem import java.nio.file.NoSuchFileException import java.nio.file.Path import java.nio.file.Paths import java.security.AccessControlContext import java.security.AccessController import java.security.Permission import java.security.PermissionCollection import java.security.Permissions import java.security.PrivilegedActionException import java.security.PrivilegedExceptionAction import java.security.ProtectionDomain import java.security.SecurityPermission import java.text.Collator import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.Comparator import java.util.EnumSet import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.List import java.util.Locale import java.util.Map import java.util.Random import java.util.Set import java.util.TimeZone import java.util.TreeSet import java.util.concurrent.LinkedBlockingQueue import java.util.concurrent.ThreadPoolExecutor import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicReference import java.util.logging.Logger import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.Document import org.apache.lucene.document.Field.Store import org.apache.lucene.document.Field import org.apache.lucene.document.FieldType import org.apache.lucene.document.StringField import org.apache.lucene.document.TextField import org.apache.lucene.index.* import org.apache.lucene.index.IndexReader.ReaderClosedListener import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.TermsEnum.SeekStatus import org.apache.lucene.mockfile.FilterPath import org.apache.lucene.mockfile.VirusCheckingFS import org.apache.lucene.search.AssertingIndexSearcher import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.LRUQueryCache import org.apache.lucene.search.Query import org.apache.lucene.search.QueryCache import org.apache.lucene.search.QueryCachingPolicy import org.apache.lucene.search.QueryUtils.FCInvisibleMultiReader import org.apache.lucene.store.BaseDirectoryWrapper import org.apache.lucene.store.Directory import org.apache.lucene.store.FSDirectory import org.apache.lucene.store.FSLockFactory import org.apache.lucene.store.FlushInfo import org.apache.lucene.store.IOContext import org.apache.lucene.store.LockFactory import org.apache.lucene.store.MergeInfo import org.apache.lucene.store.MockDirectoryWrapper.Throttling import org.apache.lucene.store.MockDirectoryWrapper import org.apache.lucene.store.NRTCachingDirectory import org.apache.lucene.store.RawDirectoryWrapper import org.apache.lucene.util.automaton.AutomatonTestUtil import org.apache.lucene.util.automaton.CompiledAutomaton import org.apache.lucene.util.automaton.RegExp import org.junit.After import org.junit.AfterClass import org.junit.Assert import org.junit.Before import org.junit.BeforeClass import org.junit.ClassRule import org.junit.Rule import org.junit.Test import org.junit.rules.RuleChain import org.junit.rules.TestRule import org.junit.runner.RunWith import com.carrotsearch.randomizedtesting.JUnit4MethodProvider import com.carrotsearch.randomizedtesting.LifecycleScope import com.carrotsearch.randomizedtesting.MixWithSuiteName import com.carrotsearch.randomizedtesting.RandomizedContext import com.carrotsearch.randomizedtesting.RandomizedRunner import com.carrotsearch.randomizedtesting.RandomizedTest import com.carrotsearch.randomizedtesting.annotations.Listeners import com.carrotsearch.randomizedtesting.annotations.SeedDecorators import com.carrotsearch.randomizedtesting.annotations.TestGroup import com.carrotsearch.randomizedtesting.annotations.TestMethodProviders import com.carrotsearch.randomizedtesting.annotations.ThreadLeakAction.Action import com.carrotsearch.randomizedtesting.annotations.ThreadLeakAction import com.carrotsearch.randomizedtesting.annotations.ThreadLeakFilters import com.carrotsearch.randomizedtesting.annotations.ThreadLeakGroup.Group import com.carrotsearch.randomizedtesting.annotations.ThreadLeakGroup import com.carrotsearch.randomizedtesting.annotations.ThreadLeakLingering import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope.Scope import com.carrotsearch.randomizedtesting.annotations.ThreadLeakScope import com.carrotsearch.randomizedtesting.annotations.ThreadLeakZombies.Consequence import com.carrotsearch.randomizedtesting.annotations.ThreadLeakZombies import com.carrotsearch.randomizedtesting.annotations.TimeoutSuite import com.carrotsearch.randomizedtesting.generators.RandomPicks import com.carrotsearch.randomizedtesting.rules.NoClassHooksShadowingRule import com.carrotsearch.randomizedtesting.rules.NoInstanceHooksOverridesRule import com.carrotsearch.randomizedtesting.rules.StaticFieldsInvariantRule import junit.framework.AssertionFailedError import static static com.carrotsearch.randomizedtesting.RandomizedTest.systemPropertyAsBoolean import static static com.carrotsearch.randomizedtesting.RandomizedTest.systemPropertyAsInt import class annotation annotation annotation annotation comment annotation annotation annotation annotation comment annotation annotation annotation annotation org.apache.lucene.util.LuceneTestCase super super extends String String String String String TestRuleStoreClassName boolean String boolean decl AtomicReference int decl Map String TestRuleTemporaryFilesCleanup String QueryCache String TestRule Throttling decl List decl Set boolean TestRule TestRuleSetupTeardownChained long String boolean boolean String TestRuleThreadAndTestName QueryCachingPolicy decl String String String boolean LiveIWCFlushMode decl List boolean TestRuleMarkFailure TestRuleMarkFailure TestRule QueryCachingPolicy boolean String String boolean TestRuleSetupAndRestoreClassEnv public public public public throws return public static public static return call decl AtomicReference.getAndSet() call decl AtomicReference.getAndSet() call decl AtomicReference.getAndSet() call decl AtomicReference.getAndSet() call decl AtomicReference.getAndSet() protected protected if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return if == return return String protected protected decl_stmt java.lang.String = return ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) static static = public public throws = public public throws = call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() public public public public public static public static return public < extends extends public < extends extends return public static < extends extends public static < extends extends return public static < public static < return call org.apache.lucene.util.TestRuleStoreClassName.getTestClass() call org.apache.lucene.util.TestRuleStoreClassName.getTestClass() call org.apache.lucene.util.TestRuleStoreClassName.getTestClass() call org.apache.lucene.util.TestRuleStoreClassName.getTestClass() call org.apache.lucene.util.TestRuleStoreClassName.getTestClass() public public return decl List public static public static decl_stmt java.util.List < = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() != throw new + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() protected protected return == int int public static public static decl_stmt int = * : * decl_stmt int = + / return public static public static return int int public static public static decl_stmt int = : += * decl_stmt int = - return >= public static public static return public static public static return ! public static public static return public static public static public static public static public static public static public static < < public static < < return new <> public static public static < + + if == else while + + decl Iterator public static public static decl_stmt java.util.Iterator < = == : public static public static return new public static public static return IndexWriterConfig ConcurrentMergeScheduler int int public static public static decl_stmt org.apache.lucene.index.IndexWriterConfig = new call org.apache.lucene.index.IndexWriterConfig.setSimilarity(Similarity) call org.apache.lucene.index.IndexWriterConfig.setSimilarity(Similarity) call org.apache.lucene.index.IndexWriterConfig.setSimilarity(Similarity) call org.apache.lucene.index.IndexWriterConfig.setSimilarity(Similarity) call org.apache.lucene.index.IndexWriterConfig.setSimilarity(Similarity) if call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) new if call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) new else if decl_stmt org.apache.lucene.index.ConcurrentMergeScheduler if = new else = new protected synchronized protected synchronized return decl_stmt int = decl_stmt int = + call org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergesAndThreads(int,int) call org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergesAndThreads(int,int) call org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergesAndThreads(int,int) call org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergesAndThreads(int,int) call org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergesAndThreads(int,int) if call org.apache.lucene.index.ConcurrentMergeScheduler.disableAutoIOThrottle() call org.apache.lucene.index.ConcurrentMergeScheduler.disableAutoIOThrottle() call org.apache.lucene.index.ConcurrentMergeScheduler.disableAutoIOThrottle() call org.apache.lucene.index.ConcurrentMergeScheduler.disableAutoIOThrottle() call org.apache.lucene.index.ConcurrentMergeScheduler.disableAutoIOThrottle() call org.apache.lucene.index.ConcurrentMergeScheduler.getAutoIOThrottle() call org.apache.lucene.index.ConcurrentMergeScheduler.getAutoIOThrottle() call org.apache.lucene.index.ConcurrentMergeScheduler.getAutoIOThrottle() call org.apache.lucene.index.ConcurrentMergeScheduler.getAutoIOThrottle() call org.apache.lucene.index.ConcurrentMergeScheduler.getAutoIOThrottle() call org.apache.lucene.index.ConcurrentMergeScheduler.setForceMergeMBPerSec(double) call org.apache.lucene.index.ConcurrentMergeScheduler.setForceMergeMBPerSec(double) call org.apache.lucene.index.ConcurrentMergeScheduler.setForceMergeMBPerSec(double) call org.apache.lucene.index.ConcurrentMergeScheduler.setForceMergeMBPerSec(double) call org.apache.lucene.index.ConcurrentMergeScheduler.setForceMergeMBPerSec(double) + * call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) else decl_stmt org.apache.lucene.index.ConcurrentMergeScheduler = new call org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergesAndThreads(int,int) call org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergesAndThreads(int,int) call org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergesAndThreads(int,int) call org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergesAndThreads(int,int) call org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergesAndThreads(int,int) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) call org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler) if if call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) else call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) call org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy) if call org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(IndexReaderWarmer) call org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(IndexReaderWarmer) call org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(IndexReaderWarmer) call org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(IndexReaderWarmer) call org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(IndexReaderWarmer) new call org.apache.lucene.index.IndexWriterConfig.getInfoStream() call org.apache.lucene.index.IndexWriterConfig.getInfoStream() call org.apache.lucene.index.IndexWriterConfig.getInfoStream() call org.apache.lucene.index.IndexWriterConfig.getInfoStream() call org.apache.lucene.index.IndexWriterConfig.getInfoStream() call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setReaderPooling(boolean) call org.apache.lucene.index.IndexWriterConfig.setReaderPooling(boolean) call org.apache.lucene.index.IndexWriterConfig.setReaderPooling(boolean) call org.apache.lucene.index.IndexWriterConfig.setReaderPooling(boolean) call org.apache.lucene.index.IndexWriterConfig.setReaderPooling(boolean) return protected synchronized protected synchronized return TieredMergePolicy long LogDocMergePolicy int MergePolicy long int private static private static decl_stmt long = if != = * if != = * * assert > decl_stmt org.apache.lucene.index.MergePolicy = if instanceof decl_stmt org.apache.lucene.index.TieredMergePolicy = decl_stmt long = call org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB() * * if / > decl_stmt double = * / / if + call org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB() call org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB() + + + call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) else if instanceof decl_stmt org.apache.lucene.index.LogByteSizeMergePolicy = if call LogDocMergePolicy.getMinMergeMB() call LogDocMergePolicy.getMinMergeMB() call LogDocMergePolicy.getMinMergeMB() call LogDocMergePolicy.getMinMergeMB() call LogDocMergePolicy.getMinMergeMB() * * / > decl_stmt double = * / / if + call LogDocMergePolicy.getMinMergeMB() call LogDocMergePolicy.getMinMergeMB() call LogDocMergePolicy.getMinMergeMB() call LogDocMergePolicy.getMinMergeMB() call LogDocMergePolicy.getMinMergeMB() + + + call LogDocMergePolicy.setMinMergeMB() call LogDocMergePolicy.setMinMergeMB() call LogDocMergePolicy.setMinMergeMB() call LogDocMergePolicy.setMinMergeMB() call LogDocMergePolicy.setMinMergeMB() else if instanceof decl_stmt org.apache.lucene.index.LogDocMergePolicy = assert / < / decl_stmt int = / if call org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs() call org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs() call org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs() call org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs() call org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs() / > decl_stmt int = * if + call org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs() call org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs() call org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs() call org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs() call org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs() + + + call org.apache.lucene.index.LogDocMergePolicy.setMinMergeDocs(int) call org.apache.lucene.index.LogDocMergePolicy.setMinMergeDocs(int) call org.apache.lucene.index.LogDocMergePolicy.setMinMergeDocs(int) call org.apache.lucene.index.LogDocMergePolicy.setMinMergeDocs(int) call org.apache.lucene.index.LogDocMergePolicy.setMinMergeDocs(int) public static public static if return new else if return else if == return return public static public static return public static public static return public static public static return public static public static return public static public static return new new LogMergePolicy public static public static decl_stmt org.apache.lucene.index.LogMergePolicy = new : new call org.apache.lucene.index.LogMergePolicy.setCalibrateSizeByDeletes(boolean) call org.apache.lucene.index.LogMergePolicy.setCalibrateSizeByDeletes(boolean) call org.apache.lucene.index.LogMergePolicy.setCalibrateSizeByDeletes(boolean) call org.apache.lucene.index.LogMergePolicy.setCalibrateSizeByDeletes(boolean) call org.apache.lucene.index.LogMergePolicy.setCalibrateSizeByDeletes(boolean) if call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) else call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) return private static private static if + * else : if + * else TieredMergePolicy public static public static decl_stmt org.apache.lucene.index.TieredMergePolicy = new if call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int) else call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int) if call org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double) + * else call org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double) * call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) call org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double) + * call org.apache.lucene.index.TieredMergePolicy.setForceMergeDeletesPctAllowed(double) call org.apache.lucene.index.TieredMergePolicy.setForceMergeDeletesPctAllowed(double) call org.apache.lucene.index.TieredMergePolicy.setForceMergeDeletesPctAllowed(double) call org.apache.lucene.index.TieredMergePolicy.setForceMergeDeletesPctAllowed(double) call org.apache.lucene.index.TieredMergePolicy.setForceMergeDeletesPctAllowed(double) + * if call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) else call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setReclaimDeletesWeight(double) call org.apache.lucene.index.TieredMergePolicy.setReclaimDeletesWeight(double) call org.apache.lucene.index.TieredMergePolicy.setReclaimDeletesWeight(double) call org.apache.lucene.index.TieredMergePolicy.setReclaimDeletesWeight(double) call org.apache.lucene.index.TieredMergePolicy.setReclaimDeletesWeight(double) * return MergePolicy public static public static decl_stmt org.apache.lucene.index.MergePolicy = call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) : return LogMergePolicy public static public static decl_stmt org.apache.lucene.index.LogMergePolicy = call LogMergePolicy.setNoCFSRatio() call LogMergePolicy.setNoCFSRatio() call LogMergePolicy.setNoCFSRatio() call LogMergePolicy.setNoCFSRatio() call LogMergePolicy.setNoCFSRatio() : call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) return LogMergePolicy public static public static decl_stmt org.apache.lucene.index.LogMergePolicy = call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) return LogMergePolicy int decl IndexWriter boolean int MergeScheduler String TieredMergePolicy MergePolicy boolean ConcurrentMergeScheduler decl IndexReaderWarmer String String boolean boolean public static public static decl_stmt boolean = decl_stmt java.lang.String = if synchronized decl_stmt boolean switch case = break case = break case = break default: throw new if else if else = if decl_stmt boolean = if else = if decl_stmt IndexReaderWarmer = if == || instanceof if new else = if = if decl_stmt org.apache.lucene.index.MergeScheduler = if instanceof decl_stmt org.apache.lucene.index.ConcurrentMergeScheduler = decl_stmt int = decl_stmt int = + decl_stmt boolean = if call MergeScheduler.enableAutoIOThrottle() call MergeScheduler.enableAutoIOThrottle() call MergeScheduler.enableAutoIOThrottle() call MergeScheduler.enableAutoIOThrottle() call MergeScheduler.enableAutoIOThrottle() else call MergeScheduler.disableAutoIOThrottle() call MergeScheduler.disableAutoIOThrottle() call MergeScheduler.disableAutoIOThrottle() call MergeScheduler.disableAutoIOThrottle() call MergeScheduler.disableAutoIOThrottle() call MergeScheduler.setMaxMergesAndThreads() call MergeScheduler.setMaxMergesAndThreads() call MergeScheduler.setMaxMergesAndThreads() call MergeScheduler.setMaxMergesAndThreads() call MergeScheduler.setMaxMergesAndThreads() = if decl_stmt org.apache.lucene.index.MergePolicy = if instanceof decl_stmt org.apache.lucene.index.LogMergePolicy = call MergePolicy.setCalibrateSizeByDeletes() call MergePolicy.setCalibrateSizeByDeletes() call MergePolicy.setCalibrateSizeByDeletes() call MergePolicy.setCalibrateSizeByDeletes() call MergePolicy.setCalibrateSizeByDeletes() if call MergePolicy.setMergeFactor() call MergePolicy.setMergeFactor() call MergePolicy.setMergeFactor() call MergePolicy.setMergeFactor() call MergePolicy.setMergeFactor() else call MergePolicy.setMergeFactor() call MergePolicy.setMergeFactor() call MergePolicy.setMergeFactor() call MergePolicy.setMergeFactor() call MergePolicy.setMergeFactor() else if instanceof decl_stmt org.apache.lucene.index.TieredMergePolicy = if call LogMergePolicy.setMaxMergeAtOnce() call LogMergePolicy.setMaxMergeAtOnce() call LogMergePolicy.setMaxMergeAtOnce() call LogMergePolicy.setMaxMergeAtOnce() call LogMergePolicy.setMaxMergeAtOnce() call LogMergePolicy.setMaxMergeAtOnceExplicit() call LogMergePolicy.setMaxMergeAtOnceExplicit() call LogMergePolicy.setMaxMergeAtOnceExplicit() call LogMergePolicy.setMaxMergeAtOnceExplicit() call LogMergePolicy.setMaxMergeAtOnceExplicit() else call LogMergePolicy.setMaxMergeAtOnce() call LogMergePolicy.setMaxMergeAtOnce() call LogMergePolicy.setMaxMergeAtOnce() call LogMergePolicy.setMaxMergeAtOnce() call LogMergePolicy.setMaxMergeAtOnce() call LogMergePolicy.setMaxMergeAtOnceExplicit() call LogMergePolicy.setMaxMergeAtOnceExplicit() call LogMergePolicy.setMaxMergeAtOnceExplicit() call LogMergePolicy.setMaxMergeAtOnceExplicit() call LogMergePolicy.setMaxMergeAtOnceExplicit() if call LogMergePolicy.setMaxMergedSegmentMB() call LogMergePolicy.setMaxMergedSegmentMB() call LogMergePolicy.setMaxMergedSegmentMB() call LogMergePolicy.setMaxMergedSegmentMB() call LogMergePolicy.setMaxMergedSegmentMB() + * else call LogMergePolicy.setMaxMergedSegmentMB() call LogMergePolicy.setMaxMergedSegmentMB() call LogMergePolicy.setMaxMergedSegmentMB() call LogMergePolicy.setMaxMergedSegmentMB() call LogMergePolicy.setMaxMergedSegmentMB() * call LogMergePolicy.setFloorSegmentMB() call LogMergePolicy.setFloorSegmentMB() call LogMergePolicy.setFloorSegmentMB() call LogMergePolicy.setFloorSegmentMB() call LogMergePolicy.setFloorSegmentMB() + * call LogMergePolicy.setForceMergeDeletesPctAllowed() call LogMergePolicy.setForceMergeDeletesPctAllowed() call LogMergePolicy.setForceMergeDeletesPctAllowed() call LogMergePolicy.setForceMergeDeletesPctAllowed() call LogMergePolicy.setForceMergeDeletesPctAllowed() + * if call LogMergePolicy.setSegmentsPerTier() call LogMergePolicy.setSegmentsPerTier() call LogMergePolicy.setSegmentsPerTier() call LogMergePolicy.setSegmentsPerTier() call LogMergePolicy.setSegmentsPerTier() else call LogMergePolicy.setSegmentsPerTier() call LogMergePolicy.setSegmentsPerTier() call LogMergePolicy.setSegmentsPerTier() call LogMergePolicy.setSegmentsPerTier() call LogMergePolicy.setSegmentsPerTier() call LogMergePolicy.setReclaimDeletesWeight() call LogMergePolicy.setReclaimDeletesWeight() call LogMergePolicy.setReclaimDeletesWeight() call LogMergePolicy.setReclaimDeletesWeight() call LogMergePolicy.setReclaimDeletesWeight() * = if && decl_stmt java.lang.String = decl_stmt java.lang.String = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) decl_stmt java.lang.String = call TieredMergePolicy.split() call TieredMergePolicy.split() call TieredMergePolicy.split() call TieredMergePolicy.split() call TieredMergePolicy.split() decl_stmt java.lang.StringBuilder = new if == for = < ++ if ! call String.append() call String.append() call String.append() call String.append() call String.append() + + call String.append() call String.append() call String.append() call String.append() call String.append() + + else call String.append() call String.append() call String.append() call String.append() call String.append() call org.apache.lucene.index.TieredMergePolicy.toString() call org.apache.lucene.index.TieredMergePolicy.toString() call org.apache.lucene.index.TieredMergePolicy.toString() call org.apache.lucene.index.TieredMergePolicy.toString() call org.apache.lucene.index.TieredMergePolicy.toString() if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > public static public static return Path public static public static if == decl_stmt java.nio.file.Path = return else return public static public static return public static public static return public static public static return public static public static return public static public static return public static public static return public static public static return VirusCheckingFS FileSystem public static public static if == decl_stmt org.apache.lucene.mockfile.VirusCheckingFS = new decl_stmt java.io.FileSystem = call VirusCheckingFS.getFileSystem() call VirusCheckingFS.getFileSystem() call VirusCheckingFS.getFileSystem() call VirusCheckingFS.getFileSystem() call VirusCheckingFS.getFileSystem() = new return public static public static throws return public static public static return public static public static if == = return public static public static return BaseDirectoryWrapper Directory String decl Class private static private static decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = decl_stmt java.lang.Class < extends extends try try = catch = = decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.store.BaseDirectoryWrapper = return catch throw Directory public static public static throws decl_stmt org.apache.lucene.store.Directory = for : if || call Directory.copyFrom() call Directory.copyFrom() call Directory.copyFrom() call Directory.copyFrom() call Directory.copyFrom() return BaseDirectoryWrapper MockDirectoryWrapper private static private static if && ! = new if decl_stmt org.apache.lucene.store.BaseDirectoryWrapper = new new return else decl_stmt org.apache.lucene.store.MockDirectoryWrapper = new call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) call org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling) new return public static public static return == : public static public static return == : public static public static return == : public static public static return == : public static public static return == : public static public static return == : public static public static return private static private static if != && == && == = new return FieldType FieldType public synchronized static public synchronized static = new decl_stmt org.apache.solr.schema.FieldType = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if || == || != if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new else = return decl_stmt org.apache.solr.schema.FieldType = new if ! call org.apache.solr.schema.FieldType.stored() call org.apache.solr.schema.FieldType.stored() call org.apache.solr.schema.FieldType.stored() call org.apache.solr.schema.FieldType.stored() call org.apache.solr.schema.FieldType.stored() && call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) if ! call org.apache.solr.schema.FieldType.storeTermVectors() call org.apache.solr.schema.FieldType.storeTermVectors() call org.apache.solr.schema.FieldType.storeTermVectors() call org.apache.solr.schema.FieldType.storeTermVectors() call org.apache.solr.schema.FieldType.storeTermVectors() && call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) if ! call org.apache.solr.schema.FieldType.storeTermVectorPositions() call org.apache.solr.schema.FieldType.storeTermVectorPositions() call org.apache.solr.schema.FieldType.storeTermVectorPositions() call org.apache.solr.schema.FieldType.storeTermVectorPositions() call org.apache.solr.schema.FieldType.storeTermVectorPositions() call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) if call org.apache.solr.schema.FieldType.storeTermVectorPositions() call org.apache.solr.schema.FieldType.storeTermVectorPositions() call org.apache.solr.schema.FieldType.storeTermVectorPositions() call org.apache.solr.schema.FieldType.storeTermVectorPositions() call org.apache.solr.schema.FieldType.storeTermVectorPositions() if ! call org.apache.solr.schema.FieldType.storeTermVectorPayloads() call org.apache.solr.schema.FieldType.storeTermVectorPayloads() call org.apache.solr.schema.FieldType.storeTermVectorPayloads() call org.apache.solr.schema.FieldType.storeTermVectorPayloads() call org.apache.solr.schema.FieldType.storeTermVectorPayloads() call org.apache.solr.schema.FieldType.setStoreTermVectorPayloads(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPayloads(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPayloads(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPayloads(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPayloads(boolean) if ! call org.apache.solr.schema.FieldType.storeTermVectorOffsets() call org.apache.solr.schema.FieldType.storeTermVectorOffsets() call org.apache.solr.schema.FieldType.storeTermVectorOffsets() call org.apache.solr.schema.FieldType.storeTermVectorOffsets() call org.apache.solr.schema.FieldType.storeTermVectorOffsets() call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorOffsets(boolean) if + + + call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call org.apache.solr.schema.FieldType.freeze() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return private static private static if instanceof return new else if instanceof return new else throw new public static public static return String public static public static decl_stmt java.lang.String = return public static public static return new FSDirectory private static private static < extends extends throws decl_stmt org.apache.lucene.store.FSDirectory = try = catch return static static return decl Constructor Path decl Class static static if if = else = try decl_stmt java.lang.Class final final final < extends extends = if decl_stmt java.nio.file.Path final final = + return call decl Class.asSubclass() call decl Class.asSubclass() call decl Class.asSubclass() call decl Class.asSubclass() call decl Class.asSubclass() try decl_stmt java.lang.reflect.Constructor < extends extends = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() decl_stmt java.nio.file.Path final final = return call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch if ! instanceof try return call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() catch return call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch throw int Random LeafReader decl Set decl List public static public static throws decl_stmt java.util.Random = for = = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + < ++ switch call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) case if + + = instanceof new : new break case if + + = new break case if instanceof decl_stmt org.apache.lucene.index.LeafReader final final = decl_stmt java.util.List final final final < = new <> for : call LeafReader.getFieldInfos() call LeafReader.getFieldInfos() call LeafReader.getFieldInfos() call LeafReader.getFieldInfos() call LeafReader.getFieldInfos() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt int final final = call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() : call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.util.Set final final final < = new <> call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() if + + = new new new break case if + + if instanceof = new else if instanceof = new break case if + + if instanceof = new else if instanceof = new break default: if instanceof && ! instanceof = new if + return public static public static throws if = return public static public static return int IOContext int public static public static decl_stmt int final final = decl_stmt int final final = * if != return new new else if != return new new else decl_stmt org.apache.lucene.store.IOContext final final switch case = break case = break case = break case = new new - break case = new new break default: = return public public public static public static new << public static public static int public static public static decl_stmt int = public static public static boolean public static public static decl_stmt boolean = public static public static public static public static return public static public static return Random int ThreadPoolExecutor IndexSearcher public static public static decl_stmt java.util.Random = if if try = catch if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == && instanceof try catch decl_stmt org.apache.lucene.search.IndexSearcher final final if = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() new : new else = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() new : new call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) return else decl_stmt int = decl_stmt java.util.concurrent.ThreadPoolExecutor final final if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() = else = = new new < new if != if + + new public public decl_stmt org.apache.lucene.search.IndexSearcher if = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() new : new else = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() new : new call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity) call org.apache.lucene.search.IndexSearcher.setQueryCachingPolicy(QueryCachingPolicy) call org.apache.lucene.search.IndexSearcher.setQueryCachingPolicy(QueryCachingPolicy) call org.apache.lucene.search.IndexSearcher.setQueryCachingPolicy(QueryCachingPolicy) call org.apache.lucene.search.IndexSearcher.setQueryCachingPolicy(QueryCachingPolicy) call org.apache.lucene.search.IndexSearcher.setQueryCachingPolicy(QueryCachingPolicy) return public public protected protected throws try return catch throw new + InputStream protected protected throws decl_stmt java.io.InputStream = if == throw new + return public public throws public public throws decl Iterator String decl Iterator public public throws if == || == return decl_stmt java.util.Iterator < = decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public throws if != - && != - TermsEnum String TermsEnum int TermsEnum CompiledAutomaton TermsEnum public public throws if == || == return decl_stmt org.apache.lucene.index.TermsEnum = decl_stmt org.apache.lucene.index.TermsEnum = if decl_stmt int = for = < ++ decl_stmt java.lang.String = decl_stmt org.apache.lucene.util.automaton.CompiledAutomaton = new new if == decl_stmt org.apache.lucene.index.TermsEnum = decl_stmt org.apache.lucene.index.TermsEnum = public public throws if != - && != - if != - && != - if != - && != - if != - && != - public public return public public return PostingsEnum PostingsEnum BytesRef PostingsEnum PostingsEnum public public throws decl_stmt org.apache.lucene.util.BytesRef decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = while = != if = = = = = = = = = = = = int int public public throws - - decl_stmt int while = != decl_stmt int = for = < ++ int public public throws if == return - - decl_stmt int while = != if int int int int public public throws if == return decl_stmt int = - decl_stmt int = / + decl_stmt int = while if = else decl_stmt int = + int + * = if == return if int int int int int public public throws if == || == return decl_stmt int = - decl_stmt int = / + decl_stmt int = while if = else decl_stmt int = + int + * = if == return decl_stmt int = for = < ++ decl HashSet int Random TermsEnum BytesRef SeekStatus boolean byte TermsEnum SeekStatus decl ArrayList int int private private throws decl_stmt int = decl_stmt java.util.Random = decl_stmt org.apache.lucene.index.TermsEnum = decl_stmt java.util.HashSet < = new <> decl_stmt int = while < && call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() < = decl_stmt org.apache.lucene.util.BytesRef = while = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) if == call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() else if == = if > = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) else if == decl_stmt byte = new + call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() new else if == switch case call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() new break case call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() new new byte byte break case call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() new break default: throw new ++ decl_stmt org.apache.lucene.index.TermsEnum = decl_stmt java.util.ArrayList < = new <> for : if = = decl_stmt boolean final final = if call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) else decl_stmt SeekStatus = call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) decl_stmt SeekStatus = call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) if != call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() public public throws if != - && != - NumericDocValues Fields NumericDocValues Fields public public throws decl_stmt Fields = decl_stmt Fields = if == || == return for : decl_stmt NumericDocValues = decl_stmt NumericDocValues = if != && != else decl List decl Iterator decl Comparator Document Document decl Iterator decl List public public throws assert == for = < ++ decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.document.Document = decl_stmt java.util.Comparator < = new < public public return decl_stmt java.util.List < = new <> call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() decl_stmt java.util.List < = new <> call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() decl_stmt java.util.Iterator < = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() decl_stmt java.util.Iterator < = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public return public public Fields Fields public public throws assert == for = < ++ decl_stmt Fields = decl_stmt Fields = decl Set private static < private static < decl_stmt java.util.Set < = new <> for : if != call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return decl Set BytesRef SortedNumericDocValues Bits long SortedNumericDocValues Bits long decl Set BytesRef public public throws decl_stmt java.util.Set < = decl_stmt java.util.Set < = for : decl_stmt NumericDocValues = decl_stmt NumericDocValues = if != && != else decl_stmt BinaryDocValues = decl_stmt BinaryDocValues = if != && != for = < ++ decl_stmt org.apache.lucene.util.BytesRef final final = call SortedNumericDocValues.get() call SortedNumericDocValues.get() call SortedNumericDocValues.get() call SortedNumericDocValues.get() call SortedNumericDocValues.get() decl_stmt org.apache.lucene.util.BytesRef final final = call SortedNumericDocValues.get() call SortedNumericDocValues.get() call SortedNumericDocValues.get() call SortedNumericDocValues.get() call SortedNumericDocValues.get() else decl_stmt org.apache.lucene.index.SortedDocValues = decl_stmt org.apache.lucene.index.SortedDocValues = if != && != call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() for = < call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() ++ decl_stmt org.apache.lucene.util.BytesRef final final = call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() decl_stmt org.apache.lucene.util.BytesRef final final = call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() for = < ++ decl_stmt org.apache.lucene.util.BytesRef final final = call SortedNumericDocValues.get() call SortedNumericDocValues.get() call SortedNumericDocValues.get() call SortedNumericDocValues.get() call SortedNumericDocValues.get() decl_stmt org.apache.lucene.util.BytesRef final final = call SortedNumericDocValues.get() call SortedNumericDocValues.get() call SortedNumericDocValues.get() call SortedNumericDocValues.get() call SortedNumericDocValues.get() else decl_stmt org.apache.lucene.index.SortedSetDocValues = decl_stmt org.apache.lucene.index.SortedSetDocValues = if != && != call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() for = < call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() call SortedNumericDocValues.getValueCount() ++ decl_stmt org.apache.lucene.util.BytesRef final final = call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() decl_stmt org.apache.lucene.util.BytesRef final final = call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() call SortedNumericDocValues.lookupOrd() for = < ++ call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() decl_stmt long while = call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() != call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() call SortedNumericDocValues.nextOrd() else decl_stmt SortedNumericDocValues = decl_stmt SortedNumericDocValues = if != && != for = < ++ call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() decl_stmt long = new call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() for = < ++ = call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() call SortedNumericDocValues.setDocument() for = < ++ call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.valueAt() call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() call SortedNumericDocValues.count() else decl_stmt org.apache.lucene.util.Bits = decl_stmt org.apache.lucene.util.Bits = if != && != call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() for = < call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() ++ call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() else public public throws for = < ++ Bits Bits public public throws assert == decl_stmt org.apache.lucene.util.Bits = decl_stmt org.apache.lucene.util.Bits = if == || == return assert == call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() call org.apache.lucene.util.Bits.length() for = < ++ call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() FieldInfos FieldInfos decl TreeSet decl TreeSet public public throws decl_stmt org.apache.lucene.index.FieldInfos = decl_stmt org.apache.lucene.index.FieldInfos = decl_stmt java.util.TreeSet < = new <> decl_stmt java.util.TreeSet < = new <> for : call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() for : call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() call decl TreeSet.add() PointValues decl Map int private < < private < < throws decl_stmt java.util.Map final final final < < = new <> for : decl_stmt org.apache.lucene.index.PointValues = if == continue call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() call PointValues.intersect() new public public throw new public public throws decl_stmt int = + if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() new public public return return public public throw new int public public throws decl_stmt int = + if == new < new public public return FieldInfos FieldInfo FieldInfos FieldInfo public public throws decl_stmt org.apache.lucene.index.FieldInfos = decl_stmt org.apache.lucene.index.FieldInfos = for : if call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() != decl_stmt org.apache.lucene.index.FieldInfo = call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() + + for : if call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() != decl_stmt org.apache.lucene.index.FieldInfo = call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfos.fieldInfo(int) call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointDimensionCount() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() call org.apache.lucene.index.FieldInfo.getPointNumBytes() AssertionFailedError public static < extends extends public static < extends extends < try catch if return decl_stmt AssertionFailedError = new + call AssertionFailedError.initCause() call AssertionFailedError.initCause() call AssertionFailedError.initCause() call AssertionFailedError.initCause() call AssertionFailedError.initCause() throw throw new + public static public static throws try return catch return public static public static return call org.apache.lucene.util.TestRuleTemporaryFilesCleanup.getPerTestClassTempDir() call org.apache.lucene.util.TestRuleTemporaryFilesCleanup.getPerTestClassTempDir() call org.apache.lucene.util.TestRuleTemporaryFilesCleanup.getPerTestClassTempDir() call org.apache.lucene.util.TestRuleTemporaryFilesCleanup.getPerTestClassTempDir() call org.apache.lucene.util.TestRuleTemporaryFilesCleanup.getPerTestClassTempDir() public static public static return public static public static return call TestRuleTemporaryFilesCleanup.createTempDir() call TestRuleTemporaryFilesCleanup.createTempDir() call TestRuleTemporaryFilesCleanup.createTempDir() call TestRuleTemporaryFilesCleanup.createTempDir() call TestRuleTemporaryFilesCleanup.createTempDir() public static public static throws return call org.apache.lucene.util.TestRuleTemporaryFilesCleanup.createTempFile(String,String) call org.apache.lucene.util.TestRuleTemporaryFilesCleanup.createTempFile(String,String) call org.apache.lucene.util.TestRuleTemporaryFilesCleanup.createTempFile(String,String) call org.apache.lucene.util.TestRuleTemporaryFilesCleanup.createTempFile(String,String) call org.apache.lucene.util.TestRuleTemporaryFilesCleanup.createTempFile(String,String) public static public static throws return PermissionCollection AccessControlContext public static < public static < < throws != new decl_stmt java.security.PermissionCollection final final = new :: decl_stmt java.security.AccessControlContext final final = new new new try return catch throw int int = public static = public static decl_stmt int = decl_stmt int = == return