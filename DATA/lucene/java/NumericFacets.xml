org.apache.solr.request java.io.IOException import java.util.ArrayDeque import java.util.Collections import java.util.Deque import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.List import java.util.Map import java.util.Set import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.DocValues import org.apache.lucene.index.NumericDocValues import org.apache.lucene.index.ReaderUtil import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.PriorityQueue import org.apache.lucene.util.StringHelper import org.apache.solr.common.params.FacetParams import org.apache.solr.common.util.NamedList import org.apache.solr.schema.FieldType import org.apache.solr.schema.SchemaField import org.apache.solr.schema.TrieField import org.apache.solr.search.DocIterator import org.apache.solr.search.DocSet import org.apache.solr.search.SolrIndexSearcher import class org.apache.solr.request.NumericFacets int private private decl_stmt int = ^ >>> = * & return int if >= decl_stmt int final final = for = = + & if == = = ++ else if != continue += break decl int decl long int decl int private private decl_stmt long final final final = decl_stmt int final final final = decl_stmt int final final final = decl_stmt int final final = * = new = new = new = - = * = for = < ++ if > decl LegacyNumericType HashTable decl org CharsRefBuilder NumericDocValues Entry long long String TermsEnum long boolean decl lucene int decl document ValueSource FieldType decl List decl Map Terms BytesRef LeafReaderContext BytesRef FunctionValues NumericDocValues int decl Iterator decl apache decl FieldType String String int Bits SchemaField public static < public static < throws decl_stmt boolean final final = <= = decl_stmt org.apache.solr.schema.SchemaField final final = decl_stmt org.apache.solr.schema.FieldType final final = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() decl_stmt LegacyNumericType final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final = call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() call org.apache.solr.schema.FieldType.getNumericType() if == throw new decl_stmt java.util.List final final final < = decl_stmt HashTable final final = new decl_stmt java.util.Iterator final final final < = call decl apache.iterator() call decl apache.iterator() call decl apache.iterator() call decl apache.iterator() call decl apache.iterator() decl_stmt org.apache.lucene.index.LeafReaderContext = decl_stmt NumericDocValues = decl_stmt org.apache.lucene.util.Bits = decl_stmt int = for = decl_stmt int final final = if == || >= + call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() do = call decl document.next() call decl document.next() call decl document.next() call decl document.next() call decl document.next() == || >= + call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() assert >= switch case = call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() break case = call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() break case decl_stmt NumericDocValues final final = call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() = new public public decl_stmt long = call LeafReaderContext.get() call LeafReaderContext.get() call LeafReaderContext.get() call LeafReaderContext.get() call LeafReaderContext.get() if < ^= return break case decl_stmt NumericDocValues final final = call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() = new public public decl_stmt long = call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() if < ^= return break default: throw new = call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() call decl FieldType.reader() decl_stmt long = call decl LegacyNumericType.get() call decl LegacyNumericType.get() call decl LegacyNumericType.get() call decl LegacyNumericType.get() call decl LegacyNumericType.get() - if != || call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() - call decl lucene.add() call decl lucene.add() call decl lucene.add() call decl lucene.add() call decl lucene.add() else ++ decl_stmt int final final = < : + decl_stmt org.apache.lucene.util.PriorityQueue final final final < if || = new < protected protected if < || == && > return else return else = new < protected protected return > decl_stmt Entry = for = < ++ if >= if == = new = = = = call long.insertWithOverflow() call long.insertWithOverflow() call long.insertWithOverflow() call long.insertWithOverflow() call long.insertWithOverflow() decl_stmt org.apache.lucene.queries.function.ValueSource final final = call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) call org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser) decl_stmt org.apache.solr.common.util.NamedList final final final < = new <> if ! || || decl_stmt java.util.Deque final final final < = new <> while call long.size() call long.size() call long.size() call long.size() call long.size() > call TermsEnum.addFirst() call TermsEnum.addFirst() call TermsEnum.addFirst() call TermsEnum.addFirst() call TermsEnum.addFirst() call long.pop() call long.pop() call long.pop() call long.pop() call long.pop() for : decl_stmt int final final = decl_stmt org.apache.lucene.queries.function.FunctionValues final final = call long.getValues() call long.getValues() call long.getValues() call long.getValues() call long.getValues() call decl apache.get() call decl apache.get() call decl apache.get() call decl apache.get() call decl apache.get() call long.add() call long.add() call long.add() call long.add() call long.add() call String.strVal() call String.strVal() call String.strVal() call String.strVal() call String.strVal() - call decl apache.get() call decl apache.get() call decl apache.get() call decl apache.get() call decl apache.get() if && < || call long.size() call long.size() call long.size() call long.size() call long.size() < if ! call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() throw new + + + call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() + decl_stmt java.util.Set final final final < = new <> while call long.size() call long.size() call long.size() call long.size() call long.size() > decl_stmt Entry = call long.pop() call long.pop() call long.pop() call long.pop() call long.pop() decl_stmt int final final = decl_stmt org.apache.lucene.queries.function.FunctionValues final final = call long.getValues() call long.getValues() call long.getValues() call long.getValues() call long.getValues() call decl apache.get() call decl apache.get() call decl apache.get() call decl apache.get() call decl apache.get() call ValueSource.add() call ValueSource.add() call ValueSource.add() call ValueSource.add() call ValueSource.add() call String.strVal() call String.strVal() call String.strVal() call String.strVal() call String.strVal() - call decl apache.get() call decl apache.get() call decl apache.get() call decl apache.get() call decl apache.get() for = < call long.size() call long.size() call long.size() call long.size() call long.size() ++ call ValueSource.add() call ValueSource.add() call ValueSource.add() call ValueSource.add() call ValueSource.add() call long.getName() call long.getName() call long.getName() call long.getName() call long.getName() decl_stmt org.apache.lucene.index.Terms final final = if != decl_stmt java.lang.String final final = decl_stmt org.apache.lucene.util.BytesRef final final if != = new else = new decl_stmt org.apache.lucene.index.TermsEnum final final = call String.iterator() call String.iterator() call String.iterator() call String.iterator() call String.iterator() decl_stmt org.apache.lucene.util.BytesRef switch call int.seekCeil() call int.seekCeil() call int.seekCeil() call int.seekCeil() call int.seekCeil() case case = call int.term() call int.term() call int.term() call int.term() call int.term() break case = break default: throw new decl_stmt org.apache.lucene.util.CharsRefBuilder final final = new for = < && != && call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) decl_stmt java.lang.String final final = call Terms.toString() call Terms.toString() call Terms.toString() call Terms.toString() call Terms.toString() if ! call ValueSource.contains() call ValueSource.contains() call ValueSource.contains() call ValueSource.contains() call ValueSource.contains() ++ = call int.next() call int.next() call int.next() call int.next() call int.next() for != && && < || call long.size() call long.size() call long.size() call long.size() call long.size() < = call int.next() call int.next() call int.next() call int.next() call int.next() call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) decl_stmt java.lang.String final final = call Terms.toString() call Terms.toString() call Terms.toString() call Terms.toString() call Terms.toString() if ! call ValueSource.contains() call ValueSource.contains() call ValueSource.contains() call ValueSource.contains() call ValueSource.contains() call long.add() call long.add() call long.add() call long.add() call long.add() else if ! call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() call org.apache.solr.schema.SchemaField.indexed() throw new + + + + decl_stmt java.util.Map final final final < = new <> while call long.size() call long.size() call long.size() call long.size() call long.size() > decl_stmt Entry final final = call long.pop() call long.pop() call long.pop() call long.pop() call long.pop() decl_stmt int final final = decl_stmt org.apache.lucene.queries.function.FunctionValues final final = call long.getValues() call long.getValues() call long.getValues() call long.getValues() call long.getValues() call decl apache.get() call decl apache.get() call decl apache.get() call decl apache.get() call decl apache.get() call TermsEnum.put() call TermsEnum.put() call TermsEnum.put() call TermsEnum.put() call TermsEnum.put() call String.strVal() call String.strVal() call String.strVal() call String.strVal() call String.strVal() - call decl apache.get() call decl apache.get() call decl apache.get() call decl apache.get() call decl apache.get() decl_stmt org.apache.lucene.index.Terms final final = if != decl_stmt java.lang.String final final = decl_stmt org.apache.lucene.util.BytesRef final final if != = new else = new decl_stmt org.apache.lucene.index.TermsEnum final final = call String.iterator() call String.iterator() call String.iterator() call String.iterator() call String.iterator() decl_stmt org.apache.lucene.util.BytesRef switch call int.seekCeil() call int.seekCeil() call int.seekCeil() call int.seekCeil() call int.seekCeil() case case = call int.term() call int.term() call int.term() call int.term() call int.term() break case = break default: throw new decl_stmt org.apache.lucene.util.CharsRefBuilder final final = new for = < && != && ++ = call int.next() call int.next() call int.next() call int.next() call int.next() for != && && < || call long.size() call long.size() call long.size() call long.size() call long.size() < = call int.next() call int.next() call int.next() call int.next() call int.next() call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) call org.apache.solr.schema.FieldType.indexedToReadable(String) decl_stmt java.lang.String final final = call Terms.toString() call Terms.toString() call Terms.toString() call Terms.toString() call Terms.toString() decl_stmt java.lang.Integer = call TermsEnum.get() call TermsEnum.get() call TermsEnum.get() call TermsEnum.get() call TermsEnum.get() if == = call long.add() call long.add() call long.add() call long.add() call long.add() if call long.add() call long.add() call long.add() call long.add() call long.add() return long public public decl_stmt long = if < ^= return long public public decl_stmt long = if < ^= return protected protected if < || == && > return else return protected protected return >