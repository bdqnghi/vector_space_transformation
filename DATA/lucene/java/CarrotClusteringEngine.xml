org.apache.solr.handler.clustering.carrot2 java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.List import java.util.Map import java.util.Map.Entry import java.util.Set import org.apache.commons.lang.ObjectUtils import org.apache.commons.lang.StringUtils import org.apache.lucene.search.Query import org.apache.solr.common.SolrDocument import org.apache.solr.common.SolrDocumentList import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.params.HighlightParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.core.SolrCore import org.apache.solr.handler.clustering.ClusteringEngine import org.apache.solr.handler.clustering.SearchClusteringEngine import org.apache.solr.handler.component.HighlightComponent import org.apache.solr.highlight.SolrHighlighter import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.request.SolrQueryRequest import org.apache.solr.schema.SchemaField import org.apache.solr.search.DocList import org.apache.solr.search.DocSlice import org.apache.solr.search.SolrIndexSearcher import org.carrot2.core.Cluster import org.carrot2.core.Controller import org.carrot2.core.ControllerFactory import org.carrot2.core.Document import org.carrot2.core.IClusteringAlgorithm import org.carrot2.core.LanguageCode import org.carrot2.core.attribute.AttributeNames import org.carrot2.text.linguistic.DefaultLexicalDataFactoryDescriptor import org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor import org.carrot2.text.preprocessing.pipeline.BasicPreprocessingPipelineDescriptor.AttributeBuilder import org.carrot2.util.attribute.AttributeValueSet import org.carrot2.util.attribute.AttributeValueSets import org.carrot2.util.resource.ClassLoaderLocator import org.carrot2.util.resource.IResource import org.carrot2.util.resource.ResourceLookup import org.slf4j.Logger import org.slf4j.LoggerFactory import com.google.common.base.Objects import com.google.common.base.Strings import com.google.common.collect.Lists import com.google.common.collect.Maps import com.google.common.collect.Sets import class org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine super super extends String Logger SolrCore String Controller decl Class String public public return != ResourceLookup AttributeValueSet SchemaField String AttributeBuilder AttributeValueSets decl HashMap String decl IResource SolrParams ClassLoader String Thread public public final final = decl_stmt java.lang.String = decl_stmt org.apache.solr.common.params.SolrParams final final = decl_stmt HashMap < = new <> decl_stmt ResourceLookup = new new new call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() try = call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() catch if ! instanceof throw decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + if ! decl_stmt IResource = call ResourceLookup.getAll() call ResourceLookup.getAll() call ResourceLookup.getAll() call ResourceLookup.getAll() call ResourceLookup.getAll() + if > if > call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + decl_stmt java.lang.Thread = decl_stmt java.lang.ClassLoader = call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() try call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() decl_stmt AttributeValueSets = decl_stmt AttributeValueSet = call AttributeValueSets.getDefaultAttributeValueSet() call AttributeValueSets.getDefaultAttributeValueSet() call AttributeValueSets.getDefaultAttributeValueSet() call AttributeValueSets.getDefaultAttributeValueSet() call AttributeValueSets.getDefaultAttributeValueSet() call decl HashMap.putAll() call decl HashMap.putAll() call decl HashMap.putAll() call decl HashMap.putAll() call decl HashMap.putAll() call AttributeValueSet.getAttributeValues() call AttributeValueSet.getAttributeValues() call AttributeValueSet.getAttributeValues() call AttributeValueSet.getAttributeValues() call AttributeValueSet.getAttributeValues() catch throw new + finally call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) decl_stmt AttributeBuilder final final = call AttributeBuilder.lexicalDataFactory() call AttributeBuilder.lexicalDataFactory() call AttributeBuilder.lexicalDataFactory() call AttributeBuilder.lexicalDataFactory() call AttributeBuilder.lexicalDataFactory() if ! call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.containsKey() call AttributeBuilder.tokenizerFactory() call AttributeBuilder.tokenizerFactory() call AttributeBuilder.tokenizerFactory() call AttributeBuilder.tokenizerFactory() call AttributeBuilder.tokenizerFactory() if ! call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.containsKey() call decl HashMap.containsKey() call AttributeBuilder.stemmerFactory() call AttributeBuilder.stemmerFactory() call AttributeBuilder.stemmerFactory() call AttributeBuilder.stemmerFactory() call AttributeBuilder.stemmerFactory() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() decl_stmt java.lang.Thread = decl_stmt java.lang.ClassLoader = call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() try call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() finally call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() call org.apache.solr.core.SolrCore.getLatestSchema() if == throw new + = call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() call org.apache.solr.schema.SchemaField.getName() return ClassLoader decl Map decl List Thread public public < try decl_stmt java.util.Map < = new <> decl_stmt java.util.List < = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt java.lang.Thread = decl_stmt java.lang.ClassLoader = call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() call java.lang.Thread.getContextClassLoader() try call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() return call Controller.process() call Controller.process() call Controller.process() call Controller.process() call Controller.process() finally call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) call java.lang.Thread.setContextClassLoader(ClassLoader) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new SolrParams decl HashSet String protected < protected < decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt java.util.HashSet < = call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() return SolrParams String String decl Set private < private < decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() if throw new + decl_stmt java.util.Set final final final < = call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) return boolean LanguageCode decl String decl List decl String String decl NamedList String SolrHighlighter decl Iterator decl NamedList SolrQueryRequest String decl String String decl Map SolrCore decl Map decl float decl int DocList String decl Map decl Collection SolrDocument SolrParams String Document StringBuilder Query private < private < < final final throws decl_stmt org.apache.solr.highlight.SolrHighlighter = decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt org.apache.solr.core.SolrCore = decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt java.util.Map < = decl_stmt java.util.Map < = if for : call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt java.lang.String final final final = if == && && call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + + decl_stmt boolean = call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) decl_stmt org.apache.solr.request.SolrQueryRequest = decl_stmt java.lang.String = if = if != decl_stmt java.util.Map < = = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) call org.apache.solr.common.params.SolrParams.getInt(String) = new public public return else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() = decl_stmt java.util.Iterator < = decl_stmt java.util.List < = new <> decl_stmt float = decl_stmt int = new decl_stmt org.apache.lucene.search.Query = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.apache.solr.common.SolrDocument = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.lang.String = if && != = decl_stmt org.apache.solr.search.DocList = new decl_stmt org.apache.solr.common.util.NamedList < = call SolrHighlighter.doHighlighting() call SolrHighlighter.doHighlighting() call SolrHighlighter.doHighlighting() call SolrHighlighter.doHighlighting() call SolrHighlighter.doHighlighting() if != && call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() call decl NamedList.size() == decl_stmt org.apache.solr.common.util.NamedList < = < call decl NamedList.getVal() call decl NamedList.getVal() call decl NamedList.getVal() call decl NamedList.getVal() call decl NamedList.getVal() decl_stmt java.lang.StringBuilder final final = new for = < ++ decl_stmt java.lang.String = call decl NamedList.get() call decl NamedList.get() call decl NamedList.get() call decl NamedList.get() call decl NamedList.get() if != && > for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if == = decl_stmt org.apache.lucene.document.Document = new call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call Document.setField() call Document.setField() call Document.setField() call Document.setField() call Document.setField() call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) if decl_stmt java.util.Collection < = call org.apache.solr.common.SolrDocument.getFieldValues(String) call org.apache.solr.common.SolrDocument.getFieldValues(String) call org.apache.solr.common.SolrDocument.getFieldValues(String) call org.apache.solr.common.SolrDocument.getFieldValues(String) call org.apache.solr.common.SolrDocument.getFieldValues(String) if != for : decl_stmt java.lang.String = if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) > = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) decl_stmt LanguageCode final final = if != call Document.setLanguage() call Document.setLanguage() call Document.setLanguage() call Document.setLanguage() call Document.setLanguage() break if != for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call Document.setField() call Document.setField() call Document.setField() call Document.setField() call Document.setField() call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call org.apache.solr.common.SolrDocument.getFieldValue(String) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return < extends extends < extends extends return decl Map decl String decl String private < private < decl_stmt java.util.Map < = decl_stmt java.lang.String = if != = for : decl_stmt java.lang.String = if == && && call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + + return decl Collection decl Iterator StringBuilder private private decl_stmt java.lang.StringBuilder = new for : decl_stmt java.util.Collection < = if == continue decl_stmt java.util.Iterator < = call decl Collection.iterator() call decl Collection.iterator() call decl Collection.iterator() call decl Collection.iterator() call decl Collection.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl List private < < private < < < decl_stmt java.util.List < < = return decl List decl List decl List decl NamedList Double decl List private private < < < for : decl_stmt org.apache.solr.common.util.NamedList < = new <> decl_stmt java.util.List < = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > = call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt java.lang.Double final final = if != call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() if call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() decl_stmt java.util.List < = : decl_stmt java.util.List < = call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if && ! decl_stmt java.util.List < < = call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() String private private < for < = decl_stmt java.lang.String = if !