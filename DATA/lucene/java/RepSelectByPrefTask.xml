org.apache.lucene.benchmark.byTask.tasks java.util.List import org.apache.lucene.benchmark.byTask.PerfRunData import org.apache.lucene.benchmark.byTask.stats.Report import org.apache.lucene.benchmark.byTask.stats.TaskStats import class org.apache.lucene.benchmark.byTask.tasks.RepSelectByPrefTask super super extends Report public public throws decl_stmt org.apache.lucene.benchmark.byTask.stats.Report = + + + call org.apache.lucene.benchmark.byTask.stats.Report.getSize() call org.apache.lucene.benchmark.byTask.stats.Report.getSize() call org.apache.lucene.benchmark.byTask.stats.Report.getSize() call org.apache.lucene.benchmark.byTask.stats.Report.getSize() call org.apache.lucene.benchmark.byTask.stats.Report.getSize() + + call Report.getReported() call Report.getReported() call Report.getReported() call Report.getReported() call Report.getReported() + + call org.apache.lucene.benchmark.byTask.stats.Report.getOutOf() call org.apache.lucene.benchmark.byTask.stats.Report.getOutOf() call org.apache.lucene.benchmark.byTask.stats.Report.getOutOf() call org.apache.lucene.benchmark.byTask.stats.Report.getOutOf() call org.apache.lucene.benchmark.byTask.stats.Report.getOutOf() + call org.apache.lucene.benchmark.byTask.stats.Report.getText() call org.apache.lucene.benchmark.byTask.stats.Report.getText() call org.apache.lucene.benchmark.byTask.stats.Report.getText() call org.apache.lucene.benchmark.byTask.stats.Report.getText() call org.apache.lucene.benchmark.byTask.stats.Report.getText() return String int String StringBuilder String boolean protected protected < decl_stmt java.lang.String = decl_stmt boolean = decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int = for final final : if >= && ++ if ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = decl_stmt java.lang.String = if > && == = call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = == : call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return new