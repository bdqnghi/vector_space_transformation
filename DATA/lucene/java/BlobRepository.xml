org.apache.solr.core static static org.apache.solr.common.SolrException.ErrorCode.SERVICE_UNAVAILABLE import static static org.apache.solr.common.cloud.ZkStateReader.BASE_URL_PROP import java.io.ByteArrayInputStream import java.io.IOException import java.io.InputStream import java.lang.invoke.MethodHandles import java.nio.ByteBuffer import java.util.ArrayList import java.util.Collections import java.util.HashSet import java.util.List import java.util.Map import java.util.Random import java.util.Set import java.util.concurrent.ConcurrentHashMap import java.util.zip.ZipEntry import java.util.zip.ZipInputStream import org.apache.http.HttpResponse import org.apache.http.client.HttpClient import org.apache.http.client.methods.HttpGet import org.apache.solr.client.solrj.impl.HttpClientUtil import org.apache.solr.common.SolrException import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.DocCollection import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.handler.admin.CollectionsHandler import org.apache.solr.util.CryptoKeys import org.apache.solr.util.SimplePostTool import org.apache.zookeeper.server.ByteBufferInputStream import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.core.BlobRepository Random CoreContainer Logger decl Map ZipInputStream decl BAOS ByteArrayInputStream ZipEntry decl SimplePostTool decl byte public static public static throws decl_stmt ByteArrayInputStream = new decl_stmt java.util.zip.ZipInputStream = new try decl_stmt java.util.zip.ZipEntry while = call java.util.zip.ZipInputStream.getNextEntry() call java.util.zip.ZipInputStream.getNextEntry() call java.util.zip.ZipInputStream.getNextEntry() call java.util.zip.ZipInputStream.getNextEntry() call java.util.zip.ZipInputStream.getNextEntry() != if == || call java.util.zip.ZipEntry.getName() call java.util.zip.ZipEntry.getName() call java.util.zip.ZipEntry.getName() call java.util.zip.ZipEntry.getName() call java.util.zip.ZipEntry.getName() decl_stmt BAOS = new decl_stmt byte = new decl_stmt int while = call java.util.zip.ZipInputStream.read(byte,int,int) call java.util.zip.ZipInputStream.read(byte,int,int) call java.util.zip.ZipInputStream.read(byte,int,int) call java.util.zip.ZipInputStream.read(byte,int,int) call java.util.zip.ZipInputStream.read(byte,int,int) != - call decl SimplePostTool.write() call decl SimplePostTool.write() call decl SimplePostTool.write() call decl SimplePostTool.write() call decl SimplePostTool.write() call decl SimplePostTool.close() call decl SimplePostTool.close() call decl SimplePostTool.close() call decl SimplePostTool.close() call decl SimplePostTool.close() return call decl SimplePostTool.getByteBuffer() call decl SimplePostTool.getByteBuffer() call decl SimplePostTool.getByteBuffer() call decl SimplePostTool.getByteBuffer() call decl SimplePostTool.getByteBuffer() finally call java.util.zip.ZipInputStream.closeEntry() call java.util.zip.ZipInputStream.closeEntry() call java.util.zip.ZipInputStream.closeEntry() call java.util.zip.ZipInputStream.closeEntry() call java.util.zip.ZipInputStream.closeEntry() return int BlobContent ByteBuffer String HttpResponse Replica HttpGet BlobContentRef HttpClient public public decl_stmt BlobContent = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == if decl_stmt org.apache.solr.common.cloud.Replica = decl_stmt java.lang.String = call Replica.getStr() call Replica.getStr() call Replica.getStr() call Replica.getStr() call Replica.getStr() + + + decl_stmt sun.net.www.http.HttpClient = call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() decl_stmt HttpGet = new decl_stmt ByteBuffer try decl_stmt HttpResponse = call HttpClient.execute() call HttpClient.execute() call HttpClient.execute() call HttpClient.execute() call HttpClient.execute() decl_stmt int = call HttpResponse.getStatusLine() call HttpResponse.getStatusLine() call HttpResponse.getStatusLine() call HttpResponse.getStatusLine() call HttpResponse.getStatusLine() if != throw new + = call HttpResponse.getEntity() call HttpResponse.getEntity() call HttpResponse.getEntity() call HttpResponse.getEntity() call HttpResponse.getEntity() catch if instanceof throw else throw new + finally call HttpGet.releaseConnection() call HttpGet.releaseConnection() call HttpGet.releaseConnection() call HttpGet.releaseConnection() call HttpGet.releaseConnection() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = new else throw new decl_stmt BlobContentRef = new synchronized call BlobContent.references() call BlobContent.references() call BlobContent.references() call BlobContent.references() call BlobContent.references() call BlobContent.references() call BlobContent.references() call BlobContent.references() call BlobContent.references() return decl List decl ArrayList DocCollection Replica ClusterState ZkStateReader private private decl_stmt org.apache.solr.common.cloud.ZkStateReader = decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) if == throw new decl_stmt java.util.ArrayList < = new <> call org.apache.solr.common.cloud.DocCollection.getActiveSlices() call org.apache.solr.common.cloud.DocCollection.getActiveSlices() call org.apache.solr.common.cloud.DocCollection.getActiveSlices() call org.apache.solr.common.cloud.DocCollection.getActiveSlices() call org.apache.solr.common.cloud.DocCollection.getActiveSlices() if call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() throw new decl_stmt org.apache.solr.common.cloud.Replica = for : decl_stmt java.util.List < = new <> for : if == if call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() = break else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if == throw new return public public if == return synchronized if ! call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() if call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() Object public < public < < if == synchronized if == = new <> decl_stmt java.lang.Object = if != return = new return public public return