org.apache.solr.response java.io.ByteArrayInputStream import java.io.ByteArrayOutputStream import java.io.IOException import java.io.InputStream import java.io.OutputStream import java.io.Writer import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Iterator import java.util.List import org.apache.lucene.index.IndexableField import org.apache.solr.client.solrj.impl.BinaryResponseParser import org.apache.solr.common.SolrDocument import org.apache.solr.common.params.CommonParams import org.apache.solr.common.util.JavaBinCodec import org.apache.solr.common.util.NamedList import org.apache.solr.request.SolrQueryRequest import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.SchemaField import org.apache.solr.search.DocList import org.apache.solr.search.ReturnFields import org.apache.solr.search.SolrIndexSearcher import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.response.BinaryResponseWriter super super implements Logger Boolean Resolver public public throws decl_stmt javax.naming.spi.Resolver = new decl_stmt java.lang.Boolean = if != && new public public throws throw new public public return public public ResultContext IndexableField ResultContext SchemaField ReturnFields public public throws if instanceof decl_stmt ReturnFields = decl_stmt org.apache.solr.response.ResultContext = if call ResultContext.getReturnFields() call ResultContext.getReturnFields() call ResultContext.getReturnFields() call ResultContext.getReturnFields() call ResultContext.getReturnFields() != = call ResultContext.getReturnFields() call ResultContext.getReturnFields() call ResultContext.getReturnFields() call ResultContext.getReturnFields() call ResultContext.getReturnFields() = return if instanceof decl_stmt org.apache.solr.response.ResultContext = new return if instanceof if == = decl_stmt org.apache.lucene.index.IndexableField = decl_stmt org.apache.solr.schema.SchemaField = call org.apache.lucene.index.IndexableField.name() call org.apache.lucene.index.IndexableField.name() call org.apache.lucene.index.IndexableField.name() call org.apache.lucene.index.IndexableField.name() call org.apache.lucene.index.IndexableField.name() try = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return public public return public public return decl Iterator SolrDocument protected protected throws decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.apache.solr.common.SolrDocument = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() Float List public public throws decl_stmt java.util.List = new call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) long call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) long decl_stmt java.lang.Float = if = call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) call java.util.List.add(String) InputStream Resolver ByteArrayOutputStream public static < public static < try decl_stmt javax.naming.spi.Resolver = new decl_stmt java.io.ByteArrayOutputStream = new new decl_stmt java.io.InputStream = new call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() return < new catch throw new