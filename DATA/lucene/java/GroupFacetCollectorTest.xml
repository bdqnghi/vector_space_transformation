org.apache.lucene.search.grouping java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.Comparator import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Locale import java.util.Map import java.util.NavigableSet import java.util.Random import java.util.Set import java.util.TreeSet import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.FieldType import org.apache.lucene.document.SortedDocValuesField import org.apache.lucene.document.SortedSetDocValuesField import org.apache.lucene.document.StringField import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.NoMergePolicy import org.apache.lucene.index.RandomIndexWriter import org.apache.lucene.index.Term import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.MatchAllDocsQuery import org.apache.lucene.search.TermQuery import org.apache.lucene.search.grouping.term.TermGroupFacetCollector import org.apache.lucene.store.Directory import org.apache.lucene.util.BytesRef import org.apache.lucene.util.TestUtil import class org.apache.lucene.search.grouping.GroupFacetCollectorTest super super extends boolean Document FieldType AbstractGroupFacetCollector decl TermGroupFacetCollector IndexSearcher int String RandomIndexWriter decl List decl GroupedFacetResult Directory AbstractGroupFacetCollector public public throws decl_stmt java.lang.String final final = decl_stmt org.apache.solr.schema.FieldType = new call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.RandomIndexWriter = new new decl_stmt boolean = decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() = new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) decl_stmt org.apache.lucene.search.IndexSearcher = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() decl_stmt java.util.List < decl_stmt org.apache.lucene.search.grouping.AbstractGroupFacetCollector decl_stmt GroupedFacetResult for : new = : : call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new decl_stmt int = = call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) == : + call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() = call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.search.grouping.AbstractGroupFacetCollector = : : call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new decl_stmt GroupedFacetResult = call int.mergeSegmentResults() call int.mergeSegmentResults() call int.mergeSegmentResults() call int.mergeSegmentResults() call int.mergeSegmentResults() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() = call AbstractGroupFacetCollector.getFacetEntries() call AbstractGroupFacetCollector.getFacetEntries() call AbstractGroupFacetCollector.getFacetEntries() call AbstractGroupFacetCollector.getFacetEntries() call AbstractGroupFacetCollector.getFacetEntries() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = new if call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() = : : ! call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new = call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) = call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = : : call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new = call int.mergeSegmentResults() call int.mergeSegmentResults() call int.mergeSegmentResults() call int.mergeSegmentResults() call int.mergeSegmentResults() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() = call AbstractGroupFacetCollector.getFacetEntries() call AbstractGroupFacetCollector.getFacetEntries() call AbstractGroupFacetCollector.getFacetEntries() call AbstractGroupFacetCollector.getFacetEntries() call AbstractGroupFacetCollector.getFacetEntries() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() = : : call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new = call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) = call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() if call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = : : call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new = call int.mergeSegmentResults() call int.mergeSegmentResults() call int.mergeSegmentResults() call int.mergeSegmentResults() call int.mergeSegmentResults() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.getTotalMissingCount() = call AbstractGroupFacetCollector.getFacetEntries() call AbstractGroupFacetCollector.getFacetEntries() call AbstractGroupFacetCollector.getFacetEntries() call AbstractGroupFacetCollector.getFacetEntries() call AbstractGroupFacetCollector.getFacetEntries() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() boolean Document FieldType decl TermGroupFacetCollector IndexSearcher String RandomIndexWriter decl GroupedFacetResult Directory AbstractGroupFacetCollector public public throws decl_stmt java.lang.String final final = decl_stmt org.apache.solr.schema.FieldType = new call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) call org.apache.solr.schema.FieldType.setStored(boolean) decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.RandomIndexWriter = new new decl_stmt boolean = call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) call org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean) decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) call org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query) new new = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.commit() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() decl_stmt org.apache.lucene.search.IndexSearcher = decl_stmt org.apache.lucene.search.grouping.AbstractGroupFacetCollector = + call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new decl_stmt GroupedFacetResult = call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() decl_stmt java.util.List < = call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl GroupedFacetResult.size() call decl GroupedFacetResult.size() call decl GroupedFacetResult.size() call decl GroupedFacetResult.size() call decl GroupedFacetResult.size() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() private private assert new + new GroupedFacetResult int boolean decl TermGroupFacetCollector decl GroupedFacetResult decl TermGroupFacetCollector String int int int decl List String String boolean int IndexSearcher int AbstractGroupFacetCollector decl List Random int int IndexContext int public public throws decl_stmt java.util.Random = decl_stmt int = for = < ++ decl_stmt boolean = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt IndexContext = decl_stmt org.apache.lucene.search.IndexSearcher final final = if + for = < ++ if + decl_stmt java.lang.String = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() - decl_stmt int = + decl_stmt int = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() : call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + / decl_stmt boolean = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() decl_stmt java.lang.String = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() call IndexContext.facetValues() decl_stmt java.lang.String final final if == = else decl_stmt int = call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.codePointCount(int,int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) if == - = else decl_stmt int = call java.lang.String.offsetByCodePoints(int,int) call java.lang.String.offsetByCodePoints(int,int) call java.lang.String.offsetByCodePoints(int,int) call java.lang.String.offsetByCodePoints(int,int) call java.lang.String.offsetByCodePoints(int,int) = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() : call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt GroupedFacetResult = decl_stmt org.apache.lucene.search.grouping.AbstractGroupFacetCollector = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new decl_stmt GroupedFacetResult = call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) call org.apache.lucene.search.grouping.AbstractGroupFacetCollector.mergeSegmentResults(int,int,boolean) decl_stmt java.util.List < = call GroupedFacetResult.getFacetEntries() call GroupedFacetResult.getFacetEntries() call GroupedFacetResult.getFacetEntries() call GroupedFacetResult.getFacetEntries() call GroupedFacetResult.getFacetEntries() decl_stmt java.util.List < = call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() call decl TermGroupFacetCollector.getFacetEntries() if + call AbstractGroupFacetCollector.getClass() call AbstractGroupFacetCollector.getClass() call AbstractGroupFacetCollector.getClass() call AbstractGroupFacetCollector.getClass() call AbstractGroupFacetCollector.getClass() + + + + + + + + + + + + call GroupedFacetResult.getTotalCount() call GroupedFacetResult.getTotalCount() call GroupedFacetResult.getTotalCount() call GroupedFacetResult.getTotalCount() call GroupedFacetResult.getTotalCount() + call GroupedFacetResult.getTotalMissingCount() call GroupedFacetResult.getTotalMissingCount() call GroupedFacetResult.getTotalMissingCount() call GroupedFacetResult.getTotalMissingCount() call GroupedFacetResult.getTotalMissingCount() decl_stmt int = for : ++ call int.getValue() call int.getValue() call int.getValue() call int.getValue() call int.getValue() call int.getCount() call int.getCount() call int.getCount() call int.getCount() call int.getCount() + call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() + call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() = for : ++ call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getCount() call decl TermGroupFacetCollector.getCount() call decl TermGroupFacetCollector.getCount() call decl TermGroupFacetCollector.getCount() call decl TermGroupFacetCollector.getCount() call GroupedFacetResult.getTotalCount() call GroupedFacetResult.getTotalCount() call GroupedFacetResult.getTotalCount() call GroupedFacetResult.getTotalCount() call GroupedFacetResult.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call decl TermGroupFacetCollector.getTotalCount() call GroupedFacetResult.getTotalMissingCount() call GroupedFacetResult.getTotalMissingCount() call GroupedFacetResult.getTotalMissingCount() call GroupedFacetResult.getTotalMissingCount() call GroupedFacetResult.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl TermGroupFacetCollector.getTotalMissingCount() call decl GroupedFacetResult.size() call decl GroupedFacetResult.size() call decl GroupedFacetResult.size() call decl GroupedFacetResult.size() call decl GroupedFacetResult.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < call decl GroupedFacetResult.size() call decl GroupedFacetResult.size() call decl GroupedFacetResult.size() call decl GroupedFacetResult.size() call decl GroupedFacetResult.size() ++ decl_stmt FacetEntry = call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() call decl GroupedFacetResult.get() decl_stmt FacetEntry = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + + + call int.getValue() call int.getValue() call int.getValue() call int.getValue() call int.getValue() + + call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getValue() call int.getValue() call int.getValue() call int.getValue() call int.getValue() call int.getValue() call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getValue() call decl TermGroupFacetCollector.getValue() + + + call int.getCount() call int.getCount() call int.getCount() call int.getCount() call int.getCount() + + call decl TermGroupFacetCollector.getCount() call decl TermGroupFacetCollector.getCount() call decl TermGroupFacetCollector.getCount() call decl TermGroupFacetCollector.getCount() call decl TermGroupFacetCollector.getCount() call int.getCount() call int.getCount() call int.getCount() call int.getCount() call int.getCount() call decl TermGroupFacetCollector.getCount() call decl TermGroupFacetCollector.getCount() call decl TermGroupFacetCollector.getCount() call decl TermGroupFacetCollector.getCount() call decl TermGroupFacetCollector.getCount() call IndexContext.indexReader() call IndexContext.indexReader() call IndexContext.indexReader() call IndexContext.indexReader() call IndexContext.indexReader() call IndexContext.indexReader() call IndexContext.indexReader() call IndexContext.indexReader() call IndexContext.indexReader() call IndexContext.dir() call IndexContext.dir() call IndexContext.dir() call IndexContext.dir() call IndexContext.dir() call IndexContext.dir() call IndexContext.dir() call IndexContext.dir() call IndexContext.dir() decl Map int String Random decl List Field int decl NavigableSet Field RandomIndexWriter Field Document DirectoryReader Document decl List decl Field int int decl Map Document Document decl String String String decl Set decl List Directory private private throws decl_stmt java.util.Random final final = decl_stmt int final final = * decl_stmt int final final = / decl_stmt int final final = / if + + + decl_stmt java.util.List final final final < = new <> for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.util.List final final final < = new <> for = < ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.lang.String final final final = new if for = < ++ = if + decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.index.RandomIndexWriter = new new decl_stmt org.apache.lucene.document.Document = new decl_stmt org.apache.lucene.document.Document = new decl_stmt org.apache.lucene.document.Document = new decl_stmt org.apache.lucene.document.Document = new decl_stmt org.apache.solr.handler.dataimport.config.Field = decl_stmt org.apache.solr.handler.dataimport.config.Field = new new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) decl_stmt org.apache.solr.handler.dataimport.config.Field if == = new = call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) = new new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) else = new + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) : new for = < ++ = new new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) decl_stmt org.apache.solr.handler.dataimport.config.Field = call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) decl_stmt java.util.NavigableSet < = new <> new < public public if == return else if == return - else if == return else return decl_stmt java.util.Map < < < = new <> decl_stmt int = for = < ++ decl_stmt java.lang.String final final if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == = else = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.lang.String = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < < decl_stmt java.util.Map < < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.util.List < = new <> if == decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl NavigableSet.add() call decl NavigableSet.add() call decl NavigableSet.add() call decl NavigableSet.add() call decl NavigableSet.add() if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > = call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else for : decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl NavigableSet.add() call decl NavigableSet.add() call decl NavigableSet.add() call decl NavigableSet.add() call decl NavigableSet.add() if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > = call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if + + + == : + + if != call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) new call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) else call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) call org.apache.solr.handler.dataimport.config.Field.setBytesValue(byte) new call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) call org.apache.solr.handler.dataimport.config.Field.setStringValue(String) if == && call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) else if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) else if == call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) else call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) decl_stmt org.apache.lucene.index.DirectoryReader = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() return new public public if == return else if == return - else if == return else return int int decl Set int decl Map int decl List decl Set decl List int private private final final decl_stmt java.util.Map < < = if == = new <> decl_stmt int = decl_stmt int = decl_stmt java.util.Set < if != = new <> for : if != && call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else = decl_stmt java.util.List < = new <> call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for : if == continue decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt int = != call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() : if >= call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new new += if == decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != = call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() new < public public if decl_stmt int = - if != return return decl_stmt int = + decl_stmt java.util.List < if >= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = else if >= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() else = call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() return new int public public if decl_stmt int = - if != return return BytesRef private private decl_stmt org.apache.lucene.util.BytesRef = == : new return int private private < decl_stmt int = for : if ++ == return return public public return public public return public < public < return