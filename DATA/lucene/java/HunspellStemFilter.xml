org.apache.lucene.analysis.hunspell java.io.IOException import java.util.Collections import java.util.Comparator import java.util.List import org.apache.lucene.analysis.TokenFilter import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.KeywordAttribute import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import org.apache.lucene.util.CharsRef import class org.apache.lucene.analysis.hunspell.HunspellStemFilter super super extends KeywordAttribute PositionIncrementAttribute boolean State decl Comparator decl List CharTermAttribute Stemmer boolean CharsRef CharsRef public public throws if != && ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() decl_stmt org.apache.lucene.util.CharsRef = call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() return if ! return if call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() call org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword() return = call org.apache.lucene.analysis.hunspell.Stemmer.uniqueStems(char,int) call org.apache.lucene.analysis.hunspell.Stemmer.uniqueStems(char,int) call org.apache.lucene.analysis.hunspell.Stemmer.uniqueStems(char,int) call org.apache.lucene.analysis.hunspell.Stemmer.uniqueStems(char,int) call org.apache.lucene.analysis.hunspell.Stemmer.uniqueStems(char,int) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() : call org.apache.lucene.analysis.hunspell.Stemmer.stem(char,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean) call org.apache.lucene.analysis.hunspell.Stemmer.stem(char,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean) call org.apache.lucene.analysis.hunspell.Stemmer.stem(char,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean) call org.apache.lucene.analysis.hunspell.Stemmer.stem(char,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean) call org.apache.lucene.analysis.hunspell.Stemmer.stem(char,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean) call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return if && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt org.apache.lucene.util.CharsRef = call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() call org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty() if call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() else if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() = return public public throws = int public public decl_stmt int = if == return else return