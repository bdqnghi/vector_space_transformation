org.apache.solr.search java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.LinkedHashMap import java.util.LinkedList import java.util.List import java.util.Map import java.util.Set import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.core.StopFilterFactory import org.apache.lucene.analysis.util.TokenFilterFactory import org.apache.lucene.index.Term import org.apache.lucene.queries.function.BoostedQuery import org.apache.lucene.queries.function.FunctionQuery import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.queries.function.valuesource.ProductFloatFunction import org.apache.lucene.queries.function.valuesource.QueryValueSource import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.BoostQuery import org.apache.lucene.search.DisjunctionMaxQuery import org.apache.lucene.search.MatchAllDocsQuery import org.apache.lucene.search.MultiPhraseQuery import org.apache.lucene.search.PhraseQuery import org.apache.lucene.search.Query import org.apache.solr.analysis.TokenizerChain import org.apache.solr.common.params.DisMaxParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.parser.QueryParser import org.apache.solr.parser.SolrQueryParserBase.MagicFieldName import org.apache.solr.request.SolrQueryRequest import org.apache.solr.schema.FieldType import org.apache.solr.util.SolrPluginUtils import com.google.common.base.Function import com.google.common.collect.Multimap import com.google.common.collect.Multimaps import class org.apache.solr.search.ExtendedDismaxQParser super super extends String Query decl Function decl Function RuntimeException Query decl List ExtendedDismaxConfiguration boolean public public return public public return decl Builder String decl List QParser String decl BooleanQuery ExtendedSolrQueryParser decl List Query decl List public public throws = decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() = decl_stmt java.lang.String = = if == || call decl Builder.trim() call decl Builder.trim() call decl Builder.trim() call decl Builder.trim() call decl Builder.trim() == if != decl_stmt org.apache.solr.search.QParser = = call String.getQuery() call String.getQuery() call String.getQuery() call String.getQuery() call String.getQuery() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() else return else decl_stmt ExtendedSolrQueryParser = call QParser.addAlias() call QParser.addAlias() call QParser.addAlias() call QParser.addAlias() call QParser.addAlias() call QParser.setPhraseSlop() call QParser.setPhraseSlop() call QParser.setPhraseSlop() call QParser.setPhraseSlop() call QParser.setPhraseSlop() call QParser.setAllowLeadingWildcard() call QParser.setAllowLeadingWildcard() call QParser.setAllowLeadingWildcard() call QParser.setAllowLeadingWildcard() call QParser.setAllowLeadingWildcard() decl_stmt java.util.List < = decl_stmt java.lang.String = = = if == = call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() = for : call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() decl_stmt java.util.List < = for : call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() decl_stmt org.apache.lucene.search.Query = call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() decl_stmt java.util.List < = if call Query.size() call Query.size() call Query.size() call Query.size() call Query.size() > decl_stmt org.apache.lucene.queries.function.ValueSource = new call Query.toArray() call Query.toArray() call Query.toArray() call Query.toArray() call Query.toArray() new call Query.size() call Query.size() call Query.size() call Query.size() call Query.size() = new else if call Query.size() call Query.size() call Query.size() call Query.size() call Query.size() == = new call Query.get() call Query.get() call Query.get() call Query.get() call Query.get() return decl List decl Multimap String decl List decl Multimap protected protected < throws decl_stmt java.util.List < = call ExtendedDismaxConfiguration.getAllPhraseFields() call ExtendedDismaxConfiguration.getAllPhraseFields() call ExtendedDismaxConfiguration.getAllPhraseFields() call ExtendedDismaxConfiguration.getAllPhraseFields() call ExtendedDismaxConfiguration.getAllPhraseFields() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt java.util.List < = new <> for : if != || continue if decl_stmt java.lang.String = if || || || continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt Multimap < = for < < : call decl Multimap.asMap() call decl Multimap.asMap() call decl Multimap.asMap() call decl Multimap.asMap() call decl Multimap.asMap() decl_stmt Multimap < = for < < : call decl Multimap.asMap() call decl Multimap.asMap() call decl Multimap.asMap() call decl Multimap.asMap() call decl Multimap.asMap() protected protected return new protected protected return new Query decl BooleanQuery protected protected throws decl_stmt org.apache.lucene.search.Query = if instanceof decl_stmt org.apache.lucene.util.fst.Builder = new = call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() return Query protected protected < decl_stmt org.apache.lucene.search.Query = try ! = = if = catch = if == return if instanceof = return protected protected return && StringBuilder String Float boolean private private < decl_stmt java.lang.StringBuilder = new for : decl_stmt boolean = decl_stmt java.lang.String = if ! && || || = if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if != decl_stmt java.lang.Float = call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() StringBuilder String Clause protected protected < decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt Clause = decl_stmt java.lang.String = if && > && + < if = else if = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() ValueSource Query decl List protected < protected < throws decl_stmt java.util.List < = new <> if call ExtendedDismaxConfiguration.hasMultiplicativeBoosts() call ExtendedDismaxConfiguration.hasMultiplicativeBoosts() call ExtendedDismaxConfiguration.hasMultiplicativeBoosts() call ExtendedDismaxConfiguration.hasMultiplicativeBoosts() call ExtendedDismaxConfiguration.hasMultiplicativeBoosts() for : if == || == continue decl_stmt org.apache.lucene.search.Query = decl_stmt org.apache.lucene.queries.function.ValueSource if instanceof = else = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return Query Float decl Map decl List protected < protected < throws decl_stmt java.util.List < = new <> if call ExtendedDismaxConfiguration.hasBoostFunctions() call ExtendedDismaxConfiguration.hasBoostFunctions() call ExtendedDismaxConfiguration.hasBoostFunctions() call ExtendedDismaxConfiguration.hasBoostFunctions() call ExtendedDismaxConfiguration.hasBoostFunctions() for : if == || continue decl_stmt java.util.Map < = for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt org.apache.lucene.search.Query = decl_stmt java.lang.Float = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != && call java.lang.Float.floatValue() call java.lang.Float.floatValue() call java.lang.Float.floatValue() call java.lang.Float.floatValue() call java.lang.Float.floatValue() != = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return Query decl List protected < protected < throws decl_stmt java.util.List < = new <> if call ExtendedDismaxConfiguration.hasBoostParams() call ExtendedDismaxConfiguration.hasBoostParams() call ExtendedDismaxConfiguration.hasBoostParams() call ExtendedDismaxConfiguration.hasBoostParams() call ExtendedDismaxConfiguration.hasBoostParams() for : if == continue decl_stmt org.apache.lucene.search.Query = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return String decl Map decl Iterator String String private private decl_stmt java.util.Iterator < = call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt java.lang.String = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) && call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - decl_stmt java.lang.String = call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() decl_stmt java.util.Map < = if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == return StringBuilder ExtendedSolrQueryParser int Query protected protected final final final final final final final final < final final final < final final final final throws if == || || == || < return if == = decl_stmt int final final = - decl_stmt java.lang.StringBuilder = new for = < - ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = <= ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt ExtendedSolrQueryParser = call ExtendedSolrQueryParser.addAlias() call ExtendedSolrQueryParser.addAlias() call ExtendedSolrQueryParser.addAlias() call ExtendedSolrQueryParser.addAlias() call ExtendedSolrQueryParser.addAlias() call ExtendedSolrQueryParser.setPhraseSlop() call ExtendedSolrQueryParser.setPhraseSlop() call ExtendedSolrQueryParser.setPhraseSlop() call ExtendedSolrQueryParser.setPhraseSlop() call ExtendedSolrQueryParser.setPhraseSlop() call ExtendedSolrQueryParser.setRemoveStopFilter() call ExtendedSolrQueryParser.setRemoveStopFilter() call ExtendedSolrQueryParser.setRemoveStopFilter() call ExtendedSolrQueryParser.setRemoveStopFilter() call ExtendedSolrQueryParser.setRemoveStopFilter() = = decl_stmt org.apache.lucene.search.Query = call ExtendedSolrQueryParser.parse() call ExtendedSolrQueryParser.parse() call ExtendedSolrQueryParser.parse() call ExtendedSolrQueryParser.parse() call ExtendedSolrQueryParser.parse() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if != decl Map private < private < < decl_stmt java.util.Map < = new <> for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return public public return call ExtendedDismaxConfiguration.queryFields() call ExtendedDismaxConfiguration.queryFields() call ExtendedDismaxConfiguration.queryFields() call ExtendedDismaxConfiguration.queryFields() call ExtendedDismaxConfiguration.queryFields() call ExtendedDismaxConfiguration.queryFields() call ExtendedDismaxConfiguration.queryFields() call ExtendedDismaxConfiguration.queryFields() call ExtendedDismaxConfiguration.queryFields() new public public throws if ! return == : public public < if != return == && ! char int char Clause int int decl ArrayList boolean int StringBuilder Float public < public < decl_stmt java.util.ArrayList < = new <> decl_stmt Clause decl_stmt int = decl_stmt int = decl_stmt char = decl_stmt int decl_stmt boolean while < = new = = while if ++ >= break = = if == || == && + < = ++ = if != && ! call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() = if != = decl_stmt int = = += - ++ if >= break decl_stmt char = = if ! && == = = ++ decl_stmt java.lang.StringBuilder = new while < = ++ if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if >= call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) break = ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) continue else if != && == = break else if = if == -- break if == switch case case case case case case case case case case case case case case case case case case case = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if if != return = else if call Clause.val() call Clause.val() call Clause.val() call Clause.val() call Clause.val() call Clause.val() call Clause.val() call Clause.val() call Clause.val() == = if != = + = = else = if != if = if ! = call Clause.raw() call Clause.raw() call Clause.raw() call Clause.raw() call Clause.raw() call Clause.raw() call Clause.raw() call Clause.raw() call Clause.raw() else = if call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() && ! call Clause.raw() call Clause.raw() call Clause.raw() call Clause.raw() call Clause.raw() call Clause.raw() call Clause.raw() call Clause.raw() call Clause.raw() decl_stmt java.lang.Float = call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() call ExtendedDismaxConfiguration.userFields() if != += + call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return char boolean int boolean int String boolean public public if >= return decl_stmt int = decl_stmt int = if <= || + >= || + return decl_stmt char = ++ while == || == || == && < = ++ ++ if ! return while < = ++ if ! || == || == return decl_stmt java.lang.String = decl_stmt boolean = != decl_stmt boolean = call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() call ExtendedDismaxConfiguration.solrParams() + + != decl_stmt boolean = != return || || : char decl ArrayList char int char public static < public static < decl_stmt java.util.ArrayList < = new <> decl_stmt int = = = decl_stmt char = decl_stmt char = while < decl_stmt char = = ++ if == ++ else if != && == = else if ! && == if ! = else if && == call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() - = if < call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() if != return return public public = Query protected protected < throws decl_stmt org.apache.lucene.search.Query = if != = return Alias public public < decl_stmt Alias = new = = protected protected return protected protected throws = = = = return protected protected throws = = = = return protected protected throws if && return new = = = return Analyzer protected protected throws decl_stmt org.apache.lucene.analysis.Analyzer if if == = new <> = if == = else = return protected protected throws = = = = = = return protected protected throws if if || == return new else return = = = return protected protected throws = = = = return Alias decl BooleanQuery decl List decl Builder protected protected throws decl_stmt Alias = if != decl_stmt java.util.List < = if == || call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return if decl_stmt org.apache.lucene.search.DisjunctionMaxQuery = new return else decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() call decl BooleanQuery.setDisableCoord() for : call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() return call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() else if decl_stmt org.apache.solr.schema.FieldType = if == && == throw return decl Set private private throws decl_stmt java.util.Set < = new <> call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if throw new boolean private private < if == return decl_stmt boolean = for : if ! = else if = return decl List Float Query protected < protected < throws if == return if == return decl_stmt java.util.List < = new <> for : = decl_stmt org.apache.lucene.search.Query = if != decl_stmt java.lang.Float = if != && call java.lang.Float.floatValue() call java.lang.Float.floatValue() call java.lang.Float.floatValue() call java.lang.Float.floatValue() call java.lang.Float.floatValue() != = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return PhraseQuery decl Builder decl Term decl PhraseQuery BooleanQuery decl int Query private private try switch case case decl_stmt org.apache.lucene.search.Query = == if instanceof decl_stmt org.apache.lucene.search.BooleanQuery = if ! call org.apache.lucene.search.BooleanQuery.isCoordDisabled() call org.apache.lucene.search.BooleanQuery.isCoordDisabled() call org.apache.lucene.search.BooleanQuery.isCoordDisabled() call org.apache.lucene.search.BooleanQuery.isCoordDisabled() call org.apache.lucene.search.BooleanQuery.isCoordDisabled() = if instanceof decl_stmt org.apache.lucene.search.PhraseQuery = if > && call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() < return decl_stmt org.apache.lucene.util.fst.Builder = new decl_stmt org.apache.lucene.index.Term = call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() call org.apache.lucene.search.PhraseQuery.getTerms() decl_stmt int = call org.apache.lucene.search.PhraseQuery.getPositions() call org.apache.lucene.search.PhraseQuery.getPositions() call org.apache.lucene.search.PhraseQuery.getPositions() call org.apache.lucene.search.PhraseQuery.getPositions() call org.apache.lucene.search.PhraseQuery.getPositions() for = < ++ call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.add() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() call decl PhraseQuery.setSlop() = call decl PhraseQuery.build() call decl PhraseQuery.build() call decl PhraseQuery.build() call decl PhraseQuery.build() call decl PhraseQuery.build() else if instanceof decl_stmt org.apache.lucene.search.MultiPhraseQuery = if > && call decl int.getTermArrays() call decl int.getTermArrays() call decl int.getTermArrays() call decl int.getTermArrays() call decl int.getTermArrays() < return if != call decl int.getSlop() call decl int.getSlop() call decl int.getSlop() call decl int.getSlop() call decl int.getSlop() = new else if > return return case return case return case return case return return catch return FieldType TokenizerChain decl TokenFilterFactory TokenizerChain Analyzer TokenFilterFactory TokenizerChain Analyzer decl TokenFilterFactory int private private decl_stmt org.apache.solr.schema.FieldType = decl_stmt org.apache.lucene.analysis.Analyzer = call org.apache.solr.schema.FieldType.getQueryAnalyzer() call org.apache.solr.schema.FieldType.getQueryAnalyzer() call org.apache.solr.schema.FieldType.getQueryAnalyzer() call org.apache.solr.schema.FieldType.getQueryAnalyzer() call org.apache.solr.schema.FieldType.getQueryAnalyzer() if ! instanceof return decl_stmt org.apache.solr.analysis.TokenizerChain = decl_stmt org.apache.lucene.analysis.Analyzer = call org.apache.solr.schema.FieldType.getIndexAnalyzer() call org.apache.solr.schema.FieldType.getIndexAnalyzer() call org.apache.solr.schema.FieldType.getIndexAnalyzer() call org.apache.solr.schema.FieldType.getIndexAnalyzer() call org.apache.solr.schema.FieldType.getIndexAnalyzer() if == || ! instanceof return decl_stmt org.apache.solr.analysis.TokenizerChain = for : call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() if instanceof return decl_stmt int = - decl_stmt org.apache.lucene.analysis.util.TokenFilterFactory = call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() call org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories() for = < ++ decl_stmt org.apache.lucene.analysis.util.TokenFilterFactory = if instanceof = break if == - return decl_stmt org.apache.lucene.analysis.util.TokenFilterFactory = new - for = = < ++ if == continue ++ = decl_stmt org.apache.solr.analysis.TokenizerChain = new call TokenizerChain.getTokenizerFactory() call TokenizerChain.getTokenizerFactory() call TokenizerChain.getTokenizerFactory() call TokenizerChain.getTokenizerFactory() call TokenizerChain.getTokenizerFactory() call TokenizerChain.setPositionIncrementGap() call TokenizerChain.setPositionIncrementGap() call TokenizerChain.setPositionIncrementGap() call TokenizerChain.setPositionIncrementGap() call TokenizerChain.setPositionIncrementGap() call TokenizerChain.getPositionIncrementGap() call TokenizerChain.getPositionIncrementGap() call TokenizerChain.getPositionIncrementGap() call TokenizerChain.getPositionIncrementGap() call TokenizerChain.getPositionIncrementGap() return static static if == return if instanceof && == return return boolean public public decl_stmt boolean = || && ! + && ! return private private return == : private private for : : if return return public public return : public public if == return else if == && return else if == && return else return public public return - public public return public public return != && > public public return != && != public public return != && > public < public < return