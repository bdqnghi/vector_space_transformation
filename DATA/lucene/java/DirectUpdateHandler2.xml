org.apache.solr.update java.io.IOException import java.lang.invoke.MethodHandles import java.net.URL import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Locale import java.util.Map import java.util.concurrent.ExecutionException import java.util.concurrent.Future import java.util.concurrent.atomic.AtomicLong import org.apache.lucene.document.Document import org.apache.lucene.index.CodecReader import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.SlowCodecReaderWrapper import org.apache.lucene.index.Term import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanClause.Occur import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.MatchAllDocsQuery import org.apache.lucene.search.Query import org.apache.lucene.search.TermQuery import org.apache.lucene.util.BytesRefHash import org.apache.solr.common.SolrException import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.common.util.SuppressForbidden import org.apache.solr.core.SolrConfig.UpdateHandlerInfo import org.apache.solr.core.SolrCore import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.SolrRequestInfo import org.apache.solr.response.SolrQueryResponse import org.apache.solr.schema.SchemaField import org.apache.solr.search.FunctionRangeQuery import org.apache.solr.search.QParser import org.apache.solr.search.QueryUtils import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.search.SyntaxError import org.apache.solr.search.function.ValueSourceRangeFilter import org.apache.solr.util.RefCounted import org.apache.solr.util.TestInjection import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.update.DirectUpdateHandler2 super super extends super implements Logger AtomicLong AtomicLong AtomicLong AtomicLong CommitTracker boolean AtomicLong AtomicLong AtomicLong CommitTracker AtomicLong SolrCoreState boolean AtomicLong AtomicLong boolean AtomicLong AtomicLong AtomicLong AtomicLong decl RefCounted private private throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt org.apache.solr.util.RefCounted < = call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() try call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() protected protected throws call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call SolrCoreState.rollbackIndexWriter() call SolrCoreState.rollbackIndexWriter() call SolrCoreState.rollbackIndexWriter() call SolrCoreState.rollbackIndexWriter() call SolrCoreState.rollbackIndexWriter() public public throws try return catch throw catch throw new + + instanceof : catch throw new decl List int private private throws decl_stmt int = - call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if == = try if decl_stmt java.util.List < = if != && > = if != else else if & == if call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) - call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) else call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) - call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) call org.apache.solr.update.CommitTracker.addedDocument(int) = finally if != call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() else call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() return IndexWriter decl RefCounted private private throws decl_stmt org.apache.solr.util.RefCounted < = call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() try decl_stmt org.apache.lucene.index.IndexWriter = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() if call org.apache.lucene.index.IndexWriter.addDocuments(Iterable) call org.apache.lucene.index.IndexWriter.addDocuments(Iterable) call org.apache.lucene.index.IndexWriter.addDocuments(Iterable) call org.apache.lucene.index.IndexWriter.addDocuments(Iterable) call org.apache.lucene.index.IndexWriter.addDocuments(Iterable) else call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) if != finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() Document IndexWriter decl RefCounted Term boolean decl BooleanQuery Term private private throws decl_stmt org.apache.lucene.index.Term decl_stmt org.apache.lucene.index.Term = new : decl_stmt boolean = if == = else = = decl_stmt org.apache.solr.util.RefCounted < = call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() try decl_stmt org.apache.lucene.index.IndexWriter = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() if call org.apache.lucene.index.IndexWriter.updateDocuments(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocuments(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocuments(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocuments(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocuments(Term,Iterable) else decl_stmt org.apache.lucene.document.Document = call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) if decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() new new call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) new call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() if != finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() Document decl List IndexWriter DeleteUpdateCommand decl RefCounted Term private private < throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + decl_stmt java.util.List < = new <> for : try decl_stmt org.apache.solr.update.DeleteUpdateCommand = new = = - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + decl_stmt org.apache.lucene.document.Document = decl_stmt org.apache.lucene.index.Term = new decl_stmt org.apache.solr.util.RefCounted < = call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() try decl_stmt org.apache.lucene.index.IndexWriter = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() synchronized call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) for : call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) new if != finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() private private if & == if call org.apache.solr.update.CommitTracker.deletedDocument(int) call org.apache.solr.update.CommitTracker.deletedDocument(int) call org.apache.solr.update.CommitTracker.deletedDocument(int) call org.apache.solr.update.CommitTracker.deletedDocument(int) call org.apache.solr.update.CommitTracker.deletedDocument(int) else call org.apache.solr.update.CommitTracker.deletedDocument(int) call org.apache.solr.update.CommitTracker.deletedDocument(int) call org.apache.solr.update.CommitTracker.deletedDocument(int) call org.apache.solr.update.CommitTracker.deletedDocument(int) call org.apache.solr.update.CommitTracker.deletedDocument(int) if call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() > call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() if call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() > call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() Term decl RefCounted public public throws call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() decl_stmt org.apache.lucene.index.Term = new decl_stmt org.apache.solr.util.RefCounted < = call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() try call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() if != public public throws if != ValueSource QParser Query ValueSourceRangeFilter SchemaField decl BooleanQuery decl Builder private private decl_stmt org.apache.lucene.search.Query try decl_stmt org.apache.solr.search.QParser = = call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() call org.apache.solr.search.QParser.getQuery() = if != && != && != - decl_stmt org.apache.lucene.util.fst.Builder = new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() decl_stmt org.apache.solr.schema.SchemaField = decl_stmt org.apache.lucene.queries.function.ValueSource = call decl Builder.getType() call decl Builder.getType() call decl Builder.getType() call decl Builder.getType() call decl Builder.getType() decl_stmt org.apache.solr.search.function.ValueSourceRangeFilter = new decl_stmt org.apache.lucene.queries.function.FunctionRangeQuery = new call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() = call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() return catch throw new Query boolean decl RefCounted boolean public public throws call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() decl_stmt boolean = try decl_stmt org.apache.lucene.search.Query = decl_stmt boolean = == call Query.getClass() call Query.getClass() call Query.getClass() call Query.getClass() call Query.getClass() if && == - synchronized call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() return synchronized call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() if else decl_stmt org.apache.solr.util.RefCounted < = call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() try call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() new finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() if != = finally if ! call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() decl List decl List decl RefCounted int public public throws call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() decl_stmt int call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt java.util.List < = if != && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt java.util.List < = new <> for : for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt org.apache.solr.util.RefCounted < = call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() try call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() = else = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if == && call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() > call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() else if == && call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() > call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.scheduleCommitWithin(long) call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() return decl Map = + private = + private decl_stmt java.util.Map final final final < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl RefCounted boolean public public throws decl_stmt boolean = try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt org.apache.solr.util.RefCounted < = call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() try call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = finally if call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() decl RefCounted IndexWriter decl RefCounted decl Future boolean public public throws if return if call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() else call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() decl_stmt java.util.concurrent.Future = if = new decl_stmt boolean = try if ! call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + if call org.apache.solr.update.CommitTracker.cancelPendingCommit() call org.apache.solr.update.CommitTracker.cancelPendingCommit() call org.apache.solr.update.CommitTracker.cancelPendingCommit() call org.apache.solr.update.CommitTracker.cancelPendingCommit() call org.apache.solr.update.CommitTracker.cancelPendingCommit() if ! && || ! call CommitTracker.getOpenSearcher() call CommitTracker.getOpenSearcher() call CommitTracker.getOpenSearcher() call CommitTracker.getOpenSearcher() call CommitTracker.getOpenSearcher() call org.apache.solr.update.CommitTracker.cancelPendingCommit() call org.apache.solr.update.CommitTracker.cancelPendingCommit() call org.apache.solr.update.CommitTracker.cancelPendingCommit() call org.apache.solr.update.CommitTracker.cancelPendingCommit() call org.apache.solr.update.CommitTracker.cancelPendingCommit() decl_stmt org.apache.solr.util.RefCounted < = call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() call SolrCoreState.getIndexWriter() try decl_stmt org.apache.lucene.index.IndexWriter = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() if if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) call org.apache.lucene.index.IndexWriter.forceMerge(int) else if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call org.apache.lucene.index.IndexWriter.forceMergeDeletes(boolean) call org.apache.lucene.index.IndexWriter.forceMergeDeletes(boolean) call org.apache.lucene.index.IndexWriter.forceMergeDeletes(boolean) call org.apache.lucene.index.IndexWriter.forceMergeDeletes(boolean) call org.apache.lucene.index.IndexWriter.forceMergeDeletes(boolean) if ! synchronized call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() if != if call org.apache.lucene.index.IndexWriter.hasUncommittedChanges() call org.apache.lucene.index.IndexWriter.hasUncommittedChanges() call org.apache.lucene.index.IndexWriter.hasUncommittedChanges() call org.apache.lucene.index.IndexWriter.hasUncommittedChanges() call org.apache.lucene.index.IndexWriter.hasUncommittedChanges() call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() if if synchronized call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() if != if != else synchronized call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() if != if else decl_stmt org.apache.solr.util.RefCounted < = call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() if != if != if call org.apache.solr.update.CommitTracker.didCommit() call org.apache.solr.update.CommitTracker.didCommit() call org.apache.solr.update.CommitTracker.didCommit() call org.apache.solr.update.CommitTracker.didCommit() call org.apache.solr.update.CommitTracker.didCommit() else call org.apache.solr.update.CommitTracker.didCommit() call org.apache.solr.update.CommitTracker.didCommit() call org.apache.solr.update.CommitTracker.didCommit() call org.apache.solr.update.CommitTracker.didCommit() call org.apache.solr.update.CommitTracker.didCommit() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = finally if ! call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) if call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if != && != try catch public public throws call SolrCoreState.newIndexWriter() call SolrCoreState.newIndexWriter() call SolrCoreState.newIndexWriter() call SolrCoreState.newIndexWriter() call SolrCoreState.newIndexWriter() boolean public public throws if throw new call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() decl_stmt boolean = try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call org.apache.solr.update.CommitTracker.didRollback() call org.apache.solr.update.CommitTracker.didRollback() call org.apache.solr.update.CommitTracker.didRollback() call org.apache.solr.update.CommitTracker.didRollback() call org.apache.solr.update.CommitTracker.didRollback() call org.apache.solr.update.CommitTracker.didRollback() call org.apache.solr.update.CommitTracker.didRollback() call org.apache.solr.update.CommitTracker.didRollback() call org.apache.solr.update.CommitTracker.didRollback() call org.apache.solr.update.CommitTracker.didRollback() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = finally call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() - call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() - call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() - call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.getAndSet(long) call java.util.concurrent.atomic.AtomicLong.getAndSet(long) if call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() public public return public public throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call org.apache.solr.update.CommitTracker.close() call org.apache.solr.update.CommitTracker.close() call org.apache.solr.update.CommitTracker.close() call org.apache.solr.update.CommitTracker.close() call org.apache.solr.update.CommitTracker.close() call org.apache.solr.update.CommitTracker.close() call org.apache.solr.update.CommitTracker.close() call org.apache.solr.update.CommitTracker.close() call org.apache.solr.update.CommitTracker.close() call org.apache.solr.update.CommitTracker.close() call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) CommitUpdateCommand boolean SolrQueryRequest SolrQueryResponse boolean public public throws assert decl_stmt boolean = call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() try decl_stmt org.apache.solr.request.SolrQueryRequest = new new decl_stmt org.apache.solr.response.SolrQueryResponse = new if == = new if ! if != if != return decl_stmt boolean = != && != && && == try if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.update.CommitUpdateCommand = new = = = synchronized call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() synchronized call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() call org.apache.solr.update.SolrCoreState.getUpdateLock() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() if instanceof throw try if != catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() if instanceof throw if != finally call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() call SolrCoreState.getCommitLock() if SolrIndexSplitter public public throws new decl_stmt org.apache.solr.update.SolrIndexSplitter = new call org.apache.solr.update.SolrIndexSplitter.split() call org.apache.solr.update.SolrIndexSplitter.split() call org.apache.solr.update.SolrIndexSplitter.split() call org.apache.solr.update.SolrIndexSplitter.split() call org.apache.solr.update.SolrIndexSplitter.split() public public return public public return public public return public public return public public return public public return NamedList public public decl_stmt org.apache.solr.common.util.NamedList = new call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() if call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() > call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() if call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() > call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) + call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() + call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.update.CommitTracker.getCommitCount() call org.apache.solr.update.CommitTracker.getCommitCount() call org.apache.solr.update.CommitTracker.getCommitCount() call org.apache.solr.update.CommitTracker.getCommitCount() call org.apache.solr.update.CommitTracker.getCommitCount() if call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() > call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() call org.apache.solr.update.CommitTracker.getDocsUpperBound() if call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() > call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) + call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() call org.apache.solr.update.CommitTracker.getTimeUpperBound() + call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.update.CommitTracker.getCommitCount() call org.apache.solr.update.CommitTracker.getCommitCount() call org.apache.solr.update.CommitTracker.getCommitCount() call org.apache.solr.update.CommitTracker.getCommitCount() call org.apache.solr.update.CommitTracker.getCommitCount() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() if != call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) call org.apache.solr.common.util.NamedList.add(String,T) return public public return + public public return public public return public public return