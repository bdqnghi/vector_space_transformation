org.apache.lucene.spatial.geopoint.search java.util.Collections import java.util.LinkedList import java.util.List import org.apache.lucene.index.TermsEnum import org.apache.lucene.spatial.geopoint.document.GeoPointField import org.apache.lucene.spatial.util.GeoEncodingUtils import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.LegacyNumericUtils import class annotation org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum super super extends decl List short long long long private final private final final final decl_stmt long final final = | << assert < decl_stmt long final final if < = | << + - else = decl_stmt long final final = - short double double short boolean double double private private final final final final final final decl_stmt double final final = decl_stmt double final final = decl_stmt double final final = decl_stmt double final final = decl_stmt short final final = << - >>> decl_stmt boolean final final = == && if || == && decl_stmt short final final = - if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new ! call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new | << ! else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new ! else if < && - protected final protected final call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return protected protected = call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() protected final protected final while if == if != && > if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() continue return != && > : assert call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return protected final protected final return call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() == protected protected assert !=