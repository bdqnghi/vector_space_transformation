org.apache.lucene.search.suggest.document java.io.IOException import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.List import org.apache.lucene.search.suggest.analyzing.FSTUtil import org.apache.lucene.store.ByteArrayDataInput import org.apache.lucene.store.ByteArrayDataOutput import org.apache.lucene.store.IndexInput import org.apache.lucene.util.Accountable import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.fst.ByteSequenceOutputs import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.PairOutputs import org.apache.lucene.util.fst.PairOutputs.Pair import org.apache.lucene.util.fst.PositiveIntOutputs import org.apache.lucene.util.fst.Util import static static org.apache.lucene.search.suggest.document.NRTSuggester.PayLoadProcessor.parseDocID import static static org.apache.lucene.search.suggest.document.NRTSuggester.PayLoadProcessor.parseSurfaceForm import class org.apache.lucene.search.suggest.document.NRTSuggester super super implements int int decl FST long public public return == : call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() public < public < return decl Util int float decl Comparator int decl List CharsRefBuilder double int int public public final final final final throws decl_stmt double final final = if == - return decl_stmt java.util.List final final final < < < = decl_stmt int final final = * call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int final final = decl_stmt java.util.Comparator < < = decl_stmt org.apache.lucene.util.fst.Util < < = new < < new decl_stmt org.apache.lucene.util.CharsRefBuilder private final final = new protected protected < < decl_stmt int = decl_stmt int = if ! return try decl_stmt float = call org.apache.lucene.util.CharsRefBuilder.toCharsRef() call org.apache.lucene.util.CharsRefBuilder.toCharsRef() call org.apache.lucene.util.CharsRefBuilder.toCharsRef() call org.apache.lucene.util.CharsRefBuilder.toCharsRef() call org.apache.lucene.util.CharsRefBuilder.toCharsRef() return catch throw new for < < : call decl Util.addStartPaths() call decl Util.addStartPaths() call decl Util.addStartPaths() call decl Util.addStartPaths() call decl Util.addStartPaths() call decl Util.search() call decl Util.search() call decl Util.search() call decl Util.search() call decl Util.search() float int int protected protected < < decl_stmt int = decl_stmt int = if ! return try decl_stmt float = return catch throw new int public public < < < < decl_stmt int = return != : private static < < private static < < return new < < public public < < return public public < < return long private private decl_stmt long = * assert <= = / if = + / return int private static private static return > double / : - int int int decl FST public static public static throws decl_stmt org.apache.lucene.util.fst.FST final final final < < = new <> new <> decl_stmt int = decl_stmt int = decl_stmt int = return new static static if < || || throw new + return - static static assert >= && <= : + + return - int static static final final decl_stmt int = - for = < ++ if + == = break assert != - : return ByteArrayDataInput static static final final assert != - : decl_stmt org.apache.lucene.store.ByteArrayDataInput = new + + - + return call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() call ByteArrayDataInput.readVInt() decl byte ByteArrayDataOutput int static static final final throws decl_stmt int = + decl_stmt byte = new decl_stmt org.apache.lucene.store.ByteArrayDataOutput = new call org.apache.lucene.store.ByteArrayDataOutput.writeBytes(byte,int,int) call org.apache.lucene.store.ByteArrayDataOutput.writeBytes(byte,int,int) call org.apache.lucene.store.ByteArrayDataOutput.writeBytes(byte,int,int) call org.apache.lucene.store.ByteArrayDataOutput.writeBytes(byte,int,int) call org.apache.lucene.store.ByteArrayDataOutput.writeBytes(byte,int,int) - call ByteArrayDataOutput.writeByte() call ByteArrayDataOutput.writeByte() call ByteArrayDataOutput.writeByte() call ByteArrayDataOutput.writeByte() call ByteArrayDataOutput.writeByte() byte call ByteArrayDataOutput.writeVInt() call ByteArrayDataOutput.writeVInt() call ByteArrayDataOutput.writeVInt() call ByteArrayDataOutput.writeVInt() call ByteArrayDataOutput.writeVInt() return new call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition() call org.apache.lucene.store.ByteArrayDataOutput.getPosition()