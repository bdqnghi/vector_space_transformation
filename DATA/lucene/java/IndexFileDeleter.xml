org.apache.lucene.index java.io.Closeable import java.io.FileNotFoundException import java.io.IOException import java.nio.file.NoSuchFileException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Locale import java.util.Map import java.util.Objects import java.util.Set import java.util.regex.Matcher import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.store.Directory import org.apache.lucene.util.CollectionUtil import org.apache.lucene.util.Constants import org.apache.lucene.util.IOUtils import org.apache.lucene.util.InfoStream import class org.apache.lucene.index.IndexFileDeleter super super implements IndexWriter decl Map decl List decl List decl List boolean IndexDeletionPolicy InfoStream Directory boolean SegmentInfos Directory private private return == || decl Map String Long int long long Long static static < decl_stmt long = decl_stmt int = decl_stmt java.util.Map < = new <> for : if || else if try = catch else if try = catch else decl_stmt java.lang.String = assert call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) : + if continue = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt java.lang.Long = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = try = catch call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if < + if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + + = + for : decl_stmt java.lang.Long = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() assert != decl_stmt long = if < + if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + + + + + if < + if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + + + + + if < + if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + + + + + throws call org.apache.lucene.index.IndexWriter.ensureOpen(boolean) call org.apache.lucene.index.IndexWriter.ensureOpen(boolean) call org.apache.lucene.index.IndexWriter.ensureOpen(boolean) call org.apache.lucene.index.IndexWriter.ensureOpen(boolean) call org.apache.lucene.index.IndexWriter.ensureOpen(boolean) if != throw new try return catch return public public return Throwable CommitPoint int int int private private decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if > decl_stmt java.lang.Throwable = for = < ++ decl_stmt CommitPoint = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call CommitPoint.getSegmentsFileName() call CommitPoint.getSegmentsFileName() call CommitPoint.getSegmentsFileName() call CommitPoint.getSegmentsFileName() call CommitPoint.getSegmentsFileName() + try catch if == = call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = decl_stmt int = while < decl_stmt CommitPoint = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if ! if != call decl List.set() call decl List.set() call decl List.set() call decl List.set() call decl List.set() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() ++ ++ while > call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() - -- decl String decl Set Matcher String throws assert decl_stmt java.util.Set < = new <> decl_stmt java.lang.String = call Directory.listAll() call Directory.listAll() call Directory.listAll() call Directory.listAll() call Directory.listAll() decl_stmt java.util.regex.Matcher = for = < ++ decl_stmt java.lang.String = call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) call java.util.regex.Matcher.reset(CharSequence) if ! call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) && ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() && call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() || call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) || call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() public public throws assert if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() try finally call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() throws assert if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() long long public public throws assert assert decl_stmt long = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) = call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + call org.apache.lucene.index.IndexWriter.segString() call org.apache.lucene.index.IndexWriter.segString() call org.apache.lucene.index.IndexWriter.segString() call org.apache.lucene.index.IndexWriter.segString() call org.apache.lucene.index.IndexWriter.segString() call IndexWriter.toLiveInfos() call IndexWriter.toLiveInfos() call IndexWriter.toLiveInfos() call IndexWriter.toLiveInfos() call IndexWriter.toLiveInfos() + + + + + + if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() else try finally call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) decl_stmt long = call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() - / + throws assert for final final : < assert for final final : RefCount assert decl_stmt org.apache.lucene.util.RefCount = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) if call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + call RefCount.IncRef() call RefCount.IncRef() call RefCount.IncRef() call RefCount.IncRef() call RefCount.IncRef() Throwable decl Set < throws assert decl_stmt java.util.Set < = new <> decl_stmt java.lang.Throwable = for final final : try if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() catch if == = try catch if == = decl Set < assert decl_stmt java.util.Set < = new <> for final final : try if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() catch try catch RefCount private private assert decl_stmt org.apache.lucene.util.RefCount = if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) if call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + + if call RefCount.DecRef() call RefCount.DecRef() call RefCount.DecRef() call RefCount.DecRef() call RefCount.DecRef() == call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() return else return throws assert public public assert if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() return else return > RefCount private private assert decl_stmt org.apache.lucene.util.RefCount if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return decl Set < throws assert decl_stmt java.util.Set < = new <> for final final : if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() || call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() == if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() private private < throws assert if call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call org.apache.lucene.util.InfoStream.isEnabled(String) call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() call InfoStream.message() + + for : if == continue for : if == continue private private throws try call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() catch if else throw public public if ! = else assert > : + + + return ++ public public assert > : + + + return -- public public return + + public public return public public return public < public < return public public return public public return public < public < return public public if ! = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public return