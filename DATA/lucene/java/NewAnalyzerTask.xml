org.apache.lucene.benchmark.byTask.tasks org.apache.lucene.analysis.Analyzer import org.apache.lucene.benchmark.byTask.PerfRunData import org.apache.lucene.benchmark.byTask.utils.AnalyzerFactory import org.apache.lucene.util.Version import java.io.IOException import java.io.StreamTokenizer import java.io.StringReader import java.util.* import java.lang.reflect.Constructor import class org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask super super extends int decl List decl Constructor decl Class public static final public static final throws decl_stmt java.lang.Class final final final < extends extends = try decl_stmt java.lang.reflect.Constructor < extends extends = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() return call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() catch return call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() String AnalyzerFactory Analyzer String public public throws decl_stmt java.lang.String = try if >= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() ++ decl_stmt org.apache.lucene.analysis.Analyzer = if == || == call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() = decl_stmt org.apache.lucene.benchmark.byTask.utils.AnalyzerFactory = if != = call org.apache.lucene.benchmark.byTask.utils.AnalyzerFactory.create() call org.apache.lucene.benchmark.byTask.utils.AnalyzerFactory.create() call org.apache.lucene.benchmark.byTask.utils.AnalyzerFactory.create() call org.apache.lucene.benchmark.byTask.utils.AnalyzerFactory.create() call org.apache.lucene.benchmark.byTask.utils.AnalyzerFactory.create() else if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = + = else try decl_stmt java.lang.String = + = = catch = + = catch throw new + return StreamTokenizer public public decl_stmt java.io.StreamTokenizer final final = new new call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call java.io.StreamTokenizer.eolIsSignificant(boolean) call java.io.StreamTokenizer.eolIsSignificant(boolean) call java.io.StreamTokenizer.eolIsSignificant(boolean) call java.io.StreamTokenizer.eolIsSignificant(boolean) call java.io.StreamTokenizer.eolIsSignificant(boolean) call java.io.StreamTokenizer.ordinaryChar(int) call java.io.StreamTokenizer.ordinaryChar(int) call java.io.StreamTokenizer.ordinaryChar(int) call java.io.StreamTokenizer.ordinaryChar(int) call java.io.StreamTokenizer.ordinaryChar(int) try while call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() != switch case break case case case call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() break default: throw new + call java.io.StreamTokenizer.toString() call java.io.StreamTokenizer.toString() call java.io.StreamTokenizer.toString() call java.io.StreamTokenizer.toString() call java.io.StreamTokenizer.toString() catch if throw else throw new + call java.io.StreamTokenizer.lineno() call java.io.StreamTokenizer.lineno() call java.io.StreamTokenizer.lineno() call java.io.StreamTokenizer.lineno() call java.io.StreamTokenizer.lineno() + + catch throw new + call java.io.StreamTokenizer.lineno() call java.io.StreamTokenizer.lineno() call java.io.StreamTokenizer.lineno() call java.io.StreamTokenizer.lineno() call java.io.StreamTokenizer.lineno() + + public public return