org.apache.lucene.search java.io.IOException import java.util.ArrayList import java.util.Comparator import java.util.List import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.FilteredTermsEnum import org.apache.lucene.index.Term import org.apache.lucene.index.TermState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.util.Attribute import org.apache.lucene.util.AttributeImpl import org.apache.lucene.util.AttributeReflector import org.apache.lucene.util.AttributeSource import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.UnicodeUtil import org.apache.lucene.util.automaton.Automaton import org.apache.lucene.util.automaton.ByteRunAutomaton import org.apache.lucene.util.automaton.CompiledAutomaton import org.apache.lucene.util.automaton.LevenshteinAutomata import class org.apache.lucene.search.FuzzyTermsEnum super super extends boolean BoostAttribute float BytesRef float int TermsEnum int BoostAttribute MaxNonCompetitiveBoostAttribute BytesRef LevenshteinAutomataAttribute float Term int boolean int Terms CompiledAutomaton decl List protected protected throws decl_stmt java.util.List final final final < = if < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.lucene.util.automaton.CompiledAutomaton final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return new call org.apache.lucene.index.Terms.intersect(CompiledAutomaton,BytesRef) call org.apache.lucene.index.Terms.intersect(CompiledAutomaton,BytesRef) call org.apache.lucene.index.Terms.intersect(CompiledAutomaton,BytesRef) call org.apache.lucene.index.Terms.intersect(CompiledAutomaton,BytesRef) call org.apache.lucene.index.Terms.intersect(CompiledAutomaton,BytesRef) == : call org.apache.lucene.util.automaton.CompiledAutomaton.floor(BytesRef,BytesRefBuilder) call org.apache.lucene.util.automaton.CompiledAutomaton.floor(BytesRef,BytesRefBuilder) call org.apache.lucene.util.automaton.CompiledAutomaton.floor(BytesRef,BytesRefBuilder) call org.apache.lucene.util.automaton.CompiledAutomaton.floor(BytesRef,BytesRefBuilder) call org.apache.lucene.util.automaton.CompiledAutomaton.floor(BytesRef,BytesRefBuilder) new call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() + new + else return Automaton LevenshteinAutomata String decl List private < private < decl_stmt java.util.List final final final < = call LevenshteinAutomataAttribute.automata() call LevenshteinAutomataAttribute.automata() call LevenshteinAutomataAttribute.automata() call LevenshteinAutomataAttribute.automata() call LevenshteinAutomataAttribute.automata() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() <= && <= decl_stmt org.apache.lucene.util.automaton.LevenshteinAutomata = new - decl_stmt java.lang.String = for = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() <= ++ decl_stmt org.apache.lucene.util.automaton.Automaton = call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return protected protected = = call org.apache.lucene.index.TermsEnum.attributes() call org.apache.lucene.index.TermsEnum.attributes() call org.apache.lucene.index.TermsEnum.attributes() call org.apache.lucene.index.TermsEnum.attributes() call org.apache.lucene.index.TermsEnum.attributes() boolean int private private throws decl_stmt int = decl_stmt boolean = == || != && >= while > && >= : > -- if != || TermsEnum protected protected throws decl_stmt org.apache.lucene.index.TermsEnum = if == assert > throw new private private return - * float private private decl_stmt float final final = - float / return - * BytesRef BytesRef float public public throws if != = decl_stmt org.apache.lucene.util.BytesRef = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call BoostAttribute.setBoost() call BoostAttribute.setBoost() call BoostAttribute.setBoost() call BoostAttribute.setBoost() call BoostAttribute.setBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() call org.apache.lucene.search.BoostAttribute.getBoost() decl_stmt float final final = call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.getMaxNonCompetitiveBoost() call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.getMaxNonCompetitiveBoost() call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.getMaxNonCompetitiveBoost() call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.getMaxNonCompetitiveBoost() call org.apache.lucene.search.MaxNonCompetitiveBoostAttribute.getMaxNonCompetitiveBoost() decl_stmt org.apache.lucene.util.BytesRef final final = call MaxNonCompetitiveBoostAttribute.getCompetitiveTerm() call MaxNonCompetitiveBoostAttribute.getCompetitiveTerm() call MaxNonCompetitiveBoostAttribute.getCompetitiveTerm() call MaxNonCompetitiveBoostAttribute.getCompetitiveTerm() call MaxNonCompetitiveBoostAttribute.getCompetitiveTerm() if != && != || != = = = return public public throws return call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() call org.apache.lucene.index.TermsEnum.docFreq() public public throws return call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() call org.apache.lucene.index.TermsEnum.totalTermFreq() public public throws return call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) public public throws call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) public public throws return call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() call org.apache.lucene.index.TermsEnum.termState() public public throws return call org.apache.lucene.index.TermsEnum.ord() call org.apache.lucene.index.TermsEnum.ord() call org.apache.lucene.index.TermsEnum.ord() call org.apache.lucene.index.TermsEnum.ord() call org.apache.lucene.index.TermsEnum.ord() public public throws return call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) public public throws return call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) call org.apache.lucene.index.TermsEnum.seekCeil(BytesRef) public public throws call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) public public throws return call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() call org.apache.lucene.index.TermsEnum.term() int int float protected protected decl_stmt int = - while > if - -- else break if == call BoostAttribute.setBoost() call BoostAttribute.setBoost() call BoostAttribute.setBoost() call BoostAttribute.setBoost() call BoostAttribute.setBoost() return else decl_stmt int final final = decl_stmt float final final = - float / if > call BoostAttribute.setBoost() call BoostAttribute.setBoost() call BoostAttribute.setBoost() call BoostAttribute.setBoost() call BoostAttribute.setBoost() - * return else return final final return == call org.apache.lucene.index.Term.equals(Object) call org.apache.lucene.index.Term.equals(Object) call org.apache.lucene.index.Term.equals(Object) call org.apache.lucene.index.Term.equals(Object) call org.apache.lucene.index.Term.equals(Object) : public public return public public return public < public < return public public public public return public public if == return if ! instanceof return return decl List public public decl_stmt java.util.List final final final < = call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() public public