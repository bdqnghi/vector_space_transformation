org.apache.solr.security static static java.nio.charset.StandardCharsets.UTF_8 import java.io.IOException import java.lang.invoke.MethodHandles import java.nio.ByteBuffer import java.security.Principal import java.security.PublicKey import java.util.List import java.util.Map import java.util.concurrent.ConcurrentHashMap import javax.servlet.FilterChain import javax.servlet.ServletRequest import javax.servlet.ServletResponse import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletRequestWrapper import org.apache.http.HttpException import org.apache.http.HttpRequest import org.apache.http.HttpRequestInterceptor import org.apache.http.HttpResponse import org.apache.http.auth.BasicUserPrincipal import org.apache.http.client.methods.HttpGet import org.apache.http.protocol.HttpContext import org.apache.http.util.EntityUtils import org.apache.solr.client.solrj.impl.HttpClientUtil import org.apache.solr.client.solrj.impl.SolrHttpClientBuilder import org.apache.solr.common.util.Base64 import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.common.util.StrUtils import org.apache.solr.common.util.SuppressForbidden import org.apache.solr.common.util.Utils import org.apache.solr.core.CoreContainer import org.apache.solr.handler.RequestHandlerBase import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.SolrRequestHandler import org.apache.solr.request.SolrRequestInfo import org.apache.solr.response.SolrQueryResponse import org.apache.solr.util.CryptoKeys import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.security.PKIAuthenticationPlugin super super extends super implements Logger CoreContainer String int String String boolean decl CryptoKeys decl RSAKeyPair HttpHeaderClientInterceptor decl Map String public public = public public return public public < String String long String decl List String PKIHeaderData Principal = public = public throws decl_stmt java.lang.String = if call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) return decl_stmt long = decl_stmt java.lang.String = if == call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return decl_stmt java.util.List < = if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt PKIHeaderData = if == call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return if - > call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return decl_stmt java.security.Principal final final = : new private static private static final final final final return new public public return public public return PKIHeaderData PublicKey private private decl_stmt PublicKey = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() decl_stmt PKIHeaderData = if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() = return else return decl String String decl byte PKIHeaderData private static private static decl_stmt byte try = catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return decl_stmt java.lang.String = new decl_stmt java.lang.String = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) if < call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return decl_stmt PKIHeaderData = new try = = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return String Map decl byte String PublicKey String HttpResponse decl_stmt java.lang.String = call decl RSAKeyPair.getZkController() call decl RSAKeyPair.getZkController() call decl RSAKeyPair.getZkController() call decl RSAKeyPair.getZkController() call decl RSAKeyPair.getZkController() try decl_stmt java.lang.String = + + call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() decl_stmt HttpResponse = call decl RSAKeyPair.getUpdateShardHandler() call decl RSAKeyPair.getUpdateShardHandler() call decl RSAKeyPair.getUpdateShardHandler() call decl RSAKeyPair.getUpdateShardHandler() call decl RSAKeyPair.getUpdateShardHandler() new decl_stmt byte = call HttpResponse.getEntity() call HttpResponse.getEntity() call HttpResponse.getEntity() call HttpResponse.getEntity() call HttpResponse.getEntity() decl_stmt java.util.Map = decl_stmt java.lang.String = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) if == call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + return else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt PublicKey = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + return public public return public public return new public public throws call decl CryptoKeys.getPublicKeyStr() call decl CryptoKeys.getPublicKeyStr() call decl CryptoKeys.getPublicKeyStr() call decl CryptoKeys.getPublicKeyStr() call decl CryptoKeys.getPublicKeyStr() public public return public public throws call decl CryptoKeys.getPublicKeyStr() call decl CryptoKeys.getPublicKeyStr() call decl CryptoKeys.getPublicKeyStr() call decl CryptoKeys.getPublicKeyStr() call decl CryptoKeys.getPublicKeyStr() public public return public public return != public public throws if return String String String decl byte SolrRequestInfo decl byte Principal = = decl_stmt org.apache.solr.request.SolrRequestInfo = decl_stmt java.lang.String if != decl_stmt java.security.Principal = call org.apache.solr.request.SolrRequestInfo.getReq() call org.apache.solr.request.SolrRequestInfo.getReq() call org.apache.solr.request.SolrRequestInfo.getReq() call org.apache.solr.request.SolrRequestInfo.getReq() call org.apache.solr.request.SolrRequestInfo.getReq() if == return else = call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() call java.security.Principal.getName() else if ! return = decl_stmt java.lang.String = + + decl_stmt byte = call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) decl_stmt byte = call decl CryptoKeys.encrypt() call decl CryptoKeys.encrypt() call decl CryptoKeys.encrypt() call decl CryptoKeys.encrypt() call decl CryptoKeys.encrypt() decl_stmt java.lang.String = + + return return return call decl RSAKeyPair.getAuthenticationPlugin() call decl RSAKeyPair.getAuthenticationPlugin() call decl RSAKeyPair.getAuthenticationPlugin() call decl RSAKeyPair.getAuthenticationPlugin() call decl RSAKeyPair.getAuthenticationPlugin() == || call decl RSAKeyPair.getAuthenticationPlugin() call decl RSAKeyPair.getAuthenticationPlugin() call decl RSAKeyPair.getAuthenticationPlugin() call decl RSAKeyPair.getAuthenticationPlugin() call decl RSAKeyPair.getAuthenticationPlugin() instanceof public public throws public public return call decl CryptoKeys.getPublicKeyStr() call decl CryptoKeys.getPublicKeyStr() call decl CryptoKeys.getPublicKeyStr() call decl CryptoKeys.getPublicKeyStr() call decl CryptoKeys.getPublicKeyStr()