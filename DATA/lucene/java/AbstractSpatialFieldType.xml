org.apache.solr.schema java.io.IOException import java.lang.invoke.MethodHandles import java.text.ParseException import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.List import java.util.Map import java.util.Set import java.util.TreeSet import java.util.concurrent.Callable import java.util.concurrent.ExecutionException import org.apache.lucene.document.Field import org.apache.lucene.document.StoredField import org.apache.lucene.index.IndexableField import org.apache.lucene.queries.function.FunctionQuery import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.search.BooleanClause.Occur import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.Query import org.apache.lucene.search.SortField import org.apache.lucene.spatial.SpatialStrategy import org.apache.lucene.spatial.query.SpatialArgs import org.apache.lucene.spatial.query.SpatialArgsParser import org.apache.lucene.spatial.query.SpatialOperation import org.apache.lucene.uninverting.UninvertingReader.Type import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.params.SolrParams import org.apache.solr.response.TextResponseWriter import org.apache.solr.search.QParser import org.apache.solr.search.SpatialOptions import org.apache.solr.util.DistanceUnits import org.apache.solr.util.MapListener import org.apache.solr.util.SpatialUtils import org.slf4j.Logger import org.slf4j.LoggerFactory import com.google.common.base.Throwables import com.google.common.cache.Cache import com.google.common.cache.CacheBuilder import org.locationtech.spatial4j.context.SpatialContext import org.locationtech.spatial4j.context.SpatialContextFactory import org.locationtech.spatial4j.distance.DistanceUtils import org.locationtech.spatial4j.io.ShapeReader import org.locationtech.spatial4j.io.ShapeWriter import org.locationtech.spatial4j.io.SupportedFormats import org.locationtech.spatial4j.shape.Point import org.locationtech.spatial4j.shape.Rectangle import org.locationtech.spatial4j.shape.Shape import class super super extends super implements String String String decl Set Logger String ShapeReader String SpatialContext DistanceUnits String decl Cache SpatialArgsParser ShapeWriter String String SupportedFormats decl MapListener protected protected < if == decl_stmt org.apache.solr.util.MapListener < = new <> = call decl MapListener.getSeenKeys() call decl MapListener.getSeenKeys() call decl MapListener.getSeenKeys() call decl MapListener.getSeenKeys() call decl MapListener.getSeenKeys() decl_stmt java.lang.String final final = if == = call SpatialContext.isGeo() call SpatialContext.isGeo() call SpatialContext.isGeo() call SpatialContext.isGeo() call SpatialContext.isGeo() : else = if == throw new + + + decl_stmt SupportedFormats final final = call SpatialContext.getFormats() call SpatialContext.getFormats() call SpatialContext.getFormats() call SpatialContext.getFormats() call SpatialContext.getFormats() decl_stmt java.lang.String final final = if != = call SupportedFormats.getWriter() call SupportedFormats.getWriter() call SupportedFormats.getWriter() call SupportedFormats.getWriter() call SupportedFormats.getWriter() = call SupportedFormats.getReader() call SupportedFormats.getReader() call SupportedFormats.getReader() call SupportedFormats.getReader() call SupportedFormats.getReader() if == throw new + if == throw new + else = call SupportedFormats.getWriters() call SupportedFormats.getWriters() call SupportedFormats.getWriters() call SupportedFormats.getWriters() call SupportedFormats.getWriters() = call SupportedFormats.getReaders() call SupportedFormats.getReaders() call SupportedFormats.getReaders() call SupportedFormats.getReaders() call SupportedFormats.getReaders() = public public if == return else return protected protected return new protected protected throws return protected protected throws return public final public final throw new public public return String Shape decl List T public < public < decl_stmt java.lang.String = decl_stmt java.awt.Shape if instanceof = else = = if == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return decl_stmt java.util.List < = new <> if decl_stmt T = call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call T.createIndexableFields() call T.createIndexableFields() call T.createIndexableFields() call T.createIndexableFields() call T.createIndexableFields() if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return protected protected return == : Shape public public if == throw new decl_stmt java.awt.Shape = if != = call ShapeReader.readIfSupported() call ShapeReader.readIfSupported() call ShapeReader.readIfSupported() call ShapeReader.readIfSupported() call ShapeReader.readIfSupported() if == = call SpatialContext.getFormats() call SpatialContext.getFormats() call SpatialContext.getFormats() call SpatialContext.getFormats() call SpatialContext.getFormats() if == throw new + return public public if != return call ShapeWriter.toString() call ShapeWriter.toString() call ShapeWriter.toString() call ShapeWriter.toString() call ShapeWriter.toString() throw new public final public final return Shape double SpatialArgs Point public public decl_stmt java.awt.Point = decl_stmt double = decl_stmt java.awt.Shape = call SpatialContext.makeCircle() call SpatialContext.makeCircle() call SpatialContext.makeCircle() call SpatialContext.makeCircle() call SpatialContext.makeCircle() if = call Shape.getBoundingBox() call Shape.getBoundingBox() call Shape.getBoundingBox() call Shape.getBoundingBox() call Shape.getBoundingBox() decl_stmt org.apache.lucene.spatial.query.SpatialArgs = new return Point Point SpatialArgs Rectangle public public if ! || ! throw new + decl_stmt java.awt.Point = decl_stmt java.awt.Point = decl_stmt org.apache.lucene.geo.Rectangle = call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() call SpatialContext.makeRectangle() decl_stmt org.apache.lucene.spatial.query.SpatialArgs = new return public public throw new public public return SpatialArgs protected protected try decl_stmt org.apache.lucene.spatial.query.SpatialArgs = call org.apache.lucene.spatial.query.SpatialArgsParser.parse(String,SpatialContext) call org.apache.lucene.spatial.query.SpatialArgsParser.parse(String,SpatialContext) call org.apache.lucene.spatial.query.SpatialArgsParser.parse(String,SpatialContext) call org.apache.lucene.spatial.query.SpatialArgsParser.parse(String,SpatialContext) call org.apache.lucene.spatial.query.SpatialArgsParser.parse(String,SpatialContext) if call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() != call org.apache.lucene.spatial.query.SpatialArgs.setDistErr(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErr(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErr(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErr(Double) call org.apache.lucene.spatial.query.SpatialArgs.setDistErr(Double) call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() call org.apache.lucene.spatial.query.SpatialArgs.getDistErr() * call org.apache.solr.util.DistanceUnits.multiplierFromThisUnitToDegrees() call org.apache.solr.util.DistanceUnits.multiplierFromThisUnitToDegrees() call org.apache.solr.util.DistanceUnits.multiplierFromThisUnitToDegrees() call org.apache.solr.util.DistanceUnits.multiplierFromThisUnitToDegrees() call org.apache.solr.util.DistanceUnits.multiplierFromThisUnitToDegrees() return catch throw catch throw new Query FunctionQuery String T SolrParams ValueSource protected protected decl_stmt T = decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt java.lang.String = == : call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt org.apache.lucene.queries.function.ValueSource = if == return call T.makeQuery() call T.makeQuery() call T.makeQuery() call T.makeQuery() call T.makeQuery() decl_stmt org.apache.lucene.queries.function.FunctionQuery = new if != && ! call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) call org.apache.solr.common.params.SolrParams.getBool(String) return decl_stmt org.apache.lucene.search.Query = call T.makeQuery() call T.makeQuery() call T.makeQuery() call T.makeQuery() call T.makeQuery() return new public public return call org.apache.solr.util.DistanceUnits.getEarthRadius() call org.apache.solr.util.DistanceUnits.getEarthRadius() call org.apache.solr.util.DistanceUnits.getEarthRadius() call org.apache.solr.util.DistanceUnits.getEarthRadius() call org.apache.solr.util.DistanceUnits.getEarthRadius() public < public < return DistanceUnits double protected protected if == return decl_stmt double final final switch case case return case return case = call org.apache.solr.util.DistanceUnits.multiplierFromDegreesToThisUnit() call org.apache.solr.util.DistanceUnits.multiplierFromDegreesToThisUnit() call org.apache.solr.util.DistanceUnits.multiplierFromDegreesToThisUnit() call org.apache.solr.util.DistanceUnits.multiplierFromDegreesToThisUnit() call org.apache.solr.util.DistanceUnits.multiplierFromDegreesToThisUnit() break default: decl_stmt org.apache.solr.util.DistanceUnits = if != = call org.apache.solr.util.DistanceUnits.multiplierFromDegreesToThisUnit() call org.apache.solr.util.DistanceUnits.multiplierFromDegreesToThisUnit() call org.apache.solr.util.DistanceUnits.multiplierFromDegreesToThisUnit() call org.apache.solr.util.DistanceUnits.multiplierFromDegreesToThisUnit() call org.apache.solr.util.DistanceUnits.multiplierFromDegreesToThisUnit() else throw new + + + return public public final final try return call decl Cache.get() call decl Cache.get() call decl Cache.get() call decl Cache.get() call decl Cache.get() catch throw public public return public public throws public public throw new + + public public return