org.apache.lucene.replicator.nrt java.io.BufferedOutputStream import java.io.EOFException import java.io.IOException import java.io.InputStream import java.net.ServerSocket import java.net.Socket import java.nio.file.Path import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.HashSet import java.util.Iterator import java.util.List import java.util.Locale import java.util.Map import java.util.Random import java.util.Set import java.util.concurrent.atomic.AtomicBoolean import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.document.FieldType import org.apache.lucene.document.StringField import org.apache.lucene.document.TextField import org.apache.lucene.index.DirectoryReader import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.IndexWriterConfig import org.apache.lucene.index.LogMergePolicy import org.apache.lucene.index.MergePolicy import org.apache.lucene.index.SegmentCommitInfo import org.apache.lucene.index.Term import org.apache.lucene.index.TieredMergePolicy import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.MatchAllDocsQuery import org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.SearcherFactory import org.apache.lucene.search.TermQuery import org.apache.lucene.search.TopDocs import org.apache.lucene.store.DataInput import org.apache.lucene.store.DataOutput import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import org.apache.lucene.util.ThreadInterruptedException import class org.apache.lucene.replicator.nrt.SimplePrimaryNode super super extends Random decl List byte decl Set byte byte byte decl int byte byte int byte byte byte byte byte byte FieldType byte byte decl int boolean byte byte byte public synchronized public synchronized if == return else return public synchronized public synchronized if = return else return public synchronized public synchronized + + + = = TieredMergePolicy IndexWriterConfig LogMergePolicy IndexWriter MockAnalyzer MergePolicy Directory private static private static throws decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.analysis.MockAnalyzer = new call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) decl_stmt org.apache.lucene.index.IndexWriterConfig = decl_stmt org.apache.lucene.index.MergePolicy = call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() if instanceof decl_stmt org.apache.lucene.index.TieredMergePolicy = call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) call org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int) else if instanceof decl_stmt org.apache.lucene.index.LogMergePolicy = call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) call org.apache.lucene.index.LogMergePolicy.setMergeFactor(int) decl_stmt org.apache.lucene.index.IndexWriter = new return Connection long long long decl Set decl int byte boolean MergePreCopy decl Iterator long protected protected < throws decl_stmt int = if == + return + + + + + + + decl_stmt MergePreCopy = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() try decl_stmt java.util.Set < = for : try decl_stmt org.apache.lucene.replicator.nrt.Connection = new call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call Connection.s() call Connection.s() call Connection.s() call Connection.s() call Connection.s() call Connection.s() call Connection.s() call Connection.s() call Connection.s() + call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() catch + + + decl_stmt long = decl_stmt long = while call MergePreCopy.finished() call MergePreCopy.finished() call MergePreCopy.finished() call MergePreCopy.finished() call MergePreCopy.finished() == try catch throw new if synchronized return decl_stmt long = if - > + + + call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() + - / = synchronized decl_stmt java.util.Iterator < = call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() call MergePreCopy.connections() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.apache.lucene.replicator.nrt.Connection = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() try decl_stmt long = decl_stmt boolean = while call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() call Connection.sockIn() > decl_stmt byte = call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() call Connection.in() if == = + + + else if != throw new + + + + + call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() = break if == && - > + + + + + call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() = if == && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == + call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() = catch + + + + + + + call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() finally call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() decl int decl int int int long private private throws decl_stmt int = decl_stmt int decl_stmt int synchronized = = + + if decl_stmt long = + for = < ++ decl_stmt int = try = new + + + catch + + + else - private static private static throws for : long byte long decl byte int long long String int CopyState byte int int int private private throws decl_stmt int = + + + decl_stmt byte = decl_stmt org.apache.lucene.replicator.nrt.CopyState if == = else if == = + + + else throw new + try if != decl_stmt byte = new decl_stmt int = decl_stmt long = while decl_stmt byte = if == break else if != throw new + decl_stmt java.lang.String = decl_stmt long = try = decl_stmt long = decl_stmt long = while < decl_stmt int = int - if if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) == && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() == call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() + + + + + decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) ^= << += += ++ + + + + + + catch + + return finally if != return byte private private throws + while while if > break if return decl_stmt byte try = catch return if == byte else if == byte else if == byte else if == byte else if == byte else if == byte break else throw new + Document int String String private private throws decl_stmt int = decl_stmt org.apache.lucene.document.Document = new for = < ++ decl_stmt java.lang.String = decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) || call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new else throw new + Document int String String String private private throws decl_stmt int = decl_stmt org.apache.lucene.document.Document = new decl_stmt java.lang.String = for = < ++ decl_stmt java.lang.String = decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new else if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) new else throw new + new String private private throws decl_stmt java.lang.String = new int IndexSearcher Connection long decl int int byte decl int int int boolean throws while decl_stmt byte while if > break if return try = catch break switch case break case break case break case break case decl_stmt org.apache.lucene.search.IndexSearcher = try decl_stmt long = call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() decl_stmt int = call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) new new finally continue continue case decl_stmt org.apache.lucene.search.IndexSearcher = try decl_stmt long = call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() decl_stmt int = call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) new finally continue continue case decl_stmt int = continue continue case byte break case byte break case decl_stmt int = decl_stmt int = new decl_stmt int = new for = < ++ = = byte break case decl_stmt int = + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + synchronized for : + decl_stmt boolean = synchronized for : if == = break if continue decl_stmt org.apache.lucene.replicator.nrt.Connection = new if == call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call sun.rmi.transport.Connection.close() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call Connection.out() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call org.apache.lucene.replicator.nrt.Connection.flush() call Connection.s() call Connection.s() call Connection.s() call Connection.s() call Connection.s() call Connection.s() call Connection.s() call Connection.s() call Connection.s() break default: throw new + + + break IndexSearcher TopDocs Document long int decl List private private throws decl_stmt org.apache.lucene.search.IndexSearcher = try decl_stmt long = call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() decl_stmt int = call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) call org.apache.lucene.search.IndexSearcher.count(Query) new new if < + + + decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new decl_stmt java.util.List < = new <> for : decl_stmt org.apache.lucene.document.Document = call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) for : + throw new + + + + + if != finally