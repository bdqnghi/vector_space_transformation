org.apache.solr.core java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import java.util.Random import java.util.concurrent.atomic.AtomicInteger import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.store.Directory import org.apache.solr.SolrTestCaseJ4 import org.apache.solr.common.SolrException import org.apache.solr.core.DirectoryFactory.DirContext import org.junit.Test import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.core.CachingDirectoryFactoryTest super super extends decl Map boolean Logger int int Thread Thread CachingDirectoryFactory Thread int decl List Thread public public throws decl_stmt org.apache.solr.core.CachingDirectoryFactory final final = new decl_stmt java.util.List < = new <> decl_stmt int = for = < ++ decl_stmt java.lang.Thread = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() for = < ++ decl_stmt java.lang.Thread = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() for = < ++ decl_stmt java.lang.Thread = new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() : decl_stmt java.lang.Thread = new public public try call org.apache.solr.core.CachingDirectoryFactory.close() call org.apache.solr.core.CachingDirectoryFactory.close() call org.apache.solr.core.CachingDirectoryFactory.close() call org.apache.solr.core.CachingDirectoryFactory.close() call org.apache.solr.core.CachingDirectoryFactory.close() catch throw new call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() = for : synchronized decl_stmt int = call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() if > for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() decl_stmt int = for = < ++ call org.apache.solr.core.CachingDirectoryFactory.release(Directory) call org.apache.solr.core.CachingDirectoryFactory.release(Directory) call org.apache.solr.core.CachingDirectoryFactory.release(Directory) call org.apache.solr.core.CachingDirectoryFactory.release(Directory) call org.apache.solr.core.CachingDirectoryFactory.release(Directory) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) public public try catch throw new int Tracker decl List public public = while ! try + catch throw new synchronized decl_stmt int = call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() decl_stmt java.util.List < = new <> call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if > decl_stmt com.sun.demo.jvmti.hprof.Tracker = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - + try if call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() > if > if else call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() catch throw new + + + String Tracker public public = while ! try + catch throw new try decl_stmt java.lang.String if = + else if = + + + else = + + + + + synchronized decl_stmt com.sun.demo.jvmti.hprof.Tracker = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new = = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else = call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch throw new String Tracker public public = while ! try + catch throw new decl_stmt java.lang.String = + synchronized decl_stmt com.sun.demo.jvmti.hprof.Tracker = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != && call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() > try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() continue call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt() call Tracker.refCnt()