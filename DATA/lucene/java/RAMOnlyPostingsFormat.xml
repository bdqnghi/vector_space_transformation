org.apache.lucene.codecs.ramonly java.io.IOException import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.Iterator import java.util.List import java.util.Map import java.util.SortedMap import java.util.TreeMap import java.util.concurrent.atomic.AtomicInteger import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.FieldsConsumer import org.apache.lucene.codecs.FieldsProducer import org.apache.lucene.codecs.PostingsFormat import org.apache.lucene.codecs.TermStats import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.Fields import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.SegmentReadState import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.store.IndexInput import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.Accountable import org.apache.lucene.util.Accountables import org.apache.lucene.util.BytesRef import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.IOUtils import org.apache.lucene.util.RamUsageEstimator import class org.apache.lucene.codecs.ramonly.RAMOnlyPostingsFormat super super extends int String int decl Map String AtomicInteger public public return public public return public < public < return public public long public public decl_stmt long = for : += return public < public < return public public throws long public public decl_stmt long = for : += return public public return public public return public public throws return public public throws return public public return new public public return >= public public return >= public public return >= public public return long public public decl_stmt long = for : += return long public public decl_stmt long = += != : if != for : += != : return boolean int int long BytesRef PostingsEnum long RAMField long int IndexOptions Terms int int FixedBitSet boolean FieldInfo int RAMPostingsWriterImpl BytesRef int TermsEnum boolean boolean public public throws for : decl_stmt org.apache.lucene.index.Terms = if == continue decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt org.apache.lucene.index.FieldInfo = call decl Map.fieldInfos() call decl Map.fieldInfos() call decl Map.fieldInfos() call decl Map.fieldInfos() call decl Map.fieldInfos() call decl Map.fieldInfos() call decl Map.fieldInfos() call decl Map.fieldInfos() call decl Map.fieldInfos() if call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() >= throw new decl_stmt RAMField = new decl_stmt org.apache.lucene.util.FixedBitSet = new call decl Map.segmentInfo() call decl Map.segmentInfo() call decl Map.segmentInfo() call decl Map.segmentInfo() call decl Map.segmentInfo() call decl Map.segmentInfo() call decl Map.segmentInfo() call decl Map.segmentInfo() call decl Map.segmentInfo() decl_stmt long = decl_stmt long = decl_stmt org.apache.lucene.index.PostingsEnum = decl_stmt int decl_stmt IndexOptions = call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() call org.apache.lucene.index.FieldInfo.getIndexOptions() decl_stmt boolean = call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() >= decl_stmt boolean = call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() >= decl_stmt boolean = call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() call IndexOptions.compareTo() >= decl_stmt boolean = call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() call org.apache.lucene.index.FieldInfo.hasPayloads() if == = else if == = else if == if = else = else if = | else = while decl_stmt org.apache.lucene.util.BytesRef = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == break decl_stmt RAMPostingsWriterImpl = = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) decl_stmt int = decl_stmt long = while decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() if == break call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) call org.apache.lucene.util.FixedBitSet.set(int) ++ decl_stmt int if = call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() call PostingsEnum.freq() += else = - call RAMPostingsWriterImpl.startDoc() call RAMPostingsWriterImpl.startDoc() call RAMPostingsWriterImpl.startDoc() call RAMPostingsWriterImpl.startDoc() call RAMPostingsWriterImpl.startDoc() if for = < ++ decl_stmt int = call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() decl_stmt org.apache.lucene.util.BytesRef = call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() call PostingsEnum.getPayload() : decl_stmt int decl_stmt int if = call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() call PostingsEnum.startOffset() = call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() call PostingsEnum.endOffset() else = - = - call RAMPostingsWriterImpl.addPosition() call RAMPostingsWriterImpl.addPosition() call RAMPostingsWriterImpl.addPosition() call RAMPostingsWriterImpl.addPosition() call RAMPostingsWriterImpl.addPosition() call RAMPostingsWriterImpl.finishDoc() call RAMPostingsWriterImpl.finishDoc() call RAMPostingsWriterImpl.finishDoc() call RAMPostingsWriterImpl.finishDoc() call RAMPostingsWriterImpl.finishDoc() new += += call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() public public throws = String public public decl_stmt java.lang.String final final = = new return public public assert > assert == = public public = = = public public = public public = new = decl byte public public assert == - assert == - = if != && > if == = new decl_stmt byte = = new ++ public public assert == public public if == if == = else = if = return new else return public public = = if return else if > return else return public public throw new public public throw new public public return new public public return public public return public public return new public public throws return public public ++ if < = = return else return public public throws return public public return public public assert < return ++ public public return - public public return - public public if != && - != return new - else return public public return boolean String int RAMFieldsConsumer RAMPostings IndexOutput public public throws decl_stmt int final final = call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() decl_stmt java.lang.String final final = decl_stmt org.apache.lucene.store.IndexOutput = decl_stmt boolean = try call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() = finally if ! else decl_stmt RAMPostings final final = new decl_stmt RAMFieldsConsumer final final = new synchronized call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return String int boolean IndexInput public public throws decl_stmt java.lang.String final final = decl_stmt org.apache.lucene.store.IndexInput = decl_stmt boolean = decl_stmt int final final try = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() = finally if ! else synchronized return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get()