org.apache.solr.search.function java.io.FileOutputStream import java.io.OutputStreamWriter import java.io.Writer import java.nio.charset.StandardCharsets import java.util.ArrayList import java.util.Arrays import java.util.List import java.util.Random import org.apache.lucene.index.FieldInvertState import org.apache.lucene.search.similarities.ClassicSimilarity import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.search.similarities.TFIDFSimilarity import org.apache.solr.SolrTestCaseJ4 import org.junit.BeforeClass import org.junit.Test import class org.apache.solr.search.function.TestFunctionQuery super super extends long String public static public static throws Writer String String decl_stmt java.lang.String = decl_stmt java.lang.String = + + + + ++ try decl_stmt Writer = new new call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.close() call Writer.close() call Writer.close() call Writer.close() call Writer.close() catch throw new String for : decl_stmt java.lang.String = if != else if < if != else if < StringBuilder public public decl_stmt java.lang.StringBuilder = new for : if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) continue call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() String decl List decl List String < decl_stmt java.lang.String = decl_stmt java.util.List < = new <> if != for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.util.List < = new <> for = < += decl_stmt java.lang.String = + + + + + + + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new decl float decl_stmt float = new - - - - - - - - - - - - - - - - - - - - - - public public StringBuilder decl float int String Random decl float float decl float boolean int Object public public throws decl_stmt java.lang.String = decl_stmt float = - - - - - - decl_stmt java.lang.Object = == == != decl_stmt java.util.Random = for = < ++ decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + decl_stmt boolean = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() for = < ++ decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt float = = = if decl_stmt float = new for = < ++ = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) - decl_stmt java.lang.StringBuilder = new for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + + + call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt float = new * for = < ++ * = * + = for = < ++ * = * + = String String public public throws decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = - String String public public throws decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = - String String public public throws for = < ++ + decl_stmt java.lang.String = decl_stmt java.lang.String = = try catch FieldInvertState float long Similarity TFIDFSimilarity public public decl_stmt org.apache.lucene.search.similarities.TFIDFSimilarity = decl_stmt org.apache.lucene.search.similarities.Similarity = + call Similarity.getClass() call Similarity.getClass() call Similarity.getClass() call Similarity.getClass() call Similarity.getClass() instanceof = + call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() + + call TFIDFSimilarity.tf() call TFIDFSimilarity.tf() call TFIDFSimilarity.tf() call TFIDFSimilarity.tf() call TFIDFSimilarity.tf() + + call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() call TFIDFSimilarity.idf() + + call TFIDFSimilarity.tf() call TFIDFSimilarity.tf() call TFIDFSimilarity.tf() call TFIDFSimilarity.tf() call TFIDFSimilarity.tf() + decl_stmt org.apache.lucene.index.FieldInvertState = new call org.apache.lucene.index.FieldInvertState.setBoost(float) call org.apache.lucene.index.FieldInvertState.setBoost(float) call org.apache.lucene.index.FieldInvertState.setBoost(float) call org.apache.lucene.index.FieldInvertState.setBoost(float) call org.apache.lucene.index.FieldInvertState.setBoost(float) call org.apache.lucene.index.FieldInvertState.setLength(int) call org.apache.lucene.index.FieldInvertState.setLength(int) call org.apache.lucene.index.FieldInvertState.setLength(int) call org.apache.lucene.index.FieldInvertState.setLength(int) call org.apache.lucene.index.FieldInvertState.setLength(int) decl_stmt long = call org.apache.lucene.search.similarities.TFIDFSimilarity.computeNorm(FieldInvertState) call org.apache.lucene.search.similarities.TFIDFSimilarity.computeNorm(FieldInvertState) call org.apache.lucene.search.similarities.TFIDFSimilarity.computeNorm(FieldInvertState) call org.apache.lucene.search.similarities.TFIDFSimilarity.computeNorm(FieldInvertState) call org.apache.lucene.search.similarities.TFIDFSimilarity.computeNorm(FieldInvertState) decl_stmt float = call TFIDFSimilarity.decodeNormValue() call TFIDFSimilarity.decodeNormValue() call TFIDFSimilarity.decodeNormValue() call TFIDFSimilarity.decodeNormValue() call TFIDFSimilarity.decodeNormValue() byte + + public public throws String String String String public public throws decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = public public throws / / + / + + / + public public throws String public public throws decl_stmt java.lang.String = float + + public public throws + * String Object String decl float public public decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt float = - - - - - - decl_stmt java.lang.Object = == == != String String decl float public public decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt float = - - - public public throws public public throws String public public throws for : new decl_stmt java.lang.String final final = + + + + + + + + +