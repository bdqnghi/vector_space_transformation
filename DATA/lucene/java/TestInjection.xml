org.apache.solr.util java.lang.invoke.MethodHandles import java.util.Collections import java.util.HashSet import java.util.Random import java.util.Set import java.util.Timer import java.util.TimerTask import java.util.regex.Matcher import java.util.regex.Pattern import org.apache.solr.common.NonExistentCoreException import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.util.Pair import org.apache.solr.core.CoreContainer import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.util.TestInjection Logger Pattern String String Random decl Set String int String String String String public static public static = = = = = = = for : decl Pair int int boolean public static public static if != decl_stmt org.apache.solr.common.util.Pair < = decl_stmt boolean = call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() decl_stmt int = call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() if && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) >= - decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try * catch return TimerTask Thread boolean Timer decl Pair int public static public static if && != decl_stmt org.apache.solr.common.util.Pair < = decl_stmt boolean = call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() decl_stmt int = call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() if && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) >= - if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() throw new else decl_stmt java.lang.Thread final final = decl_stmt java.util.TimerTask = new public public try call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) catch call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call java.lang.Thread.interrupt() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() decl_stmt org.apache.solr.util.stats.Timer = new call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call java.util.Timer.schedule(TimerTask,Date,long) call java.util.Timer.schedule(TimerTask,Date,long) call java.util.Timer.schedule(TimerTask,Date,long) call java.util.Timer.schedule(TimerTask,Date,long) call java.util.Timer.schedule(TimerTask,Date,long) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) return public public try call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) catch call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() decl Pair int boolean public static public static if != decl_stmt org.apache.solr.common.util.Pair < = decl_stmt boolean = call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() decl_stmt int = call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() if && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) >= - throw new return decl Pair int boolean public static public static if != decl_stmt org.apache.solr.common.util.Pair < = decl_stmt boolean = call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() decl_stmt int = call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() if && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) >= - throw new return decl Pair int boolean public static public static if != decl_stmt org.apache.solr.common.util.Pair < = decl_stmt boolean = call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() decl_stmt int = call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() if && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) >= - throw new + return decl Pair int long boolean public static public static if != decl_stmt org.apache.solr.common.util.Pair < = decl_stmt boolean = call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() decl_stmt int = call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() if && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) >= - decl_stmt long = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try catch return decl Pair int long boolean public static public static if != decl_stmt org.apache.solr.common.util.Pair < = decl_stmt boolean = call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() call decl Pair.getKey() decl_stmt int = call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() call decl Pair.getValue() if && call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) >= - decl_stmt long = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try catch return String Matcher String private static < private static < decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if ! call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() call java.util.regex.Matcher.matches() throw new + decl_stmt java.lang.String = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) decl_stmt java.lang.String = if call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() call java.util.regex.Matcher.groupCount() == = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) return new <>