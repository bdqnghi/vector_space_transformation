org.apache.lucene.search.suggest.analyzing java.io.IOException import java.util.ArrayList import java.util.Comparator import java.util.List import java.util.Map import java.util.Set import java.util.TreeSet import org.apache.lucene.analysis.Analyzer import org.apache.lucene.document.FieldType import org.apache.lucene.document.TextField import org.apache.lucene.index.BinaryDocValues import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.MultiDocValues import org.apache.lucene.index.Terms import org.apache.lucene.index.TermsEnum import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.FieldDoc import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.TopFieldDocs import org.apache.lucene.search.suggest.Lookup import org.apache.lucene.store.Directory import org.apache.lucene.util.BytesRef import class org.apache.lucene.search.suggest.analyzing.BlendedInfixSuggester super super extends Double int BlenderType double decl Comparator int public < public < < throws return public < public < < throws return public < public < < throws return public < public < throws return * FieldType protected protected decl_stmt org.apache.solr.schema.FieldType = new call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setIndexOptions(IndexOptions) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectorPositions(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) call org.apache.solr.schema.FieldType.setOmitNorms(boolean) return double int BinaryDocValues long String decl TreeSet long FieldDoc LookupResult BinaryDocValues BytesRef protected < protected < < throws decl_stmt BinaryDocValues = assert != decl_stmt BinaryDocValues = decl_stmt java.util.TreeSet < = new <> decl_stmt int = / for = < ++ decl_stmt org.apache.lucene.search.FieldDoc = decl_stmt java.lang.String final final = call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() decl_stmt long = decl_stmt org.apache.lucene.util.BytesRef if != = call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() call BinaryDocValues.get() else = decl_stmt double if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = else = decl_stmt long = * decl_stmt LookupResult if = new else = new return new <> call decl TreeSet.descendingSet() call decl TreeSet.descendingSet() call decl TreeSet.descendingSet() call decl TreeSet.descendingSet() call decl TreeSet.descendingSet() private static private static < if >= if < else return PostingsEnum BytesRef String Terms TermsEnum int Integer private private < throws decl_stmt org.apache.lucene.index.Terms = decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt java.lang.Integer = decl_stmt org.apache.lucene.util.BytesRef while = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() != decl_stmt java.lang.String = call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() if || != && call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) decl_stmt org.apache.lucene.index.PostingsEnum = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() decl_stmt int = call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() call PostingsEnum.nextPosition() if < = return double protected protected decl_stmt double switch case = - * break case = / + break case = / + break default: = return int public public if > return else if < return - decl_stmt int = if != return if != return return