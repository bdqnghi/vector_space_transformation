org.apache.solr.response java.io.IOException import java.io.PrintWriter import java.io.Writer import java.lang.invoke.MethodHandles import java.util.List import java.util.ArrayList import org.apache.lucene.index.DocValues import org.apache.lucene.index.LeafReader import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.MultiDocValues import org.apache.lucene.index.NumericDocValues import org.apache.lucene.index.SortedDocValues import org.apache.lucene.index.SortedSetDocValues import org.apache.lucene.search.DocIdSetIterator import org.apache.lucene.search.Sort import org.apache.lucene.search.SortField import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BitSetIterator import org.apache.lucene.util.BytesRef import org.apache.lucene.util.CharsRefBuilder import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.LongValues import org.apache.solr.common.SolrException import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.NamedList import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.SolrRequestInfo import org.apache.solr.schema.FieldType import org.apache.solr.schema.IndexSchema import org.apache.solr.schema.SchemaField import org.apache.solr.schema.StrField import org.apache.solr.schema.TrieDoubleField import org.apache.solr.schema.TrieFloatField import org.apache.solr.schema.TrieIntField import org.apache.solr.schema.TrieLongField import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.search.SortSpec import org.apache.solr.search.SyntaxError import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.response.SortingResponseWriter super super implements Logger decl char public public public public return SortDoc DocIdSetIterator Throwable int decl FieldWriter Exception SortDoc SolrParams Integer Sort int int SortSpec decl SortDoc String SolrRequestInfo SolrIndexSearcher Exception decl String decl List String int SortQueue SortDoc decl FixedBitSet boolean int public public throws decl_stmt Exception = if != if ! instanceof return decl_stmt org.apache.solr.request.SolrRequestInfo = decl_stmt org.apache.solr.search.SortSpec = call org.apache.solr.request.SolrRequestInfo.getResponseBuilder() call org.apache.solr.request.SolrRequestInfo.getResponseBuilder() call org.apache.solr.request.SolrRequestInfo.getResponseBuilder() call org.apache.solr.request.SolrRequestInfo.getResponseBuilder() call org.apache.solr.request.SolrRequestInfo.getResponseBuilder() decl_stmt Exception = if == = new new decl_stmt org.apache.solr.search.SolrIndexSearcher = decl_stmt org.apache.lucene.search.Sort = call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SolrIndexSearcher.weightSort(Sort) call org.apache.solr.search.SortSpec.getSort() call org.apache.solr.search.SortSpec.getSort() call org.apache.solr.search.SortSpec.getSort() call org.apache.solr.search.SortSpec.getSort() call org.apache.solr.search.SortSpec.getSort() if == = new new if != && call org.apache.lucene.search.Sort.needsScores() call org.apache.lucene.search.Sort.needsScores() call org.apache.lucene.search.Sort.needsScores() call org.apache.lucene.search.Sort.needsScores() call org.apache.lucene.search.Sort.needsScores() = new new decl_stmt org.apache.lucene.util.FixedBitSet = decl_stmt java.lang.Integer = if == = new new decl_stmt int = call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() decl_stmt org.apache.solr.common.params.SolrParams = decl_stmt java.lang.String = call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() call SolrParams.get() decl_stmt java.lang.String = if == = new new else = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) for = < ++ = if = new new break decl_stmt FieldWriter = try = catch = if != return + + decl_stmt java.util.List < = decl_stmt SortDoc = call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() call org.apache.lucene.search.Sort.getSort() decl_stmt int = decl_stmt int = decl_stmt SortQueue = new decl_stmt SortDoc = new decl_stmt boolean = while < call SortQueue.reset() call SortQueue.reset() call SortQueue.reset() call SortQueue.reset() call SortQueue.reset() decl_stmt SortDoc = call SortQueue.top() call SortQueue.top() call SortQueue.top() call SortQueue.top() call SortQueue.top() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ call SortDoc.setNextReader() call SortDoc.setNextReader() call SortDoc.setNextReader() call SortDoc.setNextReader() call SortDoc.setNextReader() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.search.DocIdSetIterator = new decl_stmt int = - while = call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() call org.apache.lucene.search.DocIdSetIterator.nextDoc() != call SortDoc.setValues() call SortDoc.setValues() call SortDoc.setValues() call SortDoc.setValues() call SortDoc.setValues() if call SortDoc.lessThan() call SortDoc.lessThan() call SortDoc.lessThan() call SortDoc.lessThan() call SortDoc.lessThan() call SortDoc.setValues() call SortDoc.setValues() call SortDoc.setValues() call SortDoc.setValues() call SortDoc.setValues() = call SortQueue.updateTop() call SortQueue.updateTop() call SortQueue.updateTop() call SortQueue.updateTop() call SortQueue.updateTop() decl_stmt int = - for = < ++ decl_stmt SortDoc = call SortQueue.pop() call SortQueue.pop() call SortQueue.pop() call SortQueue.pop() call SortQueue.pop() if > - ++ = += + try for = >= -- decl_stmt SortDoc = if = call SortDoc.reset() call SortDoc.reset() call SortDoc.reset() call SortDoc.reset() call SortDoc.reset() catch decl_stmt java.lang.Throwable = while != decl_stmt java.lang.String = call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() if != && call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) throw new = call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() call java.lang.Throwable.getCause() if instanceof throw else throw new public public public public return int FixedBitSet int LeafReaderContext protected protected < throws decl_stmt int = decl_stmt org.apache.lucene.util.FixedBitSet = call org.apache.lucene.util.FixedBitSet.clear(int) call org.apache.lucene.util.FixedBitSet.clear(int) call org.apache.lucene.util.FixedBitSet.clear(int) call org.apache.lucene.util.FixedBitSet.clear(int) call org.apache.lucene.util.FixedBitSet.clear(int) decl_stmt org.apache.lucene.index.LeafReaderContext = decl_stmt int = for : if call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() call org.apache.lucene.index.LeafReaderContext.reader() ++ protected protected throws if SchemaField String decl FieldWriter FieldType IndexSchema boolean protected protected throws decl_stmt org.apache.solr.schema.IndexSchema = decl_stmt FieldWriter = new for = < ++ decl_stmt java.lang.String = decl_stmt org.apache.solr.schema.SchemaField = try = call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) catch throw new if ! call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() throw new + decl_stmt boolean = call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() call org.apache.solr.schema.SchemaField.multiValued() decl_stmt org.apache.solr.schema.FieldType = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() if instanceof if = new else = new else if instanceof if = new else = new else if instanceof if = new else = new else if instanceof if = new else = new else if instanceof if = new else = new else throw new return FieldType boolean SchemaField decl SortValue String LeafReader SortedDocValues SortField IndexSchema private private throws decl_stmt org.apache.solr.response.SortValue = new decl_stmt org.apache.solr.schema.IndexSchema = for = < ++ decl_stmt org.apache.lucene.search.SortField = decl_stmt java.lang.String = call org.apache.lucene.search.SortField.getField() call org.apache.lucene.search.SortField.getField() call org.apache.lucene.search.SortField.getField() call org.apache.lucene.search.SortField.getField() call org.apache.lucene.search.SortField.getField() decl_stmt boolean = call org.apache.lucene.search.SortField.getReverse() call org.apache.lucene.search.SortField.getReverse() call org.apache.lucene.search.SortField.getReverse() call org.apache.lucene.search.SortField.getReverse() call org.apache.lucene.search.SortField.getReverse() decl_stmt org.apache.solr.schema.SchemaField = call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) call org.apache.solr.schema.IndexSchema.getField(String) decl_stmt org.apache.solr.schema.FieldType = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() if ! call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() call org.apache.solr.schema.SchemaField.hasDocValues() throw new + if instanceof if = new new else = new new else if instanceof if = new new else = new new else if instanceof if = new new else = new new else if instanceof if = new new else = new new else if instanceof decl_stmt org.apache.lucene.index.LeafReader = decl_stmt org.apache.lucene.index.SortedDocValues = call LeafReader.getSortedDocValues() call LeafReader.getSortedDocValues() call LeafReader.getSortedDocValues() call LeafReader.getSortedDocValues() call LeafReader.getSortedDocValues() if = new new else = new new else throw new if == return new else if == return new else if == return new else if == return new else throw new protected protected return decl Object private private decl_stmt java.lang.Object = = new for = < ++ = = = decl Object private private decl_stmt java.lang.Object = if != - = else public public throws = for : public public = - public public throws = for : decl SortValue public public throws = = decl_stmt org.apache.solr.response.SortValue = for = < ++ decl SortValue public public decl_stmt org.apache.solr.response.SortValue = new for = < ++ = return new decl SortValue int SortDoc public public if == - return decl_stmt SortDoc = decl_stmt org.apache.solr.response.SortValue = for = < ++ decl_stmt int = if < return if > return return + < + public public return public public throws = public public = - public public throws = public public throws = = public public return new int SingleValueSortDoc public public decl_stmt SingleValueSortDoc = decl_stmt int = if == - return else if == return else return + > + SingleValueSortDoc public public decl_stmt SingleValueSortDoc = return public public return + + public public throws = public public = - public public throws = public public throws = = public public return new int DoubleValueSortDoc public public decl_stmt DoubleValueSortDoc = decl_stmt int = if == - return else if == return else = if == - return else if == return else return + > + int DoubleValueSortDoc public public decl_stmt DoubleValueSortDoc = decl_stmt int = if == return else return public public throws = public public = - public public throws = public public throws = = public public return new int TripleValueSortDoc public public decl_stmt TripleValueSortDoc = decl_stmt int = if == - return else if == return else = if == - return else if == return else = if == - return else if == return else return + > + int TripleValueSortDoc public public decl_stmt TripleValueSortDoc = decl_stmt int = if == = if == return else return else return public public throws = public public = - public public throws = public public throws = = public public return new int QuadValueSortDoc public public decl_stmt QuadValueSortDoc = decl_stmt int = if == - return else if == return else = if == - return else if == return else = if == - return else if == return else = if == - return else if == return else return + > + int QuadValueSortDoc public public decl_stmt QuadValueSortDoc = decl_stmt int = if == = if == = if == return else return else return else return public public return new public public throws = public public = int IntValue public public decl_stmt IntValue = return public public = public public = public public return public public if < return - else if > return else return public public return public public if < return else if > return - else return public public return new public public throws = public public = LongValue public public decl_stmt com.sun.jdi.LongValue = = LongValue public public decl_stmt com.sun.jdi.LongValue = return public public = public public return public public if < return - else if > return else return public public return public public if < return else if > return - else return public public return new public public throws = public public = int FloatValue public public decl_stmt com.sun.jdi.FloatValue = = public public = FloatValue public public decl_stmt com.sun.jdi.FloatValue = return public public return - public public if < return - else if > return else return public public return public public if < return else if > return - else return public public return new public public throws = public public = DoubleValue public public decl_stmt DoubleValue = = public public = DoubleValue public public decl_stmt DoubleValue = return public public return - public public if < return - else if > return else return public public return public public if < return else if > return - else return public public return new int public public decl_stmt int = if < = - else if != = int else = StringValue public public decl_stmt StringValue = = public public = if != = = else = public public = StringValue public public decl_stmt StringValue = return public public return NumericDocValues int public public throws decl_stmt NumericDocValues = decl_stmt int = int call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() if > return SortedSetDocValues BytesRef decl List long int public public throws decl_stmt org.apache.lucene.index.SortedSetDocValues = call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() call SortedSetDocValues.setDocument() decl_stmt java.util.List < = new decl_stmt long = - while = call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() call SortedSetDocValues.nextOrd() != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return if > decl_stmt int = for : decl_stmt org.apache.lucene.util.BytesRef = call SortedSetDocValues.lookupOrd() call SortedSetDocValues.lookupOrd() call SortedSetDocValues.lookupOrd() call SortedSetDocValues.lookupOrd() call SortedSetDocValues.lookupOrd() if > if ! if ! ++ return NumericDocValues long public public throws decl_stmt NumericDocValues = decl_stmt long = call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() if > return NumericDocValues int public public throws decl_stmt NumericDocValues = decl_stmt int = int call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() if > return NumericDocValues long public public throws decl_stmt NumericDocValues = if > decl_stmt long = call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() call NumericDocValues.get() return SortedDocValues int BytesRef public public throws decl_stmt org.apache.lucene.index.SortedDocValues = decl_stmt int = call SortedDocValues.getOrd() call SortedDocValues.getOrd() call SortedDocValues.getOrd() call SortedDocValues.getOrd() call SortedDocValues.getOrd() if == - return decl_stmt org.apache.lucene.util.BytesRef = call SortedDocValues.lookupOrd() call SortedDocValues.lookupOrd() call SortedDocValues.lookupOrd() call SortedDocValues.lookupOrd() call SortedDocValues.lookupOrd() if > return char private private throws for = < ++ decl_stmt char = if > && != && < || == continue switch case case break case break case break case break case break case break case case break default: if <= else protected static protected static throws >>> >>> & >>> & & protected protected return public final public final ++ = return T public public if < return else if > && ! decl_stmt T = = return else return public final public final return T public final public final if > decl_stmt T = = = -- return else return public final public final return public final public final return public final public final for = <= ++ = = int T int private final private final decl_stmt int = decl_stmt T = decl_stmt int = >>> while > && = = = >>> = int T int int private final private final decl_stmt int = decl_stmt T = decl_stmt int = << decl_stmt int = + if <= && = while <= && = = = << = + if <= && = = public final public final return