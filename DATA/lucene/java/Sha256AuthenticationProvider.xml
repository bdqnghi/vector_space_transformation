org.apache.solr.security java.lang.invoke.MethodHandles import java.nio.charset.StandardCharsets import java.security.MessageDigest import java.security.NoSuchAlgorithmException import java.security.SecureRandom import java.util.Collections import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Random import java.util.Set import com.google.common.collect.ImmutableSet import org.apache.commons.codec.binary.Base64 import org.apache.solr.util.CommandOperation import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.handler.admin.SecurityConfHandler.getMapValue import class org.apache.solr.security.Sha256AuthenticationProvider super super implements decl Map decl Set String Logger decl Map Random decl byte String String static static if == || == return decl_stmt java.util.Random final final = new decl_stmt byte = new call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) decl_stmt java.lang.String = decl_stmt java.lang.String = + + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl Map String public public < if != = else = = + + = new <> decl_stmt java.util.Map < = < if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt java.lang.String = if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + continue call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl String String String public public decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == || call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() return = call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() decl_stmt java.lang.String = if call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) decl_stmt java.lang.String = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) if > && ! = = return call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) public < public < return decl byte MessageDigest public static public static decl_stmt java.security.MessageDigest try = catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return if != call java.security.MessageDigest.reset() call java.security.MessageDigest.reset() call java.security.MessageDigest.reset() call java.security.MessageDigest.reset() call java.security.MessageDigest.reset() call java.security.MessageDigest.update(byte,int,int) call java.security.MessageDigest.update(byte,int,int) call java.security.MessageDigest.update(byte,int,int) call java.security.MessageDigest.update(byte,int,int) call java.security.MessageDigest.update(byte,int,int) decl_stmt byte = call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.reset() call java.security.MessageDigest.reset() call java.security.MessageDigest.reset() call java.security.MessageDigest.reset() call java.security.MessageDigest.reset() = call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.digest(byte) call java.security.MessageDigest.digest(byte) return Map decl Map decl List Map public < public < < < for : if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return if return if decl_stmt java.util.List < = decl_stmt java.util.Map = if == || ! call java.util.Map.keySet() call java.util.Map.keySet() call java.util.Map.keySet() call java.util.Map.keySet() call java.util.Map.keySet() + return for : call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.remove(Object) return if decl_stmt java.util.Map = decl_stmt java.util.Map = for : call java.util.Map.entrySet() call java.util.Map.entrySet() call java.util.Map.entrySet() call java.util.Map.entrySet() call java.util.Map.entrySet() decl_stmt Entry = if call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() == || call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() == return call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getKey() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() call decl Map.getValue() return