org.apache.solr.core java.io.File import java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collection import java.util.HashMap import java.util.HashSet import java.util.IdentityHashMap import java.util.List import java.util.Map import java.util.Set import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.store.Directory import org.apache.lucene.store.LockFactory import org.apache.lucene.util.IOUtils import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.ObjectReleaseTracker import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.core.CachingDirectoryFactory super super extends decl Set decl Map Double Double Double boolean Double decl Map decl Map Logger public public if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() = = public public return + + + + + + + decl List public public synchronized if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() throw new + + + decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() CacheValue boolean public public throws synchronized decl_stmt CacheValue = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + + + = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() if == && ! decl_stmt boolean = if String int decl Collection decl Set boolean public public throws synchronized call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() + = decl_stmt java.util.Collection < = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() try assert > - : decl_stmt int = while != if ++ >= decl_stmt java.lang.String = + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new assert == : catch = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() decl_stmt java.util.Set < = new <> for : try for : assert == : call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + decl_stmt boolean = if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() catch for : call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + try catch for : private private call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl List decl Collection decl Collection boolean private private call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + decl_stmt java.util.List < = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != for : try catch = if decl_stmt java.util.Collection < = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() decl_stmt java.util.Collection < = new <> call decl Collection.remove() call decl Collection.remove() call decl Collection.remove() call decl Collection.remove() call decl Collection.remove() for : if && ! if ! && = return decl_stmt boolean = for : if == = for : if ! call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + try catch else call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if != for : try catch return private private call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) != : try if != && && instanceof call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + assert catch int int private private decl_stmt int = decl_stmt int = return + && > File public public throws decl_stmt File = new return call File.canRead() call File.canRead() call File.canRead() call File.canRead() call File.canRead() && call File.list() call File.list() call File.list() call File.list() call File.list() > Directory String CacheValue CacheValue boolean public final public final throws decl_stmt java.lang.String = synchronized if throw new decl_stmt CacheValue final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt org.apache.lucene.store.Directory = if != = if == = assert decl_stmt boolean = try decl_stmt CacheValue = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + = finally if ! else ++ call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return CacheValue public public synchronized if throw new decl_stmt CacheValue = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + ++ call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() public public = = = = CacheValue boolean public public throws if == throw new synchronized decl_stmt CacheValue = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + + + call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + + - + + -- assert >= : if == && && ! decl_stmt boolean = if public public throws public public throws CacheValue public public throws synchronized decl_stmt CacheValue = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + call CacheValue.setDeleteOnClose() call CacheValue.setDeleteOnClose() call CacheValue.setDeleteOnClose() call CacheValue.setDeleteOnClose() call CacheValue.setDeleteOnClose() CacheValue public public throws synchronized decl_stmt CacheValue = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + call CacheValue.setDeleteOnClose() call CacheValue.setDeleteOnClose() call CacheValue.setDeleteOnClose() call CacheValue.setDeleteOnClose() call CacheValue.setDeleteOnClose() protected synchronized protected synchronized throws public public throws = return protected protected if = - return decl HashSet public synchronized < public synchronized < decl_stmt java.util.HashSet < = new <> for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if ! call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() return decl Set protected protected throws decl_stmt java.util.Set < = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return return