org.apache.lucene.analysis.custom static static org.apache.lucene.analysis.util.AnalysisSPILoader.newFactoryClassInstance import java.io.IOException import java.io.Reader import java.nio.file.Path import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.HashMap import java.util.List import java.util.Map import java.util.Objects import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.Tokenizer import org.apache.lucene.analysis.util.AbstractAnalysisFactory import org.apache.lucene.analysis.util.CharFilterFactory import org.apache.lucene.analysis.util.ClasspathResourceLoader import org.apache.lucene.analysis.util.FilesystemResourceLoader import org.apache.lucene.analysis.util.ResourceLoader import org.apache.lucene.analysis.util.ResourceLoaderAware import org.apache.lucene.analysis.util.TokenFilterFactory import org.apache.lucene.analysis.util.TokenizerFactory import org.apache.lucene.util.SetOnce import org.apache.lucene.util.Version import class org.apache.lucene.analysis.custom.CustomAnalyzer super super extends decl TokenFilterFactory Integer TokenizerFactory decl CharFilterFactory public static public static return new public static public static return new public static public static return new protected protected for final final : = return Tokenizer TokenStream protected protected decl_stmt org.apache.lucene.analysis.Tokenizer final final = call TokenizerFactory.create() call TokenizerFactory.create() call TokenizerFactory.create() call TokenizerFactory.create() call TokenizerFactory.create() decl_stmt org.apache.lucene.analysis.TokenStream = for final final : = return new public public return == : call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() public public return == : public < public < return public public return public < public < return StringBuilder public public decl_stmt java.lang.StringBuilder final final = new for final final : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for final final : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) public public if throw new + return public public if < throw new return public public if < throw new return public public < extends extends throws return public public < extends extends < throws call TokenizerFactory.set() call TokenizerFactory.set() call TokenizerFactory.set() call TokenizerFactory.set() call TokenizerFactory.set() = return public public throws return public public < throws call TokenizerFactory.set() call TokenizerFactory.set() call TokenizerFactory.set() call TokenizerFactory.set() call TokenizerFactory.set() = return public public < extends extends throws return public public < extends extends < throws call decl TokenFilterFactory.add() call decl TokenFilterFactory.add() call decl TokenFilterFactory.add() call decl TokenFilterFactory.add() call decl TokenFilterFactory.add() = return public public throws return public public < throws call decl TokenFilterFactory.add() call decl TokenFilterFactory.add() call decl TokenFilterFactory.add() call decl TokenFilterFactory.add() call decl TokenFilterFactory.add() = return public public < extends extends throws return public public < extends extends < throws call decl CharFilterFactory.add() call decl CharFilterFactory.add() call decl CharFilterFactory.add() call decl CharFilterFactory.add() call decl CharFilterFactory.add() = return public public throws return public public < throws call decl CharFilterFactory.add() call decl CharFilterFactory.add() call decl CharFilterFactory.add() call decl CharFilterFactory.add() call decl CharFilterFactory.add() = return public public if call TokenizerFactory.get() call TokenizerFactory.get() call TokenizerFactory.get() call TokenizerFactory.get() call TokenizerFactory.get() == throw new return new call decl CharFilterFactory.toArray() call decl CharFilterFactory.toArray() call decl CharFilterFactory.toArray() call decl CharFilterFactory.toArray() call decl CharFilterFactory.toArray() new call decl CharFilterFactory.size() call decl CharFilterFactory.size() call decl CharFilterFactory.size() call decl CharFilterFactory.size() call decl CharFilterFactory.size() call TokenizerFactory.get() call TokenizerFactory.get() call TokenizerFactory.get() call TokenizerFactory.get() call TokenizerFactory.get() call decl TokenFilterFactory.toArray() call decl TokenFilterFactory.toArray() call decl TokenFilterFactory.toArray() call decl TokenFilterFactory.toArray() call decl TokenFilterFactory.toArray() new call decl TokenFilterFactory.size() call decl TokenFilterFactory.size() call decl TokenFilterFactory.size() call decl TokenFilterFactory.size() call decl TokenFilterFactory.size() call Integer.get() call Integer.get() call Integer.get() call Integer.get() call Integer.get() private < private < < if != && ! return decl Map private < private < if != throw new decl_stmt java.util.Map final final final < = new <> for = < += call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + return private < private < throws if instanceof return