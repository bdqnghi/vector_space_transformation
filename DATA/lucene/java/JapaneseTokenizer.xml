org.apache.lucene.analysis.ja java.io.IOException import java.io.StringReader import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.Comparator import java.util.EnumMap import java.util.HashMap import java.util.List import org.apache.lucene.analysis.Tokenizer import org.apache.lucene.analysis.ja.dict.CharacterDefinition import org.apache.lucene.analysis.ja.dict.ConnectionCosts import org.apache.lucene.analysis.ja.dict.Dictionary import org.apache.lucene.analysis.ja.dict.TokenInfoDictionary import org.apache.lucene.analysis.ja.dict.TokenInfoFST import org.apache.lucene.analysis.ja.dict.UnknownDictionary import org.apache.lucene.analysis.ja.dict.UserDictionary import org.apache.lucene.analysis.ja.tokenattributes.* import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.OffsetAttribute import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute import org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute import org.apache.lucene.analysis.util.RollingCharBuffer import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.AttributeFactory import org.apache.lucene.util.IntsRef import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.fst.FST import class org.apache.lucene.analysis.ja.JapaneseTokenizer super super extends int CharacterDefinition Mode OffsetAttribute int PartOfSpeechAttribute decl FST boolean boolean UnknownDictionary boolean int decl List int boolean decl FST WrappedPositionArray RollingCharBuffer InflectionAttribute ConnectionCosts decl BytesReader int int int int TokenInfoDictionary decl BytesReader decl FST IntsRef int ReadingAttribute boolean UserDictionary boolean TokenInfoFST CharTermAttribute PositionLengthAttribute boolean decl EnumMap TokenInfoFST int int PositionIncrementAttribute BaseFormAttribute public public = public public throws call decl BytesReader.reset() call decl BytesReader.reset() call decl BytesReader.reset() call decl BytesReader.reset() call decl BytesReader.reset() public public throws call decl BytesReader.reset() call decl BytesReader.reset() call decl BytesReader.reset() call decl BytesReader.reset() call decl BytesReader.reset() private private call TokenInfoFST.reset() call TokenInfoFST.reset() call TokenInfoFST.reset() call TokenInfoFST.reset() call TokenInfoFST.reset() = - = = = = - call int.clear() call int.clear() call int.clear() call int.clear() call int.clear() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() - - - int public public throws decl_stmt int = call decl List.setOffset() call decl List.setOffset() call decl List.setOffset() call decl List.setOffset() call decl List.setOffset() private private throws return int boolean private private throws if > decl_stmt boolean = decl_stmt int final final = + for = < ++ if ! call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isKanji(char) call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isKanji(char) call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isKanji(char) call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isKanji(char) call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isKanji(char) char call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() = break if return - * else if > return - * return decl Type public public = + = + = + = + = + decl_stmt sun.tools.java.Type final final final = new = decl Type public public = + = + = + decl_stmt sun.tools.java.Type final final final = new = public public if == = = = = = = ++ public public if == = = = = ++ public public = assert == : + + + int int int int int int private private throws decl_stmt int final final = decl_stmt int final final = decl_stmt int = decl_stmt int = - assert > for = < ++ decl_stmt int final final = + call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() if + + + + + + + + + call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() + + if < = = if += if + + + + + + + + + + + call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() if || ! && && != decl_stmt int final final = - if if > + + + + += assert == call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() int Token int public public throws while call int.size() call int.size() call int.size() call int.size() call int.size() == if return decl_stmt org.apache.lucene.queryparser.surround.parser.Token final final = call int.remove() call int.remove() call int.remove() call int.remove() call int.remove() call int.size() call int.size() call int.size() call int.size() call int.size() - decl_stmt int = call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() decl_stmt int = call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() assert > call int.copyBuffer() call int.copyBuffer() call int.copyBuffer() call int.copyBuffer() call int.copyBuffer() call org.apache.lucene.queryparser.surround.parser.Token.getSurfaceForm() call org.apache.lucene.queryparser.surround.parser.Token.getSurfaceForm() call org.apache.lucene.queryparser.surround.parser.Token.getSurfaceForm() call org.apache.lucene.queryparser.surround.parser.Token.getSurfaceForm() call org.apache.lucene.queryparser.surround.parser.Token.getSurfaceForm() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call decl List.setOffset() call decl List.setOffset() call decl List.setOffset() call decl List.setOffset() call decl List.setOffset() + call PositionIncrementAttribute.setToken() call PositionIncrementAttribute.setToken() call PositionIncrementAttribute.setToken() call PositionIncrementAttribute.setToken() call PositionIncrementAttribute.setToken() call PositionLengthAttribute.setToken() call PositionLengthAttribute.setToken() call PositionLengthAttribute.setToken() call PositionLengthAttribute.setToken() call PositionLengthAttribute.setToken() call BaseFormAttribute.setToken() call BaseFormAttribute.setToken() call BaseFormAttribute.setToken() call BaseFormAttribute.setToken() call BaseFormAttribute.setToken() call PartOfSpeechAttribute.setToken() call PartOfSpeechAttribute.setToken() call PartOfSpeechAttribute.setToken() call PartOfSpeechAttribute.setToken() call PartOfSpeechAttribute.setToken() if call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() == call CharTermAttribute.setPositionIncrement() call CharTermAttribute.setPositionIncrement() call CharTermAttribute.setPositionIncrement() call CharTermAttribute.setPositionIncrement() call CharTermAttribute.setPositionIncrement() call OffsetAttribute.setPositionLength() call OffsetAttribute.setPositionLength() call OffsetAttribute.setPositionLength() call OffsetAttribute.setPositionLength() call OffsetAttribute.setPositionLength() call org.apache.lucene.queryparser.surround.parser.Token.getPositionLength() call org.apache.lucene.queryparser.surround.parser.Token.getPositionLength() call org.apache.lucene.queryparser.surround.parser.Token.getPositionLength() call org.apache.lucene.queryparser.surround.parser.Token.getPositionLength() call org.apache.lucene.queryparser.surround.parser.Token.getPositionLength() else if assert call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() > call CharTermAttribute.setPositionIncrement() call CharTermAttribute.setPositionIncrement() call CharTermAttribute.setPositionIncrement() call CharTermAttribute.setPositionIncrement() call CharTermAttribute.setPositionIncrement() call OffsetAttribute.setPositionLength() call OffsetAttribute.setPositionLength() call OffsetAttribute.setPositionLength() call OffsetAttribute.setPositionLength() call OffsetAttribute.setPositionLength() call org.apache.lucene.queryparser.surround.parser.Token.getPositionLength() call org.apache.lucene.queryparser.surround.parser.Token.getPositionLength() call org.apache.lucene.queryparser.surround.parser.Token.getPositionLength() call org.apache.lucene.queryparser.surround.parser.Token.getPositionLength() call org.apache.lucene.queryparser.surround.parser.Token.getPositionLength() else assert call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() > call CharTermAttribute.setPositionIncrement() call CharTermAttribute.setPositionIncrement() call CharTermAttribute.setPositionIncrement() call CharTermAttribute.setPositionIncrement() call CharTermAttribute.setPositionIncrement() call OffsetAttribute.setPositionLength() call OffsetAttribute.setPositionLength() call OffsetAttribute.setPositionLength() call OffsetAttribute.setPositionLength() call OffsetAttribute.setPositionLength() if + + = call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() return public public -- while > if == - = - -- -- = = = int decl Position public public while >= if == decl_stmt javax.swing.text.Position = new + - - for = < ++ = new = = if == = assert == ++ = ++ ++ assert decl_stmt int final final = assert == return public public return private private return < && >= - int private private decl_stmt int = - - if < += return int int public public decl_stmt int final final = - - assert >= assert <= decl_stmt int = - if < += for = < ++ if == = ++ -= Position boolean int int int int Position boolean char Position int int Position boolean int private private throws if while if call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() == - break decl_stmt javax.swing.text.Position final final = call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() decl_stmt boolean final final = call TokenInfoFST.getNextPos() call TokenInfoFST.getNextPos() call TokenInfoFST.getNextPos() call TokenInfoFST.getNextPos() call TokenInfoFST.getNextPos() == + if == if + ++ continue if > && == && if if = if call int.size() call int.size() call int.size() call int.size() call int.size() != return else if - >= decl_stmt int = - decl_stmt int = decl_stmt javax.swing.text.Position = for = < call TokenInfoFST.getNextPos() call TokenInfoFST.getNextPos() call TokenInfoFST.getNextPos() call TokenInfoFST.getNextPos() call TokenInfoFST.getNextPos() ++ decl_stmt javax.swing.text.Position final final = call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() for = < ++ decl_stmt int final final = if < = = = assert != - if for = < call TokenInfoFST.getNextPos() call TokenInfoFST.getNextPos() call TokenInfoFST.getNextPos() call TokenInfoFST.getNextPos() call TokenInfoFST.getNextPos() ++ decl_stmt javax.swing.text.Position final final = call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() if != call Position.reset() call Position.reset() call Position.reset() call Position.reset() call Position.reset() else if != = = = = = = = if if != assert < = if call int.size() call int.size() call int.size() call int.size() call int.size() != return else continue if + + + char call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() if + + decl_stmt boolean = if != call decl FST.getFirstArc() call decl FST.getFirstArc() call decl FST.getFirstArc() call decl FST.getFirstArc() call decl FST.getFirstArc() decl_stmt int = for = ++ decl_stmt int final final = call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() if == - break if call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() call decl FST.findTargetArc() == == break += call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() if call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() if + new call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() - + + + + + + call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() = if ! call TokenInfoFST.getFirstArc() call TokenInfoFST.getFirstArc() call TokenInfoFST.getFirstArc() call TokenInfoFST.getFirstArc() call TokenInfoFST.getFirstArc() decl_stmt int = for = ++ decl_stmt int final final = call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() if == - break if call org.apache.lucene.analysis.ja.dict.TokenInfoFST.findTargetArc(int,FST,FST,boolean,FST,BytesReader) call org.apache.lucene.analysis.ja.dict.TokenInfoFST.findTargetArc(int,FST,FST,boolean,FST,BytesReader) call org.apache.lucene.analysis.ja.dict.TokenInfoFST.findTargetArc(int,FST,FST,boolean,FST,BytesReader) call org.apache.lucene.analysis.ja.dict.TokenInfoFST.findTargetArc(int,FST,FST,boolean,FST,BytesReader) call org.apache.lucene.analysis.ja.dict.TokenInfoFST.findTargetArc(int,FST,FST,boolean,FST,BytesReader) == == break += call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() call decl FST.output() if call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call decl FST.isFinal() call TokenInfoDictionary.lookupWordIds() call TokenInfoDictionary.lookupWordIds() call TokenInfoDictionary.lookupWordIds() call TokenInfoDictionary.lookupWordIds() call TokenInfoDictionary.lookupWordIds() + call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() call decl FST.nextFinalOutput() if + new call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() - + + + + + + + for = < ++ + + = if ! && > ++ continue decl_stmt char final final = char call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() if ! || call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isInvoke(char) call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isInvoke(char) call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isInvoke(char) call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isInvoke(char) call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isInvoke(char) decl_stmt int final final = call CharacterDefinition.getCharacterClass() call CharacterDefinition.getCharacterClass() call CharacterDefinition.getCharacterClass() call CharacterDefinition.getCharacterClass() call CharacterDefinition.getCharacterClass() decl_stmt boolean final final = decl_stmt int if ! call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isGroup(char) call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isGroup(char) call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isGroup(char) call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isGroup(char) call org.apache.lucene.analysis.ja.dict.CharacterDefinition.isGroup(char) = else = for = + < ++ decl_stmt int final final = call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() if == - break if == call CharacterDefinition.getCharacterClass() call CharacterDefinition.getCharacterClass() call CharacterDefinition.getCharacterClass() call CharacterDefinition.getCharacterClass() call CharacterDefinition.getCharacterClass() char && char == ++ else break call UnknownDictionary.lookupWordIds() call UnknownDictionary.lookupWordIds() call UnknownDictionary.lookupWordIds() call UnknownDictionary.lookupWordIds() call UnknownDictionary.lookupWordIds() if + + + + for = < ++ + + = + ++ = if > decl_stmt javax.swing.text.Position final final = call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() decl_stmt int = decl_stmt int = - if + + for = < ++ decl_stmt int final final = + call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() if < = = if if else int Dictionary int Type int int int Position int private private throws if + + + + + for = > -- decl_stmt javax.swing.text.Position final final = call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() if + for = < ++ decl_stmt int final final = if >= call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() else if if != = for = < ++ decl_stmt javax.swing.text.Position final final = call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() if + + + if == if = continue if == decl_stmt int final final if == = else = decl_stmt int final final = for = < ++ decl_stmt sun.tools.java.Type final final = decl_stmt org.apache.lucene.search.spell.Dictionary final final = decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = + call org.apache.lucene.search.spell.Dictionary.getWordCost(int) call org.apache.lucene.search.spell.Dictionary.getWordCost(int) call org.apache.lucene.search.spell.Dictionary.getWordCost(int) call org.apache.lucene.search.spell.Dictionary.getWordCost(int) call org.apache.lucene.search.spell.Dictionary.getWordCost(int) + call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call org.apache.lucene.search.spell.Dictionary.getLeftId(int) call org.apache.lucene.search.spell.Dictionary.getLeftId(int) call org.apache.lucene.search.spell.Dictionary.getLeftId(int) call org.apache.lucene.search.spell.Dictionary.getLeftId(int) call org.apache.lucene.search.spell.Dictionary.getLeftId(int) + - if + + + new call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() - + + + + + + - + + call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call org.apache.lucene.search.spell.Dictionary.getRightId(int) call org.apache.lucene.search.spell.Dictionary.getRightId(int) call org.apache.lucene.search.spell.Dictionary.getRightId(int) call org.apache.lucene.search.spell.Dictionary.getRightId(int) call org.apache.lucene.search.spell.Dictionary.getRightId(int) else for = < ++ decl_stmt sun.tools.java.Type final final = decl_stmt int final final = if + + + new call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() - + + = int int private private assert <= decl_stmt int = - + if < decl_stmt int = = new = new = - - = = int private private if < decl_stmt int = = new = new = new = new = new = new = new = new = new = new = new = new = new = new = private private = if int Dictionary private private if == - : == - : new - assert < assert == - || == - || < assert == - || <= && < assert == - || <= && < decl_stmt int = ++ if = = = if < = = = = = else decl_stmt org.apache.lucene.search.spell.Dictionary = call decl EnumMap.get() call decl EnumMap.get() call decl EnumMap.get() call decl EnumMap.get() call decl EnumMap.get() = call org.apache.lucene.search.spell.Dictionary.getWordCost(int) call org.apache.lucene.search.spell.Dictionary.getWordCost(int) call org.apache.lucene.search.spell.Dictionary.getWordCost(int) call org.apache.lucene.search.spell.Dictionary.getWordCost(int) call org.apache.lucene.search.spell.Dictionary.getWordCost(int) = call org.apache.lucene.search.spell.Dictionary.getLeftId(int) call org.apache.lucene.search.spell.Dictionary.getLeftId(int) call org.apache.lucene.search.spell.Dictionary.getLeftId(int) call org.apache.lucene.search.spell.Dictionary.getLeftId(int) call org.apache.lucene.search.spell.Dictionary.getLeftId(int) = call org.apache.lucene.search.spell.Dictionary.getRightId(int) call org.apache.lucene.search.spell.Dictionary.getRightId(int) call org.apache.lucene.search.spell.Dictionary.getRightId(int) call org.apache.lucene.search.spell.Dictionary.getRightId(int) call org.apache.lucene.search.spell.Dictionary.getRightId(int) if = = if <= = = else = - if <= = = else = - return int private private decl_stmt int = for = < ++ += call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() return int Position Position < assert call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() == if = = = + + + decl_stmt javax.swing.text.Position = call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() if - != assert if - - - != assert for = < -- decl_stmt int = - if <= decl_stmt javax.swing.text.Position = call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() for = < ++ - for = < - ++ if < for = <= = if = - int decl_stmt int = return == && ! : call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() int int int for = < ++ for = <= = if <= decl_stmt int = - decl_stmt int = for = <= = if <= decl_stmt int = + + if < = = assert <= = = if int int int for = - <= -- for = <= = if <= decl_stmt int = - decl_stmt int = for = <= = if <= decl_stmt int = + + if < = = assert <= = = if int int decl_stmt int = decl_stmt int = for = <= = if == = decl List < < decl_stmt java.util.List < = new <> for = != = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return private private return + + int int decl List int int < < decl_stmt java.util.List < = new <> decl_stmt int = decl_stmt int = - decl_stmt int = - for = < ++ if == decl_stmt int = if < = = = call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if == && != || != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : return return int int int decl_stmt int = - decl_stmt int = - if < || < return decl_stmt int = for = <= = if == = return - if for = < ++ int int int decl int int Type int private private decl_stmt int = decl_stmt int = decl_stmt sun.tools.java.Type = if ! || ! if == decl_stmt int final final final = call org.apache.lucene.analysis.ja.dict.UserDictionary.lookupSegmentation(int) call org.apache.lucene.analysis.ja.dict.UserDictionary.lookupSegmentation(int) call org.apache.lucene.analysis.ja.dict.UserDictionary.lookupSegmentation(int) call org.apache.lucene.analysis.ja.dict.UserDictionary.lookupSegmentation(int) call org.apache.lucene.analysis.ja.dict.UserDictionary.lookupSegmentation(int) decl_stmt int = call int.add() call int.add() call int.add() call int.add() call int.add() new - + decl_stmt int = for = < ++ decl_stmt int final final = if < - call int.add() call int.add() call int.add() call int.add() call int.add() new + - + + + += else call int.add() call int.add() call int.add() call int.add() call int.add() new - + Token decl HashMap Token int decl Integer int int int private private new < public public decl_stmt int = call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() decl_stmt int = call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() if != return - decl_stmt int = call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() decl_stmt int = call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() if != return - return call org.apache.lucene.queryparser.surround.parser.Token.getType() call org.apache.lucene.queryparser.surround.parser.Token.getType() call org.apache.lucene.queryparser.surround.parser.Token.getType() call org.apache.lucene.queryparser.surround.parser.Token.getType() call org.apache.lucene.queryparser.surround.parser.Token.getType() - call org.apache.lucene.queryparser.surround.parser.Token.getType() call org.apache.lucene.queryparser.surround.parser.Token.getType() call org.apache.lucene.queryparser.surround.parser.Token.getType() call org.apache.lucene.queryparser.surround.parser.Token.getType() call org.apache.lucene.queryparser.surround.parser.Token.getType() for = < call int.size() call int.size() call int.size() call int.size() call int.size() ++ decl_stmt org.apache.lucene.queryparser.surround.parser.Token = call int.get() call int.get() call int.get() call int.get() call int.get() - decl_stmt org.apache.lucene.queryparser.surround.parser.Token = call int.get() call int.get() call int.get() call int.get() call int.get() if call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() == call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() call org.apache.lucene.queryparser.surround.parser.Token.getOffset() && call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() == call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call org.apache.lucene.queryparser.surround.parser.Token.getLength() call int.remove() call int.remove() call int.remove() call int.remove() call int.remove() -- decl_stmt HashMap < = new <> for : call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() + decl_stmt java.lang.Integer = call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() call decl HashMap.keySet() new for = < ++ call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() for : call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() + - call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() int int int int public public decl_stmt int = decl_stmt int = if != return - decl_stmt int = decl_stmt int = if != return - return - int int int int private private throws decl_stmt int = if < return - decl_stmt int = decl_stmt int = new try decl_stmt int = - while if != = = call InflectionAttribute.probeDelta() call InflectionAttribute.probeDelta() call InflectionAttribute.probeDelta() call InflectionAttribute.probeDelta() call InflectionAttribute.probeDelta() + finally if return == - : int decl String public public decl_stmt int = for : if ! decl_stmt java.lang.String = if != throw new + + else try = catch throw new return public public = = < decl char int int decl List int private private final final final final throws if == = new decl_stmt int final final = decl_stmt char = call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() - call InflectionAttribute.setup() call InflectionAttribute.setup() call InflectionAttribute.setup() call InflectionAttribute.setup() call InflectionAttribute.setup() call InflectionAttribute.markUnreachable() call InflectionAttribute.markUnreachable() call InflectionAttribute.markUnreachable() call InflectionAttribute.markUnreachable() call InflectionAttribute.markUnreachable() call InflectionAttribute.calcLeftCost() call InflectionAttribute.calcLeftCost() call InflectionAttribute.calcLeftCost() call InflectionAttribute.calcLeftCost() call InflectionAttribute.calcLeftCost() call InflectionAttribute.calcRightCost() call InflectionAttribute.calcRightCost() call InflectionAttribute.calcRightCost() call InflectionAttribute.calcRightCost() call InflectionAttribute.calcRightCost() decl_stmt int = call InflectionAttribute.bestCost() call InflectionAttribute.bestCost() call InflectionAttribute.bestCost() call InflectionAttribute.bestCost() call InflectionAttribute.bestCost() if for : call InflectionAttribute.bestPathNodeList() call InflectionAttribute.bestPathNodeList() call InflectionAttribute.bestPathNodeList() call InflectionAttribute.bestPathNodeList() call InflectionAttribute.bestPathNodeList() for = ++ decl_stmt java.util.List < = call InflectionAttribute.nBestNodeList() call InflectionAttribute.nBestNodeList() call InflectionAttribute.nBestNodeList() call InflectionAttribute.nBestNodeList() call InflectionAttribute.nBestNodeList() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() break decl_stmt int = call InflectionAttribute.cost() call InflectionAttribute.cost() call InflectionAttribute.cost() call InflectionAttribute.cost() call InflectionAttribute.cost() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if if + < break for : if call InflectionAttribute.debugPrint() call InflectionAttribute.debugPrint() call InflectionAttribute.debugPrint() call InflectionAttribute.debugPrint() call InflectionAttribute.debugPrint() int Type int int Token int int int int int decl int Dictionary int Position int int decl char int int int int int int int int int private private final final final final throws decl_stmt int final final = if + + + + + - + + + + decl_stmt char final final final = call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() - if != call ReadingAttribute.onBacktrace() call ReadingAttribute.onBacktrace() call ReadingAttribute.onBacktrace() call ReadingAttribute.onBacktrace() call ReadingAttribute.onBacktrace() decl_stmt int = decl_stmt int = decl_stmt org.apache.lucene.queryparser.surround.parser.Token = decl_stmt int = - decl_stmt int = while > decl_stmt javax.swing.text.Position final final = call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() call TokenInfoFST.get() assert < decl_stmt int = assert >= : + + + decl_stmt int = - decl_stmt sun.tools.java.Type = decl_stmt int = decl_stmt int = if && && == && != decl_stmt int final final = - if > if + new call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() call decl BytesReader.get() - + + + + + + + + + + + + decl_stmt int = + if != - += call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() decl_stmt int = decl_stmt int = - for = < ++ decl_stmt int = if != - += call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() call ConnectionCosts.get() if < = = if + + + + + + + if != - && <= && != assert != = new - = = = = - = = = else decl_stmt int final final = - assert >= if != && call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() >= assert call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() == : call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() call org.apache.lucene.queryparser.surround.parser.Token.getPosition() + + if > ++ call org.apache.lucene.queryparser.surround.parser.Token.setPositionLength(int) call org.apache.lucene.queryparser.surround.parser.Token.setPositionLength(int) call org.apache.lucene.queryparser.surround.parser.Token.setPositionLength(int) call org.apache.lucene.queryparser.surround.parser.Token.setPositionLength(int) call org.apache.lucene.queryparser.surround.parser.Token.setPositionLength(int) if + call int.add() call int.add() call int.add() call int.add() call int.add() else if + assert = decl_stmt org.apache.lucene.search.spell.Dictionary final final = if == decl_stmt int final final final = call org.apache.lucene.analysis.ja.dict.UserDictionary.lookupSegmentation(int) call org.apache.lucene.analysis.ja.dict.UserDictionary.lookupSegmentation(int) call org.apache.lucene.analysis.ja.dict.UserDictionary.lookupSegmentation(int) call org.apache.lucene.analysis.ja.dict.UserDictionary.lookupSegmentation(int) call org.apache.lucene.analysis.ja.dict.UserDictionary.lookupSegmentation(int) decl_stmt int = decl_stmt int = for = < ++ decl_stmt int final final = call int.add() call int.add() call int.add() call int.add() call int.add() new + - + + if + call int.get() call int.get() call int.get() call int.get() call int.get() call int.size() call int.size() call int.size() call int.size() call int.size() - += call int.subList() call int.subList() call int.subList() call int.subList() call int.subList() call int.size() call int.size() call int.size() call int.size() call int.size() - - call int.size() call int.size() call int.size() call int.size() call int.size() += - else if && == decl_stmt int = for = - >= -- decl_stmt int = if > && + -- = if ! || ! + call int.add() call int.add() call int.add() call int.add() call int.add() new + + ++ += else if ! || == || ! call int.add() call int.add() call int.add() call int.add() call int.add() new if + call int.get() call int.get() call int.get() call int.get() call int.get() call int.size() call int.size() call int.size() call int.size() call int.size() - ++ else if + new = call org.apache.lucene.search.spell.Dictionary.getLeftId(int) call org.apache.lucene.search.spell.Dictionary.getLeftId(int) call org.apache.lucene.search.spell.Dictionary.getLeftId(int) call org.apache.lucene.search.spell.Dictionary.getLeftId(int) call org.apache.lucene.search.spell.Dictionary.getLeftId(int) = = = if + call decl BytesReader.freeBefore() call decl BytesReader.freeBefore() call decl BytesReader.freeBefore() call decl BytesReader.freeBefore() call decl BytesReader.freeBefore() call TokenInfoFST.freeBefore() call TokenInfoFST.freeBefore() call TokenInfoFST.freeBefore() call TokenInfoFST.freeBefore() call TokenInfoFST.freeBefore() return call decl EnumMap.get() call decl EnumMap.get() call decl EnumMap.get() call decl EnumMap.get() call decl EnumMap.get() private static private static switch case case case case case case case case case case case case case case case case return default: return