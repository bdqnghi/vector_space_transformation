org.apache.lucene.search java.io.Closeable import java.io.IOException import java.util.HashMap import java.util.HashSet import java.util.Map import java.util.Random import java.util.Set import java.util.concurrent.ConcurrentHashMap import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.IndexWriterConfig import org.apache.lucene.index.Term import org.apache.lucene.index.TermContext import org.apache.lucene.store.Directory import org.apache.lucene.util.LineFileDocs import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.PrintStreamInfoStream import org.apache.lucene.util.TestUtil import class org.apache.lucene.search.ShardSearchingTestBase super super extends decl String Thread decl NodeState int long public public return * + FieldAndShardVersion public public if ! instanceof return decl_stmt FieldAndShardVersion final final = return && == && == public public return + + + + + + public public return * + TermAndShardVersion public public if ! instanceof return decl_stmt TermAndShardVersion final final = return && == && == CollectionStatistics throws if + + + + + for : decl_stmt org.apache.lucene.search.CollectionStatistics final final = for : if != new for : decl NodeState throws decl_stmt ShardIndexSearcher final final final final final = try if == if != return call decl NodeState.localSearchAfter() call decl NodeState.localSearchAfter() call decl NodeState.localSearchAfter() call decl NodeState.localSearchAfter() call decl NodeState.localSearchAfter() else return call decl NodeState.localSearch() call decl NodeState.localSearch() call decl NodeState.localSearch() call decl NodeState.localSearch() call decl NodeState.localSearch() else assert == return call decl NodeState.localSearch() call decl NodeState.localSearch() call decl NodeState.localSearch() call decl NodeState.localSearch() call decl NodeState.localSearch() finally NodeState TermContext IndexSearcher decl Map < < < throws decl_stmt NodeState final final = decl_stmt java.util.Map final final final < = new <> decl_stmt org.apache.lucene.search.IndexSearcher final final = call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() if == throw new + + + try for : decl_stmt org.apache.lucene.index.TermContext final final = call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.lucene.search.IndexSearcher.termStatistics(Term,TermContext) call org.apache.lucene.search.IndexSearcher.termStatistics(Term,TermContext) call org.apache.lucene.search.IndexSearcher.termStatistics(Term,TermContext) call org.apache.lucene.search.IndexSearcher.termStatistics(Term,TermContext) call org.apache.lucene.search.IndexSearcher.termStatistics(Term,TermContext) finally call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() call NodeState.searchers() return TermAndShardVersion decl Set IndexSearcher Weight decl Set public public throws decl_stmt org.apache.lucene.search.IndexSearcher final final = new decl_stmt org.apache.lucene.search.Weight final final = call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) call org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query,boolean) decl_stmt java.util.Set final final final < = new <> call Weight.extractTerms() call Weight.extractTerms() call Weight.extractTerms() call Weight.extractTerms() call Weight.extractTerms() for = < ++ if == continue decl_stmt java.util.Set final final final < = new <> for : decl_stmt TermAndShardVersion final final = new if ! call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() != for < : decl_stmt TermAndShardVersion final final = new return call Weight.getQuery() call Weight.getQuery() call Weight.getQuery() call Weight.getQuery() call Weight.getQuery() long long TermStatistics TermAndShardVersion long long public public throws assert != decl_stmt long = decl_stmt long = for = < ++ decl_stmt org.apache.lucene.search.TermStatistics final final if == = else decl_stmt TermAndShardVersion final final = new = assert != decl_stmt long = call TermStatistics.docFreq() call TermStatistics.docFreq() call TermStatistics.docFreq() call TermStatistics.docFreq() call TermStatistics.docFreq() if >= && >= += else = - decl_stmt long = call org.apache.lucene.search.TermStatistics.totalTermFreq() call org.apache.lucene.search.TermStatistics.totalTermFreq() call org.apache.lucene.search.TermStatistics.totalTermFreq() call org.apache.lucene.search.TermStatistics.totalTermFreq() call org.apache.lucene.search.TermStatistics.totalTermFreq() if >= && >= += else = - return new long long long long CollectionStatistics FieldAndShardVersion long long long public public throws decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt long = for = < ++ decl_stmt FieldAndShardVersion final final = new decl_stmt org.apache.lucene.search.CollectionStatistics final final if == = else = if == + + + assert != : + + + + + + + decl_stmt long = call org.apache.lucene.search.CollectionStatistics.docCount() call org.apache.lucene.search.CollectionStatistics.docCount() call org.apache.lucene.search.CollectionStatistics.docCount() call org.apache.lucene.search.CollectionStatistics.docCount() call org.apache.lucene.search.CollectionStatistics.docCount() if >= && >= += else = - decl_stmt long = call org.apache.lucene.search.CollectionStatistics.sumTotalTermFreq() call org.apache.lucene.search.CollectionStatistics.sumTotalTermFreq() call org.apache.lucene.search.CollectionStatistics.sumTotalTermFreq() call org.apache.lucene.search.CollectionStatistics.sumTotalTermFreq() call org.apache.lucene.search.CollectionStatistics.sumTotalTermFreq() if >= && >= += else = - decl_stmt long = call CollectionStatistics.sumDocFreq() call CollectionStatistics.sumDocFreq() call CollectionStatistics.sumDocFreq() call CollectionStatistics.sumDocFreq() call CollectionStatistics.sumDocFreq() if >= && >= += else = - assert call org.apache.lucene.search.CollectionStatistics.maxDoc() call org.apache.lucene.search.CollectionStatistics.maxDoc() call org.apache.lucene.search.CollectionStatistics.maxDoc() call org.apache.lucene.search.CollectionStatistics.maxDoc() call org.apache.lucene.search.CollectionStatistics.maxDoc() >= += call org.apache.lucene.search.CollectionStatistics.maxDoc() call org.apache.lucene.search.CollectionStatistics.maxDoc() call org.apache.lucene.search.CollectionStatistics.maxDoc() call org.apache.lucene.search.CollectionStatistics.maxDoc() call org.apache.lucene.search.CollectionStatistics.maxDoc() return new decl TopDocs public public throws decl_stmt org.apache.lucene.search.TopDocs final final final = new for = < ++ if == = else = return public public throws return decl NodeState ScoreDoc decl TopDocs public public throws if == return decl_stmt org.apache.lucene.search.TopDocs final final final = new decl_stmt org.apache.lucene.search.ScoreDoc = new for = < ++ if < decl_stmt ShardIndexSearcher final final final final final = try = call decl NodeState.getIndexReader() call decl NodeState.getIndexReader() call decl NodeState.getIndexReader() call decl NodeState.getIndexReader() call decl NodeState.getIndexReader() - finally else if == = else = - if == = else = return public public throws return decl TopFieldDocs public public throws assert != decl_stmt TopFieldDocs final final final = new for = < ++ if == = else = return public public throws return public public throws assert == = new public public throws = if != = new ShardIndexSearcher public public while decl_stmt ShardIndexSearcher final final = if call ShardIndexSearcher.getIndexReader() call ShardIndexSearcher.getIndexReader() call ShardIndexSearcher.getIndexReader() call ShardIndexSearcher.getIndexReader() call ShardIndexSearcher.getIndexReader() return public public throws IndexSearcher public public decl_stmt org.apache.lucene.search.IndexSearcher final final = if == throw new + + + return new call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() IndexSearcher long IndexSearcher public public throws decl_stmt org.apache.lucene.search.IndexSearcher final final = decl_stmt org.apache.lucene.search.IndexSearcher final final = try if != decl_stmt long final final = new finally public public throws if != NodeState LineFileDocs int int public public try decl_stmt org.apache.lucene.util.LineFileDocs final final = new decl_stmt int = while < decl_stmt int final final = decl_stmt NodeState final final = if == || == call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() ++ else if == call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() new + call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() ++ else call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() new + if == call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() call NodeState.writer() if == catch throw new IndexSearcher decl long protected protected throws = + * = = new for = < ++ = new decl_stmt long = new for = < ++ decl_stmt org.apache.lucene.search.IndexSearcher final final = try = finally for = < ++ decl_stmt org.apache.lucene.search.IndexSearcher final final = assert == assert != try finally = new call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() protected protected throws call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) for :