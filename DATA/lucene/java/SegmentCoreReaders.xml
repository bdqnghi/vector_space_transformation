org.apache.lucene.index java.io.IOException import java.util.Collections import java.util.LinkedHashSet import java.util.Set import java.util.concurrent.atomic.AtomicInteger import org.apache.lucene.codecs.Codec import org.apache.lucene.codecs.FieldsProducer import org.apache.lucene.codecs.NormsProducer import org.apache.lucene.codecs.PointsReader import org.apache.lucene.codecs.PostingsFormat import org.apache.lucene.codecs.StoredFieldsReader import org.apache.lucene.codecs.TermVectorsReader import org.apache.lucene.index.LeafReader.CoreClosedListener import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.util.CloseableThreadLocal import org.apache.lucene.util.IOUtils import class org.apache.lucene.index.SegmentCoreReaders FieldInfos decl CloseableThreadLocal decl CloseableThreadLocal FieldsProducer TermVectorsReader NormsProducer StoredFieldsReader decl Set AtomicInteger PointsReader Directory protected protected return call StoredFieldsReader.clone() call StoredFieldsReader.clone() call StoredFieldsReader.clone() call StoredFieldsReader.clone() call StoredFieldsReader.clone() protected protected return == : call TermVectorsReader.clone() call TermVectorsReader.clone() call TermVectorsReader.clone() call TermVectorsReader.clone() call TermVectorsReader.clone() return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() int decl_stmt int while = call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() > if call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) + return throw new Throwable throws if call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() == decl_stmt java.lang.Throwable = try catch = finally private private throws synchronized for : try catch if == = else call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove()