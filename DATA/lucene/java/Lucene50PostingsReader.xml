org.apache.lucene.codecs.lucene50 java.io.IOException import java.util.Arrays import org.apache.lucene.codecs.BlockTermState import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.PostingsReaderBase import org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.IntBlockTermState import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.IndexOptions import org.apache.lucene.index.PostingsEnum import org.apache.lucene.index.SegmentReadState import org.apache.lucene.store.DataInput import org.apache.lucene.store.IndexInput import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.RamUsageEstimator import static static org.apache.lucene.codecs.lucene50.ForUtil.MAX_DATA_SIZE import static static org.apache.lucene.codecs.lucene50.ForUtil.MAX_ENCODED_SIZE import static static org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.BLOCK_SIZE import static static org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.DOC_CODEC import static static org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.MAX_SKIP_LEVELS import static static org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.PAY_CODEC import static static org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.POS_CODEC import static static org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.TERMS_CODEC import static static org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.VERSION_CURRENT import static static org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.VERSION_START import class org.apache.lucene.codecs.lucene50.Lucene50PostingsReader super super extends IndexInput long IndexInput int IndexInput ForUtil int public public throws decl_stmt int final final = if != throw new + + + + int static static throws if for = < ++ decl_stmt int final final = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() = >>> if & != = else = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() else for = < ++ = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() public public return new public public throws boolean boolean IntBlockTermState boolean public public throws decl_stmt IntBlockTermState final final = decl_stmt boolean final final = >= decl_stmt boolean final final = >= decl_stmt boolean final final = if = = = += if += if || += if == = else = - if if > = else = - if > = else = - BlockDocsEnum BlockPostingsEnum boolean EverythingEnum boolean boolean public public throws decl_stmt boolean = >= decl_stmt boolean = >= decl_stmt boolean = if == || == decl_stmt BlockDocsEnum if instanceof = if ! call BlockDocsEnum.canReuse() call BlockDocsEnum.canReuse() call BlockDocsEnum.canReuse() call BlockDocsEnum.canReuse() call BlockDocsEnum.canReuse() = new else = new return call BlockDocsEnum.reset() call BlockDocsEnum.reset() call BlockDocsEnum.reset() call BlockDocsEnum.reset() call BlockDocsEnum.reset() else if == || == && == || == decl_stmt BlockPostingsEnum if instanceof = if ! call BlockPostingsEnum.canReuse() call BlockPostingsEnum.canReuse() call BlockPostingsEnum.canReuse() call BlockPostingsEnum.canReuse() call BlockPostingsEnum.canReuse() = new else = new return call BlockPostingsEnum.reset() call BlockPostingsEnum.reset() call BlockPostingsEnum.reset() call BlockPostingsEnum.reset() call BlockPostingsEnum.reset() else decl_stmt EverythingEnum if instanceof = if ! call EverythingEnum.canReuse() call EverythingEnum.canReuse() call EverythingEnum.canReuse() call EverythingEnum.canReuse() call EverythingEnum.canReuse() = new else = new return call EverythingEnum.reset() call EverythingEnum.reset() call EverythingEnum.reset() call EverythingEnum.reset() call EverythingEnum.reset() public public return == && == >= && == >= && == public public throws = = : = = = if > if == = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = - = if == || == = = = - = = return public public throws return public public throws return - public public throws return - public public throws return - public public throws return public public return int private private throws decl_stmt int final final = - assert > if >= call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) if if call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) else call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) else if == = = int else = public public throws if == return = if == += ++ = = ++ return int public public throws if > && > if == = new call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() if ! assert != - + = decl_stmt int final final = + if > assert == : + = = = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = if == return = if == while += ++ if >= break ++ if == return = = ++ return = public public return public public return == && == >= && == public public throws = = = = = = = if > if == = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = = if < = else if == = - else = + = - = = if > = - else = = = return public public throws return public public return int private private throws decl_stmt int final final = - assert > if >= call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) else if == = = int else = int int int private private throws if call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() == decl_stmt int final final = decl_stmt int = for = < ++ decl_stmt int = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if if & != = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() = >>> if != call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() + else = if if call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() & != call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() else call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) public public throws if == return = if == += = += ++ ++ = = return int public public throws if > if == = new call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() if ! assert != - + = decl_stmt int final final = + if > assert == : + = = = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = = = if == return = if == while += = += ++ ++ if >= break if == return = = return = int int private private throws decl_stmt int = - decl_stmt int final final = - if < += else -= while >= assert call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() != call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) -= = = public public throws assert > if != - call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = - = if > = if == = += ++ -- return public public return - public public return - public public return public public return public public return == && == >= && == public public throws = = = = = = = if > if == = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = = = if < = else if == = - else = + = = = - = = if > = - else = = = return public public throws return public public return int private private throws decl_stmt int final final = - assert > if >= call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) else if == = = int else = int int int int int int private private throws if call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() == decl_stmt int final final = decl_stmt int = decl_stmt int = = for = < ++ decl_stmt int = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if if & != = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() = = >>> if != if + > = + call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() += else = if decl_stmt int = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if & != = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() = >>> = = else call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) if if call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) decl_stmt int = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() if > = call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() call IndexInput.readBytes() else call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) decl_stmt int = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() + = if if call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) call org.apache.lucene.codecs.lucene50.ForUtil.readBlock(IndexInput,byte,int) else call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) public public throws if == return = if == += = += ++ ++ = = = return int public public throws if > if == = new call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() call org.apache.lucene.store.IndexInput.clone() if ! assert != - + = decl_stmt int final final = + if > assert == : + = = = call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = = = = = = if == return = if == while += = += ++ ++ if >= break if == return = = = return = int int int int private private throws decl_stmt int = - decl_stmt int final final = - if < decl_stmt int = + while < if += ++ else -= while >= assert call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() != call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) if call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) decl_stmt int = call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.readVInt() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() call IndexInput.getFilePointer() + if call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) call org.apache.lucene.codecs.lucene50.ForUtil.skipBlock(IndexInput) -= = = while < if += ++ = = public public throws assert > if != - call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = - if != - call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() call IndexInput.seek() = - = if > = if == = += if = = = = += if = + = + = ++ -- return public public return public public return public public if == return else return public public return public public return public public throws if != if != if != public public return + + != + + != +