org.apache.solr.common.cloud org.apache.commons.io.FileUtils import org.apache.solr.common.SolrException import org.apache.solr.common.StringUtils import org.apache.solr.common.cloud.ZkClientConnectionStrategy.ZkUpdate import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.common.util.ObjectReleaseTracker import org.apache.solr.common.util.SolrjNamedThreadFactory import org.apache.zookeeper.CreateMode import org.apache.zookeeper.KeeperException import org.apache.zookeeper.KeeperException.NoNodeException import org.apache.zookeeper.KeeperException.NodeExistsException import org.apache.zookeeper.KeeperException.NotEmptyException import org.apache.zookeeper.Op import org.apache.zookeeper.OpResult import org.apache.zookeeper.WatchedEvent import org.apache.zookeeper.Watcher import org.apache.zookeeper.ZooKeeper import org.apache.zookeeper.data.ACL import org.apache.zookeeper.data.Stat import org.slf4j.Logger import org.slf4j.LoggerFactory import javax.xml.transform.OutputKeys import javax.xml.transform.Source import javax.xml.transform.Transformer import javax.xml.transform.TransformerFactory import javax.xml.transform.stream.StreamResult import javax.xml.transform.stream.StreamSource import java.io.Closeable import java.io.File import java.io.IOException import java.io.StringReader import java.io.StringWriter import java.lang.invoke.MethodHandles import java.nio.charset.StandardCharsets import java.util.List import java.util.concurrent.ExecutorService import java.util.concurrent.Executors import class org.apache.solr.common.cloud.SolrZkClient super super implements String ZkCmdExecutor String String Logger String int boolean int ConnectionManager SolrZooKeeper ZkACLProvider ZkClientConnectionStrategy ExecutorService public public return SolrZooKeeper public public decl_stmt org.apache.solr.common.cloud.SolrZooKeeper = = try finally if public public return public public return String protected protected decl_stmt java.lang.String = if ! try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + return catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return new String protected protected decl_stmt java.lang.String = if ! try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + return catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return new public public return != && call SolrZooKeeper.getState() call SolrZooKeeper.getState() call SolrZooKeeper.getState() call SolrZooKeeper.getState() call SolrZooKeeper.getState() == public public final final final final throws if call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) new public public throws call SolrZooKeeper.delete() call SolrZooKeeper.delete() call SolrZooKeeper.delete() call SolrZooKeeper.delete() call SolrZooKeeper.delete() return else call SolrZooKeeper.delete() call SolrZooKeeper.delete() call SolrZooKeeper.delete() call SolrZooKeeper.delete() call SolrZooKeeper.delete() public public throws call SolrZooKeeper.delete() call SolrZooKeeper.delete() call SolrZooKeeper.delete() call SolrZooKeeper.delete() call SolrZooKeeper.delete() return public public final final if == || instanceof return return new public public final final call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) public public final final call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) public public final final final final throws if return call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) new public public throws return call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() else return call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() public public throws return call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() public public final final throws if return call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) new public public throws return call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() != else return call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() != public public throws return call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() call SolrZooKeeper.exists() != public < public < final final final final throws if return call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) new public < public < throws return call SolrZooKeeper.getChildren() call SolrZooKeeper.getChildren() call SolrZooKeeper.getChildren() call SolrZooKeeper.getChildren() call SolrZooKeeper.getChildren() else return call SolrZooKeeper.getChildren() call SolrZooKeeper.getChildren() call SolrZooKeeper.getChildren() call SolrZooKeeper.getChildren() call SolrZooKeeper.getChildren() public < public < throws return call SolrZooKeeper.getChildren() call SolrZooKeeper.getChildren() call SolrZooKeeper.getChildren() call SolrZooKeeper.getChildren() call SolrZooKeeper.getChildren() public public final final final final final final throws if return call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) new public public throws return call SolrZooKeeper.getData() call SolrZooKeeper.getData() call SolrZooKeeper.getData() call SolrZooKeeper.getData() call SolrZooKeeper.getData() else return call SolrZooKeeper.getData() call SolrZooKeeper.getData() call SolrZooKeeper.getData() call SolrZooKeeper.getData() call SolrZooKeeper.getData() public public throws return call SolrZooKeeper.getData() call SolrZooKeeper.getData() call SolrZooKeeper.getData() call SolrZooKeeper.getData() call SolrZooKeeper.getData() public public final final final final final final throws if return call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) new public public throws return call SolrZooKeeper.setData() call SolrZooKeeper.setData() call SolrZooKeeper.setData() call SolrZooKeeper.setData() call SolrZooKeeper.setData() else return call SolrZooKeeper.setData() call SolrZooKeeper.setData() call SolrZooKeeper.setData() call SolrZooKeeper.setData() call SolrZooKeeper.setData() public public throws return call SolrZooKeeper.setData() call SolrZooKeeper.setData() call SolrZooKeeper.setData() call SolrZooKeeper.setData() call SolrZooKeeper.setData() decl List public public final final final final final final final throws if return call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) new public public throws return call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() else decl_stmt java.util.List < = call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() return call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() public public throws return call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() public public throws public public throws public public throws public public throws public public throws public public throws public public throws public public throws CreateMode decl String boolean Object String decl byte decl byte CreateMode StringBuilder String public public throws if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt boolean = if = decl_stmt java.lang.String = decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt byte = decl_stmt java.lang.String = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + decl_stmt java.lang.String final final = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl_stmt java.lang.Object = if == || == - && decl_stmt CreateMode = if == - = = if ! = try if decl_stmt CreateMode final final = decl_stmt byte final final final = call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) new public public throws call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() return else call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() catch if ! - return if == - throw if == - else if == - - public public throws call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call SolrZooKeeper.create() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() call ZkACLProvider.getACLsToAdd() return public public throws public public throws return - decl byte public public throws if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + decl_stmt byte = return public < public < final final final < throws if return call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) new public < public < throws return call SolrZooKeeper.multi() call SolrZooKeeper.multi() call SolrZooKeeper.multi() call SolrZooKeeper.multi() call SolrZooKeeper.multi() else return call SolrZooKeeper.multi() call SolrZooKeeper.multi() call SolrZooKeeper.multi() call SolrZooKeeper.multi() call SolrZooKeeper.multi() public < public < throws return call SolrZooKeeper.multi() call SolrZooKeeper.multi() call SolrZooKeeper.multi() call SolrZooKeeper.multi() call SolrZooKeeper.multi() String decl byte decl List StringBuilder public public throws decl_stmt byte = decl_stmt java.util.List < = decl_stmt java.lang.StringBuilder = new for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + if != decl_stmt java.lang.String = new if ! && ! || if = + + + + call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) call java.lang.String.replaceAll(String,String) + + + else + + for : if ! try + : + + catch StringBuilder public public throws decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() StreamResult Transformer Source StringWriter TransformerFactory public static public static try decl_stmt Source = new new decl_stmt StringWriter = new decl_stmt StreamResult = new decl_stmt org.apache.solr.response.transform.TransformerFactory = call TransformerFactory.setAttribute() call TransformerFactory.setAttribute() call TransformerFactory.setAttribute() call TransformerFactory.setAttribute() call TransformerFactory.setAttribute() decl_stmt Transformer = call TransformerFactory.newTransformer() call TransformerFactory.newTransformer() call TransformerFactory.newTransformer() call TransformerFactory.newTransformer() call TransformerFactory.newTransformer() call Transformer.setOutputProperty() call Transformer.setOutputProperty() call Transformer.setOutputProperty() call Transformer.setOutputProperty() call Transformer.setOutputProperty() call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() call Transformer.transform() return call StreamResult.getWriter() call StreamResult.getWriter() call StreamResult.getWriter() call StreamResult.getWriter() call StreamResult.getWriter() catch throw new private static private static return public public if return = try finally call ConnectionManager.close() call ConnectionManager.close() call ConnectionManager.close() call ConnectionManager.close() call ConnectionManager.close() assert public public return SolrZooKeeper throws decl_stmt org.apache.solr.common.cloud.SolrZooKeeper = = if != call org.apache.solr.common.cloud.SolrZooKeeper.close() call org.apache.solr.common.cloud.SolrZooKeeper.close() call org.apache.solr.common.cloud.SolrZooKeeper.close() call org.apache.solr.common.cloud.SolrZooKeeper.close() call org.apache.solr.common.cloud.SolrZooKeeper.close() if public public return private private if != try call org.apache.solr.common.cloud.SolrZooKeeper.close() call org.apache.solr.common.cloud.SolrZooKeeper.close() call org.apache.solr.common.cloud.SolrZooKeeper.close() call org.apache.solr.common.cloud.SolrZooKeeper.close() call org.apache.solr.common.cloud.SolrZooKeeper.close() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new private private try catch public public throws try if ! try - catch catch return public static public static return public static public static if instanceof return public public return public public return public public < throws if return call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) call org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation) new public public throws return call SolrZooKeeper.setACL() call SolrZooKeeper.setACL() call SolrZooKeeper.setACL() call SolrZooKeeper.setACL() call SolrZooKeeper.setACL() - else return call SolrZooKeeper.setACL() call SolrZooKeeper.setACL() call SolrZooKeeper.setACL() call SolrZooKeeper.setACL() call SolrZooKeeper.setACL() - public public throws return call SolrZooKeeper.setACL() call SolrZooKeeper.setACL() call SolrZooKeeper.setACL() call SolrZooKeeper.setACL() call SolrZooKeeper.setACL() - public public final final throws try call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + catch return decl List private private final final final final throws decl_stmt java.util.List < try = catch return for : if && continue if + else + +