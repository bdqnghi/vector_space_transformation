org.apache.solr.search.grouping.distributed.responseprocessor org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.Sort import org.apache.lucene.search.TopDocs import org.apache.lucene.search.TopFieldDocs import org.apache.lucene.search.grouping.GroupDocs import org.apache.lucene.search.grouping.TopGroups import org.apache.lucene.util.BytesRef import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.common.SolrException import org.apache.solr.common.params.ShardParams import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SimpleOrderedMap import org.apache.solr.handler.component.ResponseBuilder import org.apache.solr.handler.component.ShardDoc import org.apache.solr.handler.component.ShardRequest import org.apache.solr.handler.component.ShardResponse import org.apache.solr.response.SolrQueryResponse import org.apache.solr.search.Grouping import org.apache.solr.search.grouping.distributed.ShardResponseProcessor import org.apache.solr.search.grouping.distributed.command.QueryCommandResult import org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer import java.io.IOException import java.io.PrintWriter import java.io.StringWriter import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import class org.apache.solr.search.grouping.distributed.responseprocessor.TopGroupsShardResponseProcessor super super implements ShardDoc QueryCommandResult int decl NamedList Sort decl List decl Map decl Map int int decl SimpleOrderedMap decl NamedList int StringWriter Sort float decl List decl List int int ShardDoc decl String decl Map TopDocs Throwable decl String decl Map float TopGroupsResultTransformer public public decl_stmt org.apache.lucene.search.Sort = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt org.apache.lucene.search.Sort = if == = decl_stmt int if == || = else = decl_stmt int = decl_stmt java.util.Map < < < = new <> for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < < decl_stmt java.util.Map < < = new <> for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < decl_stmt org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer = new decl_stmt org.apache.solr.common.util.NamedList < = if = new <> for : decl_stmt org.apache.solr.common.util.SimpleOrderedMap < = if != = new <> if != decl_stmt java.lang.Throwable = if instanceof = call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call Throwable.toString() call Throwable.toString() call Throwable.toString() call Throwable.toString() call Throwable.toString() decl_stmt StringWriter = new call java.lang.Throwable.printStackTrace(PrintStreamOrWriter) call java.lang.Throwable.printStackTrace(PrintStreamOrWriter) call java.lang.Throwable.printStackTrace(PrintStreamOrWriter) call java.lang.Throwable.printStackTrace(PrintStreamOrWriter) call java.lang.Throwable.printStackTrace(PrintStreamOrWriter) new call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() else if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() call decl NamedList.add() if && != if == continue decl_stmt org.apache.solr.common.util.NamedList < = < if == continue decl_stmt java.util.Map < = call org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer.transformToNative(NamedList,Sort,Sort,String) call org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer.transformToNative(NamedList,Sort,Sort,String) call org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer.transformToNative(NamedList,Sort,Sort,String) call org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer.transformToNative(NamedList,Sort,Sort,String) call org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer.transformToNative(NamedList,Sort,Sort,String) decl_stmt int = decl_stmt float = for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt org.apache.lucene.search.grouping.TopGroups < = < call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == continue if != += if || > = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for : decl_stmt org.apache.solr.search.grouping.distributed.command.QueryCommandResult = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != += call org.apache.solr.search.grouping.distributed.command.QueryCommandResult.getMatches() call org.apache.solr.search.grouping.distributed.command.QueryCommandResult.getMatches() call org.apache.solr.search.grouping.distributed.command.QueryCommandResult.getMatches() call org.apache.solr.search.grouping.distributed.command.QueryCommandResult.getMatches() call org.apache.solr.search.grouping.distributed.command.QueryCommandResult.getMatches() decl_stmt float = call QueryCommandResult.getTopDocs() call QueryCommandResult.getTopDocs() call QueryCommandResult.getTopDocs() call QueryCommandResult.getTopDocs() call QueryCommandResult.getTopDocs() if || > = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() call decl SimpleOrderedMap.add() try for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt java.util.List < < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() continue decl_stmt java.util.List < < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() continue call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.util.List < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = for : call int.add() call int.add() call int.add() call int.add() call int.add() call QueryCommandResult.getTopDocs() call QueryCommandResult.getTopDocs() call QueryCommandResult.getTopDocs() call QueryCommandResult.getTopDocs() call QueryCommandResult.getTopDocs() += call org.apache.solr.search.grouping.distributed.command.QueryCommandResult.getMatches() call org.apache.solr.search.grouping.distributed.command.QueryCommandResult.getMatches() call org.apache.solr.search.grouping.distributed.command.QueryCommandResult.getMatches() call org.apache.solr.search.grouping.distributed.command.QueryCommandResult.getMatches() call org.apache.solr.search.grouping.distributed.command.QueryCommandResult.getMatches() decl_stmt int = + decl_stmt org.apache.lucene.search.TopDocs final final if call org.apache.lucene.search.Sort.equals(Object) call org.apache.lucene.search.Sort.equals(Object) call org.apache.lucene.search.Sort.equals(Object) call org.apache.lucene.search.Sort.equals(Object) call org.apache.lucene.search.Sort.equals(Object) = call int.toArray() call int.toArray() call int.toArray() call int.toArray() call int.toArray() new call int.size() call int.size() call int.size() call int.size() call int.size() else = call int.toArray() call int.toArray() call int.toArray() call int.toArray() call int.toArray() new call int.size() call int.size() call int.size() call int.size() call int.size() new decl_stmt java.util.Map < = new <> decl_stmt int = for < : for < : for : decl_stmt org.apache.solr.handler.component.ShardDoc = if ! call int.containsKey() call int.containsKey() call int.containsKey() call int.containsKey() call int.containsKey() = ++ call int.put() call int.put() call int.put() call int.put() call int.put() for : for : call QueryCommandResult.getTopDocs() call QueryCommandResult.getTopDocs() call QueryCommandResult.getTopDocs() call QueryCommandResult.getTopDocs() call QueryCommandResult.getTopDocs() decl_stmt org.apache.solr.handler.component.ShardDoc = = ++ call int.put() call int.put() call int.put() call int.put() call int.put() = catch throw new