org.apache.solr.search java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.Date import java.util.HashMap import java.util.List import java.util.Map import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.index.Term import org.apache.lucene.queries.function.BoostedQuery import org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.queries.function.ValueSource import org.apache.lucene.queries.function.docvalues.BoolDocValues import org.apache.lucene.queries.function.docvalues.DoubleDocValues import org.apache.lucene.queries.function.docvalues.LongDocValues import org.apache.lucene.queries.function.valuesource.* import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Query import org.apache.lucene.search.SortField import org.apache.lucene.search.TermQuery import org.apache.lucene.search.spell.JaroWinklerDistance import org.apache.lucene.search.spell.LevensteinDistance import org.apache.lucene.search.spell.NGramDistance import org.apache.lucene.search.spell.StringDistance import org.apache.lucene.util.BytesRefBuilder import org.apache.solr.common.SolrException import org.apache.solr.common.util.NamedList import org.apache.solr.request.SolrRequestInfo import org.apache.solr.schema.CurrencyField import org.apache.solr.schema.FieldType import org.apache.solr.schema.SchemaField import org.apache.solr.schema.StrField import org.apache.solr.schema.TextField import org.apache.solr.search.facet.AggValueSource import org.apache.solr.search.facet.AvgAgg import org.apache.solr.search.facet.CountAgg import org.apache.solr.search.facet.HLLAgg import org.apache.solr.search.facet.MaxAgg import org.apache.solr.search.facet.MinAgg import org.apache.solr.search.facet.PercentileAgg import org.apache.solr.search.facet.SumAgg import org.apache.solr.search.facet.SumsqAgg import org.apache.solr.search.facet.UniqueAgg import org.apache.solr.search.function.CollapseScoreFunction import org.apache.solr.search.function.OrdFieldSource import org.apache.solr.search.function.ReverseOrdFieldSource import org.apache.solr.search.function.distance.GeoDistValueSourceParser import org.apache.solr.search.function.distance.GeohashFunction import org.apache.solr.search.function.distance.GeohashHaversineFunction import org.apache.solr.search.function.distance.HaversineFunction import org.apache.solr.search.function.distance.SquaredEuclideanFunction import org.apache.solr.search.function.distance.StringDistanceFunction import org.apache.solr.search.function.distance.VectorDistanceFunction import org.apache.solr.util.DateMathParser import org.apache.solr.util.plugin.NamedListInitializedPlugin import org.locationtech.spatial4j.distance.DistanceUtils import class org.apache.solr.search.ValueSourceParser super super implements decl Map public public public static public static return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public static public static return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() private static private static call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() ValueSource public public throws decl_stmt org.apache.lucene.queries.function.ValueSource final final = return new String public public throws decl_stmt java.lang.String = return new public public throws return new public public throws return new ValueSource int public public throws decl_stmt int = decl_stmt org.apache.lucene.queries.function.ValueSource = try catch throw new return String public public throws decl_stmt java.lang.String = return new ValueSource public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = return float ValueSource float public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt float = decl_stmt float = return new float ValueSource float float public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt float = decl_stmt float = decl_stmt float = return new ValueSource float float public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt float = decl_stmt float = return new ValueSource ValueSource public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt org.apache.lucene.queries.function.ValueSource = return new ValueSource ValueSource public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt org.apache.lucene.queries.function.ValueSource = return new protected protected return protected protected return protected protected return protected protected return ValueSource float ValueSource ValueSource float public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt float = decl_stmt float = decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt org.apache.lucene.queries.function.ValueSource = : return new ValueSource public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = return new protected protected return protected protected return protected protected return protected protected return public public throws return new decl List public public throws decl_stmt java.util.List < = return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl List public public throws decl_stmt java.util.List < = return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ValueSource ValueSource public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt org.apache.lucene.queries.function.ValueSource = return new protected protected return protected protected return - protected protected return protected protected return - public public throws return new Query float public public throws decl_stmt org.apache.lucene.search.Query = decl_stmt float = if = return new Query ValueSource BoostedQuery public public throws decl_stmt org.apache.lucene.search.Query = decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt org.apache.lucene.queries.function.BoostedQuery = new return new String String public public throws decl_stmt java.lang.String = decl_stmt java.lang.String = return new MultiValueSource boolean MultiValueSource ValueSource ValueSource double public public throws decl_stmt double = decl_stmt boolean = decl_stmt MultiValueSource decl_stmt MultiValueSource decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt org.apache.lucene.queries.function.ValueSource = if = new = new else if instanceof && instanceof = = else throw new return new double ValueSource ValueSource public public throws decl_stmt double = decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt org.apache.lucene.queries.function.ValueSource = return new ValueSource ValueSource public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt org.apache.lucene.queries.function.ValueSource = return new ValueSource ValueSource StringDistance int String public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt java.lang.String = decl_stmt org.apache.lucene.search.spell.StringDistance = if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) = new else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) = new else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) decl_stmt int = if = = new else = return new String decl FieldType String SchemaField public public throws decl_stmt java.lang.String = decl_stmt org.apache.solr.schema.SchemaField = if decl_stmt java.lang.String = decl_stmt MultiValueSelector = if == throw new + + return call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() return call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() CurrencyField String String SchemaField public public throws decl_stmt java.lang.String = decl_stmt org.apache.solr.schema.SchemaField = if ! call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() instanceof throw new + decl_stmt org.apache.solr.schema.CurrencyField = call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() call org.apache.solr.schema.SchemaField.getType() decl_stmt java.lang.String = : return call org.apache.solr.schema.CurrencyField.getConvertedValueSource(String,RawCurrencyValueSource) call org.apache.solr.schema.CurrencyField.getConvertedValueSource(String,RawCurrencyValueSource) call org.apache.solr.schema.CurrencyField.getConvertedValueSource(String,RawCurrencyValueSource) call org.apache.solr.schema.CurrencyField.getConvertedValueSource(String,RawCurrencyValueSource) call org.apache.solr.schema.CurrencyField.getConvertedValueSource(String,RawCurrencyValueSource) call org.apache.solr.schema.CurrencyField.getValueSource(SchemaField,QParser) call org.apache.solr.schema.CurrencyField.getValueSource(SchemaField,QParser) call org.apache.solr.schema.CurrencyField.getValueSource(SchemaField,QParser) call org.apache.solr.schema.CurrencyField.getValueSource(SchemaField,QParser) call org.apache.solr.schema.CurrencyField.getValueSource(SchemaField,QParser) public public return * public public return * public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return public public return decl List public public throws decl_stmt java.util.List < = return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl List public public throws decl_stmt java.util.List < = return new call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl List MVResult public public throws decl_stmt java.util.List < = decl_stmt MVResult = return new decl List MVResult float public public throws decl_stmt float = decl_stmt java.util.List < = decl_stmt MVResult = return new public public return new public public return new TInfo public public throws decl_stmt TInfo = return new call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() TInfo public public throws decl_stmt TInfo = return new call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() String public public throws decl_stmt java.lang.String = return new TInfo public public throws decl_stmt TInfo = return new call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() TInfo public public throws decl_stmt TInfo = return new call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() TInfo public public throws decl_stmt TInfo = return new call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() String public public throws decl_stmt java.lang.String = return new public public return new public public return new public public return new public public return new ValueSource public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = return new protected protected return protected protected return protected protected return protected protected return ValueSource public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = return new protected protected return ! protected protected return protected protected return ! protected protected return decl List public public throws decl_stmt java.util.List < = return new protected protected return protected protected for : if ! return return protected protected return protected protected for : if ! return return decl List public public throws decl_stmt java.util.List < = return new protected protected return protected protected for : if return return protected protected return protected protected for : if return return decl List int public public throws decl_stmt java.util.List < = return new protected protected return protected protected decl_stmt int = = for : if ++ else ++ return != && != protected protected return int protected protected decl_stmt int = = for : if ++ else ++ return != && != ValueSource ValueSource ValueSource public public throws decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt org.apache.lucene.queries.function.ValueSource = decl_stmt org.apache.lucene.queries.function.ValueSource = return new public public throws return new public public throws return public public throws return new public public throws return new public public throws return new public public throws return new public public throws return new public public throws return new public public throws return new public public throws return new Query Term FieldType TInfo String private static private static throws decl_stmt TInfo = new = = = = new decl_stmt org.apache.solr.schema.FieldType = if == = new if instanceof decl_stmt java.lang.String = decl_stmt org.apache.lucene.search.Query = call org.apache.solr.schema.FieldType.getFieldQuery(QParser,SchemaField,String) call org.apache.solr.schema.FieldType.getFieldQuery(QParser,SchemaField,String) call org.apache.solr.schema.FieldType.getFieldQuery(QParser,SchemaField,String) call org.apache.solr.schema.FieldType.getFieldQuery(QParser,SchemaField,String) call org.apache.solr.schema.FieldType.getFieldQuery(QParser,SchemaField,String) if instanceof decl_stmt org.apache.lucene.index.Term = = call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() call org.apache.lucene.index.Term.field() = call org.apache.lucene.index.Term.text() call org.apache.lucene.index.Term.text() call org.apache.lucene.index.Term.text() call org.apache.lucene.index.Term.text() call org.apache.lucene.index.Term.text() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() call TInfo.indexedBytes() else call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) call org.apache.solr.schema.FieldType.readableToIndexed(CharSequence,BytesRefBuilder) return private static private static < < < for = < ++ for = < ++ int MVResult boolean boolean decl List decl List private static private static < decl_stmt MVResult = new if != throw new if == decl_stmt boolean = instanceof decl_stmt boolean = instanceof if && = = else if || throw new else = new = new else decl_stmt int = / decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> = new = new return