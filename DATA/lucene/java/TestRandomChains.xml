org.apache.lucene.analysis.core java.io.IOException import java.io.InputStream import java.io.Reader import java.io.StringReader import java.lang.reflect.Constructor import java.lang.reflect.InvocationTargetException import java.lang.reflect.Modifier import java.net.URI import java.net.URL import java.nio.CharBuffer import java.nio.file.DirectoryStream import java.nio.file.Files import java.nio.file.Path import java.nio.file.Paths import java.text.DateFormat import java.util.ArrayList import java.util.Arrays import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.Enumeration import java.util.HashMap import java.util.HashSet import java.util.IdentityHashMap import java.util.List import java.util.Locale import java.util.Map import java.util.Random import java.util.Set import java.util.regex.Pattern import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.BaseTokenStreamTestCase import org.apache.lucene.analysis.CachingTokenFilter import org.apache.lucene.analysis.CharFilter import org.apache.lucene.analysis.CrankyTokenFilter import org.apache.lucene.analysis.MockGraphTokenFilter import org.apache.lucene.analysis.MockRandomLookaheadTokenFilter import org.apache.lucene.analysis.MockTokenFilter import org.apache.lucene.analysis.MockTokenizer import org.apache.lucene.analysis.TokenFilter import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.Tokenizer import org.apache.lucene.analysis.ValidatingTokenFilter import org.apache.lucene.analysis.charfilter.NormalizeCharMap import org.apache.lucene.analysis.cjk.CJKBigramFilter import org.apache.lucene.analysis.commongrams.CommonGramsFilter import org.apache.lucene.analysis.commongrams.CommonGramsQueryFilter import org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter import org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter import org.apache.lucene.analysis.compound.hyphenation.HyphenationTree import org.apache.lucene.analysis.hunspell.Dictionary import org.apache.lucene.analysis.hunspell.TestHunspellStemFilter import org.apache.lucene.analysis.miscellaneous.HyphenatedWordsFilter import org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter import org.apache.lucene.analysis.miscellaneous.LimitTokenOffsetFilter import org.apache.lucene.analysis.miscellaneous.LimitTokenPositionFilter import org.apache.lucene.analysis.miscellaneous.StemmerOverrideFilter import org.apache.lucene.analysis.miscellaneous.StemmerOverrideFilter.StemmerOverrideMap import org.apache.lucene.analysis.miscellaneous.WordDelimiterFilter import org.apache.lucene.analysis.path.PathHierarchyTokenizer import org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer import org.apache.lucene.analysis.payloads.IdentityEncoder import org.apache.lucene.analysis.payloads.PayloadEncoder import org.apache.lucene.analysis.snowball.TestSnowball import org.apache.lucene.analysis.standard.StandardTokenizer import org.apache.lucene.analysis.synonym.SynonymMap import org.apache.lucene.analysis.util.CharArrayMap import org.apache.lucene.analysis.util.CharArraySet import org.apache.lucene.analysis.wikipedia.WikipediaTokenizer import org.apache.lucene.store.RAMDirectory import org.apache.lucene.util.AttributeFactory import org.apache.lucene.util.AttributeSource import org.apache.lucene.util.CharsRef import org.apache.lucene.util.Rethrow import org.apache.lucene.util.TestUtil import org.apache.lucene.util.Version import org.apache.lucene.util.automaton.CharacterRunAutomaton import org.junit.AfterClass import org.junit.BeforeClass import org.tartarus.snowball.SnowballProgram import org.xml.sax.InputSource import class org.apache.lucene.analysis.core.TestRandomChains super super extends decl Predicate decl Set decl Map decl List decl List decl Map decl List decl Map public public return public public assert == return ! public public assert == return ! public public assert == return ! decl List int decl Comparator public static public static throws decl_stmt java.util.List < < = = new <> = new <> = new <> for final final final < : decl_stmt int final final = if || ! || || || || || || ! || || continue for final final final < : if || || call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() == continue if + call decl Set.containsAll() call decl Set.containsAll() call decl Set.containsAll() call decl Set.containsAll() call decl Set.containsAll() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else decl_stmt java.util.Comparator final final final < < = new < < public public < < return if + + + public public < < return public static public static = = = private static < < private static < < < < return < decl List public static < < public static < < throws decl_stmt java.util.List final final final < < = new <> + + call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return String ClassLoader URI String String Path String decl Enumeration private static private static < < throws decl_stmt java.lang.ClassLoader final final = decl_stmt java.lang.String final final = decl_stmt java.util.Enumeration final final final < = call java.lang.ClassLoader.getResources(String) call java.lang.ClassLoader.getResources(String) call java.lang.ClassLoader.getResources(String) call java.lang.ClassLoader.getResources(String) call java.lang.ClassLoader.getResources(String) while call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() decl_stmt java.net.URI final final = call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Enumeration.nextElement() if ! call java.net.URI.getScheme() call java.net.URI.getScheme() call java.net.URI.getScheme() call java.net.URI.getScheme() call java.net.URI.getScheme() continue decl_stmt java.nio.file.Path final final = if try < = for : if decl_stmt java.lang.String = + + decl_stmt java.lang.String = if call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - if ! call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) && ! call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) + + public public return - char public public while decl_stmt char = char if < || || return public public return public public return public public return byte byte public public decl_stmt byte = new return public public return new public public return public public return decl Set int public public decl_stmt java.util.Set < = new <> decl_stmt int = for = < ++ call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return int decl Collection public public decl_stmt java.util.Collection < = new <> decl_stmt int = for = < ++ call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() call decl Collection.add() return int CharArraySet public public decl_stmt int = decl_stmt org.apache.lucene.analysis.util.CharArraySet = new for = < ++ call org.apache.lucene.analysis.util.CharArraySet.add(Object) call org.apache.lucene.analysis.util.CharArraySet.add(Object) call org.apache.lucene.analysis.util.CharArraySet.add(Object) call org.apache.lucene.analysis.util.CharArraySet.add(Object) call org.apache.lucene.analysis.util.CharArraySet.add(Object) return public public return public public return new public public return new InputStream InputStream public public decl_stmt java.io.InputStream = decl_stmt java.io.InputStream = try return new new catch return InputSource HyphenationTree public public try decl_stmt InputSource = new decl_stmt org.apache.lucene.analysis.compound.hyphenation.HyphenationTree = return catch return String decl Class public public try decl_stmt java.lang.String = decl_stmt java.lang.Class < extends extends = + + return call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch return public public if return else return decl Builder decl NormalizeCharMap decl Set String int public public decl_stmt org.apache.lucene.util.fst.Builder = new decl_stmt java.util.Set < = new <> decl_stmt int = for = < ++ decl_stmt java.lang.String = if ! call decl Builder.contains() call decl Builder.contains() call decl Builder.contains() call decl Builder.contains() call decl Builder.contains() && call int.length() call int.length() call int.length() call int.length() call int.length() > decl_stmt java.lang.String = call decl NormalizeCharMap.add() call decl NormalizeCharMap.add() call decl NormalizeCharMap.add() call decl NormalizeCharMap.add() call decl NormalizeCharMap.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() return call decl NormalizeCharMap.build() call decl NormalizeCharMap.build() call decl NormalizeCharMap.build() call decl NormalizeCharMap.build() call decl NormalizeCharMap.build() public public switch case return case return case return case return default: return decl CharArrayMap int public public decl_stmt int = decl_stmt org.apache.lucene.analysis.util.CharArrayMap < = new <> for = < ++ call decl CharArrayMap.put() call decl CharArrayMap.put() call decl CharArrayMap.put() call decl CharArrayMap.put() call decl CharArrayMap.put() return decl Builder decl StemmerOverrideFilter int String public public decl_stmt int = decl_stmt org.apache.lucene.util.fst.Builder = new for = < ++ decl_stmt java.lang.String = do = call decl Builder.isEmpty() call decl Builder.isEmpty() call decl Builder.isEmpty() call decl Builder.isEmpty() call decl Builder.isEmpty() decl_stmt java.lang.String = do = call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call decl StemmerOverrideFilter.add() call decl StemmerOverrideFilter.add() call decl StemmerOverrideFilter.add() call decl StemmerOverrideFilter.add() call decl StemmerOverrideFilter.add() try return call decl StemmerOverrideFilter.build() call decl StemmerOverrideFilter.build() call decl StemmerOverrideFilter.build() call decl StemmerOverrideFilter.build() call decl StemmerOverrideFilter.build() catch return decl Builder decl SynonymMap public public decl_stmt org.apache.lucene.util.fst.Builder = new decl_stmt int final final = for = < ++ try return call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() catch return private private new new String private private while decl_stmt java.lang.String final final = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() != && call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) == - return public public if return return ArgProducer static < static < < decl_stmt ArgProducer final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() + + return call ArgProducer.create() call ArgProducer.create() call ArgProducer.create() call ArgProducer.create() call ArgProducer.create() decl Class decl Object static static < decl_stmt java.lang.Object = new for = < ++ decl_stmt java.lang.Class < = if == = else = return decl Class decl Object static static < decl_stmt java.lang.Object = new for = < ++ decl_stmt java.lang.Class < = if == = else = return decl Class decl Object static static < decl_stmt java.lang.Object = new for = < ++ decl_stmt java.lang.Class < = if == = else if == = new else = return Random TokenFilterSpec TokenizerSpec public public decl_stmt java.util.Random = new decl_stmt TokenizerSpec = decl_stmt TokenFilterSpec = return Random TokenFilterSpec TokenizerSpec protected protected decl_stmt java.util.Random = new decl_stmt TokenizerSpec = decl_stmt TokenFilterSpec = return new Random CharFilterSpec protected protected decl_stmt java.util.Random = new decl_stmt CharFilterSpec = return TokenFilterSpec StringBuilder Random CharFilterSpec TokenizerSpec public public decl_stmt java.util.Random = new decl_stmt java.lang.StringBuilder = new decl_stmt CharFilterSpec = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = new decl_stmt TokenizerSpec = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt TokenFilterSpec = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() T Throwable String private < private < < try decl_stmt T final final = decl_stmt java.lang.String = = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - return catch decl_stmt java.lang.Throwable final final = if instanceof || instanceof if call java.lang.Throwable.printStackTrace(PrintStreamOrWriter) call java.lang.Throwable.printStackTrace(PrintStreamOrWriter) call java.lang.Throwable.printStackTrace(PrintStreamOrWriter) call java.lang.Throwable.printStackTrace(PrintStreamOrWriter) call java.lang.Throwable.printStackTrace(PrintStreamOrWriter) else catch return decl Predicate private private < decl_stmt org.apache.lucene.analysis.core.Predicate final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return != && call decl Predicate.apply() call decl Predicate.apply() call decl Predicate.apply() call decl Predicate.apply() call decl Predicate.apply() decl Predicate private private < decl_stmt org.apache.lucene.analysis.core.Predicate final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return != && call decl Predicate.apply() call decl Predicate.apply() call decl Predicate.apply() call decl Predicate.apply() call decl Predicate.apply() Object TokenizerSpec decl Constructor StringBuilder private private decl_stmt TokenizerSpec = new while == decl_stmt java.lang.reflect.Constructor final final final < extends extends = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.lang.StringBuilder final final = new decl_stmt java.lang.Object final final = call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() if continue = if != &= ! = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return Object int CharFilterSpec StringBuilder decl Constructor private private decl_stmt CharFilterSpec = new = decl_stmt java.lang.StringBuilder = new decl_stmt int = for = < ++ while decl_stmt java.lang.reflect.Constructor final final final < extends extends = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.lang.Object final final = call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() if continue = if != = break = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return StringBuilder int TokenFilter Object TokenFilterSpec decl Constructor private private decl_stmt TokenFilterSpec = new = = decl_stmt java.lang.StringBuilder = new decl_stmt int = for = < ++ = new + while decl_stmt java.lang.reflect.Constructor final final final < extends extends = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if ! && call decl Constructor.getDeclaringClass() call decl Constructor.getDeclaringClass() call decl Constructor.getDeclaringClass() call decl Constructor.getDeclaringClass() call decl Constructor.getDeclaringClass() || call decl Constructor.getDeclaringClass() call decl Constructor.getDeclaringClass() call decl Constructor.getDeclaringClass() call decl Constructor.getDeclaringClass() call decl Constructor.getDeclaringClass() continue decl_stmt java.lang.Object final final = call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() call decl Constructor.getParameterTypes() if continue decl_stmt org.apache.lucene.analysis.TokenFilter final final = if != &= ! = break = new = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() return public public return public public throws = return public public throws = return public public throws = return public public throws = return public public throws = return public public throws public public return public public throws return public public throws int Random public public throws decl_stmt int = : decl_stmt java.util.Random = for = < ++ try = new call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() if + try * catch + throw int Random public public throws decl_stmt int = : decl_stmt java.util.Random = for = < ++ try = new call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() if + try * catch + throw