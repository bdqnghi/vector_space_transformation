org.apache.lucene.index java.io.IOException import java.nio.file.Path import java.util.* import java.util.concurrent.ExecutorService import java.util.concurrent.Executors import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicBoolean import java.util.concurrent.atomic.AtomicInteger import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.PhraseQuery import org.apache.lucene.search.Query import org.apache.lucene.search.ScoreDoc import org.apache.lucene.search.Sort import org.apache.lucene.search.SortField import org.apache.lucene.search.TermQuery import org.apache.lucene.search.TopDocs import org.apache.lucene.store.BaseDirectoryWrapper import org.apache.lucene.store.Directory import org.apache.lucene.util.Bits import org.apache.lucene.util.BytesRef import org.apache.lucene.util.FailOnNonBulkMergesInfoStream import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LineFileDocs import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.NamedThreadFactory import org.apache.lucene.util.PrintStreamInfoStream import org.apache.lucene.util.TestUtil import class org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase super super extends AtomicInteger decl Map AtomicInteger boolean IndexWriter AtomicBoolean AtomicInteger Directory protected protected throws protected protected return protected protected < extends extends extends < extends extends throws call org.apache.lucene.index.IndexWriter.updateDocuments(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocuments(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocuments(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocuments(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocuments(Term,Iterable) protected protected < extends extends extends < extends extends throws call org.apache.lucene.index.IndexWriter.addDocuments(Iterable) call org.apache.lucene.index.IndexWriter.addDocuments(Iterable) call org.apache.lucene.index.IndexWriter.addDocuments(Iterable) call org.apache.lucene.index.IndexWriter.addDocuments(Iterable) call org.apache.lucene.index.IndexWriter.addDocuments(Iterable) protected protected < extends extends throws call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) call org.apache.lucene.index.IndexWriter.addDocument(Iterable) protected protected < extends extends throws call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) call org.apache.lucene.index.IndexWriter.updateDocument(Term,Iterable) protected protected throws call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) call org.apache.lucene.index.IndexWriter.deleteDocuments(Term) protected protected Term int String String Document String decl List decl List Field decl Thread int decl List SubDocs SubDocs decl List private private final final final final final final final < final final final < final final final < decl_stmt java.lang.Thread final final final = new for = < ++ = new public public decl_stmt java.util.List final final final < = new <> decl_stmt java.util.List final final final < = new <> while < && ! call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() try if && == if + if == if + decl_stmt org.apache.lucene.document.Document = if == break decl_stmt java.lang.String final final if = + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) else = if if decl_stmt java.lang.String final final decl_stmt SubDocs final final if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > && = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() assert ! call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() = else = = call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() + decl_stmt org.apache.solr.handler.dataimport.config.Field final final = decl_stmt java.util.List final final final < = new <> decl_stmt SubDocs final final = new decl_stmt java.util.List final final final < = new <> call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) decl_stmt int final final = while call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < = if == break call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.lucene.index.Term final final = new if != = call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() if + + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + else if + + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) if == if + + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else decl_stmt java.lang.String final final = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) if + + new call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() if == if + + call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if + + call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) decl_stmt java.lang.String final final = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) new call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() if == if + + call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if == if + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + for : if + + new decl_stmt int final final = call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if + + + call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() for : assert ! new = if + + + + call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() if != call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) catch + call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) throw new if + return Term int String String Document String decl List decl List Field int decl List SubDocs SubDocs decl List public public decl_stmt java.util.List final final final < = new <> decl_stmt java.util.List final final final < = new <> while < && ! call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() try if && == if + if == if + decl_stmt org.apache.lucene.document.Document = if == break decl_stmt java.lang.String final final if = + call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) else = if if decl_stmt java.lang.String final final decl_stmt SubDocs final final if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > && = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() assert ! call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() = else = = call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() + decl_stmt org.apache.solr.handler.dataimport.config.Field final final = decl_stmt java.util.List final final final < = new <> decl_stmt SubDocs final final = new decl_stmt java.util.List final final final < = new <> call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) decl_stmt int final final = while call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < = if == break call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt org.apache.lucene.index.Term final final = new if != = call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() if + + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + else if + + + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) if == if + + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else decl_stmt java.lang.String final final = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) if + + new call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() if == if + + call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else if + + call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) decl_stmt java.lang.String final final = call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) new call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() call java.util.concurrent.atomic.AtomicInteger.getAndIncrement() if == if + + call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if == if + + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + for : if + + new decl_stmt int final final = call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if + + + call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() for : assert ! new = if + + + + call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call SubDocs.subIDs() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() if != call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) call org.apache.lucene.document.Document.removeField(String) catch + call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) throw new if + BytesRef Terms Fields TermsEnum AtomicInteger int String IndexSearcher int decl Map int decl Thread int AtomicInteger SegmentReader protected protected final final throws decl_stmt int final final = decl_stmt java.lang.Thread final final final = new decl_stmt java.util.concurrent.atomic.AtomicInteger final final = new decl_stmt java.util.concurrent.atomic.AtomicInteger final final = new for = < ++ = new public public if + while < && ! call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() try decl_stmt org.apache.lucene.search.IndexSearcher final final = try for final final : call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() decl_stmt org.apache.lucene.index.SegmentReader = decl_stmt java.util.Map < = call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) + + + + + + + call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() ! || call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() if call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() > decl_stmt Fields = call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() decl_stmt org.apache.lucene.index.Terms = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() if == continue decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt int = decl_stmt int decl_stmt int if call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() < = = else = call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() / = while < decl_stmt org.apache.lucene.util.BytesRef = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) break ++ if + == call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) call java.util.concurrent.atomic.AtomicInteger.addAndGet(int) new new finally catch + call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) throw new for : if + BytesRef Terms TermsEnum Fields String IndexSearcher int decl Map int int SegmentReader public public if + while < && ! call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() try decl_stmt org.apache.lucene.search.IndexSearcher final final = try for final final : call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() decl_stmt org.apache.lucene.index.SegmentReader = decl_stmt java.util.Map < = call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) + + + + + + + call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() call org.apache.lucene.index.SegmentReader.getSegmentInfo() ! || call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() if call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() > decl_stmt Fields = call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() decl_stmt org.apache.lucene.index.Terms = call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() call Fields.terms() if == continue decl_stmt org.apache.lucene.index.TermsEnum = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() decl_stmt int = decl_stmt int decl_stmt int if < = = else = / = while < decl_stmt org.apache.lucene.util.BytesRef = call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() call TermsEnum.next() if == break ++ if + == new new finally catch + call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) throw new protected protected throws protected protected throws decl Set Random String boolean IndexWriterConfig ExecutorService int int int int long int MergePolicy int int LineFileDocs decl List MockAnalyzer Path decl Thread IndexSearcher TopDocs int Bits int Document long IndexSearcher decl Set public public throws call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicBoolean.set(boolean) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) call java.util.concurrent.atomic.AtomicInteger.set(int) decl_stmt long final final = decl_stmt java.util.Random = new decl_stmt org.apache.lucene.util.LineFileDocs final final = new decl_stmt java.nio.file.Path final final = = if instanceof decl_stmt org.apache.lucene.analysis.MockAnalyzer = new call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) call org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int) decl_stmt org.apache.lucene.index.IndexWriterConfig final final = call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) new if call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() instanceof call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() if decl_stmt org.apache.lucene.index.MergePolicy = call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() call org.apache.lucene.index.IndexWriterConfig.getMergePolicy() if instanceof else if instanceof else if instanceof call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.setNoCFSRatio(double) call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.MergePolicy.getNoCFSRatio() call org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(IndexReaderWarmer) call org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(IndexReaderWarmer) call org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(IndexReaderWarmer) call org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(IndexReaderWarmer) call org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(IndexReaderWarmer) new public public throws if + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt int final final = decl_stmt org.apache.lucene.util.Bits final final = decl_stmt int = decl_stmt int final final = / for = < += if == || call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() decl_stmt org.apache.lucene.document.Document final final = += call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() decl_stmt org.apache.lucene.search.IndexSearcher = += call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new if + + if call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) call org.apache.lucene.index.IndexWriterConfig.setInfoStream(InfoStream) new public public if return = new decl_stmt java.util.concurrent.ExecutorService final final = : new decl_stmt int final final = decl_stmt int final final = : decl_stmt java.util.Set final final final < = new < decl_stmt java.util.Set final final final < = new < decl_stmt java.util.List final final final < = new < decl_stmt long final final = + * decl_stmt java.lang.Thread final final final = if + + + - + if + - + for : if + - + + + + decl_stmt org.apache.lucene.search.IndexSearcher final final = if + call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() call java.util.concurrent.atomic.AtomicBoolean.get() decl_stmt boolean = for : decl_stmt org.apache.lucene.search.TopDocs final final = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new if != + + + + + = for : decl_stmt org.apache.lucene.search.TopDocs final final = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new if != + + + + = for : decl_stmt org.apache.lucene.search.TopDocs = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new if ! if != + + + + + = else decl_stmt int = - decl_stmt int = - for : decl_stmt int final final = if != - + else = = decl_stmt org.apache.lucene.document.Document final final = call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.search.IndexSearcher.doc(int,Set) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) call org.apache.lucene.document.Document.get(String) = - for : = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new decl_stmt int final final = if != - + = else for : call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new decl_stmt int final final = call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.nextDoc() call org.apache.lucene.util.LineFileDocs.close() call org.apache.lucene.util.LineFileDocs.close() call org.apache.lucene.util.LineFileDocs.close() call org.apache.lucene.util.LineFileDocs.close() call org.apache.lucene.util.LineFileDocs.close() for = < ++ decl_stmt java.lang.String = + if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl_stmt org.apache.lucene.search.TopDocs final final = call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new if != + + + + + = + call org.apache.lucene.index.IndexWriter.segString() call org.apache.lucene.index.IndexWriter.segString() call org.apache.lucene.index.IndexWriter.segString() call org.apache.lucene.index.IndexWriter.segString() call org.apache.lucene.index.IndexWriter.segString() + + + + call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() - call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) + call org.apache.lucene.index.IndexWriter.segString() call org.apache.lucene.index.IndexWriter.segString() call org.apache.lucene.index.IndexWriter.segString() call org.apache.lucene.index.IndexWriter.segString() call org.apache.lucene.index.IndexWriter.segString() + + + + call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() - call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call org.apache.lucene.index.IndexWriter.numDocs() call org.apache.lucene.index.IndexWriter.numDocs() call org.apache.lucene.index.IndexWriter.numDocs() call org.apache.lucene.index.IndexWriter.numDocs() call org.apache.lucene.index.IndexWriter.numDocs() try call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) call org.apache.lucene.index.IndexWriter.commit(SegmentInfos) finally call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() call org.apache.lucene.index.IndexWriter.close() if != call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit) call java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit) call java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit) call java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit) call java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit) call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() if + - + IndexSearcher int Bits Document int int public public throws if + call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt int final final = decl_stmt org.apache.lucene.util.Bits final final = decl_stmt int = decl_stmt int final final = / for = < += if == || call Bits.get() call Bits.get() call Bits.get() call Bits.get() call Bits.get() decl_stmt org.apache.lucene.document.Document final final = += call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() call org.apache.lucene.document.Document.getFields() decl_stmt org.apache.lucene.search.IndexSearcher = += call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) new new if + + public public if return Sort int int private private throws decl_stmt int = new new decl_stmt org.apache.lucene.search.Sort final final = new new decl_stmt int = return PhraseQuery protected protected throws new new new new decl_stmt org.apache.lucene.search.PhraseQuery = new