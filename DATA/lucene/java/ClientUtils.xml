org.apache.solr.client.solrj.util java.io.IOException import java.io.StringWriter import java.io.Writer import java.nio.ByteBuffer import java.util.ArrayList import java.util.Collection import java.util.Date import java.util.Map import java.util.Map.Entry import org.apache.solr.common.SolrInputDocument import org.apache.solr.common.SolrInputField import org.apache.solr.common.cloud.Slice import org.apache.solr.common.util.Base64 import org.apache.solr.common.util.ContentStream import org.apache.solr.common.util.ContentStreamBase import org.apache.solr.common.util.XML import class org.apache.solr.client.solrj.util.ClientUtils String decl ArrayList ContentStreamBase public static < public static < final final final final if == return decl_stmt java.util.ArrayList < = new <> decl_stmt org.apache.solr.common.util.ContentStreamBase = new call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call org.apache.solr.common.util.ContentStreamBase.setContentType(String) call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return Collection float String String public static public static throws + + for : decl_stmt float = decl_stmt java.lang.String = for : decl_stmt java.lang.String = if instanceof for < : < = = if instanceof decl_stmt java.util.Collection = for : = else = else = if for : ByteBuffer private static private static throws if instanceof = else if instanceof decl_stmt byte = = else if instanceof decl_stmt ByteBuffer = = call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.array() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() call ByteBuffer.limit() - call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() call ByteBuffer.position() if == if != else if != else if != else if == else StringWriter public static public static decl_stmt StringWriter = new try catch return call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() call StringWriter.toString() StringBuilder char public static public static decl_stmt java.lang.StringBuilder = new for = < ++ decl_stmt char = if == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || == || call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() String public static public static < < for : decl_stmt java.lang.String = if = + +