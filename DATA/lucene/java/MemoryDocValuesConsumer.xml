org.apache.lucene.codecs.memory java.io.IOException import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.NoSuchElementException import org.apache.lucene.codecs.CodecUtil import org.apache.lucene.codecs.DocValuesConsumer import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.IndexFileNames import org.apache.lucene.index.SegmentWriteState import org.apache.lucene.store.ByteArrayDataOutput import org.apache.lucene.store.IndexOutput import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.MathUtil import org.apache.lucene.util.fst.Builder import org.apache.lucene.util.fst.FST.INPUT_TYPE import org.apache.lucene.util.fst.FST import org.apache.lucene.util.fst.PositiveIntOutputs import org.apache.lucene.util.fst.Util import org.apache.lucene.util.packed.BlockPackedWriter import org.apache.lucene.util.packed.MonotonicBlockPackedWriter import org.apache.lucene.util.packed.PackedInts.FormatAndBits import org.apache.lucene.util.packed.PackedInts import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.VERSION_CURRENT import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.BLOCK_SIZE import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.BYTES import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.NUMBER import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.FST import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.SORTED_SET import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.SORTED_SET_SINGLETON import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.SORTED_NUMERIC import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.SORTED_NUMERIC_SINGLETON import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.DELTA_COMPRESSED import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.BLOCK_COMPRESSED import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.GCD_COMPRESSED import static static org.apache.lucene.codecs.memory.MemoryDocValuesProducer.TABLE_COMPRESSED import class org.apache.lucene.codecs.memory.MemoryDocValuesConsumer super super extends int IndexOutput float public public < throws long FormatAndBits int boolean long BlockPackedWriter decl Long long int long int FormatAndBits long long int boolean long decl HashMap decl HashSet long int long float long long FormatAndBits decl PackedInts int long long < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt boolean = decl_stmt java.util.HashSet < = decl_stmt long = if = new <> decl_stmt long = decl_stmt long = for : decl_stmt long final final if == = = else = if != if < / || / || / = else if != = - = = = = if != if call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() if call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() > = ++ if == decl_stmt long final final = - decl_stmt int final final = decl_stmt int final final = += = = else for : decl_stmt long = = = ++ if decl_stmt long = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() - else call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() - decl_stmt long final final = - decl_stmt int final final = < : decl_stmt FormatAndBits final final = decl_stmt FormatAndBits final final if < && != = call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() - else = decl_stmt FormatAndBits final final if < && != && != decl_stmt long final final = - / decl_stmt int final final = < : = else = decl_stmt boolean = if != decl_stmt int = / decl_stmt float = / float if >= && + * < = if >= = if != && + * < call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() decl_stmt java.lang.Long = call decl HashSet.toArray() call decl HashSet.toArray() call decl HashSet.toArray() call decl HashSet.toArray() call decl HashSet.toArray() new call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() decl_stmt HashMap final final final < = new <> decl_stmt int = << call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() for = < ++ call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() call decl HashMap.put() for = < ++ call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt Writer final final final final final = int for : call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() call decl HashMap.get() == : call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() else if != && + * < call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt Writer final final final final final = int for : decl_stmt long = == : call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() - / call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() else if call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt org.apache.lucene.util.packed.BlockPackedWriter final final = new for : call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() == : call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() else call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() decl_stmt long final final = == : call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call FormatAndBits.format() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() call IndexOutput.writeVInt() decl_stmt Writer final final final final final = int for : decl_stmt long = == : call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() call BlockPackedWriter.add() - call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() call BlockPackedWriter.finish() boolean public public throws decl_stmt boolean = try if != call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() - if != = finally if else = = int long boolean int MonotonicBlockPackedWriter long int int long public public final final final < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() decl_stmt int = decl_stmt int = decl_stmt long final final = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt boolean = decl_stmt int = for : decl_stmt int final final if == = = else = if > throw new + + + + + + + + + + + ++ = = if != call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call IndexOutput.writeBytes() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() - if decl_stmt long = call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() - else call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() - call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() if != call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedWriter final final = new decl_stmt long = for : if != += call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() PositiveIntOutputs decl Builder decl FST long IntsRefBuilder private private < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt org.apache.lucene.util.fst.PositiveIntOutputs = decl_stmt org.apache.lucene.util.fst.Builder < = new <> decl_stmt org.apache.lucene.util.IntsRefBuilder = new decl_stmt long = for : call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() ++ decl_stmt org.apache.lucene.util.fst.FST < = call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() if != call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeVLong() call int.writeVLong() int long < throws decl_stmt long = decl_stmt int = for : if == call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() = = if != |= << & ++ if > call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() call IndexOutput.writeLong() public public < < throws long MonotonicBlockPackedWriter long public public < < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() if call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() else call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() call IndexOutput.getFilePointer() decl_stmt org.apache.lucene.util.packed.MonotonicBlockPackedWriter final final = new decl_stmt long = call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() for : += call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.add() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() call MonotonicBlockPackedWriter.finish() decl_stmt long = call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call MonotonicBlockPackedWriter.ord() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() call int.writeLong() public public < final final final < final final final < throws call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() call int.writeVInt() if call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() - else call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() call int.writeByte() new < public < public < return new public < public < return new public public return int int public public if ! throw new decl_stmt int = decl_stmt int = * if > = try catch throw new = = = return long long private private throws decl_stmt long = for = < ++ decl_stmt long = - = public public throw new