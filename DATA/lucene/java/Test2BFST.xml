org.apache.lucene.util.fst java.util.Arrays import java.util.Random import org.apache.lucene.store.Directory import org.apache.lucene.store.IOContext import org.apache.lucene.store.IndexInput import org.apache.lucene.store.IndexOutput import org.apache.lucene.store.MMapDirectory import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IntsRef import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TimeUnits import org.apache.lucene.util.packed.PackedInts import org.junit.Ignore import com.carrotsearch.randomizedtesting.annotations.TimeoutSuite import class annotation annotation org.apache.lucene.util.fst.Test2BFST super super extends long int decl int decl Builder Object int decl Outputs IndexInput decl byte long IntsRef long decl FST decl int decl IntsRefFSTEnum decl IntsRefFSTEnum IntsRef boolean Random Directory IndexOutput public public throws decl_stmt int = new decl_stmt org.apache.lucene.util.IntsRef = new decl_stmt long = decl_stmt org.apache.lucene.store.Directory = new for = < ++ decl_stmt boolean = == if ! decl_stmt org.apache.lucene.util.fst.Outputs < = decl_stmt java.lang.Object = call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() call decl Outputs.getNoOutput() decl_stmt org.apache.lucene.util.fst.Builder final final final < = new <> decl_stmt int = decl_stmt java.util.Random = new decl_stmt int = new decl_stmt org.apache.lucene.util.IntsRef = new while for = < ++ = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() ++ if == + + call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() + + call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() + if call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() > + * * break decl_stmt org.apache.lucene.util.fst.FST < = call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() for = < ++ + call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() + + call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() + + call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() + = new for = < ++ if == + for = < ++ = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum < = new <> = new decl_stmt int = while decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum < = call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() if == break for = < ++ = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) ++ if == decl_stmt org.apache.lucene.store.IndexOutput = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() = new <> call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() else call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() + + decl_stmt org.apache.lucene.util.fst.Outputs < = decl_stmt org.apache.lucene.util.fst.Builder final final final < = new <> decl_stmt byte = new decl_stmt org.apache.lucene.util.BytesRef = new decl_stmt int = decl_stmt java.util.Random = new while call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() ++ if == + + call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() + if call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() > break decl_stmt org.apache.lucene.util.fst.FST < = call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() for = < ++ + call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() + + call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() + + call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() + = new for = < ++ if == + call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum < = new <> = new decl_stmt int = while decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum < = call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() if == break call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) call java.util.Random.nextBytes(byte) ++ if == decl_stmt org.apache.lucene.store.IndexOutput = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() = new <> call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() else call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() + + decl_stmt org.apache.lucene.util.fst.Outputs < = decl_stmt org.apache.lucene.util.fst.Builder final final final < = new <> decl_stmt long = decl_stmt int = decl_stmt java.util.Random = new while call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() += + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) ++ if == + + call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() + if call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() call decl Builder.fstRamBytesUsed() > break decl_stmt org.apache.lucene.util.fst.FST < = call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() for = < ++ + call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() call decl FST.ramBytesUsed() + + call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() call decl Builder.getNodeCount() + + call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() call decl Builder.getArcCount() + = = new for = < ++ if == + += + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum < = new <> = new decl_stmt int = = while decl_stmt org.apache.lucene.util.fst.IntsRefFSTEnum < = call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() call decl IntsRefFSTEnum.next() if == break call decl IntsRefFSTEnum.output() call decl IntsRefFSTEnum.output() call decl IntsRefFSTEnum.output() call decl IntsRefFSTEnum.output() call decl IntsRefFSTEnum.output() call decl IntsRefFSTEnum.output() call decl IntsRefFSTEnum.output() call decl IntsRefFSTEnum.output() call decl IntsRefFSTEnum.output() += + call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) ++ if == decl_stmt org.apache.lucene.store.IndexOutput = call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call Directory.createOutput() call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call decl FST.save() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() call IndexOutput.close() decl_stmt org.apache.lucene.store.IndexInput = call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() call Directory.openInput() = new <> call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() call IndexInput.close() else call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.deleteFile() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() int private private decl_stmt int = while >= += + if < break else = --