org.apache.solr.client.solrj java.io.BufferedOutputStream import java.io.IOException import java.io.InputStream import java.io.OutputStream import java.io.OutputStreamWriter import java.lang.invoke.MethodHandles import java.net.HttpURLConnection import java.net.Socket import java.net.URL import java.nio.charset.StandardCharsets import java.util.ArrayList import java.util.Arrays import java.util.HashMap import java.util.Iterator import java.util.List import java.util.Map import java.util.concurrent.CopyOnWriteArrayList import java.util.concurrent.atomic.AtomicInteger import org.apache.commons.io.IOUtils import org.apache.solr.SolrJettyTestBase import org.apache.solr.SolrTestCaseJ4.SuppressSSL import org.apache.solr.client.solrj.impl.BinaryRequestWriter import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.request.RequestWriter import org.apache.solr.client.solrj.response.QueryResponse import org.apache.solr.common.SolrInputDocument import org.junit.BeforeClass import org.junit.Test import org.slf4j.Logger import org.slf4j.LoggerFactory import class annotation org.apache.solr.client.solrj.TestSolrJErrorHandling super super extends decl List Logger public static public static throws public public throws call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() Throwable StringBuilder public public decl_stmt java.lang.StringBuilder = new decl_stmt java.lang.Throwable = do if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = = != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() call java.lang.Throwable.getMessage() + return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() StringBuilder decl Map Integer String public public throws if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return decl_stmt java.util.Map < = new <> for : decl_stmt java.lang.String = decl_stmt java.lang.Integer = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + decl_stmt java.lang.StringBuilder = new for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() HttpSolrClient public public throws decl_stmt org.apache.solr.client.solrj.impl.HttpSolrClient = call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) new call HttpSolrClient.deleteByQuery() call HttpSolrClient.deleteByQuery() call HttpSolrClient.deleteByQuery() call HttpSolrClient.deleteByQuery() call HttpSolrClient.deleteByQuery() HttpSolrClient public public throws decl_stmt org.apache.solr.client.solrj.impl.HttpSolrClient = call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) call org.apache.solr.client.solrj.impl.HttpSolrClient.setRequestWriter(RequestWriter) new call HttpSolrClient.deleteByQuery() call HttpSolrClient.deleteByQuery() call HttpSolrClient.deleteByQuery() call HttpSolrClient.deleteByQuery() call HttpSolrClient.deleteByQuery() int int < < final final final final return new < decl_stmt int = public public return < public public decl_stmt int = + ++ if == return return + + public public public public return < int public public decl_stmt int = + ++ if == return return + + public public int int AtomicInteger decl List int final final final final final final throws decl_stmt java.util.concurrent.atomic.AtomicInteger final final = new decl_stmt java.util.List < = new <> for = < ++ decl_stmt int final final = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new decl_stmt int = public public try while -- >= call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() catch for : for : decl_stmt int = if > call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() + call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() + + call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() public public try while -- >= catch int QueryResponse throws decl_stmt org.apache.solr.client.solrj.response.QueryResponse = decl_stmt int = call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() call org.apache.solr.client.solrj.response.QueryResponse.getResults() return throws String try * catch decl_stmt java.lang.String = call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) catch call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + StringBuilder decl_stmt java.lang.StringBuilder = new * call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + + + + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl byte decl_stmt byte = new byte return StringBuilder decl byte int throws decl_stmt java.lang.StringBuilder = new decl_stmt byte = new for decl_stmt int = try = catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() call StringBuilder.length() + + if <= break call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() break return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() int String URL InputStream OutputStreamWriter String HttpSolrClient String HttpURLConnection public public throws decl_stmt java.lang.String = decl_stmt org.apache.solr.client.solrj.impl.HttpSolrClient = decl_stmt java.lang.String = call HttpSolrClient.getBaseURL() call HttpSolrClient.getBaseURL() call HttpSolrClient.getBaseURL() call HttpSolrClient.getBaseURL() call HttpSolrClient.getBaseURL() + decl_stmt java.net.HttpURLConnection = decl_stmt java.net.URL = new = call java.net.URL.openConnection(Proxy) call java.net.URL.openConnection(Proxy) call java.net.URL.openConnection(Proxy) call java.net.URL.openConnection(Proxy) call java.net.URL.openConnection(Proxy) call java.net.HttpURLConnection.setRequestMethod(String) call java.net.HttpURLConnection.setRequestMethod(String) call java.net.HttpURLConnection.setRequestMethod(String) call java.net.HttpURLConnection.setRequestMethod(String) call java.net.HttpURLConnection.setRequestMethod(String) call HttpURLConnection.setDoOutput() call HttpURLConnection.setDoOutput() call HttpURLConnection.setDoOutput() call HttpURLConnection.setDoOutput() call HttpURLConnection.setDoOutput() call java.net.HttpURLConnection.setRequestProperty(String,String) call java.net.HttpURLConnection.setRequestProperty(String,String) call java.net.HttpURLConnection.setRequestProperty(String,String) call java.net.HttpURLConnection.setRequestProperty(String,String) call java.net.HttpURLConnection.setRequestProperty(String,String) decl_stmt java.io.OutputStreamWriter = new call java.net.HttpURLConnection.getOutputStream() call java.net.HttpURLConnection.getOutputStream() call java.net.HttpURLConnection.getOutputStream() call java.net.HttpURLConnection.getOutputStream() call java.net.HttpURLConnection.getOutputStream() call java.io.OutputStreamWriter.write(int) call java.io.OutputStreamWriter.write(int) call java.io.OutputStreamWriter.write(int) call java.io.OutputStreamWriter.write(int) call java.io.OutputStreamWriter.write(int) call java.io.OutputStreamWriter.flush() call java.io.OutputStreamWriter.flush() call java.io.OutputStreamWriter.flush() call java.io.OutputStreamWriter.flush() call java.io.OutputStreamWriter.flush() decl_stmt int = try = call java.net.HttpURLConnection.getResponseCode() call java.net.HttpURLConnection.getResponseCode() call java.net.HttpURLConnection.getResponseCode() call java.net.HttpURLConnection.getResponseCode() call java.net.HttpURLConnection.getResponseCode() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt java.io.InputStream if == = call java.net.HttpURLConnection.getInputStream() call java.net.HttpURLConnection.getInputStream() call java.net.HttpURLConnection.getInputStream() call java.net.HttpURLConnection.getInputStream() call java.net.HttpURLConnection.getInputStream() else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = call java.net.HttpURLConnection.getErrorStream() call java.net.HttpURLConnection.getErrorStream() call java.net.HttpURLConnection.getErrorStream() call java.net.HttpURLConnection.getErrorStream() call java.net.HttpURLConnection.getErrorStream() if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = call java.net.HttpURLConnection.getInputStream() call java.net.HttpURLConnection.getInputStream() call java.net.HttpURLConnection.getInputStream() call java.net.HttpURLConnection.getInputStream() call java.net.HttpURLConnection.getInputStream() decl_stmt java.lang.String = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl byte String decl byte int String String int public public throws decl_stmt java.lang.String = decl_stmt int = try = new = new = decl_stmt byte = decl_stmt int = decl_stmt byte = += decl_stmt java.lang.String = + + + + + + + + + call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) call java.lang.String.getBytes(Charset) decl_stmt java.lang.String = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence)