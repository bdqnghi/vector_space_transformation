org.apache.solr.common.cloud java.io.Closeable import java.io.UnsupportedEncodingException import java.lang.invoke.MethodHandles import java.net.URLDecoder import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashSet import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Map.Entry import java.util.Set import java.util.TreeSet import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicReference import org.apache.solr.common.Callable import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.util.Pair import org.apache.solr.common.util.Utils import org.apache.zookeeper.CreateMode import org.apache.zookeeper.KeeperException import org.apache.zookeeper.WatchedEvent import org.apache.zookeeper.Watcher import org.apache.zookeeper.Watcher.Event.EventType import org.apache.zookeeper.data.Stat import org.slf4j.Logger import org.slf4j.LoggerFactory import static static java.util.Arrays.asList import static static java.util.Collections.EMPTY_MAP import static static java.util.Collections.emptyMap import static static java.util.Collections.emptySet import static static java.util.Collections.unmodifiableSet import static static org.apache.solr.common.util.Utils.fromJSON import class org.apache.solr.common.cloud.ZkStateReader super super implements String String Logger String Object String String decl AtomicReference decl Set String String SolrZkClient String String String String String int Aliases String String int String String String String boolean String String ConfigData String decl ConcurrentHashMap String String String boolean String String ZkConfigManager String String ClusterState String decl Set String decl ConcurrentHashMap Runnable decl Map decl Set String String Object String String String String String int String decl byte String ZkNodeProps public public decl_stmt java.lang.String = decl_stmt java.lang.String = + + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try decl_stmt byte = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) if != decl_stmt org.apache.solr.common.cloud.ZkNodeProps = = call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) if != if ! call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) + + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new + else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else throw new + catch throw new + catch throw new + return public public try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new public public return DocCollection decl Collection public public throws synchronized if == return decl_stmt java.util.Collection < = new <> call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() for : decl_stmt org.apache.solr.common.cloud.DocCollection = decl CollectionRef LazyCollectionRef decl ClusterState public public throws synchronized if == return decl_stmt CollectionRef = call org.apache.solr.common.cloud.ClusterState.getCollectionRef(String) call org.apache.solr.common.cloud.ClusterState.getCollectionRef(String) call org.apache.solr.common.cloud.ClusterState.getCollectionRef(String) call org.apache.solr.common.cloud.ClusterState.getCollectionRef(String) call org.apache.solr.common.cloud.ClusterState.getCollectionRef(String) if == if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() decl_stmt LazyCollectionRef = new if call decl CollectionRef.get() call decl CollectionRef.get() call decl CollectionRef.get() call decl CollectionRef.get() call decl CollectionRef.get() == return call decl ConcurrentHashMap.putIfAbsent() call decl ConcurrentHashMap.putIfAbsent() call decl ConcurrentHashMap.putIfAbsent() call decl ConcurrentHashMap.putIfAbsent() call decl ConcurrentHashMap.putIfAbsent() else if call decl ClusterState.isLazilyLoaded() call decl ClusterState.isLazilyLoaded() call decl ClusterState.isLazilyLoaded() call decl ClusterState.isLazilyLoaded() call decl ClusterState.isLazilyLoaded() if call decl ClusterState.get() call decl ClusterState.get() call decl ClusterState.get() call decl ClusterState.get() call decl ClusterState.get() != return else if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() else if call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() decl_stmt org.apache.solr.common.cloud.DocCollection = public public throws public public return DocCollection DocCollection public public decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) if == return if call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() < call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() decl_stmt org.apache.solr.common.cloud.DocCollection = if == return - if call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() > call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() = if call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() == return call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() return call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() decl byte Stat Watcher ConfigData public synchronized public synchronized throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if ! call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) throw new + call org.apache.solr.common.cloud.SolrZkClient.getZkServerAddress() call org.apache.solr.common.cloud.SolrZkClient.getZkServerAddress() call org.apache.solr.common.cloud.SolrZkClient.getZkServerAddress() call org.apache.solr.common.cloud.SolrZkClient.getZkServerAddress() call org.apache.solr.common.cloud.SolrZkClient.getZkServerAddress() + new new new synchronized call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) new public public if return try synchronized call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt Watcher final final = decl_stmt Stat final final = new decl_stmt byte final final final = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() if != decl_stmt ConfigData = new = == || == : = == - : = call Runnable.run() call Runnable.run() call Runnable.run() call Runnable.run() call Runnable.run() = decl byte Stat Watcher public public if return try synchronized call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt Watcher final final = decl_stmt Stat final final = new decl_stmt byte final final final = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() decl byte Stat Watcher private private final final final < < throws call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) new public public if return try synchronized call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt Watcher final final = decl_stmt Stat final final = new decl_stmt byte final final final = try new <> catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() decl byte Stat Watcher public public if return try synchronized call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt Watcher final final = decl_stmt Stat final final = new decl_stmt byte final final final = try new <> catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() decl Map private private decl_stmt java.util.Map < = new <> for : if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() && ! call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() new for < : call decl ConcurrentHashMap.entrySet() call decl ConcurrentHashMap.entrySet() call decl ConcurrentHashMap.entrySet() call decl ConcurrentHashMap.entrySet() call decl ConcurrentHashMap.entrySet() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() new for < : call decl ConcurrentHashMap.entrySet() call decl ConcurrentHashMap.entrySet() call decl ConcurrentHashMap.entrySet() call decl ConcurrentHashMap.entrySet() call decl ConcurrentHashMap.entrySet() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() call decl Map.putIfAbsent() = new call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() if call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.isTraceEnabled() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call Logger.trace() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call decl ConcurrentHashMap.keySet() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() Stat decl byte ClusterState private private throws try decl_stmt Stat final final = new decl_stmt byte final final final = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) decl_stmt org.apache.solr.common.cloud.ClusterState final final = call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() synchronized if >= call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() return = call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() = call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() catch synchronized = = private private for : new call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() call decl ConcurrentHashMap.containsKey() decl List LazyCollectionRef private private throws synchronized decl_stmt java.util.List < = try = call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() if == || call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl ConcurrentHashMap.clear() call decl ConcurrentHashMap.clear() call decl ConcurrentHashMap.clear() call decl ConcurrentHashMap.clear() call decl ConcurrentHashMap.clear() return for : if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl_stmt LazyCollectionRef = call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() if == call decl ConcurrentHashMap.putIfAbsent() call decl ConcurrentHashMap.putIfAbsent() call decl ConcurrentHashMap.putIfAbsent() call decl ConcurrentHashMap.putIfAbsent() call decl ConcurrentHashMap.putIfAbsent() new public public return public public return public public return + + decl Set decl List decl Set private private throws synchronized decl_stmt java.util.Set < try decl_stmt java.util.List < = call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) = new <> catch = call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() call decl AtomicReference.set() decl_stmt java.util.Set < synchronized = call decl AtomicReference.getAndSet() call decl AtomicReference.getAndSet() call decl AtomicReference.getAndSet() call decl AtomicReference.getAndSet() call decl AtomicReference.getAndSet() if == return = = if != call org.apache.solr.common.cloud.ClusterState.setLiveNodes(Set) call org.apache.solr.common.cloud.ClusterState.setLiveNodes(Set) call org.apache.solr.common.cloud.ClusterState.setLiveNodes(Set) call org.apache.solr.common.cloud.ClusterState.setLiveNodes(Set) call org.apache.solr.common.cloud.ClusterState.setLiveNodes(Set) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() new <> new <> public public return public public return public public = if call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() ZkCoreNodeProps public public throws decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = new return call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() Replica public public if != decl_stmt org.apache.solr.common.cloud.Replica = call org.apache.solr.common.cloud.ClusterState.getLeader(String,String) call org.apache.solr.common.cloud.ClusterState.getLeader(String,String) call org.apache.solr.common.cloud.ClusterState.getLeader(String,String) call org.apache.solr.common.cloud.ClusterState.getLeader(String,String) call org.apache.solr.common.cloud.ClusterState.getLeader(String,String) if != && call org.apache.solr.common.cloud.Replica.getNodeName() call org.apache.solr.common.cloud.Replica.getNodeName() call org.apache.solr.common.cloud.Replica.getNodeName() call org.apache.solr.common.cloud.Replica.getNodeName() call org.apache.solr.common.cloud.Replica.getNodeName() return return public public throws return long Replica public public throws decl_stmt long = + while decl_stmt org.apache.solr.common.cloud.Replica = if != return if >= || break throw new + + + + + + public static public static return + + + + + != + : + public static public static return + + + + + != + + + : public < public < return public < public < return decl Map Slice String decl Map ZkCoreNodeProps ClusterState decl List public < public < assert != decl_stmt org.apache.solr.common.cloud.ClusterState = if == return decl_stmt java.util.Map < = call org.apache.solr.common.cloud.ClusterState.getSlicesMap(String) call org.apache.solr.common.cloud.ClusterState.getSlicesMap(String) call org.apache.solr.common.cloud.ClusterState.getSlicesMap(String) call org.apache.solr.common.cloud.ClusterState.getSlicesMap(String) call org.apache.solr.common.cloud.ClusterState.getSlicesMap(String) if == throw new + + + call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() decl_stmt org.apache.solr.common.cloud.Slice = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + decl_stmt java.util.Map < = call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() call org.apache.solr.common.cloud.Slice.getReplicasMap() decl_stmt java.util.List < = new <> call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = new decl_stmt java.lang.String = if call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if == || == call org.apache.solr.common.cloud.ZkCoreNodeProps.getState() call org.apache.solr.common.cloud.ZkCoreNodeProps.getState() call org.apache.solr.common.cloud.ZkCoreNodeProps.getState() call org.apache.solr.common.cloud.ZkCoreNodeProps.getState() call org.apache.solr.common.cloud.ZkCoreNodeProps.getState() if == || != call org.apache.solr.common.cloud.ZkCoreNodeProps.getState() call org.apache.solr.common.cloud.ZkCoreNodeProps.getState() call org.apache.solr.common.cloud.ZkCoreNodeProps.getState() call org.apache.solr.common.cloud.ZkCoreNodeProps.getState() call org.apache.solr.common.cloud.ZkCoreNodeProps.getState() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == return return public public return decl byte public public throws decl_stmt byte final final final = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) = public public try if return new else return new catch throw new catch throw new Stat Map public public if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() throw new + for decl_stmt Stat = new try if decl_stmt java.util.Map = if == if call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) != call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.remove(Object) call java.util.Map.remove(Object) call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() else if ! call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() else decl_stmt java.util.Map = new call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() continue catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new + break Stat decl byte public public if ! if == return new - return new try decl_stmt Stat = new if decl_stmt byte final final final = return != && > new < call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() : catch throw new catch throw new return int String String String public public final final decl_stmt int final final = if < throw new + decl_stmt java.lang.String final final = try decl_stmt java.lang.String final final = + decl_stmt java.lang.String = if == = return + + + call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() call java.lang.String.isEmpty() : + catch throw new int public public if return if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return decl_stmt int = == : call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) synchronized DocCollection public public try decl_stmt org.apache.solr.common.cloud.DocCollection = catch if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() int public public if return decl_stmt int = == : call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) synchronized public public try catch throw new + call org.apache.solr.common.cloud.SolrZkClient.getZkServerAddress() call org.apache.solr.common.cloud.SolrZkClient.getZkServerAddress() call org.apache.solr.common.cloud.SolrZkClient.getZkServerAddress() call org.apache.solr.common.cloud.SolrZkClient.getZkServerAddress() call org.apache.solr.common.cloud.SolrZkClient.getZkServerAddress() + catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() public public if return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) synchronized public public try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() public public if return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() public public try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() public static public static try return catch throw new + catch throw new + Stat decl byte ClusterState decl ClusterState String private private throws decl_stmt java.lang.String = try decl_stmt Stat = new decl_stmt byte = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) decl_stmt org.apache.solr.common.cloud.ClusterState = call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() > decl_stmt CollectionRef = call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() call org.apache.solr.common.cloud.ClusterState.getCollectionStates() return == : call decl ClusterState.get() call decl ClusterState.get() call decl ClusterState.get() call decl ClusterState.get() call decl ClusterState.get() catch return public static public static return + + + public public if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) new synchronized DocCollection private private if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() return while if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() break decl_stmt org.apache.solr.common.cloud.DocCollection = call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() if == if call decl ConcurrentHashMap.putIfAbsent() call decl ConcurrentHashMap.putIfAbsent() call decl ConcurrentHashMap.putIfAbsent() call decl ConcurrentHashMap.putIfAbsent() call decl ConcurrentHashMap.putIfAbsent() == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) break else if call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() >= break if call decl ConcurrentHashMap.replace() call decl ConcurrentHashMap.replace() call decl ConcurrentHashMap.replace() call decl ConcurrentHashMap.replace() call decl ConcurrentHashMap.replace() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() call org.apache.solr.common.cloud.DocCollection.getZNodeVersion() break if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.remove() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() call decl ConcurrentHashMap.put() new synchronized