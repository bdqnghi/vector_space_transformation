org.apache.solr.cloud java.io.IOException import java.io.UnsupportedEncodingException import java.lang.invoke.MethodHandles import java.net.InetAddress import java.net.NetworkInterface import java.net.URLEncoder import java.net.UnknownHostException import java.nio.charset.StandardCharsets import java.nio.file.Path import java.util.* import java.util.concurrent.Callable import java.util.concurrent.ExecutorService import java.util.concurrent.Future import java.util.concurrent.TimeUnit import java.util.concurrent.TimeoutException import com.google.common.base.Strings import org.apache.commons.lang.StringUtils import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.impl.HttpSolrClient.Builder import org.apache.solr.client.solrj.request.CoreAdminRequest.WaitForState import org.apache.solr.cloud.overseer.OverseerAction import org.apache.solr.cloud.overseer.SliceMutator import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.cloud.* import org.apache.solr.common.params.CollectionParams import org.apache.solr.common.params.CommonParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.util.StrUtils import org.apache.solr.common.util.URLUtil import org.apache.solr.common.util.Utils import org.apache.solr.core.CloseHook import org.apache.solr.core.CloudConfig import org.apache.solr.core.CoreContainer import org.apache.solr.core.CoreDescriptor import org.apache.solr.core.SolrCore import org.apache.solr.logging.MDCLoggingContext import org.apache.solr.update.UpdateLog import org.apache.zookeeper.CreateMode import org.apache.zookeeper.KeeperException import org.apache.zookeeper.KeeperException.ConnectionLossException import org.apache.zookeeper.KeeperException.NoNodeException import org.apache.zookeeper.KeeperException.SessionExpiredException import org.apache.zookeeper.Op import org.apache.zookeeper.WatchedEvent import org.apache.zookeeper.Watcher import org.apache.zookeeper.data.Stat import org.slf4j.Logger import org.slf4j.LoggerFactory import org.slf4j.MDC import static static org.apache.solr.common.cloud.ZkStateReader.BASE_URL_PROP import static static org.apache.solr.common.cloud.ZkStateReader.COLLECTION_PROP import static static org.apache.solr.common.cloud.ZkStateReader.CORE_NAME_PROP import static static org.apache.solr.common.cloud.ZkStateReader.CORE_NODE_NAME_PROP import static static org.apache.solr.common.cloud.ZkStateReader.ELECTION_NODE_PROP import static static org.apache.solr.common.cloud.ZkStateReader.NODE_NAME_PROP import static static org.apache.solr.common.cloud.ZkStateReader.REJOIN_AT_HEAD_PROP import static static org.apache.solr.common.cloud.ZkStateReader.SHARD_ID_PROP import class org.apache.solr.cloud.ZkController int CoreContainer ZkCmdExecutor String boolean int String decl Map SolrZkClient int ZkStateReader Logger OverseerTaskQueue LeaderElector decl HashSet DistributedMap boolean int boolean decl Map boolean int String String DistributedMap DistributedQueue DistributedMap String OverseerTaskQueue String Overseer CloudConfig decl Map int int public public decl_stmt int final final = decl_stmt int = = * + == : = * + == : return ContextKey public public if == return if == return if != return decl_stmt ContextKey = if == if != return else if ! return if == if != return else if ! return return public public throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return public public throws return decl List decl HashSet ExecutorService ElectionContext ElectionContext public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try call org.apache.solr.common.cloud.ZkStateReader.createClusterStateWatchersAndUpdate() call org.apache.solr.common.cloud.ZkStateReader.createClusterStateWatchersAndUpdate() call org.apache.solr.common.cloud.ZkStateReader.createClusterStateWatchersAndUpdate() call org.apache.solr.common.cloud.ZkStateReader.createClusterStateWatchersAndUpdate() call org.apache.solr.common.cloud.ZkStateReader.createClusterStateWatchersAndUpdate() if ! decl_stmt org.apache.solr.cloud.ElectionContext = new decl_stmt org.apache.solr.cloud.ElectionContext = call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() if != call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.core.CoreContainer.cancelCoreRecoveries() call org.apache.solr.core.CoreContainer.cancelCoreRecoveries() call org.apache.solr.core.CoreContainer.cancelCoreRecoveries() call org.apache.solr.core.CoreContainer.cancelCoreRecoveries() call org.apache.solr.core.CoreContainer.cancelCoreRecoveries() decl_stmt java.util.List < = decl_stmt java.util.concurrent.ExecutorService = != call org.apache.solr.core.CoreContainer.getCoreZkRegisterExecutorService() call org.apache.solr.core.CoreContainer.getCoreZkRegisterExecutorService() call org.apache.solr.core.CoreContainer.getCoreZkRegisterExecutorService() call org.apache.solr.core.CoreContainer.getCoreZkRegisterExecutorService() call org.apache.solr.core.CoreContainer.getCoreZkRegisterExecutorService() : if != for : try if != call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) new else catch decl_stmt java.util.HashSet < synchronized = < call decl HashSet.clone() call decl HashSet.clone() call decl HashSet.clone() call decl HashSet.clone() call decl HashSet.clone() for : try if != call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) new else catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + catch throw new catch throw new public public try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() public public return public public return String String decl List String int CloudDescriptor private private final final decl_stmt java.util.List < = if return if != for : decl_stmt org.apache.solr.cloud.CloudDescriptor = decl_stmt java.lang.String = call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() decl_stmt java.lang.String = call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() try decl_stmt int = call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() call org.apache.solr.common.cloud.ZkStateReader.getZkClient() + + + + + if == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() continue catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() continue catch catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() decl_stmt java.lang.String final final = try call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() new catch if return decl List private private final final decl_stmt java.util.List < = if != for : String ContextKey String ElectionContext private private decl_stmt java.lang.String = decl_stmt java.lang.String final final = decl_stmt ContextKey = new decl_stmt org.apache.solr.cloud.ElectionContext = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call org.apache.solr.cloud.ElectionContext.close() call org.apache.solr.cloud.ElectionContext.close() call org.apache.solr.cloud.ElectionContext.close() call org.apache.solr.cloud.ElectionContext.close() call org.apache.solr.cloud.ElectionContext.close() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() return decl List private private final final decl_stmt java.util.List < = if != for : public public = try for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() finally try try call org.apache.solr.cloud.Overseer.close() call org.apache.solr.cloud.Overseer.close() call org.apache.solr.cloud.Overseer.close() call org.apache.solr.cloud.Overseer.close() call org.apache.solr.cloud.Overseer.close() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() finally try try call org.apache.solr.common.cloud.ZkStateReader.close() call org.apache.solr.common.cloud.ZkStateReader.close() call org.apache.solr.common.cloud.ZkStateReader.close() call org.apache.solr.common.cloud.ZkStateReader.close() call org.apache.solr.common.cloud.ZkStateReader.close() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() finally try call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() Stat public public throws decl_stmt Stat = call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) + + + + return != public public return call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl byte String public public throws decl_stmt java.lang.String = + + + + decl_stmt byte = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) if == call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + throw new + return InetAddress NetworkInterface decl Enumeration String decl Enumeration private private throws if == || == decl_stmt java.lang.String try = catch = if decl_stmt java.util.Enumeration < = try = while call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() decl_stmt java.net.NetworkInterface = call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Enumeration.nextElement() decl_stmt java.util.Enumeration < = call java.net.NetworkInterface.getInetAddresses() call java.net.NetworkInterface.getInetAddresses() call java.net.NetworkInterface.getInetAddresses() call java.net.NetworkInterface.getInetAddresses() call java.net.NetworkInterface.getInetAddresses() while call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() call decl Enumeration.hasMoreElements() decl_stmt java.net.InetAddress = call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Enumeration.nextElement() call decl Enumeration.nextElement() if call java.net.InetAddress.isSiteLocalAddress() call java.net.InetAddress.isSiteLocalAddress() call java.net.InetAddress.isSiteLocalAddress() call java.net.InetAddress.isSiteLocalAddress() call java.net.InetAddress.isSiteLocalAddress() = call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() call java.net.InetAddress.getHostAddress() catch = else if = return public public return public public return public public return public public return decl byte ZkCmdExecutor public static public static throws decl_stmt org.apache.solr.common.cloud.ZkCmdExecutor = new call SolrZkClient.getZkClientTimeout() call SolrZkClient.getZkClientTimeout() call SolrZkClient.getZkClientTimeout() call SolrZkClient.getZkClientTimeout() call SolrZkClient.getZkClientTimeout() call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) decl_stmt byte = call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) call org.apache.solr.common.cloud.ZkCmdExecutor.ensureExists(String,SolrZkClient) Stat ElectionContext private private try call org.apache.solr.common.cloud.ZkStateReader.createClusterStateWatchersAndUpdate() call org.apache.solr.common.cloud.ZkStateReader.createClusterStateWatchersAndUpdate() call org.apache.solr.common.cloud.ZkStateReader.createClusterStateWatchersAndUpdate() call org.apache.solr.common.cloud.ZkStateReader.createClusterStateWatchersAndUpdate() call org.apache.solr.common.cloud.ZkStateReader.createClusterStateWatchersAndUpdate() if ! = new = new call org.apache.solr.core.CoreContainer.getShardHandlerFactory() call org.apache.solr.core.CoreContainer.getShardHandlerFactory() call org.apache.solr.core.CoreContainer.getShardHandlerFactory() call org.apache.solr.core.CoreContainer.getShardHandlerFactory() call org.apache.solr.core.CoreContainer.getShardHandlerFactory() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() call org.apache.solr.core.CoreContainer.getUpdateShardHandler() decl_stmt org.apache.solr.cloud.ElectionContext = new call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) decl_stmt Stat = call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) if != && call Stat.getNumChildren() call Stat.getNumChildren() call Stat.getNumChildren() call Stat.getNumChildren() call Stat.getNumChildren() > catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new boolean decl Collection decl Collection DocCollection ClusterState decl Set long long public public throws decl_stmt long = decl_stmt long = + decl_stmt boolean = decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl_stmt java.util.Set < = call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() while < = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() = call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() for : decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) decl_stmt java.util.Collection < = call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() for : decl_stmt java.util.Collection < = for : if && != = if break if ! call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() String boolean SolrZkClient public static public static throws if ! return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.lang.String = decl_stmt org.apache.solr.common.cloud.SolrZkClient = new decl_stmt boolean = call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) if ! && call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) = call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() call org.apache.solr.common.cloud.SolrZkClient.close() return public public return call org.apache.solr.common.cloud.SolrZkClient.isConnected() call org.apache.solr.common.cloud.SolrZkClient.isConnected() call org.apache.solr.common.cloud.SolrZkClient.isConnected() call org.apache.solr.common.cloud.SolrZkClient.isConnected() call org.apache.solr.common.cloud.SolrZkClient.isConnected() boolean String String private private throws if return decl_stmt java.lang.String = decl_stmt java.lang.String = + + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + try decl_stmt boolean = try call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) - catch = if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) catch if != throw public public return public public throws return call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) public public final final throws return UpdateLog String String decl Future String String boolean String Replica ZkNodeProps Slice decl Map boolean CloudDescriptor boolean String public public final final throws try = call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) try decl_stmt java.lang.String final final = decl_stmt org.apache.solr.cloud.CloudDescriptor final final = decl_stmt java.lang.String final final = call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() decl_stmt java.lang.String final final = assert != : decl_stmt java.lang.String = call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + + call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() + + decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new try decl_stmt boolean = decl_stmt org.apache.solr.common.cloud.Replica = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() if != = call Replica.getBool() call Replica.getBool() call Replica.getBool() call Replica.getBool() call Replica.getBool() catch throw new catch throw new decl_stmt java.lang.String = + decl_stmt java.lang.String = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + decl_stmt boolean = call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) try = call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) decl_stmt org.apache.solr.update.UpdateLog = if ! && ! && != decl_stmt org.apache.solr.common.cloud.Slice = if call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() call org.apache.solr.common.cloud.Slice.getState() != || ! decl_stmt java.util.concurrent.Future < = if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + decl_stmt boolean = if ! call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) call org.apache.solr.common.cloud.ZkStateReader.forceUpdateCollection(String) return finally String long String String String int int String private private final final decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String try = decl_stmt java.lang.String = call org.apache.solr.common.cloud.ZkStateReader.getLeaderUrl(String,String,int) call org.apache.solr.common.cloud.ZkStateReader.getLeaderUrl(String,String,int) call org.apache.solr.common.cloud.ZkStateReader.getLeaderUrl(String,String,int) call org.apache.solr.common.cloud.ZkStateReader.getLeaderUrl(String,String,int) call org.apache.solr.common.cloud.ZkStateReader.getLeaderUrl(String,String,int) * decl_stmt int = decl_stmt long final final = decl_stmt int = int / while ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if > throw new + + + + + ++ if == decl_stmt java.lang.String = + call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() = call org.apache.solr.common.cloud.ZkStateReader.getLeaderUrl(String,String,int) call org.apache.solr.common.cloud.ZkStateReader.getLeaderUrl(String,String,int) call org.apache.solr.common.cloud.ZkStateReader.getLeaderUrl(String,String,int) call org.apache.solr.common.cloud.ZkStateReader.getLeaderUrl(String,String,int) call org.apache.solr.common.cloud.ZkStateReader.getLeaderUrl(String,String,int) = catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new + return public public final final final final throws return ZkCoreNodeProps decl byte Exception int public public final final final final throws decl_stmt int = / decl_stmt Exception = while -- > try decl_stmt byte = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = new return catch throw catch if throw new = catch = if call org.apache.solr.core.CoreContainer.isShutDown() call org.apache.solr.core.CoreContainer.isShutDown() call org.apache.solr.core.CoreContainer.isShutDown() call org.apache.solr.core.CoreContainer.isShutDown() call org.apache.solr.core.CoreContainer.isShutDown() throw new throw new ZkNodeProps ElectionContext String String String LeaderElector ContextKey ElectionContext decl Map private private throws decl_stmt java.lang.String = decl_stmt java.lang.String final final = decl_stmt ContextKey = new decl_stmt org.apache.solr.cloud.ElectionContext = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() decl_stmt java.lang.String = decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new decl_stmt org.apache.solr.cloud.LeaderElector = new decl_stmt org.apache.solr.cloud.ElectionContext = new call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.joinElection(ElectionContext,boolean) decl Replica boolean private private final final final final final final final final final final if call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return decl_stmt boolean = if ! if ! && && ! = if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + return decl_stmt sun.security.provider.certpath.State final final final final final = if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + return else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return public public return public public final final final final final final final throws public public final final final final final final final throws decl Map String UpdateLog String String Integer decl State decl Replica public public final final final final final final final throws if ! try = call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) if == || return else try decl_stmt java.lang.String = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.lang.Integer = if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = assert != && call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > decl_stmt java.lang.String = decl_stmt java.lang.String = if != decl_stmt sun.security.provider.certpath.State final final final final final = if != if == if == else if == throw new + + else if == if == decl_stmt java.util.Map < = new <> call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() if != call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() call java.lang.Integer.toString() if != call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() if try = call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) if != && call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() decl_stmt org.apache.solr.update.UpdateLog = if != call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl State.put() call decl Map.getLogDir() call decl Map.getLogDir() call decl Map.getLogDir() call decl Map.getLogDir() call decl Map.getLogDir() decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new if = call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) finally String CloudDescriptor private private final final final final final final decl_stmt org.apache.solr.cloud.CloudDescriptor final final = decl_stmt java.lang.String final final = if != call org.apache.solr.cloud.CloudDescriptor.setShardId(String) call org.apache.solr.cloud.CloudDescriptor.setShardId(String) call org.apache.solr.cloud.CloudDescriptor.setShardId(String) call org.apache.solr.cloud.CloudDescriptor.setShardId(String) call org.apache.solr.cloud.CloudDescriptor.setShardId(String) return return String CloudDescriptor ZkNodeProps String ElectionContext decl Collection boolean CloudDescriptor public public throws decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = if call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() assert : + + return decl_stmt org.apache.solr.cloud.ElectionContext = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() new if != call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() decl_stmt java.util.Collection final final final < = call org.apache.solr.core.CoreContainer.getCores() call org.apache.solr.core.CoreContainer.getCores() call org.apache.solr.core.CoreContainer.getCores() call org.apache.solr.core.CoreContainer.getCores() call org.apache.solr.core.CoreContainer.getCores() decl_stmt org.apache.solr.cloud.CloudDescriptor = decl_stmt boolean = for : decl_stmt org.apache.solr.cloud.CloudDescriptor final final = if != && call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() = break if call org.apache.solr.common.cloud.ZkStateReader.removeZKWatch(String) call org.apache.solr.common.cloud.ZkStateReader.removeZKWatch(String) call org.apache.solr.common.cloud.ZkStateReader.removeZKWatch(String) call org.apache.solr.common.cloud.ZkStateReader.removeZKWatch(String) call org.apache.solr.common.cloud.ZkStateReader.removeZKWatch(String) decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) ZkNodeProps public public throws decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) call org.apache.solr.cloud.DistributedQueue.offer(byte) throws call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() call org.apache.solr.common.cloud.SolrZkClient.printLayoutToStdOut() String String decl Map String ZkNodeProps Properties public public decl_stmt java.lang.String = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt java.lang.String = + + try if ! call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + try decl_stmt java.util.Map < = new <> decl_stmt java.lang.String = + if > call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() else if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + decl_stmt java.util.Properties = for : if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) call java.util.Properties.getProperty(String) if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() else call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) catch if != throw else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch if == return throw new catch throw new int int decl List ZkNodeProps private private < throws call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt java.util.List < = decl_stmt int = decl_stmt int = for < ++ if call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) decl_stmt org.apache.solr.common.cloud.ZkNodeProps = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) if call org.apache.solr.common.cloud.ZkNodeProps.containsKey(String) call org.apache.solr.common.cloud.ZkNodeProps.containsKey(String) call org.apache.solr.common.cloud.ZkNodeProps.containsKey(String) call org.apache.solr.common.cloud.ZkNodeProps.containsKey(String) call org.apache.solr.common.cloud.ZkNodeProps.containsKey(String) break try = call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.getChildren(String,Watcher,boolean) catch if != && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() break if != && call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) break call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + if == call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + throw new + + + public public return String private private decl_stmt java.lang.String final final = if != else String String String String decl Map int private private decl_stmt int = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) while -- > decl_stmt java.util.Map < = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() if != for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() for : decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return try catch String int private private call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt int = while -- > decl_stmt java.lang.String final final = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() if != return try catch throw new + String public public decl_stmt java.lang.String = if == && ! return + + return String CloudDescriptor DocCollection public public decl_stmt java.lang.String = try decl_stmt org.apache.solr.cloud.CloudDescriptor = if call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() == call org.apache.solr.cloud.CloudDescriptor.setCoreNodeName(String) call org.apache.solr.cloud.CloudDescriptor.setCoreNodeName(String) call org.apache.solr.cloud.CloudDescriptor.setCoreNodeName(String) call org.apache.solr.cloud.CloudDescriptor.setCoreNodeName(String) call org.apache.solr.cloud.CloudDescriptor.setCoreNodeName(String) decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.common.cloud.ZkStateReader.addCollectionWatch(String) call org.apache.solr.common.cloud.ZkStateReader.addCollectionWatch(String) call org.apache.solr.common.cloud.ZkStateReader.addCollectionWatch(String) call org.apache.solr.common.cloud.ZkStateReader.addCollectionWatch(String) call org.apache.solr.common.cloud.ZkStateReader.addCollectionWatch(String) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new if == && call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() else String Slice String String String Replica long CloudDescriptor private private throws if ! call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() decl_stmt org.apache.solr.cloud.CloudDescriptor = decl_stmt java.lang.String = call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() assert != : + + if call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() == throw new + decl_stmt long = + decl_stmt java.lang.String = while < decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() if == = + call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() continue if call Slice.getReplica() call Slice.getReplica() call Slice.getReplica() call Slice.getReplica() call Slice.getReplica() != decl_stmt org.apache.solr.common.cloud.Replica = call Slice.getReplica() call Slice.getReplica() call Slice.getReplica() call Slice.getReplica() call Slice.getReplica() decl_stmt java.lang.String = call Replica.getStr() call Replica.getStr() call Replica.getStr() call Replica.getStr() call Replica.getStr() decl_stmt java.lang.String = call Replica.getStr() call Replica.getStr() call Replica.getStr() call Replica.getStr() call Replica.getStr() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return else = + + if == = + + throw new + + call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() String int String WaitForState String String String ZkCoreNodeProps String decl Replica String boolean decl State CloudDescriptor private private final final decl_stmt org.apache.solr.cloud.CloudDescriptor = decl_stmt java.lang.String = call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() decl_stmt java.lang.String = call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = decl_stmt int = for = < ++ try if throw new = break catch try catch if == - throw new decl_stmt java.lang.String = call org.apache.solr.common.cloud.ZkCoreNodeProps.getBaseUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getBaseUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getBaseUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getBaseUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getBaseUrl() decl_stmt java.lang.String = call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreName() decl_stmt java.lang.String = call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() call org.apache.solr.cloud.CloudDescriptor.getCoreNodeName() decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt boolean = call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() if ! && ! decl_stmt sun.security.provider.certpath.State = try = catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + if != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + try = new decl_stmt WaitForState = new call decl State.setCoreName() call decl State.setCoreName() call decl State.setCoreName() call decl State.setCoreName() call decl State.setCoreName() call decl State.setNodeName() call decl State.setNodeName() call decl State.setNodeName() call decl State.setNodeName() call decl State.setNodeName() call decl State.setCoreNodeName() call decl State.setCoreNodeName() call decl State.setCoreNodeName() call decl State.setCoreNodeName() call decl State.setCoreNodeName() call decl State.setState() call decl State.setState() call decl State.setState() call decl State.setState() call decl State.setState() = for = < ++ if throw new try break catch if call org.apache.solr.core.CoreContainer.isShutDown() call org.apache.solr.core.CoreContainer.isShutDown() call org.apache.solr.core.CoreContainer.isShutDown() call org.apache.solr.core.CoreContainer.isShutDown() call org.apache.solr.core.CoreContainer.isShutDown() throw new decl_stmt java.lang.Throwable = if instanceof if ! call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() throw new + call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() call org.apache.solr.common.cloud.ZkCoreNodeProps.getNodeName() + + + + + try catch if == - throw new catch return decl Map String decl byte ZkNodeProps public static public static throws decl_stmt java.lang.String = + + if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + decl_stmt byte try = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) catch decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new try call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) catch if != throw call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) return decl_stmt org.apache.solr.common.cloud.ZkNodeProps = if != = decl_stmt java.util.Map < = new <> call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call ZkNodeProps.getProperties() call ZkNodeProps.getProperties() call ZkNodeProps.getProperties() call ZkNodeProps.getProperties() call ZkNodeProps.getProperties() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = new else = new call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) ZkConfigManager String String Path decl List public static public static throws decl_stmt org.apache.solr.common.cloud.ZkConfigManager = new decl_stmt java.util.List < = call org.apache.solr.core.CoreContainer.getCoresLocator() call org.apache.solr.core.CoreContainer.getCoresLocator() call org.apache.solr.core.CoreContainer.getCoresLocator() call org.apache.solr.core.CoreContainer.getCoresLocator() call org.apache.solr.core.CoreContainer.getCoresLocator() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + for : decl_stmt java.lang.String = decl_stmt java.lang.String = if = decl_stmt java.nio.file.Path = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + + + + call org.apache.solr.common.cloud.ZkConfigManager.uploadConfigDir(Path,String) call org.apache.solr.common.cloud.ZkConfigManager.uploadConfigDir(Path,String) call org.apache.solr.common.cloud.ZkConfigManager.uploadConfigDir(Path,String) call org.apache.solr.common.cloud.ZkConfigManager.uploadConfigDir(Path,String) call org.apache.solr.common.cloud.ZkConfigManager.uploadConfigDir(Path,String) public public return public public return public public return public public return public public return public public return public public return public public return public public return static static final final final final final final try return + + + + catch throw new String public static public static final final if == return decl_stmt java.lang.String = if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) call java.lang.String.endsWith(String) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - return public public try if != if call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() == || call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() == call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) new return if ! call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() if try call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) + + + - catch catch catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() else call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() call org.apache.solr.cloud.LeaderElector.getContext() catch throw new String LeaderElector ShardLeaderElectionContext ElectionContext String String String String String ContextKey ZkNodeProps public public try decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = try = call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt ContextKey = new decl_stmt org.apache.solr.cloud.ElectionContext = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() call org.apache.solr.cloud.ElectionContext.cancelElection() decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new decl_stmt org.apache.solr.cloud.LeaderElector = decl_stmt ShardLeaderElectionContext = new = + + + call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call org.apache.solr.cloud.LeaderElector.setup(ElectionContext) call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) call org.apache.solr.cloud.LeaderElector.retryElection(ElectionContext,boolean) catch throw new List decl byte Map ZkNodeProps public public try decl_stmt byte = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) new if == return decl_stmt java.util.Map = if == return decl_stmt java.util.List = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) if == return if call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) call java.util.List.contains(Point) decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch return catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return String String boolean ExecutorService LeaderInitiatedRecoveryThread String public public final final final final final final final final throws decl_stmt java.lang.String final final = if == throw new + if == throw new + if == throw new decl_stmt boolean = decl_stmt java.lang.String = decl_stmt java.lang.String = assert != : + synchronized if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() if ! call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return if decl_stmt org.apache.solr.cloud.LeaderInitiatedRecoveryThread = new decl_stmt java.util.concurrent.ExecutorService = try call ExecutorService.execute() call ExecutorService.execute() call ExecutorService.execute() call ExecutorService.execute() call ExecutorService.execute() finally call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + else = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + return boolean public public decl_stmt boolean = synchronized = call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() return public public synchronized call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() String decl Map public public decl_stmt java.util.Map final final final < = if == return decl_stmt java.lang.String final final = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return == : String decl Map decl byte Object public < public < if == || == || == return decl_stmt java.lang.String = decl_stmt byte = try = call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) call org.apache.solr.common.cloud.SolrZkClient.getData(String,Watcher,Stat,boolean) new catch catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + if instanceof throw else throw new + decl_stmt java.util.Map < = if != && > if == byte decl_stmt java.lang.Object = if instanceof = < else throw new + else = new return String String decl Map decl byte public public if == || == || == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + + + + + + return assert != assert != decl_stmt java.lang.String = decl_stmt java.lang.String = if == try call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) call org.apache.solr.common.cloud.SolrZkClient.delete(String,int,boolean) - catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return decl_stmt java.util.Map < = try = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() if == = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() == && != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt byte = try if == else if call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) else call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch if instanceof throw else throw new + + + Integer String ElectionContext ContextKey decl List private private throws if ! call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) throw new decl_stmt ContextKey = new decl_stmt org.apache.solr.cloud.ElectionContext = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == || ! call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) throw new decl_stmt java.lang.Integer = if call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() - call org.apache.solr.common.cloud.SolrZkClient.multi(Iterable,boolean) call org.apache.solr.common.cloud.SolrZkClient.multi(Iterable,boolean) call org.apache.solr.common.cloud.SolrZkClient.multi(Iterable,boolean) call org.apache.solr.common.cloud.SolrZkClient.multi(Iterable,boolean) call org.apache.solr.common.cloud.SolrZkClient.multi(Iterable,boolean) else decl_stmt java.lang.String = try call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.makePath(String,CreateMode,Watcher,boolean) catch decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.apache.solr.common.cloud.SolrZkClient.getZkACLProvider() call org.apache.solr.common.cloud.SolrZkClient.getZkACLProvider() call org.apache.solr.common.cloud.SolrZkClient.getZkACLProvider() call org.apache.solr.common.cloud.SolrZkClient.getZkACLProvider() call org.apache.solr.common.cloud.SolrZkClient.getZkACLProvider() call org.apache.solr.common.cloud.SolrZkClient.multi(Iterable,boolean) call org.apache.solr.common.cloud.SolrZkClient.multi(Iterable,boolean) call org.apache.solr.common.cloud.SolrZkClient.multi(Iterable,boolean) call org.apache.solr.common.cloud.SolrZkClient.multi(Iterable,boolean) call org.apache.solr.common.cloud.SolrZkClient.multi(Iterable,boolean) public public return + + + public public return + + ClusterState boolean DocCollection public public decl_stmt org.apache.solr.common.cloud.ClusterState = if != decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) call org.apache.solr.common.cloud.ClusterState.getCollectionOrNull(String) if != decl_stmt boolean = call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() if public public if != synchronized call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + boolean public public if != decl_stmt boolean synchronized = call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() call decl HashSet.remove() if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + else call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + + decl HashSet < < decl_stmt java.util.HashSet < synchronized = < call decl HashSet.clone() call decl HashSet.clone() call decl HashSet.clone() call decl HashSet.clone() call decl HashSet.clone() return Stat String int SolrZkClient int ZkController String String public static public static decl_stmt int = decl_stmt org.apache.solr.cloud.ZkController final final = decl_stmt org.apache.solr.common.cloud.SolrZkClient final final = call org.apache.solr.cloud.ZkController.getZkClient() call org.apache.solr.cloud.ZkController.getZkClient() call org.apache.solr.cloud.ZkController.getZkClient() call org.apache.solr.cloud.ZkController.getZkClient() call org.apache.solr.cloud.ZkController.getZkClient() decl_stmt java.lang.String final final = + + decl_stmt java.lang.String = try try call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) = + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch if try call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) call org.apache.solr.common.cloud.SolrZkClient.create(String,byte,CreateMode,boolean) = catch try decl_stmt Stat = call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) throw new + catch decl_stmt int = - try decl_stmt Stat = call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) = call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + + throw new + catch throw catch if instanceof decl_stmt java.lang.String final final = + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new return SolrZkClient String public static public static decl_stmt org.apache.solr.common.cloud.SolrZkClient = try call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) call org.apache.solr.common.cloud.SolrZkClient.setData(String,File,boolean) new catch if instanceof decl_stmt java.lang.String final final = + call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new decl Set private private synchronized decl_stmt java.util.Set final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return if call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl Set public public final final final final if == throw new synchronized decl_stmt java.util.Set final final final < = call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() new public public public public public public public public decl Set private < private < final final assert : decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new return Stat boolean public public if return decl_stmt Stat = try = call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) catch catch decl_stmt boolean = try = finally if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else if else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl Set decl Set private private synchronized if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return decl_stmt java.util.Set final final final < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != && ! call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() decl_stmt java.util.Set final final final < = new <> new public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) for final final : try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) for final final : try catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() Stat private private try decl_stmt Stat = call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) call org.apache.solr.common.cloud.SolrZkClient.exists(String,Watcher,boolean) if != && call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() call Stat.getVersion() > catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() public public return synchronized for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() new ElectionContext ContextKey public public decl_stmt ContextKey = new decl_stmt org.apache.solr.cloud.ElectionContext = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return != : decl Collection DocCollection decl Collection public public decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() if != decl_stmt java.util.Collection < = call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() for : decl_stmt java.util.Collection < = for : if return return ZkNodeProps public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.common.cloud.ZkNodeProps = new try catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) +