org.apache.lucene.spatial.util org.locationtech.spatial4j.context.SpatialContext import org.locationtech.spatial4j.distance.DistanceCalculator import org.locationtech.spatial4j.shape.Point import org.apache.lucene.index.LeafReaderContext import org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.queries.function.ValueSource import java.io.IOException import java.util.List import java.util.Map import class org.apache.lucene.spatial.util.ShapeFieldCacheDistanceValueSource super super extends Point double SpatialContext decl ShapeFieldCacheProvider public public return + + + + + Point DistanceCalculator decl ShapeFieldCache double decl List double public public final final throws return new decl_stmt org.apache.lucene.spatial.util.ShapeFieldCache private final final final < = call decl ShapeFieldCacheProvider.getCache() call decl ShapeFieldCacheProvider.getCache() call decl ShapeFieldCacheProvider.getCache() call decl ShapeFieldCacheProvider.getCache() call decl ShapeFieldCacheProvider.getCache() decl_stmt java.awt.Point private final final = decl_stmt DistanceCalculator private final final = call SpatialContext.getDistCalc() call SpatialContext.getDistCalc() call SpatialContext.getDistCalc() call SpatialContext.getDistCalc() call SpatialContext.getDistCalc() decl_stmt double private final final = call SpatialContext.isGeo() call SpatialContext.isGeo() call SpatialContext.isGeo() call SpatialContext.isGeo() call SpatialContext.isGeo() * : public public return float public public decl_stmt java.util.List < = call decl ShapeFieldCache.getShapes() call decl ShapeFieldCache.getShapes() call decl ShapeFieldCache.getShapes() call decl ShapeFieldCache.getShapes() call decl ShapeFieldCache.getShapes() if != decl_stmt double = call DistanceCalculator.distance() call DistanceCalculator.distance() call DistanceCalculator.distance() call DistanceCalculator.distance() call DistanceCalculator.distance() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ = call DistanceCalculator.distance() call DistanceCalculator.distance() call DistanceCalculator.distance() call DistanceCalculator.distance() call DistanceCalculator.distance() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return * return public public return + + public public return float decl List double public public decl_stmt java.util.List < = if != decl_stmt double = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() return * return public public return + + ShapeFieldCacheDistanceValueSource public public if == return if == || != return decl_stmt org.apache.lucene.spatial.util.ShapeFieldCacheDistanceValueSource = if ! call SpatialContext.equals() call SpatialContext.equals() call SpatialContext.equals() call SpatialContext.equals() call SpatialContext.equals() return if ! call java.awt.Point.equals(Object) call java.awt.Point.equals(Object) call java.awt.Point.equals(Object) call java.awt.Point.equals(Object) call java.awt.Point.equals(Object) return if ! call decl ShapeFieldCacheProvider.equals() call decl ShapeFieldCacheProvider.equals() call decl ShapeFieldCacheProvider.equals() call decl ShapeFieldCacheProvider.equals() call decl ShapeFieldCacheProvider.equals() return if != return return public public return call Point.hashCode() call Point.hashCode() call Point.hashCode() call Point.hashCode() call Point.hashCode()