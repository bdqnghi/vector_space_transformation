org.apache.solr.handler.dataimport java.io.File import java.io.FilenameFilter import java.text.ParseException import java.text.SimpleDateFormat import java.util.* import java.util.regex.Matcher import java.util.regex.Pattern import org.apache.solr.util.DateMathParser import class org.apache.solr.handler.dataimport.FileListEntityProcessor super super extends String String long String String String Date boolean String String Date String String String String String String String String long Pattern String Pattern String File public public = if != = = = if == throw new = decl_stmt File = new if ! call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() throw new + + decl_stmt java.lang.String = if != = = if != = = String Matcher Object private private if == return decl_stmt java.util.regex.Matcher = call String.matcher() call String.matcher() call String.matcher() call String.matcher() call String.matcher() if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) decl_stmt java.lang.Object = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) if instanceof return = else = = if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) decl_stmt java.lang.String = = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) try return new catch throw new try return new catch throw new Matcher Number Object private private if == return decl_stmt java.util.regex.Matcher = call String.matcher() call String.matcher() call String.matcher() call String.matcher() call String.matcher() if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) decl_stmt java.lang.Object = call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) if instanceof decl_stmt java.lang.Number = return call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() call Number.longValue() = else = return String String String File decl List public < public < if != return decl_stmt java.util.List < < = new <> decl_stmt File = new decl_stmt java.lang.String = = = = decl_stmt java.lang.String = if != = decl_stmt java.lang.String = if != = = call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() call decl List.iterator() return File private private final final final < < new public public decl_stmt File = new if call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() if else if == else if call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if != && call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) return return File public public decl_stmt File = new if call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() if else if == else if call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if != && call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) return return long File decl Map Date private private < < decl_stmt java.util.Map < = new <> decl_stmt File = new if call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() return decl_stmt long = call File.length() call File.length() call File.length() call File.length() call File.length() decl_stmt java.util.Date = new call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() if != - && <= return if != - && >= return if != && call java.util.Date.after(Date) call java.util.Date.after(Date) call java.util.Date.after(Date) call java.util.Date.after(Date) call java.util.Date.after(Date) return if != && call java.util.Date.before(Date) call java.util.Date.before(Date) call java.util.Date.before(Date) call java.util.Date.before(Date) call java.util.Date.before(Date) return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put()