org.apache.lucene.index java.io.IOException import java.util.ArrayList import java.util.Collections import java.util.List import java.util.Map import org.apache.lucene.codecs.FieldsConsumer import org.apache.lucene.util.CollectionUtil import org.apache.lucene.util.IOUtils import class org.apache.lucene.index.FreqProxTermsWriter super super extends Terms TermsEnum int int decl List decl Map String PostingsEnum private private throws if != && > decl_stmt java.util.Map < = decl_stmt java.util.List < = new <> call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt java.lang.String = decl_stmt org.apache.lucene.index.TermsEnum = decl_stmt org.apache.lucene.index.PostingsEnum = for : if == = decl_stmt org.apache.lucene.index.Terms = if != = call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() call Terms.iterator() else = if != && call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) call org.apache.lucene.index.TermsEnum.seekExact(BytesRef,TermState) = call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) call org.apache.lucene.index.TermsEnum.postings(PostingsEnum) decl_stmt int = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() assert < while decl_stmt int = call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() call PostingsEnum.nextDoc() if < if == = if ++ else break Fields FreqProxTermsWriterPerField FieldsConsumer boolean decl List public public < final final throws decl_stmt java.util.List < = new <> for : decl_stmt org.apache.lucene.index.FreqProxTermsWriterPerField final final = if call FreqProxTermsWriterPerField.bytesHash() call FreqProxTermsWriterPerField.bytesHash() call FreqProxTermsWriterPerField.bytesHash() call FreqProxTermsWriterPerField.bytesHash() call FreqProxTermsWriterPerField.bytesHash() call FreqProxTermsWriterPerField.bytesHash() call FreqProxTermsWriterPerField.bytesHash() call FreqProxTermsWriterPerField.bytesHash() call FreqProxTermsWriterPerField.bytesHash() > call FreqProxTermsWriterPerField.sortPostings() call FreqProxTermsWriterPerField.sortPostings() call FreqProxTermsWriterPerField.sortPostings() call FreqProxTermsWriterPerField.sortPostings() call FreqProxTermsWriterPerField.sortPostings() assert call FreqProxTermsWriterPerField.fieldInfo() call FreqProxTermsWriterPerField.fieldInfo() call FreqProxTermsWriterPerField.fieldInfo() call FreqProxTermsWriterPerField.fieldInfo() call FreqProxTermsWriterPerField.fieldInfo() call FreqProxTermsWriterPerField.fieldInfo() call FreqProxTermsWriterPerField.fieldInfo() call FreqProxTermsWriterPerField.fieldInfo() call FreqProxTermsWriterPerField.fieldInfo() != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt Fields = new decl_stmt org.apache.lucene.codecs.FieldsConsumer = decl_stmt boolean = try call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() call FieldsConsumer.write() = finally if else public public return new