org.apache.lucene.index java.io.IOException import java.util.Arrays import java.util.HashMap import java.util.Map import org.apache.lucene.analysis.TokenStream import org.apache.lucene.codecs.DocValuesConsumer import org.apache.lucene.codecs.DocValuesFormat import org.apache.lucene.codecs.NormsConsumer import org.apache.lucene.codecs.NormsFormat import org.apache.lucene.codecs.PointsFormat import org.apache.lucene.codecs.PointsWriter import org.apache.lucene.codecs.StoredFieldsWriter import org.apache.lucene.document.FieldType import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.store.IOContext import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefHash.MaxBytesLengthExceededException import org.apache.lucene.util.Counter import org.apache.lucene.util.IOUtils import org.apache.lucene.util.RamUsageEstimator import class org.apache.lucene.index.DefaultIndexingChain super super extends int decl Builder Counter DocumentsWriterPerThread TermsHash StoredFieldsWriter decl PerField decl DocState int decl FieldInfos decl DocumentsWriterPerThread int private private throws if == = call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.getSegmentInfo() call decl DocState.getSegmentInfo() call decl DocState.getSegmentInfo() call decl DocState.getSegmentInfo() call decl DocState.getSegmentInfo() PerField decl Map long int public public throws decl_stmt int = decl_stmt long = if call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() - / + = if call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() - / + = if call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() - / + = call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() if call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() - / + = decl_stmt java.util.Map < = new <> for = < ++ decl_stmt PerField = while != if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = call decl FieldInfos.flush() call decl FieldInfos.flush() call decl FieldInfos.flush() call decl FieldInfos.flush() call decl FieldInfos.flush() if call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() - / + = call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() call decl DocState.codec() if call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() - / + PointsFormat PerField PointsWriter boolean private private throws decl_stmt org.apache.lucene.codecs.PointsWriter = decl_stmt boolean = try for = < ++ decl_stmt PerField = while != if != if call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() == throw new + + + + if == decl_stmt org.apache.lucene.codecs.PointsFormat = if == throw new + + = call org.apache.lucene.codecs.PointsFormat.fieldsWriter(SegmentWriteState) call org.apache.lucene.codecs.PointsFormat.fieldsWriter(SegmentWriteState) call org.apache.lucene.codecs.PointsFormat.fieldsWriter(SegmentWriteState) call org.apache.lucene.codecs.PointsFormat.fieldsWriter(SegmentWriteState) call org.apache.lucene.codecs.PointsFormat.fieldsWriter(SegmentWriteState) call PerField.pointValuesWriter() call PerField.pointValuesWriter() call PerField.pointValuesWriter() call PerField.pointValuesWriter() call PerField.pointValuesWriter() call PerField.pointValuesWriter() call PerField.pointValuesWriter() call PerField.pointValuesWriter() call PerField.pointValuesWriter() = else if call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() != throw new + + + + = if != call PointsWriter.finish() call PointsWriter.finish() call PointsWriter.finish() call PointsWriter.finish() call PointsWriter.finish() = finally if else DocValuesConsumer DocValuesFormat PerField boolean int private private throws decl_stmt int = decl_stmt org.apache.lucene.codecs.DocValuesConsumer = decl_stmt boolean = try for = < ++ decl_stmt PerField = while != if != if call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() == throw new + + + + if == decl_stmt org.apache.lucene.codecs.DocValuesFormat = = call DocValuesFormat.fieldsConsumer() call DocValuesFormat.fieldsConsumer() call DocValuesFormat.fieldsConsumer() call DocValuesFormat.fieldsConsumer() call DocValuesFormat.fieldsConsumer() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() call PerField.docValuesWriter() = else if call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() != throw new + + + + = = finally if else if == if != throw new + + else if == throw new + + private private throws while < NormsConsumer PerField NormsFormat boolean private private throws decl_stmt boolean = decl_stmt org.apache.lucene.codecs.NormsConsumer = try if decl_stmt NormsFormat = assert != = call NormsFormat.normsConsumer() call NormsFormat.normsConsumer() call NormsFormat.normsConsumer() call NormsFormat.normsConsumer() call NormsFormat.normsConsumer() for : decl_stmt PerField = assert != if == && != assert != : + call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() call PerField.norms() = finally if else public public try call decl FieldInfos.abort() call decl FieldInfos.abort() call decl FieldInfos.abort() call decl FieldInfos.abort() call decl FieldInfos.abort() catch int PerField int int PerField PerField private private decl_stmt int = * assert > decl_stmt PerField = new decl_stmt int = - for = < ++ decl_stmt PerField = while != decl_stmt int final final = call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() & decl_stmt PerField = = = = = = private private throws try call decl Builder.startDocument() call decl Builder.startDocument() call decl Builder.startDocument() call decl Builder.startDocument() call decl Builder.startDocument() catch throw ++ private private throws try call decl Builder.finishDocument() call decl Builder.finishDocument() call decl Builder.finishDocument() call decl Builder.finishDocument() call decl Builder.finishDocument() catch throw long int boolean public public throws decl_stmt int = decl_stmt long = ++ call decl FieldInfos.startDocument() call decl FieldInfos.startDocument() call decl FieldInfos.startDocument() call decl FieldInfos.startDocument() call decl FieldInfos.startDocument() decl_stmt boolean = try for : = catch = throw finally if == for = < ++ try call decl FieldInfos.finishDocument() call decl FieldInfos.finishDocument() call decl FieldInfos.finishDocument() call decl FieldInfos.finishDocument() call decl FieldInfos.finishDocument() catch throw PerField DocValuesType String IndexableFieldType boolean private private throws decl_stmt java.lang.String = decl_stmt org.apache.lucene.index.IndexableFieldType = decl_stmt PerField = if call IndexableFieldType.indexOptions() call IndexableFieldType.indexOptions() call IndexableFieldType.indexOptions() call IndexableFieldType.indexOptions() call IndexableFieldType.indexOptions() == throw new + + if call IndexableFieldType.indexOptions() call IndexableFieldType.indexOptions() call IndexableFieldType.indexOptions() call IndexableFieldType.indexOptions() call IndexableFieldType.indexOptions() != if call org.apache.lucene.index.IndexableFieldType.omitNorms() call org.apache.lucene.index.IndexableFieldType.omitNorms() call org.apache.lucene.index.IndexableFieldType.omitNorms() call org.apache.lucene.index.IndexableFieldType.omitNorms() call org.apache.lucene.index.IndexableFieldType.omitNorms() && != throw new + + = decl_stmt boolean = != call PerField.invert() call PerField.invert() call PerField.invert() call PerField.invert() call PerField.invert() if ++ = = else if call org.apache.lucene.index.IndexableFieldType.stored() call org.apache.lucene.index.IndexableFieldType.stored() call org.apache.lucene.index.IndexableFieldType.stored() call org.apache.lucene.index.IndexableFieldType.stored() call org.apache.lucene.index.IndexableFieldType.stored() if == = if call org.apache.lucene.index.IndexableFieldType.stored() call org.apache.lucene.index.IndexableFieldType.stored() call org.apache.lucene.index.IndexableFieldType.stored() call org.apache.lucene.index.IndexableFieldType.stored() call org.apache.lucene.index.IndexableFieldType.stored() try call decl Builder.writeField() call decl Builder.writeField() call decl Builder.writeField() call decl Builder.writeField() call decl Builder.writeField() catch throw decl_stmt DocValuesType = call org.apache.lucene.index.IndexableFieldType.docValuesType() call org.apache.lucene.index.IndexableFieldType.docValuesType() call org.apache.lucene.index.IndexableFieldType.docValuesType() call org.apache.lucene.index.IndexableFieldType.docValuesType() call org.apache.lucene.index.IndexableFieldType.docValuesType() if == throw new + + if != if == = if call org.apache.lucene.index.IndexableFieldType.pointDimensionCount() call org.apache.lucene.index.IndexableFieldType.pointDimensionCount() call org.apache.lucene.index.IndexableFieldType.pointDimensionCount() call org.apache.lucene.index.IndexableFieldType.pointDimensionCount() call org.apache.lucene.index.IndexableFieldType.pointDimensionCount() != if == = return private static private static if throw new + + + if throw new + + + if throw new + + + if throw new + + + int int private private throws decl_stmt int = decl_stmt int = if == call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() if == = new int private private throws if == call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() call DocumentsWriterPerThread.globalFieldNumbers() decl_stmt int = switch case if == = new break case if == = new break case if == = new break case if == = new break case if == = new break default: throw new + PerField int private private decl_stmt int final final = & decl_stmt PerField = while != && ! call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() = return PerField int decl PerField FieldInfo private private decl_stmt int final final = & decl_stmt PerField = while != && ! call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() = if == decl_stmt org.apache.lucene.index.FieldInfo = call DocumentsWriterPerThread.getOrAdd() call DocumentsWriterPerThread.getOrAdd() call DocumentsWriterPerThread.getOrAdd() call DocumentsWriterPerThread.getOrAdd() call DocumentsWriterPerThread.getOrAdd() call org.apache.lucene.index.FieldInfo.setIndexOptions(IndexOptions) call org.apache.lucene.index.FieldInfo.setIndexOptions(IndexOptions) call org.apache.lucene.index.FieldInfo.setIndexOptions(IndexOptions) call org.apache.lucene.index.FieldInfo.setIndexOptions(IndexOptions) call org.apache.lucene.index.FieldInfo.setIndexOptions(IndexOptions) = new = = ++ if >= / if > decl_stmt PerField = new = else if && == call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.fieldInfo() call PerField.setInvertState() call PerField.setInvertState() call PerField.setInvertState() call PerField.setInvertState() call PerField.setInvertState() return = new = call decl FieldInfos.addField() call decl FieldInfos.addField() call decl FieldInfos.addField() call decl FieldInfos.addField() call decl FieldInfos.addField() if == assert == = new public public return public public throws if == && != BytesRef int String decl byte boolean IndexableFieldType int int boolean IndexOptions boolean public public throws if decl_stmt org.apache.lucene.index.IndexableFieldType = decl_stmt IndexOptions = call IndexableFieldType.indexOptions() call IndexableFieldType.indexOptions() call IndexableFieldType.indexOptions() call IndexableFieldType.indexOptions() call IndexableFieldType.indexOptions() if call org.apache.lucene.index.IndexableFieldType.omitNorms() call org.apache.lucene.index.IndexableFieldType.omitNorms() call org.apache.lucene.index.IndexableFieldType.omitNorms() call org.apache.lucene.index.IndexableFieldType.omitNorms() call org.apache.lucene.index.IndexableFieldType.omitNorms() decl_stmt boolean final final = call org.apache.lucene.index.IndexableFieldType.tokenized() call org.apache.lucene.index.IndexableFieldType.tokenized() call org.apache.lucene.index.IndexableFieldType.tokenized() call org.apache.lucene.index.IndexableFieldType.tokenized() call org.apache.lucene.index.IndexableFieldType.tokenized() && != decl_stmt boolean final final = == decl_stmt boolean = try = = while decl_stmt int = += if < if == throw new + + else throw new + + + + else if > throw new + + + + + = if == ++ if decl_stmt int = + decl_stmt int = + if < || < throw new + + + + + + + + + = ++ if < throw new + + try catch decl_stmt byte = new decl_stmt org.apache.lucene.util.BytesRef = decl_stmt java.lang.String = + + + + + + + if call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() + throw new catch throw += += = finally if ! && call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() call decl DocumentsWriterPerThread.infoStream() + if += call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() += call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() call decl DocumentsWriterPerThread.analyzer() *=