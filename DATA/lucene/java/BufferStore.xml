org.apache.solr.store.blockcache java.util.concurrent.ArrayBlockingQueue import java.util.concurrent.BlockingQueue import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.ConcurrentMap import java.util.concurrent.atomic.AtomicLong import class org.apache.solr.store.blockcache.BufferStore super super implements decl ConcurrentMap AtomicLong Store int decl BlockingQueue AtomicLong public public return new public public public synchronized static public synchronized static long BufferStore BufferStore AtomicLong AtomicLong public synchronized static public synchronized static if == return decl_stmt org.apache.solr.store.blockcache.BufferStore = call decl ConcurrentMap.get() call decl ConcurrentMap.get() call decl ConcurrentMap.get() call decl ConcurrentMap.get() call decl ConcurrentMap.get() if == decl_stmt long = / if > = decl_stmt java.util.concurrent.atomic.AtomicLong = new decl_stmt java.util.concurrent.atomic.AtomicLong = new if != = = decl_stmt org.apache.solr.store.blockcache.BufferStore = new int call decl ConcurrentMap.put() call decl ConcurrentMap.put() call decl ConcurrentMap.put() call decl ConcurrentMap.put() call decl ConcurrentMap.put() decl BlockingQueue private static < private static < decl_stmt java.util.concurrent.BlockingQueue < = new <> for = < ++ call decl BlockingQueue.add() call decl BlockingQueue.add() call decl BlockingQueue.add() call decl BlockingQueue.add() call decl BlockingQueue.add() new return BufferStore public static public static decl_stmt org.apache.solr.store.blockcache.BufferStore = call decl ConcurrentMap.get() call decl ConcurrentMap.get() call decl ConcurrentMap.get() call decl ConcurrentMap.get() call decl ConcurrentMap.get() if == return return public public if != throw new + + + + return call decl BlockingQueue.poll() call decl BlockingQueue.poll() call decl BlockingQueue.poll() call decl BlockingQueue.poll() call decl BlockingQueue.poll() public public if == return if != throw new + + + + call decl BlockingQueue.offer() call decl BlockingQueue.offer() call decl BlockingQueue.offer() call decl BlockingQueue.offer() call decl BlockingQueue.offer() private private if ! call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() private private if != return call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() return new