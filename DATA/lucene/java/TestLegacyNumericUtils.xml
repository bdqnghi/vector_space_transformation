org.apache.lucene.util java.util.Arrays import java.util.Collections import java.util.Iterator import java.util.Random import class org.apache.lucene.util.TestLegacyNumericUtils super super extends decl float decl double BytesRefBuilder BytesRefBuilder public public throws decl_stmt org.apache.lucene.util.BytesRefBuilder = new decl_stmt org.apache.lucene.util.BytesRefBuilder = new for = - < ++ if != call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() < call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() < call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) BytesRefBuilder BytesRefBuilder public public throws decl_stmt org.apache.lucene.util.BytesRefBuilder = new decl_stmt org.apache.lucene.util.BytesRefBuilder = new for = - < ++ if != call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() < call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() < call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.copyBytes(BytesRef) call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() int decl BytesRefBuilder long long decl long BytesRefBuilder public public throws decl_stmt long = new + + - - - - - - - - decl_stmt org.apache.lucene.util.BytesRefBuilder = new for = < ++ = new decl_stmt int final final = for = < ++ - < decl_stmt org.apache.lucene.util.BytesRefBuilder final final = new for = < ++ for = < ++ decl_stmt long = call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() decl_stmt long = << - + + + & - int decl BytesRefBuilder int int decl int BytesRefBuilder public public throws decl_stmt int = new + + - - - - - - - - decl_stmt org.apache.lucene.util.BytesRefBuilder = new for = < ++ = new decl_stmt int final final = for = < ++ - < decl_stmt org.apache.lucene.util.BytesRefBuilder final final = new for = < ++ for = < ++ decl_stmt int = call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() call org.apache.lucene.util.BytesRefBuilder.get() decl_stmt int = << - + + + & - decl double decl long public public throws decl_stmt double = new - - - - - - - - + - - decl_stmt long = new for = < ++ = == for = < ++ - < long long public public decl_stmt long final final = for : decl_stmt long final final = + + + + + > decl float decl int public public throws decl_stmt float = new - - - - - - - - + - - decl_stmt int = new for = < ++ = == for = < ++ - < int int public public decl_stmt int final final = for : decl_stmt int final final = + + + + + > decl Iterator decl Iterator LongBitSet private private final final final final final final final final final < final final final < decl_stmt org.apache.lucene.util.LongBitSet final final = new - + : decl_stmt java.util.Iterator final final final < = == : decl_stmt java.util.Iterator final final final < = == : new public public >= && <= && >= && <= if for = <= ++ call org.apache.lucene.util.LongBitSet.getAndSet(long) call org.apache.lucene.util.LongBitSet.getAndSet(long) call org.apache.lucene.util.LongBitSet.getAndSet(long) call org.apache.lucene.util.LongBitSet.getAndSet(long) call org.apache.lucene.util.LongBitSet.getAndSet(long) - if == break if == || == return ^= ^= call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() >>> call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() >>> if call org.apache.lucene.util.LongBitSet.flip(long,long) call org.apache.lucene.util.LongBitSet.flip(long,long) call org.apache.lucene.util.LongBitSet.flip(long,long) call org.apache.lucene.util.LongBitSet.flip(long,long) call org.apache.lucene.util.LongBitSet.flip(long,long) - + call LongBitSet.cardinality() call LongBitSet.cardinality() call LongBitSet.cardinality() call LongBitSet.cardinality() call LongBitSet.cardinality() public public >= && <= && >= && <= if for = <= ++ - if == break if == || == return ^= ^= >>> >>> public public throws - - + + long public public throws decl_stmt long = long for = < ++ long long private private final final throws decl_stmt long = decl_stmt long = * while + < >>= + + long private private final final decl_stmt long switch case = << break case = - << break default: = += - if if += - if = ~ if = << if = >>> return public public throws - - + - > > decl Iterator decl Iterator FixedBitSet private private final final final final final final final final final < final final final < decl_stmt org.apache.lucene.util.FixedBitSet final final = new - + : decl_stmt java.util.Iterator final final final < = == : decl_stmt java.util.Iterator final final final < = == : new public public >= && <= && >= && <= if for = <= ++ call org.apache.lucene.util.FixedBitSet.getAndSet(int) call org.apache.lucene.util.FixedBitSet.getAndSet(int) call org.apache.lucene.util.FixedBitSet.getAndSet(int) call org.apache.lucene.util.FixedBitSet.getAndSet(int) call org.apache.lucene.util.FixedBitSet.getAndSet(int) - if == break if == return ^= ^= call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() >>> call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() >>> if call org.apache.lucene.util.FixedBitSet.flip(int,int) call org.apache.lucene.util.FixedBitSet.flip(int,int) call org.apache.lucene.util.FixedBitSet.flip(int,int) call org.apache.lucene.util.FixedBitSet.flip(int,int) call org.apache.lucene.util.FixedBitSet.flip(int,int) - + call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() call org.apache.lucene.util.FixedBitSet.cardinality() public public >= && <= && >= && <= if for = <= ++ - if == break if == return ^= ^= >>> >>> public public throws - - + - > >