org.apache.lucene.util.fst java.io.IOException import java.util.ArrayList import java.util.Arrays import java.util.HashSet import java.util.List import java.util.Random import java.util.Set import org.apache.lucene.store.MockDirectoryWrapper import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IntsRef import org.apache.lucene.util.IntsRefBuilder import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import org.apache.lucene.util.TestUtil import org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.TwoLongs import static static org.apache.lucene.util.fst.FSTTester.getRandomString import static static org.apache.lucene.util.fst.FSTTester.toIntsRef import class org.apache.lucene.util.fst.TestFSTsMisc super super extends MockDirectoryWrapper public public throws = call org.apache.lucene.store.MockDirectoryWrapper.setPreventDoubleWrite(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setPreventDoubleWrite(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setPreventDoubleWrite(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setPreventDoubleWrite(boolean) call org.apache.lucene.store.MockDirectoryWrapper.setPreventDoubleWrite(boolean) public public throws if != call org.apache.lucene.store.MockDirectoryWrapper.close() call org.apache.lucene.store.MockDirectoryWrapper.close() call org.apache.lucene.store.MockDirectoryWrapper.close() call org.apache.lucene.store.MockDirectoryWrapper.close() call org.apache.lucene.store.MockDirectoryWrapper.close() public public throws decl Set decl IntsRef String Random int private private throws decl_stmt java.util.Random = new for = < ++ if + for = < ++ decl_stmt int final final = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + decl_stmt java.util.Set < = new <> decl_stmt org.apache.lucene.util.IntsRef = new while call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() < decl_stmt java.lang.String final final = call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() new call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() decl List PositiveIntOutputs decl ListOfOutputs long int decl List long Object TwoLongs TwoLongs long private private throws if decl_stmt org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs final final = decl_stmt java.util.List final final final < < = new <> decl_stmt long = for = < ++ decl_stmt long = + - while < = + - decl_stmt java.lang.Object final final if == decl_stmt long = + - while < = + - decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = else = call decl ListOfOutputs.get() call decl ListOfOutputs.get() call decl ListOfOutputs.get() call decl ListOfOutputs.get() call decl ListOfOutputs.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new <> new < protected protected if instanceof && instanceof decl_stmt TwoLongs = return new else if instanceof && instanceof decl_stmt TwoLongs = return new return if decl_stmt org.apache.lucene.util.fst.PositiveIntOutputs final final = decl_stmt org.apache.lucene.util.fst.ListOfOutputs final final final < = new <> decl_stmt java.util.List final final final < < = new <> decl_stmt long = for = < ++ decl_stmt int = decl_stmt java.util.List < = new <> for = < ++ decl_stmt long = + - while < = + - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = decl_stmt java.lang.Object final final if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new <> new <> TwoLongs TwoLongs protected protected if instanceof && instanceof decl_stmt TwoLongs = return new else if instanceof && instanceof decl_stmt TwoLongs = return new return PositiveIntOutputs decl ListOfOutputs decl Builder decl List decl FST IntsRefBuilder Object public public throws decl_stmt org.apache.lucene.util.fst.PositiveIntOutputs = decl_stmt org.apache.lucene.util.fst.ListOfOutputs < = new <> decl_stmt org.apache.lucene.util.fst.Builder final final final < = new <> decl_stmt org.apache.lucene.util.IntsRefBuilder final final = new call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() new call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() new call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() new call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() new decl_stmt org.apache.lucene.util.fst.FST final final final < = call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() decl_stmt java.lang.Object = new decl_stmt java.util.List < = call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = new = call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() PositiveIntOutputs decl ListOfOutputs decl Builder decl List decl FST IntsRefBuilder Object public public throws decl_stmt org.apache.lucene.util.fst.PositiveIntOutputs = decl_stmt org.apache.lucene.util.fst.ListOfOutputs < = new <> decl_stmt org.apache.lucene.util.fst.Builder final final final < = new <> decl_stmt org.apache.lucene.util.IntsRefBuilder final final = new call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call org.apache.lucene.util.IntsRefBuilder.get() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() new call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() new call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() new call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() new decl_stmt org.apache.lucene.util.fst.FST final final final < = call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() call decl Builder.finish() decl_stmt java.lang.Object = new decl_stmt java.util.List < = call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = new = call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = new = call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl ListOfOutputs.asList() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get()