org.apache.solr.core javax.xml.parsers.ParserConfigurationException import javax.xml.xpath.XPathConstants import java.io.IOException import java.io.InputStream import java.io.InputStreamReader import java.lang.invoke.MethodHandles import java.net.MalformedURLException import java.net.URL import java.nio.charset.StandardCharsets import java.nio.file.Path import java.nio.file.Paths import java.util.* import java.util.regex.Matcher import java.util.regex.Pattern import com.google.common.collect.ImmutableList import org.apache.lucene.index.IndexDeletionPolicy import org.apache.lucene.search.BooleanQuery import org.apache.lucene.util.Version import org.apache.solr.cloud.ZkSolrResourceLoader import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.util.IOUtils import org.apache.solr.handler.component.SearchComponent import org.apache.solr.request.SolrRequestHandler import org.apache.solr.response.QueryResponseWriter import org.apache.solr.response.transform.TransformerFactory import org.apache.solr.rest.RestManager import org.apache.solr.schema.IndexSchemaFactory import org.apache.solr.search.CacheConfig import org.apache.solr.search.FastLRUCache import org.apache.solr.search.QParserPlugin import org.apache.solr.search.ValueSourceParser import org.apache.solr.search.stats.StatsCache import org.apache.solr.servlet.SolrRequestParsers import org.apache.solr.spelling.QueryConverter import org.apache.solr.update.SolrIndexConfig import org.apache.solr.update.UpdateLog import org.apache.solr.update.processor.UpdateRequestProcessorChain import org.apache.solr.update.processor.UpdateRequestProcessorFactory import org.apache.solr.util.DOMUtil import org.noggit.JSONParser import org.noggit.ObjectBuilder import org.slf4j.Logger import org.slf4j.LoggerFactory import org.w3c.dom.Node import org.w3c.dom.NodeList import org.xml.sax.InputSource import org.xml.sax.SAXException import static static org.apache.solr.common.params.CommonParams.NAME import static static org.apache.solr.common.params.CommonParams.PATH import static static org.apache.solr.common.util.Utils.makeMap import static static org.apache.solr.core.ConfigOverlay.ZNODEVER import static static org.apache.solr.core.SolrConfig.PluginOpts.LAZY import static static org.apache.solr.core.SolrConfig.PluginOpts.MULTI_OK import static static org.apache.solr.core.SolrConfig.PluginOpts.NOOP import static static org.apache.solr.core.SolrConfig.PluginOpts.REQUIRE_CLASS import static static org.apache.solr.core.SolrConfig.PluginOpts.REQUIRE_NAME import static static org.apache.solr.core.SolrConfig.PluginOpts.REQUIRE_NAME_IN_OVERLAY import class org.apache.solr.core.SolrConfig super super extends super implements boolean boolean int int String CacheConfig HttpCachingConfig SolrIndexConfig decl List int JmxConfiguration Logger SolrRequestParsers boolean int int float boolean CacheConfig RequestParams int int CacheConfig boolean decl Map int decl CacheConfig ConfigOverlay UpdateHandlerInfo decl Map boolean CacheConfig decl Map String Version String public static public static try return new catch decl_stmt java.lang.String if instanceof = else = throw new + public public return public public return InputStreamReader int Map InputStream public static public static decl_stmt java.io.InputStream = decl_stmt InputStreamReader = try try = catch return new - decl_stmt int = if instanceof = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = new decl_stmt java.util.Map = new return new catch throw new finally public < public < return protected protected return new - - - - boolean decl List boolean private private decl_stmt boolean = decl_stmt boolean = decl_stmt java.util.List < = if < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() && ! throw new + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() + + + if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() NodeList decl ArrayList PluginInfo public < public < decl_stmt java.util.ArrayList < = new <> decl_stmt NodeList = for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt org.apache.solr.core.PluginInfo = new call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() + if call org.apache.solr.core.PluginInfo.isEnabled() call org.apache.solr.core.PluginInfo.isEnabled() call org.apache.solr.core.PluginInfo.isEnabled() call org.apache.solr.core.PluginInfo.isEnabled() call org.apache.solr.core.PluginInfo.isEnabled() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return public public return public public return LinkedHashMap public < public < decl_stmt java.util.LinkedHashMap = new call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() return public < public < return public static public static final final try return catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + return public public return public public return public public return public public return public public return LinkedHashMap public < public < decl_stmt java.util.LinkedHashMap = new call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() return public public return public public return SolrPluginInfo decl LinkedHashMap decl Map decl List String public < public < decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt SolrPluginInfo = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != && call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() || call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() call SolrPluginInfo.options() decl_stmt java.util.Map < = call org.apache.solr.core.ConfigOverlay.getNamedPlugins(String) call org.apache.solr.core.ConfigOverlay.getNamedPlugins(String) call org.apache.solr.core.ConfigOverlay.getNamedPlugins(String) call org.apache.solr.core.ConfigOverlay.getNamedPlugins(String) call org.apache.solr.core.ConfigOverlay.getNamedPlugins(String) call SolrPluginInfo.getCleanTag() call SolrPluginInfo.getCleanTag() call SolrPluginInfo.getCleanTag() call SolrPluginInfo.getCleanTag() call SolrPluginInfo.getCleanTag() if ! call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() decl_stmt java.util.LinkedHashMap < = new <> if != for : decl_stmt java.lang.String = == : call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() new call SolrPluginInfo.getCleanTag() call SolrPluginInfo.getCleanTag() call SolrPluginInfo.getCleanTag() call SolrPluginInfo.getCleanTag() call SolrPluginInfo.getCleanTag() = new <> call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() return == > : decl List public public decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == || call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return if == call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() throw new + Node String String SolrResourceLoader decl List String NodeList Path private private decl_stmt NodeList = if == || call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() == return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.core.SolrResourceLoader = decl_stmt java.util.List < = new <> for = < call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() call NodeList.getLength() ++ decl_stmt org.apache.lucene.replicator.nrt.Node = call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() call NodeList.item() decl_stmt java.lang.String = decl_stmt java.lang.String = if != decl_stmt java.nio.file.Path = call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() decl_stmt java.lang.String = try if == call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() else call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() else if != decl_stmt java.nio.file.Path final final = call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() call SolrResourceLoader.getInstancePath() try call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() call java.nio.file.Path.toUri() catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() else throw new if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > call org.apache.solr.core.SolrResourceLoader.addToClassLoader(URL) call org.apache.solr.core.SolrResourceLoader.addToClassLoader(URL) call org.apache.solr.core.SolrResourceLoader.addToClassLoader(URL) call org.apache.solr.core.SolrResourceLoader.addToClassLoader(URL) call org.apache.solr.core.SolrResourceLoader.addToClassLoader(URL) call org.apache.solr.core.SolrResourceLoader.reloadLuceneSPI() call org.apache.solr.core.SolrResourceLoader.reloadLuceneSPI() call org.apache.solr.core.SolrResourceLoader.reloadLuceneSPI() call org.apache.solr.core.SolrResourceLoader.reloadLuceneSPI() call org.apache.solr.core.SolrResourceLoader.reloadLuceneSPI() public public return public public return public public return public public return public public return public public return Object public public decl_stmt java.lang.Object = call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) if != return call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() return Object public public decl_stmt java.lang.Object = call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) if != return call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() return Object public public decl_stmt java.lang.Object = call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) return != call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() : Object public public decl_stmt java.lang.Object = call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) call org.apache.solr.core.ConfigOverlay.getXPathProperty(String) return != call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() : LinkedHashMap Map decl ArrayList String LinkedHashMap decl List public < public < decl_stmt java.util.LinkedHashMap = new if > - call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() decl_stmt java.util.Map = new call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) if != call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call JmxConfiguration.toMap() call JmxConfiguration.toMap() call JmxConfiguration.toMap() call JmxConfiguration.toMap() call JmxConfiguration.toMap() for : decl_stmt java.util.List < = if == || call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() continue decl_stmt java.lang.String = = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) if decl_stmt java.util.LinkedHashMap = new for : call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() for : call org.apache.solr.core.ConfigOverlay.getNamedPlugins(String) call org.apache.solr.core.ConfigOverlay.getNamedPlugins(String) call org.apache.solr.core.ConfigOverlay.getNamedPlugins(String) call org.apache.solr.core.ConfigOverlay.getNamedPlugins(String) call org.apache.solr.core.ConfigOverlay.getNamedPlugins(String) call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() else if decl_stmt java.util.ArrayList < = new <> for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() else call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if != call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call JmxConfiguration.toMap() call JmxConfiguration.toMap() call JmxConfiguration.toMap() call JmxConfiguration.toMap() call JmxConfiguration.toMap() = new call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) if != call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call HttpCachingConfig.toMap() call HttpCachingConfig.toMap() call HttpCachingConfig.toMap() call HttpCachingConfig.toMap() call HttpCachingConfig.toMap() call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) call java.util.Map.put(K,V) if != call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call LinkedHashMap.put() call org.apache.solr.update.SolrIndexConfig.toMap() call org.apache.solr.update.SolrIndexConfig.toMap() call org.apache.solr.update.SolrIndexConfig.toMap() call org.apache.solr.update.SolrIndexConfig.toMap() call org.apache.solr.update.SolrIndexConfig.toMap() return private private if == return for : if != decl Map Properties protected protected decl_stmt java.util.Map < = if == || call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() return decl_stmt java.util.Properties = new call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() call Properties.putAll() return public public if == = return public public if == return return public public = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.core.RequestParams.getZnodeVersion() call org.apache.solr.core.RequestParams.getZnodeVersion() call org.apache.solr.core.RequestParams.getZnodeVersion() call org.apache.solr.core.RequestParams.getZnodeVersion() call org.apache.solr.core.RequestParams.getZnodeVersion() return