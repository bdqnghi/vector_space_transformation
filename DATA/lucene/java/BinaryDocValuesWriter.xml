org.apache.lucene.index java.io.IOException import java.util.Iterator import java.util.NoSuchElementException import org.apache.lucene.codecs.DocValuesConsumer import org.apache.lucene.store.DataInput import org.apache.lucene.store.DataOutput import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.Counter import org.apache.lucene.util.FixedBitSet import org.apache.lucene.util.PagedBytes import org.apache.lucene.util.RamUsageEstimator import org.apache.lucene.util.packed.PackedInts import org.apache.lucene.util.packed.PackedLongValues import class org.apache.lucene.index.BinaryDocValuesWriter super super extends Counter decl Builder DataOutput decl PackedLongValues int int PagedBytes int FieldInfo FixedBitSet public public if < throw new + + if == throw new + + if > throw new + + + while < ++ call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() ++ call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() call decl PackedLongValues.add() try call org.apache.lucene.store.DataOutput.writeBytes(byte,int) call org.apache.lucene.store.DataOutput.writeBytes(byte,int) call org.apache.lucene.store.DataOutput.writeBytes(byte,int) call org.apache.lucene.store.DataOutput.writeBytes(byte,int) call org.apache.lucene.store.DataOutput.writeBytes(byte,int) catch throw new = call decl Builder.set() call decl Builder.set() call decl Builder.set() call decl Builder.set() call decl Builder.set() private private return call decl Builder.getBits() call decl Builder.getBits() call decl Builder.getBits() call decl Builder.getBits() call decl Builder.getBits() + long private private decl_stmt long final final = call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() call decl PackedLongValues.ramBytesUsed() + call org.apache.lucene.util.PagedBytes.ramBytesUsed() call org.apache.lucene.util.PagedBytes.ramBytesUsed() call org.apache.lucene.util.PagedBytes.ramBytesUsed() call org.apache.lucene.util.PagedBytes.ramBytesUsed() call org.apache.lucene.util.PagedBytes.ramBytesUsed() + call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) call org.apache.lucene.util.Counter.addAndGet(long) - = public public PackedLongValues int public public throws decl_stmt int final final = call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) call org.apache.lucene.util.PagedBytes.freeze(boolean) decl_stmt org.apache.lucene.util.packed.PackedLongValues final final = new < public < public < return new public < public < return new public public return < int BytesRef public public if ! throw new decl_stmt org.apache.lucene.util.BytesRef final final if < decl_stmt int = int try catch throw new if call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() call decl Builder.get() = else = else = ++ return public public throw new