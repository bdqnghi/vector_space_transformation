org.apache.lucene.util java.io.PrintStream import java.util.Arrays import java.util.HashSet import java.util.Locale import java.util.Random import java.util.TimeZone import org.apache.lucene.codecs.Codec import org.apache.lucene.codecs.DocValuesFormat import org.apache.lucene.codecs.PostingsFormat import org.apache.lucene.codecs.asserting.AssertingCodec import org.apache.lucene.codecs.asserting.AssertingDocValuesFormat import org.apache.lucene.codecs.asserting.AssertingPostingsFormat import org.apache.lucene.codecs.cheapbastard.CheapBastardCodec import org.apache.lucene.codecs.compressing.CompressingCodec import org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat import org.apache.lucene.codecs.lucene60.Lucene60Codec import org.apache.lucene.codecs.mockrandom.MockRandomPostingsFormat import org.apache.lucene.codecs.simpletext.SimpleTextCodec import org.apache.lucene.index.RandomCodec import org.apache.lucene.search.similarities.ClassicSimilarity import org.apache.lucene.search.similarities.RandomSimilarity import org.apache.lucene.search.similarities.Similarity import org.apache.lucene.util.LuceneTestCase.SuppressCodecs import org.junit.internal.AssumptionViolatedException import com.carrotsearch.randomizedtesting.RandomizedContext import com.carrotsearch.randomizedtesting.generators.RandomPicks import static static org.apache.lucene.util.LuceneTestCase.INFOSTREAM import static static org.apache.lucene.util.LuceneTestCase.LiveIWCFlushMode import static static org.apache.lucene.util.LuceneTestCase.TEST_CODEC import static static org.apache.lucene.util.LuceneTestCase.TEST_DOCVALUESFORMAT import static static org.apache.lucene.util.LuceneTestCase.TEST_POSTINGSFORMAT import static static org.apache.lucene.util.LuceneTestCase.VERBOSE import static static org.apache.lucene.util.LuceneTestCase.assumeFalse import static static org.apache.lucene.util.LuceneTestCase.localeForLanguageTag import static static org.apache.lucene.util.LuceneTestCase.random import static static org.apache.lucene.util.LuceneTestCase.randomLocale import static static org.apache.lucene.util.LuceneTestCase.randomTimeZone import class org.apache.lucene.util.TestRuleSetupAndRestoreClassEnv super super extends Similarity Locale Codec Locale decl HashSet TimeZone TimeZone InfoStream Codec String public public if return decl_stmt java.lang.String final final if = else = + + + + + + + + SuppressCodecs String TimeZone PostingsFormat Random String Locale DocValuesFormat int LiveIWCFlushMode boolean decl Class protected protected throws if == if + + = decl_stmt java.util.Random final final = decl_stmt boolean final final = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if new else if new decl_stmt java.lang.Class < = = new <> if call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() call decl Class.isAnnotationPresent() decl_stmt SuppressCodecs = call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() call decl Class.getAnnotation() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call SuppressCodecs.value() call SuppressCodecs.value() call SuppressCodecs.value() call SuppressCodecs.value() call SuppressCodecs.value() = decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) if = else if == || == decl_stmt org.apache.lucene.codecs.PostingsFormat final final if = new else if = new new call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() call java.util.Random.nextLong() else = decl_stmt org.apache.lucene.codecs.DocValuesFormat final final if = new else = = new public public return public public return public public return + + call org.apache.lucene.codecs.PostingsFormat.toString() call org.apache.lucene.codecs.PostingsFormat.toString() call org.apache.lucene.codecs.PostingsFormat.toString() call org.apache.lucene.codecs.PostingsFormat.toString() call org.apache.lucene.codecs.PostingsFormat.toString() + + call org.apache.lucene.codecs.DocValuesFormat.toString() call org.apache.lucene.codecs.DocValuesFormat.toString() call org.apache.lucene.codecs.DocValuesFormat.toString() call org.apache.lucene.codecs.DocValuesFormat.toString() call org.apache.lucene.codecs.DocValuesFormat.toString() else if || && == && && ! = new else if || && == && ! && ! = new else if || && == && ! = new else if || && == && ! = else if || && == && ! = new else if ! = else if = new else assert decl_stmt java.lang.String = decl_stmt java.lang.String = = decl_stmt java.util.Locale = = call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) : = decl_stmt java.util.TimeZone = = call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) : = new : new try catch + + + call decl HashSet.toArray() call decl HashSet.toArray() call decl HashSet.toArray() call decl HashSet.toArray() call decl HashSet.toArray() throw decl_stmt LiveIWCFlushMode switch case = break case = break case = break default: throw new public public return public public return public public return + + + + PostingsFormat private private + call org.apache.lucene.codecs.Codec.getName() call org.apache.lucene.codecs.Codec.getName() call org.apache.lucene.codecs.Codec.getName() call org.apache.lucene.codecs.Codec.getName() call org.apache.lucene.codecs.Codec.getName() + call org.apache.lucene.codecs.Codec.getName() call org.apache.lucene.codecs.Codec.getName() call org.apache.lucene.codecs.Codec.getName() call org.apache.lucene.codecs.Codec.getName() call org.apache.lucene.codecs.Codec.getName() if instanceof && ! call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() for : + + decl_stmt org.apache.lucene.codecs.PostingsFormat = call Codec.postingsFormat() call Codec.postingsFormat() call Codec.postingsFormat() call Codec.postingsFormat() call Codec.postingsFormat() + call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() + call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() call org.apache.lucene.codecs.PostingsFormat.getName() + + protected protected throws if != if != private private return ! call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() && call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains()