org.apache.solr.store.blockcache java.util.Collections import java.util.HashSet import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.atomic.AtomicInteger import class org.apache.solr.store.blockcache.BlockDirectoryCache super super implements BlockCache AtomicInteger decl Set Metrics decl Map String public public return public public call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() BlockCacheKey Integer public public decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt org.apache.solr.store.blockcache.BlockCacheKey = new call org.apache.solr.store.blockcache.BlockCacheKey.setPath(String) call org.apache.solr.store.blockcache.BlockCacheKey.setPath(String) call org.apache.solr.store.blockcache.BlockCacheKey.setPath(String) call org.apache.solr.store.blockcache.BlockCacheKey.setPath(String) call org.apache.solr.store.blockcache.BlockCacheKey.setPath(String) call org.apache.solr.store.blockcache.BlockCacheKey.setBlock(long) call org.apache.solr.store.blockcache.BlockCacheKey.setBlock(long) call org.apache.solr.store.blockcache.BlockCacheKey.setBlock(long) call org.apache.solr.store.blockcache.BlockCacheKey.setBlock(long) call org.apache.solr.store.blockcache.BlockCacheKey.setBlock(long) call org.apache.solr.store.blockcache.BlockCacheKey.setFile(int) call org.apache.solr.store.blockcache.BlockCacheKey.setFile(int) call org.apache.solr.store.blockcache.BlockCacheKey.setFile(int) call org.apache.solr.store.blockcache.BlockCacheKey.setFile(int) call org.apache.solr.store.blockcache.BlockCacheKey.setFile(int) if call org.apache.solr.store.blockcache.BlockCache.store(BlockCacheKey,int,byte,int,int) call org.apache.solr.store.blockcache.BlockCache.store(BlockCacheKey,int,byte,int,int) call org.apache.solr.store.blockcache.BlockCache.store(BlockCacheKey,int,byte,int,int) call org.apache.solr.store.blockcache.BlockCache.store(BlockCacheKey,int,byte,int,int) call org.apache.solr.store.blockcache.BlockCache.store(BlockCacheKey,int,byte,int,int) && != call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() BlockCacheKey Integer boolean public public decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == return decl_stmt org.apache.solr.store.blockcache.BlockCacheKey = new call org.apache.solr.store.blockcache.BlockCacheKey.setPath(String) call org.apache.solr.store.blockcache.BlockCacheKey.setPath(String) call org.apache.solr.store.blockcache.BlockCacheKey.setPath(String) call org.apache.solr.store.blockcache.BlockCacheKey.setPath(String) call org.apache.solr.store.blockcache.BlockCacheKey.setPath(String) call org.apache.solr.store.blockcache.BlockCacheKey.setBlock(long) call org.apache.solr.store.blockcache.BlockCacheKey.setBlock(long) call org.apache.solr.store.blockcache.BlockCacheKey.setBlock(long) call org.apache.solr.store.blockcache.BlockCacheKey.setBlock(long) call org.apache.solr.store.blockcache.BlockCacheKey.setBlock(long) call org.apache.solr.store.blockcache.BlockCacheKey.setFile(int) call org.apache.solr.store.blockcache.BlockCacheKey.setFile(int) call org.apache.solr.store.blockcache.BlockCacheKey.setFile(int) call org.apache.solr.store.blockcache.BlockCacheKey.setFile(int) call org.apache.solr.store.blockcache.BlockCacheKey.setFile(int) decl_stmt boolean = call org.apache.solr.store.blockcache.BlockCache.fetch(BlockCacheKey,byte,int,int,int) call org.apache.solr.store.blockcache.BlockCache.fetch(BlockCacheKey,byte,int,int,int) call org.apache.solr.store.blockcache.BlockCache.fetch(BlockCacheKey,byte,int,int,int) call org.apache.solr.store.blockcache.BlockCache.fetch(BlockCacheKey,byte,int,int,int) call org.apache.solr.store.blockcache.BlockCache.fetch(BlockCacheKey,byte,int,int,int) if call Metrics.blockCacheHit() call Metrics.blockCacheHit() call Metrics.blockCacheHit() call Metrics.blockCacheHit() call Metrics.blockCacheHit() call Metrics.blockCacheHit() call Metrics.blockCacheHit() call Metrics.blockCacheHit() call Metrics.blockCacheHit() else call Metrics.blockCacheMiss() call Metrics.blockCacheMiss() call Metrics.blockCacheMiss() call Metrics.blockCacheMiss() call Metrics.blockCacheMiss() call Metrics.blockCacheMiss() call Metrics.blockCacheMiss() call Metrics.blockCacheMiss() call Metrics.blockCacheMiss() return public public return call org.apache.solr.store.blockcache.BlockCache.getSize() call org.apache.solr.store.blockcache.BlockCache.getSize() call org.apache.solr.store.blockcache.BlockCache.getSize() call org.apache.solr.store.blockcache.BlockCache.getSize() call org.apache.solr.store.blockcache.BlockCache.getSize() Integer public public decl_stmt java.lang.Integer = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public if != for : call org.apache.solr.store.blockcache.BlockCache.release(BlockCacheKey) call org.apache.solr.store.blockcache.BlockCache.release(BlockCacheKey) call org.apache.solr.store.blockcache.BlockCache.release(BlockCacheKey) call org.apache.solr.store.blockcache.BlockCache.release(BlockCacheKey) call org.apache.solr.store.blockcache.BlockCache.release(BlockCacheKey)