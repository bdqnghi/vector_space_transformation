org.apache.solr.cloud java.io.Closeable import java.io.IOException import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.List import java.util.concurrent.ExecutionException import java.util.concurrent.Future import org.apache.http.client.methods.HttpUriRequest import org.apache.lucene.search.MatchAllDocsQuery import org.apache.lucene.store.Directory import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.impl.HttpSolrClient.HttpUriRequestResponse import org.apache.solr.client.solrj.request.AbstractUpdateRequest import org.apache.solr.client.solrj.request.CoreAdminRequest.WaitForState import org.apache.solr.client.solrj.request.UpdateRequest import org.apache.solr.common.SolrException import org.apache.solr.common.SolrException.ErrorCode import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.ZkCoreNodeProps import org.apache.solr.common.cloud.ZkNodeProps import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.cloud.ZooKeeperException import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.params.UpdateParams import org.apache.solr.core.CoreContainer import org.apache.solr.core.CoreDescriptor import org.apache.solr.core.DirectoryFactory.DirContext import org.apache.solr.core.SolrCore import org.apache.solr.handler.ReplicationHandler import org.apache.solr.logging.MDCLoggingContext import org.apache.solr.request.LocalSolrQueryRequest import org.apache.solr.request.SolrQueryRequest import org.apache.solr.request.SolrRequestHandler import org.apache.solr.search.SolrIndexSearcher import org.apache.solr.update.CommitUpdateCommand import org.apache.solr.update.PeerSync import org.apache.solr.update.UpdateLog import org.apache.solr.update.UpdateLog.RecoveryInfo import org.apache.solr.update.processor.DistributedUpdateProcessor import org.apache.solr.util.RefCounted import org.apache.zookeeper.KeeperException import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.cloud.RecoveryStrategy super super extends super implements int Logger HttpUriRequest String CoreContainer ZkController String RecoveryListener int int String String boolean boolean ZkStateReader int public public = public public = if != call HttpUriRequest.abort() call HttpUriRequest.abort() call HttpUriRequest.abort() call HttpUriRequest.abort() call HttpUriRequest.abort() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() private private final final final final final final final final final final throws try call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) finally call org.apache.solr.cloud.RecoveryListener.failed() call org.apache.solr.cloud.RecoveryListener.failed() call org.apache.solr.cloud.RecoveryListener.failed() call org.apache.solr.cloud.RecoveryListener.failed() call org.apache.solr.cloud.RecoveryListener.failed() SolrIndexSearcher boolean ZkCoreNodeProps ModifiableSolrParams decl RefCounted SolrRequestHandler ReplicationHandler Directory String private private throws decl_stmt org.apache.solr.common.cloud.ZkCoreNodeProps = new decl_stmt java.lang.String = call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call org.apache.solr.common.cloud.ZkCoreNodeProps.getCoreUrl() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.request.SolrRequestHandler = decl_stmt org.apache.lucene.replicator.ReplicationHandler = if == throw new + + decl_stmt org.apache.solr.common.params.ModifiableSolrParams = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) if return decl_stmt boolean = call org.apache.lucene.replicator.ReplicationHandler.doFetch(SolrParams,boolean) call org.apache.lucene.replicator.ReplicationHandler.doFetch(SolrParams,boolean) call org.apache.lucene.replicator.ReplicationHandler.doFetch(SolrParams,boolean) call org.apache.lucene.replicator.ReplicationHandler.doFetch(SolrParams,boolean) call org.apache.lucene.replicator.ReplicationHandler.doFetch(SolrParams,boolean) if ! throw new if call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() try decl_stmt org.apache.solr.util.RefCounted < = decl_stmt org.apache.solr.search.SolrIndexSearcher = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() decl_stmt org.apache.lucene.store.Directory = try call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) new + + + + != : + + + + + + + + call Directory.listAll() call Directory.listAll() call Directory.listAll() call Directory.listAll() call Directory.listAll() finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() UpdateRequest private private throws try = new decl_stmt org.apache.solr.client.solrj.request.UpdateRequest = new call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() call UpdateRequest.setParams() new call UpdateRequest.getParams() call UpdateRequest.getParams() call UpdateRequest.getParams() call UpdateRequest.getParams() call UpdateRequest.getParams() call UpdateRequest.getParams() call UpdateRequest.getParams() call UpdateRequest.getParams() call UpdateRequest.getParams() call UpdateRequest.getParams() call UpdateRequest.setAction() call UpdateRequest.setAction() call UpdateRequest.setAction() call UpdateRequest.setAction() call UpdateRequest.setAction() public public try = call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) call org.apache.solr.core.CoreContainer.getCore(String) if == + return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) + try catch throw new catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() throw new finally UpdateLog boolean decl List boolean Slice double boolean PeerSync SolrQueryRequest int decl Future String ZkNodeProps long boolean decl List boolean String String CloudDescriptor String public public throws decl_stmt boolean = decl_stmt boolean = decl_stmt org.apache.solr.update.UpdateLog = if == return decl_stmt boolean = decl_stmt java.util.List < try = call org.apache.solr.update.UpdateLog.getRecentUpdates() call org.apache.solr.update.UpdateLog.getRecentUpdates() call org.apache.solr.update.UpdateLog.getRecentUpdates() call org.apache.solr.update.UpdateLog.getRecentUpdates() call org.apache.solr.update.UpdateLog.getRecentUpdates() = call org.apache.solr.update.UpdateLog.getNumRecordsToKeep() call org.apache.solr.update.UpdateLog.getNumRecordsToKeep() call org.apache.solr.update.UpdateLog.getNumRecordsToKeep() call org.apache.solr.update.UpdateLog.getNumRecordsToKeep() call org.apache.solr.update.UpdateLog.getNumRecordsToKeep() catch = new <> decl_stmt java.util.List < = call org.apache.solr.update.UpdateLog.getStartingVersions() call org.apache.solr.update.UpdateLog.getStartingVersions() call org.apache.solr.update.UpdateLog.getStartingVersions() call org.apache.solr.update.UpdateLog.getStartingVersions() call org.apache.solr.update.UpdateLog.getStartingVersions() if != && try decl_stmt int = decl_stmt long = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() : for < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() == break if > call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch = new <> if = try if call org.apache.solr.update.UpdateLog.getStartingOperation() call org.apache.solr.update.UpdateLog.getStartingOperation() call org.apache.solr.update.UpdateLog.getStartingOperation() call org.apache.solr.update.UpdateLog.getStartingOperation() call org.apache.solr.update.UpdateLog.getStartingOperation() & != call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = catch = decl_stmt java.util.concurrent.Future < = while ! && ! && ! try decl_stmt org.apache.solr.cloud.CloudDescriptor = decl_stmt org.apache.solr.common.cloud.ZkNodeProps = call org.apache.solr.common.cloud.ZkStateReader.getLeaderRetry(String,String) call org.apache.solr.common.cloud.ZkStateReader.getLeaderRetry(String,String) call org.apache.solr.common.cloud.ZkStateReader.getLeaderRetry(String,String) call org.apache.solr.common.cloud.ZkStateReader.getLeaderRetry(String,String) call org.apache.solr.common.cloud.ZkStateReader.getLeaderRetry(String,String) call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() decl_stmt java.lang.String final final = call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) decl_stmt java.lang.String final final = call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) call org.apache.solr.common.cloud.ZkNodeProps.getStr(String) decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt boolean = call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if && ! call org.apache.solr.cloud.CloudDescriptor.isLeader() call org.apache.solr.cloud.CloudDescriptor.isLeader() call org.apache.solr.cloud.CloudDescriptor.isLeader() call org.apache.solr.cloud.CloudDescriptor.isLeader() call org.apache.solr.cloud.CloudDescriptor.isLeader() throw new if call org.apache.solr.cloud.CloudDescriptor.isLeader() call org.apache.solr.cloud.CloudDescriptor.isLeader() call org.apache.solr.cloud.CloudDescriptor.isLeader() call org.apache.solr.cloud.CloudDescriptor.isLeader() call org.apache.solr.cloud.CloudDescriptor.isLeader() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.update.UpdateLog.bufferUpdates() call org.apache.solr.update.UpdateLog.bufferUpdates() call org.apache.solr.update.UpdateLog.bufferUpdates() call org.apache.solr.update.UpdateLog.bufferUpdates() call org.apache.solr.update.UpdateLog.bufferUpdates() = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) decl_stmt org.apache.solr.common.cloud.Slice final final = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getCollectionName() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() call org.apache.solr.cloud.CloudDescriptor.getShardId() try call HttpUriRequest.abort() call HttpUriRequest.abort() call HttpUriRequest.abort() call HttpUriRequest.abort() call HttpUriRequest.abort() catch if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) break if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) break try catch if = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt org.apache.solr.update.PeerSync = new call org.apache.solr.update.UpdateLog.getNumRecordsToKeep() call org.apache.solr.update.UpdateLog.getNumRecordsToKeep() call org.apache.solr.update.UpdateLog.getNumRecordsToKeep() call org.apache.solr.update.UpdateLog.getNumRecordsToKeep() call org.apache.solr.update.UpdateLog.getNumRecordsToKeep() call PeerSync.setStartingVersions() call PeerSync.setStartingVersions() call PeerSync.setStartingVersions() call PeerSync.setStartingVersions() call PeerSync.setStartingVersions() decl_stmt boolean = call org.apache.solr.update.PeerSync.sync() call org.apache.solr.update.PeerSync.sync() call org.apache.solr.update.PeerSync.sync() call org.apache.solr.update.PeerSync.sync() call org.apache.solr.update.PeerSync.sync() if decl_stmt org.apache.solr.request.SolrQueryRequest = new new new call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = = return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) break call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) break = = if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) break call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) = catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() = catch catch + finally if ! call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) try call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) call org.apache.solr.cloud.ZkController.publish(CoreDescriptor,Replica,State,boolean) catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() = if = call RecoveryListener.recovered() call RecoveryListener.recovered() call RecoveryListener.recovered() call RecoveryListener.recovered() call RecoveryListener.recovered() if ! try if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) break call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + ++ if >= + + try catch break catch try decl_stmt double = < : call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) for = < ++ if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) break catch call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() = if && == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) RecoveryInfo decl Future private < private < throws decl_stmt java.util.concurrent.Future < = if == call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) decl_stmt RecoveryInfo = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() if throw new return SolrIndexSearcher decl RefCounted String int private private if ! call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() call Logger.isDebugEnabled() return try decl_stmt org.apache.solr.util.RefCounted < = decl_stmt org.apache.solr.search.SolrIndexSearcher = call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() call decl RefCounted.get() try decl_stmt int final final = call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) call org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand) new decl_stmt java.lang.String final final = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() finally call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() call decl RefCounted.decref() catch call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() public public return decl Slice WaitForState decl State private private throws try = new decl_stmt WaitForState = new call WaitForState.setCoreName() call WaitForState.setCoreName() call WaitForState.setCoreName() call WaitForState.setCoreName() call WaitForState.setCoreName() call WaitForState.setNodeName() call WaitForState.setNodeName() call WaitForState.setNodeName() call WaitForState.setNodeName() call WaitForState.setNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call org.apache.solr.cloud.ZkController.getNodeName() call WaitForState.setCoreNodeName() call WaitForState.setCoreNodeName() call WaitForState.setCoreNodeName() call WaitForState.setCoreNodeName() call WaitForState.setCoreNodeName() call WaitForState.setState() call WaitForState.setState() call WaitForState.setState() call WaitForState.setState() call WaitForState.setState() call WaitForState.setCheckLive() call WaitForState.setCheckLive() call WaitForState.setCheckLive() call WaitForState.setCheckLive() call WaitForState.setCheckLive() call WaitForState.setOnlyIfLeader() call WaitForState.setOnlyIfLeader() call WaitForState.setOnlyIfLeader() call WaitForState.setOnlyIfLeader() call WaitForState.setOnlyIfLeader() decl_stmt sun.security.provider.certpath.State final final final final final = if != && != call WaitForState.setOnlyIfLeaderActive() call WaitForState.setOnlyIfLeaderActive() call WaitForState.setOnlyIfLeaderActive() call WaitForState.setOnlyIfLeaderActive() call WaitForState.setOnlyIfLeaderActive() decl_stmt HttpUriRequestResponse = = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call WaitForState.toString() call WaitForState.toString() call WaitForState.toString() call WaitForState.toString() call WaitForState.toString() call decl State.future() call decl State.future() call decl State.future() call decl State.future() call decl State.future() call decl State.future() call decl State.future() call decl State.future() call decl State.future()