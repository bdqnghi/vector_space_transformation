org.apache.lucene.util.bkd java.io.Closeable import java.util.ArrayList import java.util.List import org.apache.lucene.util.ArrayUtil import org.apache.lucene.util.BytesRef import class org.apache.lucene.util.bkd.HeapPointWriter super super implements decl List decl int int boolean int int boolean decl long decl int int public public if < throw new + + + if == if != assert != else assert != for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = int int assert == decl_stmt int = / decl_stmt int = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() * int int decl_stmt int = / decl_stmt int = = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = * assert == int int int assert == decl_stmt int = / decl_stmt int = while call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() <= decl_stmt int = - call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() * call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new * call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() * decl int private private assert > decl_stmt int = new return decl long private private assert > decl_stmt long = new return int public public assert == assert == if == decl_stmt int = + assert > : + + + = if == if != = else = if == if != = else assert <= = int = ++ public public assert + <= : + + + + + return new int public public < return new int public public = public public public public return + + + +