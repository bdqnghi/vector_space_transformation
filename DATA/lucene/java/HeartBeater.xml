org.apache.solr.hadoop java.lang.invoke.MethodHandles import java.util.Locale import java.util.concurrent.CountDownLatch import java.util.concurrent.TimeUnit import org.apache.hadoop.mapreduce.TaskInputOutputContext import org.apache.hadoop.util.Progressable import org.slf4j.Logger import org.slf4j.LoggerFactory import class org.apache.solr.hadoop.HeartBeater super super extends int Progressable CountDownLatch Logger long public public return public public = public public call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) while try synchronized if > call Progressable.progress() call Progressable.progress() call Progressable.progress() call Progressable.progress() call Progressable.progress() if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) else if call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call Logger.isInfoEnabled() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) call java.util.concurrent.CountDownLatch.await(long,TimeUnit) return catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() public synchronized public synchronized ++ call Progressable.progress() call Progressable.progress() call Progressable.progress() call Progressable.progress() call Progressable.progress() if == Exception public synchronized public synchronized if > -- else decl_stmt Exception = new call Exception.fillInStackTrace() call Exception.fillInStackTrace() call Exception.fillInStackTrace() call Exception.fillInStackTrace() call Exception.fillInStackTrace() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() public public if instanceof < public public call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown()