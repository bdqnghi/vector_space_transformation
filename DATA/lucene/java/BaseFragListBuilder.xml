org.apache.lucene.search.vectorhighlight java.util.ArrayList import java.util.Iterator import java.util.List import org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo import class org.apache.lucene.search.vectorhighlight.BaseFragListBuilder super super implements int int int int int int int int decl List int decl IteratorQueue WeightedPhraseInfo int int protected protected if < throw new + + + + decl_stmt java.util.List < = new <> decl_stmt IteratorQueue < = new <> decl_stmt WeightedPhraseInfo = decl_stmt int = while = call decl IteratorQueue.top() call decl IteratorQueue.top() call decl IteratorQueue.top() call decl IteratorQueue.top() call decl IteratorQueue.top() != if call WeightedPhraseInfo.getStartOffset() call WeightedPhraseInfo.getStartOffset() call WeightedPhraseInfo.getStartOffset() call WeightedPhraseInfo.getStartOffset() call WeightedPhraseInfo.getStartOffset() < call decl IteratorQueue.removeTop() call decl IteratorQueue.removeTop() call decl IteratorQueue.removeTop() call decl IteratorQueue.removeTop() call decl IteratorQueue.removeTop() continue call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() decl_stmt int final final = call WeightedPhraseInfo.getStartOffset() call WeightedPhraseInfo.getStartOffset() call WeightedPhraseInfo.getStartOffset() call WeightedPhraseInfo.getStartOffset() call WeightedPhraseInfo.getStartOffset() decl_stmt int = call WeightedPhraseInfo.getEndOffset() call WeightedPhraseInfo.getEndOffset() call WeightedPhraseInfo.getEndOffset() call WeightedPhraseInfo.getEndOffset() call WeightedPhraseInfo.getEndOffset() decl_stmt int = - decl_stmt int = + if call decl IteratorQueue.removeTop() call decl IteratorQueue.removeTop() call decl IteratorQueue.removeTop() call decl IteratorQueue.removeTop() call decl IteratorQueue.removeTop() - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() while = call decl IteratorQueue.top() call decl IteratorQueue.top() call decl IteratorQueue.top() call decl IteratorQueue.top() call decl IteratorQueue.top() != if call WeightedPhraseInfo.getEndOffset() call WeightedPhraseInfo.getEndOffset() call WeightedPhraseInfo.getEndOffset() call WeightedPhraseInfo.getEndOffset() call WeightedPhraseInfo.getEndOffset() <= = call WeightedPhraseInfo.getEndOffset() call WeightedPhraseInfo.getEndOffset() call WeightedPhraseInfo.getEndOffset() call WeightedPhraseInfo.getEndOffset() call WeightedPhraseInfo.getEndOffset() if call decl IteratorQueue.removeTop() call decl IteratorQueue.removeTop() call decl IteratorQueue.removeTop() call decl IteratorQueue.removeTop() call decl IteratorQueue.removeTop() - call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else break if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() continue decl_stmt int final final = - decl_stmt int final final = - / = - if < = = + = return protected protected return <= || <= public public return T public public decl_stmt T = if = else = return