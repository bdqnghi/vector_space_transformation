org.apache.lucene.mockfile java.io.IOException import java.io.InputStream import java.io.OutputStream import java.lang.Object import java.lang.Override import java.lang.RuntimeException import java.net.URI import java.nio.channels.AsynchronousFileChannel import java.nio.channels.ByteChannel import java.nio.channels.FileChannel import java.nio.channels.SeekableByteChannel import java.nio.file.DirectoryStream import java.nio.file.FileSystem import java.nio.file.Files import java.nio.file.Path import org.apache.lucene.mockfile.HandleTrackingFS import org.apache.lucene.mockfile.LeakFS import class org.apache.lucene.mockfile.TestHandleTrackingFS super super extends FileSystem protected protected decl_stmt java.io.FileSystem = new return new FileSystem decl DirectoryStream InputStream SeekableByteChannel OutputStream Path Path public public throws decl_stmt java.nio.file.Path = decl_stmt java.io.FileSystem = new call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() protected protected throws throw new protected protected throws decl_stmt java.nio.file.Path = new decl_stmt java.io.OutputStream = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) call java.io.OutputStream.write(byte) try call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() catch decl_stmt java.nio.channels.SeekableByteChannel = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) try call SeekableByteChannel.close() call SeekableByteChannel.close() call SeekableByteChannel.close() call SeekableByteChannel.close() call SeekableByteChannel.close() catch decl_stmt java.io.InputStream = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) try call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() call java.io.InputStream.close() catch call FileSystem.close() call FileSystem.close() call FileSystem.close() call FileSystem.close() call FileSystem.close() decl_stmt java.nio.file.DirectoryStream < = try call decl DirectoryStream.close() call decl DirectoryStream.close() call decl DirectoryStream.close() call decl DirectoryStream.close() call decl DirectoryStream.close() catch protected protected throws throw new protected protected throws FileSystem decl DirectoryStream InputStream SeekableByteChannel OutputStream Path Path public public throws decl_stmt java.nio.file.Path = decl_stmt java.io.FileSystem = new call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() call java.nio.file.Path.getFileSystem() protected protected throws protected protected throws throw new decl_stmt java.nio.file.Path = new try decl_stmt java.io.OutputStream = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) catch try decl_stmt java.nio.channels.SeekableByteChannel = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) catch try decl_stmt java.io.InputStream = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) catch call FileSystem.close() call FileSystem.close() call FileSystem.close() call FileSystem.close() call FileSystem.close() try decl_stmt java.nio.file.DirectoryStream < = catch call FileSystem.close() call FileSystem.close() call FileSystem.close() call FileSystem.close() call FileSystem.close() protected protected throws protected protected throws throw new