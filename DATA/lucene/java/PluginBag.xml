org.apache.solr.core java.io.IOException import java.lang.invoke.MethodHandles import java.nio.ByteBuffer import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import java.util.concurrent.ConcurrentHashMap import org.apache.lucene.analysis.util.ResourceLoader import org.apache.lucene.analysis.util.ResourceLoaderAware import org.apache.solr.cloud.CloudUtil import org.apache.solr.common.SolrException import org.apache.solr.common.util.StrUtils import org.apache.solr.handler.RequestHandlerBase import org.apache.solr.handler.component.SearchComponent import org.apache.solr.request.SolrRequestHandler import org.apache.solr.util.CryptoKeys import org.apache.solr.util.plugin.NamedListInitializedPlugin import org.apache.solr.util.plugin.PluginInfoInitialized import org.apache.solr.util.plugin.SolrCoreAware import org.slf4j.Logger import org.slf4j.LoggerFactory import static static org.apache.solr.common.params.CommonParams.NAME import class super super implements SolrCore Logger decl SolrConfig Class decl Map String decl Map static static if instanceof else if instanceof else if instanceof if instanceof if instanceof decl HashSet public < public < < if == || return decl_stmt java.util.HashSet < = new <> for : if ! call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() return T < < if call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() return new <> call org.apache.solr.core.SolrCore.getMemClassLoader() call org.apache.solr.core.SolrCore.getMemClassLoader() call org.apache.solr.core.SolrCore.getMemClassLoader() call org.apache.solr.core.SolrCore.getMemClassLoader() call org.apache.solr.core.SolrCore.getMemClassLoader() else if && call decl SolrConfig.options() call decl SolrConfig.options() call decl SolrConfig.options() call decl SolrConfig.options() call decl SolrConfig.options() call decl SolrConfig.options() call decl SolrConfig.options() call decl SolrConfig.options() call decl SolrConfig.options() call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() return new < call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() else decl_stmt T = call org.apache.solr.core.SolrCore.createInstance(String,Class,String,SolrCore,ResourceLoader) call org.apache.solr.core.SolrCore.createInstance(String,Class,String,SolrCore,ResourceLoader) call org.apache.solr.core.SolrCore.createInstance(String,Class,String,SolrCore,ResourceLoader) call org.apache.solr.core.SolrCore.createInstance(String,Class,String,SolrCore,ResourceLoader) call org.apache.solr.core.SolrCore.createInstance(String,Class,String,SolrCore,ResourceLoader) < call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() return new <> decl PluginHolder decl PluginHolder if == return decl_stmt PluginHolder < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == return decl_stmt PluginHolder < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return decl PluginHolder public public decl_stmt PluginHolder < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return == : call decl PluginHolder.get() call decl PluginHolder.get() call decl PluginHolder.get() call decl PluginHolder.get() call decl PluginHolder.get() T public public decl_stmt T = if && == return return public < public < return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl PluginHolder public public if == return decl_stmt PluginHolder < = new < return == : call decl PluginHolder.get() call decl PluginHolder.get() call decl PluginHolder.get() call decl PluginHolder.get() call decl PluginHolder.get() decl PluginHolder < < < decl_stmt PluginHolder < = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if != && if return if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() return if != call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() = public < < public < < return public public return call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() return decl PluginHolder decl_stmt PluginHolder < = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() return == : call decl PluginHolder.get() call decl PluginHolder.get() call decl PluginHolder.get() call decl PluginHolder.get() call decl PluginHolder.get() < call java.lang.Class.getName() call java.lang.Class.getName() call java.lang.Class.getName() call java.lang.Class.getName() call java.lang.Class.getName() decl PluginHolder String decl PluginHolder < < = for : decl_stmt PluginHolder < = decl_stmt java.lang.String = if call decl SolrConfig.clazz() call decl SolrConfig.clazz() call decl SolrConfig.clazz() call decl SolrConfig.clazz() call decl SolrConfig.clazz() call decl SolrConfig.clazz() call decl SolrConfig.clazz() call decl SolrConfig.clazz() call decl SolrConfig.clazz() = decl_stmt PluginHolder < = if != call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() for < : if ! new < decl PluginHolder public public decl_stmt PluginHolder < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == return return call decl PluginHolder.isLoaded() call decl PluginHolder.isLoaded() call decl PluginHolder.isLoaded() call decl PluginHolder.isLoaded() call decl PluginHolder.isLoaded() String SolrInfoMBean private static private static if == return if instanceof decl_stmt org.apache.solr.core.SolrInfoMBean = decl_stmt java.lang.String = instanceof : call org.apache.solr.core.SolrInfoMBean.getName() call org.apache.solr.core.SolrInfoMBean.getName() call org.apache.solr.core.SolrInfoMBean.getName() call org.apache.solr.core.SolrInfoMBean.getName() call org.apache.solr.core.SolrInfoMBean.getName() call org.apache.solr.core.SolrCore.registerInfoBean(String,SolrInfoMBean) call org.apache.solr.core.SolrCore.registerInfoBean(String,SolrInfoMBean) call org.apache.solr.core.SolrCore.registerInfoBean(String,SolrInfoMBean) call org.apache.solr.core.SolrCore.registerInfoBean(String,SolrInfoMBean) call org.apache.solr.core.SolrCore.registerInfoBean(String,SolrInfoMBean) public public for < < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() try catch call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() + + + call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() call decl SolrConfig.getCleanTag() public public return public public return != T public public throws if decl_stmt T = if != && instanceof public public if return if != return return public public return != public public if != return if != throw new if return decl Class T MemClassLoader private synchronized private synchronized if != return call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) if instanceof decl_stmt org.apache.solr.core.MemClassLoader = call org.apache.solr.core.MemClassLoader.loadJars() call org.apache.solr.core.MemClassLoader.loadJars() call org.apache.solr.core.MemClassLoader.loadJars() call org.apache.solr.core.MemClassLoader.loadJars() call org.apache.solr.core.MemClassLoader.loadJars() decl_stmt java.lang.Class < = < decl_stmt T = call org.apache.solr.core.SolrCore.createInstance(String,Class,String,SolrCore,ResourceLoader) call org.apache.solr.core.SolrCore.createInstance(String,Class,String,SolrCore,ResourceLoader) call org.apache.solr.core.SolrCore.createInstance(String,Class,String,SolrCore,ResourceLoader) call org.apache.solr.core.SolrCore.createInstance(String,Class,String,SolrCore,ResourceLoader) call org.apache.solr.core.SolrCore.createInstance(String,Class,String,SolrCore,ResourceLoader) if instanceof if instanceof try call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() call org.apache.solr.core.SolrCore.getResourceLoader() catch throw new = return Object public public = decl_stmt java.lang.Object = if == || == throw new = = if != return synchronized if != return = + + public public return public public return public public return public public throws if == throw new + + + return public public throws if != RuntimeLib decl List public static < public static < < decl_stmt java.util.List < = new <> for : decl_stmt RuntimeLib = new call RuntimeLib.init() call RuntimeLib.init() call RuntimeLib.init() call RuntimeLib.init() call RuntimeLib.init() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl Map String public public throws if return if == call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return if ! throw new decl_stmt java.util.Map < = if call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() if == = call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) return else throw new + else if == throw new try decl_stmt java.lang.String = new if == throw new + + + call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) call java.util.logging.Logger.info(String) catch if instanceof throw throw new