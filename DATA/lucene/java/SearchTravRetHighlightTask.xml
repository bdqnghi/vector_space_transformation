org.apache.lucene.benchmark.byTask.tasks java.util.Collection import java.util.Collections import java.util.HashSet import java.util.Set import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.benchmark.byTask.PerfRunData import org.apache.lucene.document.Document import org.apache.lucene.index.IndexReader import org.apache.lucene.search.Query import org.apache.lucene.search.highlight.Highlighter import org.apache.lucene.search.highlight.QueryScorer import org.apache.lucene.search.highlight.SimpleHTMLFormatter import org.apache.lucene.search.highlight.TextFragment import org.apache.lucene.search.highlight.TokenSources import class org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask super super extends boolean int int Highlighter decl Set int PerfRunData public public throws decl_stmt org.apache.lucene.benchmark.byTask.PerfRunData = if call org.apache.lucene.benchmark.byTask.PerfRunData.getConfig() call org.apache.lucene.benchmark.byTask.PerfRunData.getConfig() call org.apache.lucene.benchmark.byTask.PerfRunData.getConfig() call org.apache.lucene.benchmark.byTask.PerfRunData.getConfig() call org.apache.lucene.benchmark.byTask.PerfRunData.getConfig() == throw new = call org.apache.lucene.benchmark.byTask.PerfRunData.getConfig() call org.apache.lucene.benchmark.byTask.PerfRunData.getConfig() call org.apache.lucene.benchmark.byTask.PerfRunData.getConfig() call org.apache.lucene.benchmark.byTask.PerfRunData.getConfig() call org.apache.lucene.benchmark.byTask.PerfRunData.getConfig() public public return public public return decl TextFragment int TokenStream protected protected = new new new call org.apache.lucene.search.highlight.Highlighter.setMaxDocCharsToAnalyze(int) call org.apache.lucene.search.highlight.Highlighter.setMaxDocCharsToAnalyze(int) call org.apache.lucene.search.highlight.Highlighter.setMaxDocCharsToAnalyze(int) call org.apache.lucene.search.highlight.Highlighter.setMaxDocCharsToAnalyze(int) call org.apache.lucene.search.highlight.Highlighter.setMaxDocCharsToAnalyze(int) return new public public throws decl_stmt int final final = call org.apache.lucene.search.highlight.Highlighter.getMaxDocCharsToAnalyze() call org.apache.lucene.search.highlight.Highlighter.getMaxDocCharsToAnalyze() call org.apache.lucene.search.highlight.Highlighter.getMaxDocCharsToAnalyze() call org.apache.lucene.search.highlight.Highlighter.getMaxDocCharsToAnalyze() call org.apache.lucene.search.highlight.Highlighter.getMaxDocCharsToAnalyze() - decl_stmt org.apache.lucene.analysis.TokenStream = decl_stmt org.apache.lucene.search.highlight.TextFragment = call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) return != : decl TextFragment int TokenStream public public throws decl_stmt int final final = call org.apache.lucene.search.highlight.Highlighter.getMaxDocCharsToAnalyze() call org.apache.lucene.search.highlight.Highlighter.getMaxDocCharsToAnalyze() call org.apache.lucene.search.highlight.Highlighter.getMaxDocCharsToAnalyze() call org.apache.lucene.search.highlight.Highlighter.getMaxDocCharsToAnalyze() call org.apache.lucene.search.highlight.Highlighter.getMaxDocCharsToAnalyze() - decl_stmt org.apache.lucene.analysis.TokenStream = decl_stmt org.apache.lucene.search.highlight.TextFragment = call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) call org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int) return != : decl Collection protected < protected < decl_stmt java.util.Collection < = if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() == && call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() call decl Collection.isEmpty() == call decl Collection.retainAll() call decl Collection.retainAll() call decl Collection.retainAll() call decl Collection.retainAll() call decl Collection.retainAll() else = return decl String decl String String public public = decl_stmt java.lang.String = for = < ++ if == = int - else if == = int - else if == = int - else if == = - else if == = new <> decl_stmt java.lang.String = - decl_stmt java.lang.String = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) for = < ++ call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add()