org.apache.solr.spelling org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.Token import org.apache.lucene.analysis.core.WhitespaceAnalyzer import org.apache.lucene.search.spell.LevensteinDistance import org.apache.lucene.search.spell.StringDistance import org.apache.lucene.search.spell.SuggestWord import org.apache.lucene.search.spell.SuggestWordQueue import org.apache.solr.client.solrj.response.SpellCheckResponse import org.apache.solr.common.params.SpellingParams import org.apache.solr.common.util.NamedList import org.apache.solr.core.SolrCore import org.apache.solr.handler.component.SpellCheckMergeData import org.apache.solr.schema.FieldType import org.apache.solr.schema.IndexSchema import org.apache.solr.search.SolrIndexSearcher import java.io.IOException import java.util.ArrayList import java.util.HashSet import java.util.List import java.util.Map import class org.apache.solr.spelling.SolrSpellChecker String String String String Analyzer String String String FieldType IndexSchema public public = if == = = decl_stmt org.apache.solr.schema.IndexSchema = if != && call org.apache.solr.schema.IndexSchema.getFieldTypeNoEx(String) call org.apache.solr.schema.IndexSchema.getFieldTypeNoEx(String) call org.apache.solr.schema.IndexSchema.getFieldTypeNoEx(String) call org.apache.solr.schema.IndexSchema.getFieldTypeNoEx(String) call org.apache.solr.schema.IndexSchema.getFieldTypeNoEx(String) != = call org.apache.solr.schema.IndexSchema.getFieldType(String) call org.apache.solr.schema.IndexSchema.getFieldType(String) call org.apache.solr.schema.IndexSchema.getFieldType(String) call org.apache.solr.schema.IndexSchema.getFieldType(String) call org.apache.solr.schema.IndexSchema.getFieldType(String) = if call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() decl_stmt org.apache.solr.schema.FieldType = call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() call org.apache.solr.schema.IndexSchema.getFieldTypes() = call org.apache.solr.schema.FieldType.getQueryAnalyzer() call org.apache.solr.schema.FieldType.getQueryAnalyzer() call org.apache.solr.schema.FieldType.getQueryAnalyzer() call org.apache.solr.schema.FieldType.getQueryAnalyzer() call org.apache.solr.schema.FieldType.getQueryAnalyzer() if == = new return decl HashSet SuggestWord SuggestWordQueue Integer float Token decl Suggestion decl SuggestWord Integer SpellingResult decl SpellCheckResponse String StringDistance public public decl_stmt float = try = catch decl_stmt org.apache.lucene.search.spell.StringDistance = try = == new : catch = new decl_stmt org.apache.solr.spelling.SpellingResult = new for < < : decl_stmt java.lang.String = decl_stmt java.lang.Integer = if < && continue decl_stmt java.util.HashSet < = decl_stmt org.apache.lucene.search.spell.SuggestWordQueue = new for : decl_stmt SuggestWord = = call StringDistance.getDistance() call StringDistance.getDistance() call StringDistance.getDistance() call StringDistance.getDistance() call StringDistance.getDistance() if < continue call SuggestWordQueue.insertWithOverflow() call SuggestWordQueue.insertWithOverflow() call SuggestWordQueue.insertWithOverflow() call SuggestWordQueue.insertWithOverflow() call SuggestWordQueue.insertWithOverflow() if call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() == = call SuggestWordQueue.top() call SuggestWordQueue.top() call SuggestWordQueue.top() call SuggestWordQueue.top() call SuggestWordQueue.top() decl_stmt org.apache.solr.client.solrj.response.Suggestion = decl_stmt org.apache.lucene.queryparser.surround.parser.Token = new call decl SpellCheckResponse.getStartOffset() call decl SpellCheckResponse.getStartOffset() call decl SpellCheckResponse.getStartOffset() call decl SpellCheckResponse.getStartOffset() call decl SpellCheckResponse.getStartOffset() call decl SpellCheckResponse.getEndOffset() call decl SpellCheckResponse.getEndOffset() call decl SpellCheckResponse.getEndOffset() call decl SpellCheckResponse.getEndOffset() call decl SpellCheckResponse.getEndOffset() decl_stmt SuggestWord = new call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() for = < call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() - ++ call SuggestWordQueue.pop() call SuggestWordQueue.pop() call SuggestWordQueue.pop() call SuggestWordQueue.pop() call SuggestWordQueue.pop() for = call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() - >= -- = call SuggestWordQueue.pop() call SuggestWordQueue.pop() call SuggestWordQueue.pop() call SuggestWordQueue.pop() call SuggestWordQueue.pop() if decl_stmt java.lang.Integer = if != call SpellingResult.addFrequency() call SpellingResult.addFrequency() call SpellingResult.addFrequency() call SpellingResult.addFrequency() call SpellingResult.addFrequency() for : call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) else decl_stmt java.util.List < = new <> call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() call SuggestWordQueue.size() for : call Integer.add() call Integer.add() call Integer.add() call Integer.add() call Integer.add() call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) return public public return public public return protected protected throw new protected protected throw new public public return