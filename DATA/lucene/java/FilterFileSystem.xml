org.apache.lucene.mockfile java.io.IOException import java.nio.file.FileStore import java.nio.file.FileSystem import java.nio.file.FileSystems import java.nio.file.Path import java.nio.file.PathMatcher import java.nio.file.WatchService import java.nio.file.attribute.UserPrincipalLookupService import java.nio.file.spi.FileSystemProvider import java.util.Iterator import java.util.Objects import java.util.Set import class org.apache.lucene.mockfile.FilterFileSystem super super extends FileSystem FilterFileSystemProvider public public return public public throws if == call org.apache.lucene.mockfile.FilterFileSystemProvider.onClose() call org.apache.lucene.mockfile.FilterFileSystemProvider.onClose() call org.apache.lucene.mockfile.FilterFileSystemProvider.onClose() call org.apache.lucene.mockfile.FilterFileSystemProvider.onClose() call org.apache.lucene.mockfile.FilterFileSystemProvider.onClose() else try = assert != call org.apache.lucene.mockfile.FilterFileSystemProvider.onClose() call org.apache.lucene.mockfile.FilterFileSystemProvider.onClose() call org.apache.lucene.mockfile.FilterFileSystemProvider.onClose() call org.apache.lucene.mockfile.FilterFileSystemProvider.onClose() call org.apache.lucene.mockfile.FilterFileSystemProvider.onClose() public public return call FileSystem.isOpen() call FileSystem.isOpen() call FileSystem.isOpen() call FileSystem.isOpen() call FileSystem.isOpen() public public return call FileSystem.isReadOnly() call FileSystem.isReadOnly() call FileSystem.isReadOnly() call FileSystem.isReadOnly() call FileSystem.isReadOnly() public public return call FileSystem.getSeparator() call FileSystem.getSeparator() call FileSystem.getSeparator() call FileSystem.getSeparator() call FileSystem.getSeparator() decl Iterator decl Iterable public < public < decl_stmt java.lang.Iterable final final final < = call FileSystem.getRootDirectories() call FileSystem.getRootDirectories() call FileSystem.getRootDirectories() call FileSystem.getRootDirectories() call FileSystem.getRootDirectories() return decl_stmt java.util.Iterator final final final < = call decl Iterable.iterator() call decl Iterable.iterator() call decl Iterable.iterator() call decl Iterable.iterator() call decl Iterable.iterator() return new < public public return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public return new call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() public public call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() public public return public public return new public public decl Iterator decl Iterable public < public < decl_stmt java.lang.Iterable final final final < = call FileSystem.getFileStores() call FileSystem.getFileStores() call FileSystem.getFileStores() call FileSystem.getFileStores() call FileSystem.getFileStores() return decl_stmt java.util.Iterator final final final < = call decl Iterable.iterator() call decl Iterable.iterator() call decl Iterable.iterator() call decl Iterable.iterator() call decl Iterable.iterator() return new < public public return call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() public public return new call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call org.apache.lucene.mockfile.FilterFileSystemProvider.getScheme() call org.apache.lucene.mockfile.FilterFileSystemProvider.getScheme() call org.apache.lucene.mockfile.FilterFileSystemProvider.getScheme() call org.apache.lucene.mockfile.FilterFileSystemProvider.getScheme() call org.apache.lucene.mockfile.FilterFileSystemProvider.getScheme() public public call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() public public return public public return new call org.apache.lucene.mockfile.FilterFileSystemProvider.getScheme() call org.apache.lucene.mockfile.FilterFileSystemProvider.getScheme() call org.apache.lucene.mockfile.FilterFileSystemProvider.getScheme() call org.apache.lucene.mockfile.FilterFileSystemProvider.getScheme() call org.apache.lucene.mockfile.FilterFileSystemProvider.getScheme() public public public < public < return call FileSystem.supportedFileAttributeViews() call FileSystem.supportedFileAttributeViews() call FileSystem.supportedFileAttributeViews() call FileSystem.supportedFileAttributeViews() call FileSystem.supportedFileAttributeViews() public public return new call FileSystem.getPath() call FileSystem.getPath() call FileSystem.getPath() call FileSystem.getPath() call FileSystem.getPath() PathMatcher public public decl_stmt java.nio.file.PathMatcher final final = call FileSystem.getPathMatcher() call FileSystem.getPathMatcher() call FileSystem.getPathMatcher() call FileSystem.getPathMatcher() call FileSystem.getPathMatcher() return if instanceof return call PathMatcher.matches() call PathMatcher.matches() call PathMatcher.matches() call PathMatcher.matches() call PathMatcher.matches() return public public return call FileSystem.getUserPrincipalLookupService() call FileSystem.getUserPrincipalLookupService() call FileSystem.getUserPrincipalLookupService() call FileSystem.getUserPrincipalLookupService() call FileSystem.getUserPrincipalLookupService() public public throws return call FileSystem.newWatchService() call FileSystem.newWatchService() call FileSystem.newWatchService() call FileSystem.newWatchService() call FileSystem.newWatchService() public public return public public return