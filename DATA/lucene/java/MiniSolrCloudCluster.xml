org.apache.solr.cloud javax.servlet.Filter import java.io.File import java.io.IOException import java.nio.charset.Charset import java.nio.file.Files import java.nio.file.Path import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.List import java.util.Map import java.util.SortedMap import java.util.concurrent.Callable import java.util.concurrent.CopyOnWriteArrayList import java.util.concurrent.ExecutionException import java.util.concurrent.ExecutorService import java.util.concurrent.Future import java.util.concurrent.TimeUnit import java.util.concurrent.atomic.AtomicInteger import com.google.common.base.Charsets import org.apache.solr.client.solrj.SolrServerException import org.apache.solr.client.solrj.embedded.JettyConfig import org.apache.solr.client.solrj.embedded.JettySolrRunner import org.apache.solr.client.solrj.embedded.SSLConfig import org.apache.solr.client.solrj.impl.CloudSolrClient import org.apache.solr.client.solrj.impl.CloudSolrClient.Builder import org.apache.solr.client.solrj.request.QueryRequest import org.apache.solr.common.cloud.SolrZkClient import org.apache.solr.common.cloud.ZkConfigManager import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.common.params.CollectionParams.CollectionAction import org.apache.solr.common.params.CommonAdminParams import org.apache.solr.common.params.CoreAdminParams import org.apache.solr.common.params.ModifiableSolrParams import org.apache.solr.common.util.ExecutorUtil import org.apache.solr.common.util.NamedList import org.apache.solr.common.util.SolrjNamedThreadFactory import org.apache.zookeeper.KeeperException import org.eclipse.jetty.servlet.ServletHolder import class org.apache.solr.cloud.MiniSolrCloudCluster String ExecutorService Path boolean decl List ZkTestServer AtomicInteger CloudSolrClient JettyConfig private private return + call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() Path private private throws decl_stmt java.nio.file.Path = call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) call java.nio.file.Path.resolve(Path) return public public return public < public < return public public < < < extends extends throws return public public < < < extends extends throws return Path JettySolrRunner String JettyConfig public public throws decl_stmt java.nio.file.Path = decl_stmt java.lang.String = decl_stmt org.apache.solr.client.solrj.embedded.JettyConfig = decl_stmt org.apache.solr.client.solrj.embedded.JettySolrRunner = new call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call java.nio.file.Path.toString() call org.apache.solr.client.solrj.embedded.JettySolrRunner.start() call org.apache.solr.client.solrj.embedded.JettySolrRunner.start() call org.apache.solr.client.solrj.embedded.JettySolrRunner.start() call org.apache.solr.client.solrj.embedded.JettySolrRunner.start() call org.apache.solr.client.solrj.embedded.JettySolrRunner.start() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public throws return JettySolrRunner public public throws decl_stmt org.apache.solr.client.solrj.embedded.JettySolrRunner = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.solr.client.solrj.embedded.JettySolrRunner.stop() call org.apache.solr.client.solrj.embedded.JettySolrRunner.stop() call org.apache.solr.client.solrj.embedded.JettySolrRunner.stop() call org.apache.solr.client.solrj.embedded.JettySolrRunner.stop() call org.apache.solr.client.solrj.embedded.JettySolrRunner.stop() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() return protected protected throws call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return protected protected throws return ZkConfigManager public public throws try = new call org.apache.solr.cloud.ZkTestServer.getZkAddress() call org.apache.solr.cloud.ZkTestServer.getZkAddress() call org.apache.solr.cloud.ZkTestServer.getZkAddress() call org.apache.solr.cloud.ZkTestServer.getZkAddress() call org.apache.solr.cloud.ZkTestServer.getZkAddress() decl_stmt org.apache.solr.common.cloud.ZkConfigManager = new call org.apache.solr.common.cloud.ZkConfigManager.uploadConfigDir(Path,String) call org.apache.solr.common.cloud.ZkConfigManager.uploadConfigDir(Path,String) call org.apache.solr.common.cloud.ZkConfigManager.uploadConfigDir(Path,String) call org.apache.solr.common.cloud.ZkConfigManager.uploadConfigDir(Path,String) call org.apache.solr.common.cloud.ZkConfigManager.uploadConfigDir(Path,String) public < public < < throws return ModifiableSolrParams public < public < < throws decl_stmt org.apache.solr.common.params.ModifiableSolrParams final final = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) if != call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) if != call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) if != for < : call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) + return ModifiableSolrParams public < public < throws decl_stmt org.apache.solr.common.params.ModifiableSolrParams final final = new call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) call org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean) return QueryRequest private < private < final final throws decl_stmt org.apache.solr.client.solrj.request.QueryRequest final final = new call QueryRequest.setPath() call QueryRequest.setPath() call QueryRequest.setPath() call QueryRequest.setPath() call QueryRequest.setPath() return call org.apache.solr.client.solrj.impl.CloudSolrClient.request(SolrRequest,String) call org.apache.solr.client.solrj.impl.CloudSolrClient.request(SolrRequest,String) call org.apache.solr.client.solrj.impl.CloudSolrClient.request(SolrRequest,String) call org.apache.solr.client.solrj.impl.CloudSolrClient.request(SolrRequest,String) call org.apache.solr.client.solrj.impl.CloudSolrClient.request(SolrRequest,String) decl List Exception decl Collection public public throws try if != call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() call org.apache.solr.client.solrj.impl.CloudSolrClient.close() decl_stmt java.util.List < < = new <> call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for final final : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() decl_stmt java.util.Collection < < = call java.util.concurrent.ExecutorService.invokeAll(Collection,long,TimeUnit) call java.util.concurrent.ExecutorService.invokeAll(Collection,long,TimeUnit) call java.util.concurrent.ExecutorService.invokeAll(Collection,long,TimeUnit) call java.util.concurrent.ExecutorService.invokeAll(Collection,long,TimeUnit) call java.util.concurrent.ExecutorService.invokeAll(Collection,long,TimeUnit) decl_stmt Exception = if != throw finally call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.shutdown() call java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit) call java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit) call java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit) call java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit) call java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit) try if ! call org.apache.solr.cloud.ZkTestServer.shutdown() call org.apache.solr.cloud.ZkTestServer.shutdown() call org.apache.solr.cloud.ZkTestServer.shutdown() call org.apache.solr.cloud.ZkTestServer.shutdown() call org.apache.solr.cloud.ZkTestServer.shutdown() finally public public return protected protected return new private static private static if == || = if = - if ! = + return boolean Exception private private < < throws decl_stmt Exception = new decl_stmt boolean = for < : try catch call Exception.addSuppressed() call Exception.addSuppressed() call Exception.addSuppressed() call Exception.addSuppressed() call Exception.addSuppressed() = catch throw return :