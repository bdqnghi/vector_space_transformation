org.apache.lucene.facet.taxonomy java.io.Closeable import java.io.IOException import java.util.Map import java.util.concurrent.atomic.AtomicInteger import org.apache.lucene.store.AlreadyClosedException import class org.apache.lucene.facet.taxonomy.TaxonomyReader super super implements AtomicInteger int int boolean int public public decl_stmt int = if != = return T public static < extends extends public static < extends extends throws decl_stmt T final final = assert != return protected final protected final throws if <= throw new public final public final throws if ! synchronized if ! = boolean int public final public final throws decl_stmt int final final = call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() if == decl_stmt boolean = try = = finally if ! call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() else if < throw new + + ParallelTaxonomyArrays int public public final final throws decl_stmt ParallelTaxonomyArrays = decl_stmt int = >= call ParallelTaxonomyArrays.children() call ParallelTaxonomyArrays.children() call ParallelTaxonomyArrays.children() call ParallelTaxonomyArrays.children() call ParallelTaxonomyArrays.children() : return new call ParallelTaxonomyArrays.siblings() call ParallelTaxonomyArrays.siblings() call ParallelTaxonomyArrays.siblings() call ParallelTaxonomyArrays.siblings() call ParallelTaxonomyArrays.siblings() decl String public public throws decl_stmt java.lang.String = new + = return new public final public final return call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() public final public final call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() int public final public final decl_stmt int while = call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() call java.util.concurrent.atomic.AtomicInteger.get() > if call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) call java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int) + return return