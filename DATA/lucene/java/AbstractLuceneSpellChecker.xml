org.apache.solr.spelling org.apache.lucene.search.spell.StringDistance import java.io.File import java.io.IOException import java.util.Arrays import java.util.Collections import java.util.Comparator import java.util.List import org.apache.lucene.search.spell.SuggestMode import org.apache.lucene.search.spell.SuggestWord import org.apache.lucene.search.spell.SuggestWordFrequencyComparator import org.apache.lucene.search.spell.SuggestWordQueue import org.apache.lucene.analysis.Token import org.apache.lucene.analysis.core.WhitespaceAnalyzer import org.apache.lucene.index.IndexReader import org.apache.lucene.index.Term import org.apache.lucene.search.spell.Dictionary import org.apache.lucene.search.spell.LevensteinDistance import org.apache.lucene.search.spell.SpellChecker import org.apache.lucene.store.Directory import org.apache.lucene.store.FilterDirectory import org.apache.lucene.store.FSDirectory import org.apache.lucene.store.RAMDirectory import org.apache.solr.common.params.ShardParams import org.apache.solr.common.params.SolrParams import org.apache.solr.common.params.SpellingParams import org.apache.solr.common.util.NamedList import org.apache.solr.core.SolrCore import org.apache.solr.schema.FieldType import org.apache.solr.search.SolrIndexSearcher import class org.apache.solr.spelling.AbstractLuceneSpellChecker super super extends String decl search String decl lucene decl SpellChecker String Directory String decl org String Dictionary String decl spell String decl apache String String decl Comparator String String String public public = decl_stmt java.lang.String = if != if ! new = + + = decl_stmt java.lang.String = decl_stmt java.util.Comparator < = if != if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) = else if call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) call java.lang.String.equalsIgnoreCase(String) = new else = < else = decl_stmt java.lang.String = if != = else = new try = new catch throw new if != try = call decl org.setAccuracy() call decl org.setAccuracy() call decl org.setAccuracy() call decl org.setAccuracy() call decl org.setAccuracy() catch throw new + return int Term boolean int decl String decl String String int SpellingResult IndexReader decl List float public public throws decl_stmt org.apache.solr.spelling.SpellingResult = new decl_stmt org.apache.lucene.index.IndexReader = decl_stmt org.apache.lucene.index.Term = != new : decl_stmt float = == call decl org.getAccuracy() call decl org.getAccuracy() call decl org.getAccuracy() call decl org.getAccuracy() call decl org.getAccuracy() : decl_stmt int = for : decl_stmt java.lang.String = new = new decl_stmt int = if != = call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() decl_stmt java.lang.String = call decl org.suggestSimilar() call decl org.suggestSimilar() call decl org.suggestSimilar() call decl org.suggestSimilar() call decl org.suggestSimilar() == || == : != : if == && && == continue if > && > decl_stmt boolean = decl_stmt java.lang.String = new + for = < ++ if = break + = if ! = = if == && != && != call SpellingResult.addFrequency() call SpellingResult.addFrequency() call SpellingResult.addFrequency() call SpellingResult.addFrequency() call SpellingResult.addFrequency() decl_stmt int = if > for = < ++ = new call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() call IndexReader.docFreq() else decl_stmt java.util.List < = call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) else if > decl_stmt java.util.List < = if > = call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) else decl_stmt java.util.List < = call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) call org.apache.solr.spelling.SpellingResult.add(Token,List) return protected protected return public public throws call decl org.setSpellIndex() call decl org.setSpellIndex() call decl org.setSpellIndex() call decl org.setSpellIndex() call decl org.setSpellIndex() protected protected throws if != = new new else = new public public return public public return public public return public public return public public return public public return public public return