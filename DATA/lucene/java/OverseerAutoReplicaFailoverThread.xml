org.apache.solr.cloud java.io.Closeable import java.lang.invoke.MethodHandles import java.util.ArrayList import java.util.Collection import java.util.Collections import java.util.Comparator import java.util.HashMap import java.util.HashSet import java.util.Map import java.util.Set import java.util.TreeMap import java.util.concurrent.ExecutorService import java.util.concurrent.TimeUnit import com.google.common.cache.Cache import com.google.common.cache.CacheBuilder import org.apache.solr.client.solrj.impl.HttpSolrClient import org.apache.solr.client.solrj.request.CoreAdminRequest.Create import org.apache.solr.common.SolrException import org.apache.solr.common.cloud.ClusterState import org.apache.solr.common.cloud.ClusterStateUtil import org.apache.solr.common.cloud.DocCollection import org.apache.solr.common.cloud.Replica import org.apache.solr.common.cloud.Slice import org.apache.solr.common.cloud.ZkStateReader import org.apache.solr.core.CloudConfig import org.apache.solr.update.UpdateShardHandler import org.slf4j.Logger import org.slf4j.LoggerFactory import org.slf4j.MDC import class org.apache.solr.cloud.OverseerAutoReplicaFailoverThread super super implements Integer Logger int boolean decl Set int ZkStateReader ExecutorService decl Cache public public while ! call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + + try catch + if ! try catch decl Collection String DocCollection ClusterState decl Set int decl Collection private private decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl_stmt java.lang.String = call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() call org.apache.solr.common.cloud.ZkStateReader.getClusterProps() if != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) return if != if call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() != && call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() && call decl Cache.size() call decl Cache.size() call decl Cache.size() call decl Cache.size() call decl Cache.size() == && call decl Set.equals() call decl Set.equals() call decl Set.equals() call decl Set.equals() call decl Set.equals() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() return = call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() = call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() call org.apache.solr.common.cloud.ClusterState.getZkClusterStateVersion() decl_stmt java.util.Set < = call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() for final final : call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) if ! call org.apache.solr.common.cloud.DocCollection.getAutoAddReplicas() call org.apache.solr.common.cloud.DocCollection.getAutoAddReplicas() call org.apache.solr.common.cloud.DocCollection.getAutoAddReplicas() call org.apache.solr.common.cloud.DocCollection.getAutoAddReplicas() call org.apache.solr.common.cloud.DocCollection.getAutoAddReplicas() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() continue if call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() continue call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() decl_stmt java.util.Collection < = call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() for : if == decl_stmt java.util.Collection final final final < = new < decl_stmt int = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getName() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() if call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() > && < call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() else if > call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call org.apache.solr.common.cloud.DocCollection.getReplicationFactor() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() long Long String private private final final final final final < for : call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() decl_stmt java.lang.String = decl_stmt java.lang.Long = call decl Cache.getIfPresent() call decl Cache.getIfPresent() call decl Cache.getIfPresent() call decl Cache.getIfPresent() call decl Cache.getIfPresent() if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call decl Cache.put() call decl Cache.put() call decl Cache.put() call decl Cache.put() call decl Cache.put() else decl_stmt long = - if < call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + else call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + if call decl Cache.invalidate() call decl Cache.invalidate() call decl Cache.invalidate() call decl Cache.invalidate() call decl Cache.invalidate() String boolean String String String String private private final final decl_stmt java.lang.String final final = if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = decl_stmt java.lang.String final final = if != decl_stmt java.lang.String final final = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() try call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) call java.util.concurrent.ExecutorService.submit(Runnable,T) finally decl_stmt boolean = if ! call Logger.error() call Logger.error() call Logger.error() call Logger.error() call Logger.error() return return call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() return decl Collection decl Replica boolean int boolean decl State private static private static final final final < decl_stmt int = decl_stmt java.util.Collection < = if != for : decl_stmt boolean = decl_stmt sun.security.provider.certpath.State final final final final final = decl_stmt boolean final final = == || == || == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call decl Replica.toString() call decl Replica.toString() call decl Replica.toString() call decl Replica.toString() call decl Replica.toString() if && ++ else decl_stmt DownReplica = new = = = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return Counts ValueComparator decl Set boolean decl Collection DocCollection Integer decl Collection String DocCollection ClusterState boolean decl Map decl Set decl Collection Slice decl Map decl Set static static assert != assert != assert != call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() + decl_stmt java.util.Map < = new < decl_stmt java.util.Set < = new < decl_stmt java.util.Set < = new <> call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() decl_stmt org.apache.solr.common.cloud.ClusterState = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() if != decl_stmt java.util.Set < = call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() call ClusterState.getCollections() for : call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) decl_stmt java.util.Collection < = call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() call org.apache.solr.common.cloud.DocCollection.getSlices() for : if == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() decl_stmt java.util.Collection < = for : call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() decl_stmt java.lang.String = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) continue call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() call org.apache.solr.common.cloud.ClusterState.getLiveNodes() decl_stmt boolean = call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call org.apache.solr.common.cloud.ClusterState.liveNodesContain(String) call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() if decl_stmt Counts = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new if += += else += if && ++ decl_stmt java.lang.Integer = if == call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() call Logger.warn() + = call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() decl_stmt java.util.Collection < = decl_stmt org.apache.solr.common.cloud.DocCollection = call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) call org.apache.solr.common.cloud.ClusterState.getCollection(String) if != decl_stmt org.apache.solr.common.cloud.Slice = call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) call org.apache.solr.common.cloud.DocCollection.getSlice(String) if != = call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() call org.apache.solr.common.cloud.Slice.getReplicas() decl_stmt boolean = call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() call org.apache.solr.common.cloud.ZkStateReader.getClusterState() if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() || || >= call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call org.apache.solr.common.cloud.ZkStateReader.getBaseUrlForNodeName(String) call org.apache.solr.common.cloud.ZkStateReader.getBaseUrlForNodeName(String) call org.apache.solr.common.cloud.ZkStateReader.getBaseUrlForNodeName(String) call org.apache.solr.common.cloud.ZkStateReader.getBaseUrlForNodeName(String) call org.apache.solr.common.cloud.ZkStateReader.getBaseUrlForNodeName(String) new if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return decl_stmt ValueComparator = new decl_stmt java.util.Map < = new < call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl Replica private static private static < if != call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() for : decl_stmt sun.security.provider.certpath.State final final final final final = if ! && && && == || == || == call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() return decl Set private static private static < decl_stmt java.util.Set < = new <> for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return Create private private final final final final final final final final final final final final try = new call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() call Logger.debug() decl_stmt Create = new call Create.setCollection() call Create.setCollection() call Create.setCollection() call Create.setCollection() call Create.setCollection() call Create.setCoreNodeName() call Create.setCoreNodeName() call Create.setCoreNodeName() call Create.setCoreNodeName() call Create.setCoreNodeName() call Create.setCoreName() call Create.setCoreName() call Create.setCoreName() call Create.setCoreName() call Create.setCoreName() call Create.setDataDir() call Create.setDataDir() call Create.setDataDir() call Create.setDataDir() call Create.setDataDir() call Create.setUlogDir() call Create.setUlogDir() call Create.setUlogDir() call Create.setUlogDir() call Create.setUlogDir() catch + return return public public if >= return else return - public public = public public return public public return + + + + + + public public return + + + + + +