org.apache.lucene.codecs.lucene50 java.util.HashMap import java.util.HashSet import java.util.Map import java.util.Set import org.apache.lucene.codecs.Codec import org.apache.lucene.codecs.lucene50.Lucene50NormsConsumer.NormMap import org.apache.lucene.index.BaseNormsFormatTestCase import org.apache.lucene.util.TestUtil import class org.apache.lucene.codecs.lucene50.TestLucene50NormsFormat super super extends Codec protected protected return NormMap public public decl_stmt NormMap = new call NormMap.add() call NormMap.add() call NormMap.add() call NormMap.add() call NormMap.add() byte call NormMap.add() call NormMap.add() call NormMap.add() call NormMap.add() call NormMap.add() byte call NormMap.add() call NormMap.add() call NormMap.add() call NormMap.add() call NormMap.add() byte call NormMap.add() call NormMap.add() call NormMap.add() call NormMap.add() call NormMap.add() byte call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() byte call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() byte call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() byte call NormMap.optimizeOrdinals() call NormMap.optimizeOrdinals() call NormMap.optimizeOrdinals() call NormMap.optimizeOrdinals() call NormMap.optimizeOrdinals() call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() byte call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() byte call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() byte NormMap int int decl Map byte int Byte decl Set int int public public decl_stmt java.util.Set < = new <> decl_stmt int = for = < ++ call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() byte decl_stmt java.lang.Byte = call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() new call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() decl_stmt java.util.Map < = new <> decl_stmt NormMap = new decl_stmt int = for = < ++ decl_stmt byte = call NormMap.add() call NormMap.add() call NormMap.add() call NormMap.add() call NormMap.add() if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() + else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt byte = decl_stmt int = decl_stmt int = call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.optimizeOrdinals() call NormMap.optimizeOrdinals() call NormMap.optimizeOrdinals() call NormMap.optimizeOrdinals() call NormMap.optimizeOrdinals() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() for < : call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() call decl Map.entrySet() decl_stmt byte = decl_stmt int = decl_stmt int = call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() call NormMap.ord() decl_stmt int = for = < ++ >= =