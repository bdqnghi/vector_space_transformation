org.apache.lucene.util.automaton java.util.ArrayList import java.util.Arrays import java.util.Collections import java.util.HashSet import java.util.List import java.util.Set import org.apache.lucene.util.BytesRef import org.apache.lucene.util.BytesRefBuilder import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import class org.apache.lucene.util.automaton.TestCompiledAutomaton super super extends Automaton decl List private private decl_stmt java.util.List final final final < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new decl_stmt org.apache.lucene.util.automaton.Automaton final final = return new BytesRef BytesRef private private decl_stmt org.apache.lucene.util.BytesRef final final = new decl_stmt org.apache.lucene.util.BytesRef final final = new if == else + call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() call org.apache.lucene.util.BytesRef.utf8ToString() + + + + + new String String CompiledAutomaton decl BytesRef int private private throws decl_stmt org.apache.lucene.util.automaton.CompiledAutomaton final final = decl_stmt org.apache.lucene.util.BytesRef final final final = new for = < ++ = new if for : + for = < * ++ decl_stmt java.lang.String final final = == : if + + decl_stmt int = new decl_stmt java.lang.String final final if >= = else = - + if == = else = - if + int decl Set public public throws decl_stmt int final final = decl_stmt java.util.Set final final final < = new <> while call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() != call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() * call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() call decl Set.toArray() new call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() private private return CompiledAutomaton public public throws decl_stmt org.apache.lucene.util.automaton.CompiledAutomaton = Automaton int CompiledAutomaton public public throws decl_stmt org.apache.lucene.util.automaton.Automaton = new decl_stmt int = call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() decl_stmt org.apache.lucene.util.automaton.CompiledAutomaton = new Automaton int CompiledAutomaton public public throws decl_stmt org.apache.lucene.util.automaton.Automaton = new decl_stmt int = call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.createState() call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.setAccept(int,boolean) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.addTransition(int,int,int,int) call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() call org.apache.lucene.util.automaton.Automaton.finishState() decl_stmt org.apache.lucene.util.automaton.CompiledAutomaton = new Automaton CompiledAutomaton public public throws decl_stmt org.apache.lucene.util.automaton.Automaton = decl_stmt org.apache.lucene.util.automaton.CompiledAutomaton = new Automaton CompiledAutomaton public public throws decl_stmt org.apache.lucene.util.automaton.Automaton = decl_stmt org.apache.lucene.util.automaton.CompiledAutomaton = new