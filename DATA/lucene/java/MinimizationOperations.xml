org.apache.lucene.util.automaton java.util.ArrayList import java.util.BitSet import java.util.HashSet import java.util.LinkedList import class org.apache.lucene.util.automaton.MinimizationOperations decl StateListNode decl HashSet int int boolean int IntPair int int decl LinkedList decl int int int int int BitSet decl StateList decl HashSet Transition StateListNode Automaton Transition decl int decl int BitSet decl int public static public static if == || == && == return new = if == decl_stmt org.apache.lucene.util.automaton.Transition = new if == && == && == return = decl_stmt int final final final = decl_stmt int final final = = if == || == && == return new = if == decl_stmt org.apache.lucene.util.automaton.Transition = new if == && == && == return = decl_stmt int final final final = decl_stmt int final final = = if == || == && == return new = if == decl_stmt org.apache.lucene.util.automaton.Transition = new if == && == && == return = decl_stmt int final final final = decl_stmt int final final = = if == || == && == return new = if == decl_stmt org.apache.lucene.util.automaton.Transition = new if == && == && == return = decl_stmt int final final final = decl_stmt int final final = = if == || == && == return new = if == decl_stmt org.apache.lucene.util.automaton.Transition = new if == && == && == return = decl_stmt int final final final = decl_stmt int final final = = if == || == && == return new = if == decl_stmt org.apache.lucene.util.automaton.Transition = new if == && == && == return = decl_stmt int final final final = decl_stmt int final final = = if == || == && == return new = if == decl_stmt org.apache.lucene.util.automaton.Transition = new if == && == && == return = decl_stmt int final final final = decl_stmt int final final = = if == || == && == return new = if == decl_stmt org.apache.lucene.util.automaton.Transition = new if == && == && == return = decl_stmt int final final final = decl_stmt int final final = = decl_stmt int final final final = new decl_stmt StateList final final final = new decl_stmt StateListNode final final final = new decl_stmt java.util.LinkedList final final final < = new <> decl_stmt org.apache.lucene.util.BitSet final final = new * decl_stmt org.apache.lucene.util.BitSet final final = new = new = new for = < ++ = new <> = new <> for = < ++ = new for = < ++ decl_stmt int final final = : = for = < ++ if == = new <> for = <= ++ for = < ++ for : if != = for = < ++ decl_stmt int final final = <= : call int.add() call int.add() call int.add() call int.add() call int.add() new call int.set() call int.set() call int.set() call int.set() call int.set() * + decl_stmt int = while ! call int.isEmpty() call int.isEmpty() call int.isEmpty() call int.isEmpty() call int.isEmpty() decl_stmt IntPair final final = call int.removeFirst() call int.removeFirst() call int.removeFirst() call int.removeFirst() call int.removeFirst() decl_stmt int final final = decl_stmt int final final = call int.clear() call int.clear() call int.clear() call int.clear() call int.clear() * + for = != = decl_stmt java.util.ArrayList final final final < = if != for : if ! call IntPair.get() call IntPair.get() call IntPair.get() call IntPair.get() call IntPair.get() call IntPair.set() call IntPair.set() call IntPair.set() call IntPair.set() call IntPair.set() decl_stmt int final final = if ! call int.get() call int.get() call int.get() call int.get() call int.get() call int.set() call int.set() call int.set() call int.set() call int.set() call int.set() call int.set() call int.set() call int.set() call int.set() for = call int.nextSetBit() call int.nextSetBit() call int.nextSetBit() call int.nextSetBit() call int.nextSetBit() >= = call int.nextSetBit() call int.nextSetBit() call int.nextSetBit() call int.nextSetBit() call int.nextSetBit() + decl_stmt java.util.ArrayList final final final < = if call decl int.size() call decl int.size() call decl int.size() call decl int.size() call decl int.size() < decl_stmt java.util.HashSet final final final < = decl_stmt java.util.HashSet final final final < = for : call decl int.remove() call decl int.remove() call decl int.remove() call decl int.remove() call decl int.remove() call boolean.add() call boolean.add() call boolean.add() call boolean.add() call boolean.add() = for = < ++ decl_stmt StateListNode final final = if != && == call int.remove() call int.remove() call int.remove() call int.remove() call int.remove() = for = < ++ decl_stmt int final final = = = * if ! call int.get() call int.get() call int.get() call int.get() call int.get() + && < && <= call int.set() call int.set() call int.set() call int.set() call int.set() + call int.add() call int.add() call int.add() call int.add() call int.add() new else call int.set() call int.set() call int.set() call int.set() call int.set() + call int.add() call int.add() call int.add() call int.add() call int.add() new ++ call int.clear() call int.clear() call int.clear() call int.clear() call int.clear() for : call IntPair.clear() call IntPair.clear() call IntPair.clear() call IntPair.clear() call IntPair.clear() call decl int.clear() call decl int.clear() call decl int.clear() call decl int.clear() call decl int.clear() call int.clear() call int.clear() call int.clear() call int.clear() call int.clear() decl_stmt org.apache.lucene.util.automaton.Automaton = new decl_stmt org.apache.lucene.util.automaton.Transition = new decl_stmt int = new decl_stmt int = new for = < ++ decl_stmt boolean = for : if == = break decl_stmt int if = else = for : = = for = < ++ decl_stmt int = for = < ++ return return new -- if == = else = if == = else =