org.apache.lucene.uninverting java.util.ArrayList import java.util.Collection import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexReaderContext import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.uninverting.FieldCache.CacheEntry import org.apache.lucene.util.MapOfSets import class org.apache.lucene.uninverting.FieldCacheSanityChecker public static public static return FieldCacheSanityChecker public static public static decl_stmt org.apache.lucene.uninverting.FieldCacheSanityChecker = new return call org.apache.lucene.uninverting.FieldCacheSanityChecker.check(CacheEntry) call org.apache.lucene.uninverting.FieldCacheSanityChecker.check(CacheEntry) call org.apache.lucene.uninverting.FieldCacheSanityChecker.check(CacheEntry) call org.apache.lucene.uninverting.FieldCacheSanityChecker.check(CacheEntry) call org.apache.lucene.uninverting.FieldCacheSanityChecker.check(CacheEntry) Object decl Set decl MapOfSets CacheEntry ReaderField Integer decl MapOfSets decl List public public if == || == return new decl_stmt org.apache.lucene.util.MapOfSets final final final < = new <> new < < decl_stmt org.apache.lucene.util.MapOfSets final final final < = new <> new < < decl_stmt java.util.Set final final final < = new <> for = < ++ decl_stmt sun.misc.CacheEntry final final = decl_stmt java.lang.Object final final = call CacheEntry.getValue() call CacheEntry.getValue() call CacheEntry.getValue() call CacheEntry.getValue() call CacheEntry.getValue() if instanceof continue if instanceof continue decl_stmt ReaderField final final = new call CacheEntry.getReaderKey() call CacheEntry.getReaderKey() call CacheEntry.getReaderKey() call CacheEntry.getReaderKey() call CacheEntry.getReaderKey() call CacheEntry.getFieldName() call CacheEntry.getFieldName() call CacheEntry.getFieldName() call CacheEntry.getFieldName() call CacheEntry.getFieldName() decl_stmt java.lang.Integer final final = call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.put() if < call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.put() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt java.util.List final final final < = new <> call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() * call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl List decl Map decl Map decl CacheEntry decl List private < private < < < < decl_stmt java.util.List final final final < = new <> * if ! decl_stmt java.util.Map final final final < < = decl_stmt java.util.Map final final final < < = for final final : decl_stmt java.util.List final final final < = new <> * for final final : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for final final : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt sun.misc.CacheEntry = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new + return decl MapOfSets decl Set decl List decl CacheEntry decl Map decl Map decl List decl Set decl Set ReaderField decl Map private < private < < < decl_stmt java.util.List final final final < = new <> decl_stmt java.util.Map < < = new <> decl_stmt org.apache.lucene.util.MapOfSets < = new <> decl_stmt java.util.Map < < = decl_stmt java.util.Map < < = decl_stmt java.util.Set < = new <> decl_stmt java.util.Set < = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() for final final : if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() continue decl_stmt java.util.List < = for : decl_stmt ReaderField = new if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.putAll() call decl MapOfSets.putAll() call decl MapOfSets.putAll() call decl MapOfSets.putAll() call decl MapOfSets.putAll() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() else if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.put() call decl MapOfSets.put() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() for final final : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.util.List < = new <> call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() * for final final : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() for final final : for final final : call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt sun.misc.CacheEntry = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new + return decl List decl List Object private < private < decl_stmt java.util.List < = new <> call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt java.lang.Object final final = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if instanceof try decl_stmt java.util.List final final final < = if != for final final : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() catch return call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() public public return * ReaderField public public if ! instanceof return decl_stmt ReaderField = return == && public public return + + public public return public public return public public return String StringBuilder decl CacheEntry public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt sun.misc.CacheEntry = for = < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public return