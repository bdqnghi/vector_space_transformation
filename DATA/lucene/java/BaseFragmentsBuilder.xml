org.apache.lucene.search.vectorhighlight java.io.IOException import java.nio.charset.StandardCharsets import java.util.ArrayList import java.util.Collections import java.util.Comparator import java.util.HashMap import java.util.Iterator import java.util.List import java.util.Map import org.apache.lucene.document.Field import org.apache.lucene.document.FieldType import org.apache.lucene.document.TextField import org.apache.lucene.index.FieldInfo import org.apache.lucene.index.IndexReader import org.apache.lucene.index.StoredFieldVisitor import org.apache.lucene.search.highlight.DefaultEncoder import org.apache.lucene.search.highlight.Encoder import org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.SubInfo import org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo import org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.Toffs import class org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder super super implements decl String decl String Encoder decl String char BoundaryScanner boolean static static if instanceof return else if instanceof return throw new public public throws return public public throws return decl String public public throws decl_stmt java.lang.String = if == || == return return StringBuilder int WeightedFragInfo decl Field decl int decl List decl List public public throws if < throw new + + decl_stmt java.util.List < = decl_stmt org.apache.solr.handler.dataimport.config.Field = if == return if && > = = decl_stmt int = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() : call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.util.List < = new <> decl_stmt java.lang.StringBuilder = new decl_stmt int = for = < ++ decl_stmt WeightedFragInfo = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl List FieldType String protected protected final final throws decl_stmt java.util.List final final final < = new <> new public public decl_stmt java.lang.String = new decl_stmt org.apache.solr.schema.FieldType = new call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new public public return : return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() FieldType String public public decl_stmt java.lang.String = new decl_stmt org.apache.solr.schema.FieldType = new call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) call org.apache.solr.schema.FieldType.setStoreTermVectors(boolean) new public public return : StringBuilder String int decl int int protected protected decl_stmt java.lang.StringBuilder = new decl_stmt int final final = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = for : for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) - call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) - - = - call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() int int protected protected while < && < ++ decl_stmt int = if - -- decl_stmt int = < : call boolean.findEndOffset() call boolean.findEndOffset() call boolean.findEndOffset() call boolean.findEndOffset() call boolean.findEndOffset() = call boolean.findStartOffset() call boolean.findStartOffset() call boolean.findStartOffset() call boolean.findStartOffset() call boolean.findStartOffset() return int protected protected while < && < ++ decl_stmt int = < : return decl List Toffs int Toffs int boolean boolean decl Iterator float decl List decl Iterator SubInfo int int decl Map WeightedFragInfo decl List protected < protected < < decl_stmt java.util.Map < < = new <> for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < for : decl_stmt int decl_stmt int = for : if ++ continue = += + if >= && >= && <= && <= call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() continue continue if continue continue decl_stmt Toffs = if >= || call Toffs.getStartOffset() call Toffs.getStartOffset() call Toffs.getStartOffset() call Toffs.getStartOffset() call Toffs.getStartOffset() >= continue decl_stmt int = if > && < = decl_stmt int = if > && < = decl_stmt java.util.List < = new <> decl_stmt java.util.Iterator < = decl_stmt float = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt SubInfo = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.util.List < = new <> decl_stmt java.util.Iterator < = call SubInfo.getTermsOffsets() call SubInfo.getTermsOffsets() call SubInfo.getTermsOffsets() call SubInfo.getTermsOffsets() call SubInfo.getTermsOffsets() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt Toffs = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if call Toffs.getStartOffset() call Toffs.getStartOffset() call Toffs.getStartOffset() call Toffs.getStartOffset() call Toffs.getStartOffset() >= break decl_stmt boolean = call Toffs.getStartOffset() call Toffs.getStartOffset() call Toffs.getStartOffset() call Toffs.getStartOffset() call Toffs.getStartOffset() >= decl_stmt boolean = call Toffs.getEndOffset() call Toffs.getEndOffset() call Toffs.getEndOffset() call Toffs.getEndOffset() call Toffs.getEndOffset() < if && call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() else if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call Toffs.getStartOffset() call Toffs.getStartOffset() call Toffs.getStartOffset() call Toffs.getStartOffset() call Toffs.getStartOffset() - else if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call Toffs.getEndOffset() call Toffs.getEndOffset() call Toffs.getEndOffset() call Toffs.getEndOffset() call Toffs.getEndOffset() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new - if ! call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new call SubInfo.getText() call SubInfo.getText() call SubInfo.getText() call SubInfo.getText() call SubInfo.getText() call SubInfo.getSeqnum() call SubInfo.getSeqnum() call SubInfo.getSeqnum() call SubInfo.getSeqnum() call SubInfo.getSeqnum() call SubInfo.getBoost() call SubInfo.getBoost() call SubInfo.getBoost() call SubInfo.getBoost() call SubInfo.getBoost() += call SubInfo.getBoost() call SubInfo.getBoost() call SubInfo.getBoost() call SubInfo.getBoost() call SubInfo.getBoost() if call SubInfo.getTermsOffsets() call SubInfo.getTermsOffsets() call SubInfo.getTermsOffsets() call SubInfo.getTermsOffsets() call SubInfo.getTermsOffsets() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() call decl Iterator.remove() decl_stmt WeightedFragInfo = new call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.util.List < = new <> for < : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() new < public public return - return public public return - public public = public public return public public return public public = protected protected return protected protected return int protected protected decl_stmt int = return int protected protected decl_stmt int = return