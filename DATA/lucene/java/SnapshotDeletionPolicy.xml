org.apache.lucene.index java.util.Collection import java.util.HashMap import java.util.List import java.util.ArrayList import java.util.Map import java.io.IOException import org.apache.lucene.store.Directory import class org.apache.lucene.index.SnapshotDeletionPolicy super super extends IndexCommit boolean decl Map decl Map IndexDeletionPolicy public synchronized public synchronized < extends extends throws call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() call IndexDeletionPolicy.onCommit() = - public synchronized public synchronized < extends extends throws = call IndexDeletionPolicy.onInit() call IndexDeletionPolicy.onInit() call IndexDeletionPolicy.onInit() call IndexDeletionPolicy.onInit() call IndexDeletionPolicy.onInit() for : if call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if ! = - long public synchronized public synchronized throws decl_stmt long = int Integer protected protected throws if ! throw new decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == throw new + + decl_stmt int = call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() assert > -- if == call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() int Integer long protected synchronized protected synchronized decl_stmt long = decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt int if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() = else = call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() + public synchronized public synchronized throws if ! throw new if == throw new return public synchronized < public synchronized < return new <> call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() int public synchronized public synchronized decl_stmt int = for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() += return public synchronized public synchronized return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl List private < private < < extends extends decl_stmt java.util.List < = new <> for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return public public return + + public public synchronized if ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() public public return public < public < throws return public public return public public return public < public < throws return public public return public public return