org.apache.lucene.search.suggest.analyzing java.io.IOException import java.io.StringReader import java.nio.file.Path import java.util.ArrayList import java.util.Collections import java.util.Comparator import java.util.HashMap import java.util.HashSet import java.util.List import java.util.Map import java.util.Set import org.apache.lucene.analysis.Analyzer import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.analysis.MockTokenizer import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.core.StopFilter import org.apache.lucene.analysis.tokenattributes.CharTermAttribute import org.apache.lucene.analysis.tokenattributes.OffsetAttribute import org.apache.lucene.analysis.util.CharArraySet import org.apache.lucene.search.BooleanClause import org.apache.lucene.search.BooleanQuery import org.apache.lucene.search.suggest.Input import org.apache.lucene.search.suggest.InputArrayIterator import org.apache.lucene.search.suggest.Lookup.LookupResult import org.apache.lucene.store.AlreadyClosedException import org.apache.lucene.store.Directory import org.apache.lucene.util.BytesRef import org.apache.lucene.util.IOUtils import org.apache.lucene.util.LuceneTestCase import org.apache.lucene.util.TestUtil import org.junit.Test import class org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggesterTest super super extends Analyzer Input decl List AnalyzingInfixSuggester public public throws decl_stmt org.apache.lucene.search.suggest.Input = new new new new new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() decl List AnalyzingInfixSuggester CharSequence decl List private private throws decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new decl_stmt java.lang.CharSequence = decl_stmt java.util.List < = decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() Path Analyzer Input decl List AnalyzingInfixSuggester public public throws decl_stmt org.apache.lucene.search.suggest.Input = new new new new new decl_stmt java.nio.file.Path = decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() = new decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.getCount() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() public public return + + + + Analyzer int int int String decl List Input CharTermAttribute AnalyzingInfixSuggester decl List OffsetAttribute public public throws decl_stmt org.apache.lucene.search.suggest.Input = new new new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new protected protected < throws try = new decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute = decl_stmt org.apache.lucene.analysis.tokenattributes.OffsetAttribute = decl_stmt java.util.List < = new <> decl_stmt int = while decl_stmt java.lang.String = call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() decl_stmt int = call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() decl_stmt int = call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() if < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new = else if > continue if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new = else if != && call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new + if < call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new + + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() = decl_stmt int = call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() if < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() < call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() int int String CharTermAttribute int decl List OffsetAttribute protected protected < throws try = new decl_stmt org.apache.lucene.analysis.tokenattributes.CharTermAttribute = decl_stmt org.apache.lucene.analysis.tokenattributes.OffsetAttribute = decl_stmt java.util.List < = new <> decl_stmt int = while decl_stmt java.lang.String = call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() call CharTermAttribute.toString() decl_stmt int = call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() call OffsetAttribute.startOffset() decl_stmt int = call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() if < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new = else if > continue if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new = else if != && call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new + if < call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new + + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() = decl_stmt int = call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() call org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset() if < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return StringBuilder public public < decl_stmt java.lang.StringBuilder = new for : if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() Analyzer decl List Input int AnalyzingInfixSuggester Path boolean public public throws decl_stmt org.apache.lucene.search.suggest.Input = new new new new new decl_stmt java.nio.file.Path = decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt int = decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new for = < ++ for = < ++ decl_stmt boolean = == decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Analyzer Input decl List AnalyzingInfixSuggester public public throws decl_stmt org.apache.lucene.search.suggest.Input = new new new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Analyzer Input decl List AnalyzingInfixSuggester public public throws decl_stmt org.apache.lucene.search.suggest.Input = new new new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() = new protected protected call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() protected protected Analyzer Input AnalyzingInfixSuggester public public throws decl_stmt org.apache.lucene.search.suggest.Input = new new new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() decl List Input Analyzer MockTokenizer CharArraySet AnalyzingInfixSuggester Analyzer public public throws decl_stmt org.apache.lucene.analysis.util.CharArraySet final final = decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.MockTokenizer = new return new new decl_stmt org.apache.lucene.analysis.Analyzer = new protected protected decl_stmt org.apache.lucene.analysis.MockTokenizer = new return new new decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new decl_stmt org.apache.lucene.search.suggest.Input = new new new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() MockTokenizer protected protected decl_stmt org.apache.lucene.analysis.MockTokenizer = new return new new MockTokenizer protected protected decl_stmt org.apache.lucene.analysis.MockTokenizer = new return new new Analyzer decl List AnalyzingInfixSuggester public public throws decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) new new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) new new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Analyzer decl List AnalyzingInfixSuggester public public throws decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) new new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() int StringBuilder private static private static decl_stmt int = decl_stmt java.lang.StringBuilder = new for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public throws = String boolean boolean int public public while == decl_stmt java.lang.String = decl_stmt int = decl_stmt boolean = decl_stmt boolean = try catch throw new long String int boolean decl String String boolean int decl Set decl List Input Input decl List int decl String Update decl Set boolean BytesRef Path Analyzer decl List int int Input boolean AnalyzingInfixSuggester decl List Input LookupThread public public throws decl_stmt java.nio.file.Path final final = decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt int = if + decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new new decl_stmt LookupThread = new call LookupThread.start() call LookupThread.start() call LookupThread.start() call LookupThread.start() call LookupThread.start() decl_stmt int = decl_stmt int = decl_stmt java.util.Set < = new <> decl_stmt java.util.Set < = new <> decl_stmt java.util.List < = new <> decl_stmt java.util.List < = new <> for = < ++ decl_stmt java.lang.String while = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() == call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() break decl_stmt long while = * if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() == call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() break if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > && == decl_stmt Update = new = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = decl_stmt org.apache.lucene.search.suggest.Input = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if + + + call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() + + call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.update(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.update(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.update(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.update(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.update(BytesRef,Set,long,BytesRef) else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new new if + + + + + decl_stmt org.apache.lucene.util.BytesRef = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) if == if call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : decl_stmt org.apache.lucene.search.suggest.Input = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.search.suggest.Input = new call decl List.set() call decl List.set() call decl List.set() call decl List.set() call decl List.set() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() if == if call LookupThread.finish() call LookupThread.finish() call LookupThread.finish() call LookupThread.finish() call LookupThread.finish() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() = new = new call LookupThread.start() call LookupThread.start() call LookupThread.start() call LookupThread.start() call LookupThread.start() = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for : decl_stmt org.apache.lucene.search.suggest.Input = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.apache.lucene.search.suggest.Input = new call decl List.set() call decl List.set() call decl List.set() call decl List.set() call decl List.set() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() if > decl_stmt java.lang.String = decl_stmt boolean = != if == += decl_stmt java.lang.String = call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) call java.lang.String.split(String) decl_stmt boolean = == decl_stmt boolean = if + + + + + decl_stmt java.util.List < = new <> for = < ++ decl_stmt org.apache.lucene.search.suggest.Input = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.lang.String = call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() decl_stmt boolean = for = < ++ if < - || == for = < ++ if = break else for = < ++ if = break if if == break = else if break if if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if > return - else if < return else return if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() == decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if for = < ++ decl_stmt org.apache.lucene.search.suggest.Input = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() call Input.term() + + for : + call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ if call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() else if call LookupThread.finish() call LookupThread.finish() call LookupThread.finish() call LookupThread.finish() call LookupThread.finish() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() String StringBuilder String boolean private static private static decl_stmt java.lang.StringBuilder = new for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.lang.String = decl_stmt boolean = for = < ++ decl_stmt java.lang.String = if < - || == if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = break else if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() = break if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() Analyzer Input decl List AnalyzingInfixSuggester public public throws decl_stmt org.apache.lucene.search.suggest.Input = new new new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.add(BytesRef,Set,long,BytesRef) new new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.update(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.update(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.update(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.update(BytesRef,Set,long,BytesRef) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.update(BytesRef,Set,long,BytesRef) new new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Analyzer AnalyzingInfixSuggester decl String decl List decl Thread AnalyzingInfixSuggester Path public public throws decl_stmt java.lang.String = new decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt java.nio.file.Path = decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new decl_stmt java.lang.Thread = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() for = < ++ = new new for = < ++ for = < ++ call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.refresh() decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.commit() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.commit() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.commit() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.commit() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.commit() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() public public try new catch decl HashSet private < private < decl_stmt java.util.HashSet < = new <> for : call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() new return decl HashSet private < private < decl_stmt java.util.HashSet < = new <> for : call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() new return Analyzer decl Map decl List Input LookupResult AnalyzingInfixSuggester Path decl BooleanQuery public public throws decl_stmt org.apache.lucene.search.suggest.Input = new new new new new decl_stmt java.nio.file.Path = for = < ++ decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester decl_stmt org.apache.lucene.analysis.Analyzer = new if == = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new else = new decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt LookupResult = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new decl_stmt java.util.Map < = new <> call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.clear() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new decl_stmt org.apache.lucene.util.fst.Builder = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.addContextToQuery(BooleanQuery,Builder,BytesRef,BooleanClause,Occur) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.addContextToQuery(BooleanQuery,Builder,BytesRef,BooleanClause,Occur) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.addContextToQuery(BooleanQuery,Builder,BytesRef,BooleanClause,Occur) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.addContextToQuery(BooleanQuery,Builder,BytesRef,BooleanClause,Occur) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.addContextToQuery(BooleanQuery,Builder,BytesRef,BooleanClause,Occur) new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.addContextToQuery(BooleanQuery,Builder,BytesRef,BooleanClause,Occur) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.addContextToQuery(BooleanQuery,Builder,BytesRef,BooleanClause,Occur) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.addContextToQuery(BooleanQuery,Builder,BytesRef,BooleanClause,Occur) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.addContextToQuery(BooleanQuery,Builder,BytesRef,BooleanClause,Occur) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.addContextToQuery(BooleanQuery,Builder,BytesRef,BooleanClause,Occur) new = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() Analyzer AnalyzingInfixSuggester Directory public public throws decl_stmt org.apache.lucene.analysis.Analyzer = new decl_stmt org.apache.lucene.store.Directory = decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester = new call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() StringBuilder private private throws decl_stmt java.lang.StringBuilder = new return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() Analyzer decl byte decl byte decl byte decl List Input LookupResult AnalyzingInfixSuggester Path public public throws decl_stmt byte = new decl_stmt byte = new decl_stmt byte = new = byte decl_stmt org.apache.lucene.search.suggest.Input = new new new new new decl_stmt java.nio.file.Path = for = < ++ decl_stmt org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester decl_stmt org.apache.lucene.analysis.Analyzer = new if == = new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.build(InputIterator) new else = new decl_stmt java.util.List < = call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.lookup(CharSequence,Map,int,boolean,boolean) call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt LookupResult = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() call LookupResult.contexts() new call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close() call org.apache.lucene.analysis.Analyzer.close()