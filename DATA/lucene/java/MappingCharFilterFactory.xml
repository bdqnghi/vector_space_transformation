org.apache.lucene.analysis.charfilter java.io.IOException import java.io.Reader import java.util.ArrayList import java.util.List import java.util.Map import java.util.regex.Matcher import java.util.regex.Pattern import org.apache.lucene.analysis.util.AbstractAnalysisFactory import org.apache.lucene.analysis.util.CharFilterFactory import org.apache.lucene.analysis.util.MultiTermAwareComponent import org.apache.lucene.analysis.util.ResourceLoader import org.apache.lucene.analysis.util.ResourceLoaderAware import class org.apache.lucene.analysis.charfilter.MappingCharFilterFactory super super extends super implements Pattern decl char String NormalizeCharMap decl List decl NormalizeCharMap decl List decl List public public throws if != decl_stmt java.util.List < = decl_stmt java.util.List < = = new <> for : decl_stmt java.util.List < = call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() decl_stmt org.apache.lucene.util.fst.Builder final final final final final = new = call decl NormalizeCharMap.build() call decl NormalizeCharMap.build() call decl NormalizeCharMap.build() call decl NormalizeCharMap.build() call decl NormalizeCharMap.build() if == = public public return == : new Matcher protected protected < for : decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) if ! call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) throw new + + + call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) call java.util.regex.Matcher.group(int) char int int int protected protected decl_stmt int = decl_stmt int = decl_stmt int = while < decl_stmt char = ++ if == if >= throw new + + = ++ switch case = break case = break case = break case = break case = break case = break case = break case if + >= throw new + + = char + += break ++ = return new public public return