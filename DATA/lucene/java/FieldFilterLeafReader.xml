org.apache.lucene.index java.io.IOException import java.util.ArrayList import java.util.Iterator import java.util.Set import org.apache.lucene.util.Bits import org.apache.lucene.util.FilterIterator import class org.apache.lucene.index.FieldFilterLeafReader super super extends boolean decl Set FieldInfos return ^ call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() public public return Fields public public throws decl_stmt Fields = if == return = new return call Fields.iterator() call Fields.iterator() call Fields.iterator() call Fields.iterator() call Fields.iterator() : public public final final final final throws new public public throws public public throws public public throws public public throws public public throws public public throws public public throws return : public public throws public public throws public public throws public public throws public public throws public public throws public public throws return : Fields public public throws decl_stmt Fields final final = return == : new public public throws return : public public throws return : public public throws return : public public throws return : public public throws return : public public throws return : public public throws return : StringBuilder public public decl_stmt java.lang.StringBuilder final final = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) public public return - public < public < return new < protected protected return protected protected return public public throws return :