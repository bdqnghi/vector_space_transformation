org.apache.lucene.expressions.js java.io.IOException import java.io.Reader import java.lang.invoke.MethodHandles import java.lang.invoke.MethodType import java.lang.reflect.Constructor import java.lang.reflect.Method import java.lang.reflect.Modifier import java.nio.charset.StandardCharsets import java.text.ParseException import java.util.ArrayDeque import java.util.Arrays import java.util.Collections import java.util.Deque import java.util.HashMap import java.util.LinkedHashMap import java.util.Map import java.util.Properties import org.antlr.v4.runtime.ANTLRInputStream import org.antlr.v4.runtime.CommonTokenStream import org.antlr.v4.runtime.tree.ParseTree import org.apache.lucene.expressions.Expression import org.apache.lucene.expressions.js.JavascriptParser.ExpressionContext import org.apache.lucene.queries.function.FunctionValues import org.apache.lucene.util.IOUtils import org.objectweb.asm.ClassWriter import org.objectweb.asm.Label import org.objectweb.asm.Opcodes import org.objectweb.asm.Type import org.objectweb.asm.commons.GeneratorAdapter import class org.apache.lucene.expressions.js.JavascriptCompiler decl objectweb decl commons decl org String decl asm Type int decl Method decl org String Type decl objectweb public < extends extends public < extends extends return private static private static < < return new public static public static throws return new public static public static < throws if == throw new for : call decl org.values() call decl org.values() call decl org.values() call decl org.values() call decl org.values() return new double FunctionValues private static private static decl_stmt org.apache.lucene.queries.function.FunctionValues = decl_stmt double = call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) call org.apache.lucene.queries.function.FunctionValues.doubleVal(int) decl Map decl Constructor ClassWriter decl Class private private throws decl_stmt java.util.Map final final final < = new <> decl_stmt com.sun.java.util.jar.pack.ClassWriter final final = new | try decl_stmt java.lang.Class final final final < extends extends = new call ClassWriter.toByteArray() call ClassWriter.toByteArray() call ClassWriter.toByteArray() call ClassWriter.toByteArray() call ClassWriter.toByteArray() decl_stmt java.lang.reflect.Constructor final final final < extends extends = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() return call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() new call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() catch throw new + + JavascriptErrorHandlingLexer JavascriptParser ANTLRInputStream private private throws try decl_stmt ANTLRInputStream final final = new decl_stmt org.apache.lucene.expressions.js.JavascriptErrorHandlingLexer final final = new call JavascriptErrorHandlingLexer.removeErrorListeners() call JavascriptErrorHandlingLexer.removeErrorListeners() call JavascriptErrorHandlingLexer.removeErrorListeners() call JavascriptErrorHandlingLexer.removeErrorListeners() call JavascriptErrorHandlingLexer.removeErrorListeners() decl_stmt org.apache.lucene.expressions.js.JavascriptParser final final = new new call JavascriptParser.removeErrorListeners() call JavascriptParser.removeErrorListeners() call JavascriptParser.removeErrorListeners() call JavascriptParser.removeErrorListeners() call JavascriptParser.removeErrorListeners() call JavascriptParser.setErrorHandler() call JavascriptParser.setErrorHandler() call JavascriptParser.setErrorHandler() call JavascriptParser.setErrorHandler() call JavascriptParser.setErrorHandler() new return call org.apache.lucene.expressions.js.JavascriptParser.compile() call org.apache.lucene.expressions.js.JavascriptParser.compile() call org.apache.lucene.expressions.js.JavascriptParser.compile() call org.apache.lucene.expressions.js.JavascriptParser.compile() call org.apache.lucene.expressions.js.JavascriptParser.compile() catch if instanceof throw throw boolean Label String int String Label Label Method Label Label int Label int int GeneratorAdapter Label decl Deque Label Label GeneratorAdapter Label private private final final final final final final final < throws | | call Type.getInternalName() call Type.getInternalName() call Type.getInternalName() call Type.getInternalName() call Type.getInternalName() decl_stmt java.lang.String final final = call decl Method.length() call decl Method.length() call decl Method.length() call decl Method.length() call decl Method.length() <= : call decl Method.substring() call decl Method.substring() call decl Method.substring() call decl Method.substring() call decl Method.substring() - + decl_stmt GeneratorAdapter final final = new call GeneratorAdapter.loadThis() call GeneratorAdapter.loadThis() call GeneratorAdapter.loadThis() call GeneratorAdapter.loadThis() call GeneratorAdapter.loadThis() call GeneratorAdapter.loadArgs() call GeneratorAdapter.loadArgs() call GeneratorAdapter.loadArgs() call GeneratorAdapter.loadArgs() call GeneratorAdapter.loadArgs() call GeneratorAdapter.invokeConstructor() call GeneratorAdapter.invokeConstructor() call GeneratorAdapter.invokeConstructor() call GeneratorAdapter.invokeConstructor() call GeneratorAdapter.invokeConstructor() call GeneratorAdapter.returnValue() call GeneratorAdapter.returnValue() call GeneratorAdapter.returnValue() call GeneratorAdapter.returnValue() call GeneratorAdapter.returnValue() call GeneratorAdapter.endMethod() call GeneratorAdapter.endMethod() call GeneratorAdapter.endMethod() call GeneratorAdapter.endMethod() call GeneratorAdapter.endMethod() decl_stmt GeneratorAdapter final final = new new < decl_stmt java.util.Deque private final final final < = new <> public public call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() return public public return public public if != else if != else if != call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() else throw new + return public public decl_stmt java.lang.String = decl_stmt int = decl_stmt boolean = != && != decl_stmt com.sun.jdi.Method = call decl org.get() call decl org.get() call decl org.get() call decl org.get() call decl org.get() : if != decl_stmt int = call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() if != new + + + + + + + + call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() for = < ++ call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call GeneratorAdapter.invokeStatic() call GeneratorAdapter.invokeStatic() call GeneratorAdapter.invokeStatic() call GeneratorAdapter.invokeStatic() call GeneratorAdapter.invokeStatic() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() else if ! || == && call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) decl_stmt int = if = else = call GeneratorAdapter.loadArg() call GeneratorAdapter.loadArg() call GeneratorAdapter.loadArg() call GeneratorAdapter.loadArg() call GeneratorAdapter.loadArg() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.arrayLoad() call GeneratorAdapter.arrayLoad() call GeneratorAdapter.arrayLoad() call GeneratorAdapter.arrayLoad() call GeneratorAdapter.arrayLoad() call GeneratorAdapter.loadArg() call GeneratorAdapter.loadArg() call GeneratorAdapter.loadArg() call GeneratorAdapter.loadArg() call GeneratorAdapter.loadArg() call GeneratorAdapter.invokeVirtual() call GeneratorAdapter.invokeVirtual() call GeneratorAdapter.invokeVirtual() call GeneratorAdapter.invokeVirtual() call GeneratorAdapter.invokeVirtual() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() else new + + + + return public public if != decl_stmt sun.reflect.Label = new decl_stmt sun.reflect.Label = new call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() else if != call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() - call GeneratorAdapter.visitInsn() call GeneratorAdapter.visitInsn() call GeneratorAdapter.visitInsn() call GeneratorAdapter.visitInsn() call GeneratorAdapter.visitInsn() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() else if != else if != call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call GeneratorAdapter.visitInsn() call GeneratorAdapter.visitInsn() call GeneratorAdapter.visitInsn() call GeneratorAdapter.visitInsn() call GeneratorAdapter.visitInsn() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() else throw new + return public public decl_stmt int if != = else if != = else if != = else throw new + return public public decl_stmt int if != = else if != = else throw new + return public public decl_stmt int if != = else if != = else if != = else throw new + return public public decl_stmt int if != = else if != = else if != = else if != = else throw new + return public public decl_stmt int if != = else if != = else throw new + return public public return public public return public public return public public decl_stmt sun.reflect.Label = new decl_stmt sun.reflect.Label = new call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() return public public decl_stmt sun.reflect.Label = new decl_stmt sun.reflect.Label = new call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() return public public decl_stmt sun.reflect.Label = new decl_stmt sun.reflect.Label = new call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.visitJumpInsn() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() return private private private private private private private private call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call GeneratorAdapter.visitInsn() call GeneratorAdapter.visitInsn() call GeneratorAdapter.visitInsn() call GeneratorAdapter.visitInsn() call GeneratorAdapter.visitInsn() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call GeneratorAdapter.cast() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() private private decl_stmt sun.reflect.Label = new decl_stmt sun.reflect.Label = new call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.push() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call decl Deque.pop() call GeneratorAdapter.ifCmp() call GeneratorAdapter.ifCmp() call GeneratorAdapter.ifCmp() call GeneratorAdapter.ifCmp() call GeneratorAdapter.ifCmp() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.goTo() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() call GeneratorAdapter.visitLabel() private private switch call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() case call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() break case call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() : break case call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() : break default: throw new + call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() private private switch call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() case call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() int break case call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() break case call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() call GeneratorAdapter.push() double break default: throw new + call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() call decl Deque.peek() private private > private < extends extends private < extends extends throws throw call GeneratorAdapter.returnValue() call GeneratorAdapter.returnValue() call GeneratorAdapter.returnValue() call GeneratorAdapter.returnValue() call GeneratorAdapter.returnValue() call GeneratorAdapter.endMethod() call GeneratorAdapter.endMethod() call GeneratorAdapter.endMethod() call GeneratorAdapter.endMethod() call GeneratorAdapter.endMethod() public public return public public return public public if != else if != else if != else throw new + return int boolean String int int Method public public decl_stmt java.lang.String = decl_stmt int = decl_stmt boolean = != && != decl_stmt com.sun.jdi.Method = call decl org.get() call decl org.get() call decl org.get() call decl org.get() call decl org.get() : if != decl_stmt int = call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() call com.sun.jdi.Method.getParameterTypes() if != new + + + + + + + + for = < ++ call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() call com.sun.jdi.Method.getDeclaringClass() else if ! || == && call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) call java.lang.String.contains(CharSequence) decl_stmt int = if = else = else new + + + + return Label Label public public if != decl_stmt sun.reflect.Label = new decl_stmt sun.reflect.Label = new else if != - else if != else if != else throw new + return int public public decl_stmt int if != = else if != = else if != = else throw new + return int public public decl_stmt int if != = else if != = else throw new + return int public public decl_stmt int if != = else if != = else if != = else throw new + return int public public decl_stmt int if != = else if != = else if != = else if != = else throw new + return int public public decl_stmt int if != = else if != = else throw new + return public public return public public return public public return Label Label public public decl_stmt sun.reflect.Label = new decl_stmt sun.reflect.Label = new return Label Label public public decl_stmt sun.reflect.Label = new decl_stmt sun.reflect.Label = new return Label Label public public decl_stmt sun.reflect.Label = new decl_stmt sun.reflect.Label = new return private private private private private private private private Label Label private private decl_stmt sun.reflect.Label = new decl_stmt sun.reflect.Label = new private private switch case break case : break case : break default: throw new + private private switch case int break case break case double break default: throw new + private private > private < extends extends private < extends extends throws throw char boolean int StringBuilder static static decl_stmt java.lang.StringBuilder = new decl_stmt boolean = for = < ++ decl_stmt char = if == = ++ if == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if == if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else decl_stmt int = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = else if == = = ! call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() static static ++ while != if == ++ ++ return MethodType private static private static decl_stmt sun.tools.java.MethodType final final try = catch throw new + if ! throw new + for = = call MethodType.parameterCount() call MethodType.parameterCount() call MethodType.parameterCount() call MethodType.parameterCount() call MethodType.parameterCount() < ++ if call MethodType.parameterType() call MethodType.parameterType() call MethodType.parameterType() call MethodType.parameterType() call MethodType.parameterType() != throw new + if call MethodType.returnType() call MethodType.returnType() call MethodType.returnType() call MethodType.returnType() call MethodType.returnType() != throw new + boolean decl Class private static private static decl_stmt boolean = try decl_stmt java.lang.Class final final final < = = call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() call decl Class.getName() == catch = if ! throw new +