org.apache.lucene.util.automaton java.util.ArrayList import java.util.List import org.apache.lucene.util.LuceneTestCase import static static org.apache.lucene.util.automaton.Operations.DEFAULT_MAX_DETERMINIZED_STATES import class org.apache.lucene.util.automaton.TestLevenshteinAutomata super super extends public public throws public public throws public public throws public public throws new String int int private private decl_stmt int = * + decl_stmt int = int + for = < ++ decl_stmt java.lang.String = LevenshteinAutomata LevenshteinAutomata Automaton private private decl_stmt org.apache.lucene.util.automaton.LevenshteinAutomata = new decl_stmt org.apache.lucene.util.automaton.LevenshteinAutomata = new decl_stmt org.apache.lucene.util.automaton.Automaton = new + decl_stmt org.apache.lucene.util.automaton.Automaton = new + for = < ++ = call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) = call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) call org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int) if > - - - - - switch case break case break default: break Automaton private private decl_stmt org.apache.lucene.util.automaton.Automaton = = = = = = = return Automaton private private decl_stmt org.apache.lucene.util.automaton.Automaton = = = return Automaton decl List private private decl_stmt java.util.List < = new <> for = <= ++ decl_stmt org.apache.lucene.util.automaton.Automaton = = = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt org.apache.lucene.util.automaton.Automaton = = return Automaton decl List private private decl_stmt java.util.List < = new <> for = < ++ decl_stmt org.apache.lucene.util.automaton.Automaton = = + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt org.apache.lucene.util.automaton.Automaton = = return Automaton decl List private private decl_stmt java.util.List < = new <> for = < ++ decl_stmt org.apache.lucene.util.automaton.Automaton = = = + call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt org.apache.lucene.util.automaton.Automaton = = return Automaton StringBuilder decl List String private private if < return decl_stmt java.util.List < = new <> for = < - ++ decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) + decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt org.apache.lucene.util.automaton.Automaton = = return int boolean int CharacterRunAutomaton String private private decl_stmt org.apache.lucene.util.automaton.CharacterRunAutomaton = new decl_stmt int = + + decl_stmt int = int for = < ++ decl_stmt java.lang.String = decl_stmt boolean = call org.apache.lucene.util.automaton.CharacterRunAutomaton.run(String) call org.apache.lucene.util.automaton.CharacterRunAutomaton.run(String) call org.apache.lucene.util.automaton.CharacterRunAutomaton.run(String) call org.apache.lucene.util.automaton.CharacterRunAutomaton.run(String) call org.apache.lucene.util.automaton.CharacterRunAutomaton.run(String) if <= else > int boolean int CharacterRunAutomaton String private private decl_stmt org.apache.lucene.util.automaton.CharacterRunAutomaton = new decl_stmt int = + + decl_stmt int = int for = < ++ decl_stmt java.lang.String = decl_stmt boolean = call org.apache.lucene.util.automaton.CharacterRunAutomaton.run(String) call org.apache.lucene.util.automaton.CharacterRunAutomaton.run(String) call org.apache.lucene.util.automaton.CharacterRunAutomaton.run(String) call org.apache.lucene.util.automaton.CharacterRunAutomaton.run(String) call org.apache.lucene.util.automaton.CharacterRunAutomaton.run(String) if <= else > char int int int int int int decl char private private decl_stmt char decl_stmt int decl_stmt int decl_stmt int decl_stmt int = = = new + = new + decl_stmt int final final = if == || == if == return else return decl_stmt int decl_stmt int decl_stmt char decl_stmt int for = <= ++ = for = <= ++ = - = for = <= ++ = - == : = - + + - + = = = return char int int int int int int decl char private private decl_stmt char decl_stmt int decl_stmt int = = decl_stmt int final final = = new + + if == || == if == return else return decl_stmt int decl_stmt int decl_stmt char decl_stmt int for = <= ++ = for = <= ++ = for = <= ++ = - for = <= ++ = - == : = - + - + - - + if > && > && - == - && - == - = - - + return