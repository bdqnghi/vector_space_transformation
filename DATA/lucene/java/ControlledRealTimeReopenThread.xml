org.apache.lucene.search java.io.Closeable import java.io.IOException import java.util.concurrent.locks.Condition import java.util.concurrent.locks.ReentrantLock import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.TrackingIndexWriter import org.apache.lucene.util.ThreadInterruptedException import class super super extends super implements long long TrackingIndexWriter long long decl ReferenceManager boolean ReentrantLock long Condition public public public public private synchronized private synchronized = public synchronized public synchronized = call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() try call java.util.concurrent.locks.Condition.signal() call java.util.concurrent.locks.Condition.signal() call java.util.concurrent.locks.Condition.signal() call java.util.concurrent.locks.Condition.signal() call java.util.concurrent.locks.Condition.signal() finally call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() try catch throw new = public public throws - long long long public synchronized public synchronized throws decl_stmt long final final = call org.apache.lucene.index.TrackingIndexWriter.getGeneration() call org.apache.lucene.index.TrackingIndexWriter.getGeneration() call org.apache.lucene.index.TrackingIndexWriter.getGeneration() call org.apache.lucene.index.TrackingIndexWriter.getGeneration() call org.apache.lucene.index.TrackingIndexWriter.getGeneration() if > throw new + + + + if > call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() = try call java.util.concurrent.locks.Condition.signal() call java.util.concurrent.locks.Condition.signal() call java.util.concurrent.locks.Condition.signal() call java.util.concurrent.locks.Condition.signal() call java.util.concurrent.locks.Condition.signal() finally call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() decl_stmt long = / while > if < else decl_stmt long = + - / if <= return else return long long long boolean public public decl_stmt long = while ! while ! call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() call java.util.concurrent.locks.ReentrantLock.lock() try decl_stmt boolean = > decl_stmt long final final = + : decl_stmt long final final = - if > call Condition.awaitNanos() call Condition.awaitNanos() call Condition.awaitNanos() call Condition.awaitNanos() call Condition.awaitNanos() else break catch return finally call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() call java.util.concurrent.locks.ReentrantLock.unlock() if break = = call org.apache.lucene.index.TrackingIndexWriter.getAndIncrementGeneration() call org.apache.lucene.index.TrackingIndexWriter.getAndIncrementGeneration() call org.apache.lucene.index.TrackingIndexWriter.getAndIncrementGeneration() call org.apache.lucene.index.TrackingIndexWriter.getAndIncrementGeneration() call org.apache.lucene.index.TrackingIndexWriter.getAndIncrementGeneration() try call decl ReferenceManager.maybeRefreshBlocking() call decl ReferenceManager.maybeRefreshBlocking() call decl ReferenceManager.maybeRefreshBlocking() call decl ReferenceManager.maybeRefreshBlocking() call decl ReferenceManager.maybeRefreshBlocking() catch throw new public public return