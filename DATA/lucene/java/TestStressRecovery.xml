org.apache.solr.search org.apache.lucene.util.Constants import org.noggit.ObjectBuilder import org.apache.solr.request.SolrQueryRequest import org.apache.solr.update.UpdateHandler import org.apache.solr.update.UpdateLog import org.apache.solr.update.VersionInfo import org.apache.solr.util.TestHarness import org.junit.BeforeClass import org.junit.Test import java.util.ArrayList import java.util.HashMap import java.util.List import java.util.Map import java.util.Random import java.util.concurrent.ConcurrentHashMap import java.util.concurrent.Future import java.util.concurrent.Semaphore import java.util.concurrent.TimeUnit import java.util.concurrent.TimeoutException import java.util.concurrent.atomic.AtomicInteger import java.util.concurrent.atomic.AtomicLong import static static org.apache.solr.core.SolrCore.verbose import static static org.apache.solr.update.processor.DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM import class org.apache.solr.search.TestStressRecovery super super extends decl ConcurrentHashMap public static public static throws AtomicLong Random AtomicLong boolean UpdateHandler int Semaphore decl Future decl RecoveryInfo int int boolean int long long decl Map VersionInfo Object AtomicInteger long List int int int long DocInfo Long decl UpdateLog int long int decl List int SolrQueryRequest Map String int DocInfo UpdateLog decl Semaphore Thread Semaphore int int int int public public throws decl_stmt int final final = + decl_stmt int final final = + decl_stmt int final final = + decl_stmt int final final = decl_stmt int final final = + : decl_stmt int = + decl_stmt int final final = decl_stmt int final final = decl_stmt int final final = decl_stmt java.util.concurrent.atomic.AtomicLong final final = new decl_stmt int = + decl_stmt java.util.concurrent.atomic.AtomicInteger final final = new decl_stmt java.util.List < = new <> decl_stmt java.util.concurrent.atomic.AtomicLong final final = new decl_stmt org.apache.solr.update.UpdateHandler final final = decl_stmt org.apache.solr.update.UpdateLog final final = call UpdateHandler.getUpdateLog() call UpdateHandler.getUpdateLog() call UpdateHandler.getUpdateLog() call UpdateHandler.getUpdateLog() call UpdateHandler.getUpdateLog() decl_stmt org.apache.solr.update.VersionInfo final final = call org.apache.solr.update.UpdateLog.getVersionInfo() call org.apache.solr.update.UpdateLog.getVersionInfo() call org.apache.solr.update.UpdateLog.getVersionInfo() call org.apache.solr.update.UpdateLog.getVersionInfo() call org.apache.solr.update.UpdateLog.getVersionInfo() decl_stmt java.lang.Object final final = new = decl_stmt java.util.concurrent.Semaphore final final final = new for = < ++ = new decl_stmt java.util.concurrent.Semaphore final final = new for = < ++ decl_stmt int final final = decl_stmt java.lang.Thread = new + decl_stmt java.util.Random = new decl_stmt java.util.concurrent.Semaphore = public public try while call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() > call java.util.concurrent.Semaphore.acquire(int) call java.util.concurrent.Semaphore.acquire(int) call java.util.concurrent.Semaphore.acquire(int) call java.util.concurrent.Semaphore.acquire(int) call java.util.concurrent.Semaphore.acquire(int) decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) if < if call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() call java.util.concurrent.atomic.AtomicInteger.incrementAndGet() <= decl_stmt java.util.Map < decl_stmt long synchronized = new <> = ++ synchronized if call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() != = - if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < else synchronized if >= if + = = call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() call java.util.concurrent.atomic.AtomicInteger.decrementAndGet() continue decl_stmt int if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) else = decl_stmt boolean = call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if = decl_stmt DocInfo = decl_stmt long = decl_stmt long = + decl_stmt long = call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() call java.util.concurrent.atomic.AtomicLong.incrementAndGet() if call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() call java.util.Random.nextBoolean() if < + decl_stmt java.lang.Long = - if != - call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new - else if < + + decl_stmt java.lang.Long = + - if != - call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new - else decl_stmt java.lang.Long = if != call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new if if ! = catch call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) - throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for = < ++ decl_stmt java.lang.Thread = new + decl_stmt java.util.Random = new public public try while call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() > call java.util.concurrent.Semaphore.tryAcquire(long,TimeUnit) call java.util.concurrent.Semaphore.tryAcquire(long,TimeUnit) call java.util.concurrent.Semaphore.tryAcquire(long,TimeUnit) call java.util.concurrent.Semaphore.tryAcquire(long,TimeUnit) call java.util.concurrent.Semaphore.tryAcquire(long,TimeUnit) decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < : call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) decl_stmt boolean = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < decl_stmt DocInfo if = call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() else synchronized = if decl_stmt org.apache.solr.request.SolrQueryRequest if = else = + decl_stmt java.lang.String = decl_stmt java.util.Map = decl_stmt java.util.List = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) if call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() == else call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() decl_stmt long = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) decl_stmt long = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) if < || == && != if call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) < catch call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) call java.util.concurrent.atomic.AtomicLong.set(long) - throw new call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for : call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() call java.lang.Thread.start() decl_stmt int = do call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() == = new <> synchronized call org.apache.solr.update.UpdateLog.bufferUpdates() call org.apache.solr.update.UpdateLog.bufferUpdates() call org.apache.solr.update.UpdateLog.bufferUpdates() call org.apache.solr.update.UpdateLog.bufferUpdates() call org.apache.solr.update.UpdateLog.bufferUpdates() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() call org.apache.solr.update.UpdateLog.getState() == if + decl_stmt java.util.concurrent.Future < = call org.apache.solr.update.UpdateLog.applyBufferedUpdates() call org.apache.solr.update.UpdateLog.applyBufferedUpdates() call org.apache.solr.update.UpdateLog.applyBufferedUpdates() call org.apache.solr.update.UpdateLog.applyBufferedUpdates() call org.apache.solr.update.UpdateLog.applyBufferedUpdates() if != decl_stmt RecoveryInfo = decl_stmt int = while == try = call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() call decl Future.get() / catch call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() ++ if >= -- + call java.util.concurrent.Semaphore.drainPermits() call java.util.concurrent.Semaphore.drainPermits() call java.util.concurrent.Semaphore.drainPermits() call java.util.concurrent.Semaphore.drainPermits() call java.util.concurrent.Semaphore.drainPermits() += for : decl_stmt int = - if > = decl_stmt int = - call java.util.concurrent.Semaphore.availablePermits() call java.util.concurrent.Semaphore.availablePermits() call java.util.concurrent.Semaphore.availablePermits() call java.util.concurrent.Semaphore.availablePermits() call java.util.concurrent.Semaphore.availablePermits() if > call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.Semaphore.release(int) call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call java.util.concurrent.atomic.AtomicLong.get() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() call AtomicLong.decrementAndGet() > for : call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) call java.lang.Thread.join(long,int) int DocInfo long long DocInfo decl Map Long long int boolean public public try while > decl_stmt int = if < if <= decl_stmt java.util.Map < decl_stmt long synchronized = new <> = ++ synchronized if != = - if < else synchronized if >= if + = = continue decl_stmt int if = else = decl_stmt boolean = if = decl_stmt DocInfo = decl_stmt long = decl_stmt long = + decl_stmt long = if if < + decl_stmt java.lang.Long = - if != - call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new - else if < + + decl_stmt java.lang.Long = + - if != - call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new - else decl_stmt java.lang.Long = if != call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() call java.lang.Long.longValue() synchronized decl_stmt DocInfo = if > new if if ! = catch - throw new DocInfo boolean int long long List SolrQueryRequest Map String public public try while > decl_stmt int = < : decl_stmt boolean = < decl_stmt DocInfo if = call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() call decl ConcurrentHashMap.get() else synchronized = if decl_stmt org.apache.solr.request.SolrQueryRequest if = else = + decl_stmt java.lang.String = decl_stmt java.util.Map = decl_stmt java.util.List = call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) call java.util.Map.get(Object) if call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() == else call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() call java.util.List.size() decl_stmt long = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) decl_stmt long = call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) call java.util.List.get(int) if < || == && != if < catch - throw new