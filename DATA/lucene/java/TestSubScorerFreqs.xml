org.apache.lucene.search java.io.* import java.util.* import org.apache.lucene.analysis.MockAnalyzer import org.apache.lucene.document.* import org.apache.lucene.index.* import org.apache.lucene.search.BooleanClause.Occur import org.apache.lucene.search.Scorer.ChildScorer import org.apache.lucene.store.* import org.apache.lucene.util.* import org.junit.AfterClass import org.junit.BeforeClass import org.junit.Test import class org.apache.lucene.search.TestSubScorerFreqs super super extends IndexSearcher float Directory Document int RandomIndexWriter public static public static throws = new decl_stmt org.apache.lucene.index.RandomIndexWriter = new new decl_stmt int = for = < ++ decl_stmt org.apache.lucene.document.Document = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = new call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.document.Document.add(IndexableField) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) call org.apache.lucene.index.RandomIndexWriter.addDocument(Iterable) = call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.getReader() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() call org.apache.lucene.index.RandomIndexWriter.close() public static public static throws call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() = call Directory.close() call Directory.close() call Directory.close() call Directory.close() call Directory.close() = public public for : if instanceof || int decl Map Scorer int public public throws decl_stmt int final final = return new public public throws decl_stmt java.util.Map final final final < = new < for < : decl_stmt org.apache.lucene.search.Scorer = decl_stmt int = call Scorer.docID() call Scorer.docID() call Scorer.docID() call Scorer.docID() call Scorer.docID() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() == call Scorer.freq() call Scorer.freq() call Scorer.freq() call Scorer.freq() call Scorer.freq() : + public public throws int decl Map Scorer public public throws decl_stmt java.util.Map final final final < = new < for < : decl_stmt org.apache.lucene.search.Scorer = decl_stmt int = call Scorer.docID() call Scorer.docID() call Scorer.docID() call Scorer.docID() call Scorer.docID() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() == call Scorer.freq() call Scorer.freq() call Scorer.freq() call Scorer.freq() call Scorer.freq() : + public public throws TermQuery CountingCollector decl Map int decl Map public public throws decl_stmt org.apache.lucene.search.TermQuery = new new decl_stmt CountingCollector = new call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) decl_stmt int final final = call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() for = < ++ decl_stmt java.util.Map < = call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.util.Map < = call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() ++ call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl Builder CountingCollector decl BooleanQuery int boolean TermQuery TermQuery decl Iterable decl Builder decl BooleanQuery TermQuery TermQuery public public throws decl_stmt org.apache.lucene.search.TermQuery = new new decl_stmt org.apache.lucene.search.TermQuery = new new decl_stmt org.apache.lucene.search.TermQuery = new new decl_stmt org.apache.lucene.search.TermQuery = new new decl_stmt org.apache.lucene.util.fst.Builder = new decl_stmt org.apache.lucene.util.fst.Builder = new call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl Builder.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl Builder.build() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() call decl BooleanQuery.add() decl_stmt java.lang.Iterable final final final < < = new <> for final final final < : decl_stmt CountingCollector = new call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() call decl BooleanQuery.build() decl_stmt int final final = call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() decl_stmt boolean = for = < ++ decl_stmt java.util.Map < = call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call int.size() call int.size() call int.size() call int.size() call int.size() call int.get() call int.get() call int.get() call int.get() call int.get() call int.get() call int.get() call int.get() call int.get() call int.get() if call int.get() call int.get() call int.get() call int.get() call int.get() decl_stmt java.util.Map < = call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() call decl Builder.docCounts() ++ call boolean.size() call boolean.size() call boolean.size() call boolean.size() call boolean.size() call boolean.get() call boolean.get() call boolean.get() call boolean.get() call boolean.get() call boolean.get() call boolean.get() call boolean.get() call boolean.get() call boolean.get() if call boolean.get() call boolean.get() call boolean.get() call boolean.get() call boolean.get() PhraseQuery CountingCollector decl Map int decl Map public public throws decl_stmt org.apache.lucene.search.PhraseQuery = new decl_stmt CountingCollector = new call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) call org.apache.lucene.search.IndexSearcher.search(Query,int) decl_stmt int final final = call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call org.apache.lucene.search.IndexSearcher.getIndexReader() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() for = < ++ decl_stmt java.util.Map < = call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.util.Map < = call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() call CountingCollector.docCounts() ++ call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get()