org.apache.lucene.facet.taxonomy.writercache java.io.BufferedInputStream import java.io.BufferedOutputStream import java.io.DataInputStream import java.io.DataOutputStream import java.io.IOException import java.io.OutputStream import java.nio.file.Files import java.nio.file.Path import java.util.Iterator import org.apache.lucene.facet.taxonomy.FacetLabel import class org.apache.lucene.facet.taxonomy.writercache.CompactLabelToOrdinal super super extends char decl HashArray CharBlockArray int CollisionMap float int int float public public return int static static decl_stmt int = while < <<= return int private private = new new decl_stmt int = for = < ++ = new /= int int public public if call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.size() call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.size() call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.size() call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.size() call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.size() > decl_stmt int = for = < ++ if return decl_stmt int = call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.addLabel(FacetLabel,int,int) call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.addLabel(FacetLabel,int,int) call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.addLabel(FacetLabel,int,int) call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.addLabel(FacetLabel,int,int) call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.addLabel(FacetLabel,int,int) if != throw new + + + int int public public if == return decl_stmt int = for = < ++ decl_stmt int = if != return return decl int int HashArray decl Iterator decl int int decl int decl CollisionMap CollisionMap decl int int private private decl_stmt HashArray = - for = - > -- = - *= = new for = < ++ decl_stmt int = decl_stmt int = for = < ++ for = < && != ++ decl_stmt int = decl_stmt int = decl_stmt int = if == = = = for = < ++ decl_stmt int = if > decl_stmt int = decl_stmt org.apache.lucene.facet.taxonomy.writercache.CollisionMap = = new call CollisionMap.capacity() call CollisionMap.capacity() call CollisionMap.capacity() call CollisionMap.capacity() call CollisionMap.capacity() = * decl_stmt java.util.Iterator < = call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.entryIterator() call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.entryIterator() call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.entryIterator() call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.entryIterator() call org.apache.lucene.facet.taxonomy.writercache.CollisionMap.entryIterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt Entry = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() int int private private decl_stmt int = decl_stmt int = if == = = return return private private for = < ++ if return if > int int private private decl_stmt int = decl_stmt int = if == = = return return int int private private if == return decl_stmt int = decl_stmt int = if == return if return return static static return & - int static static decl_stmt int = = ^ >>> ^ >>> = ^ >>> ^ >>> return int static static decl_stmt int = = ^ >>> ^ >>> = ^ >>> ^ >>> return int int int decl_stmt int = if != for : += * * + if != decl_stmt int = decl_stmt int = * + += * += if != += return int int int CompactLabelToOrdinal int int int DataInputStream static static throws decl_stmt org.apache.lucene.facet.taxonomy.writercache.CompactLabelToOrdinal = new = = new decl_stmt java.io.DataInputStream = try = new new = call java.io.DataInputStream.readInt() call java.io.DataInputStream.readInt() call java.io.DataInputStream.readInt() call java.io.DataInputStream.readInt() call java.io.DataInputStream.readInt() = int call org.apache.lucene.facet.taxonomy.writercache.CompactLabelToOrdinal.init() call org.apache.lucene.facet.taxonomy.writercache.CompactLabelToOrdinal.init() call org.apache.lucene.facet.taxonomy.writercache.CompactLabelToOrdinal.init() call org.apache.lucene.facet.taxonomy.writercache.CompactLabelToOrdinal.init() call org.apache.lucene.facet.taxonomy.writercache.CompactLabelToOrdinal.init() = = new decl_stmt int = decl_stmt int = decl_stmt int = while < call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() decl_stmt int = short call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() ++ decl_stmt int = if != for = < ++ decl_stmt int = short call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() ++ = * + call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() + += = ^ >>> ^ >>> = ^ >>> ^ >>> call org.apache.lucene.facet.taxonomy.writercache.CompactLabelToOrdinal.addLabelOffset(int,int,int) call org.apache.lucene.facet.taxonomy.writercache.CompactLabelToOrdinal.addLabelOffset(int,int,int) call org.apache.lucene.facet.taxonomy.writercache.CompactLabelToOrdinal.addLabelOffset(int,int,int) call org.apache.lucene.facet.taxonomy.writercache.CompactLabelToOrdinal.addLabelOffset(int,int,int) call org.apache.lucene.facet.taxonomy.writercache.CompactLabelToOrdinal.addLabelOffset(int,int,int) ++ = catch throw new finally if != call DataInputStream.close() call DataInputStream.close() call DataInputStream.close() call DataInputStream.close() call DataInputStream.close() = * return DataOutputStream BufferedOutputStream OutputStream throws decl_stmt java.io.OutputStream = try decl_stmt java.io.BufferedOutputStream = new decl_stmt DataOutputStream = new call DataOutputStream.writeInt() call DataOutputStream.writeInt() call DataOutputStream.writeInt() call DataOutputStream.writeInt() call DataOutputStream.writeInt() call DataOutputStream.close() call DataOutputStream.close() call DataOutputStream.close() call DataOutputStream.close() call DataOutputStream.close() finally call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close() call java.io.OutputStream.close()