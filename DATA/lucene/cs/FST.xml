Lucene.Net.Util.Fst System using System.Collections.Generic using System.Diagnostics using System.Text using Lucene.Net.Util using System.IO using Lucene.Net.Store.ByteArrayDataOutput Lucene.Net.Codecs.CodecUtil Lucene.Net.Store.DataInput Lucene.Net.Store.DataOutput Lucene.Net.Util.Packed.GrowableWriter Lucene.Net.Store.InputStreamDataInput Lucene.Net.Store.OutputStreamDataOutput Lucene.Net.Util.Packed.PackedInts Lucene.Net.Store.RAMOutputStream class super super FST decl PackedInts decl int GrowableWriter int T long decl Outputs bool BytesStore int long T GrowableWriter bool long decl Reader int INPUT_TYPE long long internal static internal static return & != return long public public decl_stmt long = if += call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() else if != += call Lucene.Net.Util.Packed.GrowableWriter.RamBytesUsed() call Lucene.Net.Util.Packed.GrowableWriter.RamBytesUsed() call Lucene.Net.Util.Packed.GrowableWriter.RamBytesUsed() call Lucene.Net.Util.Packed.GrowableWriter.RamBytesUsed() call Lucene.Net.Util.Packed.GrowableWriter.RamBytesUsed() += call int.RamBytesUsed() call int.RamBytesUsed() call int.RamBytesUsed() call int.RamBytesUsed() call int.RamBytesUsed() return public public if != - throw new if == && != = = call Lucene.Net.Util.Fst.BytesStore.Finish() call Lucene.Net.Util.Fst.BytesStore.Finish() call Lucene.Net.Util.Fst.BytesStore.Finish() call Lucene.Net.Util.Fst.BytesStore.Finish() call Lucene.Net.Util.Fst.BytesStore.Finish() private private if != return call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) int else return private private = < new < decl Arc BytesReader public public < decl_stmt Arc < = new < decl_stmt BytesReader = if while != if < = new < else break if break private private < = < new < return decl Arc decl Arc private private != != for = < ++ decl_stmt Arc < = decl_stmt Arc < = if != == == == == == call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() == == call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() == == else == && == return return if != = call decl Outputs.Merge() call decl Outputs.Merge() call decl Outputs.Merge() call decl Outputs.Merge() call decl Outputs.Merge() else = int var long var sbyte int var public public if == - throw new if != throw new if && ! is throw new if else if != decl_stmt var = new call decl Outputs.WriteFinalOutput() call decl Outputs.WriteFinalOutput() call decl Outputs.WriteFinalOutput() call decl Outputs.WriteFinalOutput() call decl Outputs.WriteFinalOutput() decl_stmt var = new int call var.WriteTo() call var.WriteTo() call var.WriteTo() call var.WriteTo() call var.WriteTo() if ! decl_stmt int = / decl_stmt int = while < decl_stmt var = = - - - - = ++ else decl_stmt sbyte if == = else if == = else = byte if decl_stmt long = call Lucene.Net.Util.Fst.BytesStore.WriteTo(DataOutput) call Lucene.Net.Util.Fst.BytesStore.WriteTo(DataOutput) call Lucene.Net.Util.Fst.BytesStore.WriteTo(DataOutput) call Lucene.Net.Util.Fst.BytesStore.WriteTo(DataOutput) call Lucene.Net.Util.Fst.BytesStore.WriteTo(DataOutput) bool var public public decl_stmt bool = decl_stmt var = new try new = finally if else decl FST bool var public static < public static < public static < < < decl_stmt var = new decl_stmt bool = try decl_stmt Lucene.Net.Util.Fst.FST < = new < new = return finally if else private private >= + if == <= + byte sbyte else if == <= + short else int internal internal decl_stmt int if == = & else if == = & else = return public static public static < return > int bool long long long int var int var bool decl byte int long int long long long public public < < < < if == if return else return decl_stmt long = decl_stmt bool = if if < = new += decl_stmt int = - decl_stmt long = decl_stmt int = for = < ++ decl_stmt var = < < decl_stmt int = if == += if == && ! += if += if ! call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() += else call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() decl_stmt bool = > if ! += else if != call int.Set() call int.Set() call int.Set() call int.Set() call int.Set() int call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() int + if ! call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() += call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) byte sbyte if ! call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call var.Output() call decl Outputs.Write() call decl Outputs.Write() call decl Outputs.Write() call decl Outputs.Write() call decl Outputs.Write() ++ if ! call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call var.NextFinalOutput() call decl Outputs.WriteFinalOutput() call decl Outputs.WriteFinalOutput() call decl Outputs.WriteFinalOutput() call decl Outputs.WriteFinalOutput() call decl Outputs.WriteFinalOutput() if && & == > call BytesStore.WriteVLong() call BytesStore.WriteVLong() call BytesStore.WriteVLong() call BytesStore.WriteVLong() call BytesStore.WriteVLong() if = - = = if decl_stmt int const const = > decl_stmt byte = new decl_stmt var = new call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() decl_stmt int = decl_stmt long = + decl_stmt long = decl_stmt long = + * >= if > call Lucene.Net.Util.Fst.BytesStore.SkipBytes(int) call Lucene.Net.Util.Fst.BytesStore.SkipBytes(int) call Lucene.Net.Util.Fst.BytesStore.SkipBytes(int) call Lucene.Net.Util.Fst.BytesStore.SkipBytes(int) call Lucene.Net.Util.Fst.BytesStore.SkipBytes(int) - for = - >= -- -= -= if != > + + + + + + + + + + + call Lucene.Net.Util.Fst.BytesStore.CopyBytes(long,long,int) call Lucene.Net.Util.Fst.BytesStore.CopyBytes(long,long,int) call Lucene.Net.Util.Fst.BytesStore.CopyBytes(long,long,int) call Lucene.Net.Util.Fst.BytesStore.CopyBytes(long,long,int) call Lucene.Net.Util.Fst.BytesStore.CopyBytes(long,long,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) decl_stmt long = - call Lucene.Net.Util.Fst.BytesStore.Reverse(long,long) call Lucene.Net.Util.Fst.BytesStore.Reverse(long,long) call Lucene.Net.Util.Fst.BytesStore.Reverse(long,long) call Lucene.Net.Util.Fst.BytesStore.Reverse(long,long) call Lucene.Net.Util.Fst.BytesStore.Reverse(long,long) if != && == throw new ++ decl_stmt long if != if int == call Lucene.Net.Util.Packed.GrowableWriter.Size() call Lucene.Net.Util.Packed.GrowableWriter.Size() call Lucene.Net.Util.Packed.GrowableWriter.Size() call Lucene.Net.Util.Packed.GrowableWriter.Size() call Lucene.Net.Util.Packed.GrowableWriter.Size() = call Lucene.Net.Util.Packed.GrowableWriter.Resize(int) call Lucene.Net.Util.Packed.GrowableWriter.Resize(int) call Lucene.Net.Util.Packed.GrowableWriter.Resize(int) call Lucene.Net.Util.Packed.GrowableWriter.Resize(int) call Lucene.Net.Util.Packed.GrowableWriter.Resize(int) call Lucene.Net.Util.Packed.GrowableWriter.Size() call Lucene.Net.Util.Packed.GrowableWriter.Size() call Lucene.Net.Util.Packed.GrowableWriter.Size() call Lucene.Net.Util.Packed.GrowableWriter.Size() call Lucene.Net.Util.Packed.GrowableWriter.Size() + = call int.Resize() call int.Resize() call int.Resize() call int.Resize() call int.Resize() call int.Size() call int.Size() call int.Size() call int.Size() call int.Size() + call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) int = else = = return public < public < < if != = | = if ! call T.Equals() call T.Equals() call T.Equals() call T.Equals() call T.Equals() |= sbyte else = sbyte = = = return var public < public < < < if ! = = = = sbyte return else = = decl_stmt var = sbyte if == = if || >= = else = = = - else = = while ! if call decl Outputs.Read() call decl Outputs.Read() call decl Outputs.Read() call decl Outputs.Read() call decl Outputs.Read() if call decl Outputs.ReadFinalOutput() call decl Outputs.ReadFinalOutput() call decl Outputs.ReadFinalOutput() call decl Outputs.ReadFinalOutput() call decl Outputs.ReadFinalOutput() if else if else if else = sbyte - = return long private private decl_stmt long if < = else = return public < public < < < if = = = sbyte if <= |= sbyte else = = = return else return long public < public < < decl_stmt long = = = if == = if || >= = else = = - = = else = = return public public < if ! return else = return == public < public < < if == if <= throw new return else return var long public public < ! if == decl_stmt long = = decl_stmt var = sbyte if == if || >= else else = else if != = + * else = return long long public < public < < if != ++ < = * else = = sbyte = if = call decl Outputs.Read() call decl Outputs.Read() call decl Outputs.Read() call decl Outputs.Read() call decl Outputs.Read() else = if = call decl Outputs.ReadFinalOutput() call decl Outputs.ReadFinalOutput() call decl Outputs.ReadFinalOutput() call decl Outputs.ReadFinalOutput() call decl Outputs.ReadFinalOutput() else = if if = else = = else if = if == if ! if == else = * = else = - > else if decl_stmt long = decl_stmt long = if = + else if < call decl PackedInts.Size() call decl PackedInts.Size() call decl PackedInts.Size() call decl PackedInts.Size() call decl PackedInts.Size() = call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() int else = else = = return int int int decl Arc int int public < public < < < if == if if <= = sbyte else = = = = = return else return if == && < decl_stmt Arc < = if == return else return if ! return = = if == = if || >= = else = = decl_stmt int = decl_stmt int = - while <= decl_stmt int = + >> = * + decl_stmt int = decl_stmt int = - if < = + else if > = - else = - return return while if == return else if > return else if return else int private private while decl_stmt int = if call decl Outputs.Read() call decl Outputs.Read() call decl Outputs.Read() call decl Outputs.Read() call decl Outputs.Read() if call decl Outputs.ReadFinalOutput() call decl Outputs.ReadFinalOutput() call decl Outputs.ReadFinalOutput() call decl Outputs.ReadFinalOutput() call decl Outputs.ReadFinalOutput() if ! && ! if else if return return + return return private private < < < < return && <= && >= || >= decl FST decl_stmt BytesReader if = else = return int int long long decl Arc decl PackedInts int bool bool NodeAndInCount long BytesStore bool int GrowableWriter sbyte int int decl IDictionary bool bool int int long int int long bool long NodeAndInCount NodeQueue int BytesReader decl FST internal < internal < if == throw new decl_stmt Arc < = new < decl_stmt BytesReader = decl_stmt int = call int.Size() call int.Size() call int.Size() call int.Size() call int.Size() decl_stmt NodeQueue = new decl_stmt NodeAndInCount = for = < call int.Size() call int.Size() call int.Size() call int.Size() call int.Size() ++ if call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() >= if == call NodeQueue.Add() call NodeQueue.Add() call NodeQueue.Add() call NodeQueue.Add() call NodeQueue.Add() new int call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() if call NodeQueue.Size() call NodeQueue.Size() call NodeQueue.Size() call NodeQueue.Size() call NodeQueue.Size() == = call NodeQueue.Top() call NodeQueue.Top() call NodeQueue.Top() call NodeQueue.Top() call NodeQueue.Top() else if call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() > call NodeQueue.InsertWithOverflow() call NodeQueue.InsertWithOverflow() call NodeQueue.InsertWithOverflow() call NodeQueue.InsertWithOverflow() call NodeQueue.InsertWithOverflow() new int call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < for = call NodeQueue.Size() call NodeQueue.Size() call NodeQueue.Size() call NodeQueue.Size() call NodeQueue.Size() - >= -- decl_stmt NodeAndInCount = call NodeQueue.Pop() call NodeQueue.Pop() call NodeQueue.Pop() call NodeQueue.Pop() call NodeQueue.Pop() = decl_stmt Lucene.Net.Util.Packed.GrowableWriter = new + for = <= ++ call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) + - call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) decl_stmt int decl_stmt int decl_stmt int decl_stmt int decl_stmt Lucene.Net.Util.Fst.FST < while decl_stmt bool = decl_stmt bool = = new < decl_stmt Lucene.Net.Util.Fst.BytesStore = call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) = = = = = = = decl_stmt int = decl_stmt long = for = int >= -- ++ decl_stmt long = if != call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) = - call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) = call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) ++ decl_stmt int = decl_stmt int = decl_stmt bool = decl_stmt bool = while decl_stmt bool = != if if == = call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) byte call BytesStore.WriteVInt() call BytesStore.WriteVInt() call BytesStore.WriteVInt() call BytesStore.WriteVInt() call BytesStore.WriteVInt() call BytesStore.WriteVInt() call BytesStore.WriteVInt() call BytesStore.WriteVInt() call BytesStore.WriteVInt() call BytesStore.WriteVInt() decl_stmt int = while decl_stmt long = ++ decl_stmt sbyte = if += sbyte if ! && != && == - += sbyte if ! ++ if += sbyte if ! call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() += sbyte else call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() if ! += sbyte if ! call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() += sbyte decl_stmt long decl_stmt bool = && & == if decl_stmt int if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() int out = else = + call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) int + decl_stmt long = call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) int + - - if < = = if < |= else = != call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) byte sbyte call decl FST.WriteLabel() call decl FST.WriteLabel() call decl FST.WriteLabel() call decl FST.WriteLabel() call decl FST.WriteLabel() if ! call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Arc.Output() call decl Outputs.Write() call decl Outputs.Write() call decl Outputs.Write() call decl Outputs.Write() call decl Outputs.Write() if ! ++ if ! call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Arc.NextFinalOutput() call decl Outputs.WriteFinalOutput() call decl Outputs.WriteFinalOutput() call decl Outputs.WriteFinalOutput() call decl Outputs.WriteFinalOutput() call decl Outputs.WriteFinalOutput() if decl_stmt long = call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) int + - if < = = if call BytesStore.WriteVLong() call BytesStore.WriteVLong() call BytesStore.WriteVLong() call BytesStore.WriteVLong() call BytesStore.WriteVLong() if ! ++ else call BytesStore.WriteVLong() call BytesStore.WriteVLong() call BytesStore.WriteVLong() call BytesStore.WriteVLong() call BytesStore.WriteVLong() if ! if >= ++ else ++ if decl_stmt int = - = call Lucene.Net.Util.Fst.BytesStore.SkipBytes(int) call Lucene.Net.Util.Fst.BytesStore.SkipBytes(int) call Lucene.Net.Util.Fst.BytesStore.SkipBytes(int) call Lucene.Net.Util.Fst.BytesStore.SkipBytes(int) call Lucene.Net.Util.Fst.BytesStore.SkipBytes(int) + - if break if if == || && <= break else break = call Lucene.Net.Util.Fst.BytesStore.Truncate(long) call Lucene.Net.Util.Fst.BytesStore.Truncate(long) call Lucene.Net.Util.Fst.BytesStore.Truncate(long) call Lucene.Net.Util.Fst.BytesStore.Truncate(long) call Lucene.Net.Util.Fst.BytesStore.Truncate(long) = = = |= += if ! ! break decl_stmt long = foreach in = call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) int decl_stmt Mutable = foreach < in call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Set() call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) = = call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) int if != = == + + + == == + + + call decl FST.Bytes() call decl FST.Bytes() call decl FST.Bytes() call decl FST.Bytes() call decl FST.Bytes() call decl FST.Bytes() call decl FST.Bytes() call decl FST.Bytes() call decl FST.Bytes() call decl FST.CacheRootArcs() call decl FST.CacheRootArcs() call decl FST.CacheRootArcs() call decl FST.CacheRootArcs() call decl FST.CacheRootArcs() return public virtual public virtual if > return else if < return - else return - int public override public override decl_stmt int = != return <