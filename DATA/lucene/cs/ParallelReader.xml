Lucene.Net.Index System using System.Collections.Generic using System.Linq using Lucene.Net.Support using Lucene.Net.Documents.Document Lucene.Net.Documents.FieldSelector Lucene.Net.Documents.FieldSelectorResult class Lucene.Net.Index.ParallelReader super super IndexReader int decl List decl List bool decl SortedDictionary decl List decl IDictionary int bool public virtual public virtual decl ICollection public virtual public virtual if == = = = if != throw new + + + if != throw new + + + decl_stmt System.Collections.Generic.ICollection < = = foreach in if ! call decl SortedDictionary.ContainsKey() call decl SortedDictionary.ContainsKey() call decl SortedDictionary.ContainsKey() call decl SortedDictionary.ContainsKey() call decl SortedDictionary.ContainsKey() || == = if ! call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() public override public override try return catch throw new public override public override lock return ParallelReader IndexReader bool bool IndexReader decl IList decl List IndexReader protected internal virtual protected internal virtual decl_stmt bool = decl_stmt System.Collections.Generic.IList < = new < decl_stmt bool = try foreach in decl_stmt Lucene.Net.Index.IndexReader = if = call IndexReader.Clone() call IndexReader.Clone() call IndexReader.Clone() call IndexReader.Clone() call IndexReader.Clone() else = call IndexReader.Reopen() call IndexReader.Reopen() call IndexReader.Reopen() call IndexReader.Reopen() call IndexReader.Reopen() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if != = = finally if ! && for = < ++ decl_stmt Lucene.Net.Index.IndexReader = if != try call IndexReader.Close() call IndexReader.Close() call IndexReader.Close() call IndexReader.Close() call IndexReader.Close() catch if decl_stmt System.Collections.Generic.List < = new < decl_stmt Lucene.Net.Index.ParallelReader = new for = < ++ decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Lucene.Net.Index.IndexReader = if == call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call Lucene.Net.Index.IndexReader.IncRef() call Lucene.Net.Index.IndexReader.IncRef() call Lucene.Net.Index.IndexReader.IncRef() call Lucene.Net.Index.IndexReader.IncRef() call Lucene.Net.Index.IndexReader.IncRef() else call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call Lucene.Net.Index.ParallelReader.Add(IndexReader,bool) call Lucene.Net.Index.ParallelReader.Add(IndexReader,bool) call Lucene.Net.Index.ParallelReader.Add(IndexReader,bool) call Lucene.Net.Index.ParallelReader.Add(IndexReader,bool) call Lucene.Net.Index.ParallelReader.Add(IndexReader,bool) ! call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() = = return else return public override public override return return return public override public override if > return return protected internal override protected internal override foreach in = protected internal override protected internal override foreach in = var bool Document public override public override decl_stmt Lucene.Net.Documents.Document = new foreach in decl_stmt bool = == if ! decl_stmt var = foreach in if != = break if decl_stmt var = foreach in call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) return decl System IndexReader decl IList decl String public override public override decl_stmt System.Collections.Generic.IList < = new < foreach in decl_stmt System.String = decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Lucene.Net.Index.ITermFreqVector = call decl String.GetTermFreqVector() call decl String.GetTermFreqVector() call decl String.GetTermFreqVector() call decl String.GetTermFreqVector() call decl String.GetTermFreqVector() if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() IndexReader public override public override decl_stmt Lucene.Net.Index.IndexReader = return == : call IndexReader.GetTermFreqVector() call IndexReader.GetTermFreqVector() call IndexReader.GetTermFreqVector() call IndexReader.GetTermFreqVector() call IndexReader.GetTermFreqVector() IndexReader public override public override decl_stmt Lucene.Net.Index.IndexReader = if != call IndexReader.GetTermFreqVector() call IndexReader.GetTermFreqVector() call IndexReader.GetTermFreqVector() call IndexReader.GetTermFreqVector() call IndexReader.GetTermFreqVector() decl System decl String public override public override foreach in decl_stmt System.String = decl_stmt Lucene.Net.Index.IndexReader = call decl String.GetTermFreqVector() call decl String.GetTermFreqVector() call decl String.GetTermFreqVector() call decl String.GetTermFreqVector() call decl String.GetTermFreqVector() IndexReader public override public override decl_stmt Lucene.Net.Index.IndexReader = return != && call IndexReader.HasNorms() call IndexReader.HasNorms() call IndexReader.HasNorms() call IndexReader.HasNorms() call IndexReader.HasNorms() IndexReader public override public override decl_stmt Lucene.Net.Index.IndexReader = return == : call IndexReader.Norms() call IndexReader.Norms() call IndexReader.Norms() call IndexReader.Norms() call IndexReader.Norms() IndexReader public override public override decl_stmt Lucene.Net.Index.IndexReader = if != call IndexReader.Norms() call IndexReader.Norms() call IndexReader.Norms() call IndexReader.Norms() call IndexReader.Norms() IndexReader protected internal override protected internal override decl_stmt Lucene.Net.Index.IndexReader = if != call IndexReader.DoSetNorm() call IndexReader.DoSetNorm() call IndexReader.DoSetNorm() call IndexReader.DoSetNorm() call IndexReader.DoSetNorm() public override public override return new public override public override return new IndexReader public override public override decl_stmt Lucene.Net.Index.IndexReader = return == : call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() public override public override return new public override public override return new public override public override return new public override public override return new public override public override foreach in if ! return return public override public override foreach in if ! return return throw new public virtual public virtual return call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() protected internal override protected internal override < foreach in protected internal override protected internal override lock for = < ++ if else decl ISet decl ICollection public override < public override < decl_stmt System.Collections.Generic.ISet < = < foreach in decl_stmt System.Collections.Generic.ICollection < = call decl ISet.UnionWith() call decl ISet.UnionWith() call decl ISet.UnionWith() call decl ISet.UnionWith() call decl ISet.UnionWith() return private private = return var Term var public override public override if == return if && == return if == decl_stmt var = new < if != && > decl_stmt var = foreach in call var.Compare() call var.Compare() call var.Compare() call var.Compare() call var.Compare() >= call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() = call var.Skip() call var.Skip() call var.Skip() call var.Skip() call var.Skip() while = = new decl_stmt Lucene.Net.Index.Term = if != && == return else return if == return return public override public override if == return return protected override protected override if return if if != = private private = return return return IndexReader public virtual public virtual decl_stmt Lucene.Net.Index.IndexReader = = != call IndexReader.TermDocs() call IndexReader.TermDocs() call IndexReader.TermDocs() call IndexReader.TermDocs() call IndexReader.TermDocs() : public virtual public virtual public virtual public virtual if == return return public virtual public virtual if == return return public virtual public virtual if == return return public virtual public virtual public public protected virtual protected virtual if return if if != = private private = return IndexReader public override public override decl_stmt Lucene.Net.Index.IndexReader = = != call IndexReader.TermPositions() call IndexReader.TermPositions() call IndexReader.TermPositions() call IndexReader.TermPositions() call IndexReader.TermPositions() : public virtual public virtual return return public virtual public virtual return return