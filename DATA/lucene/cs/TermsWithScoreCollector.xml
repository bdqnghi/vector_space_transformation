Lucene.Net.Join System using Lucene.Net.Index using Lucene.Net.Search using Lucene.Net.Util using class Lucene.Net.Join.TermsWithScoreCollector super super Collector string int ScoreMode Scorer decl float BytesRefHash return return = public override public override return internal static internal static if switch case return new default: return new switch case return new default: return new float int float public override public override decl_stmt int = call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) if < = - - else if >= = decl_stmt float = call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() decl_stmt float = if call float.CompareTo() call float.CompareTo() call float.CompareTo() call float.CompareTo() call float.CompareTo() == = else switch case = + break case if > = break = public override public override return float int float public override public override decl_stmt int = call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) if < = - - else if >= = = decl_stmt float = call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() decl_stmt float = if call float.CompareTo() call float.CompareTo() call float.CompareTo() call float.CompareTo() call float.CompareTo() == = = else = + ++ if != for = < ++ = / = return long int public override public override = decl_stmt long while = != decl_stmt int = call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) if < = - - else if >= = switch case += call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() break case = call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() break = public override public override throw new long int public override public override = decl_stmt long while = != decl_stmt int = call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) if < = - - else if >= = = += call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() ++ if != for = < ++ = / = return