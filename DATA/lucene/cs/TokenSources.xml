Lucene.Net.Search.Highlight System using System.Collections.Generic using System.IO using System.Linq using Lucene.Net.Analysis using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Documents using Lucene.Net.Index using class Lucene.Net.Search.Highlight.TokenSources Token public override public override if >= return decl_stmt Lucene.Net.Analysis.Token = ++ return protected override protected override var var TokenStream public static public static decl_stmt Lucene.Net.Analysis.TokenStream = decl_stmt var = if != decl_stmt var = as if != = return ?? var var TokenStream public static public static decl_stmt Lucene.Net.Analysis.TokenStream = decl_stmt var = if != decl_stmt var = as if != = return ?? public static public static return decl List var decl String decl TermVectorOffsetInfo int decl int var decl int public static public static decl_stmt System.String = decl_stmt int = decl_stmt int = call decl int.Sum() call decl int.Sum() call decl int.Sum() call decl int.Sum() call decl int.Sum() decl_stmt var = new decl_stmt System.Collections.Generic.List < = for = < ++ decl_stmt TermVectorOffsetInfo = if == return decl_stmt int = if = if == if == = new < foreach in decl_stmt var = new call var.SetTermBuffer() call var.SetTermBuffer() call var.SetTermBuffer() call var.SetTermBuffer() call var.SetTermBuffer() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() else for = < ++ decl_stmt var = new = if != = call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() if > return if < return - return return new var var public static public static decl_stmt var = if == throw new + + + if is decl_stmt var = return throw new + + + Document public static public static decl_stmt Lucene.Net.Documents.Document = return String public static public static decl_stmt System.String = if == throw new + + return public static public static return new