Lucene.Net.Util.Fst System using System.Diagnostics using System.Collections.Generic using System.IO using System.Linq using System.Text using Lucene.Net.Randomized.Generators using Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Document.Document Lucene.Net.Document.Field Lucene.Net.Index.DirectoryReader Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexWriter Lucene.Net.Index.IndexWriterConfig Lucene.Net.Index.MultiFields Lucene.Net.Index.RandomIndexWriter Lucene.Net.Index.Term Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum Lucene.Net.Search.IndexSearcher Lucene.Net.Search.TermQuery Lucene.Net.Store.Directory Lucene.Net.Store.FSDirectory Lucene.Net.Store.IOContext Lucene.Net.Store.IndexInput Lucene.Net.Store.IndexOutput Lucene.Net.Store.MockDirectoryWrapper Lucene.Net.Util.LuceneTestCase.SuppressCodecs Lucene.Net.Util.Automaton.Automaton Lucene.Net.Util.Automaton.CompiledAutomaton Lucene.Net.Util.Automaton.RegExp Lucene.Net.Util.Fst.FST.BytesReader Lucene.Net.Util.Fst.PairOutputs<<long<<longlong.Pair<<long<<longlong Lucene.Net.Util.Fst.Util.Result<<long Lucene.Net.Util.Fst.Util.Result<<long Lucene.Net.Util.Packed.PackedInts Lucene.Net.Support using NUnit.Framework using class attribute Lucene.Net.Util.Fst.TestFSTs super super LuceneTestCase decl IComparer MockDirectoryWrapper decl IComparer public override public override = = public override public override if != call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() decl IList decl IntsRef BytesRef BytesRef ByteSequenceOutputs decl string decl IntsRef decl FST decl string public virtual public virtual decl_stmt string = new decl_stmt string = new decl_stmt Lucene.Net.Util.IntsRef = new decl_stmt Lucene.Net.Util.IntsRef = new for = < ++ if + for = < ++ = for = < ++ = decl_stmt Lucene.Net.Util.Fst.Outputs < = decl_stmt object = decl_stmt System.Collections.Generic.IList < < < < < = new < < < < < foreach in call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new < < < < decl_stmt Lucene.Net.Util.Fst.FST < = new < decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt System.Collections.Generic.IList < < < < < = new < < < < < for = < ++ call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new < < < < long decl_stmt Lucene.Net.Util.Fst.FST < = new < decl_stmt Lucene.Net.Util.Fst.ByteSequenceOutputs = decl_stmt Lucene.Net.Util.BytesRef = decl_stmt System.Collections.Generic.IList < < < < < = new < < < < < for = < ++ decl_stmt Lucene.Net.Util.BytesRef = == : new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new < < < < decl_stmt Lucene.Net.Util.Fst.FST < = new < decl IList BytesRef IntSequenceOutputs long string long IntsRef PositiveIntOutputs PositiveIntOutputs private private decl_stmt Lucene.Net.Util.Fst.Outputs < = decl_stmt object = decl_stmt System.Collections.Generic.IList < < < < < = new < < < < < foreach in call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new < < < < new < decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt System.Collections.Generic.IList < < < < < = new < < < < < for = < ++ call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new < < < < long new < decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt System.Collections.Generic.IList < < < < < = new < < < < < decl_stmt long = for = < ++ decl_stmt long = + = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new < < < < new < decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt System.Collections.Generic.IList < < < < < = new < < < < < for = < ++ call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new < < < < new < decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt Lucene.Net.Util.Fst.PairOutputs < = new < decl_stmt System.Collections.Generic.IList < < < < < = new < < < < < decl_stmt long = for = < ++ decl_stmt long = + = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new < < < < call IntSequenceOutputs.NewPair() call IntSequenceOutputs.NewPair() call IntSequenceOutputs.NewPair() call IntSequenceOutputs.NewPair() call IntSequenceOutputs.NewPair() long new < decl_stmt Lucene.Net.Util.Fst.ByteSequenceOutputs = decl_stmt Lucene.Net.Util.BytesRef = decl_stmt System.Collections.Generic.IList < < < < < = new < < < < < for = < ++ decl_stmt Lucene.Net.Util.BytesRef = == : new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new < < < < new < decl_stmt Lucene.Net.Util.Fst.IntSequenceOutputs = decl_stmt System.Collections.Generic.IList < < < < < = new < < < < < for = < ++ decl_stmt string = decl_stmt Lucene.Net.Util.IntsRef = new = for = < ++ = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new < < < < new < public virtual public virtual internal virtual internal virtual if == return else return decl HashSet decl IntsRef string Random int private private decl_stmt System.Random = new for = < ++ if + for = < ++ decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) + decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt Lucene.Net.Util.IntsRef = new while < decl_stmt string = call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() public virtual public virtual bool BytesRef Random decl SeekStatus int IndexWriterConfig IntsRef IndexWriter int decl TermsEnum long bool BytesRef int Terms LineFileDocs MockAnalyzer DirectoryInfo int PositiveIntOutputs BytesRef TermsEnum Document decl Builder TermsEnum IndexReader decl FST decl BytesRefFSTEnum int Automaton Directory public virtual public virtual decl_stmt Lucene.Net.Util.LineFileDocs = new decl_stmt int = decl_stmt Lucene.Net.Analysis.MockAnalyzer = new = decl_stmt Lucene.Net.Index.IndexWriterConfig = - decl_stmt System.IO.DirectoryInfo = decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt long = + decl_stmt Lucene.Net.Documents.Document decl_stmt int = while = call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() != && < call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) ++ decl_stmt Lucene.Net.Index.IndexReader = call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt bool = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt bool = if if else decl_stmt Lucene.Net.Index.Terms = if != decl_stmt Lucene.Net.Util.IntsRef = new decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() if + decl_stmt Lucene.Net.Util.BytesRef decl_stmt int = decl_stmt Lucene.Net.Util.Automaton.Automaton = new decl_stmt Lucene.Net.Index.TermsEnum = call Lucene.Net.Index.Terms.Intersect(CompiledAutomaton,BytesRef) call Lucene.Net.Index.Terms.Intersect(CompiledAutomaton,BytesRef) call Lucene.Net.Index.Terms.Intersect(CompiledAutomaton,BytesRef) call Lucene.Net.Index.Terms.Intersect(CompiledAutomaton,BytesRef) call Lucene.Net.Index.Terms.Intersect(CompiledAutomaton,BytesRef) new while = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() if == try call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() catch if = decl_stmt int if = else = call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() long ++ if && == && + decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() if + + + + + + + + + + call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() + if > decl_stmt System.Random = new decl_stmt Lucene.Net.Util.Fst.BytesRefFSTEnum < = new < decl_stmt int = for = < ++ decl_stmt Lucene.Net.Util.BytesRef = new if + call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() + + decl_stmt SeekStatus = call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) decl_stmt Lucene.Net.Util.BytesRef = new if + call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() + + decl_stmt SeekStatus = call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) if == call decl SeekStatus.Equals() call decl SeekStatus.Equals() call decl SeekStatus.Equals() call decl SeekStatus.Equals() call decl SeekStatus.Equals() + == : call decl SeekStatus.Input() call decl SeekStatus.Input() call decl SeekStatus.Input() call decl SeekStatus.Input() call decl SeekStatus.Input() call decl SeekStatus.Input() call decl SeekStatus.Input() call decl SeekStatus.Input() call decl SeekStatus.Input() + else for = < ++ if if + call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() if call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != if + call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call decl BytesRefFSTEnum.Next() call decl BytesRefFSTEnum.Next() call decl BytesRefFSTEnum.Next() call decl BytesRefFSTEnum.Next() call decl BytesRefFSTEnum.Next() else if if if != + + + call Lucene.Net.Util.Fst.PositiveIntOutputs.OutputToString(long) call Lucene.Net.Util.Fst.PositiveIntOutputs.OutputToString(long) call Lucene.Net.Util.Fst.PositiveIntOutputs.OutputToString(long) call Lucene.Net.Util.Fst.PositiveIntOutputs.OutputToString(long) call Lucene.Net.Util.Fst.PositiveIntOutputs.OutputToString(long) break call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() private private private < < if == else + + if + + + else + + + IntsRef long BufferedReader long long T decl FST double string IndexOutput long IntsRef int Directory public virtual public virtual decl_stmt BufferedReader = new new new try decl_stmt Lucene.Net.Util.IntsRef = new decl_stmt long = decl_stmt int = while decl_stmt string = call BufferedReader.readLine() call BufferedReader.readLine() call BufferedReader.readLine() call BufferedReader.readLine() call BufferedReader.readLine() if == break ++ if == - / if >= break decl_stmt long = - / + == decl_stmt Lucene.Net.Util.Fst.FST < = decl_stmt long = - / + if == if == return + + + + + + + + call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() if < decl_stmt Writer = new new call string.Dispose() call string.Dispose() call string.Dispose() call string.Dispose() call string.Dispose() decl_stmt Lucene.Net.Store.Directory = new decl_stmt IndexOutput = call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() if ! return while for = < ++ call BufferedReader.Close() call BufferedReader.Close() call BufferedReader.Close() call BufferedReader.Close() call BufferedReader.Close() = new new new = = while decl_stmt string = call BufferedReader.readLine() call BufferedReader.readLine() call BufferedReader.readLine() call BufferedReader.readLine() call BufferedReader.readLine() if == break if == decl_stmt T = decl_stmt T = if == throw new + if ! call IntsRef.Equals() call IntsRef.Equals() call IntsRef.Equals() call IntsRef.Equals() call IntsRef.Equals() throw new + + + + + else decl_stmt long = decl_stmt Lucene.Net.Util.IntsRef = < long if == throw new + if ! call IntsRef.Equals() call IntsRef.Equals() call IntsRef.Equals() call IntsRef.Equals() call IntsRef.Equals() throw new + + + + + ++ if == - / + + + if >= break decl_stmt double = - / + == : + + + + * / + if ! break break finally call BufferedReader.Dispose() call BufferedReader.Dispose() call BufferedReader.Dispose() call BufferedReader.Dispose() call BufferedReader.Dispose() protected internal override protected internal override if == = new return long long protected internal override protected internal override return long protected internal override protected internal override if == = new return long protected internal override protected internal override return decl Outputs decl Builder decl BytesRefFSTEnum public virtual public virtual decl_stmt Lucene.Net.Util.Fst.Outputs < = decl_stmt Lucene.Net.Util.Fst.Builder < = new < call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new new decl_stmt Lucene.Net.Util.Fst.BytesRefFSTEnum < = new < call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl BytesRefFSTEnum.SeekFloor() call decl BytesRefFSTEnum.SeekFloor() call decl BytesRefFSTEnum.SeekFloor() call decl BytesRefFSTEnum.SeekFloor() call decl BytesRefFSTEnum.SeekFloor() new call decl BytesRefFSTEnum.SeekCeil() call decl BytesRefFSTEnum.SeekCeil() call decl BytesRefFSTEnum.SeekCeil() call decl BytesRefFSTEnum.SeekCeil() call decl BytesRefFSTEnum.SeekCeil() new int decl Builder string decl Outputs decl FST IntsRef decl BytesRefFSTEnum public virtual public virtual decl_stmt string = decl_stmt Lucene.Net.Util.Fst.Outputs < = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt Lucene.Net.Util.IntsRef = new for = < ++ call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() decl_stmt int = decl_stmt Lucene.Net.Util.Fst.BytesRefFSTEnum < = new < while call decl BytesRefFSTEnum.Next() call decl BytesRefFSTEnum.Next() call decl BytesRefFSTEnum.Next() call decl BytesRefFSTEnum.Next() call decl BytesRefFSTEnum.Next() != ++ new new BytesRef BytesRef BytesRef PositiveIntOutputs decl Builder decl FST decl BytesRefFSTEnum public virtual public virtual decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt Lucene.Net.Util.BytesRef = new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() long long long decl_stmt Lucene.Net.Util.Fst.BytesRefFSTEnum < = new < decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt Lucene.Net.Util.BytesRef = new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() long long long decl_stmt Lucene.Net.Util.Fst.BytesRefFSTEnum < = new < = call decl BytesRefFSTEnum.SeekFloor() call decl BytesRefFSTEnum.SeekFloor() call decl BytesRefFSTEnum.SeekFloor() call decl BytesRefFSTEnum.SeekFloor() call decl BytesRefFSTEnum.SeekFloor() long = call decl BytesRefFSTEnum.SeekFloor() call decl BytesRefFSTEnum.SeekFloor() call decl BytesRefFSTEnum.SeekFloor() call decl BytesRefFSTEnum.SeekFloor() call decl BytesRefFSTEnum.SeekFloor() new long = call decl BytesRefFSTEnum.SeekCeil() call decl BytesRefFSTEnum.SeekCeil() call decl BytesRefFSTEnum.SeekCeil() call decl BytesRefFSTEnum.SeekCeil() call decl BytesRefFSTEnum.SeekCeil() new long new new new new new new decl TermsEnum Field decl IList bool TermsEnum int Document int decl IList IndexSearcher string IndexReader decl HashSet RandomIndexWriter string string decl HashSet string Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = for = < ++ if + decl_stmt Lucene.Net.Index.RandomIndexWriter = new new decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.Field = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) decl_stmt int = if + decl_stmt System.Collections.Generic.HashSet < = new < for = < ++ decl_stmt string if == = else while decl_stmt string = if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() = break call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() = call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Lucene.Net.Search.IndexSearcher = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < call decl IList.Sort() call decl IList.Sort() call decl IList.Sort() call decl IList.Sort() call decl IList.Sort() decl_stmt System.Collections.Generic.HashSet < = new < for = < / ++ decl_stmt string if == = + else while = if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() break call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() for = < * ++ decl_stmt string = decl_stmt bool = ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() if + : + + : call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new : + + decl_stmt Lucene.Net.Index.TermsEnum = for = < * ++ decl_stmt string decl_stmt string decl_stmt bool if = = ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() = if + : + + else = decl_stmt int = - if == = = + else = + = + if + + + decl_stmt SeekStatus if == if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) new = else = else = call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) new if != new call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() + + + call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() else if ! == || == else call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() Field Document decl HashSet IndexSearcher IndexReader int RandomIndexWriter decl IList Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new new decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.Field = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) decl_stmt int = * * + if + decl_stmt System.Collections.Generic.HashSet < = new < while < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() foreach in = call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) if decl_stmt Lucene.Net.Index.IndexReader = if + decl_stmt Lucene.Net.Search.IndexSearcher = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() decl_stmt System.Collections.Generic.IList < = new < = foreach in if + call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new + call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() StringBuilder SyntheticData decl FST decl FST decl List decl string public virtual public virtual < >= decl_stmt SyntheticData = new decl_stmt System.Collections.Generic.List < = new < decl_stmt System.Text.StringBuilder = new call SyntheticData.Generate() call SyntheticData.Generate() call SyntheticData.Generate() call SyntheticData.Generate() call SyntheticData.Generate() decl_stmt string = call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() decl_stmt Lucene.Net.Util.Fst.FST < = call SyntheticData.Compile() call SyntheticData.Compile() call SyntheticData.Compile() call SyntheticData.Compile() call SyntheticData.Compile() decl_stmt Lucene.Net.Util.Fst.FST < = call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() new < call SyntheticData.VerifyStateAndBelow() call SyntheticData.VerifyStateAndBelow() call SyntheticData.VerifyStateAndBelow() call SyntheticData.VerifyStateAndBelow() call SyntheticData.VerifyStateAndBelow() IntsRef BytesRef decl Builder NoOutputs string object int public < public < decl_stmt Lucene.Net.Util.Fst.NoOutputs = decl_stmt object = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt int = decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt Lucene.Net.Util.IntsRef = new while < decl_stmt string = ++ if == break call Lucene.Net.Util.BytesRef.CopyChars(CharsRef) call Lucene.Net.Util.BytesRef.CopyChars(CharsRef) call Lucene.Net.Util.BytesRef.CopyChars(CharsRef) call Lucene.Net.Util.BytesRef.CopyChars(CharsRef) call Lucene.Net.Util.BytesRef.CopyChars(CharsRef) call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() return call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() string public public < if == || from == decl_stmt string = + + + else for = from <= ++ from == from - - BytesReader int bool int public public < < if < < decl_stmt int = decl_stmt BytesReader = for = = != ++ decl_stmt bool = decl_stmt int = new < + <= && >= || >= if break return return PositiveIntOutputs decl Builder decl FST StringWriter public virtual public virtual decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt Lucene.Net.Util.Fst.Builder < = new < call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() decl_stmt System.IO.StringWriter = new call System.IO.StringWriter.Dispose(bool) call System.IO.StringWriter.Dispose(bool) call System.IO.StringWriter.Dispose(bool) call System.IO.StringWriter.Dispose(bool) call System.IO.StringWriter.Dispose(bool) call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() != - PositiveIntOutputs decl Builder decl FST StringWriter bool public virtual public virtual decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt bool = decl_stmt Lucene.Net.Util.Fst.Builder < = new < call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new new decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() decl_stmt System.IO.StringWriter = new call System.IO.StringWriter.Dispose(bool) call System.IO.StringWriter.Dispose(bool) call System.IO.StringWriter.Dispose(bool) call System.IO.StringWriter.Dispose(bool) call System.IO.StringWriter.Dispose(bool) call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() != - call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() != - Directory decl Builder IndexOutput PositiveIntOutputs decl CompiledNode IndexInput long decl FST decl FST public virtual public virtual decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt long = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt Lucene.Net.Util.Fst.FST < = new < decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt long = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt Lucene.Net.Util.Fst.FST < = new < = call decl CompiledNode.AddArc() call decl CompiledNode.AddArc() call decl CompiledNode.AddArc() call decl CompiledNode.AddArc() call decl CompiledNode.AddArc() decl_stmt CompiledNode < < = new < < = call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() = = = = call decl CompiledNode.AddArc() call decl CompiledNode.AddArc() call decl CompiledNode.AddArc() call decl CompiledNode.AddArc() call decl CompiledNode.AddArc() decl_stmt CompiledNode < < = new < < = call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() = = = call decl FST.Finish() call decl FST.Finish() call decl FST.Finish() call decl FST.Finish() call decl FST.Finish() call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() decl_stmt System.IO.StringWriter = new call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() decl_stmt Lucene.Net.Store.Directory = decl_stmt IndexOutput = call decl FST.CreateOutput() call decl FST.CreateOutput() call decl FST.CreateOutput() call decl FST.CreateOutput() call decl FST.CreateOutput() call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() decl_stmt Lucene.Net.Store.IndexInput = call decl FST.OpenInput() call decl FST.OpenInput() call decl FST.OpenInput() call decl FST.OpenInput() call decl FST.OpenInput() decl_stmt Lucene.Net.Util.Fst.FST < = new < call decl FST.Dispose() call decl FST.Dispose() call decl FST.Dispose() call decl FST.Dispose() call decl FST.Dispose() long decl FST decl FST private private < decl_stmt long ? = decl_stmt Lucene.Net.Util.Fst.FST < = new < decl_stmt Lucene.Net.Util.Fst.FST < = new < long = long public virtual public virtual return PositiveIntOutputs decl Builder decl FST decl Util IntsRef public virtual public virtual decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt Lucene.Net.Util.IntsRef = new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() decl_stmt Lucene.Net.Util.Fst.Util < = call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() new < new long new long new long decl Util decl Util PositiveIntOutputs decl Builder decl FST IntsRef AtomicInteger public virtual public virtual decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt Lucene.Net.Util.IntsRef = new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() decl_stmt Lucene.Net.Support.AtomicInteger = new decl_stmt Lucene.Net.Util.Fst.Util < = new call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() new < new decl_stmt Lucene.Net.Util.Fst.Util < = call decl Util.Search() call decl Util.Search() call decl Util.Search() call decl Util.Search() call decl Util.Search() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() new long call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) = new call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() new < new = call decl Util.Search() call decl Util.Search() call decl Util.Search() call decl Util.Search() call decl Util.Search() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() bool protected override protected override decl_stmt bool = int == if ! return bool protected override protected override decl_stmt bool = int == if ! return public virtual public virtual return decl PairOutputs decl Builder decl FST decl Util IntsRef public virtual public virtual decl_stmt Lucene.Net.Util.Fst.PairOutputs < = new < decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt Lucene.Net.Util.IntsRef = new call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() decl_stmt Lucene.Net.Util.Fst.Util < = call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() new < new long long new long long new long long Random int long decl IList PositiveIntOutputs decl Builder decl SortedDictionary BytesReader decl SortedSet int string decl FST int IntsRef decl FST decl Util public virtual public virtual decl_stmt System.Random = decl_stmt int = decl_stmt System.Collections.Generic.SortedDictionary < = new < decl_stmt System.Collections.Generic.SortedSet < = new < decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt Lucene.Net.Util.IntsRef = new for = < ++ decl_stmt string while = if ! call decl SortedDictionary.ContainsKey() call decl SortedDictionary.ContainsKey() call decl SortedDictionary.ContainsKey() call decl SortedDictionary.ContainsKey() call decl SortedDictionary.ContainsKey() break for = < ++ call decl SortedSet.Add() call decl SortedSet.Add() call decl SortedSet.Add() call decl SortedSet.Add() call decl SortedSet.Add() call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() decl_stmt int = = long foreach < in call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() decl_stmt BytesReader = foreach in decl_stmt long = decl_stmt Lucene.Net.Util.Fst.FST < = call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() new < for = < ++ if call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() int == += decl_stmt int = decl_stmt Lucene.Net.Util.Fst.Util < = decl_stmt System.Collections.Generic.IList < = new < foreach < in if call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new new new - > call decl IList.Sort() call decl IList.Sort() call decl IList.Sort() call decl IList.Sort() call decl IList.Sort() new if > call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() for = < ++ int public virtual public virtual decl_stmt int = if == return else return decl SortedDictionary long Pair decl IList decl PairOutputs decl Builder int BytesReader decl SortedSet Random int string decl FST decl FST IntsRef long decl Util public virtual public virtual decl_stmt int = decl_stmt System.Collections.Generic.SortedDictionary < = new < decl_stmt System.Collections.Generic.SortedSet < = new < decl_stmt Lucene.Net.Util.Fst.PairOutputs < = new < decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt Lucene.Net.Util.IntsRef = new decl_stmt System.Random = for = < ++ decl_stmt string while = if ! call decl SortedDictionary.ContainsKey() call decl SortedDictionary.ContainsKey() call decl SortedDictionary.ContainsKey() call decl SortedDictionary.ContainsKey() call decl SortedDictionary.ContainsKey() break for = < ++ call decl SortedSet.Add() call decl SortedSet.Add() call decl SortedSet.Add() call decl SortedSet.Add() call decl SortedSet.Add() call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() decl_stmt int = decl_stmt int = = new foreach < in decl_stmt long = decl_stmt long = call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() decl_stmt BytesReader = foreach in decl_stmt System.Data.Common.Utils.Pair = decl_stmt Lucene.Net.Util.Fst.FST < = call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() new < for = < ++ if call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() int == = call decl PairOutputs.Add() call decl PairOutputs.Add() call decl PairOutputs.Add() call decl PairOutputs.Add() call decl PairOutputs.Add() decl_stmt int = decl_stmt Lucene.Net.Util.Fst.Util < = decl_stmt System.Collections.Generic.IList < = new < foreach < in if call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new new new call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() call decl PairOutputs.NewPair() - - > call decl IList.Sort() call decl IList.Sort() call decl IList.Sort() call decl IList.Sort() call decl IList.Sort() new if > call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() for = < ++ ByteSequenceOutputs decl Builder decl sbyte decl FST BytesRef IntsRef BytesRef public virtual public virtual decl_stmt Lucene.Net.Util.Fst.ByteSequenceOutputs = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt sbyte = new decl_stmt Lucene.Net.Util.IntsRef = new call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) = decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ = = sbyte call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() for = < ++ = decl_stmt Lucene.Net.Util.BytesRef = for = < ++ +