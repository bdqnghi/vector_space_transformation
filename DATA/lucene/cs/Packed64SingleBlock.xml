Lucene.Net.Util.Packed System using System.Diagnostics using System.Linq using Lucene.Net.Support using Lucene.Net.Store.DataInput class Lucene.Net.Util.Packed.Packed64SingleBlock super decl int decl long int public static public static return call decl int.ToList() call decl int.ToList() call decl int.ToList() call decl int.ToList() call decl int.ToList() >= private static private static return / + == : public override public override public override public override return + * + + decl Decoder int int decl PackedInts int int int public override public override > + + >= && < = - + <= decl_stmt int = decl_stmt int = / decl_stmt int = if != for = < && && ++ ++ = ++ -- if == return - == decl_stmt Lucene.Net.Util.Packed.Decoder = call decl PackedInts.LongBlockCount() call decl PackedInts.LongBlockCount() call decl PackedInts.LongBlockCount() call decl PackedInts.LongBlockCount() call decl PackedInts.LongBlockCount() == call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() == decl_stmt int = / decl_stmt int = + / - call decl PackedInts.Decode() call decl PackedInts.Decode() call decl PackedInts.Decode() call decl PackedInts.Decode() call decl PackedInts.Decode() decl_stmt int = * += -= if > return - else == return int int int int int int BulkOperation public override public override > + + >= && < = - + <= decl_stmt int = decl_stmt int = / decl_stmt int = if != for = < && && ++ ++ ++ -- if == return - == decl_stmt Lucene.Net.Util.Packed.BulkOperation = call BulkOperation.LongBlockCount() call BulkOperation.LongBlockCount() call BulkOperation.LongBlockCount() call BulkOperation.LongBlockCount() call BulkOperation.LongBlockCount() == call BulkOperation.LongValueCount() call BulkOperation.LongValueCount() call BulkOperation.LongValueCount() call BulkOperation.LongValueCount() call BulkOperation.LongValueCount() == decl_stmt int = / decl_stmt int = + / - call BulkOperation.Encode() call BulkOperation.Encode() call BulkOperation.Encode() call BulkOperation.Encode() call BulkOperation.Encode() decl_stmt int = * += -= if > return - else == return int long int int int public override public override >= <= <= decl_stmt int = / if - <= << return decl_stmt int = if != for = < ++ ++ == decl_stmt int = / decl_stmt int = / * == decl_stmt long = for = < ++ = | << * for = * < ++ return public override public override return + + + + + + + Packed64SingleBlock public static public static decl_stmt Lucene.Net.Util.Packed.Packed64SingleBlock = for = < ++ = return public static public static switch case return new case return new case return new case return new case return new case return new case return new case return new case return new case return new case return new case return new case return new case return new default: throw new + int int int public override public override decl_stmt int = uint >> decl_stmt int = & decl_stmt int = << return ulong >> & int int int public override public override decl_stmt int = uint >> decl_stmt int = & decl_stmt int = << = & ~ << | << int int int public override public override decl_stmt int = uint >> decl_stmt int = & decl_stmt int = << return ulong >> & int int int public override public override decl_stmt int = uint >> decl_stmt int = & decl_stmt int = << = & ~ << | << int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * return ulong >> & int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * = & ~ << | << int int int public override public override decl_stmt int = uint >> decl_stmt int = & decl_stmt int = << return ulong >> & int int int public override public override decl_stmt int = uint >> decl_stmt int = & decl_stmt int = << = & ~ << | << int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * return ulong >> & int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * = & ~ << | << int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * return ulong >> & int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * = & ~ << | << int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * return ulong >> & int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * = & ~ << | << int int int public override public override decl_stmt int = uint >> decl_stmt int = & decl_stmt int = << return ulong >> & int int int public override public override decl_stmt int = uint >> decl_stmt int = & decl_stmt int = << = & ~ << | << int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * return ulong >> & int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * = & ~ << | << int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * return ulong >> & int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * = & ~ << | << int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * return ulong >> & int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * = & ~ << | << int int int public override public override decl_stmt int = uint >> decl_stmt int = & decl_stmt int = << return ulong >> & int int int public override public override decl_stmt int = uint >> decl_stmt int = & decl_stmt int = << = & ~ << | << int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * return ulong >> & int int int public override public override decl_stmt int = / decl_stmt int = decl_stmt int = * = & ~ << | << int int int public override public override decl_stmt int = uint >> decl_stmt int = & decl_stmt int = << return ulong >> & int int int public override public override decl_stmt int = uint >> decl_stmt int = & decl_stmt int = << = & ~ << | <<