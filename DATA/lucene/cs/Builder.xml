Lucene.Net.Util.Fst System using System.Diagnostics using Lucene.Net.Util.Packed.PackedInts class decl NodeHash int T int bool float bool decl FST IntsRef decl FreezeTail int return return return == : long CompiledNode private private < decl_stmt long if != && || <= && <= if == = call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() else = call decl NodeHash.Add() call decl NodeHash.Add() call decl NodeHash.Add() call decl NodeHash.Add() call decl NodeHash.Add() else = call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() call decl FST.AddNode() != - decl_stmt CompiledNode = new = return decl UnCompiledNode decl UnCompiledNode decl UnCompiledNode bool int T bool bool private private if != else decl_stmt int = for = >= -- decl_stmt bool = decl_stmt bool = decl_stmt UnCompiledNode < = decl_stmt UnCompiledNode < = - if < = = else if > if < || == && == && > = else = = else = == if < || == && == && > for = < ++ decl_stmt UnCompiledNode < = < call decl UnCompiledNode.Clear() call decl UnCompiledNode.Clear() call decl UnCompiledNode.Clear() call decl UnCompiledNode.Clear() call decl UnCompiledNode.Clear() = if call decl UnCompiledNode.Clear() call decl UnCompiledNode.Clear() call decl UnCompiledNode.Clear() call decl UnCompiledNode.Clear() call decl UnCompiledNode.Clear() call decl UnCompiledNode.DeleteLast() call decl UnCompiledNode.DeleteLast() call decl UnCompiledNode.DeleteLast() call decl UnCompiledNode.DeleteLast() call decl UnCompiledNode.DeleteLast() + - else if != - decl_stmt T = decl_stmt bool = || == if call decl UnCompiledNode.ReplaceLast() call decl UnCompiledNode.ReplaceLast() call decl UnCompiledNode.ReplaceLast() call decl UnCompiledNode.ReplaceLast() call decl UnCompiledNode.ReplaceLast() + - + - else call decl UnCompiledNode.ReplaceLast() call decl UnCompiledNode.ReplaceLast() call decl UnCompiledNode.ReplaceLast() call decl UnCompiledNode.ReplaceLast() call decl UnCompiledNode.ReplaceLast() + - = new < decl UnCompiledNode T int decl UnCompiledNode T decl UnCompiledNode int T int int public virtual public virtual if = == || >= + + + if == ++ = = return decl_stmt int = decl_stmt int = decl_stmt int = while ++ if >= || != break ++ ++ decl_stmt int = + if < + for = < ++ = new < = for = <= ++ - + - ++ decl_stmt UnCompiledNode < = if != || != + = = for = < ++ decl_stmt UnCompiledNode < = decl_stmt UnCompiledNode < = - decl_stmt T = call T.GetLastOutput() call T.GetLastOutput() call T.GetLastOutput() call T.GetLastOutput() call T.GetLastOutput() + - decl_stmt T decl_stmt T if ! call T.Equals() call T.Equals() call T.Equals() call T.Equals() call T.Equals() = call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() = call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call T.SetLastOutput() call T.SetLastOutput() call T.SetLastOutput() call T.SetLastOutput() call T.SetLastOutput() + - call decl UnCompiledNode.PrependOutput() call decl UnCompiledNode.PrependOutput() call decl UnCompiledNode.PrependOutput() call decl UnCompiledNode.PrependOutput() call decl UnCompiledNode.PrependOutput() else = = = call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() if == && == + = call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() else - + - call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) private private return || ! decl UnCompiledNode public virtual < public virtual < decl_stmt UnCompiledNode < = if < || < || == if == return else if > || > return else if != call decl FST.Finish() call decl FST.Finish() call decl FST.Finish() call decl FST.Finish() call decl FST.Finish() if return call decl FST.Pack() call decl FST.Pack() call decl FST.Pack() call decl FST.Pack() call decl FST.Pack() / else return decl Arc decl UnCompiledNode private private < for = < ++ decl_stmt Arc < = if ! decl_stmt UnCompiledNode < = < if == = = = - public virtual public virtual return call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() return return public public = = = = public public > - == return - decl Arc public public >= if != > - + - + + + + if == for = < ++ = new < = decl_stmt Arc < = ++ = = = = = decl Arc public public > decl_stmt Arc < = - == + + + = = = public public > == - == - -- decl Arc public public > decl_stmt Arc < = - == = public public for = < ++ = if =