Lucene.Net.Analysis System.Linq using Apache.NMS.Util using Lucene.Net.Documents using Lucene.Net.Index using NUnit.Framework using System using System.Collections.Generic using System.Diagnostics using System.Text using System.Threading using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Randomized.Generators using Lucene.Net.Support using System.Globalization using System.IO using Lucene.Net.Util.Attribute Lucene.Net.Store.Directory Documents.Document Field FieldType Lucene.Net.Util.IAttribute Lucene.Net.Util.IOUtils Lucene.Net.Util.LineFileDocs Lucene.Net.Util.LuceneTestCase Lucene.Net.Index.RandomIndexWriter Lucene.Net.Util.TestUtil TextField class Lucene.Net.Analysis.BaseTokenStreamTestCase super super LuceneTestCase bool decl_stmt bool = = return public override public override = public override public override return is && == public override public override return ^ public override public override bool var decl IDictionary var int IKeywordAttribute IPositionIncrementAttribute int decl IDictionary int int IPositionLengthAttribute ICharTermAttribute int int int IOffsetAttribute ITypeAttribute public static public static ? ? decl_stmt var = < decl_stmt Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute = if > < = < decl_stmt Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute = if != || != || != < = < decl_stmt Lucene.Net.Analysis.Tokenattributes.ITypeAttribute = if != < = < decl_stmt Lucene.Net.Analysis.Tokenattributes.IPositionIncrementAttribute = if != || != < = < decl_stmt Lucene.Net.Analysis.Tokenattributes.IPositionLengthAttribute = if != < = < decl_stmt Lucene.Net.Analysis.Tokenattributes.IKeywordAttribute = if != < = < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < ? ? = new < ? ? decl_stmt SpellChecker.Net.Search.Spell.IDictionary < ? ? = new < ? ? decl_stmt int = - decl_stmt int = for = < ++ call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.SetEmpty() if != call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) if != = if != = if != = if != = & == decl_stmt bool = + + call ICharTermAttribute.ToString() call ICharTermAttribute.ToString() call ICharTermAttribute.ToString() call ICharTermAttribute.ToString() call ICharTermAttribute.ToString() + + + + + call ICharTermAttribute.ToString() call ICharTermAttribute.ToString() call ICharTermAttribute.ToString() call ICharTermAttribute.ToString() call ICharTermAttribute.ToString() if != call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() + if != call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() + if != + if != + if != + if != + if != decl_stmt int = call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() decl_stmt int = call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() if != <= int <= int + + + int if call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() >= + + + = call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() if && != && != decl_stmt int = += decl_stmt int = if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() = else int + + + + + decl_stmt int = + if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() = else int + + + + + if != if == >= else >= if != >= if + + + if != call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.SetEmpty() if != call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) if != = if != = if != = decl_stmt var = if != int call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() if != call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() >= if != int public static public static ? public static public static ? public static public static ? public static public static ? public static public static public static public static public static public static public static public static public static public static public static public static ? public static public static public static public static ? public static public static ? public static public static new public static public static new public static public static new public static public static public static public static public static public static public static public static public static public static public static public static TokenStream internal static internal static decl_stmt Lucene.Net.Analysis.TokenStream = new try if call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.ReflectAsString() call TokenStream.ReflectAsString() call TokenStream.ReflectAsString() call TokenStream.ReflectAsString() call TokenStream.ReflectAsString() catch catch != && catch + finally call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() while call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call TokenStream.Dispose() call TokenStream.Dispose() call TokenStream.Dispose() call TokenStream.Dispose() call TokenStream.Dispose() = new call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() while call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() try = new catch finally call TokenStream.Dispose() call TokenStream.Dispose() call TokenStream.Dispose() call TokenStream.Dispose() call TokenStream.Dispose() public static public static new public static public static public static public static public static public static bool public override public override decl_stmt bool = try if != await new int = catch + throw finally = ! public static public static bool int bool RandomIndexWriter long var string var bool Directory public static public static decl_stmt long = decl_stmt bool = decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = decl_stmt string = decl_stmt bool = * < || ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() || call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() if && = = new new int decl_stmt bool = try new int decl_stmt int = decl_stmt var = new decl_stmt var = new for = < ++ = new call var.countDown() call var.countDown() call var.countDown() call var.countDown() call var.countDown() foreach in try catch if call var.Any() call var.Any() call var.Any() call var.Any() call var.Any() = finally if else StringReader string LineFileDocs string Field bool FieldType Document int int var private static private static decl_stmt Lucene.Net.Util.LineFileDocs = new decl_stmt Lucene.Net.Documents.Document = decl_stmt Lucene.Net.Documents.Field = = decl_stmt System.IO.StringReader = new if != = new decl_stmt Lucene.Net.Documents.FieldType = new if = = = if && ! = if = decl_stmt string = decl_stmt bool = ! switch case = break case = break case = break default: if && = else = break = = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) try for = < ++ decl_stmt string if == = call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() if > decl_stmt int = - if > && -- decl_stmt int = + - if -- = call int.Substring() call int.Substring() call int.Substring() call int.Substring() call int.Substring() + - else = try if != if == decl_stmt var = call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) else if > = call Lucene.Net.Documents.Document.RemoveFields(string) call Lucene.Net.Documents.Document.RemoveFields(string) call Lucene.Net.Documents.Document.RemoveFields(string) call Lucene.Net.Documents.Document.RemoveFields(string) call Lucene.Net.Documents.Document.RemoveFields(string) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) catch + + + + throw finally int StringBuilder int public static public static decl_stmt int = decl_stmt System.Text.StringBuilder = new while < decl_stmt int = if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if >= && < call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) char else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) ++ return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public static public static public static public static decl IList decl IList decl IList IPositionIncrementAttribute TokenStream decl IList decl IList MockReaderWrapper IPositionLengthAttribute ICharTermAttribute decl IList int StringReader IOffsetAttribute int long ITypeAttribute int private static private static if + + decl_stmt Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute decl_stmt Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute decl_stmt Lucene.Net.Analysis.Tokenattributes.IPositionIncrementAttribute decl_stmt Lucene.Net.Analysis.Tokenattributes.IPositionLengthAttribute decl_stmt Lucene.Net.Analysis.Tokenattributes.ITypeAttribute decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < decl_stmt int = decl_stmt System.IO.StringReader = new decl_stmt Lucene.Net.Analysis.TokenStream using = new : = < < : = < < : = < < : = < < : = < < : call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() while call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call ICharTermAttribute.ToString() call ICharTermAttribute.ToString() call ICharTermAttribute.ToString() call ICharTermAttribute.ToString() call ICharTermAttribute.ToString() if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() if > if != decl_stmt int = if == if + decl_stmt Lucene.Net.Analysis.MockReaderWrapper = new call Lucene.Net.Analysis.MockReaderWrapper.ThrowExcAfterChar(int) call Lucene.Net.Analysis.MockReaderWrapper.ThrowExcAfterChar(int) call Lucene.Net.Analysis.MockReaderWrapper.ThrowExcAfterChar(int) call Lucene.Net.Analysis.MockReaderWrapper.ThrowExcAfterChar(int) call Lucene.Net.Analysis.MockReaderWrapper.ThrowExcAfterChar(int) = try = new : call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() while call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() catch try call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() catch if else throw finally call TokenStream.Dispose() call TokenStream.Dispose() call TokenStream.Dispose() call TokenStream.Dispose() call TokenStream.Dispose() else if == decl_stmt int = if + + + + + = new = new : call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() for = < ++ call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() try call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() catch if else throw finally call TokenStream.Dispose() call TokenStream.Dispose() call TokenStream.Dispose() call TokenStream.Dispose() call TokenStream.Dispose() if + + + = new decl_stmt long = = new int if == if + = new = new : if != && != && != && != call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() else if != && != && != call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() else if != && != && != call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() else if != && != call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() else if != call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() else call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() if != = new = new int if == if + = new = new : StringWriter TokenStream protected internal virtual protected internal virtual decl_stmt System.IO.StringWriter = new decl_stmt Lucene.Net.Analysis.TokenStream = new call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() new return call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() TokenStream StreamWriter protected internal virtual protected internal virtual decl_stmt System.IO.StreamWriter = new new decl_stmt Lucene.Net.Analysis.TokenStream = new call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() new call System.IO.StreamWriter.Close() call System.IO.StreamWriter.Close() call System.IO.StreamWriter.Close() call System.IO.StreamWriter.Close() call System.IO.StreamWriter.Close() decl int int internal static internal static < decl_stmt int = new decl_stmt int = foreach in ++ = return