Lucene.Net.Index Apache.NMS.Util using System using System.Collections.Concurrent using System.Collections.Generic using System.Text using Lucene.Net.Documents using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Documents.Document Field Lucene.Net.Codecs.Lucene3x.Lucene3xCodec Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Util.TestUtil class attribute Lucene.Net.Index.TestBagOfPostings super super LuceneTestCase comment Terms string IndexWriterConfig TermsEnum BytesRef CountDownLatch DirectoryReader RandomIndexWriter bool int decl IList decl ThreadClass int int int AtomicReader decl ConcurrentQueue Directory public virtual public virtual decl_stmt System.Collections.Generic.IList < = new < decl_stmt int = decl_stmt int = decl_stmt bool = decl_stmt Lucene.Net.Index.IndexWriterConfig = new if || is && || > /= if + + for = < ++ decl_stmt string = for = < ++ call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = decl_stmt System.Threading.Tasks.Dataflow.Internal.Collections.ConcurrentQueue < = new < decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt int = if + + decl_stmt Lucene.Net.Support.ThreadClass = new decl_stmt CountDownLatch = new for = < ++ = new call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() foreach in call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) - if is == - call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt Lucene.Net.Util.BytesRef while = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != decl_stmt int = call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() Field decl HashSet Document string StringBuilder public override public override try decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.Field = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) while ! == decl_stmt System.Text.StringBuilder = new decl_stmt System.Collections.Generic.HashSet < = new < for = < ++ decl_stmt string if ! out break if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() break call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) catch throw new