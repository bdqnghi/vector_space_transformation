Lucene.Net.Util Lucene.Net.Support using System using System.Collections.Generic using System.Diagnostics using class Lucene.Net.Util.CharsRef super super ICharSequence super ICloneable decl IComparer decl char public public return new int int int public override public override decl_stmt int const const = decl_stmt int = decl_stmt int = + for = < ++ = * + return var public override public override if == return decl_stmt var = as if != return return decl char int int public public if == decl_stmt int = decl_stmt char = decl_stmt int = + for = < ++ , ++ if != return return else return int int int int int decl char decl char public public if == return decl_stmt char = decl_stmt int = decl_stmt char = decl_stmt int = decl_stmt int = + while < decl_stmt int = ++ decl_stmt int = ++ if > return else if < return - return - public public public public == if < = public public if - < = new = = int var public public decl_stmt int = + if - < decl_stmt var = new = = + = public override public override return new public public if < || >= throw new return + public public if < || || || > throw new return new + - return int int char int char decl char decl char public virtual public virtual if == return decl_stmt char = decl_stmt int = decl_stmt char = decl_stmt int = decl_stmt int = + while < decl_stmt char = ++ decl_stmt char = ++ if != if >= && >= if >= -= char else += char if >= -= char else += char return int - int return - CharsRef public static public static decl_stmt Lucene.Net.Util.CharsRef = new call Lucene.Net.Util.CharsRef.CopyChars(char,int,int) call Lucene.Net.Util.CharsRef.CopyChars(char,int,int) call Lucene.Net.Util.CharsRef.CopyChars(char,int,int) call Lucene.Net.Util.CharsRef.CopyChars(char,int,int) call Lucene.Net.Util.CharsRef.CopyChars(char,int,int) return if == throw new if < throw new + if > throw new + + + if < throw new + if > throw new + + + if + < throw new + + + if + > throw new + + + + + return