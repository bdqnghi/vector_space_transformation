Lucene.Net.Index System using System.Collections.Generic using System.Text using Lucene.Net.Documents using Lucene.Net.Randomized.Generators using NUnit.Framework using Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Lucene.Net.Search.DocIdSetIterator Documents.Document Field FieldType Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Util.TestUtil TextField class attribute Lucene.Net.Index.TestDocsAndPositions super super LuceneTestCase string public override public override = + int FieldType DocsAndPositionsEnum Document RandomIndexWriter BytesRef IndexReaderContext string int IndexReader Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new new for = < ++ decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.FieldType = new = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) + + + call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.IndexReader = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() decl_stmt int = for = < ++ decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt IndexReaderContext = foreach in decl_stmt DocsAndPositionsEnum = if == continue decl_stmt int = call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() do decl_stmt string = + + + call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() TermsEnum Terms public virtual public virtual decl_stmt Lucene.Net.Index.Terms = if != decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) return call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) return int int IndexReaderContext int int RandomIndexWriter int IndexReader int DocsAndPositionsEnum int decl int decl int int int int decl List StringBuilder FieldType BytesRef Document Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new new decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int ? = new int decl_stmt Lucene.Net.Documents.FieldType = new = for = < ++ decl_stmt Lucene.Net.Documents.Document = new decl_stmt System.Collections.Generic.List < ? = new < ? decl_stmt System.Text.StringBuilder = new decl_stmt int = for = < ++ decl_stmt int = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) = call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.IndexReader = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() decl_stmt int = for = < ++ decl_stmt Lucene.Net.Util.BytesRef = new + decl_stmt IndexReaderContext = foreach in decl_stmt DocsAndPositionsEnum = decl_stmt int = decl_stmt int = if = call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() else = call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() do decl_stmt int = call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() if == break decl_stmt int ? = + call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() decl_stmt int = == - : for = < ++ call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() + + + + + + + + + if == if call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() + + - == break call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() int FieldType int int int StringBuilder RandomIndexWriter BytesRef IndexReader decl int IndexReaderContext int int DocsEnum Document int int Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new new decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = new decl_stmt Lucene.Net.Documents.FieldType = new = for = < ++ decl_stmt Lucene.Net.Documents.Document = new decl_stmt System.Text.StringBuilder = new for = < ++ decl_stmt int = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == ++ call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.IndexReader = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() decl_stmt int = for = < ++ decl_stmt Lucene.Net.Util.BytesRef = new + decl_stmt IndexReaderContext = foreach in decl_stmt int = decl_stmt Lucene.Net.Index.DocsEnum = if + == continue call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() for = < ++ if + != call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() + if == && == decl_stmt int = + + + - decl_stmt int = call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() if >= else >= + + + else call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() + + + + + call DocsEnum.GetType() call DocsEnum.GetType() call DocsEnum.GetType() call DocsEnum.GetType() call DocsEnum.GetType() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() private static private static for = < ++ if != return return FieldType int int DocsAndPositionsEnum Document StringBuilder RandomIndexWriter BytesRef IndexReaderContext int IndexReader string int Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new new decl_stmt int = decl_stmt Lucene.Net.Documents.FieldType = new = for = < ++ decl_stmt Lucene.Net.Documents.Document = new decl_stmt System.Text.StringBuilder = new for = < ++ if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.IndexReader = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() decl_stmt int = for = < ++ decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt IndexReaderContext = foreach in decl_stmt DocsAndPositionsEnum = decl_stmt int = decl_stmt int = if = call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() else = call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() decl_stmt string = + + + / call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() for = < += call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() + + + call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() + + call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() int Document RandomIndexWriter AtomicReader DirectoryReader DocsEnum TermsEnum Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.DocsEnum = new decl_stmt int = call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() - call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != decl_stmt Lucene.Net.Index.TermsEnum = call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) new = = call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() - call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() int Document RandomIndexWriter AtomicReader DirectoryReader DocsAndPositionsEnum TermsEnum Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt DocsAndPositionsEnum = call Lucene.Net.Index.AtomicReader.TermPositionsEnum(Term) call Lucene.Net.Index.AtomicReader.TermPositionsEnum(Term) call Lucene.Net.Index.AtomicReader.TermPositionsEnum(Term) call Lucene.Net.Index.AtomicReader.TermPositionsEnum(Term) call Lucene.Net.Index.AtomicReader.TermPositionsEnum(Term) new decl_stmt int = call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() - call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != decl_stmt Lucene.Net.Index.TermsEnum = call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) new = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) = call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() - call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose()