Lucene.Net.Codecs.Lucene3x System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Store.CompoundFileDirectory Lucene.Net.Store.Directory Lucene.Net.Index.IndexFileNames Lucene.Net.Index.IndexFormatTooNewException Lucene.Net.Index.IndexFormatTooOldException Lucene.Net.Store.IndexInput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Index.SegmentCommitInfo Lucene.Net.Index.SegmentInfo Lucene.Net.Index.SegmentInfos class attribute Lucene.Net.Codecs.Lucene3x.Lucene3xSegmentInfoReader super super SegmentInfoReader SegmentCommitInfo SegmentInfo Directory Lucene3xSegmentInfoReader public static public static = = decl_stmt Lucene.Net.Codecs.Lucene3x.Lucene3xSegmentInfoReader = new for = > -- decl_stmt Lucene.Net.Index.SegmentCommitInfo = call Lucene3xSegmentInfoReader.ReadLegacySegmentInfo() call Lucene3xSegmentInfoReader.ReadLegacySegmentInfo() call Lucene3xSegmentInfoReader.ReadLegacySegmentInfo() call Lucene3xSegmentInfoReader.ReadLegacySegmentInfo() call Lucene3xSegmentInfoReader.ReadLegacySegmentInfo() decl_stmt Lucene.Net.Index.SegmentInfo = if == decl_stmt Lucene.Net.Store.Directory = if != - if = new else if = new try finally if != call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() = else if call SegmentInfo.Version() call SegmentInfo.Version() call SegmentInfo.Version() call SegmentInfo.Version() call SegmentInfo.Version() call SegmentInfo.Version() call SegmentInfo.Version() call SegmentInfo.Version() call SegmentInfo.Version() throw new + + + = IndexInput SegmentInfo bool string public override public override decl_stmt string = decl_stmt bool = decl_stmt Lucene.Net.Store.IndexInput = try decl_stmt Lucene.Net.Index.SegmentInfo = = return finally if ! else call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() private static private static < if decl ISet long byte int string SegmentInfo decl IDictionary decl IDictionary int string int string int int SegmentCommitInfo decl IDictionary bool bool long bool private private if > throw new if < throw new decl_stmt string if <= = else = decl_stmt string = decl_stmt int = decl_stmt long = decl_stmt int = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < decl_stmt string decl_stmt bool if != - = = == = = = else = = decl_stmt byte = == + + + decl_stmt int = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < if == = else = new < for = < ++ = decl_stmt bool = == decl_stmt int = <= decl_stmt bool = == decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = if <= decl_stmt int = decl_stmt System.Collections.Generic.ISet < = new < if call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() else if != - if call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() else call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() else if ! call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() if != = foreach < in decl_stmt long = if >= call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() + + = else if == else decl_stmt Lucene.Net.Index.SegmentInfo = new = decl_stmt Lucene.Net.Index.SegmentCommitInfo = new - return decl ISet SegmentInfo int string decl IDictionary decl IDictionary bool private private decl_stmt string = decl_stmt int = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = decl_stmt bool = == decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = decl_stmt System.Collections.Generic.ISet < = decl_stmt Lucene.Net.Index.SegmentInfo = new = return