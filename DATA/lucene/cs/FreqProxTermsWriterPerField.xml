Lucene.Net.Index Lucene.Net.Analysis.Tokenattributes using System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Util.BytesRef Lucene.Net.Codecs.FieldsConsumer Lucene.Net.Util.FixedBitSet Lucene.Net.Analysis.Tokenattributes.OffsetAttribute Lucene.Net.Analysis.Tokenattributes.PayloadAttribute Lucene.Net.Codecs.PostingsConsumer Lucene.Net.Util.RamUsageEstimator Lucene.Net.Codecs.TermsConsumer Lucene.Net.Codecs.TermStats class Lucene.Net.Index.FreqProxTermsWriterPerField super super TermsHashConsumerPerField TermsHashPerField FreqProxTermsWriter FieldInvertState IPayloadAttribute bool decl DocState bool IOffsetAttribute decl DocumentsWriterPerThread FieldInfo bool bool if ! return else return internal override internal override if call FieldInfo.SetStorePayloads() call FieldInfo.SetStorePayloads() call FieldInfo.SetStorePayloads() call FieldInfo.SetStorePayloads() call FieldInfo.SetStorePayloads() internal override internal override public public return call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() internal internal = = if == = = = else = >= = >= = >= internal override internal override for = < ++ if return return internal override internal override if call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() < = call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() < else = if = call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() < else = BytesRef FreqProxPostingsArray internal internal decl_stmt Lucene.Net.Util.BytesRef if == = else = if != && > call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) << | call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteBytes(int,byte,int,int) call Lucene.Net.Index.TermsHashPerField.WriteBytes(int,byte,int,int) call Lucene.Net.Index.TermsHashPerField.WriteBytes(int,byte,int,int) call Lucene.Net.Index.TermsHashPerField.WriteBytes(int,byte,int,int) call Lucene.Net.Index.TermsHashPerField.WriteBytes(int,byte,int,int) = else call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) << decl_stmt FreqProxPostingsArray = = FreqProxPostingsArray int int internal internal decl_stmt int = + call IPayloadAttribute.StartOffset() call IPayloadAttribute.StartOffset() call IPayloadAttribute.StartOffset() call IPayloadAttribute.StartOffset() call IPayloadAttribute.StartOffset() decl_stmt int = + call IPayloadAttribute.EndOffset() call IPayloadAttribute.EndOffset() call IPayloadAttribute.EndOffset() call IPayloadAttribute.EndOffset() call IPayloadAttribute.EndOffset() decl_stmt FreqProxPostingsArray = - >= call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) - call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) - = FreqProxPostingsArray internal override internal override call decl DocumentsWriterPerThread.TestPoint() call decl DocumentsWriterPerThread.TestPoint() call decl DocumentsWriterPerThread.TestPoint() call decl DocumentsWriterPerThread.TestPoint() call decl DocumentsWriterPerThread.TestPoint() decl_stmt FreqProxPostingsArray = = if ! = else = << = if if else ! = ++ FreqProxPostingsArray internal override internal override call decl DocumentsWriterPerThread.TestPoint() call decl DocumentsWriterPerThread.TestPoint() call decl DocumentsWriterPerThread.TestPoint() call decl DocumentsWriterPerThread.TestPoint() call decl DocumentsWriterPerThread.TestPoint() decl_stmt FreqProxPostingsArray = ! || > if ! == if != > call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) = - = ++ else if != > + + + + + if == call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) | else call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) call Lucene.Net.Index.TermsHashPerField.WriteVInt(int,int) = = = - << = if if = else ! ++ else = ++ if - if internal override internal override return new internal override internal override return new != != != FreqProxPostingsArray internal override internal override is decl_stmt FreqProxPostingsArray = if != != if != != if != != int internal override internal override decl_stmt int = + * if != += if != += if != += return public public decl IndexOptions bool int int int BytesRef int bool FixedBitSet int ByteSliceReader int long Term bool decl int bool BytesRef int decl FieldInfo int int bool int FreqProxPostingsArray int int long long PostingsConsumer TermsConsumer decl IDictionary ByteSliceReader decl IComparer int bool internal internal if ! return decl_stmt Lucene.Net.Codecs.TermsConsumer = decl_stmt System.Collections.Generic.IComparer < = decl_stmt IndexOptions ? = != decl_stmt bool = >= decl_stmt bool = >= decl_stmt bool = >= decl_stmt bool = decl_stmt bool = decl_stmt bool = ! || ! || ! || ! || decl_stmt SpellChecker.Net.Search.Spell.IDictionary < ? if != && > = else = decl_stmt int = call Lucene.Net.Index.TermsHashPerField.SortPostings(IComparer) call Lucene.Net.Index.TermsHashPerField.SortPostings(IComparer) call Lucene.Net.Index.TermsHashPerField.SortPostings(IComparer) call Lucene.Net.Index.TermsHashPerField.SortPostings(IComparer) call Lucene.Net.Index.TermsHashPerField.SortPostings(IComparer) decl_stmt int = call TermsHashPerField.BytesHash() call TermsHashPerField.BytesHash() call TermsHashPerField.BytesHash() call TermsHashPerField.BytesHash() call TermsHashPerField.BytesHash() call TermsHashPerField.BytesHash() call TermsHashPerField.BytesHash() call TermsHashPerField.BytesHash() call TermsHashPerField.BytesHash() decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt FreqProxPostingsArray = decl_stmt Lucene.Net.Index.ByteSliceReader = new decl_stmt Lucene.Net.Index.ByteSliceReader = new decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new decl_stmt long = decl_stmt long = decl_stmt Lucene.Net.Index.Term = new for = < ++ decl_stmt int = decl_stmt int = call TermsHashPerField.BytePool() call TermsHashPerField.BytePool() call TermsHashPerField.BytePool() call TermsHashPerField.BytePool() call TermsHashPerField.BytePool() call TermsHashPerField.BytePool() call TermsHashPerField.BytePool() call TermsHashPerField.BytePool() call TermsHashPerField.BytePool() call Lucene.Net.Index.TermsHashPerField.InitReader(ByteSliceReader,int,int) call Lucene.Net.Index.TermsHashPerField.InitReader(ByteSliceReader,int,int) call Lucene.Net.Index.TermsHashPerField.InitReader(ByteSliceReader,int,int) call Lucene.Net.Index.TermsHashPerField.InitReader(ByteSliceReader,int,int) call Lucene.Net.Index.TermsHashPerField.InitReader(ByteSliceReader,int,int) if || call Lucene.Net.Index.TermsHashPerField.InitReader(ByteSliceReader,int,int) call Lucene.Net.Index.TermsHashPerField.InitReader(ByteSliceReader,int,int) call Lucene.Net.Index.TermsHashPerField.InitReader(ByteSliceReader,int,int) call Lucene.Net.Index.TermsHashPerField.InitReader(ByteSliceReader,int,int) call Lucene.Net.Index.TermsHashPerField.InitReader(ByteSliceReader,int,int) decl_stmt Lucene.Net.Codecs.PostingsConsumer = call TermsConsumer.StartTerm() call TermsConsumer.StartTerm() call TermsConsumer.StartTerm() call TermsConsumer.StartTerm() call TermsConsumer.StartTerm() decl_stmt int ? if != = decl_stmt int ? call bool.TryGetValue() call bool.TryGetValue() call bool.TryGetValue() call bool.TryGetValue() call bool.TryGetValue() out if != = else = else = decl_stmt int = decl_stmt long = decl_stmt int = while decl_stmt int if call FreqProxPostingsArray.Eof() call FreqProxPostingsArray.Eof() call FreqProxPostingsArray.Eof() call FreqProxPostingsArray.Eof() call FreqProxPostingsArray.Eof() if != - = if = else = - = - else break else decl_stmt int = call FreqProxPostingsArray.ReadVInt() call FreqProxPostingsArray.ReadVInt() call FreqProxPostingsArray.ReadVInt() call FreqProxPostingsArray.ReadVInt() call FreqProxPostingsArray.ReadVInt() if ! += = - else += uint >> if & != = else = call FreqProxPostingsArray.ReadVInt() call FreqProxPostingsArray.ReadVInt() call FreqProxPostingsArray.ReadVInt() call FreqProxPostingsArray.ReadVInt() call FreqProxPostingsArray.ReadVInt() != ++ < + + + call ByteSliceReader.Set() call ByteSliceReader.Set() call ByteSliceReader.Set() call ByteSliceReader.Set() call ByteSliceReader.Set() call int.StartDoc() call int.StartDoc() call int.StartDoc() call int.StartDoc() call int.StartDoc() : - if < if == = call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() call decl DocumentsWriterPerThread.DocWriter() if ++ += if || decl_stmt int = decl_stmt int = for = < ++ decl_stmt Lucene.Net.Util.BytesRef if decl_stmt int = call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() += uint >> if & != decl_stmt int = call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() if == = new = new else if < call bool.Grow() call bool.Grow() call bool.Grow() call bool.Grow() call bool.Grow() call Lucene.Net.Index.ByteSliceReader.ReadBytes(byte,int,int) call Lucene.Net.Index.ByteSliceReader.ReadBytes(byte,int,int) call Lucene.Net.Index.ByteSliceReader.ReadBytes(byte,int,int) call Lucene.Net.Index.ByteSliceReader.ReadBytes(byte,int,int) call Lucene.Net.Index.ByteSliceReader.ReadBytes(byte,int,int) = = else = if decl_stmt int = + call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() decl_stmt int = + call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() call ByteSliceReader.ReadVInt() if if >= && >= + + + + + call int.AddPosition() call int.AddPosition() call int.AddPosition() call int.AddPosition() call int.AddPosition() else call int.AddPosition() call int.AddPosition() call int.AddPosition() call int.AddPosition() call int.AddPosition() - - = else if call int.AddPosition() call int.AddPosition() call int.AddPosition() call int.AddPosition() call int.AddPosition() - - call int.FinishDoc() call int.FinishDoc() call int.FinishDoc() call int.FinishDoc() call int.FinishDoc() call TermsConsumer.FinishTerm() call TermsConsumer.FinishTerm() call TermsConsumer.FinishTerm() call TermsConsumer.FinishTerm() call TermsConsumer.FinishTerm() new : - += += call TermsConsumer.Finish() call TermsConsumer.Finish() call TermsConsumer.Finish() call TermsConsumer.Finish() call TermsConsumer.Finish() : - call ByteSliceReader.Cardinality() call ByteSliceReader.Cardinality() call ByteSliceReader.Cardinality() call ByteSliceReader.Cardinality() call ByteSliceReader.Cardinality()