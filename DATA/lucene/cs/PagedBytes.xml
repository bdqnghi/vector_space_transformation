Lucene.Net.Util System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Store.DataInput Lucene.Net.Store.DataOutput Lucene.Net.Store.IndexInput class Lucene.Net.Util.PagedBytes int decl IList int bool int decl byte bool int decl byte decl IList long var var public public >= + <= + + = if == return decl_stmt var = >> decl_stmt var = & if - >= = = else = new = - + - - - var var var public public decl_stmt var = >> decl_stmt var = & decl_stmt var = = if & == = = + else = & << | + & = + > public public return != * : int public public while > decl_stmt int = - if == if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = new = = if < = -= else int += int break int public public decl_stmt int = - if > || == if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = = new = = <= = = = += var public public if throw new if throw new if && < decl_stmt var = new = if == = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = = return new if == return else return * long + public public return + != : * long public public if >= throw new + + if + + > if + > throw new + + + + if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = new = decl_stmt long = if < ++ = byte else ++ = unchecked | >> ++ = unchecked & += return PagedBytesDataInput public override public override decl_stmt PagedBytesDataInput = = return return long * + = >> = = & public override public override if == return byte ++ int int int public override public override >= + decl_stmt int = + while decl_stmt int = - decl_stmt int = - if < += else += break internal internal ++ = = public override public override if == if != = new = ++ = byte int int int public override public override >= + if == return if == if != = new = decl_stmt int = + while decl_stmt int = - decl_stmt int = - if < = new = += else += break return if ! throw new return new if throw new return new