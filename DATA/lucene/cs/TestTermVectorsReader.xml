Lucene.Net.Index Lucene.Net.Analysis.Tokenattributes using System using Lucene.Net.Documents using Lucene.Net.Analysis using NUnit.Framework using System.IO using Lucene.Net.Util.BytesRef Lucene.Net.Codecs.Codec Lucene.Net.Store.Directory Lucene.Net.Search.DocIdSetIterator Documents.Document Field FieldType Lucene.Net.Util.LuceneTestCase Lucene.Net.Codecs.TermVectorsReader Lucene.Net.Util.TestUtil TextField class attribute Lucene.Net.Index.TestTermVectorsReader super super LuceneTestCase decl string bool decl int SegmentCommitInfo decl bool decl string FieldInfos int decl TestToken Directory decl bool private private = new = new * public virtual public virtual return - Document int IndexWriter FieldType TestToken public override public override decl_stmt int = for = < ++ = new for = < ++ = * + new * decl_stmt Lucene.Net.Analysis.TestToken = ++ = new = = = * = * + = decl_stmt Lucene.Net.Index.IndexWriter = new new - decl_stmt Lucene.Net.Documents.Document = new for = < ++ decl_stmt Lucene.Net.Documents.FieldType = new if && = = = else if && ! = = else if ! && = = else = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new for = < ++ call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) = call Lucene.Net.Index.IndexWriter.NewestSegment() call Lucene.Net.Index.IndexWriter.NewestSegment() call Lucene.Net.Index.IndexWriter.NewestSegment() call Lucene.Net.Index.IndexWriter.NewestSegment() call Lucene.Net.Index.IndexWriter.NewestSegment() call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) = public override public override call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() TestToken public sealed override public sealed override if >= return else decl_stmt Lucene.Net.Analysis.TestToken = ++ if > = - - else = + return public override public override = public override public override return new new SegmentReader DirectoryReader public virtual public virtual decl_stmt Lucene.Net.Index.DirectoryReader = foreach in decl_stmt Lucene.Net.Index.SegmentReader = call SegmentReader.FieldInfos() call SegmentReader.FieldInfos() call SegmentReader.FieldInfos() call SegmentReader.FieldInfos() call SegmentReader.FieldInfos() call SegmentReader.FieldInfos() call SegmentReader.FieldInfos() call SegmentReader.FieldInfos() call SegmentReader.FieldInfos() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() TermsEnum string Terms BytesRef TermVectorsReader public virtual public virtual decl_stmt Lucene.Net.Index.TermVectorsReader = for = < ++ decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() for = < ++ decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() decl_stmt string = call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() DocsEnum TermsEnum BytesRef string int Terms TermVectorsReader public virtual public virtual decl_stmt Lucene.Net.Index.TermVectorsReader = for = < ++ decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt Lucene.Net.Index.DocsEnum = for = < ++ decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() decl_stmt string = call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() = decl_stmt int = call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() - call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() Terms string decl BytesRef TermsEnum BytesRef DocsAndPositionsEnum int Terms TermVectorsReader public virtual public virtual decl_stmt Lucene.Net.Index.TermVectorsReader = decl_stmt Lucene.Net.Util.BytesRef decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt DocsAndPositionsEnum = for = < ++ decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() decl_stmt string = call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) decl_stmt int = call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() - call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() for = < ++ call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) = call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() - call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() for = < ++ call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() * call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() * + call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() for = < ++ decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() decl_stmt string = call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() string TermsEnum BytesRef DocsAndPositionsEnum Terms TermVectorsReader public virtual public virtual decl_stmt Lucene.Net.Index.TermVectorsReader = decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) call Lucene.Net.Index.TermVectorsReader.Get(int,System,String,TermVectorMapper) decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() decl_stmt DocsAndPositionsEnum = for = < ++ decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() decl_stmt string = call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() for = < ++ call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() for = < ++ call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() * call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() * + call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() call Lucene.Net.Index.TermVectorsReader.Dispose() Document FieldType RandomIndexWriter Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt Lucene.Net.Documents.FieldType = new = = decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new try call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) catch = new = = = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new try call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) catch = new = = = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new try call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) catch = new = = = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new try call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) catch call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose()