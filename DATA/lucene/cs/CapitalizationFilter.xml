Lucene.Net.Analysis.Miscellaneous System using System.Collections.Generic using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Analysis.Util using class Lucene.Net.Analysis.Miscellaneous.CapitalizationFilter super super TokenFilter int int bool int CharArraySet int ICharTermAttribute decl ICollection int bool char int decl char int int int decl char public override public override if ! return decl_stmt char = call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() decl_stmt int = decl_stmt char = if < = new if < decl_stmt int = decl_stmt int = for = < ++ decl_stmt char = if <= || == decl_stmt int = - if > ++ = + ++ if < - ++ if > call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) return bool private private if < return if && > for = < ++ + = + return if != && call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.CharArraySet.Contains(string) if == && = return if < return if != foreach in if >= decl_stmt bool = for = < ++ if != + = break if return = for = < ++ + = +