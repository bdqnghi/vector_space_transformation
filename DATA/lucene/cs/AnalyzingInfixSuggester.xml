Lucene.Net.Search.Suggest.Analyzing System using System.Collections.Generic using System.IO using System.Text using Lucene.Net.Analysis using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Codecs.Lucene46 using Lucene.Net.Documents using Lucene.Net.Index using Lucene.Net.Store using Lucene.Net.Util using Lucene.Net.Store.Directory System.Version class Lucene.Net.Search.Suggest.Analyzing.AnalyzingInfixSuggester super super Lookup super IDisposable Sort string int Version int IndexWriter Analyzer string SearcherManager Analyzer string Directory IndexWriterConfig protected internal virtual protected internal virtual decl_stmt Lucene.Net.Index.IndexWriterConfig = new = new = = new return protected internal virtual protected internal virtual return BytesRef AtomicReader BytesRef bool public override public override if != call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() = if != call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) = decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt bool = try = new decl_stmt Lucene.Net.Util.BytesRef while = != decl_stmt Lucene.Net.Util.BytesRef if = else = = new = finally if else = return new protected override protected override return protected override protected override if && > return new new else return public virtual public virtual < call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) public virtual public virtual < call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) new var string var private private < decl_stmt string = decl_stmt var = decl_stmt var = new new new new new new if != call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new if != foreach in call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new return public virtual public virtual call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() var decl_stmt var = new = = return public override < public override < < return public virtual < public virtual < return protected internal virtual protected internal virtual if < return new new return new new Collector Query string Query var decl IList BooleanQuery decl Occur IndexSearcher BooleanQuery string int TopFieldCollector TokenStream var decl BooleanClause var public virtual < public virtual < < if == throw new decl_stmt Occur if = else = decl_stmt Lucene.Net.Analysis.TokenStream = decl_stmt Lucene.Net.Search.BooleanQuery decl_stmt var = new < decl_stmt string = try = call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) new call decl Occur.Reset() call decl Occur.Reset() call decl Occur.Reset() call decl Occur.Reset() call decl Occur.Reset() decl_stmt var = < decl_stmt var = < decl_stmt string = = new decl_stmt int = - = new < while call decl Occur.IncrementToken() call decl Occur.IncrementToken() call decl Occur.IncrementToken() call decl Occur.IncrementToken() call decl Occur.IncrementToken() if != call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call TokenStream.Add() call TokenStream.Add() call TokenStream.Add() call TokenStream.Add() call TokenStream.Add() new new = call string.ToString() call string.ToString() call string.ToString() call string.ToString() call string.ToString() if != = call var.EndOffset() call var.EndOffset() call var.EndOffset() call var.EndOffset() call var.EndOffset() call decl Occur.End() call decl Occur.End() call decl Occur.End() call decl Occur.End() call decl Occur.End() if != decl_stmt Lucene.Net.Search.Query if == call var.EndOffset() call var.EndOffset() call var.EndOffset() call var.EndOffset() call var.EndOffset() = = else call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) = new new if != call TokenStream.Add() call TokenStream.Add() call TokenStream.Add() call TokenStream.Add() call TokenStream.Add() if != decl_stmt Lucene.Net.Search.BooleanQuery = new call TokenStream.Add() call TokenStream.Add() call TokenStream.Add() call TokenStream.Add() call TokenStream.Add() foreach in call Query.Add() call Query.Add() call Query.Add() call Query.Add() call Query.Add() new new finally decl_stmt Lucene.Net.Search.Query = decl_stmt Lucene.Net.Search.TopFieldCollector = decl_stmt Collector = new decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() decl_stmt System.Collections.Generic.IList < = try call Collector.Search() call Collector.Search() call Collector.Search() call Collector.Search() call Collector.Search() decl_stmt TopFieldDocs = call Query.TopDocs() call Query.TopDocs() call Query.TopDocs() call Query.TopDocs() call Query.TopDocs() = finally call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() return BinaryDocValues object decl HashSet BytesRef decl IList decl IList SortedSetDocValues long FieldDoc LookupResult BytesRef string BinaryDocValues long int BytesRef protected internal virtual < protected internal virtual < < decl_stmt BinaryDocValues = decl_stmt BinaryDocValues = decl_stmt System.Collections.Generic.IList < = decl_stmt System.Collections.Generic.IList < = new < decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ decl_stmt Lucene.Net.Search.FieldDoc = call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() decl_stmt string = call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() decl_stmt long = long decl_stmt Lucene.Net.Util.BytesRef if != = new call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() else = decl_stmt int = decl_stmt Lucene.Net.Index.SortedSetDocValues = decl_stmt System.Collections.Generic.HashSet < if != = new < = - decl_stmt long while = call SortedSetDocValues.NextOrd() call SortedSetDocValues.NextOrd() call SortedSetDocValues.NextOrd() call SortedSetDocValues.NextOrd() call SortedSetDocValues.NextOrd() != decl_stmt Lucene.Net.Util.BytesRef = new call SortedSetDocValues.LookupOrd() call SortedSetDocValues.LookupOrd() call SortedSetDocValues.LookupOrd() call SortedSetDocValues.LookupOrd() call SortedSetDocValues.LookupOrd() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() else = decl_stmt LookupResult if decl_stmt object = = new call object.ToString() call object.ToString() call object.ToString() call object.ToString() call object.ToString() else = new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return protected internal virtual protected internal virtual return int int TokenStream string var int var var protected internal virtual protected internal virtual < decl_stmt Lucene.Net.Analysis.TokenStream = call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) new try decl_stmt var = < decl_stmt var = < call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() decl_stmt var = new decl_stmt int = while call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() decl_stmt string = call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() decl_stmt int = call var.StartOffset() call var.StartOffset() call var.StartOffset() call var.StartOffset() call var.StartOffset() decl_stmt int = call var.EndOffset() call var.EndOffset() call var.EndOffset() call var.EndOffset() call var.EndOffset() if < - = else if > continue if - = else if != && call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() - = call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() decl_stmt int = call var.EndOffset() call var.EndOffset() call var.EndOffset() call var.EndOffset() call var.EndOffset() if < return call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() finally protected internal virtual protected internal virtual protected internal virtual protected internal virtual protected internal virtual protected internal virtual if < public override public override return public override public override return public public if != call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() = if != call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() = long IndexSearcher AtomicReader public override public override decl_stmt long = try if != decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() try foreach in call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() decl_stmt Lucene.Net.Index.AtomicReader = if is += finally call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() return catch throw new IndexSearcher decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() try return call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() finally call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release()