Lucene.Net.Util.Automaton Lucene.Net.Support using System using System.Collections using System.Collections.Generic using System.Diagnostics using System.Text using class Lucene.Net.Util.Automaton.BasicOperations bool public static public static if && return + if || return decl_stmt bool = && if == = = else = = foreach in = = return Automaton decl ISet Automaton decl HashSet bool bool decl ISet bool public static public static < if == return decl_stmt bool = foreach in if ! = break if decl_stmt System.Text.StringBuilder = new foreach in call Automaton.Append() call Automaton.Append() call Automaton.Append() call Automaton.Append() call Automaton.Append() return call Lucene.Net.Util.Automaton.Automaton.ToString() call Lucene.Net.Util.Automaton.Automaton.ToString() call Lucene.Net.Util.Automaton.Automaton.ToString() call Lucene.Net.Util.Automaton.Automaton.ToString() call Lucene.Net.Util.Automaton.Automaton.ToString() else foreach in if return decl_stmt System.Collections.Generic.HashSet < = new < foreach in call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() decl_stmt bool = != decl_stmt Lucene.Net.Util.Automaton.Automaton = if = call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() else = call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() decl_stmt System.Collections.Generic.ISet < = decl_stmt bool = foreach in if = else if continue decl_stmt Lucene.Net.Util.Automaton.Automaton = if = call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() else = call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() decl_stmt System.Collections.Generic.ISet < = foreach in = if call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() = = call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() return State public static public static = decl_stmt Lucene.Net.Util.Automaton.State = new call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) = = = return State public static public static = decl_stmt Lucene.Net.Util.Automaton.State = new = call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) foreach in = = return decl IList public static public static if == return decl_stmt System.Collections.Generic.IList < = new < while -- > call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return Automaton decl IList Automaton Automaton public static public static if > return -= decl_stmt Lucene.Net.Util.Automaton.Automaton if == = else if == = else decl_stmt System.Collections.Generic.IList < = new < while -- > call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = if > decl_stmt Lucene.Net.Util.Automaton.Automaton = while -- > decl_stmt Lucene.Net.Util.Automaton.Automaton = foreach in = foreach in = call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() return public static public static = foreach in = ! return public static public static if || == return if return if if return else return return Automaton int int decl Transition decl Transition decl Transition decl Transition StatePair StatePair StatePair decl Dictionary decl LinkedList public static public static if if return else return if if return else return if == return decl_stmt Lucene.Net.Util.Automaton.Transition = decl_stmt Lucene.Net.Util.Automaton.Transition = decl_stmt Lucene.Net.Util.Automaton.Automaton = new decl_stmt System.Collections.Generic.LinkedList < = new < decl_stmt org.apache.lucene.analysis.hunspell.Dictionary < = new < decl_stmt Lucene.Net.Util.Automaton.StatePair = new call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() = while > = call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() = && decl_stmt Lucene.Net.Util.Automaton.Transition = decl_stmt Lucene.Net.Util.Automaton.Transition = for = = < ++ while < && < ++ for = < && >= ++ if >= decl_stmt Lucene.Net.Util.Automaton.StatePair = new decl_stmt Lucene.Net.Util.Automaton.StatePair call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out if == = new call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() = = decl_stmt int = > : decl_stmt int = < : call StatePair.s() call StatePair.s() call StatePair.s() call StatePair.s() call StatePair.s() call StatePair.s() call StatePair.s() call StatePair.s() call StatePair.s() new = && call Lucene.Net.Util.Automaton.Automaton.RemoveDeadTransitions() call Lucene.Net.Util.Automaton.Automaton.RemoveDeadTransitions() call Lucene.Net.Util.Automaton.Automaton.RemoveDeadTransitions() call Lucene.Net.Util.Automaton.Automaton.RemoveDeadTransitions() call Lucene.Net.Util.Automaton.Automaton.RemoveDeadTransitions() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() return public static public static if == return if && return else if return && else return && StatePair decl Transition decl Transition decl Transition decl Transition StatePair int decl HashSet decl LinkedList public static public static if == return if if return return decl_stmt Lucene.Net.Util.Automaton.Transition = decl_stmt Lucene.Net.Util.Automaton.Transition = decl_stmt System.Collections.Generic.LinkedList < = new < decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt Lucene.Net.Util.Automaton.StatePair = new call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() while > = call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() if && ! return decl_stmt Lucene.Net.Util.Automaton.Transition = decl_stmt Lucene.Net.Util.Automaton.Transition = for = = < ++ while < && < ++ decl_stmt int = = for = < && >= ++ if > return if < = + else = = decl_stmt Lucene.Net.Util.Automaton.StatePair = new if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() if <= return return State public static public static if && && || == return if == = = else = = decl_stmt Lucene.Net.Util.Automaton.State = new call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) = = return Automaton State decl HashSet bool Automaton public static public static < decl_stmt System.Collections.Generic.HashSet < = new < foreach in call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() decl_stmt bool = != decl_stmt Lucene.Net.Util.Automaton.State = new foreach in if continue decl_stmt Lucene.Net.Util.Automaton.Automaton = if = call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() call Lucene.Net.Util.Automaton.Automaton.CloneExpanded() else = call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.Automaton.CloneExpandedIfRequired() call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) call Lucene.Net.Util.Automaton.State.AddEpsilon(State) decl_stmt Lucene.Net.Util.Automaton.Automaton = new = = call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() return decl Transition public public if == decl_stmt Lucene.Net.Util.Automaton.Transition = new + = ++ = public public return - public public = = = public override public override return == public override public override return PointTransitions decl PointTransitions internal internal if == decl_stmt PointTransitions = new + = decl_stmt PointTransitions = if == = = new call PointTransitions.Reset() call PointTransitions.Reset() call PointTransitions.Reset() call PointTransitions.Reset() call PointTransitions.Reset() ++ return PointTransitions int internal internal if decl_stmt int ? = decl_stmt PointTransitions if ! out = = return else for = < ++ if == return decl_stmt PointTransitions = if == == for = < ++ = = return public public if = = public public if > public public + StringBuilder public override public override decl_stmt System.Text.StringBuilder = new for = < ++ if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) int State decl FrozenIntSet Transition State decl SortedIntSet int decl SortedIntSet decl State decl SortedIntSet PointTransitionSet decl IDictionary decl State decl LinkedList bool State int SortedIntSet int decl FrozenIntSet int decl FrozenIntSet int public static public static if || return decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt bool = decl_stmt int = = new decl_stmt FrozenIntSet = new decl_stmt System.Collections.Generic.LinkedList < = new < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < call decl FrozenIntSet.AddLast() call decl FrozenIntSet.AddLast() call decl FrozenIntSet.AddLast() call decl FrozenIntSet.AddLast() call decl FrozenIntSet.AddLast() = = decl_stmt int = decl_stmt Lucene.Net.Util.Automaton.State = new = = ++ decl_stmt PointTransitionSet = new decl_stmt Lucene.Net.Util.Automaton.SortedIntSet = new while > decl_stmt FrozenIntSet = call decl FrozenIntSet.RemoveFirst() call decl FrozenIntSet.RemoveFirst() call decl FrozenIntSet.RemoveFirst() call decl FrozenIntSet.RemoveFirst() call decl FrozenIntSet.RemoveFirst() for = < ++ decl_stmt Lucene.Net.Util.Automaton.State = for = < ++ call decl State.Add() call decl State.Add() call decl State.Add() call decl State.Add() call decl State.Add() if == continue call decl State.Sort() call decl State.Sort() call decl State.Sort() call decl State.Sort() call decl State.Sort() decl_stmt int = - decl_stmt int = decl_stmt Lucene.Net.Util.Automaton.State = for = < ++ decl_stmt int = if > != - call PointTransitionSet.ComputeHash() call PointTransitionSet.ComputeHash() call PointTransitionSet.ComputeHash() call PointTransitionSet.ComputeHash() call PointTransitionSet.ComputeHash() decl_stmt Lucene.Net.Util.Automaton.State call decl LinkedList.TryGetValue() call decl LinkedList.TryGetValue() call decl LinkedList.TryGetValue() call decl LinkedList.TryGetValue() call decl LinkedList.TryGetValue() call PointTransitionSet.ToFrozenIntSet() call PointTransitionSet.ToFrozenIntSet() call PointTransitionSet.ToFrozenIntSet() call PointTransitionSet.ToFrozenIntSet() call PointTransitionSet.ToFrozenIntSet() out if == = new decl_stmt FrozenIntSet = call PointTransitionSet.Freeze() call PointTransitionSet.Freeze() call PointTransitionSet.Freeze() call PointTransitionSet.Freeze() call PointTransitionSet.Freeze() call decl FrozenIntSet.AddLast() call decl FrozenIntSet.AddLast() call decl FrozenIntSet.AddLast() call decl FrozenIntSet.AddLast() call decl FrozenIntSet.AddLast() if == decl_stmt Lucene.Net.Util.Automaton.State = new + = = = ++ = > = else > == + + + + + call int.AddTransition() call int.AddTransition() call int.AddTransition() call int.AddTransition() call int.AddTransition() new - decl_stmt Lucene.Net.Util.Automaton.Transition = decl_stmt int = for = < ++ decl_stmt Lucene.Net.Util.Automaton.Transition = decl_stmt int = call PointTransitionSet.Decr() call PointTransitionSet.Decr() call PointTransitionSet.Decr() call PointTransitionSet.Decr() call PointTransitionSet.Decr() -= : = = = for = < ++ decl_stmt Lucene.Net.Util.Automaton.Transition = decl_stmt int = call PointTransitionSet.Incr() call PointTransitionSet.Incr() call PointTransitionSet.Incr() call PointTransitionSet.Incr() call PointTransitionSet.Incr() += : = = call decl State.Reset() call decl State.Reset() call decl State.Reset() call decl State.Reset() call decl State.Reset() == + = StatePair StatePair decl HashSet StatePair decl Dictionary decl HashSet decl HashSet decl Dictionary decl LinkedList public static public static < decl_stmt org.apache.lucene.analysis.hunspell.Dictionary < < = new < < decl_stmt org.apache.lucene.analysis.hunspell.Dictionary < < = new < < foreach in decl_stmt System.Collections.Generic.HashSet < if ! call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out = new < = call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() decl_stmt System.Collections.Generic.HashSet < if ! call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out = new < = from from decl_stmt System.Collections.Generic.LinkedList < = new < decl_stmt System.Collections.Generic.HashSet < = new < while > decl_stmt Lucene.Net.Util.Automaton.StatePair = call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() decl_stmt System.Collections.Generic.HashSet < decl_stmt System.Collections.Generic.HashSet < if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out foreach in decl_stmt Lucene.Net.Util.Automaton.StatePair = new if ! call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out foreach in decl_stmt Lucene.Net.Util.Automaton.StatePair = new if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() foreach in call StatePair.S1() call StatePair.S1() call StatePair.S1() call StatePair.S1() call StatePair.S1() call StatePair.S1() call StatePair.S1() call StatePair.S1() call StatePair.S1() = public static public static if return == else return && == public static public static if return return ! && == Transition var public static public static if return if && == decl_stmt var = call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() decl_stmt Lucene.Net.Util.Automaton.Transition = return == && == && == return decl State decl LinkedList BitArray decl List BitArray bool State State decl LinkedList decl LinkedList BitArray public static public static if return if decl_stmt Lucene.Net.Util.Automaton.State = for = = < += decl_stmt Lucene.Net.Util.Automaton.State = call Lucene.Net.Util.Automaton.State.Step(int) call Lucene.Net.Util.Automaton.State.Step(int) call Lucene.Net.Util.Automaton.State.Step(int) call Lucene.Net.Util.Automaton.State.Step(int) call Lucene.Net.Util.Automaton.State.Step(int) = if == return = return else decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt System.Collections.Generic.LinkedList < = new < decl_stmt System.Collections.Generic.LinkedList < = new < decl_stmt System.Collections.System.Collections.Generic.BitArray = new decl_stmt System.Collections.System.Collections.Generic.BitArray = new call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() decl_stmt System.Collections.Generic.List < = new < decl_stmt bool = for = = < += = = call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() call System.Collections.System.Collections.Generic.BitArray.SetAll(bool) call System.Collections.System.Collections.Generic.BitArray.SetAll(bool) call System.Collections.System.Collections.Generic.BitArray.SetAll(bool) call System.Collections.System.Collections.Generic.BitArray.SetAll(bool) call System.Collections.System.Collections.Generic.BitArray.SetAll(bool) foreach in call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call Lucene.Net.Util.Automaton.State.Step(int) call Lucene.Net.Util.Automaton.State.Step(int) call Lucene.Net.Util.Automaton.State.Step(int) call Lucene.Net.Util.Automaton.State.Step(int) call Lucene.Net.Util.Automaton.State.Step(int) foreach in if = if ! call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() decl_stmt System.Collections.Generic.LinkedList < = = = decl_stmt System.Collections.System.Collections.Generic.BitArray = = = return