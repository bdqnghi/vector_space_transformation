Lucene.Net.Util System using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Search.DocIdSet Lucene.Net.Search.DocIdSetIterator Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer Lucene.Net.Util.Packed.PackedInts class Lucene.Net.Util.PForDeltaDocIdSet super super DocIdSet int int int decl byte MonotonicAppendingLongBuffer int decl PackedInts int decl int MonotonicAppendingLongBuffer decl Decoder PForDeltaDocIdSet int int decl int public virtual public virtual if < throw new = return public virtual public virtual if <= throw new + + + ++ = - - if == = = ++ return public virtual public virtual for = != = return internal virtual internal virtual for = < ++ ++ - decl Format decl PackedInts internal virtual internal virtual decl_stmt Format = decl_stmt long = + call decl PackedInts.ByteCount() call decl PackedInts.ByteCount() call decl PackedInts.ByteCount() call decl PackedInts.ByteCount() call decl PackedInts.ByteCount() if > += + + call decl PackedInts.ByteCount() call decl PackedInts.ByteCount() call decl PackedInts.ByteCount() call decl PackedInts.ByteCount() call decl PackedInts.ByteCount() if < += return int int int internal virtual internal virtual decl_stmt int = for = < ++ += + decl_stmt int = + >> ++ if < += return int int int internal virtual internal virtual = = while > && == -- decl_stmt int = decl_stmt int = for = - = >= && <= += -- decl_stmt int = - if < = = = = - < || < return decl PackedInts int int int internal virtual internal virtual if > decl_stmt int = << - decl_stmt int = for = < ++ if > = ++ = uint >> &= == if > decl_stmt System.Text.Encoder = decl_stmt int = call int.Encode() call int.Encode() call int.Encode() call int.Encode() call int.Encode() += call int.ByteBlockCount() call int.ByteBlockCount() call int.ByteBlockCount() call int.ByteBlockCount() call int.ByteBlockCount() * if > > call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte sbyte call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte sbyte decl_stmt System.Text.Encoder = decl_stmt int = + call int.ByteValueCount() call int.ByteValueCount() call int.ByteValueCount() call int.ByteValueCount() call int.ByteValueCount() - / call int.ByteValueCount() call int.ByteValueCount() call int.ByteValueCount() call int.ByteValueCount() call int.ByteValueCount() call int.Encode() call int.Encode() call int.Encode() call int.Encode() call int.Encode() += int for = < ++ call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte sbyte int internal virtual internal virtual decl_stmt int = for = = - < ++ += + while >= call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte sbyte = -= |= << if != call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte sbyte int int int int int internal virtual internal virtual decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int if <= = = + + decl_stmt int = < : |= if > |= call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte sbyte else = decl_stmt int = | < : call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte sbyte if < call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte sbyte ++ - == - + + Iterator int int var MonotonicAppendingLongBuffer int public virtual public virtual < if == == - return decl_stmt var = + decl_stmt int = - / + decl_stmt Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer if <= = = else decl_stmt int const const = decl_stmt int = + - / = new = new decl_stmt System.IO.Iterator = new for = < ++ call MonotonicAppendingLongBuffer.Add() call MonotonicAppendingLongBuffer.Add() call MonotonicAppendingLongBuffer.Add() call MonotonicAppendingLongBuffer.Add() call MonotonicAppendingLongBuffer.Add() + call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() for = < ++ if == goto goto call MonotonicAppendingLongBuffer.Freeze() call MonotonicAppendingLongBuffer.Freeze() call MonotonicAppendingLongBuffer.Freeze() call MonotonicAppendingLongBuffer.Freeze() call MonotonicAppendingLongBuffer.Freeze() call int.Freeze() call int.Freeze() call int.Freeze() call int.Freeze() call int.Freeze() return new return public override public override if == return else return new public override public override return int int int int int internal virtual internal virtual decl_stmt int = & if == else += if & != decl_stmt int = ++ decl_stmt int = ++ decl_stmt int = + - / += int for = < ++ ++ |= << for = = < ++ decl_stmt int = + + = = var int internal virtual internal virtual & == decl_stmt int = for = < decl_stmt var = ++ for = != ++ , = uint >> = + & += int var internal virtual internal virtual decl_stmt var = ++ if & != else if & != decl_stmt int = ++ ++ internal virtual internal virtual == = - public override public override if == = return = ++ int int int int int internal virtual internal virtual decl_stmt int = int call decl byte.Size() call decl byte.Size() call decl byte.Size() call decl byte.Size() call decl byte.Size() decl_stmt int = / = + == - || call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() <= + == call decl byte.Size() call decl byte.Size() call decl byte.Size() call decl byte.Size() call decl byte.Size() || call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() + > while if >= = - break else if call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() >= break decl_stmt int = += - << = while <= decl_stmt int = + >> decl_stmt int = int call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() if <= = + else = - call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() <= + == call decl byte.Size() call decl byte.Size() call decl byte.Size() call decl byte.Size() call decl byte.Size() || call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() + > return int int public override public override > if - < decl_stmt int = decl_stmt int = int call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.Get(int,int) if > = = int call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() call decl byte.Get() - = * - while if - >= break = - = return public override public override return public public return public public return * + call decl byte.RamBytesUsed() call decl byte.RamBytesUsed() call decl byte.RamBytesUsed() call decl byte.RamBytesUsed() call decl byte.RamBytesUsed() + call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.RamBytesUsed() call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.RamBytesUsed() call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.RamBytesUsed() call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.RamBytesUsed() call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.RamBytesUsed()