Lucene.Net.Index System.Collections.Generic using System.Diagnostics using Lucene.Net.Util.AttributeSource Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef class Lucene.Net.Index.FilteredTermsEnum super super TermsEnum bool BytesRef TermsEnum BytesRef = BytesRef protected internal virtual protected internal virtual decl_stmt Lucene.Net.Util.BytesRef = = return public override public override return call Lucene.Net.Index.TermsEnum.Attributes() call Lucene.Net.Index.TermsEnum.Attributes() call Lucene.Net.Index.TermsEnum.Attributes() call Lucene.Net.Index.TermsEnum.Attributes() call Lucene.Net.Index.TermsEnum.Attributes() public override public override return call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() return public override public override return call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() public override public override return call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() public override public override throw new + public override public override throw new + public override public override throw new + public override public override return call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() public override public override return call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) public override public override return call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) public override public override throw new + public override public override != return call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() BytesRef public override public override for if = decl_stmt Lucene.Net.Util.BytesRef = == || == || > + + + if == || call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) == return = call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() else = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() if == return switch case = goto goto case return case = break case return