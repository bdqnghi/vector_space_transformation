Lucene.Net.Util Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using System using System.Collections.Generic using class attribute Lucene.Net.Util.TestNumericUtils super super LuceneTestCase decl float decl double BytesRef public virtual public virtual decl_stmt Lucene.Net.Util.BytesRef = = new for = - < ++ if != call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) < = = new BytesRef public virtual public virtual decl_stmt Lucene.Net.Util.BytesRef = = new for = - < ++ if != call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) < = = new decl long long decl BytesRef BytesRef long public virtual public virtual decl_stmt long = new + + - - - - - - - - decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ = new try catch for = < ++ - < decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ for = < ++ decl_stmt long = decl_stmt long = << - & - + + + decl int int decl BytesRef BytesRef int public virtual public virtual decl_stmt int = new + + - - - - - - - - decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ = new try catch for = < ++ - < decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ for = < ++ decl_stmt int = decl_stmt int = << - & - + + + decl double decl long public virtual public virtual decl_stmt double = new - - - - - - - - + - - decl_stmt long = new for = < ++ = == for = < ++ - < long long public virtual public virtual decl_stmt long = foreach in decl_stmt long = ulong > ulong + + + + + decl float decl int public virtual public virtual decl_stmt float = new - - - - - - - - + - - decl_stmt int = new for = < ++ = == for = < ++ - < uint int public virtual public virtual decl_stmt int = foreach in decl_stmt uint = uint > + + + + + decl IEnumerator decl IEnumerator LongBitSet private private < < decl_stmt Lucene.Net.Util.LongBitSet = new - + : decl_stmt System.Collections.Generic.IEnumerator < = == : decl_stmt System.Collections.Generic.IEnumerator < = == : new if call Lucene.Net.Util.LongBitSet.Flip(long,long) call Lucene.Net.Util.LongBitSet.Flip(long,long) call Lucene.Net.Util.LongBitSet.Flip(long,long) call Lucene.Net.Util.LongBitSet.Flip(long,long) call Lucene.Net.Util.LongBitSet.Flip(long,long) - + call Lucene.Net.Util.LongBitSet.Cardinality() call Lucene.Net.Util.LongBitSet.Cardinality() call Lucene.Net.Util.LongBitSet.Cardinality() call Lucene.Net.Util.LongBitSet.Cardinality() call Lucene.Net.Util.LongBitSet.Cardinality() public override public override >= && <= && >= && <= if for = <= ++ - if == break if == || == return ^= unchecked long ^= unchecked long ulong >> ulong >> public virtual public virtual unchecked long unchecked long unchecked long unchecked long unchecked long unchecked long unchecked long unchecked long unchecked long unchecked long unchecked long unchecked long - - unchecked long unchecked long + + long public virtual public virtual decl_stmt long = long for = < ++ long long private private decl_stmt long = decl_stmt long = * while + < >>= + + long private private decl_stmt long switch case = << break case = - << break default: = break += - if if += - if = ~ if = << if = ulong >> return public virtual public virtual - new unchecked long unchecked long new - new unchecked long new + new new new new new new new new new new - new new new unchecked long unchecked long new decl IEnumerator decl IEnumerator FixedBitSet private private < < decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new - + : decl_stmt System.Collections.Generic.IEnumerator < = == : decl_stmt System.Collections.Generic.IEnumerator < = == : new if call Lucene.Net.Spatial.Util.FixedBitSet.Flip(int,int) call Lucene.Net.Spatial.Util.FixedBitSet.Flip(int,int) call Lucene.Net.Spatial.Util.FixedBitSet.Flip(int,int) call Lucene.Net.Spatial.Util.FixedBitSet.Flip(int,int) call Lucene.Net.Spatial.Util.FixedBitSet.Flip(int,int) - + call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() public override public override >= && <= && >= && <= if for = <= ++ - if == break if == return ^= unchecked int ^= unchecked int uint >> uint >> public virtual public virtual - unchecked int unchecked int - unchecked int + - new < new < unchecked int unchecked int