Lucene.Net.Search.Payloads System.Collections.Generic using System.Text using Lucene.Net.Index using Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Search.Spans.NearSpansOrdered Lucene.Net.Search.Spans.NearSpansUnordered Lucene.Net.Search.Similarities.Similarity Lucene.Net.Search.Spans.SpanNearQuery Lucene.Net.Search.Spans.SpanQuery Lucene.Net.Search.Spans.Spans Lucene.Net.Search.Spans.SpanScorer Lucene.Net.Search.Spans.SpanWeight Lucene.Net.Util.ToStringUtils class Lucene.Net.Search.Payloads.PayloadNearQuery super super SpanNearQuery PayloadFunction string public override public override return new int decl SpanQuery PayloadNearQuery public override public override decl_stmt int = decl_stmt Lucene.Net.Search.Spans.SpanQuery = new for = < ++ = decl_stmt Lucene.Net.Search.Payloads.PayloadNearQuery = new = return StringBuilder decl IEnumerator SpanQuery bool public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt System.Collections.Generic.IEnumerator < = decl_stmt bool = while call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt Lucene.Net.Search.Spans.SpanQuery = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call SpanQuery.ToString() call SpanQuery.ToString() call SpanQuery.ToString() call SpanQuery.ToString() call SpanQuery.ToString() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = if call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) int int public override public override decl_stmt int const const = decl_stmt int = = * + == : call string.GetHashCode() call string.GetHashCode() call string.GetHashCode() call string.GetHashCode() call string.GetHashCode() = * + == : call PayloadFunction.GetHashCode() call PayloadFunction.GetHashCode() call PayloadFunction.GetHashCode() call PayloadFunction.GetHashCode() call PayloadFunction.GetHashCode() return PayloadNearQuery public override public override if == return if ! return if != return decl_stmt Lucene.Net.Search.Payloads.PayloadNearQuery = if == if != return else if ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return if == if != return else if ! call PayloadFunction.Equals() call PayloadFunction.Equals() call PayloadFunction.Equals() call PayloadFunction.Equals() call PayloadFunction.Equals() return return public override public override return new PayloadNearSpanScorer decl Similarity string Explanation Explanation int decl SimScorer float Explanation public override public override decl_stmt PayloadNearSpanScorer = if != decl_stmt int = call PayloadNearSpanScorer.Advance() call PayloadNearSpanScorer.Advance() call PayloadNearSpanScorer.Advance() call PayloadNearSpanScorer.Advance() call PayloadNearSpanScorer.Advance() if == decl_stmt float = call PayloadNearSpanScorer.Freq() call PayloadNearSpanScorer.Freq() call PayloadNearSpanScorer.Freq() call PayloadNearSpanScorer.Freq() call PayloadNearSpanScorer.Freq() decl_stmt SimScorer = decl_stmt Lucene.Net.Search.Explanation = new = + + + + + + decl_stmt Lucene.Net.Search.Explanation = call decl Similarity.Explain() call decl Similarity.Explain() call decl Similarity.Explain() call decl Similarity.Explain() call decl Similarity.Explain() new + call decl SimScorer.AddDetail() call decl SimScorer.AddDetail() call decl SimScorer.AddDetail() call decl SimScorer.AddDetail() call decl SimScorer.AddDetail() = decl_stmt string = decl_stmt Lucene.Net.Search.Explanation = decl_stmt Lucene.Net.Search.ComplexExplanation = new call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() = * = return return new var var public virtual public virtual for = < ++ decl_stmt var = as if != if else decl_stmt var = as if != if protected internal virtual protected internal virtual < foreach in = = = = ++ int decl Spans protected internal override protected internal override if ! return = = = = do decl_stmt int = - += decl_stmt Spans = new = = && == return public override public override return *