Lucene.Net.Util.Automaton NUnit.Framework using System using System.Collections.Generic using System.Text using class attribute Lucene.Net.Util.Automaton.TestLevenshteinAutomata super super LuceneTestCase public virtual public virtual public virtual public virtual public virtual public virtual public virtual public virtual new string int int private private decl_stmt int = * + decl_stmt int = int + for = < ++ decl_stmt string = LevenshteinAutomata LevenshteinAutomata decl Automaton decl Automaton private private decl_stmt Lucene.Net.Util.Automaton.LevenshteinAutomata = new decl_stmt Lucene.Net.Util.Automaton.LevenshteinAutomata = new decl_stmt Lucene.Net.Util.Automaton.Automaton = new + decl_stmt Lucene.Net.Util.Automaton.Automaton = new + for = < ++ = call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) = call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) if > - - - - - switch case break case break default: break Automaton private private decl_stmt Lucene.Net.Util.Automaton.Automaton = = = = return Automaton private private decl_stmt Lucene.Net.Util.Automaton.Automaton = = return Automaton Automaton decl IList private private decl_stmt System.Collections.Generic.IList < = new < for = <= ++ decl_stmt Lucene.Net.Util.Automaton.Automaton = = = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt Lucene.Net.Util.Automaton.Automaton = return Automaton Automaton decl IList private private decl_stmt System.Collections.Generic.IList < = new < for = < ++ decl_stmt Lucene.Net.Util.Automaton.Automaton = = + call Lucene.Net.Util.Automaton.Automaton.ExpandSingleton() call Lucene.Net.Util.Automaton.Automaton.ExpandSingleton() call Lucene.Net.Util.Automaton.Automaton.ExpandSingleton() call Lucene.Net.Util.Automaton.Automaton.ExpandSingleton() call Lucene.Net.Util.Automaton.Automaton.ExpandSingleton() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt Lucene.Net.Util.Automaton.Automaton = return Automaton Automaton decl IList private private decl_stmt System.Collections.Generic.IList < = new < for = < ++ decl_stmt Lucene.Net.Util.Automaton.Automaton = = = + call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt Lucene.Net.Util.Automaton.Automaton = return Automaton StringBuilder decl IList string private private if < return decl_stmt System.Collections.Generic.IList < = new < for = < - ++ decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + - + decl_stmt string = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) if ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt Lucene.Net.Util.Automaton.Automaton = return int bool int CharacterRunAutomaton string private private decl_stmt Lucene.Net.Util.Automaton.CharacterRunAutomaton = new decl_stmt int = + + decl_stmt int = int for = < ++ decl_stmt string = decl_stmt bool = call Lucene.Net.Util.Automaton.CharacterRunAutomaton.Run(string) call Lucene.Net.Util.Automaton.CharacterRunAutomaton.Run(string) call Lucene.Net.Util.Automaton.CharacterRunAutomaton.Run(string) call Lucene.Net.Util.Automaton.CharacterRunAutomaton.Run(string) call Lucene.Net.Util.Automaton.CharacterRunAutomaton.Run(string) if <= else > int bool int CharacterRunAutomaton string private private decl_stmt Lucene.Net.Util.Automaton.CharacterRunAutomaton = new decl_stmt int = + + decl_stmt int = int for = < ++ decl_stmt string = decl_stmt bool = call Lucene.Net.Util.Automaton.CharacterRunAutomaton.Run(string) call Lucene.Net.Util.Automaton.CharacterRunAutomaton.Run(string) call Lucene.Net.Util.Automaton.CharacterRunAutomaton.Run(string) call Lucene.Net.Util.Automaton.CharacterRunAutomaton.Run(string) call Lucene.Net.Util.Automaton.CharacterRunAutomaton.Run(string) if <= else > char decl int int int int int decl int int decl char decl int private private decl_stmt char decl_stmt int decl_stmt int decl_stmt int decl_stmt int = = = new + = new + decl_stmt int = if == || == if == return else return decl_stmt int decl_stmt int decl_stmt char decl_stmt int for = <= ++ = for = <= ++ = - = for = <= ++ = - == : = - + + - + = = = return char decl int int int int int int decl char private private decl_stmt char decl_stmt int decl_stmt int = = decl_stmt int = = + + if == || == if == return else return decl_stmt int decl_stmt int decl_stmt char decl_stmt int for = <= ++ = for = <= ++ = for = <= ++ = - for = <= ++ = - == : = - + - + - - + if > && > && - == - && - == - = - - + return