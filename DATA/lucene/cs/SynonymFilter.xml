Lucene.Net.Analysis.Synonym System using System.Diagnostics using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Store using Lucene.Net.Support using Lucene.Net.Util using Lucene.Net.Util.Fst using class Lucene.Net.Analysis.Synonym.SynonymFilter super super TokenFilter decl PendingInput IOffsetAttribute ITypeAttribute IPositionLengthAttribute decl FST bool int string int decl FST decl BytesReader int IPositionIncrementAttribute int int BytesRef bool CharsRef SynonymMap decl FST ICharTermAttribute ByteArrayDataInput decl PendingOutputs int public public = = = = public virtual public virtual = = = CharsRef public virtual public virtual < = = decl_stmt Lucene.Net.Util.CharsRef = ++ = if == return return return decl int public virtual public virtual if == decl_stmt Lucene.Net.Util.CharsRef = new + = if == decl_stmt int = new + = if == decl_stmt int = new + = if == = new = = ++ PendingInput private private ++ decl_stmt PendingInput = = = call PendingInput.term() call PendingInput.term() call PendingInput.term() call PendingInput.term() call PendingInput.term() call PendingInput.term() call PendingInput.term() call PendingInput.term() call PendingInput.term() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() = != int int int decl char int int BytesRef BytesRef PendingInput int int int private private == decl_stmt int = decl_stmt Lucene.Net.Util.BytesRef = decl_stmt int = decl_stmt int = - decl_stmt Lucene.Net.Util.BytesRef = call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() == decl_stmt int = while decl_stmt char decl_stmt int decl_stmt int = if == if break else if call PendingInput.IncrementToken() call PendingInput.IncrementToken() call PendingInput.IncrementToken() call PendingInput.IncrementToken() call PendingInput.IncrementToken() = call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() = decl_stmt PendingInput = = = call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() = = call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() = if != else = else = break else = = = ++ decl_stmt int = while < decl_stmt int = if call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() : == goto goto = call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() += if = call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() = = if call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() == break else = call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() call decl FST.outputs() if == = if == && ! = if != = else if != = else int int int int int bool int int int int private private call Lucene.Net.Store.ByteArrayDataInput.Reset(byte,int,int) call Lucene.Net.Store.ByteArrayDataInput.Reset(byte,int,int) call Lucene.Net.Store.ByteArrayDataInput.Reset(byte,int,int) call Lucene.Net.Store.ByteArrayDataInput.Reset(byte,int,int) call Lucene.Net.Store.ByteArrayDataInput.Reset(byte,int,int) decl_stmt int = call Lucene.Net.Store.ByteArrayDataInput.ReadVInt() call Lucene.Net.Store.ByteArrayDataInput.ReadVInt() call Lucene.Net.Store.ByteArrayDataInput.ReadVInt() call Lucene.Net.Store.ByteArrayDataInput.ReadVInt() call Lucene.Net.Store.ByteArrayDataInput.ReadVInt() decl_stmt bool = & == decl_stmt int = uint >> for = < ++ call SynonymMap.words() call SynonymMap.words() call SynonymMap.words() call SynonymMap.words() call SynonymMap.words() call SynonymMap.words() call SynonymMap.words() call SynonymMap.words() call SynonymMap.words() call Lucene.Net.Store.ByteArrayDataInput.ReadVInt() call Lucene.Net.Store.ByteArrayDataInput.ReadVInt() call Lucene.Net.Store.ByteArrayDataInput.ReadVInt() call Lucene.Net.Store.ByteArrayDataInput.ReadVInt() call Lucene.Net.Store.ByteArrayDataInput.ReadVInt() decl_stmt int = decl_stmt int = + decl_stmt int = for = <= ++ if == || == decl_stmt int = - > + decl_stmt int decl_stmt int if == && == = = : else = - = = + = == + + + decl_stmt int = for = < ++ |= = = private private ++ if == return else return return PendingInput int CharsRef int PendingOutputs public override public override while while != decl_stmt PendingInput = decl_stmt PendingOutputs = if ! && || ! if != else == + + + call PendingInput.Reset() call PendingInput.Reset() call PendingInput.Reset() call PendingInput.Reset() call PendingInput.Reset() if > = else = -- return else if < call PendingInput.Reset() call PendingInput.Reset() call PendingInput.Reset() call PendingInput.Reset() call PendingInput.Reset() decl_stmt int = decl_stmt Lucene.Net.Util.CharsRef = call PendingOutputs.pullNext() call PendingOutputs.pullNext() call PendingOutputs.pullNext() call PendingOutputs.pullNext() call PendingOutputs.pullNext() call ICharTermAttribute.copyBuffer() call ICharTermAttribute.copyBuffer() call ICharTermAttribute.copyBuffer() call ICharTermAttribute.copyBuffer() call ICharTermAttribute.copyBuffer() = decl_stmt int = if == - = call IOffsetAttribute.setOffset() call IOffsetAttribute.setOffset() call IOffsetAttribute.setOffset() call IOffsetAttribute.setOffset() call IOffsetAttribute.setOffset() = = if == = -- return else call PendingInput.Reset() call PendingInput.Reset() call PendingInput.Reset() call PendingInput.Reset() call PendingInput.Reset() = -- if && == decl_stmt PendingOutputs = if < decl_stmt int = decl_stmt Lucene.Net.Util.CharsRef = call PendingOutputs.pullNext() call PendingOutputs.pullNext() call PendingOutputs.pullNext() call PendingOutputs.pullNext() call PendingOutputs.pullNext() if == = = call IOffsetAttribute.setOffset() call IOffsetAttribute.setOffset() call IOffsetAttribute.setOffset() call IOffsetAttribute.setOffset() call IOffsetAttribute.setOffset() call ICharTermAttribute.copyBuffer() call ICharTermAttribute.copyBuffer() call ICharTermAttribute.copyBuffer() call ICharTermAttribute.copyBuffer() call ICharTermAttribute.copyBuffer() = = return else return public override public override = = = = = foreach in foreach in