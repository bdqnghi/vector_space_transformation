Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Linq using Lucene.Net.Support using Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Search.DocIdSetIterator Lucene.Net.Util.PagedBytes Lucene.Net.Codecs.PostingsFormat Lucene.Net.Index.TermsEnum.SeekStatus Lucene.Net.Util.StringHelper class Lucene.Net.Index.DocTermOrds int decl int int long long int long int BytesRef decl BytesRef string int int DocsEnum int int decl sbyte int int long public virtual public virtual if != return decl_stmt long = * + if != += * if != = call decl sbyte.Where() call decl sbyte.Where() call decl sbyte.Where() call decl sbyte.Where() call decl sbyte.Where() != + = return Fields Terms public virtual public virtual if == decl_stmt Lucene.Net.Index.Fields = if == return decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() if == return else return call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() else return new public virtual public virtual return return == protected internal virtual protected internal virtual protected internal virtual protected internal virtual var var var long var decl int int int int PagedBytes bool TermsEnum BytesRef decl IList int Terms int int int int int long int int BytesRef FieldInfo int var int Fields var decl int int BytesRef int long var protected internal virtual protected internal virtual decl_stmt Lucene.Net.Index.FieldInfo = if != && call FieldInfo.HasDocValues() call FieldInfo.HasDocValues() call FieldInfo.HasDocValues() call FieldInfo.HasDocValues() call FieldInfo.HasDocValues() throw new + + + decl_stmt long = = == : decl_stmt int = decl_stmt int = new decl_stmt int = new decl_stmt var = new decl_stmt Lucene.Net.Index.Fields = if == return decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() if == return decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt Lucene.Net.Util.BytesRef = != : new if call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) == return decl_stmt System.Collections.Generic.IList < = decl_stmt Lucene.Net.Util.PagedBytes = decl_stmt bool = decl_stmt var = new decl_stmt int = = for decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() if == || != && ! break if ! try = int call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() catch = new < = new = if != && & == += decl_stmt Lucene.Net.Util.BytesRef = new call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt int = call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() if <= = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) decl_stmt int = for decl_stmt int = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() if == break ++ ++ decl_stmt int = - + = decl_stmt int = if & == decl_stmt int = uint >> decl_stmt int = decl_stmt var = decl_stmt int = + if > decl_stmt int = + & unchecked int decl_stmt var = new = = = = << | else decl_stmt int if == = else if & == = else if & == = else if & == = else = decl_stmt int = if <= for = < ++ |= & << << = else for = < ++ = sbyte = uint >> = << | = = new ++ if call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() == break = decl_stmt long = if == = else = for = < ++ decl_stmt var = decl_stmt var = if != = else = new for = << < += << decl_stmt int = + << for = < ++ decl_stmt int = if & == decl_stmt int = uint >> = << | if & != throw new + decl_stmt var = = if <= + decl_stmt int = while <= + <<= decl_stmt var = new = += + if < decl_stmt var = new = = if << > break if != = call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() decl_stmt long = = - = - private static private static if & << * == return if & << * == return if & << * == return if & << * == return return var private static private static decl_stmt var = uint >> * if != ++ = unchecked | = uint >> * if != ++ = unchecked | = uint >> * if != ++ = unchecked | = uint >> * if != ++ = unchecked | ++ = & return internal internal = - - return public override public override return public override public override return public override public override return public override public override if ++ < = if == = return return public override public override return public override public override return public override public override return + int decl TermsEnum public override public override if != && return decl_stmt int = if >= decl_stmt SeekStatus = == = << != return = - - if == decl_stmt SeekStatus = == = != return -- if >> == && != && <= else decl_stmt SeekStatus = == = << != while != && < if == return else if == return else return BytesRef decl TermsEnum decl SeekStatus int int public override public override decl_stmt int = - - if < || || decl_stmt int = ulong >> decl_stmt Lucene.Net.Util.BytesRef = = << = - decl_stmt SeekStatus = == else while -- >= decl_stmt Lucene.Net.Util.BytesRef = if == return ++ != internal internal = if != && ! = return public virtual public virtual return public virtual public virtual if return else return new public override public override while == if < return else = = return ++ sbyte int int int internal virtual internal virtual decl_stmt int = if == decl_stmt int = decl_stmt int = for = << | & if & == if == break += - ++ = + = = uint >> else for decl_stmt int = for decl_stmt sbyte = ++ = << | & if & == break if == break += - ++ = + if == break return int int = decl_stmt int = if & == = uint >> decl_stmt int = uint >> & = else = = = = BytesRef public override public override decl_stmt Lucene.Net.Util.BytesRef = try = int catch throw new = = = return public override public override try if == return else return - - catch throw new public override public override try return catch throw new