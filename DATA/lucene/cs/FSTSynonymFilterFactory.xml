Lucene.Net.Analysis.Synonym System using System.Collections using System.Collections.Generic using System.IO using System.Text.RegularExpressions using Lucene.Net.Analysis.Core using Lucene.Net.Analysis.Util using Lucene.Net.Util using class Lucene.Net.Analysis.Synonym.FSTSynonymFilterFactory super super TokenFilterFactory super ResourceLoaderAware SynonymMap string string decl IDictionary bool string bool public override public override return == : new string TokenizerFactory Analyzer public public decl_stmt Lucene.Net.Analysis.Util.TokenizerFactory = == : decl_stmt Lucene.Net.Analysis.Analyzer = new try decl_stmt string = if == || call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() = typeof else if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() = typeof = catch throw new TokenStream Tokenizer public override public override decl_stmt Lucene.Net.Analysis.Tokenizer = == new : decl_stmt Lucene.Net.Analysis.TokenStream = new : return new Type decl Parser decl SynonymMap CharsetDecoder private private decl_stmt CharsetDecoder = decl_stmt System.Security.Util.Parser decl_stmt System.Type = typeof try = call decl Parser.getConstructor() call decl Parser.getConstructor() call decl Parser.getConstructor() call decl Parser.getConstructor() call decl Parser.getConstructor() typeof bool typeof bool typeof catch throw new if call CharsetDecoder.Reset() call CharsetDecoder.Reset() call CharsetDecoder.Reset() call CharsetDecoder.Reset() call CharsetDecoder.Reset() call decl SynonymMap.Parse() call decl SynonymMap.Parse() call decl SynonymMap.Parse() call decl SynonymMap.Parse() call decl SynonymMap.Parse() new else decl_stmt System.Collections.Generic.IList < = foreach in call CharsetDecoder.reset() call CharsetDecoder.reset() call CharsetDecoder.reset() call CharsetDecoder.reset() call CharsetDecoder.reset() call decl SynonymMap.Parse() call decl SynonymMap.Parse() call decl SynonymMap.Parse() call decl SynonymMap.Parse() call decl SynonymMap.Parse() new return call decl SynonymMap.Build() call decl SynonymMap.Build() call decl SynonymMap.Build() call decl SynonymMap.Build() call decl SynonymMap.Build() TokenizerFactory Type private private decl_stmt System.Type = typeof try decl_stmt Lucene.Net.Analysis.Util.TokenizerFactory = call Type.getConstructor() call Type.getConstructor() call Type.getConstructor() call Type.getConstructor() call Type.getConstructor() typeof if is return catch throw new