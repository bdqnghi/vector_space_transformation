Lucene.Net.Analysis Lucene.Net.Index using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Util.Attribute Lucene.Net.Util.AttributeSource Lucene.Net.Util.BytesRef Lucene.Net.Analysis.Tokenattributes.CharTermAttribute Lucene.Net.Util.IAttributeReflector class Lucene.Net.Analysis.Token super super CharTermAttribute super ITypeAttribute super IPositionIncrementAttribute super IFlagsAttribute super IOffsetAttribute super IPayloadAttribute super IPositionLengthAttribute int string decl AttributeSource BytesRef int int int decl AttributeFactory if < throw new + = return = return public public return public public return public public = = return = return = return = public override public override = = = = = = var public override public override decl_stmt var = if != = call int.Clone() call int.Clone() call int.Clone() call int.Clone() call int.Clone() return var public virtual public virtual decl_stmt var = new = = = if != = call int.Clone() call int.Clone() call int.Clone() call int.Clone() call int.Clone() return var public override public override if == return decl_stmt var = as if != return == && == && == && == && == == : call int.Equals() call int.Equals() call int.Equals() call int.Equals() call int.Equals() && == == : call int.Equals() call int.Equals() call int.Equals() call int.Equals() call int.Equals() && else return int public override public override decl_stmt int = = * + = * + = * + = * + if != = * + call int.GetHashCode() call int.GetHashCode() call int.GetHashCode() call int.GetHashCode() call int.GetHashCode() if != = * + call int.GetHashCode() call int.GetHashCode() call int.GetHashCode() call int.GetHashCode() call int.GetHashCode() return private private = = = = = = public virtual public virtual = = = = = return public virtual public virtual = = = return public virtual public virtual = = = return public virtual public virtual + = = = return public virtual public virtual = = = return public virtual public virtual + = = = return public virtual public virtual = = = = = = public virtual public virtual = = = = = = public virtual public virtual = = = = = = var public override public override decl_stmt var = as if != call var.Reinit() call var.Reinit() call var.Reinit() call var.Reinit() call var.Reinit() if != = call int.Clone() call int.Clone() call int.Clone() call int.Clone() call int.Clone() else = = == : call int.Clone() call int.Clone() call int.Clone() call int.Clone() call int.Clone() = = public override public override typeof typeof typeof typeof typeof typeof private private if < || < throw new + + + + var public override public override public override < decl_stmt var = typeof return call var.IsAssignableFrom() call var.IsAssignableFrom() call var.IsAssignableFrom() call var.IsAssignableFrom() call var.IsAssignableFrom() typeof new : < var public override public override if == return decl_stmt var = as if != return return public override public override return ^