Lucene.Net.Search System.Diagnostics using Lucene.Net.Index using Lucene.Net.Support using Lucene.Net.Search.Similarities.Similarity class Lucene.Net.Search.ExactPhraseScorer super super Scorer decl Similarity int decl int bool int long decl ChunkState int decl int int int int int int int ChunkState public override public override while decl_stmt int = if == = return decl_stmt int = while < decl_stmt ChunkState = decl_stmt int = call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() if if < = call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() else decl_stmt int = while < if ++ == = call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() break else = call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() if > break ++ if == = = if != return int int int public override public override decl_stmt int = if == = return while decl_stmt int = while < decl_stmt int = if < = if > break ++ if == = = if != return = if == = return public override public override return + + public override public override return public override public override return public override public override return call decl Similarity.Score() call decl Similarity.Score() call decl Similarity.Score() call decl Similarity.Score() call decl Similarity.Score() bool int int int ChunkState bool private private = for = < ++ decl_stmt ChunkState = = call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() = + call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() = = - decl_stmt int = decl_stmt int = decl_stmt bool = while ! ++ if == ++ decl_stmt ChunkState = while < if > = decl_stmt int = - = != = if == = break ++ = + call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() decl_stmt bool = for = < ++ decl_stmt ChunkState = = while < if > = decl_stmt int = - if >= && == && == ++ = if == = break ++ = + call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() if ! break if ! += += continue decl_stmt ChunkState = while < if > = decl_stmt int = - if >= && == && == ++ if == = break ++ = + call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() call ChunkState.PosEnum() += += return public override public override return