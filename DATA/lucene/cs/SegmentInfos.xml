Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Linq using System.Text using System.Threading using Lucene.Net.Codecs using Lucene.Net.Store using Lucene.Net.Support using System.IO using Lucene.Net.Store.ChecksumIndexInput Lucene.Net.Codecs.Codec Lucene.Net.Codecs.CodecUtil Lucene.Net.Store.Directory Lucene.Net.Store.IndexInput Lucene.Net.Store.IndexOutput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Codecs.Lucene3x.Lucene3xCodec Lucene.Net.Codecs.Lucene3x.Lucene3xSegmentInfoFormat Lucene.Net.Codecs.Lucene3x.Lucene3xSegmentInfoReader Lucene.Net.Store.NoSuchDirectoryException Lucene.Net.Util.StringHelper class attribute Lucene.Net.Index.SegmentInfos super super /*List<SegmentCommitInfo>,*/ super ICloneable int int int long decl IDictionary IndexOutput int decl List int int long int StreamWriter int int int string public public return long long public static public static if == return - decl_stmt long = - foreach in if && ! decl_stmt long = if > = return public static public static try return catch return - public static public static return public static public static return return public static public static if return else if return + else throw new + + IndexOutput public static public static try decl_stmt IndexOutput = try call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() finally call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() catch try catch long decl_stmt long if == - = else = + return var var int int var int long decl IDictionary int long var Codec long var long int public public decl_stmt var = = = decl_stmt var = try decl_stmt int = call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() decl_stmt int if == = = call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() = call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() decl_stmt int = call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() if < throw new + + + + for = < ++ decl_stmt var = call var.ReadString() call var.ReadString() call var.ReadString() call var.ReadString() call var.ReadString() decl_stmt var = call var.ReadString() call var.ReadString() call var.ReadString() call var.ReadString() call var.ReadString() decl_stmt var = call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() = decl_stmt long = call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() decl_stmt int = call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() if < || || throw new + + + + + + decl_stmt long = - if >= = call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() decl_stmt var = new if >= decl_stmt int = call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < if == = < < else = new < < for = < ++ call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() = call var.ReadStringSet() call var.ReadStringSet() call var.ReadStringSet() call var.ReadStringSet() call var.ReadStringSet() = = call var.ReadStringStringMap() call var.ReadStringStringMap() call var.ReadStringStringMap() call var.ReadStringStringMap() call var.ReadStringStringMap() else = - decl_stmt Lucene.Net.Codecs.Codec = foreach in = if >= else decl_stmt long = decl_stmt long = call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() if != throw new + + = finally if ! else call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() public public = = - new protected internal override protected internal override return int bool decl IDictionary string var string string SegmentInfo string IndexOutput IndexOutput private private decl_stmt string = if == - = else ++ decl_stmt IndexOutput = decl_stmt bool = decl_stmt var = new < try = call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() foreach in decl_stmt Lucene.Net.Index.SegmentInfo = call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() decl_stmt int = if < || || throw new + + + + + call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() foreach < < in call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteStringSet() call IndexOutput.WriteStringSet() call IndexOutput.WriteStringSet() call IndexOutput.WriteStringSet() call IndexOutput.WriteStringSet() == decl_stmt string = if == || < if ! decl_stmt string = call Lucene.Net.Index.SegmentInfo.AddFile(string) call Lucene.Net.Index.SegmentInfo.AddFile(string) call Lucene.Net.Index.SegmentInfo.AddFile(string) call Lucene.Net.Index.SegmentInfo.AddFile(string) call Lucene.Net.Index.SegmentInfo.AddFile(string) decl_stmt string = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new decl_stmt IndexOutput = try finally call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() = = finally if ! foreach in try catch try catch string IndexInput private static private static decl_stmt string = decl_stmt Lucene.Net.Store.IndexInput = try = if == return catch finally if != return IndexOutput bool string public static public static decl_stmt string = decl_stmt bool = decl_stmt IndexOutput = try if is == throw new + + call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() sbyte : call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringSet() call IndexOutput.WriteStringSet() call IndexOutput.WriteStringSet() call IndexOutput.WriteStringSet() call IndexOutput.WriteStringSet() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() = finally if ! try catch return var public public decl_stmt var = = new < foreach in != call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() = new < return return return return = return = return private static private static call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) + + + public virtual public virtual return decl string ChecksumIndexInput bool IOException string object bool long long string int long int int long long long public virtual public virtual if != if != throw new return decl_stmt string = decl_stmt long = - decl_stmt long = decl_stmt int = decl_stmt IOException = decl_stmt int = decl_stmt bool = while if decl_stmt string = decl_stmt long = - = if != = if != + decl_stmt long = - decl_stmt Lucene.Net.Store.ChecksumIndexInput = try = catch if != + if != try decl_stmt int = call ChecksumIndexInput.ReadInt() call ChecksumIndexInput.ReadInt() call ChecksumIndexInput.ReadInt() call ChecksumIndexInput.ReadInt() call ChecksumIndexInput.ReadInt() if == || == decl_stmt long = call ChecksumIndexInput.ReadLong() call ChecksumIndexInput.ReadLong() call ChecksumIndexInput.ReadLong() call ChecksumIndexInput.ReadLong() call ChecksumIndexInput.ReadLong() decl_stmt long = call ChecksumIndexInput.ReadLong() call ChecksumIndexInput.ReadLong() call ChecksumIndexInput.ReadLong() call ChecksumIndexInput.ReadLong() call ChecksumIndexInput.ReadLong() if != + + + if == else if == = else throw new catch if is throw finally call ChecksumIndexInput.Dispose() call ChecksumIndexInput.Dispose() call ChecksumIndexInput.Dispose() call ChecksumIndexInput.Dispose() call ChecksumIndexInput.Dispose() if != + + = if == - throw new + + + if && == && >= = if ! if < ++ ++ if != + else throw else if == ++ else = = = try decl_stmt object = if != + return catch if == = if != + + + + + + + if > && && == decl_stmt string = - decl_stmt bool try = catch = if if != + + try decl_stmt object = if != + return catch if != + + + + internal internal = = string internal internal if != = decl_stmt string = internal internal if != throw new var var string var public < public < decl_stmt var = new < if decl_stmt string = if != call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() decl_stmt var = for = < ++ decl_stmt var = == if == call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.Files() call var.Files() call var.Files() call var.Files() call var.Files() return bool var internal internal if == throw new decl_stmt bool = try = finally if ! else = try call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() = finally if ! else = decl_stmt var = = try = finally if ! try catch = internal internal var int SegmentCommitInfo public public decl_stmt var = new call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() decl_stmt int = for = < ++ if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() decl_stmt Lucene.Net.Index.SegmentCommitInfo = call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call Lucene.Net.Index.SegmentCommitInfo.ToString() call Lucene.Net.Index.SegmentCommitInfo.ToString() call Lucene.Net.Index.SegmentCommitInfo.ToString() call Lucene.Net.Index.SegmentCommitInfo.ToString() call Lucene.Net.Index.SegmentCommitInfo.ToString() return call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() return if == = < else = internal internal = public public return call decl List.Sum() call decl List.Sum() call decl List.Sum() call decl List.Sum() call decl List.Sum() public public ++ SegmentCommitInfo bool var int internal internal decl_stmt var = new < decl_stmt bool = decl_stmt int = for = = < ++ >= decl_stmt Lucene.Net.Index.SegmentCommitInfo = if call var.Contains() call var.Contains() call var.Contains() call var.Contains() call var.Contains() if ! && ! = = ++ else = ++ call decl List.SubList() call decl List.SubList() call decl List.SubList() call decl List.SubList() call decl List.SubList() if ! && ! call decl List.Insert() call decl List.Insert() call decl List.Insert() call decl List.Insert() call decl List.Insert() var internal < internal < decl_stmt var = new < foreach in != call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() return internal internal < public < public < return < public public return public public call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() public public < foreach in public public call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() public public call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() internal internal call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() internal internal return call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() internal internal return call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf()