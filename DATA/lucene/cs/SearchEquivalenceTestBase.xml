Lucene.Net.Search System using System.Collections using System.Text using Lucene.Net.Documents using Lucene.Net.Support using Lucene.Net.Randomized.Generators using NUnit.Framework using Lucene.Net.Analysis.Analyzer Lucene.Net.Util.Automaton.BasicAutomata Lucene.Net.Util.Automaton.CharacterRunAutomaton Lucene.Net.Store.Directory Documents.Document Field Lucene.Net.Index.IndexReader Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Analysis.MockTokenizer Lucene.Net.Index.RandomIndexWriter StringField Lucene.Net.Index.Term Lucene.Net.Util.TestUtil TextField class Lucene.Net.Search.SearchEquivalenceTestBase super super LuceneTestCase IndexReader Directory IndexSearcher string Analyzer int Document Random RandomIndexWriter Field Term int Field CharacterRunAutomaton public public decl_stmt System.Random = = = + decl_stmt Lucene.Net.Util.Automaton.CharacterRunAutomaton = new = new decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.Field = new decl_stmt Lucene.Net.Documents.Field = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) decl_stmt int = for = < ++ = = call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt int = / for = < ++ decl_stmt Lucene.Net.Index.Term = new call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) else call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) new = = = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() public public call Lucene.Net.Analysis.Analyzer.Dispose() call Lucene.Net.Analysis.Analyzer.Dispose() call Lucene.Net.Analysis.Analyzer.Dispose() call Lucene.Net.Analysis.Analyzer.Dispose() call Lucene.Net.Analysis.Analyzer.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call string.Dispose() call string.Dispose() call string.Dispose() call string.Dispose() call string.Dispose() = = = = = StringBuilder int internal static internal static decl_stmt System.Text.StringBuilder = new decl_stmt int = for = < ++ if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) internal static internal static return char protected internal virtual protected internal virtual return new + protected internal virtual protected internal virtual return new + public virtual public virtual public virtual public virtual TopDocs TopDocs var protected internal virtual protected internal virtual if != && = new = new = decl_stmt Lucene.Net.Search.TopDocs = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) decl_stmt Lucene.Net.Search.TopDocs = call Directory.Search() call Directory.Search() call Directory.Search() call Directory.Search() call Directory.Search() <= decl_stmt var = new for = < ++ call var.SafeSet() call var.SafeSet() call var.SafeSet() call var.SafeSet() call var.SafeSet() for = < ++ call var.SafeGet() call var.SafeGet() call var.SafeGet() call var.SafeGet() call var.SafeGet()