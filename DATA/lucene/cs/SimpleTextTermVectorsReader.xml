Lucene.Net.Codecs.SimpleText System.Linq using Lucene.Net.Support using System using System.Diagnostics using System.Collections.Generic using Index.DocsAndPositionsEnum Index.DocsEnum Index.Fields Index.IndexFileNames Index.SegmentInfo Index.Terms Index.TermsEnum Store.AlreadyClosedException Store.BufferedChecksumIndexInput Store.ChecksumIndexInput Store.Directory Store.IOContext Store.IndexInput Util.ArrayUtil Util.Bits Util.BytesRef Util.CharsRef Util.IOUtils Util.StringHelper Util.UnicodeUtil class Lucene.Net.Codecs.SimpleText.SimpleTextTermVectorsReader super super TermVectorsReader decl long BytesRef CharsRef IndexInput int ChecksumIndexInput private private decl_stmt Lucene.Net.Store.ChecksumIndexInput = new = new decl_stmt int = while ! call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) if = ++ == var var var var var var var var var var var var public override public override decl_stmt var = new < call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt var = if == return for = < ++ decl_stmt var = decl_stmt var = decl_stmt var = decl_stmt var = decl_stmt var = decl_stmt var = new call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() for = < ++ decl_stmt var = new decl_stmt var = - call var.Grow() call var.Grow() call var.Grow() call var.Grow() call var.Grow() = + decl_stmt var = new call var.TERMS() call var.TERMS() call var.TERMS() call var.TERMS() call var.TERMS() call var.TERMS() call var.TERMS() call var.TERMS() call var.TERMS() = if ! && ! continue if = new if = new if = new = new for = < ++ if = if if - == = else decl_stmt var = new - + = new if ! continue = = return new public override public override if == throw new return new call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() protected override protected override if return try finally = = private private private private + - return private private + - return call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() public override public override return public override public override public override < public override < return public override public override return return public override public override return new return public override public override return return - return return public override public override return public override public override return public override public override return public override public override return var public override public override decl_stmt var = new < foreach in >= call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() = call var.EntrySet() call var.EntrySet() call var.EntrySet() call var.EntrySet() call var.EntrySet() try return : catch return public override public override throw new public override public override try = return catch return public override public override return public override public override throw new public override public override return public override public override return var public override public override decl_stmt var = new call var.Reset() call var.Reset() call var.Reset() call var.Reset() call var.Reset() & == : return var var public override public override decl_stmt var = if == && == return decl_stmt var = new call var.Reset() call var.Reset() call var.Reset() call var.Reset() call var.Reset() return return public override public override != - return public override public override return public override public override if || != && ! return = = return = public override public override return public public = = = - = public override public override return public override public override if != return != return public override public override return public override public override if || != && ! return = = return = public override public override return public public = = = = = = - = = return == : - public override public override != && < || != && < if != return ++ ++ return - public override public override if == return - return - public override public override if == return - return - public override public override return