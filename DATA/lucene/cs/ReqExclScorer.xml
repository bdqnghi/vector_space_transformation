Lucene.Net.Search System.Collections.Generic using class Lucene.Net.Search.ReqExclScorer super super Scorer Scorer int DocIdSetIterator public override public override if == return = call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() if == = return if == return return = int int private private decl_stmt int = call Lucene.Net.Search.DocIdSetIterator.DocID() call Lucene.Net.Search.DocIdSetIterator.DocID() call Lucene.Net.Search.DocIdSetIterator.DocID() call Lucene.Net.Search.DocIdSetIterator.DocID() call Lucene.Net.Search.DocIdSetIterator.DocID() decl_stmt int = call Scorer.DocID() call Scorer.DocID() call Scorer.DocID() call Scorer.DocID() call Scorer.DocID() do if < return else if > = call Lucene.Net.Search.DocIdSetIterator.Advance(int) call Lucene.Net.Search.DocIdSetIterator.Advance(int) call Lucene.Net.Search.DocIdSetIterator.Advance(int) call Lucene.Net.Search.DocIdSetIterator.Advance(int) call Lucene.Net.Search.DocIdSetIterator.Advance(int) if == = return if > return = call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() != = return public override public override return public override public override return call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() public override public override return call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() return new new public override public override if == return = if == return = call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() if call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() == = return = return = public override public override return call Scorer.Cost() call Scorer.Cost() call Scorer.Cost() call Scorer.Cost() call Scorer.Cost()