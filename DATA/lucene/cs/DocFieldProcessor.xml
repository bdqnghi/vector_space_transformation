Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Util.ArrayUtil Lucene.Net.Codecs.Codec Lucene.Net.Util.Counter Lucene.Net.Codecs.FieldInfosWriter Lucene.Net.Store.IOContext class Lucene.Net.Index.DocFieldProcessor super super DocConsumer int Counter StoredFieldsConsumer decl DocState decl DocFieldProcessorPerField int decl DocFieldProcessorPerField int Codec decl DocumentsWriterPerThread int DocFieldConsumer decl ICollection decl IDictionary FieldInfosWriter public override public override decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < decl_stmt System.Collections.Generic.ICollection < = foreach in = == call StoredFieldsConsumer.Flush() call StoredFieldsConsumer.Flush() call StoredFieldsConsumer.Flush() call StoredFieldsConsumer.Flush() call StoredFieldsConsumer.Flush() call DocFieldConsumer.Flush() call DocFieldConsumer.Flush() call DocFieldConsumer.Flush() call DocFieldConsumer.Flush() call DocFieldConsumer.Flush() decl_stmt FieldInfosWriter = call Codec.FieldInfosFormat() call Codec.FieldInfosFormat() call Codec.FieldInfosFormat() call Codec.FieldInfosFormat() call Codec.FieldInfosFormat() call FieldInfosWriter.Write() call FieldInfosWriter.Write() call FieldInfosWriter.Write() call FieldInfosWriter.Write() call FieldInfosWriter.Write() DocFieldProcessorPerField Exception DocFieldProcessorPerField public override public override decl_stmt System.Exception = foreach in decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = while != decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = try call Lucene.Net.Index.DocFieldProcessorPerField.Abort() call Lucene.Net.Index.DocFieldProcessorPerField.Abort() call Lucene.Net.Index.DocFieldProcessorPerField.Abort() call Lucene.Net.Index.DocFieldProcessorPerField.Abort() call Lucene.Net.Index.DocFieldProcessorPerField.Abort() catch if == = = try call StoredFieldsConsumer.Abort() call StoredFieldsConsumer.Abort() call StoredFieldsConsumer.Abort() call StoredFieldsConsumer.Abort() call StoredFieldsConsumer.Abort() catch if == = try call DocFieldConsumer.Abort() call DocFieldConsumer.Abort() call DocFieldConsumer.Abort() call DocFieldConsumer.Abort() call DocFieldConsumer.Abort() catch if == = if != if is throw throw new decl ICollection DocFieldProcessorPerField public < public < decl_stmt System.Collections.Generic.ICollection < = new < for = < ++ decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = while != call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() = == return int decl DocFieldProcessorPerField int int DocFieldProcessorPerField DocFieldProcessorPerField private private decl_stmt int = * > decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = new decl_stmt int = - for = < ++ decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = while != decl_stmt int = call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() & decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = = = = = = DocFieldProcessorPerField int int string decl DocFieldProcessorPerField FieldInfo int DocFieldProcessorPerField public override public override call DocFieldConsumer.StartDocument() call DocFieldConsumer.StartDocument() call DocFieldConsumer.StartDocument() call DocFieldConsumer.StartDocument() call DocFieldConsumer.StartDocument() call StoredFieldsConsumer.StartDocument() call StoredFieldsConsumer.StartDocument() call StoredFieldsConsumer.StartDocument() call StoredFieldsConsumer.StartDocument() call StoredFieldsConsumer.StartDocument() = decl_stmt int = ++ foreach in decl_stmt string = decl_stmt int = call string.GetHashCode() call string.GetHashCode() call string.GetHashCode() call string.GetHashCode() call string.GetHashCode() & decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = while != && ! call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() call DocFieldProcessorPerField.FieldInfo() = if == decl_stmt Lucene.Net.Index.FieldInfo = = new = = ++ if >= / else decl_stmt Lucene.Net.Index.FieldInfo = == if != = if == decl_stmt int = * decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = new = ++ = = call DocFieldProcessorPerField.AddField() call DocFieldProcessorPerField.AddField() call DocFieldProcessorPerField.AddField() call DocFieldProcessorPerField.AddField() call DocFieldProcessorPerField.AddField() call StoredFieldsConsumer.AddField() call StoredFieldsConsumer.AddField() call StoredFieldsConsumer.AddField() call StoredFieldsConsumer.AddField() call StoredFieldsConsumer.AddField() for = < ++ decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = call DocFieldProcessorPerField.Consumer() call DocFieldProcessorPerField.Consumer() call DocFieldProcessorPerField.Consumer() call DocFieldProcessorPerField.Consumer() call DocFieldProcessorPerField.Consumer() call DocFieldProcessorPerField.Consumer() call DocFieldProcessorPerField.Consumer() call DocFieldProcessorPerField.Consumer() call DocFieldProcessorPerField.Consumer() public virtual public virtual return public override public override try call StoredFieldsConsumer.FinishDocument() call StoredFieldsConsumer.FinishDocument() call StoredFieldsConsumer.FinishDocument() call StoredFieldsConsumer.FinishDocument() call StoredFieldsConsumer.FinishDocument() finally call DocFieldConsumer.FinishDocument() call DocFieldConsumer.FinishDocument() call DocFieldConsumer.FinishDocument() call DocFieldConsumer.FinishDocument() call DocFieldConsumer.FinishDocument()