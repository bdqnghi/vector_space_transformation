Lucene.Net.Search.Highlight System using System.Collections.Generic using Lucene.Net.Analysis using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Index using Lucene.Net.Index.Memory using Lucene.Net.Search.Spans using Lucene.Net.Support using Lucene.Net.Util using class Lucene.Net.Search.Highlight.QueryScorer super super IScorer bool Query decl IDictionary IPositionIncrementAttribute decl ISet IndexReader String ITermAttribute int float float String bool bool return return float String WeightedSpanTerm public public += decl_stmt System.String = decl_stmt Lucene.Net.Search.Highlight.WeightedSpanTerm if = == return if call WeightedSpanTerm.IsPositionSensitive() call WeightedSpanTerm.IsPositionSensitive() call WeightedSpanTerm.IsPositionSensitive() call WeightedSpanTerm.IsPositionSensitive() call WeightedSpanTerm.IsPositionSensitive() && ! call Lucene.Net.Search.Highlight.WeightedSpanTerm.CheckPosition(int) call Lucene.Net.Search.Highlight.WeightedSpanTerm.CheckPosition(int) call Lucene.Net.Search.Highlight.WeightedSpanTerm.CheckPosition(int) call Lucene.Net.Search.Highlight.WeightedSpanTerm.CheckPosition(int) call Lucene.Net.Search.Highlight.WeightedSpanTerm.CheckPosition(int) return decl_stmt float = if ! call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() += call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() return public public = - = < = < if ! if != call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() return return public public return private private = = = = WeightedSpanTermExtractor private private decl_stmt Lucene.Net.Search.Highlight.WeightedSpanTermExtractor = == new : new = call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.SetWrapIfNotCachingTokenFilter(bool) call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.SetWrapIfNotCachingTokenFilter(bool) call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.SetWrapIfNotCachingTokenFilter(bool) call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.SetWrapIfNotCachingTokenFilter(bool) call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.SetWrapIfNotCachingTokenFilter(bool) if == = call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.GetWeightedSpanTerms(Query,TokenStream,String) call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.GetWeightedSpanTerms(Query,TokenStream,String) call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.GetWeightedSpanTerms(Query,TokenStream,String) call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.GetWeightedSpanTerms(Query,TokenStream,String) call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.GetWeightedSpanTerms(Query,TokenStream,String) else = call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.GetWeightedSpanTermsWithScores(Query,TokenStream,String,IndexReader) call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.GetWeightedSpanTermsWithScores(Query,TokenStream,String,IndexReader) call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.GetWeightedSpanTermsWithScores(Query,TokenStream,String,IndexReader) call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.GetWeightedSpanTermsWithScores(Query,TokenStream,String,IndexReader) call Lucene.Net.Search.Highlight.WeightedSpanTermExtractor.GetWeightedSpanTermsWithScores(Query,TokenStream,String,IndexReader) if return return public public = < = return = public public =