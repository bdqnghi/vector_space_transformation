Lucene.Net.Util.Automaton System using Lucene.Net.Support using System.Collections using System.Collections.Generic using System.Linq using System.Text using Lucene.Net.Util.Fst.Util class Lucene.Net.Util.Automaton.SpecialOperations int int int internal static internal static decl_stmt int = decl_stmt int = while - > decl_stmt int = + >> if > = else if < = else return return public static public static if return return new new private static private static foreach in if || ! && ! return return StringBuilder var State bool Transition decl HashSet public static public static if return decl_stmt System.Text.StringBuilder = new decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt bool do = call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() if ! && call Lucene.Net.Util.Automaton.State.NumTransitions() call Lucene.Net.Util.Automaton.State.NumTransitions() call Lucene.Net.Util.Automaton.State.NumTransitions() call Lucene.Net.Util.Automaton.State.NumTransitions() call Lucene.Net.Util.Automaton.State.NumTransitions() == decl_stmt var = call State.Transitions() call State.Transitions() call State.Transitions() call State.Transitions() call State.Transitions() call State.Transitions() call State.Transitions() call State.Transitions() call State.Transitions() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() decl_stmt Lucene.Net.Util.Automaton.Transition = if == && ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = = ! return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) var State bool Transition decl HashSet BytesRef public static public static if return new decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt bool do = call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() if ! && call Lucene.Net.Util.Automaton.State.NumTransitions() call Lucene.Net.Util.Automaton.State.NumTransitions() call Lucene.Net.Util.Automaton.State.NumTransitions() call Lucene.Net.Util.Automaton.State.NumTransitions() call Lucene.Net.Util.Automaton.State.NumTransitions() == decl_stmt var = call State.Transitions() call State.Transitions() call State.Transitions() call State.Transitions() call State.Transitions() call State.Transitions() call State.Transitions() call State.Transitions() call State.Transitions() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() decl_stmt Lucene.Net.Util.Automaton.Transition = if == && ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) ++ - = byte = = ! return Automaton public static public static if return decl_stmt Lucene.Net.Util.Automaton.Automaton = call Lucene.Net.Util.Automaton.Automaton.Determinize() call Lucene.Net.Util.Automaton.Automaton.Determinize() call Lucene.Net.Util.Automaton.Automaton.Determinize() call Lucene.Net.Util.Automaton.Automaton.Determinize() call Lucene.Net.Util.Automaton.Automaton.Determinize() return new Automaton BytesRef public static public static if return new decl_stmt Lucene.Net.Util.Automaton.Automaton = call Lucene.Net.Util.Automaton.Automaton.Determinize() call Lucene.Net.Util.Automaton.Automaton.Determinize() call Lucene.Net.Util.Automaton.Automaton.Determinize() call Lucene.Net.Util.Automaton.Automaton.Determinize() call Lucene.Net.Util.Automaton.Automaton.Determinize() decl_stmt Lucene.Net.Util.BytesRef = return int var private static private static if <= return decl_stmt int = >> for = < + ++ decl_stmt var = = * + - - * + - - = decl State decl HashSet decl Dictionary decl HashSet public static < public static < decl_stmt org.apache.lucene.analysis.hunspell.Dictionary < < = new < < decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt System.Collections.Generic.HashSet < = new < foreach in if call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() foreach in = new < = foreach in foreach in new foreach in decl_stmt System.Collections.Generic.HashSet < = = call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() = = new foreach in = return decl HashSet public static < public static < decl_stmt System.Collections.Generic.HashSet < = new < if if > call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() new else if ! new < new return return private static private static < < foreach in if return for = <= ++ + = ++ if if >= && > return if ! return -- return