Lucene.Net.Analysis.Shingle System using System.Collections.Generic using System.Linq using System.Text using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Util using class Lucene.Net.Analysis.Shingle.ShingleFilter super super TokenFilter decl AttributeSource bool String int String decl int int decl LinkedList int ITermAttribute decl char decl StringBuilder int decl State bool decl State decl AttributeSource IOffsetAttribute public public = public public = public public if < throw new = new for = < ++ = new = private private for = < ++ = int StringBuilder decl char public sealed override public sealed override while if == if ! return = if if == = ++ return else if == ++ if < = call bool.SetOffset() call bool.SetOffset() call bool.SetOffset() call bool.SetOffset() call bool.SetOffset() decl_stmt System.Text.StringBuilder = decl_stmt int = decl_stmt char = call decl State.TermBuffer() call decl State.TermBuffer() call decl State.TermBuffer() call decl State.TermBuffer() call decl State.TermBuffer() if < = call decl State.ResizeTermBuffer() call decl State.ResizeTermBuffer() call decl State.ResizeTermBuffer() call decl State.ResizeTermBuffer() call decl State.ResizeTermBuffer() call System.Text.StringBuilder.CopyTo(int,char,int,int) call System.Text.StringBuilder.CopyTo(int,char,int,int) call System.Text.StringBuilder.CopyTo(int,char,int,int) call System.Text.StringBuilder.CopyTo(int,char,int,int) call System.Text.StringBuilder.CopyTo(int,char,int,int) call decl State.SetTermLength() call decl State.SetTermLength() call decl State.SetTermLength() call decl State.SetTermLength() call decl State.SetTermLength() if ! && == = else = ++ if == = = return else = = private private while if > if == = else -- call bool.SetOffset() call bool.SetOffset() call bool.SetOffset() call bool.SetOffset() call bool.SetOffset() call decl State.SetTermBuffer() call decl State.SetTermBuffer() call decl State.SetTermBuffer() call decl State.SetTermBuffer() call decl State.SetTermBuffer() return if if != = = return if ! return = if > = - int bool private private decl_stmt bool = do if call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() if > call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() = else break < if == return if ! call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() if == return = new call int.Initialize() call int.Initialize() call int.Initialize() call int.Initialize() call int.Initialize() decl_stmt int = for < = call decl LinkedList.GetEnumerator() call decl LinkedList.GetEnumerator() call decl LinkedList.GetEnumerator() call decl LinkedList.GetEnumerator() call decl LinkedList.GetEnumerator() for = < ++ if != call decl State.TermBuffer() call decl State.TermBuffer() call decl State.TermBuffer() call decl State.TermBuffer() call decl State.TermBuffer() call decl State.TermLength() call decl State.TermLength() call decl State.TermLength() call decl State.TermLength() call decl State.TermLength() = ++ return public override public override = = call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() = = =