Lucene.Net.Codecs.Lucene40 System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Lucene.Net.Index.DocsAndPositionsEnum Lucene.Net.Index.DocsEnum Lucene.Net.Index.FieldInfo Lucene.Net.Index.FieldInfos Lucene.Net.Index.Fields Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexInput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Index.SegmentInfo Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum class Lucene.Net.Codecs.Lucene40.Lucene40TermVectorsReader super super TermVectorsReader super IDisposable int int sbyte long int FieldInfos long sbyte long int string int string int string IndexInput string sbyte string string IndexInput IndexInput return return internal virtual internal virtual call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() * + int int long long long long internal internal if == return decl_stmt long = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt long = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt long = decl_stmt long = decl_stmt int = while < decl_stmt int = + + <= if < = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() else = call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() = call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() == - = - = - ++ = = protected override protected override if internal virtual internal virtual return public override < public override < return int private < private < decl_stmt int = while != && < yield ++ FieldInfo int public override public override decl_stmt Lucene.Net.Index.FieldInfo = if == return decl_stmt int if ! out return return new if == return else return TVTermsEnum public override public override decl_stmt TVTermsEnum if is = if ! call TVTermsEnum.CanReuse() call TVTermsEnum.CanReuse() call TVTermsEnum.CanReuse() call TVTermsEnum.CanReuse() call TVTermsEnum.CanReuse() = new else = new call TVTermsEnum.Reset() call TVTermsEnum.Reset() call TVTermsEnum.Reset() call TVTermsEnum.Reset() call TVTermsEnum.Reset() return public override public override return return - return return return public override public override return public override public override return public override public override return public override public override return public virtual public virtual return == public virtual public virtual = = = = = call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() = = = = = = = - int public override public override if != decl_stmt int = if < = call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() else if == return while != decl_stmt int = if < return else if == return return public override public override throw new int int int int int int public override public override if >= return decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = + call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if = new = new decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() += uint >> = if & != = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = += >= = new call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() else if = new decl_stmt int = for = < ++ += call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = if = new = new decl_stmt int = for = < ++ = + call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = = + call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() ++ return public override public override return public override public override throw new public override public override return public override public override return TVDocsEnum public override public override decl_stmt TVDocsEnum if != && is = else = new call TVDocsEnum.Reset() call TVDocsEnum.Reset() call TVDocsEnum.Reset() call TVDocsEnum.Reset() call TVDocsEnum.Reset() return TVDocsAndPositionsEnum public override public override if ! && ! return decl_stmt TVDocsAndPositionsEnum if != && is = else = new call TVDocsAndPositionsEnum.Reset() call TVDocsAndPositionsEnum.Reset() call TVDocsAndPositionsEnum.Reset() call TVDocsAndPositionsEnum.Reset() call TVDocsAndPositionsEnum.Reset() return return public override public override return public override public override return public override public override if ! && == || = return = else return = public override public override return public virtual public virtual = = = - = public override public override return public override public override if != return else != return public override public override return public override public override if ! && == || = return = else return = public override public override return public public = = = = = = = - = = int int if == return else decl_stmt int = - decl_stmt int = == : if - == return = = = - return public override public override != && < || != && < if != return ++ else ++ return - public override public override if == return - else return - public override public override if == return - else return - public override public override return Fields public override public override if != decl_stmt Lucene.Net.Index.Fields = new if == return else return else return IndexInput IndexInput IndexInput public override public override decl_stmt Lucene.Net.Store.IndexInput = decl_stmt Lucene.Net.Store.IndexInput = decl_stmt Lucene.Net.Store.IndexInput = if != && != && != = call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() = call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() = call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() return new public override public override return public override public override