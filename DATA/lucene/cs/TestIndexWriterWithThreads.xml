Lucene.Net.Index Apache.NMS.Util using System using System.Diagnostics using System.Threading using Lucene.Net.Documents using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using System.IO using Lucene.Net.Store.AlreadyClosedException Lucene.Net.Store.BaseDirectoryWrapper Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Lucene.Net.Search.DocIdSetIterator Documents.Document Field FieldType Lucene.Net.Util.LineFileDocs Lucene.Net.Store.LockObtainFailedException Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Store.MockDirectoryWrapper NumericDocValuesField Lucene.Net.Util.TestUtil TextField class attribute Lucene.Net.Index.TestIndexWriterWithThreads super super LuceneTestCase Document FieldType long int int public override public override decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.FieldType = new = = = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new decl_stmt int = decl_stmt int = decl_stmt long = + do try new + ++ ++ catch if if || = try catch throw new if ++ >= break else if + = break catch if + = break < int IndexWriter decl IndexerThread MockDirectoryWrapper int public virtual public virtual decl_stmt int = decl_stmt int = : for = < ++ if + decl_stmt Lucene.Net.Store.MockDirectoryWrapper = decl_stmt Lucene.Net.Index.IndexWriter = new new new = * + * decl_stmt IndexerThread = new for = < ++ = new for = < ++ for = < ++ == = call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() int int int IndexWriter DocsEnum bool IndexReader decl IndexerThread Directory public virtual public virtual decl_stmt int = decl_stmt int = : for = < ++ if + decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new new new decl_stmt IndexerThread = new for = < ++ = new for = < ++ decl_stmt bool = while ! for = < ++ if > = break else if ! if call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) for = < ++ if decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Lucene.Net.Index.DocsEnum = new decl_stmt int = while call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != ++ > call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() int bool Bits IndexWriter decl IndexerThread IndexReader MockDirectoryWrapper public virtual public virtual decl_stmt int = for = < ++ if + decl_stmt Lucene.Net.Store.MockDirectoryWrapper = decl_stmt Lucene.Net.Index.IndexWriter = new new new decl_stmt IndexerThread = new for = < ++ = new for = < ++ call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) for = < ++ == decl_stmt bool = try call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) = catch call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) if + if decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Lucene.Net.Spatial.Util.Bits = for = < ++ if == || ! call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() Document IndexWriter FieldType MockDirectoryWrapper public virtual public virtual decl_stmt Lucene.Net.Store.MockDirectoryWrapper = decl_stmt Lucene.Net.Index.IndexWriter = new new new decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.FieldType = new = = = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) for = < ++ call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) try call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) catch call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() bool bool bool var var public override public override = if decl_stmt var = new decl_stmt bool = decl_stmt bool = decl_stmt bool = foreach in call var.GetFrames() call var.GetFrames() call var.GetFrames() call var.GetFrames() call var.GetFrames() decl_stmt var = if && && break if || = if = if || = if && ! && ! if = throw new public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new var var public override public override if decl_stmt var = new foreach in call var.GetFrames() call var.GetFrames() call var.GetFrames() call var.GetFrames() call var.GetFrames() decl_stmt var = if if = throw new public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new IndexReader CountDownLatch DelayedIndexAndCloseRunnable Directory DelayedIndexAndCloseRunnable public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt CountDownLatch = new decl_stmt DelayedIndexAndCloseRunnable = new decl_stmt DelayedIndexAndCloseRunnable = new call DelayedIndexAndCloseRunnable.Start() call DelayedIndexAndCloseRunnable.Start() call DelayedIndexAndCloseRunnable.Start() call DelayedIndexAndCloseRunnable.Start() call DelayedIndexAndCloseRunnable.Start() call DelayedIndexAndCloseRunnable.Start() call DelayedIndexAndCloseRunnable.Start() call DelayedIndexAndCloseRunnable.Start() call DelayedIndexAndCloseRunnable.Start() call DelayedIndexAndCloseRunnable.Start() call CountDownLatch.await() call CountDownLatch.await() call CountDownLatch.await() call CountDownLatch.await() call CountDownLatch.await() call DelayedIndexAndCloseRunnable.StartIndexing() call DelayedIndexAndCloseRunnable.StartIndexing() call DelayedIndexAndCloseRunnable.StartIndexing() call DelayedIndexAndCloseRunnable.StartIndexing() call DelayedIndexAndCloseRunnable.StartIndexing() call DelayedIndexAndCloseRunnable.StartIndexing() call DelayedIndexAndCloseRunnable.StartIndexing() call DelayedIndexAndCloseRunnable.StartIndexing() call DelayedIndexAndCloseRunnable.StartIndexing() call DelayedIndexAndCloseRunnable.StartIndexing() call DelayedIndexAndCloseRunnable.Join() call DelayedIndexAndCloseRunnable.Join() call DelayedIndexAndCloseRunnable.Join() call DelayedIndexAndCloseRunnable.Join() call DelayedIndexAndCloseRunnable.Join() call DelayedIndexAndCloseRunnable.Join() call DelayedIndexAndCloseRunnable.Join() call DelayedIndexAndCloseRunnable.Join() call DelayedIndexAndCloseRunnable.Join() call DelayedIndexAndCloseRunnable.Join() try is is + + decl_stmt Lucene.Net.Index.IndexReader = call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() finally call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public virtual public virtual Document IndexWriter Field public override public override try decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.Field = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) decl_stmt Lucene.Net.Index.IndexWriter = new new call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) catch = = return decl AtomicReference ReentrantLock BaseDirectoryWrapper int LineFileDocs MockAnalyzer AtomicBoolean decl ThreadClass int ReentrantLock public virtual public virtual decl_stmt Lucene.Net.Store.BaseDirectoryWrapper = if is = decl_stmt int = decl_stmt AtomicReference < = new < decl_stmt Lucene.Net.Analysis.MockAnalyzer = new = = new decl_stmt Lucene.Net.Util.LineFileDocs = new decl_stmt Lucene.Net.Support.ThreadClass = new decl_stmt int = decl_stmt Lucene.Net.Support.AtomicBoolean = new decl_stmt Lucene.Net.Support.ReentrantLock = new decl_stmt Lucene.Net.Support.ReentrantLock = new for = < ++ = new for = < ++ ! call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call decl AtomicReference.Value() call decl AtomicReference.Value() call decl AtomicReference.Value() call decl AtomicReference.Value() call decl AtomicReference.Value() call decl AtomicReference.Value() call decl AtomicReference.Value() call decl AtomicReference.Value() call decl AtomicReference.Value() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() int public override public override for = < && ! ++ decl_stmt int = try switch case if + + try if + + = new new finally break case if + + try if catch catch finally break case if + + try catch catch catch break catch throw new