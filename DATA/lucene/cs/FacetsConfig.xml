Lucene.Net.Facet System using System.Diagnostics using System.Collections.Generic using System.Collections.Concurrent using System.Linq using System.Text using System.Threading using Lucene.Net.Facet.SortedSet using Lucene.Net.Facet.Taxonomy using Lucene.Net.Documents.BinaryDocValuesField Lucene.Net.Documents.Document Lucene.Net.Documents.Field Lucene.Net.Documents.SortedSetDocValuesField Lucene.Net.Documents.StringField Lucene.Net.Facet.SortedSet.SortedSetDocValuesFacetField Lucene.Net.Facet.Taxonomy.AssociationFacetField Lucene.Net.Facet.Taxonomy.FacetLabel Lucene.Net.Facet.Taxonomy.FloatAssociationFacetField Lucene.Net.Facet.Taxonomy.IntAssociationFacetField Lucene.Net.Facet.Taxonomy.TaxonomyWriter Lucene.Net.Index.IndexableField Lucene.Net.Index.IndexableFieldType Lucene.Net.Util.ArrayUtil Lucene.Net.Util.BytesRef Lucene.Net.Util.IntsRef class Lucene.Net.Facet.FacetsConfig DimConfig decl IDictionary char string char decl IDictionary return DimConfig public virtual public virtual lock decl_stmt DimConfig if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = return var public virtual public virtual lock if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() decl_stmt var = new = = else = var public virtual public virtual lock if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() decl_stmt var = new = = else = var public virtual public virtual lock if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() decl_stmt var = new = = else = var public virtual public virtual lock if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() decl_stmt var = new = = else = return private static private static < if throw new + + public virtual public virtual return string decl IDictionary string decl IList decl IDictionary var AssociationFacetField string decl IDictionary decl IList decl FacetsConfig decl DimConfig public virtual public virtual decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = new < < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = new < < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = new < < decl_stmt var = new < foreach in if == decl_stmt Lucene.Net.Facet.FacetField = decl_stmt DimConfig = if == decl_stmt string = decl_stmt System.Collections.Generic.IList < if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = new < = call decl FacetsConfig.Add() call decl FacetsConfig.Add() call decl FacetsConfig.Add() call decl FacetsConfig.Add() call decl FacetsConfig.Add() if == decl_stmt var = decl_stmt DimConfig = if == decl_stmt string = decl_stmt System.Collections.Generic.IList < if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = new < = call decl FacetsConfig.Add() call decl FacetsConfig.Add() call decl FacetsConfig.Add() call decl FacetsConfig.Add() call decl FacetsConfig.Add() if == decl_stmt Lucene.Net.Facet.Taxonomy.AssociationFacetField = decl_stmt DimConfig = if == if throw new + + if throw new + + decl_stmt string = decl_stmt System.Collections.Generic.IList < if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = new < = call decl FacetsConfig.Add() call decl FacetsConfig.Add() call decl FacetsConfig.Add() call decl FacetsConfig.Add() call decl FacetsConfig.Add() decl_stmt string if is = else if is = else = decl_stmt string if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = else if ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() throw new + + + + + + decl_stmt Lucene.Net.Documents.Document = new foreach in decl_stmt Lucene.Net.Index.IndexableFieldType = if != && != && != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return FacetLabel decl FacetsConfig int IntsRef string decl DimConfig private private < < foreach < < in decl_stmt string = decl_stmt Lucene.Net.Util.IntsRef = new foreach in decl_stmt DimConfig = if > && == throw new + + + + decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = new decl_stmt int = if == call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) + ++ = if && || decl_stmt int = while > if == call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) + ++ = = if == -- for = <= ++ new new string FacetLabel string public public < < foreach < < in decl_stmt string = foreach in decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = new decl_stmt string = new new new new int int FacetLabel decl byte string private private < < foreach < < in decl_stmt byte = new decl_stmt int = decl_stmt string = foreach in decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = new decl_stmt int = if + > = + ++ = >> ++ = >> ++ = >> ++ = byte if + > = + += for = <= ++ new new new int int decl byte int int protected virtual protected virtual decl_stmt byte = new * decl_stmt int = - decl_stmt int = for = < ++ decl_stmt int = + if > decl_stmt int if == - = else = - if & ~ == = byte ++ else if & ~ == = unchecked | & >> + = & += else if & ~ == = unchecked | & >> + = unchecked | & >> + = & += else if & ~ == = unchecked | & >> + = unchecked | & >> + = unchecked | & >> + = & += else = unchecked | & >> + = unchecked | & >> + = unchecked | & >> + = unchecked | & >> + = & += = return new private private if == throw new decl string public static public static decl_stmt string = new + = return public static public static return StringBuilder string char int public static public static if == return decl_stmt System.Text.StringBuilder = new for = < ++ decl_stmt string = if == throw new decl_stmt int = for = < ++ decl_stmt char = if == || == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = - return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) int char decl char int decl IList bool public static public static decl_stmt System.Collections.Generic.IList < = new < decl_stmt int = if == return new decl_stmt char = new decl_stmt int = decl_stmt bool = for = < ++ decl_stmt char = if ++ = = else if == = else if == call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new = else ++ = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new ! return call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray()