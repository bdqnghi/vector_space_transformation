Lucene.Net.Search System.Linq using Lucene.Net.Documents using Lucene.Net.Index using System.Collections.Generic using System.Diagnostics using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Index.AtomicReader Lucene.Net.Search.BooleanQuery.BooleanWeight Lucene.Net.Util.BytesRef Lucene.Net.Search.Similarities.DefaultSimilarity Lucene.Net.Store.Directory Lucene.Net.Index.DirectoryReader Documents.Document Field Lucene.Net.Util.LuceneTestCase Lucene.Net.Index.RandomIndexWriter Lucene.Net.Search.Similarities.Similarity.SimScorer Lucene.Net.Search.Similarities.Similarity.SimWeight Lucene.Net.Index.SortedSetDocValues SortedSetDocValuesField StringField Lucene.Net.Index.Term Lucene.Net.Index.TermContext Lucene.Net.Util.TestUtil class attribute Lucene.Net.Search.TestMinShouldMatch2 super super LuceneTestCase IndexSearcher decl string decl string decl string DirectoryReader decl string AtomicReader Directory Document int RandomIndexWriter public static public static = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt int = for = < ++ decl_stmt Lucene.Net.Documents.Document = new if < if < if < call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() = = = new = new public override public override return public static public static call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() = = = = int decl IList private static private static decl_stmt System.Collections.Generic.IList < = = decl_stmt int = for = < ++ new new new BooleanQuery BooleanWeight private private decl_stmt Lucene.Net.Search.BooleanQuery = new foreach in call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) new new = decl_stmt BooleanWeight = call Lucene.Net.Search.IndexSearcher.CreateNormalizedWeight(Query) call Lucene.Net.Search.IndexSearcher.CreateNormalizedWeight(Query) call Lucene.Net.Search.IndexSearcher.CreateNormalizedWeight(Query) call Lucene.Net.Search.IndexSearcher.CreateNormalizedWeight(Query) call Lucene.Net.Search.IndexSearcher.CreateNormalizedWeight(Query) if return new else return call BooleanWeight.Scorer() call BooleanWeight.Scorer() call BooleanWeight.Scorer() call BooleanWeight.Scorer() call BooleanWeight.Scorer() int float float private private if == return decl_stmt int while = != decl_stmt float = decl_stmt float = int int float float private private if == return decl_stmt int = decl_stmt int while = + != + decl_stmt float = decl_stmt float = = + Scorer Scorer public virtual public virtual for = < ++ for = < ++ for = < ++ decl_stmt Lucene.Net.Search.Scorer = new decl_stmt Lucene.Net.Search.Scorer = new Scorer Scorer public virtual public virtual for = < += for = < ++ for = < ++ for = < ++ decl_stmt Lucene.Net.Search.Scorer = new decl_stmt Lucene.Net.Search.Scorer = new decl IList Scorer decl string Scorer public virtual public virtual decl_stmt System.Collections.Generic.IList < = new < call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() decl_stmt string = call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() for = <= ++ decl_stmt Lucene.Net.Search.Scorer = decl_stmt Lucene.Net.Search.Scorer = decl IList Scorer decl string Scorer public virtual public virtual decl_stmt System.Collections.Generic.IList < = new < call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() decl_stmt string = call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() for = < += for = <= ++ decl_stmt Lucene.Net.Search.Scorer = decl_stmt Lucene.Net.Search.Scorer = decl IList Scorer decl string Scorer public virtual public virtual decl_stmt System.Collections.Generic.IList < = new < call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() = for = <= ++ decl_stmt string = call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() for = <= ++ decl_stmt Lucene.Net.Search.Scorer = decl_stmt Lucene.Net.Search.Scorer = decl IList Scorer decl string Scorer public virtual public virtual decl_stmt System.Collections.Generic.IList < = new < call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() = for = < += for = <= ++ decl_stmt string = call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() for = <= ++ decl_stmt Lucene.Net.Search.Scorer = decl_stmt Lucene.Net.Search.Scorer = public override public override != return float * public override public override return public override public override return long public override public override != for = + < ++ = = = decl_stmt long while = != if ++ += int if >= return return = int public override public override decl_stmt int while = < return public override public override return