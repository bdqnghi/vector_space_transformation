Lucene.Net.Codecs.Memory System.Linq using System using System.Diagnostics using System.Collections.Generic using Lucene41.Lucene41PostingsFormat Index.DocsAndPositionsEnum Index.DocsEnum Index.FieldInfo.IndexOptions Index.FieldInfo Index.Fields Index.OrdTermState Index.SegmentReadState Index.SegmentWriteState Index.TermState Index.Terms Index.TermsEnum Store.IOContext Store.RAMOutputStream Util.ArrayUtil Util.Bits Util.BytesRef Util.RamUsageEstimator Util.Automaton.CompiledAutomaton Util.Automaton.RunAutomaton Util.Automaton.Transition class Lucene.Net.Codecs.Memory.DirectPostingsFormat super super PostingsFormat int int int int public override public override return FieldsProducer var public override public override decl_stmt var = if != decl_stmt FieldsProducer try call var.CheckIntegrity() call var.CheckIntegrity() call var.CheckIntegrity() call var.CheckIntegrity() call var.CheckIntegrity() = new finally call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() return else return public override < public override < return < public override public override return return return < + public override public override long public override public override decl_stmt long = foreach < in += * += return public override public override public override public override return != : + != : long public override public override decl_stmt long = += != : += != : if != foreach in += != : if != foreach in if != foreach in += != : return public public if == = ++ = var public public decl_stmt var = new = return long public public decl_stmt long = += != : += != : += != : += != : += != : if != foreach in += != : return int int int decl byte int int private private decl_stmt byte = decl_stmt int = decl_stmt int = + - decl_stmt int = decl_stmt int = + while < decl_stmt int = ++ & - ++ & if != return return - int int int int int int private private decl_stmt int = + - if < = if > decl_stmt int = - - decl_stmt int = decl_stmt int = - decl_stmt int = decl_stmt int = for < ++ if ++ == ++ ++ else for < ++ if >= = break for < ++ if >= = for = < ++ = else for = < ++ ++ int int TermAndSkip int int private private == decl_stmt int = - decl_stmt int = - for = < ++ if >= for = < ++ decl_stmt TermAndSkip = if != && > for = < / ++ decl_stmt int = - - decl_stmt int = = = TermAndSkip decl int internal internal decl_stmt TermAndSkip = - ++ if == = new else decl_stmt int = new + = - = DirectTermsEnum public override public override decl_stmt DirectTermsEnum if != && is = if ! call DirectTermsEnum.CanReuse() call DirectTermsEnum.CanReuse() call DirectTermsEnum.CanReuse() call DirectTermsEnum.CanReuse() call DirectTermsEnum.CanReuse() = new else = new call DirectTermsEnum.Reset() call DirectTermsEnum.Reset() call DirectTermsEnum.Reset() call DirectTermsEnum.Reset() call DirectTermsEnum.Reset() return public override public override return new public override public override return return return return return public override public override return public override public override return public override public override return public override public override return internal internal return == internal internal = = = + - return public public = - return public override public override ++ if < return else return OrdTermState public override public override decl_stmt Lucene.Net.Index.OrdTermState = new = return int int int int internal internal decl_stmt int = decl_stmt int = - while <= decl_stmt int = + >> decl_stmt int = if < = + else if > = - else return return - + int public override public override decl_stmt int = if >= = return else if == - - return else = - - return int public override public override decl_stmt int = if >= = return else return public override public override = int public override public override = public override public override return public override public override return public override public override if is return else return public override public override if is return else return HighFreqDocsEnum HighFreqTerm decl int int public override public override if is decl_stmt int = if if decl_stmt int if = else = if ++ decl_stmt LowFreqDocsEnum if is = if ! call HighFreqDocsEnum.CanReuse() call HighFreqDocsEnum.CanReuse() call HighFreqDocsEnum.CanReuse() call HighFreqDocsEnum.CanReuse() call HighFreqDocsEnum.CanReuse() = new else = new return call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() else decl_stmt LowFreqDocsEnumNoPos if is = if ! call HighFreqDocsEnum.CanReuse() call HighFreqDocsEnum.CanReuse() call HighFreqDocsEnum.CanReuse() call HighFreqDocsEnum.CanReuse() call HighFreqDocsEnum.CanReuse() = new else = new return call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() else decl_stmt LowFreqDocsEnumNoTF if is = if ! call HighFreqDocsEnum.CanReuse() call HighFreqDocsEnum.CanReuse() call HighFreqDocsEnum.CanReuse() call HighFreqDocsEnum.CanReuse() call HighFreqDocsEnum.CanReuse() = new else = new return call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() else decl_stmt HighFreqTerm = decl_stmt HighFreqDocsEnum if is = if ! call HighFreqDocsEnum.canReuse() call HighFreqDocsEnum.canReuse() call HighFreqDocsEnum.canReuse() call HighFreqDocsEnum.canReuse() call HighFreqDocsEnum.canReuse() = new else = new return call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() call HighFreqDocsEnum.Reset() HighFreqTerm decl int decl byte public override public override if ! return if is decl_stmt LowFreqTerm = decl_stmt int = decl_stmt byte = return new else decl_stmt HighFreqTerm = return new return decl State internal internal if == + decl_stmt Lucene.Net.Util.Automaton.State = new + = new = int int int int int int int int int State int int int int int public override public override ++ decl_stmt int = if == && == == if = = = return ++ while if == return decl_stmt Lucene.Net.Util.Automaton.State = if == -- continue decl_stmt int = decl_stmt int = + - decl_stmt int = decl_stmt int = + - < <= + + + decl_stmt int = + & while > ++ if == if == = return else > = = -- goto goto < + + + = = >= <= >= <= decl_stmt int = if + & < decl_stmt int = + decl_stmt int = - while if > = = goto goto decl_stmt int = + >> decl_stmt int = + & - if < = + else if > = - else while > && - + & == -- = = goto goto decl_stmt int = if == - if < = + else ++ = else if < ++ = = + ++ = = - = - if == if = = = + - return else ++ = else if != == if < ++ = goto goto decl_stmt int = + - for = < ++ if + != ++ = goto goto decl_stmt int = + while < = + & if == - ++ = goto goto ++ if = = = + - return else ++ = OrdTermState public override public override decl_stmt Lucene.Net.Index.OrdTermState = new = return public override public override return public override public override return public override public override if is return else return public override public override if is return else return HighFreqTerm decl int int public override public override if is decl_stmt int = if if decl_stmt int if = else = if ++ return new else return new else return new else decl_stmt HighFreqTerm = return new HighFreqTerm decl int decl byte public override public override if ! return if is decl_stmt LowFreqTerm = decl_stmt int = decl_stmt byte = return new else decl_stmt HighFreqTerm = return new public override public override throw new public override public override throw new public public return == public public = = - return public override public override ++ if == if < return else while < if return ++ return public override public override if < return - else if < return else return public override public override return public override public override return public override public override return public public return == public public = = - return public override public override += if == if < return else while < if return += return public override public override if < return - else if < return else return public override public override return + public override public override return public override public override return / public public return == && == public public = = - = return public override public override += + * if == if < = + > return else while < = + > if return += + * return public override public override if < return - else if < return else return public override public override return public override public override return public override public override return / public public = = = = - = - = - = = return public override public override if for = < ++ ++ if += += ++ else += * if == if < = ++ = ++ = return else while < = ++ = ++ if = return if for = < ++ ++ if += += ++ else += * return = public override public override return public override public override return int public override public override > -- decl_stmt int = ++ if = ++ = ++ if = ++ = += return public override public override return public override public override return public override public override return if > = = = return else return public override public override return / public public return == return return public public = = = = - return public override public override ++ if == try return = catch else while < if return = ++ return = public override public override return public override public override if == return else return int int int int int int public override public override ++ if == return = decl_stmt int = decl_stmt int = + decl_stmt int decl_stmt int while if >= = - = - break if <= = - = break *= += while if > = break decl_stmt int = + >> decl_stmt int = - if < = + else if > = - else = break if != while < if break ++ if == return = else return = public override public override return return return return return public public = = = = = - return public override public override ++ if == if < = - = return = else while < if = - = return = ++ return = public override public override return public override public override return public override public override += return public override public override if return + return - public override public override if return + return - int int int int int int public override public override ++ if == return = decl_stmt int = decl_stmt int = + decl_stmt int decl_stmt int while if >= = - = - break if <= = - = break *= += while if > = break decl_stmt int = + >> decl_stmt int = - if < = + else if > = - else = break if != while < if break ++ if == return = else = - = return = var if == return decl_stmt var = / : if == return = = = return public override public override return