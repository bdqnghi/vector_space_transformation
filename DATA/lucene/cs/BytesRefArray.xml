Lucene.Net.Util System using System.Collections.Generic using System.Diagnostics using class Lucene.Net.Util.BytesRefArray Counter int int ByteBlockPool decl int public public = = call Lucene.Net.Index.ByteBlockPool.Reset() call Lucene.Net.Index.ByteBlockPool.Reset() call Lucene.Net.Index.ByteBlockPool.Reset() call Lucene.Net.Index.ByteBlockPool.Reset() call Lucene.Net.Index.ByteBlockPool.Reset() int public public if >= decl_stmt int = = + call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) - * call ByteBlockPool.Append() call ByteBlockPool.Append() call ByteBlockPool.Append() call ByteBlockPool.Append() call ByteBlockPool.Append() ++ = += return - public public return int int public public if > decl_stmt int = decl_stmt int = == - - : + - == = call Lucene.Net.Index.ByteBlockPool.ReadBytes(long,byte,int,int) call Lucene.Net.Index.ByteBlockPool.ReadBytes(long,byte,int,int) call Lucene.Net.Index.ByteBlockPool.ReadBytes(long,byte,int,int) call Lucene.Net.Index.ByteBlockPool.ReadBytes(long,byte,int,int) call Lucene.Net.Index.ByteBlockPool.ReadBytes(long,byte,int,int) return throw new + + + decl int private private < decl_stmt int = new for = < ++ = new return int protected override protected override decl_stmt int = = = int protected override protected override decl_stmt int = = return int decl_stmt int = int protected internal override protected internal override decl_stmt int = return public public return decl int BytesRef int public public < decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt int = decl_stmt int = == : return new public virtual public virtual if < return == ++ : ++ return return