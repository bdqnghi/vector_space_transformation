Lucene.Net.Queries.Function.ValueSources System using System.Collections using System.IO using Lucene.Net.Index using Lucene.Net.Queries.Function.DocValues using Lucene.Net.Search using Lucene.Net.Util using class Lucene.Net.Queries.Function.ValueSources.TermFreqValueSource super super DocFreqValueSource return Fields Terms public override public override decl_stmt Lucene.Net.Index.Fields = decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() return new TermsEnum public virtual public virtual if != decl_stmt Lucene.Net.Index.TermsEnum = if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) else = else = if == = new = - public override public override return public override public override return public override public override return public override public override return public override public override return public override public override try if < = if < = if > return return catch throw new + + +