Lucene.Net.Util.junitcompat System using System.Collections.Generic using org.junit.After org.junit.Assert org.junit.Assume org.junit.Before org.junit.ClassRule org.junit.Rule org.junit.rules.RuleChain org.junit.rules.TestRule class Lucene.Net.Util.junitcompat.WithNestedTests bool ByteArrayOutputStream TestRule bool PrintStream TestRule PrintStream ByteArrayOutputStream TestRuleMarkFailure SysOut private private decl_stmt Lucene.Net.Util.TestRuleMarkFailure = new = new newTestRuleAdapter
			protectedvoidafterAlwaysIList<Exception>errorsthrowsException
			ifmarkerhadFailures&&SuppressOutputStreams
			
			ConsoleWriteLine public if = out = try = new = new = new = new catch throw new public if out = = decl_stmt SysOut protected out return new call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() decl_stmt SysErr protected return new call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() call ByteArrayOutputStream.toByteArray() return TestRuleIgnoreAfterMaxFailures protected internal virtual protected internal virtual if ! || ! || ! || ! decl_stmt Lucene.Net.Util.TestRuleIgnoreAfterMaxFailures = new = protected internal virtual protected internal virtual < if != string private private decl_stmt string = return == || call string.Trim() call string.Trim() call string.Trim() call string.Trim() call string.Trim() ==