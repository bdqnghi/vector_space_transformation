Lucene.Net.Index System using System.Diagnostics using System.Threading using Lucene.Net.Support using class Lucene.Net.Index.DocumentsWriterPerThreadPool super super ICloneable int decl ThreadState internal internal = internal internal = = = return return && != return return return DocumentsWriterPerThreadPool public virtual public virtual if != throw new decl_stmt Lucene.Net.Index.DocumentsWriterPerThreadPool = = new for = < ++ = new return return return bool ThreadState public virtual public virtual lock if < decl_stmt ThreadState = call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() decl_stmt bool = try if ++ == = return return finally if call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() return private private lock for = < ++ try ! finally return ThreadState internal virtual internal virtual lock for = < ++ decl_stmt ThreadState = call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() try call ThreadState.Deactivate() call ThreadState.Deactivate() call ThreadState.Deactivate() call ThreadState.Deactivate() call ThreadState.Deactivate() finally call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() DocumentsWriterPerThread internal virtual internal virtual decl_stmt Lucene.Net.Index.DocumentsWriterPerThread = if ! else return internal virtual internal virtual internal virtual internal virtual return ThreadState int ThreadState internal virtual internal virtual decl_stmt ThreadState = decl_stmt int = for = < ++ decl_stmt ThreadState = if == || < = return int ThreadState internal virtual internal virtual decl_stmt int = for = < ++ decl_stmt ThreadState = call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() try if ! ++ finally call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() return internal virtual internal virtual