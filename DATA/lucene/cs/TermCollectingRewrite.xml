Lucene.Net.Search System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.AttributeSource Lucene.Net.Util.BytesRef Lucene.Net.Index.Fields Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexReaderContext Lucene.Net.Index.Term Lucene.Net.Index.TermContext Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum class super where protected internal protected internal Terms TermsEnum Fields decl IComparer BytesRef IndexReaderContext decl IComparer internal internal decl_stmt IndexReaderContext = decl_stmt System.Collections.Generic.IComparer < = foreach in decl_stmt Lucene.Net.Index.Fields = if == continue decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() if == continue decl_stmt Lucene.Net.Index.TermsEnum = != if == continue decl_stmt System.Collections.Generic.IComparer < = if != && != && != throw new + + + = = decl_stmt Lucene.Net.Util.BytesRef while = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != if ! return public virtual public virtual = =