org.apache.lucene.analysis.hunspell System using System.Diagnostics using System.Collections.Generic using System.Text using org.apache.lucene.analysis.util.CharArraySet org.apache.lucene.store.ByteArrayDataInput org.apache.lucene.util.ArrayUtil org.apache.lucene.util.BytesRef org.apache.lucene.util.CharsRef org.apache.lucene.util.IntsRef org.apache.lucene.util.Version org.apache.lucene.util.automaton.CharacterRunAutomaton class org.apache.lucene.analysis.hunspell.Stemmer decl char Dictionary StringBuilder BytesRef ByteArrayDataInput StringBuilder public < public < return IntsRef decl IList CharSequence public < public < if = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt CharSequence = call org.apache.lucene.analysis.hunspell.Dictionary.cleanInput(CharSequence,StringBuilder) call org.apache.lucene.analysis.hunspell.Dictionary.cleanInput(CharSequence,StringBuilder) call org.apache.lucene.analysis.hunspell.Dictionary.cleanInput(CharSequence,StringBuilder) call org.apache.lucene.analysis.hunspell.Dictionary.cleanInput(CharSequence,StringBuilder) call org.apache.lucene.analysis.hunspell.Dictionary.cleanInput(CharSequence,StringBuilder) = call CharSequence.length() call CharSequence.length() call CharSequence.length() call CharSequence.length() call CharSequence.length() = call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() = decl_stmt System.Collections.Generic.IList < = new < decl_stmt Lucene.Net.Util.IntsRef = call org.apache.lucene.analysis.hunspell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupWord(char,int,int) if != for = < ++ call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() - - - return decl IList CharArraySet decl IList public < public < decl_stmt System.Collections.Generic.IList < = if < return decl_stmt Lucene.Net.Analysis.CharArraySet = new decl_stmt System.Collections.Generic.IList < = new < foreach in if ! call CharArraySet.contains() call CharArraySet.contains() call CharArraySet.contains() call CharArraySet.contains() call CharArraySet.contains() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call CharArraySet.add() call CharArraySet.add() call CharArraySet.add() call CharArraySet.add() call CharArraySet.add() return decl char private private if = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) try catch throw new decl_stmt char = new call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() call StringBuilder.getChars() return new else return new int bool decl char int char int decl char decl IList char int IntsRef int int int char decl IList int bool int IntsRef private < private < decl_stmt System.Collections.Generic.IList < = new < if && != for = - >= -- decl_stmt Lucene.Net.Util.IntsRef = call org.apache.lucene.analysis.hunspell.Dictionary.lookupPrefix(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupPrefix(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupPrefix(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupPrefix(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupPrefix(char,int,int) if == continue for = < ++ decl_stmt int = + if == continue = * decl_stmt char = call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() & decl_stmt char = call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() & decl_stmt int = call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() & decl_stmt bool = & == = uint >> decl_stmt char = call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() & decl_stmt bool if == = else if call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() decl_stmt char = >= = char else = if decl_stmt int = decl_stmt int = - decl_stmt int = decl_stmt int = + decl_stmt int = - if ! continue decl_stmt char = new + decl_stmt System.Collections.Generic.IList < = - call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() if && != for = < ++ decl_stmt Lucene.Net.Util.IntsRef = call org.apache.lucene.analysis.hunspell.Dictionary.lookupSuffix(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupSuffix(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupSuffix(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupSuffix(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupSuffix(char,int,int) - if == continue for = < ++ decl_stmt int = + if == continue = * decl_stmt char = call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() & decl_stmt char = call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() & decl_stmt int = call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() & decl_stmt bool = & == = uint >> decl_stmt char = call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() & decl_stmt bool if == = else if call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() decl_stmt char = >= = char else = if decl_stmt int = - decl_stmt int = - decl_stmt int = decl_stmt int = + decl_stmt int = - if ! continue decl_stmt char = new + decl_stmt System.Collections.Generic.IList < = call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() return CharacterRunAutomaton int private private if != decl_stmt Lucene.Net.Util.Automaton.CharacterRunAutomaton = decl_stmt int = for = < + ++ = call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() if == - return for = < + ++ = call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() call CharacterRunAutomaton.step() if == - return return call CharacterRunAutomaton.isAccept() call CharacterRunAutomaton.isAccept() call CharacterRunAutomaton.isAccept() call CharacterRunAutomaton.isAccept() call CharacterRunAutomaton.isAccept() return bool decl char IntsRef char int decl IList decl char bool char bool internal < internal < = * decl_stmt char = call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() & call ByteArrayDataInput.skipBytes() call ByteArrayDataInput.skipBytes() call ByteArrayDataInput.skipBytes() call ByteArrayDataInput.skipBytes() call ByteArrayDataInput.skipBytes() decl_stmt int = call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() & decl_stmt bool = & == = uint >> decl_stmt char = call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() call ByteArrayDataInput.readShort() & decl_stmt System.Collections.Generic.IList < = new < decl_stmt Lucene.Net.Util.IntsRef = call org.apache.lucene.analysis.hunspell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupWord(char,int,int) call org.apache.lucene.analysis.hunspell.Dictionary.lookupWord(char,int,int) if != for = < ++ call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() + decl_stmt char = if decl_stmt bool = && == && if == && >= && ! char call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() decl_stmt char = if ! char continue if != - call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() decl_stmt char = decl_stmt bool = char if != continue call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if != - && ! && call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() call Dictionary.flagLookup() decl_stmt char = = char if if == if call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() ++ && else if == && call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() ++ else if == if && call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() ++ else if == && == && call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() ++ return private private return == && || >=