Lucene.Net.Util Lucene.Net.Support using System using System.Collections.Generic using System.Threading using class super super IDisposable decl IDictionary int decl ThreadLocal int protected internal virtual protected internal virtual return default WeakReference T public virtual public virtual decl_stmt System.WeakReference = if == decl_stmt T = if != return else return default else return public virtual public virtual = new lock = private private if ref == int decl List Thread int private private lock decl_stmt int = decl_stmt System.Collections.Generic.List < = new < try for < = call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() decl_stmt System.Threading.Thread = if ! call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() else ++ finally foreach in call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() decl_stmt int = + * if <= = ref public public = if != call decl ThreadLocal.Dispose() call decl ThreadLocal.Dispose() call decl ThreadLocal.Dispose() call decl ThreadLocal.Dispose() call decl ThreadLocal.Dispose() =