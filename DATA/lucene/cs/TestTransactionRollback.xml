Lucene.Net.Index System using System.Collections using System.Collections.Generic using Lucene.Net.Documents using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Util.Bits Lucene.Net.Store.Directory Documents.Document Field Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer class attribute Lucene.Net.Index.TestTransactionRollback super super LuceneTestCase Directory string IndexCommit decl ICollection string IndexWriter IndexCommit decl IDictionary decl IDictionary private private decl_stmt string = + decl_stmt Lucene.Net.Index.IndexCommit = decl_stmt System.Collections.Generic.ICollection < = for < = call decl ICollection.GetEnumerator() call decl ICollection.GetEnumerator() call decl ICollection.GetEnumerator() call decl ICollection.GetEnumerator() call decl ICollection.GetEnumerator() decl_stmt Lucene.Net.Index.IndexCommit = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = if > if = if == throw new + decl_stmt Lucene.Net.Index.IndexWriter = new new new < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < = + = call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) BitArray int public virtual public virtual decl_stmt int = while > -= decl_stmt System.Collections.System.Collections.Generic.BitArray = new call System.Collections.System.Collections.Generic.BitArray.Set(int,bool) call System.Collections.System.Collections.Generic.BitArray.Set(int,bool) call System.Collections.System.Collections.Generic.BitArray.Set(int,bool) call System.Collections.System.Collections.Generic.BitArray.Set(int,bool) call System.Collections.System.Collections.Generic.BitArray.Set(int,bool) + IndexReader string int Bits private private decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Lucene.Net.Spatial.Util.Bits = for = < ++ if == || call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() decl_stmt string = call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) if != decl_stmt int = + call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() Document IndexDeletionPolicy IndexWriter decl IDictionary public override public override = decl_stmt Lucene.Net.Index.IndexDeletionPolicy = new < decl_stmt Lucene.Net.Index.IndexWriter = new new for = <= ++ decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) + call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) if == decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < = + = call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) public override public override call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public override public override public override < < decl IDictionary string int string public override public override public override < < foreach in decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = if > decl_stmt string = decl_stmt string = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() + decl_stmt int = if > public override public override public override < < public override public override public override < < - IndexReader public virtual public virtual for = < ++ new new new < decl_stmt Lucene.Net.Index.IndexReader = call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() public override public override public override < < public override public override public override < <