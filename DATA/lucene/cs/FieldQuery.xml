Lucene.Net.Search.Vectorhighlight System using System.Collections.Generic using System.Text using Lucene.Net.Search using Lucene.Net.Index using Lucene.Net.Support.Compatibility using Lucene.Net.Search.Vectorhighlight.FieldTermStack.TermInfo class Lucene.Net.Search.Vectorhighlight.FieldQuery int bool decl HashMap decl HashMap Query DisjunctionMaxQuery PhraseQuery decl ISet BooleanQuery public public < if is decl_stmt Lucene.Net.Search.BooleanQuery = foreach in call Lucene.Net.Search.BooleanQuery.GetClauses() call Lucene.Net.Search.BooleanQuery.GetClauses() call Lucene.Net.Search.BooleanQuery.GetClauses() call Lucene.Net.Search.BooleanQuery.GetClauses() call Lucene.Net.Search.BooleanQuery.GetClauses() if ! else if is if ! else if is decl_stmt Lucene.Net.Search.DisjunctionMaxQuery = foreach in else if is if ! else if is if ! decl_stmt Lucene.Net.Search.PhraseQuery = if call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() > else if call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() == decl_stmt Lucene.Net.Search.Query = new call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() else decl_stmt System.Collections.Generic.ISet < = < try catch return foreach in new decl Dictionary public < public < < decl_stmt org.apache.lucene.analysis.hunspell.Dictionary < = new < foreach in new < call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() if ! is continue foreach in if ! is continue return decl Term decl Term private private < if != return decl_stmt Lucene.Net.Index.Term = decl_stmt Lucene.Net.Index.Term = if && ! return PhraseQuery bool private private < for = < ++ decl_stmt bool = for = < ++ if - < && ! - = break if && - < decl_stmt Lucene.Net.Search.PhraseQuery = new foreach in call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) for = - < ++ call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) new = = if ! QueryPhraseMap String public public decl_stmt System.String = decl_stmt QueryPhraseMap = call decl HashMap.Get() call decl HashMap.Get() call decl HashMap.Get() call decl HashMap.Get() call decl HashMap.Get() if == = new call decl HashMap.Put() call decl HashMap.Put() call decl HashMap.Put() call decl HashMap.Put() call decl HashMap.Put() return PhraseQuery decl Term private private if ! return if is return if is return if is decl_stmt Lucene.Net.Search.PhraseQuery = decl_stmt Lucene.Net.Index.Term = call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() return throw new + + decl List < foreach in decl_stmt System.Collections.Generic.List < = if is call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() else if is call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() + else if is foreach in call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() else throw new + + decl List String private < private < decl_stmt System.String = decl_stmt System.Collections.Generic.List < = call decl HashMap.Get() call decl HashMap.Get() call decl HashMap.Get() call decl HashMap.Get() call decl HashMap.Get() if == = new < call decl HashMap.Put() call decl HashMap.Put() call decl HashMap.Put() call decl HashMap.Put() call decl HashMap.Put() return public < public < return call decl HashMap.Get() call decl HashMap.Get() call decl HashMap.Get() call decl HashMap.Get() call decl HashMap.Get() : QueryPhraseMap public public decl_stmt QueryPhraseMap = return == : public public foreach in if return return QueryPhraseMap public public < decl_stmt QueryPhraseMap = if == return return call QueryPhraseMap.SearchPhrase() call QueryPhraseMap.SearchPhrase() call QueryPhraseMap.SearchPhrase() call QueryPhraseMap.SearchPhrase() call QueryPhraseMap.SearchPhrase() private private return call decl HashMap.Get() call decl HashMap.Get() call decl HashMap.Get() call decl HashMap.Get() call decl HashMap.Get() : return ++ QueryPhraseMap public public decl_stmt QueryPhraseMap = call QueryPhraseMap.MarkTerminal() call QueryPhraseMap.MarkTerminal() call QueryPhraseMap.MarkTerminal() call QueryPhraseMap.MarkTerminal() call QueryPhraseMap.MarkTerminal() QueryPhraseMap private private < decl_stmt QueryPhraseMap = if == = new return decl HashMap PhraseQuery decl Term QueryPhraseMap public public if is else if is + else if is decl_stmt Lucene.Net.Search.PhraseQuery = decl_stmt Lucene.Net.Index.Term = call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() decl_stmt Lucene.Net.Support.HashMap < = decl_stmt QueryPhraseMap = foreach in = = call QueryPhraseMap.MarkTerminal() call QueryPhraseMap.MarkTerminal() call QueryPhraseMap.MarkTerminal() call QueryPhraseMap.MarkTerminal() call QueryPhraseMap.MarkTerminal() else throw new + + public public return private private private private = = = = return return return return QueryPhraseMap public public < decl_stmt QueryPhraseMap = foreach in = if == return return call QueryPhraseMap.IsValidTermOrPhrase() call QueryPhraseMap.IsValidTermOrPhrase() call QueryPhraseMap.IsValidTermOrPhrase() call QueryPhraseMap.IsValidTermOrPhrase() call QueryPhraseMap.IsValidTermOrPhrase() : int int public public < if ! return if == return decl_stmt int = for = < ++ decl_stmt int = if - - > return = return