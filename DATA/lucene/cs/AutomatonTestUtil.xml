Lucene.Net.Util.Automaton Lucene.Net.Support using System using System.Collections.Generic using NUnit.Framework using Lucene.Net.Randomized.Generators using class Lucene.Net.Util.Automaton.AutomatonTestUtil string public static public static while decl_stmt string = if ! call string.ToCharArray() call string.ToCharArray() call string.ToCharArray() call string.ToCharArray() call string.ToCharArray() continue try new return catch decl char int int private static private static decl_stmt int = if == return decl_stmt char = new for = < ++ decl_stmt int = if == && < - ++ = char = char else if <= = char else if == = char else if == = char else if == = char else if == = else if == = else if == = else if == = else if == = else if == = else if == = else if == = else if == = else if == = return new int int int int private static private static decl_stmt int if < || || || || || = + - + else if >= if > = + + - else throw new + else if <= if < = + - else throw new + else decl_stmt int = - decl_stmt int = - decl_stmt int = + if < = + else = + - + >= && <= && < || || + + + + + return bool Transition decl IList var Transition decl IList int int public public decl_stmt System.Collections.Generic.IList < ? = new < ? if decl_stmt var = decl_stmt int = while < decl_stmt int = += call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() else decl_stmt var = while if if == break else if break if == throw new decl_stmt bool = decl_stmt Lucene.Net.Util.Automaton.Transition if decl_stmt System.Collections.Generic.IList < = new < for = < ++ decl_stmt Lucene.Net.Util.Automaton.Transition = if call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if == = else = else = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = return Automaton Automaton public static public static decl_stmt Lucene.Net.Util.Automaton.Automaton = new if = decl_stmt Lucene.Net.Util.Automaton.Automaton = new if = switch case return case return case return default: return public static public static if ! return decl HashSet public static public static if || != return decl_stmt System.Collections.Generic.HashSet < = new < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() int decl LinkedList int decl IDictionary State decl ISet decl ISet decl int decl IDictionary State public static public static < decl_stmt int = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < < = new < < < decl_stmt System.Collections.Generic.LinkedList < < = new < < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = new < < = call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() = new = while > decl_stmt System.Collections.Generic.ISet < = call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() decl_stmt Lucene.Net.Util.Automaton.State = foreach in if = break for = < ++ decl_stmt System.Collections.Generic.ISet < = new < foreach in foreach in if <= && <= call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() = call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() = new decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt int = decl_stmt int if + < = + - else = call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new = public static public static if ! return return new < private static private static < foreach in if || ! return return int public static public static decl_stmt int = == + - +