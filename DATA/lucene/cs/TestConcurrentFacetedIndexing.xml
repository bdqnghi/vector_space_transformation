Lucene.Net.Facet.Taxonomy.Directory System using System.Collections.Concurrent using System.IO using System.Threading using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Documents.Document Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache Lucene.Net.Facet.Taxonomy.WriterCache.Cl2oTaxonomyWriterCache Lucene.Net.Facet.Taxonomy.WriterCache.LruTaxonomyWriterCache Lucene.Net.Index.IndexWriter Lucene.Net.Index.IndexWriterConfig.OpenMode_e Lucene.Net.Store.Directory Lucene.Net.Util.IOUtils class attribute Lucene.Net.Facet.Taxonomy.Directory.TestConcurrentFacetedIndexing super super FacetTestCase TaxonomyWriterCache public virtual public virtual public virtual public virtual return - public virtual public virtual return return public virtual public virtual Random string string string internal static internal static decl_stmt System.Random = decl_stmt string = + call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) decl_stmt string = + call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) decl_stmt string = + call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) return new double internal static internal static decl_stmt double = if < return new else if && > return else return new / FacetLabel int Directory var IndexWriter FacetLabel int FacetLabel decl ConcurrentDictionary var Directory decl int AtomicInteger decl ThreadClass FacetsConfig int public virtual public virtual decl_stmt Lucene.Net.Support.AtomicInteger = new decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Support.Compatibility.ConcurrentDictionary < = new < decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt var = new call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() decl_stmt Lucene.Net.Support.ThreadClass = new decl_stmt Lucene.Net.Facet.FacetsConfig = new for = < ++ call Lucene.Net.Facet.FacetsConfig.SetHierarchical(string,bool) call Lucene.Net.Facet.FacetsConfig.SetHierarchical(string,bool) call Lucene.Net.Facet.FacetsConfig.SetHierarchical(string,bool) call Lucene.Net.Facet.FacetsConfig.SetHierarchical(string,bool) call Lucene.Net.Facet.FacetsConfig.SetHierarchical(string,bool) + call Lucene.Net.Facet.FacetsConfig.SetMultiValued(string,bool) call Lucene.Net.Facet.FacetsConfig.SetMultiValued(string,bool) call Lucene.Net.Facet.FacetsConfig.SetMultiValued(string,bool) call Lucene.Net.Facet.FacetsConfig.SetMultiValued(string,bool) call Lucene.Net.Facet.FacetsConfig.SetMultiValued(string,bool) + for = < ++ = new foreach in foreach in decl_stmt var = new if + != foreach in decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = new if call var.GetOrdinal() call var.GetOrdinal() call var.GetOrdinal() call var.GetOrdinal() call var.GetOrdinal() == - + + decl_stmt int = call var.ParallelTaxonomyArrays() call var.ParallelTaxonomyArrays() call var.ParallelTaxonomyArrays() call var.ParallelTaxonomyArrays() call var.ParallelTaxonomyArrays() call var.ParallelTaxonomyArrays() call var.ParallelTaxonomyArrays() call var.ParallelTaxonomyArrays() call var.ParallelTaxonomyArrays() foreach in decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = new call var.GetOrdinal() call var.GetOrdinal() call var.GetOrdinal() call var.GetOrdinal() call var.GetOrdinal() > + decl_stmt int = decl_stmt int = decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = for = < ++ = call Lucene.Net.Facet.Taxonomy.FacetLabel.Subpath(int) call Lucene.Net.Facet.Taxonomy.FacetLabel.Subpath(int) call Lucene.Net.Facet.Taxonomy.FacetLabel.Subpath(int) call Lucene.Net.Facet.Taxonomy.FacetLabel.Subpath(int) call Lucene.Net.Facet.Taxonomy.FacetLabel.Subpath(int) + decl_stmt int = call var.GetOrdinal() call var.GetOrdinal() call var.GetOrdinal() call var.GetOrdinal() call var.GetOrdinal() + = int int Document Random FacetLabel string FacetField public override public override decl_stmt System.Random = while > try decl_stmt Lucene.Net.Documents.Document = new decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) + while -- > decl_stmt Lucene.Net.Facet.FacetField = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = new decl_stmt int = while > decl_stmt string = = -- catch throw new