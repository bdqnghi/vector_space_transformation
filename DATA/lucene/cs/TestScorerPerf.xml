Lucene.Net.Search Lucene.Net.Documents using Lucene.Net.Support using System using System.Collections using NUnit.Framework using Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.Bits Lucene.Net.Store.Directory Lucene.Net.Index.DirectoryReader Lucene.Net.Util.DocIdBitSet Documents.Document Field Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexWriter Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Index.IndexWriterConfig.OpenMode_e Lucene.Net.Index.Term class attribute Lucene.Net.Search.TestScorerPerf super super LuceneTestCase decl Term Directory IndexSearcher IndexReader decl BitArray bool IndexWriter public virtual public virtual = decl_stmt Lucene.Net.Index.IndexWriter = new new call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) new call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) = = decl int Document IndexWriter int public virtual public virtual decl_stmt int = new = new for = < ++ decl_stmt int = + - = int = new + decl_stmt Lucene.Net.Index.IndexWriter = new new for = < ++ decl_stmt Lucene.Net.Documents.Document = new for = < ++ if == call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) BitArray public virtual public virtual decl_stmt System.Collections.System.Collections.Generic.BitArray = new for = < ++ call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() return decl BitArray public virtual public virtual decl_stmt System.Collections.System.Collections.Generic.BitArray = new for = < ++ = return public override public override ++ += + return return = public override public override return public virtual public virtual = + if != + throw new + + + + Query BitArray internal virtual internal virtual decl_stmt System.Collections.System.Collections.Generic.BitArray = decl_stmt Lucene.Net.Search.Query = new new if if == = call System.Collections.System.Collections.Generic.BitArray.Clone() call System.Collections.System.Collections.Generic.BitArray.Clone() call System.Collections.System.Collections.Generic.BitArray.Clone() call System.Collections.System.Collections.Generic.BitArray.Clone() call System.Collections.System.Collections.Generic.BitArray.Clone() else = return public override public override return new CountingHitCollector int BooleanQuery int BitArray public virtual public virtual decl_stmt int = for = < ++ decl_stmt int = - + decl_stmt Lucene.Net.Search.BooleanQuery = new decl_stmt System.Collections.System.Collections.Generic.BitArray = for = < ++ = decl_stmt CountingHitCollector = new : new call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) += if call BitArray.Cardinality() call BitArray.Cardinality() call BitArray.Cardinality() call BitArray.Cardinality() call BitArray.Cardinality() return int long BitArray CountingHitCollector int int BooleanQuery BooleanQuery public virtual public virtual decl_stmt int = decl_stmt long = for = < ++ decl_stmt int = - + decl_stmt Lucene.Net.Search.BooleanQuery = new decl_stmt System.Collections.System.Collections.Generic.BitArray = for = < ++ decl_stmt int = - + decl_stmt Lucene.Net.Search.BooleanQuery = new for = < ++ = call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) decl_stmt CountingHitCollector = new : new call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) += += if call BitArray.Cardinality() call BitArray.Cardinality() call BitArray.Cardinality() call BitArray.Cardinality() call BitArray.Cardinality() if + / return int int int Query long BooleanQuery CountingHitCollector BitArray public virtual public virtual decl_stmt int = decl_stmt long = for = < ++ decl_stmt int = - + decl_stmt Lucene.Net.Search.BooleanQuery = new decl_stmt System.Collections.System.Collections.Generic.BitArray = new for = < ++ decl_stmt int = if call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeGet() = call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.NextClearBit() if < || >= = call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() decl_stmt Lucene.Net.Search.Query = new call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) decl_stmt CountingHitCollector = new call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) += += if + / return int BitArray int Query long BooleanQuery CountingHitCollector int int BooleanQuery public virtual public virtual decl_stmt int = decl_stmt long = for = < ++ decl_stmt int = - + decl_stmt Lucene.Net.Search.BooleanQuery = new for = < ++ decl_stmt int = - + decl_stmt Lucene.Net.Search.BooleanQuery = new decl_stmt System.Collections.System.Collections.Generic.BitArray = new for = < ++ decl_stmt int = if call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeGet() = call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.NextClearBit() if < || >= = call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.NextClearBit() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() decl_stmt Lucene.Net.Search.Query = new call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) decl_stmt CountingHitCollector = new call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) += += if + / return PhraseQuery int int int CountingHitCollector public virtual public virtual decl_stmt int = for = < ++ decl_stmt int = - + decl_stmt Lucene.Net.Search.PhraseQuery = new for = < ++ decl_stmt int = call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) new + = decl_stmt CountingHitCollector = new call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) += return public virtual public virtual = = call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose()