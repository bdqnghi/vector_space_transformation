Lucene.Net.Analysis.CJK System using System.Globalization using System.IO using System.Text using System.Text.RegularExpressions using Lucene.Net.Analysis using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Util using class Lucene.Net.Analysis.CJK.CJKTokenizer super super Tokenizer IOffsetAttribute int int int decl char bool decl char int int int ITermAttribute int Regex int int decl String Regex ITypeAttribute private private = < = < = < int int int bool char public override public override while decl_stmt int = decl_stmt int = while decl_stmt char ++ if >= = = if == if > if == = = else -- break else -- return else = ++ decl_stmt bool = call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call char.ToString() call char.ToString() call char.ToString() call char.ToString() call char.ToString() if call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call char.ToString() call char.ToString() call char.ToString() call char.ToString() call char.ToString() || if decl_stmt int = int if >= && <= = - = char if || == || == || == if == = - else if == -- -- if == = = break else break ++ = = if == break else if > if = = else break else if if == = - ++ = = else if == -- -- break else ++ = = if == -- -- = break else if > if == = = else break if > call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) + = return else if == -- return int public override public override decl_stmt int = public override public override = = = = = public override public override