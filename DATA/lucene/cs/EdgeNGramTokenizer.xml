Lucene.Net.Analysis.NGram System.IO using System.Collections using Lucene.Net.Analysis using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Util using class Lucene.Net.Analysis.NGram.EdgeNGramTokenizer super super Tokenizer int int string bool Side int int ITermAttribute int IOffsetAttribute Side int private private if == throw new if < throw new if > throw new = = = = < = < int decl char int public override public override if ! = decl_stmt char = new = = = if > return if > return decl_stmt int = == : - decl_stmt int = + call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) ++ return int public override public override decl_stmt int = public override public override public override public override =