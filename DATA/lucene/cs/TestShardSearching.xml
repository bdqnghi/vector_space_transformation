Lucene.Net.Search System using System.Collections.Generic using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Util.BytesRef Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexReaderContext Lucene.Net.Index.MultiFields Lucene.Net.Index.MultiReader Lucene.Net.Index.Term Lucene.Net.Index.TermsEnum Lucene.Net.Util.TestUtil class attribute Lucene.Net.Search.TestShardSearching super super ShardSearchingTestBase IndexSearcher PreviousSearchState string decl NodeState IndexSearcher decl IndexReader string long int decl ShardIndexSearcher int bool PreviousSearchState double int Query decl List decl List int IndexReader int Sort TermsEnum public virtual public virtual decl_stmt int = decl_stmt double = decl_stmt int = decl_stmt int = if + + + + + decl_stmt System.Collections.Generic.List < = new < decl_stmt System.Collections.Generic.List < = while < decl_stmt bool = > && == decl_stmt int = decl_stmt ShardIndexSearcher decl_stmt PreviousSearchState if = if + - / try = catch if + call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() continue else if = = decl_stmt Lucene.Net.Index.IndexReader = new decl_stmt PreviousSearchState = try decl_stmt int = try for = < ++ decl_stmt long = decl_stmt Lucene.Net.Search.IndexSearcher = if == -- while >= = -- throw new + + + = += catch if + continue decl_stmt Lucene.Net.Index.IndexReader = new decl_stmt Lucene.Net.Search.IndexSearcher = new decl_stmt Lucene.Net.Search.Query decl_stmt Lucene.Net.Search.Sort if != = = else if == && > decl_stmt Lucene.Net.Index.TermsEnum = = new < while call Sort.Next() call Sort.Next() call Sort.Next() call Sort.Next() call Sort.Next() != call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call Sort.Term() call Sort.Term() call Sort.Term() call Sort.Term() call Sort.Term() if + + if == = if + if != if = new new else decl_stmt string = decl_stmt string if <= = else = call TermsEnum.Substring() call TermsEnum.Substring() call TermsEnum.Substring() call TermsEnum.Substring() call TermsEnum.Substring() = new new if = else decl_stmt int = if == = new else if == = else if == = new new new else = new new new else = = if != try = catch if + if != call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() finally foreach in if != call long.DecRef() call long.DecRef() call long.DecRef() call long.DecRef() call long.DecRef() if != && != && == call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if > = < call decl List.SubList() call decl List.SubList() call decl List.SubList() call decl List.SubList() call decl List.SubList() int TopDocs decl IList int TopDocs bool ScoreDoc int decl int ScoreDoc ScoreDoc private private decl_stmt int = if != && == += if + + + + + if != + + + + + decl_stmt Lucene.Net.Search.TopDocs if == if != && != = else = else = decl_stmt Lucene.Net.Search.TopDocs if == if != && != = else = else = decl_stmt int = decl_stmt int = new decl_stmt System.Collections.Generic.IList < = for = < ++ = if + + + for = < ++ decl_stmt Lucene.Net.Search.ScoreDoc = + + + + + + for = < ++ decl_stmt Lucene.Net.Search.ScoreDoc = + + + + + + + + decl_stmt int if != && != = if != += else = decl_stmt bool decl_stmt Lucene.Net.Search.ScoreDoc decl_stmt Lucene.Net.Search.ScoreDoc if < = if == = - decl_stmt Lucene.Net.Search.ScoreDoc = - = new if + else = = else = = = for = < ++ decl_stmt Lucene.Net.Search.ScoreDoc = += if return new else return