Lucene.Net.Tests.Queries.Function System using Lucene.Net.Analysis using Lucene.Net.Documents using Lucene.Net.Index using Lucene.Net.Queries.Function using Lucene.Net.Queries.Function.ValueSources using Lucene.Net.Randomized.Generators using Lucene.Net.Store using Lucene.Net.Support using Lucene.Net.Util using Lucene.Net.Util.Packed using NUnit.Framework using class Lucene.Net.Tests.Queries.Function.TestDocValuesFieldSources super super LuceneTestCase DirectoryReader Directory Field BytesRef FunctionValues RandomIndexWriter int object int ValueSource FunctionValues decl object Document Field IndexWriterConfig private private decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriterConfig = new decl_stmt int = decl_stmt Lucene.Net.Documents.Field = new decl_stmt Lucene.Net.Documents.Field switch case = new new break case = new new break case = new break default: throw new decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) decl_stmt object = new decl_stmt Lucene.Net.Index.RandomIndexWriter = new for = < ++ = switch case case do = string == = new string break case decl_stmt int = = long int = long break call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) if && == call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() decl_stmt Lucene.Net.Index.DirectoryReader = foreach in decl_stmt Lucene.Net.Queries.Function.FunctionValues = new decl_stmt Lucene.Net.Queries.Function.ValueSource switch case case = new break case = new break default: throw new decl_stmt Lucene.Net.Queries.Function.FunctionValues = call ValueSource.GetValues() call ValueSource.GetValues() call ValueSource.GetValues() call ValueSource.GetValues() call ValueSource.GetValues() decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ call Lucene.Net.Queries.Function.FunctionValues.Exists(int) call Lucene.Net.Queries.Function.FunctionValues.Exists(int) call Lucene.Net.Queries.Function.FunctionValues.Exists(int) call Lucene.Net.Queries.Function.FunctionValues.Exists(int) call Lucene.Net.Queries.Function.FunctionValues.Exists(int) if is call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) is string else if is call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) is long call Lucene.Net.Queries.Function.FunctionValues.BytesVal(int,BytesRef) call Lucene.Net.Queries.Function.FunctionValues.BytesVal(int,BytesRef) call Lucene.Net.Queries.Function.FunctionValues.BytesVal(int,BytesRef) call Lucene.Net.Queries.Function.FunctionValues.BytesVal(int,BytesRef) call Lucene.Net.Queries.Function.FunctionValues.BytesVal(int,BytesRef) else throw new decl_stmt object = call Lucene.Net.Queries.Function.FunctionValues.IntVal(int) call Lucene.Net.Queries.Function.FunctionValues.IntVal(int) call Lucene.Net.Queries.Function.FunctionValues.IntVal(int) call Lucene.Net.Queries.Function.FunctionValues.IntVal(int) call Lucene.Net.Queries.Function.FunctionValues.IntVal(int) switch case call Lucene.Net.Queries.Function.FunctionValues.OrdVal(int) call Lucene.Net.Queries.Function.FunctionValues.OrdVal(int) call Lucene.Net.Queries.Function.FunctionValues.OrdVal(int) call Lucene.Net.Queries.Function.FunctionValues.OrdVal(int) call Lucene.Net.Queries.Function.FunctionValues.OrdVal(int) call FunctionValues.NumOrd() call FunctionValues.NumOrd() call FunctionValues.NumOrd() call FunctionValues.NumOrd() call FunctionValues.NumOrd() >= goto goto case call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.StrVal(int,string) call Lucene.Net.Queries.Function.FunctionValues.StrVal(int,string) call Lucene.Net.Queries.Function.FunctionValues.StrVal(int,string) call Lucene.Net.Queries.Function.FunctionValues.StrVal(int,string) call Lucene.Net.Queries.Function.FunctionValues.StrVal(int,string) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.ObjectVal(int) call Lucene.Net.Queries.Function.FunctionValues.StrVal(int,string) call Lucene.Net.Queries.Function.FunctionValues.StrVal(int,string) call Lucene.Net.Queries.Function.FunctionValues.StrVal(int,string) call Lucene.Net.Queries.Function.FunctionValues.StrVal(int,string) call Lucene.Net.Queries.Function.FunctionValues.StrVal(int,string) call Lucene.Net.Queries.Function.FunctionValues.BytesVal(int,BytesRef) call Lucene.Net.Queries.Function.FunctionValues.BytesVal(int,BytesRef) call Lucene.Net.Queries.Function.FunctionValues.BytesVal(int,BytesRef) call Lucene.Net.Queries.Function.FunctionValues.BytesVal(int,BytesRef) call Lucene.Net.Queries.Function.FunctionValues.BytesVal(int,BytesRef) new string break case call object.ToString() call object.ToString() call object.ToString() call object.ToString() call object.ToString() call Lucene.Net.Queries.Function.FunctionValues.LongVal(int) call Lucene.Net.Queries.Function.FunctionValues.LongVal(int) call Lucene.Net.Queries.Function.FunctionValues.LongVal(int) call Lucene.Net.Queries.Function.FunctionValues.LongVal(int) call Lucene.Net.Queries.Function.FunctionValues.LongVal(int) break call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() var public public decl_stmt var = typeof foreach in if !=