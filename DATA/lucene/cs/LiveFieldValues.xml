Lucene.Net.Search System using System.Collections.Concurrent using System.Collections.Generic using class super super IDisposable where decl IDictionary decl ReferenceManager decl IDictionary T public public call decl ReferenceManager.RemoveListener() call decl ReferenceManager.RemoveListener() call decl ReferenceManager.RemoveListener() call decl ReferenceManager.RemoveListener() call decl ReferenceManager.RemoveListener() public public = = new < public public = new < public virtual public virtual = public virtual public virtual = public virtual public virtual return + S T public virtual public virtual decl_stmt T call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if < < < < return default else if ! < < < < default return else call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if < < < < return default else if ! < < < < default return else decl_stmt S = call decl ReferenceManager.Acquire() call decl ReferenceManager.Acquire() call decl ReferenceManager.Acquire() call decl ReferenceManager.Acquire() call decl ReferenceManager.Acquire() try return finally call decl ReferenceManager.Release() call decl ReferenceManager.Release() call decl ReferenceManager.Release() call decl ReferenceManager.Release() call decl ReferenceManager.Release()