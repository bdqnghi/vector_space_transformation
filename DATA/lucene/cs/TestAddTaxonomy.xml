Lucene.Net.Facet.Taxonomy.Directory System using System.Collections.Generic using System.IO using System.Threading using System.Threading.Tasks using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.DiskOrdinalMap Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.MemoryOrdinalMap Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.OrdinalMap Lucene.Net.Store.Directory Lucene.Net.Util.IOUtils Lucene.Net.Util.TestUtil class attribute Lucene.Net.Facet.Taxonomy.Directory.TestAddTaxonomy super super FacetTestCase AtomicInteger decl Directory OrdinalMap var decl ThreadClass var private private decl_stmt Lucene.Net.Support.AtomicInteger = new decl_stmt Lucene.Net.Store.Directory = new for = < ++ = decl_stmt var = new decl_stmt Lucene.Net.Support.ThreadClass = new for = < ++ = new foreach in foreach in call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() decl_stmt var = new decl_stmt Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap = call var.AddTaxonomy() call var.AddTaxonomy() call var.AddTaxonomy() call var.AddTaxonomy() call var.AddTaxonomy() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() Random string public override public override decl_stmt System.Random = while > decl_stmt string = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) try new catch throw new private private if return new else return new var var var int int int FacetLabel private private decl_stmt var = new try decl_stmt int = decl_stmt var = new try decl_stmt var = decl_stmt int = >= + + + for = < ++ decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = call var.GetPath() call var.GetPath() call var.GetPath() call var.GetPath() call var.GetPath() decl_stmt int = call var.GetOrdinal() call var.GetOrdinal() call var.GetOrdinal() call var.GetOrdinal() call var.GetOrdinal() > + finally finally Directory var OrdinalMap Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt var = new call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() new call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() new call var.Commit() call var.Commit() call var.Commit() call var.Commit() call var.Commit() decl_stmt Lucene.Net.Store.Directory = new decl_stmt Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap = call var.AddTaxonomy() call var.AddTaxonomy() call var.AddTaxonomy() call var.AddTaxonomy() call var.AddTaxonomy() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() Directory Directory OrdinalMap DirectoryTaxonomyWriter DirectoryTaxonomyWriter public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter = new call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddCategory(FacetLabel) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddCategory(FacetLabel) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddCategory(FacetLabel) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddCategory(FacetLabel) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddCategory(FacetLabel) new call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddCategory(FacetLabel) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddCategory(FacetLabel) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddCategory(FacetLabel) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddCategory(FacetLabel) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddCategory(FacetLabel) new call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.Dispose() call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.Dispose() call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.Dispose() call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.Dispose() call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.Dispose() decl_stmt Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter = new decl_stmt Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap = call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddTaxonomy(Directory,OrdinalMap) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddTaxonomy(Directory,OrdinalMap) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddTaxonomy(Directory,OrdinalMap) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddTaxonomy(Directory,OrdinalMap) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.AddTaxonomy(Directory,OrdinalMap) call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.Dispose() call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.Dispose() call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.Dispose() call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.Dispose() call Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter.Dispose() public virtual public virtual Random int public virtual public virtual decl_stmt System.Random = decl_stmt int = for = < ++ Directory Directory var var OrdinalMap public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt var = new call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() new call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() new call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() new decl_stmt Lucene.Net.Store.Directory = decl_stmt var = new call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() new call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() new call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() decl_stmt Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap = call var.AddTaxonomy() call var.AddTaxonomy() call var.AddTaxonomy() call var.AddTaxonomy() call var.AddTaxonomy() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() var Directory Directory int FacetLabel OrdinalMap ThreadClass var var var public virtual public virtual decl_stmt int = decl_stmt Lucene.Net.Store.Directory = decl_stmt var = new for = < ++ call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() new call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() decl_stmt Lucene.Net.Store.Directory = decl_stmt var = new decl_stmt Lucene.Net.Support.ThreadClass = new call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() decl_stmt Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap = new call var.AddTaxonomy() call var.AddTaxonomy() call var.AddTaxonomy() call var.AddTaxonomy() call var.AddTaxonomy() call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() decl_stmt var = new + decl_stmt var = new < for = < ++ decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = call var.GetPath() call var.GetPath() call var.GetPath() call var.GetPath() call var.GetPath() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() + + call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() public override public override for = < ++ try new catch throw new