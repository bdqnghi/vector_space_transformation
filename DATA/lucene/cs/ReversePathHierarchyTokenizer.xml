Lucene.Net.Analysis.Path System.Collections.Generic using System.Text using Lucene.Net.Analysis.Tokenattributes using System.IO.TextReader class Lucene.Net.Analysis.Path.ReversePathHierarchyTokenizer super super Tokenizer int IOffsetAttribute char int decl char decl IList int int IPositionIncrementAttribute StringBuilder char int ICharTermAttribute int int char var int int int public override public override if == - decl_stmt int = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() while decl_stmt int = if < break ++ if == call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) char = if - < call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() ++ if < = new call System.Text.StringBuilder.CopyTo(int,char,int,int) call System.Text.StringBuilder.CopyTo(int,char,int,int) call System.Text.StringBuilder.CopyTo(int,char,int,int) call System.Text.StringBuilder.CopyTo(int,char,int,int) call System.Text.StringBuilder.CopyTo(int,char,int,int) = decl_stmt int = - - if >= = = = else = while < - - decl_stmt var = call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) - call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) ++ return return public override public override call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) public override public override = = = = = - call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear()