Lucene.Net.Util.Fst System using Lucene.Net.Randomized.Generators using NUnit.Framework using Lucene.Net.Store.Directory Lucene.Net.Store.IOContext Lucene.Net.Store.IndexInput Lucene.Net.Store.IndexOutput class attribute Lucene.Net.Util.Fst.TestBytesStore super super LuceneTestCase IndexOutput int sbyte int IndexInput decl sbyte int int BytesStore int BytesStore int int int int decl sbyte int decl sbyte int Directory int public virtual public virtual decl_stmt int = for = < ++ decl_stmt int = decl_stmt sbyte = new decl_stmt int = decl_stmt Lucene.Net.Util.Fst.BytesStore = new if + + + + + decl_stmt int = while < decl_stmt int = if + switch case decl_stmt sbyte = sbyte if + ++ = call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) break case decl_stmt int = - decl_stmt sbyte = new if + + + call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) += break case if > decl_stmt int = decl_stmt int = - if + + + call BytesStore.writeInt() call BytesStore.writeInt() call BytesStore.writeInt() call BytesStore.writeInt() call BytesStore.writeInt() ++ = >> ++ = >> ++ = >> ++ = sbyte break case if > decl_stmt int = decl_stmt int if == = else = - decl_stmt int = + - if + + + + + + + call BytesStore.reverse() call BytesStore.reverse() call BytesStore.reverse() call BytesStore.reverse() call BytesStore.reverse() while <= decl_stmt sbyte = = = ++ -- break case if > decl_stmt int = - decl_stmt int = - - decl_stmt sbyte = new if + + + + + call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) break case if > decl_stmt int = - decl_stmt int = + - decl_stmt int = - if + + + + + call BytesStore.copyBytes() call BytesStore.copyBytes() call BytesStore.copyBytes() call BytesStore.copyBytes() call BytesStore.copyBytes() break case decl_stmt int = - if + += call BytesStore.skipBytes() call BytesStore.skipBytes() call BytesStore.skipBytes() call BytesStore.skipBytes() call BytesStore.skipBytes() if > decl_stmt sbyte = new call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) call Lucene.Net.Util.Fst.BytesStore.WriteBytes(long,byte,int,int) - break case if > decl_stmt int = decl_stmt sbyte = sbyte = call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) call Lucene.Net.Util.Fst.BytesStore.WriteByte(byte) break if > && == decl_stmt int = call BytesStore.truncate() call BytesStore.truncate() call BytesStore.truncate() call BytesStore.truncate() call BytesStore.truncate() - -= + sbyte if + + + if > && == decl_stmt Lucene.Net.Util.Fst.BytesStore if if decl_stmt Lucene.Net.Store.Directory = decl_stmt IndexOutput = call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call BytesStore.writeTo() call BytesStore.writeTo() call BytesStore.writeTo() call BytesStore.writeTo() call BytesStore.writeTo() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() = new call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() else = int int int int decl BytesReader decl BytesReader bool sbyte int decl BytesReader decl FST decl FST decl sbyte decl sbyte int private private if == return if decl_stmt sbyte = new if if decl_stmt BytesReader = call decl FST.reversed() call decl FST.reversed() call decl FST.reversed() call decl FST.reversed() call decl FST.reversed() = - call decl FST.ReadBytes() call decl FST.ReadBytes() call decl FST.ReadBytes() call decl FST.ReadBytes() call decl FST.ReadBytes() decl_stmt int = decl_stmt int = - while < decl_stmt sbyte = = = ++ -- else if decl_stmt BytesReader = call decl FST.reversed() call decl FST.reversed() call decl FST.reversed() call decl FST.reversed() call decl FST.reversed() call decl FST.ReadBytes() call decl FST.ReadBytes() call decl FST.ReadBytes() call decl FST.ReadBytes() call decl FST.ReadBytes() for = < ++ + decl_stmt BytesReader decl_stmt bool = if if = else if = if > decl_stmt int = for = < ++ decl_stmt int = - decl_stmt int if = - else = - if + + + + + + + decl_stmt sbyte = new = call decl FST.ReadBytes() call decl FST.ReadBytes() call decl FST.ReadBytes() call decl FST.ReadBytes() call decl FST.ReadBytes() for = < ++ decl_stmt sbyte if = - else = + + decl_stmt int decl_stmt int if = - = int else = + = - if > decl_stmt int = - decl_stmt int = if -= |= -- & << |= -- & << |= -- & << |= -- & else += |= ++ & << |= ++ & << |= ++ & << |= ++ & if + call decl FST.skipBytes() call decl FST.skipBytes() call decl FST.skipBytes() call decl FST.skipBytes() call decl FST.skipBytes() call decl FST.readInt() call decl FST.readInt() call decl FST.readInt() call decl FST.readInt() call decl FST.readInt()