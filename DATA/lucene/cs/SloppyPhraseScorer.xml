Lucene.Net.Search System.Collections.Generic using System.Diagnostics using System.Linq using Lucene.Net.Support using System using Lucene.Net.Util.FixedBitSet Lucene.Net.Search.Similarities.Similarity Lucene.Net.Index.Term class Lucene.Net.Search.SloppyPhraseScorer super super Scorer long PhraseQueue int decl SimScorer float PhrasePositions int int bool decl PhrasePositions decl Similarity int bool bool decl PhrasePositions int float int PhrasePositions int private private if ! return decl_stmt float = = decl_stmt Lucene.Net.Search.PhrasePositions = call PhraseQueue.Pop() call PhraseQueue.Pop() call PhraseQueue.Pop() call PhraseQueue.Pop() call PhraseQueue.Pop() decl_stmt int = - decl_stmt int = call PhraseQueue.Top() call PhraseQueue.Top() call PhraseQueue.Top() call PhraseQueue.Top() call PhraseQueue.Top() while if && ! break if > if <= += call decl SimScorer.ComputeSlopFactor() call decl SimScorer.ComputeSlopFactor() call decl SimScorer.ComputeSlopFactor() call decl SimScorer.ComputeSlopFactor() call decl SimScorer.ComputeSlopFactor() ++ call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() = call PhraseQueue.Pop() call PhraseQueue.Pop() call PhraseQueue.Pop() call PhraseQueue.Pop() call PhraseQueue.Pop() = call PhraseQueue.Top() call PhraseQueue.Top() call PhraseQueue.Top() call PhraseQueue.Top() call PhraseQueue.Top() = - else decl_stmt int = - if < = if <= += call decl SimScorer.ComputeSlopFactor() call decl SimScorer.ComputeSlopFactor() call decl SimScorer.ComputeSlopFactor() call decl SimScorer.ComputeSlopFactor() call decl SimScorer.ComputeSlopFactor() ++ return private private if ! return if > = return int int PhrasePositions decl PhrasePositions int FixedBitSet int private private if < return decl_stmt Lucene.Net.Search.PhrasePositions = decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new decl_stmt int = decl_stmt int while = >= = if ! return if != = call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) decl_stmt int = decl_stmt int = call Lucene.Net.Spatial.Util.FixedBitSet.Length() call Lucene.Net.Spatial.Util.FixedBitSet.Length() call Lucene.Net.Spatial.Util.FixedBitSet.Length() call Lucene.Net.Spatial.Util.FixedBitSet.Length() call Lucene.Net.Spatial.Util.FixedBitSet.Length() while call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() > decl_stmt Lucene.Net.Search.PhrasePositions = call PhraseQueue.Pop() call PhraseQueue.Pop() call PhraseQueue.Pop() call PhraseQueue.Pop() call PhraseQueue.Pop() ++ = if >= && < && call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Clear(int,int) call Lucene.Net.Spatial.Util.FixedBitSet.Clear(int,int) call Lucene.Net.Spatial.Util.FixedBitSet.Clear(int,int) call Lucene.Net.Spatial.Util.FixedBitSet.Clear(int,int) call Lucene.Net.Spatial.Util.FixedBitSet.Clear(int,int) for = - >= -- call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() return private private if < || == && < return return PhrasePositions decl PhrasePositions int private private decl_stmt int = decl_stmt Lucene.Net.Search.PhrasePositions = for = < ++ decl_stmt Lucene.Net.Search.PhrasePositions = if != && == return return - private private = if ! return if ! return return private private call PhraseQueue.Clear() call PhraseQueue.Clear() call PhraseQueue.Clear() call PhraseQueue.Clear() call PhraseQueue.Clear() for = = != = = if > = call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() private private if ! return return private private for = = != = = private private call PhraseQueue.Clear() call PhraseQueue.Clear() call PhraseQueue.Clear() call PhraseQueue.Clear() call PhraseQueue.Clear() for = = != = = if > = call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() int int PhrasePositions PhrasePositions private private foreach in if decl_stmt int for = < += = decl_stmt Lucene.Net.Search.PhrasePositions = decl_stmt int while = >= decl_stmt Lucene.Net.Search.PhrasePositions = if ! return if < = break else for = < ++ for = < ++ if ! return return decl List var private private = decl_stmt var = = > if = new decl_stmt System.Collections.Generic.List < < = if ! return return decl PhrasePositions decl IComparer private private < < = new decl_stmt System.Collections.Generic.IComparer < = new for = < ++ decl_stmt Lucene.Net.Search.PhrasePositions = = for = < ++ = public virtual public virtual return - decl List decl PhrasePositions PhrasePositions decl List int decl List decl HashSet int PhrasePositions decl List decl Dictionary private < < private < < < ? decl_stmt Lucene.Net.Search.PhrasePositions = decl_stmt System.Collections.Generic.List < < = new < < if ! for = < ++ decl_stmt Lucene.Net.Search.PhrasePositions = if >= continue decl_stmt int = for = + < ++ decl_stmt Lucene.Net.Search.PhrasePositions = if >= || == || != continue decl_stmt int = if < = = decl_stmt System.Collections.Generic.List < = new < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() = else decl_stmt System.Collections.Generic.List < < = new < < decl_stmt System.Collections.Generic.List < = decl_stmt org.apache.lucene.analysis.hunspell.Dictionary < = decl_stmt System.Collections.Generic.HashSet < = new < for = < ++ call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new < foreach in foreach in if decl_stmt int = == - || == = foreach < in call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new < return private private return + decl HashMap int int decl Dictionary private < ? private < ? decl_stmt Lucene.Net.Support.HashMap < ? = new < ? decl_stmt org.apache.lucene.analysis.hunspell.Dictionary < ? = new < ? for = = != = = foreach in decl_stmt int ? call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out decl_stmt int ? = == new int : new int + int = if == = return decl List private private < ? decl_stmt System.Collections.Generic.List < = new < for = = != = = foreach in if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() |= > break return call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() var FixedBitSet decl List private < private < < ? decl_stmt System.Collections.Generic.List < = new < foreach in decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new decl_stmt var = new int foreach in = != call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) int call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return int int private private < decl_stmt int for = < - += = decl_stmt int = + while < if = else ++ decl Dictionary int DocIdSetIterator decl Term private < private < < ? < decl_stmt org.apache.lucene.analysis.hunspell.Dictionary < = new < decl_stmt Lucene.Net.Index.Term = for = < ++ decl_stmt Lucene.Net.Search.DocIdSetIterator = decl_stmt int while = call Lucene.Net.Search.DocIdSetIterator.NextDoc() call Lucene.Net.Search.DocIdSetIterator.NextDoc() call Lucene.Net.Search.DocIdSetIterator.NextDoc() call Lucene.Net.Search.DocIdSetIterator.NextDoc() call Lucene.Net.Search.DocIdSetIterator.NextDoc() != = return public override public override return internal internal return private private if ! call Lucene.Net.Search.PhrasePositions.SkipTo(int) call Lucene.Net.Search.PhrasePositions.SkipTo(int) call Lucene.Net.Search.PhrasePositions.SkipTo(int) call Lucene.Net.Search.PhrasePositions.SkipTo(int) call Lucene.Net.Search.PhrasePositions.SkipTo(int) = return = = return public override public override return public override public override return + public override public override return call decl SimScorer.Score() call decl SimScorer.Score() call decl SimScorer.Score() call decl SimScorer.Score() call decl SimScorer.Score() public override public override > do if ! return while < if ! return = = + == return public override public override return public override public override return + +