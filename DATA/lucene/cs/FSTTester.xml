Lucene.Net.Util.Fst System using System.Collections using System.Collections.Generic using System.Diagnostics using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using System.IO using Lucene.Net.Store.Directory Lucene.Net.Store.IndexInput Lucene.Net.Store.IndexOutput Lucene.Net.Store.IOContext Lucene.Net.Util.Packed.PackedInts class decl List decl Outputs Random bool int Directory internal static internal static return internal static internal static if ! return else if == return + + else return + + int BytesRef private static private static decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ decl_stmt int = + >= && <= = byte = return string internal static internal static decl_stmt string if = else = return decl char int internal static internal static decl_stmt int = if == return decl_stmt char = new for = < ++ = char return new internal static internal static return new internal static internal static if == return new else return int int int int internal static internal static decl_stmt int = decl_stmt int = decl_stmt int = while < if == + decl_stmt int = = += ++ = return internal static internal static if > for = < ++ = + & = return public virtual public virtual < return public virtual public virtual if + + decl BytesReader decl FST T T int private private < == || == == || == decl_stmt T = decl_stmt T = decl_stmt BytesReader = for = <= ++ decl_stmt int if == = < < else = + if == if != = return else return default = if != = return decl FST T decl FST T decl IList private private < decl_stmt Lucene.Net.Util.Fst.FST < = new < decl_stmt System.Collections.Generic.IList < < = new < < = = decl_stmt T = decl_stmt T = decl_stmt BytesReader = while call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new < while ! call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new < = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() = if == < < break if == + ++ = return decl IList bool decl Builder IndexInput decl Builder decl FST IOContext IndexOutput TextWriter internal virtual < internal virtual < if + + + decl_stmt bool = call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() decl_stmt Lucene.Net.Util.Fst.Builder < = new < == : == && == call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() : : if if else foreach < in if is decl_stmt System.Collections.Generic.IList < = < decl_stmt Lucene.Net.Util.Fst.Builder < = as < foreach in call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() else call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() decl_stmt Lucene.Net.Util.Fst.FST < = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() && != && ! decl_stmt Lucene.Net.Store.IOContext = decl_stmt IndexOutput = call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() try = new < finally call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() if && <= && != decl_stmt System.IO.TextWriter = new new call System.IO.TextWriter.Close() call System.IO.TextWriter.Close() call System.IO.TextWriter.Close() call System.IO.TextWriter.Close() call System.IO.TextWriter.Close() if if == else + + + + if == && == else return protected internal virtual protected internal virtual return IntsRef int decl ISet decl InputOutput long decl FST int decl IntsRefFSTEnum long int decl IntsRefFSTEnum int IntsRef decl FST long bool int int T decl IDictionary IntsRef IntsRef private private < decl_stmt Lucene.Net.Util.Fst.FST < ? decl_stmt System.Collections.Generic.ISet < ? decl_stmt long = decl_stmt long = if decl_stmt Lucene.Net.Util.Fst.FST < ? = as < ? = = new < ? foreach < in decl_stmt long ? = as long = = call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() else = = if == return if + + foreach < in + + + call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() if decl_stmt Lucene.Net.Util.Fst.IntsRefFSTEnum < = new < foreach < in decl_stmt Lucene.Net.Util.IntsRef = if + + + decl_stmt T = + + decl_stmt Lucene.Net.Util.IntsRef = if + + + decl_stmt T = + + + + + call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < foreach < in = if && > - + decl_stmt int = for = < ++ decl_stmt long = decl_stmt Lucene.Net.Util.IntsRef = call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() || == if decl_stmt Lucene.Net.Util.IntsRef = new decl_stmt int = for = < ++ decl_stmt T = call int.ContainsKey() call int.ContainsKey() call int.ContainsKey() call int.ContainsKey() call int.ContainsKey() + + if decl_stmt Lucene.Net.Util.IntsRef = as long if decl_stmt Lucene.Net.Util.Fst.IntsRefFSTEnum < = new < = for = < ++ if + if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() while decl_stmt Lucene.Net.Util.IntsRef = decl_stmt int = call decl List.BinarySearch() call decl List.BinarySearch() call decl List.BinarySearch() call decl List.BinarySearch() call decl List.BinarySearch() new < default if < = - + = - + if call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) == if + = call IntsRef.SeekExact() call IntsRef.SeekExact() call IntsRef.SeekExact() call IntsRef.SeekExact() call IntsRef.SeekExact() = - else if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() if + = call IntsRef.SeekFloor() call IntsRef.SeekFloor() call IntsRef.SeekFloor() call IntsRef.SeekFloor() call IntsRef.SeekFloor() -- else if + = call IntsRef.SeekCeil() call IntsRef.SeekCeil() call IntsRef.SeekCeil() call IntsRef.SeekCeil() call IntsRef.SeekCeil() if != - && < + if + + + + else + == : if break else decl_stmt InputOutput < = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) decl_stmt InputOutput < = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) if call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) == if + = call IntsRef.SeekExact() call IntsRef.SeekExact() call IntsRef.SeekExact() call IntsRef.SeekExact() call IntsRef.SeekExact() else if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() if + = call IntsRef.SeekFloor() call IntsRef.SeekFloor() call IntsRef.SeekFloor() call IntsRef.SeekFloor() call IntsRef.SeekFloor() else if + = call IntsRef.SeekCeil() call IntsRef.SeekCeil() call IntsRef.SeekCeil() call IntsRef.SeekCeil() call IntsRef.SeekCeil() + + + if = for = < ++ if + = new < decl_stmt int = - while decl_stmt bool = if == - || call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() ++ if = call IntsRef.Next() call IntsRef.Next() call IntsRef.Next() call IntsRef.Next() call IntsRef.Next() == else if != - && < * && call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() decl_stmt int = for < ++ decl_stmt Lucene.Net.Util.IntsRef = if ! call int.ContainsKey() call int.ContainsKey() call int.ContainsKey() call int.ContainsKey() call int.ContainsKey() && call int.CompareTo() call int.CompareTo() call int.CompareTo() call int.CompareTo() call int.CompareTo() > decl_stmt int = call decl List.BinarySearch() call decl List.BinarySearch() call decl List.BinarySearch() call decl List.BinarySearch() call decl List.BinarySearch() new < default < = - + if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() -- != - if + + = call IntsRef.SeekFloor() call IntsRef.SeekFloor() call IntsRef.SeekFloor() call IntsRef.SeekFloor() call IntsRef.SeekFloor() == else if + + = call IntsRef.SeekCeil() call IntsRef.SeekCeil() call IntsRef.SeekCeil() call IntsRef.SeekCeil() call IntsRef.SeekCeil() == break if == continue else decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) - - += if == - = if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() if + + = call IntsRef.SeekCeil() call IntsRef.SeekCeil() call IntsRef.SeekCeil() call IntsRef.SeekCeil() call IntsRef.SeekCeil() == else if + + = call IntsRef.SeekFloor() call IntsRef.SeekFloor() call IntsRef.SeekFloor() call IntsRef.SeekFloor() call IntsRef.SeekFloor() == if if ! + call IntsRef.Current() call IntsRef.Current() call IntsRef.Current() call IntsRef.Current() call IntsRef.Current() else if == break else call IntsRef.Current() call IntsRef.Current() call IntsRef.Current() call IntsRef.Current() call IntsRef.Current() call IntsRef.Current() call IntsRef.Current() call IntsRef.Current() call IntsRef.Current() call IntsRef.Current() T decl CountMinOutput decl CountMinOutput T IntsRef T decl IEnumerator bool decl IDictionary IntsRef decl KeyValuePair decl IntsRefFSTEnum decl CountMinOutput private private < if + + + foreach < in + + + call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = new < < decl_stmt Lucene.Net.Util.IntsRef = new foreach < in call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) for = <= ++ = decl_stmt CountMinOutput < = if == = new < = = = else ++ decl_stmt T = if call T.Equals() call T.Equals() call T.Equals() call T.Equals() call T.Equals() = decl_stmt T = if call T.Equals() call T.Equals() call T.Equals() call T.Equals() call T.Equals() = = call decl Outputs.Common() call decl Outputs.Common() call decl Outputs.Common() call decl Outputs.Common() call decl Outputs.Common() if == = = if decl_stmt System.Collections.Generic.IEnumerator < < < = call decl IDictionary.GetEnumerator() call decl IDictionary.GetEnumerator() call decl IDictionary.GetEnumerator() call decl IDictionary.GetEnumerator() call decl IDictionary.GetEnumerator() while call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt KeyValuePair < < = decl_stmt Lucene.Net.Util.IntsRef = decl_stmt CountMinOutput < = if + + + + + + + call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() + + decl_stmt bool if > = >= else > if > && >= = else if > = - decl_stmt CountMinOutput < = = != && > && >= || == && >= || <= else if >= = else = if ! call decl IEnumerator.Reset() call decl IEnumerator.Reset() call decl IEnumerator.Reset() call decl IEnumerator.Reset() call decl IEnumerator.Reset() else call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) -- while >= decl_stmt CountMinOutput < = if != = -- if foreach < < in + + + + + if + call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() if <= return if decl_stmt Lucene.Net.Util.Fst.IntsRefFSTEnum < = new < if + + + foreach < in + + + call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = new < < decl_stmt Lucene.Net.Util.IntsRef = new foreach < in call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) for = <= ++ = decl_stmt CountMinOutput < = if == = new < = = = else ++ decl_stmt T = if call T.Equals() call T.Equals() call T.Equals() call T.Equals() call T.Equals() = decl_stmt T = if call T.Equals() call T.Equals() call T.Equals() call T.Equals() call T.Equals() = = call decl Outputs.Common() call decl Outputs.Common() call decl Outputs.Common() call decl Outputs.Common() call decl Outputs.Common() if == = = if decl_stmt System.Collections.Generic.IEnumerator < < < = call decl IDictionary.GetEnumerator() call decl IDictionary.GetEnumerator() call decl IDictionary.GetEnumerator() call decl IDictionary.GetEnumerator() call decl IDictionary.GetEnumerator() while call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt KeyValuePair < < = decl_stmt Lucene.Net.Util.IntsRef = decl_stmt CountMinOutput < = if + + + + + + + call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() + + decl_stmt bool if > = >= else > if > && >= = else if > = - decl_stmt CountMinOutput < = = != && > && >= || == && >= || <= else if >= = else = if ! call decl IEnumerator.Reset() call decl IEnumerator.Reset() call decl IEnumerator.Reset() call decl IEnumerator.Reset() call decl IEnumerator.Reset() else call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) call Lucene.Net.Util.IntsRef.CopyInts(IntsRef) -- while >= decl_stmt CountMinOutput < = if != = -- if foreach < < in + + + + + if + call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() if <= return if decl_stmt Lucene.Net.Util.Fst.IntsRefFSTEnum < = new < while = call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() != if + + + call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() decl_stmt CountMinOutput < = || if else if decl_stmt int = new foreach < < in if > decl_stmt CountMinOutput < = decl_stmt T = if + + + call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() call decl Outputs.OutputToString() if else