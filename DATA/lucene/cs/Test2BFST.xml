Lucene.Net.Util.Fst Lucene.Net.Support using NUnit.Framework using System using Lucene.Net.Store.Directory Lucene.Net.Store.IndexInput Lucene.Net.Store.IndexOutput Lucene.Net.Store.IOContext Lucene.Net.Store.MMapDirectory Lucene.Net.Util.Packed.PackedInts class attribute attribute Lucene.Net.Util.Fst.Test2BFST super super LuceneTestCase long decl FST decl int int decl Builder object IndexInput long Random decl Outputs IntsRef int int decl int IndexOutput IndexInput IntsRef bool decl IntsRefFSTEnum Directory BytesRef public virtual public virtual decl_stmt int = new decl_stmt Lucene.Net.Util.IntsRef = new decl_stmt int = decl_stmt Lucene.Net.Store.Directory = new for = < ++ decl_stmt bool = == if ! decl_stmt Lucene.Net.Util.Fst.Outputs < = decl_stmt object = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt int = decl_stmt System.Random = new decl_stmt int = new decl_stmt Lucene.Net.Util.IntsRef = new while for = < ++ = call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() ++ if == + + call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() + + + if > + * * break decl_stmt Lucene.Net.Util.Fst.FST < = call int.Finish() call int.Finish() call int.Finish() call int.Finish() call int.Finish() for = < ++ + call int.SizeInBytes() call int.SizeInBytes() call int.SizeInBytes() call int.SizeInBytes() call int.SizeInBytes() + + + + + = new for = < ++ if == + for = < ++ = call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() decl_stmt Lucene.Net.Util.Fst.IntsRefFSTEnum < = new < = new decl_stmt int = while if == break for = < ++ = call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() ++ if == decl_stmt IndexOutput = call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call int.Save() call int.Save() call int.Save() call int.Save() call int.Save() call decl Outputs.Dispose() call decl Outputs.Dispose() call decl Outputs.Dispose() call decl Outputs.Dispose() call decl Outputs.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() = new < call decl Builder.Dispose() call decl Builder.Dispose() call decl Builder.Dispose() call decl Builder.Dispose() call decl Builder.Dispose() else call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() + + decl_stmt Lucene.Net.Util.Fst.Outputs < = decl_stmt Lucene.Net.Util.Fst.Builder < = new < decl_stmt var = new decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt int = decl_stmt System.Random = new while call decl IntsRefFSTEnum.NextBytes() call decl IntsRefFSTEnum.NextBytes() call decl IntsRefFSTEnum.NextBytes() call decl IntsRefFSTEnum.NextBytes() call decl IntsRefFSTEnum.NextBytes() call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() ++ if == + + call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() + if call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() > break decl_stmt Lucene.Net.Util.Fst.FST < = call int.Finish() call int.Finish() call int.Finish() call int.Finish() call int.Finish() for = < ++ + call int.SizeInBytes() call int.SizeInBytes() call int.SizeInBytes() call int.SizeInBytes() call int.SizeInBytes() + + + + + = new for = < ++ if == + call decl IntsRefFSTEnum.NextBytes() call decl IntsRefFSTEnum.NextBytes() call decl IntsRefFSTEnum.NextBytes() call decl IntsRefFSTEnum.NextBytes() call decl IntsRefFSTEnum.NextBytes() decl_stmt Lucene.Net.Util.Fst.IntsRefFSTEnum < = new < = new decl_stmt int = while if == break call decl IntsRefFSTEnum.NextBytes() call decl IntsRefFSTEnum.NextBytes() call decl IntsRefFSTEnum.NextBytes() call decl IntsRefFSTEnum.NextBytes() call decl IntsRefFSTEnum.NextBytes() ++ if == decl_stmt IndexOutput = call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call int.Save() call int.Save() call int.Save() call int.Save() call int.Save() call decl Outputs.Dispose() call decl Outputs.Dispose() call decl Outputs.Dispose() call decl Outputs.Dispose() call decl Outputs.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() = new < call decl Builder.Dispose() call decl Builder.Dispose() call decl Builder.Dispose() call decl Builder.Dispose() call decl Builder.Dispose() else call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() + + decl_stmt Lucene.Net.Util.Fst.Outputs < ? = decl_stmt Lucene.Net.Util.Fst.Builder < ? = new < ? decl_stmt long = decl_stmt int = decl_stmt System.Random = new while call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() += + call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() ++ if == + + call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() + if call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() call int.FstSizeInBytes() > break decl_stmt Lucene.Net.Util.Fst.FST < ? = call int.Finish() call int.Finish() call int.Finish() call int.Finish() call int.Finish() for = < ++ + call int.SizeInBytes() call int.SizeInBytes() call int.SizeInBytes() call int.SizeInBytes() call int.SizeInBytes() + + + + + = = new for = < ++ if == + long += + call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() decl_stmt Lucene.Net.Util.Fst.IntsRefFSTEnum < ? = new < ? = new decl_stmt int = = while if == break += + call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() call decl IntsRefFSTEnum.Next() ++ if == decl_stmt IndexOutput = call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call int.Save() call int.Save() call int.Save() call int.Save() call int.Save() call decl Outputs.Dispose() call decl Outputs.Dispose() call decl Outputs.Dispose() call decl Outputs.Dispose() call decl Outputs.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() = new < ? call decl Builder.Dispose() call decl Builder.Dispose() call decl Builder.Dispose() call decl Builder.Dispose() call decl Builder.Dispose() else call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() int private private decl_stmt int = while >= += + if < break else = --