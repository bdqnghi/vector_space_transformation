Lucene.Net.Index System using System.Collections.Generic using System.Threading using Lucene.Net.Randomized using Lucene.Net.Randomized.Generators using Lucene.Net.Codecs.Codec Lucene.Net.Store.BaseDirectoryWrapper Lucene.Net.Util.Constants Lucene.Net.Util.TestUtil NUnit.Framework using Lucene.Net.Support using System.IO using class attribute Lucene.Net.Index.TestIndexWriterOnJRECrash super super TestNRTThreads DirectoryInfo public override public override = call System.IO.DirectoryInfo.Delete(bool) call System.IO.DirectoryInfo.Delete(bool) call System.IO.DirectoryInfo.Delete(bool) call System.IO.DirectoryInfo.Delete(bool) call System.IO.DirectoryInfo.Delete(bool) call DirectoryInfo.mkdir() call DirectoryInfo.mkdir() call DirectoryInfo.mkdir() call DirectoryInfo.mkdir() call DirectoryInfo.mkdir() ThreadClass int public override public override if == for = < ++ if return else decl_stmt int = decl_stmt Lucene.Net.Support.ThreadClass = new = call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() for = < ++ public override public override try catch PrintStream decl IList ProcessBuilder Process Thread Thread public virtual public virtual decl_stmt System.Collections.Generic.IList < = new < call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() + + + + call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() + call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() + call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt ProcessBuilder = new call ProcessBuilder.directory() call ProcessBuilder.directory() call ProcessBuilder.directory() call ProcessBuilder.directory() call ProcessBuilder.directory() call ProcessBuilder.redirectErrorStream() call ProcessBuilder.redirectErrorStream() call ProcessBuilder.redirectErrorStream() call ProcessBuilder.redirectErrorStream() call ProcessBuilder.redirectErrorStream() decl_stmt System.Diagnostics.Process = call ProcessBuilder.Start() call ProcessBuilder.Start() call ProcessBuilder.Start() call ProcessBuilder.Start() call ProcessBuilder.Start() decl_stmt PrintStream = decl_stmt System.Threading.Thread = decl_stmt System.Threading.Thread = if call PrintStream.println() call PrintStream.println() call PrintStream.println() call PrintStream.println() call PrintStream.println() call Process.waitFor() call Process.waitFor() call Process.waitFor() call Process.waitFor() call Process.waitFor() call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() if call PrintStream.println() call PrintStream.println() call PrintStream.println() call PrintStream.println() call PrintStream.println() ThreadClass public static public static decl_stmt Lucene.Net.Support.ThreadClass = new from call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() return decl sbyte int public override public override try decl_stmt sbyte = new decl_stmt int while = != - if catch + BaseDirectoryWrapper public virtual public virtual if decl_stmt Lucene.Net.Store.BaseDirectoryWrapper = = if if + if > call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() return call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() foreach in if return return bool string Method object Type Field public virtual public virtual decl_stmt string = decl_stmt bool = call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() || call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() || call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() try if try decl_stmt System.Type = decl_stmt Lucene.Net.Documents.Field = call Type.GetDeclaredField() call Type.GetDeclaredField() call Type.GetDeclaredField() call Type.GetDeclaredField() call Type.GetDeclaredField() = decl_stmt object = call Field.Get() call Field.Get() call Field.Get() call Field.Get() call Field.Get() decl_stmt Method = call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) typeof long typeof long call Method.invoke() call Method.invoke() call Method.invoke() call Method.invoke() call Method.invoke() catch - catch