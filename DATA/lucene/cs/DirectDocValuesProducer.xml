Lucene.Net.Codecs.Memory System.Diagnostics using System.Collections.Generic using Lucene.Net.Index using Lucene.Net.Store using Lucene.Net.Support using Lucene.Net.Util using class Lucene.Net.Codecs.Memory.DirectDocValuesProducer super super DocValuesProducer decl IDictionary decl IDictionary int int decl IDictionary decl IDictionary sbyte sbyte decl IDictionary int sbyte decl IDictionary int decl IDictionary decl IDictionary sbyte AtomicLong decl IDictionary IndexInput int var private static private static decl_stmt var = new = = = if != - = else = = return var private private decl_stmt var = new = = = = if != - = else = return var private private decl_stmt var = new = = return var private private decl_stmt var = new = = = return int int private private decl_stmt int = while != - decl_stmt int = if == = else if == = else if == = else if == = else throw new + + + = public override public override return call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() public override public override if >= var public override public override lock decl_stmt var = if == = = return var private private call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() + switch case decl_stmt var = new call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return new case decl_stmt var = new for = < ++ = call IndexInput.ReadShort() call IndexInput.ReadShort() call IndexInput.ReadShort() call IndexInput.ReadShort() call IndexInput.ReadShort() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return new case decl_stmt var = new for = < ++ = call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return new case decl_stmt var = new for = < ++ = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return new default: throw new public override public override return public override public override return public override public override return public override public override return var public override public override lock decl_stmt var = if == = = return var var private private call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt var = new call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() + + decl_stmt var = new + for = < ++ = call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() = call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() + return new public override public override = = = + - var public override public override lock decl_stmt var = if == = = return SortedEntry BinaryDocValues NumericDocValues private private decl_stmt SortedEntry = decl_stmt NumericDocValues = decl_stmt BinaryDocValues = return new public override public override return int public override public override return var var var var var public override public override lock decl_stmt var = decl_stmt var = if == = = decl_stmt var = decl_stmt var = decl_stmt var = return new public override public override if == return else return ++ = = int = int + public override public override int return public override public override return + public override public override return - var private private decl_stmt var = new = = = return Bits var var private private if == - return new else decl_stmt Lucene.Net.Spatial.Util.Bits lock = if == decl_stmt var = call var.Seek() call var.Seek() call var.Seek() call var.Seek() call var.Seek() == decl_stmt var = new int >> for = < ++ = call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() = new = return BinaryEntry NumericEntry public override public override switch case return case return case decl_stmt BinaryEntry = return case decl_stmt NumericEntry = return default: throw new protected override protected override if call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose()