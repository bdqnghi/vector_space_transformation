Lucene.Net.Search System using System.Collections.Generic using System.Linq using System.Text using System.Threading using System.Threading.Tasks using Apache.NMS.Util using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Analysis.Analyzer Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Document.Document Lucene.Net.Document.Field Lucene.Net.Document.TextField Lucene.Net.Index.DirectoryReader Lucene.Net.Index.IndexCommit Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexWriter Lucene.Net.Index.IndexWriterConfig Lucene.Net.Index.IndexableField Lucene.Net.Index.KeepOnlyLastCommitDeletionPolicy Lucene.Net.Index.NoMergePolicy Lucene.Net.Index.RandomIndexWriter Lucene.Net.Index.SnapshotDeletionPolicy Lucene.Net.Index.Term Lucene.Net.Index.ThreadedIndexingAndSearchingTestCase Lucene.Net.Index.TrackingIndexWriter Lucene.Net.Store.Directory Lucene.Net.Store.NRTCachingDirectory Lucene.Net.Util.IOUtils Lucene.Net.Util.LuceneTestCase.SuppressCodecs Lucene.Net.Util.LuceneTestCase Lucene.Net.Util.TestUtil Lucene.Net.Util.ThreadInterruptedException Lucene.Net.Util.Version class attribute Lucene.Net.Search.TestControlledRealTimeReopenThread super super ThreadedIndexingAndSearchingTestCase decl ThreadLocal long decl ControlledRealTimeReopenThread TrackingIndexWriter SearcherManager SearcherManager bool decl ControlledRealTimeReopenThread public virtual public virtual if + call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() return call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() protected internal override protected internal override if if return new else return IndexSearcher long protected internal override protected internal override < < decl_stmt long = call Lucene.Net.Index.TrackingIndexWriter.UpdateDocuments(Term,IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.UpdateDocuments(Term,IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.UpdateDocuments(Term,IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.UpdateDocuments(Term,IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.UpdateDocuments(Term,IEnumerable,Analyzer) if == if + + call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() if + + try call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new finally call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() = IndexSearcher long protected internal override protected internal override < < decl_stmt long = call Lucene.Net.Index.TrackingIndexWriter.AddDocuments(IEnumerable) call Lucene.Net.Index.TrackingIndexWriter.AddDocuments(IEnumerable) call Lucene.Net.Index.TrackingIndexWriter.AddDocuments(IEnumerable) call Lucene.Net.Index.TrackingIndexWriter.AddDocuments(IEnumerable) call Lucene.Net.Index.TrackingIndexWriter.AddDocuments(IEnumerable) if == if + + call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() if + + try call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new finally call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() = IndexSearcher long protected internal override protected internal override < decl_stmt long = call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) if == if + + call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() if + + try call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new finally call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() = IndexSearcher long protected internal override protected internal override < decl_stmt long = call Lucene.Net.Index.TrackingIndexWriter.UpdateDocument(Term,IEnumerable) call Lucene.Net.Index.TrackingIndexWriter.UpdateDocument(Term,IEnumerable) call Lucene.Net.Index.TrackingIndexWriter.UpdateDocument(Term,IEnumerable) call Lucene.Net.Index.TrackingIndexWriter.UpdateDocument(Term,IEnumerable) call Lucene.Net.Index.TrackingIndexWriter.UpdateDocument(Term,IEnumerable) if == if + + call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() if + + try call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new finally call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() = IndexSearcher long protected internal override protected internal override decl_stmt long = call Lucene.Net.Index.TrackingIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.TrackingIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.TrackingIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.TrackingIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.TrackingIndexWriter.DeleteDocuments(Query) if == if + + call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() if + + try call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new finally call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() = double SearcherFactory double protected internal override protected internal override decl_stmt double = + * decl_stmt double = * + * if + + + = new decl_stmt Lucene.Net.Search.SearcherFactory = new = new = new = new <> = = + call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() = new <> = = + call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() IndexSearcher public override public override = decl_stmt Lucene.Net.Search.IndexSearcher = new call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new return long protected internal override protected internal override decl_stmt long ? = if != long private private lock = protected internal override protected internal override SearcherManager decl_stmt Lucene.Net.Search.SearcherManager if = else = return call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() protected internal override protected internal override call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() protected internal override protected internal override if call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() LatchedIndexWriter Directory decl ControlledRealTimeReopenThread IndexSearcher ThreadClass Document CountDownLatch TrackingIndexWriter AtomicBoolean SearcherManager ThreadClass IndexWriterConfig long CountDownLatch public virtual public virtual decl_stmt Lucene.Net.Index.IndexWriterConfig = new call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) : decl_stmt Lucene.Net.Store.Directory = decl_stmt CountDownLatch = new decl_stmt CountDownLatch = new decl_stmt LatchedIndexWriter = new decl_stmt Lucene.Net.Index.TrackingIndexWriter = new decl_stmt Lucene.Net.Search.SearcherManager = new decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() decl_stmt Lucene.Net.Support.ThreadClass = new call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() = decl_stmt long = call Lucene.Net.Index.TrackingIndexWriter.UpdateDocument(Term,IEnumerable) call Lucene.Net.Index.TrackingIndexWriter.UpdateDocument(Term,IEnumerable) call Lucene.Net.Index.TrackingIndexWriter.UpdateDocument(Term,IEnumerable) call Lucene.Net.Index.TrackingIndexWriter.UpdateDocument(Term,IEnumerable) call Lucene.Net.Index.TrackingIndexWriter.UpdateDocument(Term,IEnumerable) new decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() try call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() finally call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() decl_stmt Lucene.Net.Search.ControlledRealTimeReopenThread < = new < call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() if + decl_stmt Lucene.Net.Support.AtomicBoolean = new decl_stmt Lucene.Net.Support.ThreadClass = new call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) if ! call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.ThreadClass.Interrupt() call Lucene.Net.Support.ThreadClass.Interrupt() call Lucene.Net.Support.ThreadClass.Interrupt() call Lucene.Net.Support.ThreadClass.Interrupt() call Lucene.Net.Support.ThreadClass.Interrupt() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Join() call decl ControlledRealTimeReopenThread.Join() call decl ControlledRealTimeReopenThread.Join() call decl ControlledRealTimeReopenThread.Join() call decl ControlledRealTimeReopenThread.Join() public override public override try new new catch finally public override public override try catch throw new public override public override < try if catch throw new IndexReader SearcherFactory RandomIndexWriter Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Lucene.Net.Search.SearcherFactory = new try new catch call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public override public override return SearcherManager AtomicBoolean IndexWriter Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new new decl_stmt Lucene.Net.Support.AtomicBoolean = new decl_stmt Lucene.Net.Search.SearcherManager = new new call SearcherManager.AddListener() call SearcherManager.AddListener() call SearcherManager.AddListener() call SearcherManager.AddListener() call SearcherManager.AddListener() new call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) new call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public public public public if IndexSearcher int SnapshotDeletionPolicy Document decl ControlledRealTimeReopenThread StringBuilder TrackingIndexWriter long IndexWriter Thread string long string SearcherManager decl IList TopDocs IndexWriterConfig decl char Directory long public virtual public virtual decl_stmt int = decl_stmt string = decl_stmt char = call string.ToCharArray() call string.ToCharArray() call string.ToCharArray() call string.ToCharArray() call string.ToCharArray() decl_stmt System.Text.StringBuilder = new for = < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt string = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) decl_stmt Lucene.Net.Index.SnapshotDeletionPolicy = new new decl_stmt Lucene.Net.Store.Directory = new decl_stmt Lucene.Net.Index.IndexWriterConfig = new new call Lucene.Net.Index.IndexWriterConfig.SetIndexDeletionPolicy(IndexDeletionPolicy) call Lucene.Net.Index.IndexWriterConfig.SetIndexDeletionPolicy(IndexDeletionPolicy) call Lucene.Net.Index.IndexWriterConfig.SetIndexDeletionPolicy(IndexDeletionPolicy) call Lucene.Net.Index.IndexWriterConfig.SetIndexDeletionPolicy(IndexDeletionPolicy) call Lucene.Net.Index.IndexWriterConfig.SetIndexDeletionPolicy(IndexDeletionPolicy) call Lucene.Net.Index.IndexWriterConfig.SetOpenMode(OpenMode_e) call Lucene.Net.Index.IndexWriterConfig.SetOpenMode(OpenMode_e) call Lucene.Net.Index.IndexWriterConfig.SetOpenMode(OpenMode_e) call Lucene.Net.Index.IndexWriterConfig.SetOpenMode(OpenMode_e) call Lucene.Net.Index.IndexWriterConfig.SetOpenMode(OpenMode_e) decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt Lucene.Net.Search.SearcherManager = new new decl_stmt Lucene.Net.Index.TrackingIndexWriter = new decl_stmt Lucene.Net.Search.ControlledRealTimeReopenThread < = new < call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.SetDaemon() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() call decl ControlledRealTimeReopenThread.Start() decl_stmt System.Collections.Generic.IList < = new < for = < ++ if > && == decl_stmt System.Threading.Thread = new new call Thread.Start() call Thread.Start() call Thread.Start() call Thread.Start() call Thread.Start() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new + call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new decl_stmt long = decl_stmt long = call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.TrackingIndexWriter.AddDocument(IEnumerable,Analyzer) call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() call decl ControlledRealTimeReopenThread.WaitForGeneration() decl_stmt long = - < * + decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() decl_stmt Lucene.Net.Search.TopDocs = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new + call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() foreach in call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call decl ControlledRealTimeReopenThread.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() IndexCommit public override public override try decl_stmt Lucene.Net.Index.IndexCommit = foreach in catch throw new