Lucene.Net.Codecs.Pulsing System using System.Collections.Generic using System.Diagnostics using Index using Store using Util using class Lucene.Net.Codecs.Pulsing.PulsingPostingsReader super super PostingsReaderBase PostingsReaderBase int decl SortedDictionary SegmentReadState int var IndexInput var var var public override public override = = call PostingsReaderBase.Init() call PostingsReaderBase.Init() call PostingsReaderBase.Init() call PostingsReaderBase.Init() call PostingsReaderBase.Init() if is || < = else = new < decl_stmt var = decl_stmt Lucene.Net.Store.IndexInput = try = call SegmentReadState.Directory() call SegmentReadState.Directory() call SegmentReadState.Directory() call SegmentReadState.Directory() call SegmentReadState.Directory() call SegmentReadState.Directory() call SegmentReadState.Directory() call SegmentReadState.Directory() call SegmentReadState.Directory() decl_stmt var = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() for = < ++ decl_stmt var = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt var = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call decl SortedDictionary.Add() call decl SortedDictionary.Add() call decl SortedDictionary.Add() call decl SortedDictionary.Add() call decl SortedDictionary.Add() finally public override public override return new = call PostingsReaderBase.NewTermState() call PostingsReaderBase.NewTermState() call PostingsReaderBase.NewTermState() call PostingsReaderBase.NewTermState() call PostingsReaderBase.NewTermState() long var var public override public override decl_stmt var = == = || decl_stmt long = <= : if <= = if == || < = new = || else decl_stmt var = == : if == = new for = < ++ = = - = = call PostingsReaderBase.DecodeTerm() call PostingsReaderBase.DecodeTerm() call PostingsReaderBase.DecodeTerm() call PostingsReaderBase.DecodeTerm() call PostingsReaderBase.DecodeTerm() = var var PulsingDocsEnum var public override public override decl_stmt var = if != - decl_stmt PulsingDocsEnum if is = if ! call PulsingDocsEnum.CanReuse() call PulsingDocsEnum.CanReuse() call PulsingDocsEnum.CanReuse() call PulsingDocsEnum.CanReuse() call PulsingDocsEnum.CanReuse() = new else decl_stmt var = if != && call var.CanReuse() call var.CanReuse() call var.CanReuse() call var.CanReuse() call var.CanReuse() = else = new if != return call PulsingDocsEnum.Reset() call PulsingDocsEnum.Reset() call PulsingDocsEnum.Reset() call PulsingDocsEnum.Reset() call PulsingDocsEnum.Reset() if ! is return call PostingsReaderBase.Docs() call PostingsReaderBase.Docs() call PostingsReaderBase.Docs() call PostingsReaderBase.Docs() call PostingsReaderBase.Docs() decl_stmt var = call PostingsReaderBase.Docs() call PostingsReaderBase.Docs() call PostingsReaderBase.Docs() call PostingsReaderBase.Docs() call PostingsReaderBase.Docs() return var var PulsingDocsAndPositionsEnum var public override public override decl_stmt var = if != - decl_stmt PulsingDocsAndPositionsEnum if is = if ! call PulsingDocsAndPositionsEnum.CanReuse() call PulsingDocsAndPositionsEnum.CanReuse() call PulsingDocsAndPositionsEnum.CanReuse() call PulsingDocsAndPositionsEnum.CanReuse() call PulsingDocsAndPositionsEnum.CanReuse() = new else decl_stmt var = if != && call var.CanReuse() call var.CanReuse() call var.CanReuse() call var.CanReuse() call var.CanReuse() = else = new if != return call PulsingDocsAndPositionsEnum.Reset() call PulsingDocsAndPositionsEnum.Reset() call PulsingDocsAndPositionsEnum.Reset() call PulsingDocsAndPositionsEnum.Reset() call PulsingDocsAndPositionsEnum.Reset() if ! is return call PostingsReaderBase.DocsAndPositions() call PostingsReaderBase.DocsAndPositions() call PostingsReaderBase.DocsAndPositions() call PostingsReaderBase.DocsAndPositions() call PostingsReaderBase.DocsAndPositions() decl_stmt var = call PostingsReaderBase.DocsAndPositions() call PostingsReaderBase.DocsAndPositions() call PostingsReaderBase.DocsAndPositions() call PostingsReaderBase.DocsAndPositions() call PostingsReaderBase.DocsAndPositions() return public override public override return != call PostingsReaderBase.RamBytesUsed() call PostingsReaderBase.RamBytesUsed() call PostingsReaderBase.RamBytesUsed() call PostingsReaderBase.RamBytesUsed() call PostingsReaderBase.RamBytesUsed() : public override public override call PostingsReaderBase.CheckIntegrity() call PostingsReaderBase.CheckIntegrity() call PostingsReaderBase.CheckIntegrity() call PostingsReaderBase.CheckIntegrity() call PostingsReaderBase.CheckIntegrity() protected override protected override if ! call PostingsReaderBase.Dispose() call PostingsReaderBase.Dispose() call PostingsReaderBase.Dispose() call PostingsReaderBase.Dispose() call PostingsReaderBase.Dispose() var private private if == return decl_stmt var = return < var private private decl_stmt var = return < = var public override public override decl_stmt var = if != - = new else != = = if == return = new return var public override public override decl_stmt var = = if != - if == || < = new else public override public override if == - return + return + + + public public != - if == = new else if < = = - = = = = = return public public return == && == public override public override return var var public override public override while if return = decl_stmt var = if == += else += uint >> = & != : if >= if for = < ++ decl_stmt var = if & != = if && & != if != else for = < ++ if && & != if == || return = public override public override return = public override public override return public override public override return public public != - if == = new else if < = = = = = - = = = : - = return public public return == && == var public override public override while if return = decl_stmt var = += uint >> = & != : = = : - if != && ! continue = return = public override public override return public override public override return public override public override return = int int public override public override > -- if if ! decl_stmt int = if & != = += uint >> = else += if decl_stmt int = if & != = += uint >> return public override public override return public override public override return + if return if && > = if == = new else = return return private private while != if && ! = public override public override return public < public < return public override public override public override public override