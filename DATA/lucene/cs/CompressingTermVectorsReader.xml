Lucene.Net.Codecs.Compressing System.Linq using Lucene.Net.Index using Lucene.Net.Store using Lucene.Net.Support using Lucene.Net.Util using Lucene.Net.Util.Packed using System using System.Collections.Generic using System.Diagnostics using class Lucene.Net.Codecs.Compressing.CompressingTermVectorsReader super super TermVectorsReader super IDisposable int CompressingStoredFieldsIndexReader FieldInfos BlockPackedReaderIterator int CompressionMode bool int IndexInput int Decompressor return return return return return return private private if throw new protected override protected override if ! = public override public override return new int int int decl int int decl PackedInts decl PackedInts int int int decl int int decl int int float int int int LongsRef decl int int int decl PackedInts decl int BytesRef int decl Reader int int decl int decl int decl int decl Reader decl int int decl Reader int decl Mutable int long int decl PackedInts decl Reader int int decl int decl int decl ReaderIterator decl int decl int LongsRef decl int BytesRef int decl int decl PackedInts decl int int int int int int decl int int int decl float int public override public override decl_stmt long = call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if < || || >= || || >= + || || >= || || >= + || || || >= || || >= + || || >= || || >= + || + || || >= || || >= + || || >= || || >= + || || || >= || || >= + || || >= || || >= + || + throw new + + + + + + + + decl_stmt int decl_stmt int decl_stmt int if == = = = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() else call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) decl_stmt int = for = < ++ += int call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) = = int call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) += for = + < + ++ += int call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) = if == return decl_stmt int decl_stmt int = call IndexInput.ReadByte() call IndexInput.ReadByte() call IndexInput.ReadByte() call IndexInput.ReadByte() call IndexInput.ReadByte() & != decl_stmt int = & decl_stmt int = uint >> if == += call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() ++ decl_stmt ReaderIterator = = new for = < ++ = int call decl PackedInts.Next() call decl PackedInts.Next() call decl PackedInts.Next() call decl PackedInts.Next() call decl PackedInts.Next() decl_stmt int = new decl_stmt Reader decl_stmt int = - decl_stmt Reader = switch call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() case decl_stmt Reader = decl_stmt Mutable = for = < ++ decl_stmt int = int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() >= && < decl_stmt int = int call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() call int.Set() call int.Set() call int.Set() call int.Set() call int.Set() = break case = break default: throw new for = < ++ = int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() + decl_stmt Reader decl_stmt int decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = decl_stmt int = for = < ++ += int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() = decl_stmt int = = decl_stmt int = new decl_stmt int = new decl_stmt int = new call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) decl_stmt int = for = < ++ += int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) for = < ++ decl_stmt int = int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() + decl_stmt int = new = for = < decl_stmt Lucene.Net.Util.LongsRef = call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) - for = < ++ ++ = int + call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) - call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Ord() call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Ord() call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Ord() call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Ord() call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Ord() call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) = for = < ++ for = < call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() ++ += int call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) for = < ++ decl_stmt int = int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() + decl_stmt int = new = for = < decl_stmt Lucene.Net.Util.LongsRef = call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) - for = < ++ ++ = int + = += = + for = + < ++ for = < call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() ++ += int call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) decl_stmt int = new call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) for = < decl_stmt Lucene.Net.Util.LongsRef = call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) - for = < ++ ++ = + int + decl_stmt int = = = for = = < ++ decl_stmt int = int call decl int.Get() call decl int.Get() call decl int.Get() call decl int.Get() call decl int.Get() decl_stmt int = int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() for = < ++ decl_stmt int = ++ if & != += if & != += if & != += != - || == + + decl_stmt int = decl_stmt int if > = else = new if > decl_stmt float = new for = < ++ = call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() = = for = < ++ decl_stmt int = decl_stmt int = if != && != decl_stmt float = for = < ++ += * if != decl_stmt int = decl_stmt int = decl_stmt int = for = = int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() + < ++ decl_stmt int = + += for = + < + ++ += - += else = = new if > for = < ++ decl_stmt int = decl_stmt int = if != for = = int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() + < ++ for = + < + ++ += - decl_stmt int = new decl_stmt int = decl_stmt int = decl_stmt int = if > call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) decl_stmt int = for = < ++ decl_stmt int = int call decl int.Get() call decl int.Get() call decl int.Get() call decl int.Get() call decl int.Get() decl_stmt int = int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() if & != for = < ++ decl_stmt int = + for = < ++ decl_stmt int = int call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) += += = for = < ++ decl_stmt int = int call decl int.Get() call decl int.Get() call decl int.Get() call decl int.Get() call decl int.Get() + decl_stmt int = int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() + if & != decl_stmt int = = new + decl_stmt int = = for = < ++ decl_stmt int = + for = < ++ decl_stmt int = int call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) += + = ++ == += += for = + < ++ decl_stmt int = int call decl int.Get() call decl int.Get() call decl int.Get() call decl int.Get() call decl int.Get() decl_stmt int = int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() if & != for = < ++ decl_stmt int = + for = < ++ += int call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) += == + + decl_stmt Lucene.Net.Util.BytesRef = new call Decompressor.Decompress() call Decompressor.Decompress() call Decompressor.Decompress() call Decompressor.Decompress() call Decompressor.Decompress() + + + = decl_stmt Lucene.Net.Util.BytesRef = new + decl_stmt int = new for = < ++ = int call decl int.Get() call decl int.Get() call decl int.Get() call decl int.Get() call decl int.Get() + decl_stmt int = new for = < ++ = int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() + decl_stmt int = new decl_stmt int = for = < ++ += int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() for = < ++ decl_stmt int = int call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() call decl Reader.Get() + = new for = < ++ = ++ == + + return new int int int decl int private private decl_stmt int = new decl_stmt int = for = < ++ decl_stmt int = int += for = < ++ decl_stmt int = int + = new + for = < ++ decl_stmt int = + + = + += return int LongsRef decl int int decl int int int int int private private decl_stmt int = new call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Reset(DataInput,long) decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = int decl_stmt int = int if & != for = < ++ decl_stmt int = + += += call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) for = < ++ decl_stmt int = int + decl_stmt int = int + if & != decl_stmt int = decl_stmt int = new = for = < decl_stmt Lucene.Net.Util.LongsRef = call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Next(int) - for = < ++ ++ = int + += call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Skip(long) - call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Ord() call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Ord() call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Ord() call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Ord() call Lucene.Net.Util.Packed.BlockPackedReaderIterator.Ord() return public override < public override < return int int private < private < decl_stmt int = while < decl_stmt int = ++ yield FieldInfo int int public override public override decl_stmt Lucene.Net.Index.FieldInfo = if == return decl_stmt int = - for = < ++ if == = break if == - || == return decl_stmt int = = - for = < ++ if < += else = break >= return new new + return TVTermsEnum public override public override decl_stmt TVTermsEnum if != && is = else = new call TVTermsEnum.Reset() call TVTermsEnum.Reset() call TVTermsEnum.Reset() call TVTermsEnum.Reset() call TVTermsEnum.Reset() new return return public override public override return return - return return public override public override return public override public override return & != public override public override return & != public override public override return & != internal virtual internal virtual = = = = = = = = = = = = internal virtual internal virtual = = = - public override public override if == - return else < ++ = = + if > = return return BytesRef int public override public override if < && >= decl_stmt int = if == return else if > while decl_stmt Lucene.Net.Util.BytesRef = if == return decl_stmt int = call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) if > return else if == return public override public override throw new public override public override return public override public override throw new public override public override return public override public override return TVDocsEnum public override sealed public override sealed decl_stmt TVDocsEnum if != && is = else = new call TVDocsEnum.Reset() call TVDocsEnum.Reset() call TVDocsEnum.Reset() call TVDocsEnum.Reset() call TVDocsEnum.Reset() return public override public override if == && == return return public virtual public virtual = = = = = = = = = = = = = - internal virtual internal virtual if == throw new else if == - throw new internal virtual internal virtual if < throw new else if >= throw new public override public override if != throw new else if >= - throw new ++ if != = + + = + + - + if == return - else return + public override public override if == return - else return + public override public override if == return - else return + + + if == || == return else return public override public override return public override public override return public override public override if == - && == || return = else return = public override public override return public override public override return private static private static return public override public override return call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.RamBytesUsed() call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.RamBytesUsed() call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.RamBytesUsed() call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.RamBytesUsed() call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.RamBytesUsed() public override public override if >=