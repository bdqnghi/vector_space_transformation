Lucene.Net.Index System using Lucene.Net.Support using Lucene.Net.Util using Lucene.Net.Util.Cache using Lucene.Net.Store.Directory class Lucene.Net.Index.TermInfosReader super super IDisposable bool FieldInfos int SegmentTermEnum decl Term decl CloseableThreadLocal int Directory decl TermInfo decl long String long return return public public if return if != call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call decl CloseableThreadLocal.Dispose() call decl CloseableThreadLocal.Dispose() call decl CloseableThreadLocal.Dispose() call decl CloseableThreadLocal.Dispose() call decl CloseableThreadLocal.Dispose() = internal internal return ThreadResources private private decl_stmt ThreadResources = call decl CloseableThreadLocal.Get() call decl CloseableThreadLocal.Get() call decl CloseableThreadLocal.Get() call decl CloseableThreadLocal.Get() call decl CloseableThreadLocal.Get() if == = new = = new < call decl CloseableThreadLocal.Set() call decl CloseableThreadLocal.Set() call decl CloseableThreadLocal.Set() call decl CloseableThreadLocal.Set() call decl CloseableThreadLocal.Set() return int int int int private private decl_stmt int = decl_stmt int = - while >= decl_stmt int = + decl_stmt int = if < = - else if > = + else return return private private long * - internal internal return int SegmentTermEnum decl Cache int TermInfo ThreadResources private private if == return decl_stmt Lucene.Net.Codecs.Lucene3x.TermInfo decl_stmt ThreadResources = decl_stmt Lucene.Net.Util.Cache.Cache < = if = = call decl Cache.Get() call decl Cache.Get() call decl Cache.Get() call decl Cache.Get() call decl Cache.Get() if != return decl_stmt Lucene.Net.Codecs.Lucene3x.SegmentTermEnum = if != && call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Prev() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Prev() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Prev() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Prev() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Prev() != && call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Prev() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Prev() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Prev() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Prev() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Prev() > || >= decl_stmt int = / + if == || < decl_stmt int = call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.ScanTo(Term) call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.ScanTo(Term) call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.ScanTo(Term) call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.ScanTo(Term) call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.ScanTo(Term) if != && == = call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.TermInfo() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.TermInfo() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.TermInfo() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.TermInfo() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.TermInfo() if != && > call decl Cache.Put() call decl Cache.Put() call decl Cache.Put() call decl Cache.Put() call decl Cache.Put() else = return call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.ScanTo(Term) call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.ScanTo(Term) call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.ScanTo(Term) call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.ScanTo(Term) call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.ScanTo(Term) if != && == = call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.TermInfo() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.TermInfo() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.TermInfo() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.TermInfo() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.TermInfo() if != call decl Cache.Put() call decl Cache.Put() call decl Cache.Put() call decl Cache.Put() call decl Cache.Put() else = return private private if == throw new SegmentTermEnum int internal internal if == return - decl_stmt int = decl_stmt Lucene.Net.Codecs.Lucene3x.SegmentTermEnum = while > && call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Next() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Next() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Next() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Next() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Next() if == return else return - public public return call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Clone() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Clone() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Clone() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Clone() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Clone() public public return