org.apache.lucene.analysis.synonym System using System.Diagnostics using System.Collections.Generic using System.Text using org.apache.lucene.analysis.core.KeywordTokenizer org.apache.lucene.analysis.tokenattributes using org.apache.lucene.util.CharsRef org.apache.lucene.util.TestUtil class org.apache.lucene.analysis.synonym.TestSynonymMapFilter super super BaseTokenStreamTestCase PositionIncrementAttribute decl SynonymMap CharTermAttribute decl Builder Tokenizer SynonymFilter PositionLengthAttribute CharsRef CharsRef private private if + + + + + decl_stmt Lucene.Net.Util.CharsRef = new decl_stmt Lucene.Net.Util.CharsRef = new call decl SynonymMap.add() call decl SynonymMap.add() call decl SynonymMap.add() call decl SynonymMap.add() call decl SynonymMap.add() decl char private private decl_stmt char = for = < ++ int int int int int int int decl string string decl string private private if + + + = new call Tokenizer.reset() call Tokenizer.reset() call Tokenizer.reset() call Tokenizer.reset() call Tokenizer.reset() decl_stmt string = decl_stmt int = while call Tokenizer.incrementToken() call Tokenizer.incrementToken() call Tokenizer.incrementToken() call Tokenizer.incrementToken() call Tokenizer.incrementToken() if + call SynonymFilter.ToString() call SynonymFilter.ToString() call SynonymFilter.ToString() call SynonymFilter.ToString() call SynonymFilter.ToString() + + + + call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() + + call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() < decl_stmt int = call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() decl_stmt int = call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() decl_stmt string = ++ for = < ++ if > call Tokenizer.incrementToken() call Tokenizer.incrementToken() call Tokenizer.incrementToken() call Tokenizer.incrementToken() call Tokenizer.incrementToken() if + call SynonymFilter.ToString() call SynonymFilter.ToString() call SynonymFilter.ToString() call SynonymFilter.ToString() call SynonymFilter.ToString() + + + + call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() + + call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() decl_stmt int = decl_stmt int = decl_stmt string decl_stmt int decl_stmt int if != - = if != - = + - + = + else = + = else = = = call SynonymFilter.ToString() call SynonymFilter.ToString() call SynonymFilter.ToString() call SynonymFilter.ToString() call SynonymFilter.ToString() == : call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.startOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call PositionLengthAttribute.endOffset() call Tokenizer.end() call Tokenizer.end() call Tokenizer.end() call Tokenizer.end() call Tokenizer.end() call Tokenizer.close() call Tokenizer.close() call Tokenizer.close() call Tokenizer.close() call Tokenizer.close() if SynonymMap Analyzer public virtual public virtual = new decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt Lucene.Net.Analysis.Analyzer = new new new new new new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new SynonymMap Analyzer public virtual public virtual = new decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt Lucene.Net.Analysis.Analyzer = new new new new new new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new public virtual public virtual = new = new new call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() = new call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof > decl char private private <= decl_stmt char = new * for = < ++ * = + * + = return new int int decl OneSyn decl string decl bool OneSyn bool int int decl string int OneSyn decl bool decl string StringBuilder int int int int public virtual public virtual < == decl_stmt int = / decl_stmt bool = new decl_stmt bool = new decl_stmt string = new + decl_stmt OneSyn = new foreach in decl_stmt int = - while = + if == - break == decl_stmt int = / == if == = else if > = else < for = < ++ decl_stmt OneSyn = if != decl_stmt int = + / for = + < && < + ++ = for = < ++ decl_stmt OneSyn = if == continue for = < + / ++ + = + |= foreach in decl_stmt string = + / decl_stmt int = + decl_stmt int = for = < ++ if == = ++ else = + + ++ decl_stmt int if < decl_stmt int if == = * + = + / : else = * + = = + + + + decl_stmt System.Text.StringBuilder = new decl_stmt string = decl_stmt int = + for = < ++ decl_stmt bool = if >= && == break if < && ! || != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = if != if call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if ! continue if < - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) string decl IDictionary bool int OneSyn int int string string decl IList string public virtual public virtual decl_stmt int = decl_stmt int = decl_stmt string = if + decl_stmt int = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < decl_stmt System.Collections.Generic.IList < = new < decl_stmt bool = if + = new for = < ++ decl_stmt string = decl_stmt OneSyn = if == = new = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = new <> = = decl_stmt string = call OneSyn.out() call OneSyn.out() call OneSyn.out() call OneSyn.out() call OneSyn.out() call OneSyn.out() call OneSyn.out() call OneSyn.out() call OneSyn.out() if + + + + + + + = new new call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() = new call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof if decl_stmt string = if + string decl ISet int private private < decl_stmt System.Collections.Generic.ISet < = new < foreach in decl_stmt int = while < decl_stmt string = if ! call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() ++ else call decl ISet.Clear() call decl ISet.Clear() call decl ISet.Clear() call decl ISet.Clear() call decl ISet.Clear() string private private while decl_stmt string = if != && call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() == - return bool SynonymMap int int Analyzer public virtual public virtual decl_stmt int = for = < ++ = new decl_stmt int = for = < ++ decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt bool = decl_stmt Lucene.Net.Analysis.Analyzer = new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new SynonymMap int Random Analyzer bool int public virtual public virtual decl_stmt int = decl_stmt System.Random = for = < ++ = new call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() decl_stmt int = for = < ++ call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt bool = call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() decl_stmt Lucene.Net.Analysis.Analyzer = new TokenStream TokenStream Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new decl_stmt Lucene.Net.Analysis.TokenStream = new decl_stmt Lucene.Net.Analysis.TokenStream = new return new SynonymMap int Random Analyzer bool int public virtual public virtual decl_stmt System.Random = decl_stmt int = for = < ++ = new call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() decl_stmt int = for = < ++ call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt bool = call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() decl_stmt Lucene.Net.Analysis.Analyzer = new call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new SynonymMap int Random Analyzer bool int public virtual public virtual decl_stmt System.Random = decl_stmt int = for = < ++ = new call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() decl_stmt int = if + + + for = < ++ call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt bool = call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() call Random.nextBoolean() decl_stmt Lucene.Net.Analysis.Analyzer = new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new SynonymMap SolrSynonymParser Analyzer string public virtual public virtual decl_stmt string = + decl_stmt Lucene.Net.Analysis.Synonym.SolrSynonymParser = new new call SolrSynonymParser.parse() call SolrSynonymParser.parse() call SolrSynonymParser.parse() call SolrSynonymParser.parse() call SolrSynonymParser.parse() new decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call SolrSynonymParser.build() call SolrSynonymParser.build() call SolrSynonymParser.build() call SolrSynonymParser.build() call SolrSynonymParser.build() decl_stmt Lucene.Net.Analysis.Analyzer = new new new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new bool public virtual public virtual = new decl_stmt bool const const = = new new call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() = new call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof if else Analyzer SynonymMap bool public virtual public virtual = new decl_stmt bool const const = decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt Lucene.Net.Analysis.Analyzer = new new new new new new new new new new new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new Analyzer SynonymMap bool public virtual public virtual = new decl_stmt bool const const = decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt Lucene.Net.Analysis.Analyzer = new new new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new Analyzer SynonymMap bool public virtual public virtual = new decl_stmt bool const const = decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt Lucene.Net.Analysis.Analyzer = new new new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new Analyzer SynonymMap bool public virtual public virtual = new decl_stmt bool const const = decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt Lucene.Net.Analysis.Analyzer = new new new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new Analyzer SynonymMap bool public virtual public virtual = new decl_stmt bool const const = decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt Lucene.Net.Analysis.Analyzer = new new new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new bool public virtual public virtual = new decl_stmt bool const const = = new new call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.reset() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.incrementToken() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.end() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() call decl Builder.close() = new call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof = call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() call Tokenizer.addAttribute() typeof Analyzer SynonymMap bool public virtual public virtual = new decl_stmt bool const const = decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt Lucene.Net.Analysis.Analyzer = new new new new new new new new new new new new new new new new new new new new new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new Analyzer SynonymMap bool public virtual public virtual = new decl_stmt bool const const = decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt Lucene.Net.Analysis.Analyzer = new new new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new Analyzer SynonymMap bool public virtual public virtual = new decl_stmt bool const const = decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt Lucene.Net.Analysis.Analyzer = new new new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new Analyzer SynonymMap bool public virtual public virtual = new decl_stmt bool const const = decl_stmt Lucene.Net.Analysis.Synonym.SynonymMap = call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() call decl SynonymMap.build() decl_stmt Lucene.Net.Analysis.Analyzer = new new new new new Tokenizer protected internal override protected internal override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new Tokenizer public virtual public virtual decl_stmt Lucene.Net.Analysis.Tokenizer = new new try new new catch