Lucene.Net.Codecs.Lucene40 System using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Store.DataInput Lucene.Net.Store.Directory Lucene.Net.Index.DocsAndPositionsEnum Lucene.Net.Index.DocsEnum Lucene.Net.Index.FieldInfo Lucene.Net.Index.FieldInfos Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexInput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Index.SegmentInfo Lucene.Net.Index.TermState class attribute Lucene.Net.Codecs.Lucene40.Lucene40PostingsReader super super PostingsReaderBase int int IndexInput string int IndexInput int string int int string int public override public override = = = StandardTermState public override public override decl_stmt StandardTermState = new call StandardTermState.CopyFrom() call StandardTermState.CopyFrom() call StandardTermState.CopyFrom() call StandardTermState.CopyFrom() call StandardTermState.CopyFrom() return StandardTermState public override public override decl_stmt StandardTermState = = = = public override public override return + + + + + + public override public override return new protected override protected override if try if != call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() finally if != call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() StandardTermState bool public override public override decl_stmt StandardTermState = decl_stmt bool = == if = = += < call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() if >= = + < call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() else if >= += public override public override if return return SegmentDocsEnumBase private private if != && is decl_stmt SegmentDocsEnumBase = if == return == return private private if == return new else return new bool SegmentDocsAndPositionsEnum public override public override decl_stmt bool = >= if || decl_stmt SegmentFullPositionsEnum if == || ! is = new else = if != = new return call SegmentDocsAndPositionsEnum.Reset() call SegmentDocsAndPositionsEnum.Reset() call SegmentDocsAndPositionsEnum.Reset() call SegmentDocsAndPositionsEnum.Reset() call SegmentDocsAndPositionsEnum.Reset() else decl_stmt SegmentDocsAndPositionsEnum if == || ! is = new else = if != = new return call SegmentDocsAndPositionsEnum.Reset() call SegmentDocsAndPositionsEnum.Reset() call SegmentDocsAndPositionsEnum.Reset() call SegmentDocsAndPositionsEnum.Reset() call SegmentDocsAndPositionsEnum.Reset() internal virtual internal virtual = == = = >= = = call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() = > = = - = = = - = = if = - return public override sealed public override sealed return public override sealed public override sealed return public override sealed public override sealed if ++ < && >= if - > = - return else return = return = int int internal internal while <= decl_stmt int = + >> decl_stmt int = if < = + else if > = - else = break return - internal internal if & != return else return int int protected internal protected internal decl_stmt int = = = - if == return decl_stmt int = - += if = else = = > - : return IndexInput int decl int internal internal decl_stmt Lucene.Net.Store.IndexInput = decl_stmt int = decl_stmt int = for = < ++ += call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = = return int IndexInput int decl int decl int internal internal decl_stmt Lucene.Net.Store.IndexInput = decl_stmt int = decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() += uint >> = = = return int internal internal if - >= && >= if == = new call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() if ! + = decl_stmt int = if > = = call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() return public override public override return public override public override if ++ < = return = return = int decl int int protected internal override protected internal override decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = if <= = = return = return = int int bool IndexInput int int protected internal override protected internal override decl_stmt int = decl_stmt int = decl_stmt Lucene.Net.Store.IndexInput = decl_stmt bool = decl_stmt int = for = < ++ decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if += else += uint >> = if >= = = + return = = = = return int protected internal override protected internal override if ++ < decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if += else += uint >> = return else return int Bits public override public override decl_stmt Lucene.Net.Spatial.Util.Bits = for = + < ++ decl_stmt int = if call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() = = return = = return = int decl int int Bits protected internal override protected internal override decl_stmt int = decl_stmt int = decl_stmt Lucene.Net.Spatial.Util.Bits = for = < ++ decl_stmt int = if <= && call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() = = return = return = int int Bits bool IndexInput int int protected internal override protected internal override decl_stmt int = decl_stmt int = decl_stmt Lucene.Net.Store.IndexInput = decl_stmt bool = decl_stmt int = decl_stmt Lucene.Net.Spatial.Util.Bits = for = < ++ decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if += else += uint >> = if >= && call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() = = + return = = = = return int int Bits bool IndexInput int int protected internal override protected internal override decl_stmt int = decl_stmt int = decl_stmt Lucene.Net.Store.IndexInput = decl_stmt bool = decl_stmt int = decl_stmt Lucene.Net.Spatial.Util.Bits = for = < ++ decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if += else += uint >> = if call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() = = + return = = = = return public public == ! = call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() = = > = = - = = = = = = = return int public override public override while if == return = ++ decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() += uint >> if & != = else = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() += if == || break = return = public override public override return public override public override return int public override public override if - >= && >= if == = new call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() if ! + = decl_stmt int = if > = = = call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() = = = do > return public override public override if != - call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() = - if > = while != if call IndexInput.ReadByte() call IndexInput.ReadByte() call IndexInput.ReadByte() call IndexInput.ReadByte() call IndexInput.ReadByte() & == -- += call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() -- >= + return public override public override return - public override public override return - return public override public override return public virtual public virtual = >= = >= || if == = new = new = call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() = = = = - = = = = = = = = = return int public override public override while if == return = ++ decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() += uint >> if & != = else = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() += if == || break = = return = public override public override return public override public override return int public override public override if - >= && >= if == = new call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() if ! + = decl_stmt int = if > = = = call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() = = = = = = = do > return int int int public override public override if != - call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() = - if && > call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() + = while > decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if if & != = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() >= != - if if call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() & != = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() + -- = = = if && > call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() + decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if if & != = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() >= != - = = uint >> += if decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if & != = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() += uint >> -- >= + return public override public override return : - public override public override return + : - if if <= return == - < if if > call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() = = return else return public override public override return public override public override return public override public override