Lucene.Net.Facet.Taxonomy.WriterCache System using System.Collections.Generic using System.IO using Lucene.Net.Store using class Lucene.Net.Facet.Taxonomy.WriterCache.CompactLabelToOrdinal super super LabelToOrdinal char decl HashArray CharBlockArray int CollisionMap float int int float public virtual public virtual return int internal static internal static decl_stmt int = while < <<= return int private private = new new decl_stmt int = for = < ++ = new /= int int public override public override if call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.Size() call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.Size() call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.Size() call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.Size() call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.Size() > decl_stmt int = for = < ++ if return decl_stmt int = call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.AddLabel(FacetLabel,int,int) call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.AddLabel(FacetLabel,int,int) call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.AddLabel(FacetLabel,int,int) call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.AddLabel(FacetLabel,int,int) call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.AddLabel(FacetLabel,int,int) if != throw new + + + int int public override public override if == return decl_stmt int = for = < ++ decl_stmt int = if != return return decl int int HashArray var decl int int decl int var CollisionMap decl int int private private decl_stmt HashArray = - for = - > -- = - *= = new for = < ++ decl_stmt int = decl_stmt int = for = < ++ for = < && != ++ decl_stmt int = decl_stmt int = decl_stmt int = if == = = = for = < ++ decl_stmt int = if > decl_stmt int = decl_stmt Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap = = new call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.Capacity() call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.Capacity() call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.Capacity() call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.Capacity() call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.Capacity() = * decl_stmt var = call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.entryIterator() call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.entryIterator() call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.entryIterator() call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.entryIterator() call Lucene.Net.Facet.Taxonomy.WriterCache.CollisionMap.entryIterator() while call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() decl_stmt var = int int private private decl_stmt int = decl_stmt int = if == = = return return private private for = < ++ if return if > int int private private decl_stmt int = decl_stmt int = if == = = return return int int private private if == return decl_stmt int = decl_stmt int = if == return if return return internal static internal static return & - int internal static internal static decl_stmt int = = ^ uint >> ^ uint >> = ^ uint >> ^ uint >> return int internal static internal static decl_stmt int = = ^ uint >> ^ uint >> = ^ uint >> ^ uint >> return int int int decl_stmt int = if != foreach in += * * + if != decl_stmt int = decl_stmt int = * + += * += if != += return int int int CompactLabelToOrdinal int int int BinaryReader public static public static decl_stmt Lucene.Net.Facet.Taxonomy.WriterCache.CompactLabelToOrdinal = new = = new decl_stmt System.IO.BinaryReader = try = new new = call System.IO.BinaryReader.ReadInt32() call System.IO.BinaryReader.ReadInt32() call System.IO.BinaryReader.ReadInt32() call System.IO.BinaryReader.ReadInt32() call System.IO.BinaryReader.ReadInt32() = int call Lucene.Net.Facet.Taxonomy.WriterCache.CompactLabelToOrdinal.Init() call Lucene.Net.Facet.Taxonomy.WriterCache.CompactLabelToOrdinal.Init() call Lucene.Net.Facet.Taxonomy.WriterCache.CompactLabelToOrdinal.Init() call Lucene.Net.Facet.Taxonomy.WriterCache.CompactLabelToOrdinal.Init() call Lucene.Net.Facet.Taxonomy.WriterCache.CompactLabelToOrdinal.Init() = = new decl_stmt int = decl_stmt int = decl_stmt int = while < decl_stmt int = short call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() ++ decl_stmt int = if != for = < ++ decl_stmt int = short call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() ++ = * + call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() call CompactLabelToOrdinal.labelRepository() + += = ^ uint >> ^ uint >> = ^ uint >> ^ uint >> call Lucene.Net.Facet.Taxonomy.WriterCache.CompactLabelToOrdinal.AddLabelOffset(int,int,int) call Lucene.Net.Facet.Taxonomy.WriterCache.CompactLabelToOrdinal.AddLabelOffset(int,int,int) call Lucene.Net.Facet.Taxonomy.WriterCache.CompactLabelToOrdinal.AddLabelOffset(int,int,int) call Lucene.Net.Facet.Taxonomy.WriterCache.CompactLabelToOrdinal.AddLabelOffset(int,int,int) call Lucene.Net.Facet.Taxonomy.WriterCache.CompactLabelToOrdinal.AddLabelOffset(int,int,int) ++ = catch throw new finally if != call System.IO.BinaryReader.Dispose(bool) call System.IO.BinaryReader.Dispose(bool) call System.IO.BinaryReader.Dispose(bool) call System.IO.BinaryReader.Dispose(bool) call System.IO.BinaryReader.Dispose(bool) = * return OutputStreamDataOutput public virtual public virtual decl_stmt Lucene.Net.Store.OutputStreamDataOutput = new try call OutputStreamDataOutput.WriteInt() call OutputStreamDataOutput.WriteInt() call OutputStreamDataOutput.WriteInt() call OutputStreamDataOutput.WriteInt() call OutputStreamDataOutput.WriteInt() call Lucene.Net.Store.OutputStreamDataOutput.Dispose() call Lucene.Net.Store.OutputStreamDataOutput.Dispose() call Lucene.Net.Store.OutputStreamDataOutput.Dispose() call Lucene.Net.Store.OutputStreamDataOutput.Dispose() call Lucene.Net.Store.OutputStreamDataOutput.Dispose() finally call Lucene.Net.Store.OutputStreamDataOutput.Dispose() call Lucene.Net.Store.OutputStreamDataOutput.Dispose() call Lucene.Net.Store.OutputStreamDataOutput.Dispose() call Lucene.Net.Store.OutputStreamDataOutput.Dispose() call Lucene.Net.Store.OutputStreamDataOutput.Dispose()