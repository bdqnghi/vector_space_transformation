Lucene.Net.Analysis.Miscellaneous Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Index using class Lucene.Net.Analysis.Miscellaneous.PrefixAwareTokenFilter super super TokenStream ITypeAttribute Token IOffsetAttribute IOffsetAttribute IPayloadAttribute Token IPayloadAttribute bool IFlagsAttribute ITermAttribute ITypeAttribute IPositionIncrementAttribute IPositionIncrementAttribute IFlagsAttribute ITermAttribute Token Payload Token public override sealed public override sealed if ! decl_stmt Lucene.Net.Analysis.Token = if == = else call Lucene.Net.Analysis.Token.Reinit(char,int,int,int,int) call Lucene.Net.Analysis.Token.Reinit(char,int,int,int,int) call Lucene.Net.Analysis.Token.Reinit(char,int,int,int,int) call Lucene.Net.Analysis.Token.Reinit(char,int,int,int,int) call Lucene.Net.Analysis.Token.Reinit(char,int,int,int,int) decl_stmt Lucene.Net.Index.Payload = if != = call Lucene.Net.Index.Payload.Clone() call Lucene.Net.Index.Payload.Clone() call Lucene.Net.Index.Payload.Clone() call Lucene.Net.Index.Payload.Clone() call Lucene.Net.Index.Payload.Clone() return decl_stmt Lucene.Net.Analysis.Token = if == return = return private private if == return call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) = = call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) = = private private if ! return call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() = = = = return private private if ! return call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() = = = = return public virtual public virtual = + = + return protected override protected override public override public override if != = if !=