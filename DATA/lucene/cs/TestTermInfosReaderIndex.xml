Lucene.Net.Codecs.Lucene3x System using System.Collections.Generic using Lucene.Net.Documents using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Store.Directory Lucene.Net.Index.DirectoryReader Documents.Document Field Lucene.Net.Index.FieldInfos Lucene.Net.Index.Fields Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexInput Lucene.Net.Index.IndexReader Lucene.Net.Search.IndexSearcher Lucene.Net.Index.IndexWriterConfig Lucene.Net.Store.IOContext Lucene.Net.Index.LogMergePolicy Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Analysis.MockTokenizer Lucene.Net.Index.MultiFields Lucene.Net.Index.RandomIndexWriter Lucene.Net.Index.SegmentReader Lucene.Net.Index.Term Lucene.Net.Search.TermQuery Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum Lucene.Net.Util.TestUtil Lucene.Net.Search.TopDocs class attribute Lucene.Net.Codecs.Lucene3x.TestTermInfosReaderIndex super super LuceneTestCase int TermInfosReaderIndex decl IList int IndexReader Directory SegmentTermEnum int int FieldInfosReader DirectoryReader string int string SegmentReader LogMergePolicy FieldInfos IndexInput SegmentTermEnum IndexWriterConfig long public static public static = decl_stmt Lucene.Net.Index.IndexWriterConfig = new = = = = * * / = call Lucene.Net.Index.IndexWriterConfig.SetCodec(Codec) call Lucene.Net.Index.IndexWriterConfig.SetCodec(Codec) call Lucene.Net.Index.IndexWriterConfig.SetCodec(Codec) call Lucene.Net.Index.IndexWriterConfig.SetCodec(Codec) call Lucene.Net.Index.IndexWriterConfig.SetCodec(Codec) new decl_stmt Lucene.Net.Index.LogMergePolicy = = call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt Lucene.Net.Index.SegmentReader = decl_stmt string = call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() decl_stmt FieldInfosReader = new decl_stmt Lucene.Net.Index.FieldInfos = call FieldInfosReader.Read() call FieldInfosReader.Read() call FieldInfosReader.Read() call FieldInfosReader.Read() call FieldInfosReader.Read() decl_stmt string = decl_stmt long = call Directory.FileLength() call Directory.FileLength() call Directory.FileLength() call Directory.FileLength() call Directory.FileLength() decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() = new call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() decl_stmt int = * decl_stmt Lucene.Net.Codecs.Lucene3x.SegmentTermEnum = new = new call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() = = public static public static call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() = = = = = int SegmentTermEnum SegmentTermEnum Term public virtual public virtual decl_stmt int = decl_stmt Lucene.Net.Codecs.Lucene3x.SegmentTermEnum = call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Clone() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Clone() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Clone() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Clone() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Clone() decl_stmt Lucene.Net.Index.Term = decl_stmt Lucene.Net.Codecs.Lucene3x.SegmentTermEnum = call TermInfosReaderIndex.SeekEnum() call TermInfosReaderIndex.SeekEnum() call TermInfosReaderIndex.SeekEnum() call TermInfosReaderIndex.SeekEnum() call TermInfosReaderIndex.SeekEnum() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Term() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Term() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Term() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Term() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Term() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() call Lucene.Net.Codecs.Lucene3x.SegmentTermEnum.Dispose() Term Term int public virtual public virtual decl_stmt Lucene.Net.Index.Term = new + for = < call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.Length() call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.Length() call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.Length() call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.Length() call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.Length() ++ decl_stmt Lucene.Net.Index.Term = call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.GetTerm(int) call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.GetTerm(int) call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.GetTerm(int) call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.GetTerm(int) call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.GetTerm(int) decl_stmt int = call Lucene.Net.Index.Term.CompareTo(Term) call Lucene.Net.Index.Term.CompareTo(Term) call Lucene.Net.Index.Term.CompareTo(Term) call Lucene.Net.Index.Term.CompareTo(Term) call Lucene.Net.Index.Term.CompareTo(Term) call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.CompareTo(Term,int) call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.CompareTo(Term,int) call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.CompareTo(Term,int) call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.CompareTo(Term,int) call Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex.CompareTo(Term,int) IndexSearcher TopDocs TermQuery public virtual public virtual decl_stmt Lucene.Net.Search.IndexSearcher = new foreach in decl_stmt Lucene.Net.Search.TermQuery = new decl_stmt Lucene.Net.Search.TopDocs = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) > decl IList Fields Terms int TermsEnum private static < private static < decl_stmt System.Collections.Generic.IList < = new < decl_stmt Lucene.Net.Index.Fields = foreach in decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() while call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != if >= decl_stmt int = = new call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() else call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() = return Term int private private decl_stmt int = * * for = < ++ decl_stmt Lucene.Net.Index.Term = return RandomIndexWriter Document private static private static decl_stmt Lucene.Net.Index.RandomIndexWriter = new for = < ++ decl_stmt Lucene.Net.Documents.Document = new for = < ++ call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) + call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() return