Lucene.Net.Store System using System.Collections.Concurrent using System.Diagnostics using System.Collections.Generic using class Lucene.Net.Store.RateLimitedDirectoryWrapper super super FilterDirectory decl IDictionary var var public override public override decl_stmt var = decl_stmt var = if != return new return public override public override return public override public override RateLimiter private private ? != decl_stmt Lucene.Net.Store.RateLimiter return call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out : RateLimiter public public ? ? if == throw new decl_stmt Lucene.Net.Store.RateLimiter call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if == if != = = else if != = = else = new public public = var public public decl_stmt var = return == :