Lucene.Net.Documents System.Collections using System.Collections.Generic using System.Text using Lucene.Net.Index using Lucene.Net.Search using Lucene.Net.Util using class Lucene.Net.Documents.Document super decl string decl List public < public < return call decl List.GetEnumerator() call decl List.GetEnumerator() call decl List.GetEnumerator() call decl List.GetEnumerator() call decl List.GetEnumerator() return public public call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() IndexableField public public for = - >= -- decl_stmt Lucene.Net.Index.IndexableField = if call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() return IndexableField public public for = - >= -- decl_stmt Lucene.Net.Index.IndexableField = if call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() BytesRef var public public decl_stmt var = new < foreach in if decl_stmt Lucene.Net.Util.BytesRef = if != call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() return call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() BytesRef public public foreach in if decl_stmt Lucene.Net.Util.BytesRef = if != return return public public foreach in if return return var public public decl_stmt var = new < foreach in if call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() return call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() return var public public decl_stmt var = new < foreach in if && != call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if == return return call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() public public foreach in if && != return return var IndexableField public override public override decl_stmt var = new call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() for = < ++ decl_stmt Lucene.Net.Index.IndexableField = call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call IndexableField.ToString() call IndexableField.ToString() call IndexableField.ToString() call IndexableField.ToString() call IndexableField.ToString() if != - call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString()