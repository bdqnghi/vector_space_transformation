Lucene.Net.Index System.Collections.Concurrent using System.Collections.Generic using System.Diagnostics using System.Linq using Lucene.Net.Util using Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef class Lucene.Net.Index.MultiFields super super Fields decl ReaderSlice decl Fields decl IDictionary decl IList var AtomicReader Fields decl IList public static public static decl_stmt var = switch case return case return default: decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < foreach in decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.Fields = if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new - if == return else if == return else return new call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() decl int decl IList var AtomicReaderContext int public static public static if decl_stmt System.Collections.Generic.IList < = decl_stmt int = > if == return decl_stmt var = new decl_stmt int = new + for = < ++ decl_stmt Lucene.Net.Index.AtomicReaderContext = = = = return new else return Fields public static public static decl_stmt Lucene.Net.Index.Fields = if == return else return call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() public static public static return Terms TermsEnum public static public static != != decl_stmt Lucene.Net.Index.Terms = if != decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) return call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) return public static public static return | Terms TermsEnum public static public static != != decl_stmt Lucene.Net.Index.Terms = if != decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) return call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) return public override < public override < for = < ++ = return new < Terms decl IList Terms decl IList public override public override decl_stmt Lucene.Net.Index.Terms call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if != return decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < for = < ++ decl_stmt Lucene.Net.Index.Terms = if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if == = else = new call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() = return return - var public static public static decl_stmt var = new foreach in call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() return call var.Finish() call var.Finish() call var.Finish() call var.Finish() call var.Finish() decl ICollection public static < public static < decl_stmt System.Collections.Generic.ICollection < = new < foreach in if call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() return