Lucene.Net.Index Apache.NMS.Util using System using System.Collections.Concurrent using System.Collections.Generic using System.Text using Lucene.Net.Documents using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Documents.Document Field FieldType Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Util.TestUtil class attribute Lucene.Net.Index.TestBagOfPositions super super LuceneTestCase comment comment Random BytesRef DirectoryReader RandomIndexWriter int Terms bool Field int Document decl ConcurrentQueue IndexWriterConfig CountDownLatch decl ThreadClass FieldType int string Field TermsEnum int AtomicReader decl IList int Directory public virtual public virtual decl_stmt System.Collections.Generic.IList < = new < decl_stmt int = decl_stmt int = decl_stmt bool = decl_stmt Lucene.Net.Index.IndexWriterConfig = new if || is && || > /= if + + for = < ++ decl_stmt string = for = < ++ call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = decl_stmt System.Threading.Tasks.Dataflow.Internal.Collections.ConcurrentQueue < = new < decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt int = if + + decl_stmt Lucene.Net.Documents.Field = decl_stmt Lucene.Net.Documents.FieldType = new call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() if = decl_stmt int = if == = = else if == && ! = decl_stmt Lucene.Net.Support.ThreadClass = new decl_stmt CountDownLatch = new for = < ++ decl_stmt System.Random = new decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.Field = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) = new call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() foreach in call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) - call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt Lucene.Net.Util.BytesRef while = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != decl_stmt int = call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() StringBuilder string int public override public override try while ! == decl_stmt System.Text.StringBuilder = new decl_stmt int = for = < ++ decl_stmt string if ! out break call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) catch throw new