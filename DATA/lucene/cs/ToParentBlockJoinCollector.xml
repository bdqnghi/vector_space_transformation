Lucene.Net.Join System using System.Collections.Concurrent using System.Collections.Generic using System.Diagnostics using System.IO using Lucene.Net.Grouping using Lucene.Net.Index using Lucene.Net.Search using Lucene.Net.Support using Lucene.Net.Util using class Lucene.Net.Join.ToParentBlockJoinCollector super super Collector Sort float OneGroup int int Scorer decl ToParentBlockJoinQuery int bool bool decl BlockJoinScorer decl FieldValueHitQueue bool AtomicReaderContext decl IDictionary decl int int decl FieldComparator OneGroup int float int public override public override ++ decl_stmt float = if = call AtomicReaderContext.Score() call AtomicReaderContext.Score() call AtomicReaderContext.Score() call AtomicReaderContext.Score() call AtomicReaderContext.Score() = if for = ++ decl_stmt int = * if < return if > break if == return for = < ++ if ! && = call AtomicReaderContext.Score() call AtomicReaderContext.Score() call AtomicReaderContext.Score() call AtomicReaderContext.Score() call AtomicReaderContext.Score() = + = = = call decl FieldValueHitQueue.UpdateTop() call decl FieldValueHitQueue.UpdateTop() call decl FieldValueHitQueue.UpdateTop() call decl FieldValueHitQueue.UpdateTop() call decl FieldValueHitQueue.UpdateTop() for = < ++ = else decl_stmt int = - for = < ++ if ! && = call AtomicReaderContext.Score() call AtomicReaderContext.Score() call AtomicReaderContext.Score() call AtomicReaderContext.Score() call AtomicReaderContext.Score() decl_stmt OneGroup = new + = = call decl FieldValueHitQueue.Add() call decl FieldValueHitQueue.Add() call decl FieldValueHitQueue.Add() call decl FieldValueHitQueue.Add() call decl FieldValueHitQueue.Add() = == if for = < ++ = int decl ToParentBlockJoinQuery private private decl_stmt int = if < = if < = if && < = for = < ++ decl_stmt BlockJoinScorer = if != && + == = = call decl ToParentBlockJoinQuery.SwapChildDocs() call decl ToParentBlockJoinQuery.SwapChildDocs() call decl ToParentBlockJoinQuery.SwapChildDocs() call decl ToParentBlockJoinQuery.SwapChildDocs() call decl ToParentBlockJoinQuery.SwapChildDocs() >= + + + if = call decl ToParentBlockJoinQuery.SwapChildScores() call decl ToParentBlockJoinQuery.SwapChildScores() call decl ToParentBlockJoinQuery.SwapChildScores() call decl ToParentBlockJoinQuery.SwapChildScores() call decl ToParentBlockJoinQuery.SwapChildScores() >= + + + else = = = for = < ++ call decl FieldValueHitQueue.SetComparator() call decl FieldValueHitQueue.SetComparator() call decl FieldValueHitQueue.SetComparator() call decl FieldValueHitQueue.SetComparator() call decl FieldValueHitQueue.SetComparator() public override public override return int decl ToParentBlockJoinQuery private private call AtomicReaderContext.TrackPendingChildHits() call AtomicReaderContext.TrackPendingChildHits() call AtomicReaderContext.TrackPendingChildHits() call AtomicReaderContext.TrackPendingChildHits() call AtomicReaderContext.TrackPendingChildHits() decl_stmt int ? if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out int = else = decl_stmt BlockJoinScorer = new + = - = var = new for = < ++ = decl_stmt var = new < call var.Enqueue() call var.Enqueue() call var.Enqueue() call var.Enqueue() call var.Enqueue() while call var.TryDequeue() call var.TryDequeue() call var.TryDequeue() call var.TryDequeue() call var.TryDequeue() out if is foreach in call var.Enqueue() call var.Enqueue() call var.Enqueue() call var.Enqueue() call var.Enqueue() private private = new call decl FieldValueHitQueue.Size() call decl FieldValueHitQueue.Size() call decl FieldValueHitQueue.Size() call decl FieldValueHitQueue.Size() call decl FieldValueHitQueue.Size() for = call decl FieldValueHitQueue.Size() call decl FieldValueHitQueue.Size() call decl FieldValueHitQueue.Size() call decl FieldValueHitQueue.Size() call decl FieldValueHitQueue.Size() - >= -- = call decl FieldValueHitQueue.Pop() call decl FieldValueHitQueue.Pop() call decl FieldValueHitQueue.Pop() call decl FieldValueHitQueue.Pop() call decl FieldValueHitQueue.Pop() int public virtual < public virtual < decl_stmt int ? if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if == return if == if >= call decl FieldValueHitQueue.Size() call decl FieldValueHitQueue.Size() call decl FieldValueHitQueue.Size() call decl FieldValueHitQueue.Size() call decl FieldValueHitQueue.Size() return else if > return return == - : int decl object TopDocs OneGroup int int int var int var var Collector private < private < decl_stmt var = new < - decl_stmt var = new decl_stmt int = for = < ++ decl_stmt OneGroup = decl_stmt int if == - || >= = else = decl_stmt int = decl_stmt Collector if == if ! throw new = else = = = for = < ++ decl_stmt int = = if = call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() += decl_stmt object if = new for = < ++ = else = decl_stmt Lucene.Net.Search.TopDocs if == decl_stmt var = = call var.TopDocs() call var.TopDocs() call var.TopDocs() call var.TopDocs() call var.TopDocs() else decl_stmt var = = call var.TopDocs() call var.TopDocs() call var.TopDocs() call var.TopDocs() call var.TopDocs() - = new < return new < new < call Lucene.Net.Search.Sort.GetSort() call Lucene.Net.Search.Sort.GetSort() call Lucene.Net.Search.Sort.GetSort() call Lucene.Net.Search.Sort.GetSort() call Lucene.Net.Search.Sort.GetSort() == : public virtual < public virtual < return return