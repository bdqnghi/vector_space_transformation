Lucene.Net.Analysis.Miscellaneous System using System.Text using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Analysis.Util using Lucene.Net.Util using org.apache.lucene.analysis.miscellaneous using class attribute Lucene.Net.Analysis.Miscellaneous.Lucene47WordDelimiterFilter super super TokenFilter WordDelimiterConcatenation int WordDelimiterIterator int int int int int int string int int CharArraySet int bool int int ITypeAttribute int int WordDelimiterConcatenation int int ICharTermAttribute int IOffsetAttribute int bool decl char bool int IPositionIncrementAttribute bool bool int private private = new = new int int decl char public override public override while if ! if ! return decl_stmt int = decl_stmt char = call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() += call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.setText(char,int) call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.setText(char,int) call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.setText(char,int) call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.setText(char,int) call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.setText(char,int) call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() if == && == || != && call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.CharArraySet.Contains(string) = = return if == && ! if == -- continue = = ! = if = = return if == if ! if return if ! if > call WordDelimiterConcatenation.writeAndClear() call WordDelimiterConcatenation.writeAndClear() call WordDelimiterConcatenation.writeAndClear() call WordDelimiterConcatenation.writeAndClear() call WordDelimiterConcatenation.writeAndClear() return call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() = continue if call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() return decl_stmt int = call WordDelimiterIterator.type() call WordDelimiterIterator.type() call WordDelimiterIterator.type() call WordDelimiterIterator.type() call WordDelimiterIterator.type() if ! && & == if = return = if if = if if call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() return call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() call Lucene.Net.Analysis.Miscellaneous.WordDelimiterIterator.next() public override public override = call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() call WordDelimiterConcatenation.clear() = private private = call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() = call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() = - != = if < = new call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.Buffer() = = private private = if != || ! return return private private return && || && private private return && || && private private if = + - = + int int private private call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) call Lucene.Net.Analysis.Tokenattributes.ICharTermAttribute.CopyBuffer(char,int,int) - decl_stmt int = + decl_stmt int = + if if && <= call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) else call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) else call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) = = int private private decl_stmt int = if = return : = if ! = return = return internal static internal static return & != internal static internal static return & != internal static internal static return & != internal static internal static return & != private private return & != internal internal ++ var private private if < decl_stmt var = = if else = = = return == internal internal = = = = = internal internal