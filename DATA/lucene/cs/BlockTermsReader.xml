Lucene.Net.Codecs.BlockTerms System using System.Collections.Generic using System.Diagnostics using Index using Store using Util using class Lucene.Net.Codecs.BlockTerms.BlockTermsReader super super FieldsProducer PostingsReaderBase IndexInput int long TermsIndexReaderBase decl Dictionary var private private decl_stmt var = if < = return private private if >= - - = else if >= - = public override public override try try if != call TermsIndexReaderBase.Dispose() call TermsIndexReaderBase.Dispose() call TermsIndexReaderBase.Dispose() call TermsIndexReaderBase.Dispose() call TermsIndexReaderBase.Dispose() finally = if != call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() finally if != call PostingsReaderBase.Dispose() call PostingsReaderBase.Dispose() call PostingsReaderBase.Dispose() call PostingsReaderBase.Dispose() call PostingsReaderBase.Dispose() public override < public override < return call decl Dictionary.Keys() call decl Dictionary.Keys() call decl Dictionary.Keys() call decl Dictionary.Keys() call decl Dictionary.Keys() call decl Dictionary.Keys() call decl Dictionary.Keys() call decl Dictionary.Keys() call decl Dictionary.Keys() public override public override != return var public override public override decl_stmt var = != call PostingsReaderBase.RamBytesUsed() call PostingsReaderBase.RamBytesUsed() call PostingsReaderBase.RamBytesUsed() call PostingsReaderBase.RamBytesUsed() call PostingsReaderBase.RamBytesUsed() : += != : return public override public override if >= call PostingsReaderBase.CheckIntegrity() call PostingsReaderBase.CheckIntegrity() call PostingsReaderBase.CheckIntegrity() call PostingsReaderBase.CheckIntegrity() call PostingsReaderBase.CheckIntegrity() return var public override public override decl_stmt var = return call var.Field() call var.Field() call var.Field() call var.Field() call var.Field() call var.Field() call var.Field() call var.Field() call var.Field() && public override public override return new public override public override return * + return public override public override return new public override public override return >= public override public override return >= public override public override return >= public override public override return public override public override return return return return return var var var var var var var var var var public override public override if == throw new decl_stmt var = if decl_stmt var = if == return if < if ! = == - : = if == || < = if call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt var = = = = if = - else if == && ! = return = decl_stmt var = while if < decl_stmt var = & - + & if < if < while < - ++ ++ decl_stmt var = = + if < ++ if ! = return = else if > == decl_stmt var = = + if < return else ++ continue while ++ ++ decl_stmt var = decl_stmt var = + decl_stmt var = decl_stmt var = decl_stmt var = + < : decl_stmt var = + while < decl_stmt var = ++ & - ++ & if < = break if <= continue = + if < return if ! && <= = + if < return == : if == = + if < break if ! = return = var var var var public override public override if ! return ! call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt var = decl_stmt var = decl_stmt var = while < decl_stmt var = != = = return var private private if == && ! = return decl_stmt var = = + if < ++ ++ return public override public override return public override public override return public override public override return public override public override return public override public override if >= return return public override public override is ! || < = = public override public override return var bool var public override public override if == throw new < call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt bool = = = = = = - >= - + decl_stmt var = - while > decl_stmt var = != -- public override public override if ! throw new return int private private = = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if == return = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if < = new call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if < = new call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if == = new = new else if < = new call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() = = ++ = && < return var var private private if ! decl_stmt var = decl_stmt var = == while < = if != = + for = < ++ = ++ =