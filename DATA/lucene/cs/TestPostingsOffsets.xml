Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Linq using Lucene.Net.Documents using Lucene.Net.Search using Lucene.Net.Randomized.Generators using NUnit.Framework using Lucene.Net.Analysis.Analyzer Lucene.Net.Util.BytesRef Lucene.Net.Analysis.CannedTokenStream Lucene.Net.Store.Directory Lucene.Net.Search.DocIdSetIterator Documents.Document Lucene.Net.Util.English Field FieldType IntField Lucene.Net.Util.IOUtils Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Analysis.MockPayloadAnalyzer StringField Lucene.Net.Util.TestUtil TextField Lucene.Net.Analysis.Token Lucene.Net.Analysis.TokenStream class attribute Lucene.Net.Index.TestPostingsOffsets super super LuceneTestCase IndexWriterConfig public override public override = new FieldType Document decl Token IndexReader DocsAndPositionsEnum RandomIndexWriter Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.FieldType = new = if = = = decl_stmt Lucene.Net.Analysis.Token = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new new call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.IndexReader = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() decl_stmt DocsAndPositionsEnum = new call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() = new call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() = new call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public virtual public virtual public virtual public virtual FieldType int int Analyzer BytesRef string int int DocsEnum RandomIndexWriter IndexReader decl string int int int Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Analysis.Analyzer = new : new = call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt Lucene.Net.Documents.FieldType = new = if = = = decl_stmt int = for = < ++ decl_stmt Lucene.Net.Documents.Document = new call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() new call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() new == : call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() new + call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.IndexReader = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() decl_stmt string = new foreach in decl_stmt DocsAndPositionsEnum = new decl_stmt int while = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != decl_stmt string = call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) decl_stmt int = call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() for = < ++ call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() decl_stmt int = call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() >= decl_stmt int = call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() >= && >= call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() - if decl_stmt Lucene.Net.Util.BytesRef = call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() decl_stmt int = for = < ++ decl_stmt int = - decl_stmt DocsAndPositionsEnum = new decl_stmt int = call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() decl_stmt int = call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() for = < ++ decl_stmt string = call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() decl_stmt int = call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() >= decl_stmt int = call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() >= && >= call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() - if decl_stmt Lucene.Net.Util.BytesRef = call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() for = < ++ decl_stmt Lucene.Net.Index.DocsEnum = new + call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() DocsAndPositionsEnum decl FieldCache string int decl IList int decl string AtomicReader Token int decl IDictionary FieldType DocsEnum decl IList int int int decl IDictionary TermsEnum decl Ints int DirectoryReader RandomIndexWriter Directory DocsAndPositionsEnum public virtual public virtual decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < ? < = new < < ? < decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt int = decl_stmt Lucene.Net.Documents.FieldType = new = if = = = for = < ++ decl_stmt Lucene.Net.Documents.Document = new call decl Ints.Add() call decl Ints.Add() call decl Ints.Add() call decl Ints.Add() call decl Ints.Add() new decl_stmt System.Collections.Generic.IList < = new < decl_stmt int = decl_stmt int = - decl_stmt int = for = < ++ decl_stmt string if = else if = else if = else = decl_stmt int = : if == && == = decl_stmt int = : decl_stmt int = decl_stmt Lucene.Net.Analysis.Token = + + + if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() = new < ? < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < ? < = if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() = new < call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() += = + += + call decl Ints.Add() call decl Ints.Add() call decl Ints.Add() call decl Ints.Add() call decl Ints.Add() new new call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.DirectoryReader = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() decl_stmt string = new foreach in decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.TermsEnum = call AtomicReader.Fields() call AtomicReader.Fields() call AtomicReader.Fields() call AtomicReader.Fields() call AtomicReader.Fields() call AtomicReader.Fields() call AtomicReader.Fields() call AtomicReader.Fields() call AtomicReader.Fields() decl_stmt Lucene.Net.Index.DocsEnum = decl_stmt DocsAndPositionsEnum = decl_stmt DocsAndPositionsEnum = decl_stmt Ints = foreach in if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) new = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) decl_stmt int while = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != decl_stmt System.Collections.Generic.IList < = call decl FieldCache.Get() call decl FieldCache.Get() call decl FieldCache.Get() call decl FieldCache.Get() call decl FieldCache.Get() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) while = call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != decl_stmt System.Collections.Generic.IList < = call decl FieldCache.Get() call decl FieldCache.Get() call decl FieldCache.Get() call decl FieldCache.Get() call decl FieldCache.Get() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() foreach in decl_stmt int = call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) while = call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != decl_stmt System.Collections.Generic.IList < = call decl FieldCache.Get() call decl FieldCache.Get() call decl FieldCache.Get() call decl FieldCache.Get() call decl FieldCache.Get() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() foreach in decl_stmt int = call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call Lucene.Net.Analysis.Token.StartOffset() call Lucene.Net.Analysis.Token.StartOffset() call Lucene.Net.Analysis.Token.StartOffset() call Lucene.Net.Analysis.Token.StartOffset() call Lucene.Net.Analysis.Token.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call Lucene.Net.Analysis.Token.EndOffset() call Lucene.Net.Analysis.Token.EndOffset() call Lucene.Net.Analysis.Token.EndOffset() call Lucene.Net.Analysis.Token.EndOffset() call Lucene.Net.Analysis.Token.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() FieldInfos AtomicReader FieldType RandomIndexWriter CompositeReader Document Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new for = < ++ decl_stmt Lucene.Net.Documents.Document = new if < && == decl_stmt Lucene.Net.Documents.FieldType = new = = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new else decl_stmt Lucene.Net.Documents.FieldType = new = if = = = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.CompositeReader = decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.FieldInfos = call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call CompositeReader.Dispose() call CompositeReader.Dispose() call CompositeReader.Dispose() call CompositeReader.Dispose() call CompositeReader.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() Document FieldType RandomIndexWriter Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.FieldType = new = = = = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public virtual public virtual try new - - catch public virtual public virtual try new catch public virtual public virtual try new catch public virtual public virtual new FieldType Document Token IndexWriter Token Field TokenStream Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Analysis.Token = new - if = new decl_stmt Lucene.Net.Analysis.Token = new - decl_stmt Lucene.Net.Analysis.TokenStream = new new decl_stmt Lucene.Net.Documents.FieldType = new = = = = decl_stmt Lucene.Net.Documents.Field = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() RandomIndexWriter FieldType bool Directory Document private private decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt bool = try decl_stmt Lucene.Net.Documents.FieldType = new = = = = decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new new call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) = finally if else Token private private decl_stmt Lucene.Net.Analysis.Token = new call Token.Append() call Token.Append() call Token.Append() call Token.Append() call Token.Append() = call Lucene.Net.Analysis.Token.SetOffset(int,int) call Lucene.Net.Analysis.Token.SetOffset(int,int) call Lucene.Net.Analysis.Token.SetOffset(int,int) call Lucene.Net.Analysis.Token.SetOffset(int,int) call Lucene.Net.Analysis.Token.SetOffset(int,int) return