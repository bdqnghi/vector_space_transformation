Lucene.Net.Search System using System.Diagnostics using Lucene.Net.Util using class Lucene.Net.Search.TopDocs int float decl ScoreDoc return = public override public override return + + + + float float public override public override != decl_stmt float = decl_stmt float = if < return else if > return else if < return else if > return else != return < FieldComparator FieldDoc FieldDoc int public override public override != decl_stmt Lucene.Net.Search.FieldDoc = decl_stmt Lucene.Net.Search.FieldDoc = for = < ++ decl_stmt Lucene.Net.Search.FieldComparator = decl_stmt int = * call Lucene.Net.Search.FieldComparator.CompareValues(object,object) call Lucene.Net.Search.FieldComparator.CompareValues(object,object) call Lucene.Net.Search.FieldComparator.CompareValues(object,object) call Lucene.Net.Search.FieldComparator.CompareValues(object,object) call Lucene.Net.Search.FieldComparator.CompareValues(object,object) if != return < if < return else if > return else != return < public static public static return decl ScoreDoc int TopDocs decl PriorityQueue int int int ScoreDoc ShardRef float int public static public static decl_stmt Lucene.Net.Support.PriorityQueue < if == = new else = new decl_stmt int = decl_stmt int = decl_stmt float = for = < ++ decl_stmt Lucene.Net.Search.TopDocs = += if != && > += call decl PriorityQueue.Add() call decl PriorityQueue.Add() call decl PriorityQueue.Add() call decl PriorityQueue.Add() call decl PriorityQueue.Add() new = if == = decl_stmt Lucene.Net.Search.ScoreDoc if <= = new else = new - decl_stmt int = + decl_stmt int = decl_stmt int = while < call decl PriorityQueue.Size() call decl PriorityQueue.Size() call decl PriorityQueue.Size() call decl PriorityQueue.Size() call decl PriorityQueue.Size() > decl_stmt ShardRef = call decl PriorityQueue.Pop() call decl PriorityQueue.Pop() call decl PriorityQueue.Pop() call decl PriorityQueue.Pop() call decl PriorityQueue.Pop() decl_stmt Lucene.Net.Search.ScoreDoc = ++ = if >= - = ++ if < call decl PriorityQueue.Add() call decl PriorityQueue.Add() call decl PriorityQueue.Add() call decl PriorityQueue.Add() call decl PriorityQueue.Add() if == return new else return new