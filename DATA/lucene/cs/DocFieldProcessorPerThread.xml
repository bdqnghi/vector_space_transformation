Lucene.Net.Index System using Lucene.Net.Documents using Lucene.Net.Support using Lucene.Net.Documents.Document Lucene.Net.Util.ArrayUtil class Lucene.Net.Index.DocFieldProcessorPerThread super super DocConsumerPerThread int int int float FieldInfos DocFieldProcessor decl DocState decl DocFieldProcessorPerField int decl PerDoc decl DocFieldProcessorPerField decl DocumentsWriter int DocFieldConsumerPerThread StoredFieldsWriterPerThread private private = new DocFieldProcessorPerField DocFieldProcessorPerField public override public override for = < ++ decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = while != decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = call Lucene.Net.Index.DocFieldProcessorPerField.Abort() call Lucene.Net.Index.DocFieldProcessorPerField.Abort() call Lucene.Net.Index.DocFieldProcessorPerField.Abort() call Lucene.Net.Index.DocFieldProcessorPerField.Abort() call Lucene.Net.Index.DocFieldProcessorPerField.Abort() = call Lucene.Net.Index.StoredFieldsWriterPerThread.Abort() call Lucene.Net.Index.StoredFieldsWriterPerThread.Abort() call Lucene.Net.Index.StoredFieldsWriterPerThread.Abort() call Lucene.Net.Index.StoredFieldsWriterPerThread.Abort() call Lucene.Net.Index.StoredFieldsWriterPerThread.Abort() call DocFieldConsumerPerThread.Abort() call DocFieldConsumerPerThread.Abort() call DocFieldConsumerPerThread.Abort() call DocFieldConsumerPerThread.Abort() call DocFieldConsumerPerThread.Abort() decl System decl Collections public < public < decl_stmt Generic < = new < for = < ++ decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = while != call decl System.Add() call decl System.Add() call decl System.Add() call decl System.Add() call decl System.Add() = == return DocFieldProcessorPerField DocFieldProcessorPerField internal internal for = < ++ decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = while != if == - if == = else = if != + -- else = - = = int decl DocFieldProcessorPerField int int DocFieldProcessorPerField DocFieldProcessorPerField private private decl_stmt int = * > decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = new decl_stmt int = - for = < ++ decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = while != decl_stmt int = call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() call DocFieldProcessorPerField.fieldInfo() & decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = = = = = = decl System decl System int decl IFieldable Document decl DocFieldProcessorPerField int decl Generic int decl Collections IFieldable decl String int FieldInfo public override public override call DocFieldConsumerPerThread.StartDocument() call DocFieldConsumerPerThread.StartDocument() call DocFieldConsumerPerThread.StartDocument() call DocFieldConsumerPerThread.StartDocument() call DocFieldConsumerPerThread.StartDocument() call StoredFieldsWriterPerThread.StartDocument() call StoredFieldsWriterPerThread.StartDocument() call StoredFieldsWriterPerThread.StartDocument() call StoredFieldsWriterPerThread.StartDocument() call StoredFieldsWriterPerThread.StartDocument() decl_stmt Lucene.Net.Documents.Document = call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() call DocFieldProcessor.docWriter() = decl_stmt int = ++ decl_stmt Generic < = call Lucene.Net.Documents.Document.GetFields(string) call Lucene.Net.Documents.Document.GetFields(string) call Lucene.Net.Documents.Document.GetFields(string) call Lucene.Net.Documents.Document.GetFields(string) call Lucene.Net.Documents.Document.GetFields(string) decl_stmt int = for = < ++ decl_stmt Lucene.Net.Documents.IFieldable = decl_stmt System.String = decl_stmt int = call int.GetHashCode() call int.GetHashCode() call int.GetHashCode() call int.GetHashCode() call int.GetHashCode() & decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = while != && ! call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() = if == decl_stmt Lucene.Net.Index.FieldInfo = call Lucene.Net.Index.FieldInfos.Add(FieldInfos) call Lucene.Net.Index.FieldInfos.Add(FieldInfos) call Lucene.Net.Index.FieldInfos.Add(FieldInfos) call Lucene.Net.Index.FieldInfos.Add(FieldInfos) call Lucene.Net.Index.FieldInfos.Add(FieldInfos) = new = = ++ if >= / else call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() call decl System.fieldInfo() if != = if == decl_stmt int = * decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = new = ++ = = if == decl_stmt Lucene.Net.Documents.IFieldable = new * = ++ = if call Lucene.Net.Index.StoredFieldsWriterPerThread.AddField(IFieldable,FieldInfo) call Lucene.Net.Index.StoredFieldsWriterPerThread.AddField(IFieldable,FieldInfo) call Lucene.Net.Index.StoredFieldsWriterPerThread.AddField(IFieldable,FieldInfo) call Lucene.Net.Index.StoredFieldsWriterPerThread.AddField(IFieldable,FieldInfo) call Lucene.Net.Index.StoredFieldsWriterPerThread.AddField(IFieldable,FieldInfo) - for = < ++ call DocFieldConsumerPerThread.ProcessFields() call DocFieldConsumerPerThread.ProcessFields() call DocFieldConsumerPerThread.ProcessFields() call DocFieldConsumerPerThread.ProcessFields() call DocFieldConsumerPerThread.ProcessFields() if != && != call decl DocumentsWriter.infoStream() call decl DocumentsWriter.infoStream() call decl DocumentsWriter.infoStream() call decl DocumentsWriter.infoStream() call decl DocumentsWriter.infoStream() call decl DocumentsWriter.infoStream() call decl DocumentsWriter.infoStream() call decl DocumentsWriter.infoStream() call decl DocumentsWriter.infoStream() + + + + = decl_stmt DocWriter = call Lucene.Net.Index.StoredFieldsWriterPerThread.FinishDocument() call Lucene.Net.Index.StoredFieldsWriterPerThread.FinishDocument() call Lucene.Net.Index.StoredFieldsWriterPerThread.FinishDocument() call Lucene.Net.Index.StoredFieldsWriterPerThread.FinishDocument() call Lucene.Net.Index.StoredFieldsWriterPerThread.FinishDocument() decl_stmt DocWriter = call DocFieldConsumerPerThread.FinishDocument() call DocFieldConsumerPerThread.FinishDocument() call DocFieldConsumerPerThread.FinishDocument() call DocFieldConsumerPerThread.FinishDocument() call DocFieldConsumerPerThread.FinishDocument() if == return else if == return else decl_stmt PerDoc = = == == = = return DocFieldProcessorPerField int DocFieldProcessorPerField int DocFieldProcessorPerField int internal internal if >= return else if == + if > decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = = = return decl_stmt int = + if > decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = = = if > decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = = = if > decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = = = decl_stmt int = + decl_stmt int = - if >= return decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = for while > -- while < && <= ++ if < decl_stmt Lucene.Net.Index.DocFieldProcessorPerField = = = -- else break + internal internal lock if == ++ if > == + = new return new else return -- internal internal lock < ++ = private private = return public override public override return + public override public override try try finally finally public override public override try try finally finally