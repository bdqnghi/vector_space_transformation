Lucene.Net.Util.Automaton Lucene.Net.Support using System using System.Collections.Generic using System.Text using class Lucene.Net.Util.Automaton.RegExp int int int int string int int int RegExp string int bool int int int Kind int public virtual public virtual return public virtual public virtual return public virtual public virtual < return bool public virtual public virtual decl_stmt bool = = return Automaton bool private private < decl_stmt bool = if = decl_stmt Lucene.Net.Util.Automaton.Automaton = if = return Automaton Automaton decl IList private private < decl_stmt System.Collections.Generic.IList < decl_stmt Lucene.Net.Util.Automaton.Automaton = switch case = new < = break case = new < = break case = call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call string.ToAutomaton() call string.ToAutomaton() call string.ToAutomaton() call string.ToAutomaton() call string.ToAutomaton() break case = call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) break case = call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) break case = call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) break case = call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) break case = call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) call Lucene.Net.Util.Automaton.RegExp.ToAutomaton(IDictionary) break case = break case = break case = break case = break case = break case = break case decl_stmt Lucene.Net.Util.Automaton.Automaton = if != = if == && != try = catch throw new if == throw new + + = call Lucene.Net.Util.Automaton.Automaton.Clone() call Lucene.Net.Util.Automaton.Automaton.Clone() call Lucene.Net.Util.Automaton.Automaton.Clone() call Lucene.Net.Util.Automaton.Automaton.Clone() call Lucene.Net.Util.Automaton.Automaton.Clone() break case = break return private private < < if == else public override public override return new string string internal virtual internal virtual switch case call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call string.ToStringBuilder() call string.ToStringBuilder() call string.ToStringBuilder() call string.ToStringBuilder() call string.ToStringBuilder() break case call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call string.ToStringBuilder() call string.ToStringBuilder() call string.ToStringBuilder() call string.ToStringBuilder() call string.ToStringBuilder() break case call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call string.ToStringBuilder() call string.ToStringBuilder() call string.ToStringBuilder() call string.ToStringBuilder() call string.ToStringBuilder() break case call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) break case call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) break case call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) break case call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) break case call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) call Lucene.Net.Util.Automaton.RegExp.ToStringBuilder(StringBuilder) break case break case break case break case break case break case break case break case decl_stmt string = decl_stmt string = if > for = < ++ if > for = < ++ break return decl HashSet decl_stmt System.Collections.Generic.HashSet < = new < return internal virtual internal virtual < switch case case case call Lucene.Net.Util.Automaton.RegExp.GetIdentifiers(ISet) call Lucene.Net.Util.Automaton.RegExp.GetIdentifiers(ISet) call Lucene.Net.Util.Automaton.RegExp.GetIdentifiers(ISet) call Lucene.Net.Util.Automaton.RegExp.GetIdentifiers(ISet) call Lucene.Net.Util.Automaton.RegExp.GetIdentifiers(ISet) call string.GetIdentifiers() call string.GetIdentifiers() call string.GetIdentifiers() call string.GetIdentifiers() call string.GetIdentifiers() break case case case case case call Lucene.Net.Util.Automaton.RegExp.GetIdentifiers(ISet) call Lucene.Net.Util.Automaton.RegExp.GetIdentifiers(ISet) call Lucene.Net.Util.Automaton.RegExp.GetIdentifiers(ISet) call Lucene.Net.Util.Automaton.RegExp.GetIdentifiers(ISet) call Lucene.Net.Util.Automaton.RegExp.GetIdentifiers(ISet) break case break default: break RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = = = return RegExp internal static internal static if == || == && == || == return decl_stmt Lucene.Net.Util.Automaton.RegExp = new = if == && == || == && == || == = = else if == || == && == && == || == = = else = = return StringBuilder private static private static decl_stmt System.Text.StringBuilder = new if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = = = return RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = = return RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = = return RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = = = return RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = = = = return RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = = return RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = = return RegExp internal static internal static if from > throw new + from + + + decl_stmt Lucene.Net.Util.Automaton.RegExp = new = = from = return RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = return RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = return RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = = return RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = return RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = = return RegExp internal static internal static decl_stmt Lucene.Net.Util.Automaton.RegExp = new = = = = return private private return && call int.IndexOf() call int.IndexOf() call int.IndexOf() call int.IndexOf() call int.IndexOf() char != - private private if >= return if == += return return private private return < int private private if ! throw new decl_stmt int = += return private private return & != RegExp internal internal decl_stmt Lucene.Net.Util.Automaton.RegExp = if = return RegExp internal internal decl_stmt Lucene.Net.Util.Automaton.RegExp = if && = return RegExp internal internal decl_stmt Lucene.Net.Util.Automaton.RegExp = if && ! && ! || ! = return int RegExp int int internal internal decl_stmt Lucene.Net.Util.Automaton.RegExp = while if = else if = else if = else if decl_stmt int = while if == throw new + decl_stmt int = - decl_stmt int = - if = while if != = - else = if ! throw new + if == - = else = return internal internal if && return else return bool RegExp internal internal if decl_stmt bool = if = decl_stmt Lucene.Net.Util.Automaton.RegExp = if = if ! throw new + return else return RegExp internal internal decl_stmt Lucene.Net.Util.Automaton.RegExp = while && ! = return int internal internal decl_stmt int = if return else return int int RegExp int string int int string string int internal internal if return else if && return else if && return else if decl_stmt int = while && ! if ! throw new + return - - else if if return decl_stmt Lucene.Net.Util.Automaton.RegExp = if ! throw new + return else if || && decl_stmt int = while && ! if ! throw new + decl_stmt string = - - decl_stmt int = call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() if == - if ! throw new + - return else if ! throw new + - try if == || == - || != call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() throw new decl_stmt string = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() decl_stmt string = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() + - + decl_stmt int = decl_stmt int = decl_stmt int if == = else = if > decl_stmt int = = = return catch throw new + - else return internal internal return