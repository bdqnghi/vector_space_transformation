Lucene.Net.Util.Automaton System using System.Collections.Generic using System.Diagnostics using System.Text using Lucene.Net.Search.PrefixTermsEnum Lucene.Net.Index.SingleTermsEnum Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum class Lucene.Net.Util.Automaton.CompiledAutomaton decl Transition BytesRef BytesRef ByteRunAutomaton bool Transition decl Transition int Transition private private decl_stmt Lucene.Net.Util.Automaton.Transition = foreach in if < = != decl_stmt int if > - = - else = if >= + = byte = ++ while decl_stmt Lucene.Net.Util.Automaton.Transition = if == call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() = return else != decl_stmt Lucene.Net.Util.Automaton.Transition = - if >= + = byte = ++ public virtual public virtual switch case return case return case return new case return new case return default: throw new int int int int decl Transition decl IList public virtual public virtual = decl_stmt int = if == if call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() = return else return decl_stmt System.Collections.Generic.IList < = new < decl_stmt int = while decl_stmt int = sbyte + & decl_stmt int = call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() if == - if != - && call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() if >= + = byte = return else = - if == - while decl_stmt Lucene.Net.Util.Automaton.Transition = if == call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() = return else if - < if call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() = return if == return else = - call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() - -- = + & else break return else if >= + = byte call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = ++ int StringBuilder public virtual public virtual decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt int = for = < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) for = < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) int int public override public override decl_stmt int const const = decl_stmt int = = * + == : call ByteRunAutomaton.GetHashCode() call ByteRunAutomaton.GetHashCode() call ByteRunAutomaton.GetHashCode() call ByteRunAutomaton.GetHashCode() call ByteRunAutomaton.GetHashCode() = * + == : call Lucene.Net.Util.BytesRef.GetHashCode() call Lucene.Net.Util.BytesRef.GetHashCode() call Lucene.Net.Util.BytesRef.GetHashCode() call Lucene.Net.Util.BytesRef.GetHashCode() call Lucene.Net.Util.BytesRef.GetHashCode() = * + == : return CompiledAutomaton public override public override if == return if == return if != return decl_stmt Lucene.Net.Util.Automaton.CompiledAutomaton = if != return if == || == if ! call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) return else if == if ! call ByteRunAutomaton.Equals() call ByteRunAutomaton.Equals() call ByteRunAutomaton.Equals() call ByteRunAutomaton.Equals() call ByteRunAutomaton.Equals() return return