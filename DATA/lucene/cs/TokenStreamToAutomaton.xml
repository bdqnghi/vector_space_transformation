Lucene.Net.Analysis Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Support using Lucene.Net.Util using System using System.Diagnostics using Lucene.Net.Util.Automaton.Automaton Lucene.Net.Util.Automaton.State Lucene.Net.Util.Automaton.Transition class Lucene.Net.Analysis.TokenStreamToAutomaton bool int int bool = = public public = = protected internal override protected internal override return private static private static return new protected internal virtual protected internal virtual return decl int int var int var var State bool int State Position int BytesRef var BytesRef decl RollingBuffer var State int int Position string public virtual public virtual decl_stmt var = new decl_stmt bool = decl_stmt var = < decl_stmt var = < decl_stmt var = < decl_stmt var = < decl_stmt Lucene.Net.Util.BytesRef = decl_stmt RollingBuffer < = new decl_stmt int = - decl_stmt Position = decl_stmt int = while decl_stmt int = if ! && > = > - || > if > += = call decl RollingBuffer.Get() call decl RollingBuffer.Get() call decl RollingBuffer.Get() call decl RollingBuffer.Get() call decl RollingBuffer.Get() == if == if == = else = new else = new call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() new if > call decl RollingBuffer.FreeBefore() call decl RollingBuffer.FreeBefore() call decl RollingBuffer.FreeBefore() call decl RollingBuffer.FreeBefore() call decl RollingBuffer.FreeBefore() else = decl_stmt int = + call var.FillBytesRef() call var.FillBytesRef() call var.FillBytesRef() call var.FillBytesRef() call var.FillBytesRef() decl_stmt Lucene.Net.Util.BytesRef = decl_stmt int = decl_stmt Position = call decl RollingBuffer.Get() call decl RollingBuffer.Get() call decl RollingBuffer.Get() call decl RollingBuffer.Get() call decl RollingBuffer.Get() if == = new decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt int = if decl_stmt string = call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() = new = for = = < += ++ = = else = for = < ++ decl_stmt Lucene.Net.Util.Automaton.State = == - : new decl_stmt int if = else = + & call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new = = call var.EndOffset() call var.EndOffset() call var.EndOffset() call var.EndOffset() call var.EndOffset() decl_stmt Lucene.Net.Util.Automaton.State = if call var.EndOffset() call var.EndOffset() call var.EndOffset() call var.EndOffset() call var.EndOffset() > = new = ++ while <= = call decl RollingBuffer.Get() call decl RollingBuffer.Get() call decl RollingBuffer.Get() call decl RollingBuffer.Get() call decl RollingBuffer.Get() if != if != call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() new else = ++ = return Position Position private static private static < decl_stmt Position = decl_stmt Position = - while == || == if == = new call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() new if == if == = else = new if != call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() call Position.Arriving() new call Position.Leaving() call Position.Leaving() call Position.Leaving() call Position.Leaving() call Position.Leaving() call Position.Leaving() call Position.Leaving() call Position.Leaving() call Position.Leaving() new -- if <= break = = -