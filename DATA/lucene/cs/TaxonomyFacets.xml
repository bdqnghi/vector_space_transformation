Lucene.Net.Facet.Taxonomy System using System.Collections.Generic using System.Linq using Lucene.Net.Facet using Lucene.Net.Facet.FacetsConfig.DimConfig class Lucene.Net.Facet.Taxonomy.TaxonomyFacets super super Facets string TaxonomyReader decl int decl IComparer FacetsConfig decl int public virtual public virtual if > return - else if > return else return DimConfig protected internal virtual protected internal virtual decl_stmt DimConfig = call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) if ! call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() throw new + + + return string DimConfig var decl IList FacetResult int public override < public override < decl_stmt int = decl_stmt System.Collections.Generic.IList < = new < while != decl_stmt string = call TaxonomyReader.GetPath() call TaxonomyReader.GetPath() call TaxonomyReader.GetPath() call TaxonomyReader.GetPath() call TaxonomyReader.GetPath() decl_stmt DimConfig = call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) if call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() call DimConfig.IndexFieldName() decl_stmt Lucene.Net.Facet.FacetResult = if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = decl_stmt var = call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() return