Lucene.Net.Search System using System.Diagnostics using Lucene.Net.Documents using NUnit.Framework using Lucene.Net.Util.AttributeSource Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Lucene.Net.Index.DirectoryReader Documents.Document Field Lucene.Net.Index.IndexReader Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Index.MultiReader Lucene.Net.Index.RandomIndexWriter Lucene.Net.Index.Term Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum class attribute Lucene.Net.Search.TestMultiTermQueryRewrites super super LuceneTestCase IndexReader Directory IndexSearcher Document RandomIndexWriter RandomIndexWriter RandomIndexWriter public static public static = = = decl_stmt Lucene.Net.Index.RandomIndexWriter = new new decl_stmt Lucene.Net.Index.RandomIndexWriter = new new decl_stmt Lucene.Net.Index.RandomIndexWriter = new new for = < ++ decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) == : call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() = = = new new = = new new = public static public static call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Search.IndexSearcher.Dispose() call Lucene.Net.Search.IndexSearcher.Dispose() call Lucene.Net.Search.IndexSearcher.Dispose() call Lucene.Net.Search.IndexSearcher.Dispose() call Lucene.Net.Search.IndexSearcher.Dispose() = = = = = = = = = private private if is = return private private = return Term BooleanQuery private private = decl_stmt Lucene.Net.Search.BooleanQuery = decl_stmt Lucene.Net.Index.Term = foreach in = if != call Lucene.Net.Index.Term.CompareTo(Term) call Lucene.Net.Index.Term.CompareTo(Term) call Lucene.Net.Index.Term.CompareTo(Term) call Lucene.Net.Index.Term.CompareTo(Term) call Lucene.Net.Index.Term.CompareTo(Term) < = Query Query Query MultiTermQuery private private decl_stmt Lucene.Net.Search.MultiTermQuery = call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) decl_stmt Lucene.Net.Search.Query = decl_stmt Lucene.Net.Search.Query = decl_stmt Lucene.Net.Search.Query = if + + + call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) decl MultiTermQuery public virtual public virtual new new decl_stmt Lucene.Net.Search.ConstantScoreAutoRewrite = new = = TermQuery private private foreach in decl_stmt Lucene.Net.Search.TermQuery = call TermQuery.Term() call TermQuery.Term() call TermQuery.Term() call TermQuery.Term() call TermQuery.Term() call TermQuery.Term() call TermQuery.Term() call TermQuery.Term() call TermQuery.Term() Query Query Query MultiTermQuery private private decl_stmt Lucene.Net.Search.MultiTermQuery = new call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) decl_stmt Lucene.Net.Search.Query = decl_stmt Lucene.Net.Search.Query = decl_stmt Lucene.Net.Search.Query = if + + + call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) call Lucene.Net.Search.Query.Equals(object) public override public override return new new new protected override protected override = return public override public override return public virtual public virtual new MultiTermQuery int private private decl_stmt int = = decl_stmt Lucene.Net.Search.MultiTermQuery = call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) try catch new finally = MultiTermQuery int private private decl_stmt int = = decl_stmt Lucene.Net.Search.MultiTermQuery = call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) call Lucene.Net.Search.MultiTermQuery.SetRewriteMethod(RewriteMethod) try finally = public virtual public virtual new new