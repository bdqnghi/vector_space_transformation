Lucene.Net.Util.Packed System using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Store.DataInput Lucene.Net.Store.IndexInput class Lucene.Net.Util.Packed.BlockPackedReaderIterator long decl byte int long LongsRef DataInput int decl long int internal static internal static return ulong >> ^ - & long byte internal static internal static decl_stmt byte = call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() if sbyte >= return decl_stmt long = & = call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() |= & << if sbyte >= return = call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() |= & << if sbyte >= return = call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() |= & << if sbyte >= return = call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() |= & << if sbyte >= return = call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() |= & << if sbyte >= return = call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() |= & << if sbyte >= return = call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() |= & << if sbyte >= return = call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() |= & << return public public = >= = = = int long int int public public >= if + > || + < throw new decl_stmt int = int - += += -= if == return == while >= decl_stmt int = call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() & decl_stmt int = uint >> if > throw new if & == decl_stmt long = += -= if == return < += += int long IndexInput int private private if is decl_stmt Lucene.Net.Store.IndexInput = call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() + else if == = new decl_stmt long = while < decl_stmt int = int - call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) += long public public if == throw new if == decl_stmt long = ++ ++ return public public > if == throw new if == = - = int - = = += += return int int int long int int decl Decoder decl PackedInts bool private private decl_stmt int = call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() & decl_stmt bool = & != decl_stmt int = uint >> if > throw new decl_stmt long = : + || != if == else decl_stmt Lucene.Net.Util.Packed.Decoder = decl_stmt int = / call decl PackedInts.ByteValueCount() call decl PackedInts.ByteValueCount() call decl PackedInts.ByteValueCount() call decl PackedInts.ByteValueCount() call decl PackedInts.ByteValueCount() decl_stmt int = * call decl PackedInts.ByteBlockCount() call decl PackedInts.ByteBlockCount() call decl PackedInts.ByteBlockCount() call decl PackedInts.ByteBlockCount() call decl PackedInts.ByteBlockCount() if == || < = new decl_stmt int = int - decl_stmt int = int call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call decl PackedInts.Decode() call decl PackedInts.Decode() call decl PackedInts.Decode() call decl PackedInts.Decode() call decl PackedInts.Decode() if != for = < ++ += = public public return