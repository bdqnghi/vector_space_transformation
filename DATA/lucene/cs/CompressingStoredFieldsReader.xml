Lucene.Net.Codecs.Compressing Lucene.Net.Codecs.Lucene40 using Lucene.Net.Index using System using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Store.AlreadyClosedException Lucene.Net.Util.ArrayUtil Lucene.Net.Store.BufferedChecksumIndexInput Lucene.Net.Store.ByteArrayDataInput Lucene.Net.Util.BytesRef Lucene.Net.Store.ChecksumIndexInput Lucene.Net.Index.CorruptIndexException Lucene.Net.Store.DataInput Lucene.Net.Store.DataOutput Lucene.Net.Store.Directory Lucene.Net.Index.FieldInfo Lucene.Net.Index.FieldInfos Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexInput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Util.Packed.PackedInts Lucene.Net.Index.SegmentInfo Lucene.Net.Index.StoredFieldVisitor class Lucene.Net.Codecs.Compressing.CompressingStoredFieldsReader super super StoredFieldsReader int CompressingStoredFieldsIndexReader FieldInfos int int BytesRef IndexInput bool long int int Decompressor CompressionMode private private if throw new protected override protected override if ! = int var private static private static switch & case decl_stmt int = decl_stmt var = new break case = = new break case break case break case break case break default: throw new + int private static private static switch & case case decl_stmt int = break case case break case case break default: throw new + int decl PackedInts DataInput int int decl ReaderIterator decl PackedInts long int int int BytesRef long FieldInfo int decl Reader int public override public override call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if < || || >= || || >= + || || >= || || >= + || || || >= || || >= + || || >= || || >= + || + || || >= || || >= + || || >= || || >= + || || || >= || || >= + || || >= || || >= + || + throw new + + + + + + + + + + decl_stmt int if == = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = else decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if == = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() else if > throw new + + + + else decl_stmt long = decl_stmt Reader = = call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() - call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() + decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if == = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = - * = * else if > throw new + + + + else decl_stmt ReaderIterator = decl_stmt int = for = < - ++ += int call int.Next() call int.Next() call int.Next() call int.Next() call int.Next() = = int call int.Next() call int.Next() call int.Next() call int.Next() call int.Next() += for = - + < ++ += int call int.Next() call int.Next() call int.Next() call int.Next() call int.Next() = if == != == throw new + + + + + + if == return decl_stmt Lucene.Net.Store.DataInput if >= && >= * > < call Decompressor.Decompress() call Decompressor.Decompress() call Decompressor.Decompress() call Decompressor.Decompress() call Decompressor.Decompress() - = new else decl_stmt Lucene.Net.Util.BytesRef = <= : new call Decompressor.Decompress() call Decompressor.Decompress() call Decompressor.Decompress() call Decompressor.Decompress() call Decompressor.Decompress() == = new for = < ++ decl_stmt long = call BytesRef.ReadVLong() call BytesRef.ReadVLong() call BytesRef.ReadVLong() call BytesRef.ReadVLong() call BytesRef.ReadVLong() decl_stmt int = ulong >> decl_stmt Lucene.Net.Index.FieldInfo = call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) decl_stmt int = & <= + switch case break case break case return int internal virtual internal virtual <= if == throw new decl_stmt int = - += public override public override if == -- return byte ++ public override public override while > -= += += -= public override public override return new return return return internal internal return new int internal internal decl_stmt int = for = < ++ += return int int decl ReaderIterator int int int internal internal >= + + + + + call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if < + + + + + || + + + + + || + + + + + + || + + + + + || + throw new + + + + + + + + + + = = if > decl_stmt int = = new = new if == = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() else decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if == call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() else if > throw new + + + + else decl_stmt ReaderIterator = for = < ++ = int call int.Next() call int.Next() call int.Next() call int.Next() call int.Next() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if == call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() else if > throw new + else decl_stmt ReaderIterator = for = < ++ = int call int.Next() call int.Next() call int.Next() call int.Next() call int.Next() int int internal internal decl_stmt int = if >= && >= * = = for = < decl_stmt int = - = + += += else if != throw new + + + + + + long internal internal == decl_stmt long = + == : + - internal internal if >= call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() - public override public override return call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.RamBytesUsed() call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.RamBytesUsed() call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.RamBytesUsed() call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.RamBytesUsed() call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.RamBytesUsed() public override public override if >=