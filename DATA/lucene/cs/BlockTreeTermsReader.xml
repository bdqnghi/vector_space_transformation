Lucene.Net.Codecs System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Util.Fst using System.Text using Lucene.Net.Util.ArrayUtil Lucene.Net.Util.Bits Lucene.Net.Store.ByteArrayDataInput Lucene.Net.Util.Fst.ByteSequenceOutputs Lucene.Net.Util.BytesRef Lucene.Net.Util.Automaton.CompiledAutomaton Lucene.Net.Index.CorruptIndexException Lucene.Net.Store.Directory Lucene.Net.Index.DocsAndPositionsEnum Lucene.Net.Index.DocsEnum Lucene.Net.Index.FieldInfo Lucene.Net.Index.FieldInfos Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexInput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Util.RamUsageEstimator Lucene.Net.Util.Automaton.RunAutomaton Lucene.Net.Index.SegmentInfo Lucene.Net.Util.StringHelper Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum Lucene.Net.Index.TermState Lucene.Net.Util.Automaton.Transition class Lucene.Net.Codecs.BlockTreeTermsReader super super FieldsProducer bool BytesRef decl SortedDictionary decl Outputs long int IndexInput string long PostingsReaderBase private private = int protected internal virtual protected internal virtual decl_stmt int = if < = return int protected internal virtual protected internal virtual decl_stmt int = if < = return protected internal virtual protected internal virtual if >= - - = else if >= - = public override public override try finally call decl SortedDictionary.Clear() call decl SortedDictionary.Clear() call decl SortedDictionary.Clear() call decl SortedDictionary.Clear() call decl SortedDictionary.Clear() public override < public override < return call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() FieldReader public override public override != decl_stmt FieldReader call decl SortedDictionary.TryGetValue() call decl SortedDictionary.TryGetValue() call decl SortedDictionary.TryGetValue() call decl SortedDictionary.TryGetValue() call decl SortedDictionary.TryGetValue() out return return internal virtual internal virtual if == return else try return + + catch return internal virtual internal virtual ++ if if == ++ ++ else ++ if <= = + ++ ++ += += long int int internal virtual internal virtual decl_stmt int = : decl_stmt int = - += if != && != ++ else if != ++ else if != ++ else throw new ++ decl_stmt long = - - - > + + + + + += internal virtual internal virtual += internal virtual internal virtual == + + + == + + + + + + == + + + + + + + + + StringBuilder int int public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + + != + double / + : call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + - + call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + + != + double / + : call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + + != + double / + : call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + + != + double / + : if != call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) decl_stmt int = for = < ++ decl_stmt int = += if != call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) + + + == return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public public return new return public override public override return >= public override public override return >= public override public override return >= public override public override return public override public override return new public override public override return return return return public override public override if != throw new return new public public return != : internal internal > do = + uint >> -- if != = & else = != && <= = = = if != = else = - int decl_stmt int = for = < ++ = + & != - return int long int internal internal if != && != if < = new decl_stmt long = if & != = = & if while != && <= = + uint >> -- if != = & else = decl_stmt int = = uint >> > = & != = = & != decl_stmt int = uint >> if < = new = if < = new = = = = if == = new = new else if < = new if ! = public public return : public public != - && < + + + + + ++ = = return int public public != - && < + + + + + ++ decl_stmt int = = uint >> = if & == ++ return else = - return return : int bool public public decl_stmt int = decl_stmt bool = == > while < = if != = + for = < ++ = ++ = = internal internal = == : return public override public override return decl Frame private private if >= decl_stmt Frame = new + for = < ++ = new = == return internal < < < < internal < < < < if >= for = < ++ = new < < < < = return int int BytesRef Frame private private decl_stmt Frame = == : + = = = + = decl_stmt Frame = == : + = = = + = decl_stmt int = > decl_stmt Lucene.Net.Util.BytesRef = while < decl_stmt int = & = + != = ++ = = call Frame.Load() call Frame.Load() call Frame.Load() call Frame.Load() call Frame.Load() return public override public override return public override public override return public override public override return public override public override return public override public override if < return return int bool int int long int int internal internal == if < = == if < = == for = <= ++ while decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt long = decl_stmt int = decl_stmt bool = = + if < = if && = break else decl_stmt int = if < if == if ! continue else return continue else if == return else -- = = = = = = + return decl byte int decl byte int long int decl byte int int int int int int bool public override public override while while == if ! else if == return decl_stmt long = = - == decl_stmt bool = if != decl_stmt int = & while > if >= - = = goto goto ++ = if != && ! decl_stmt int = + if < goto goto decl_stmt byte = decl_stmt byte = decl_stmt int = - == decl_stmt int decl_stmt int = if > decl_stmt byte = decl_stmt int = - >= decl_stmt int = while < if ++ != ++ goto goto = else = + - decl_stmt int = while < if ++ != ++ goto goto decl_stmt int = for = < ++ = + & if == - goto goto else if = else if if ! == || > + + + return else int internal internal decl_stmt int = + if < = = return public override public override throw new public override public override throw new public override public override throw new public override public override throw new internal internal if == = long Stats public public decl_stmt Stats = new if != = = = = decl_stmt Stats = new if != = = = = if != = else = = = = call Stats.StartBlock() call Stats.StartBlock() call Stats.StartBlock() call Stats.StartBlock() call Stats.StartBlock() ! while while == call Stats.EndBlock() call Stats.EndBlock() call Stats.EndBlock() call Stats.EndBlock() call Stats.EndBlock() if ! call Stats.StartBlock() call Stats.StartBlock() call Stats.StartBlock() call Stats.StartBlock() call Stats.StartBlock() else if == goto goto decl_stmt long = = - == while if = = = call Stats.StartBlock() call Stats.StartBlock() call Stats.StartBlock() call Stats.StartBlock() call Stats.StartBlock() ! else call Stats.Term() call Stats.Term() call Stats.Term() call Stats.Term() call Stats.Term() break call Stats.Finish() call Stats.Finish() call Stats.Finish() call Stats.Finish() call Stats.Finish() = if != = else = = = = return decl Frame internal internal if >= decl_stmt Frame = new + for = < ++ = new = == return internal < < < < internal < < < < if >= for = < ++ = new < < < < = return return long long Frame internal internal < < < < decl_stmt long = decl_stmt long = ulong >> decl_stmt Frame = + = & != = = & != if call Frame.SetFloorData() call Frame.SetFloorData() call Frame.SetFloorData() call Frame.SetFloorData() call Frame.SetFloorData() return Frame internal internal < < < < decl_stmt Frame = + = if == && != - if > call Frame.Rewind() call Frame.Rewind() call Frame.Rewind() call Frame.Rewind() call Frame.Rewind() else == else = - = = = = = - return internal internal = return internal internal = return int int int int BytesRef SeekStatus SeekStatus int Frame int public override public override if == throw new if <= = + if == throw new if <= = + decl_stmt int decl_stmt Lucene.Net.Util.BytesRef = if != = = = decl_stmt Frame = <= decl_stmt int = decl_stmt int = while < = & - + & if != break = + == + & + char + + + & if != = if = + ++ if == decl_stmt int = decl_stmt int = while < = & - + & if != break ++ if == = - = if < = else if > = = else == if return else else = - = != = = = = while < decl_stmt int = + & decl_stmt int = + & if == = if ! = = byte = + return decl_stmt SeekStatus = if == return else return else = = byte != if != = ++ if = = if ! = = return decl_stmt SeekStatus = if == return else return int int int int BytesRef SeekStatus SeekStatus int Frame int public override public override if == throw new if <= = + if == throw new if <= = + decl_stmt int decl_stmt Lucene.Net.Util.BytesRef = if != = = = decl_stmt Frame = <= decl_stmt int = decl_stmt int = while < = & - + & if != break = + == + & + char + + + & if != = if = + ++ if == decl_stmt int = decl_stmt int = while < = & - + & if != break ++ if == = - = if < = else if > = = else == if return else else = - = != = = = = while < decl_stmt int = + & decl_stmt int = + & if == = decl_stmt SeekStatus = if == = if != return else return else return else = byte = != if != = ++ if = = decl_stmt SeekStatus = if == = if != return else return else return bool long public override public override if == if != = else = = = ! if == decl_stmt bool = while == if ! else if == = = = return decl_stmt long = = - if == - || != = while if = = else return public override public override ! return public override public override ! return public override public override ! return public override public override ! return public override public override if < return ! return public override public override if != || ! != && is = = > = else TermState public override public override ! decl_stmt Lucene.Net.Index.TermState = return public override public override throw new public override public override throw new int public public decl_stmt int = - - if > = new + = = & return : internal internal == || + + + = = - int int internal internal if != - return decl_stmt int = = uint >> > = & != == || || = = & != decl_stmt int = uint >> if < = new = if < = new = = = = - = if == = new = new else if < = new = internal internal = = - = if = = & public public return : public public != - && < + + + + + ++ = = = + if < = return int public public != - && < + + + + + ++ decl_stmt int = = uint >> = = + if < if & == = = ++ return else = = = - return int long long public public if ! || <= return decl_stmt int = + & if < return != decl_stmt long = while decl_stmt long = = + ulong >> = & != = == -- if = break else = & if < break if != = - = else int bool public public decl_stmt int = decl_stmt bool = == > while < = if != = + for = < ++ = ++ = = internal internal for = < ++ if + != return return long int long public public ! if == return < + + + decl_stmt long = - while < ++ decl_stmt int = : uint >> if & != decl_stmt long = if == = return else ++ public public return : int int bool int int int public public != - = = if == if return while ++ = decl_stmt int = + = decl_stmt int = + < : decl_stmt int = + decl_stmt int = while decl_stmt int decl_stmt bool if < = ++ & - ++ & = else == = - = if < if == if goto goto else goto goto else if > if ! && ! = while = return else if return if return int int bool int int int int public public != - if == if = == return while ++ decl_stmt int = = uint >> = & == decl_stmt int = + = if ++ = else = = - decl_stmt int = + < : decl_stmt int = + decl_stmt int = while decl_stmt int decl_stmt bool if < = ++ & - ++ & = else == = - = if < if == if goto goto else goto goto else if > if ! && ! = while = return else if return if return int internal internal decl_stmt int = + = + if < long public override public override decl_stmt long = != call PostingsReaderBase.RamBytesUsed() call PostingsReaderBase.RamBytesUsed() call PostingsReaderBase.RamBytesUsed() call PostingsReaderBase.RamBytesUsed() call PostingsReaderBase.RamBytesUsed() : foreach in += return public override public override if >= call PostingsReaderBase.CheckIntegrity() call PostingsReaderBase.CheckIntegrity() call PostingsReaderBase.CheckIntegrity() call PostingsReaderBase.CheckIntegrity() call PostingsReaderBase.CheckIntegrity()