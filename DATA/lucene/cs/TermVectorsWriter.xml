Lucene.Net.Index System using Lucene.Net.Store.Directory Lucene.Net.Store.IndexOutput Lucene.Net.Util.StringHelper Lucene.Net.Util.UnicodeUtil class Lucene.Net.Index.TermVectorsWriter super super IDisposable IndexOutput IndexOutput IndexOutput decl UnicodeUtil FieldInfos bool int bool int int int int byte decl TermVectorOffsetInfo decl System int long int int int var decl String int int decl int TermPositionVector decl int public public call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() if != decl_stmt int = call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() decl_stmt var = new for = < ++ = decl_stmt int = call FieldInfos.FieldNumber() call FieldInfos.FieldNumber() call FieldInfos.FieldNumber() call FieldInfos.FieldNumber() call FieldInfos.FieldNumber() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() decl_stmt int = call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() decl_stmt Lucene.Net.Index.TermPositionVector decl_stmt byte decl_stmt bool decl_stmt bool if is = = > && call TermPositionVector.GetTermPositions() call TermPositionVector.GetTermPositions() call TermPositionVector.GetTermPositions() call TermPositionVector.GetTermPositions() call TermPositionVector.GetTermPositions() != = > && call Lucene.Net.Index.TermPositionVector.GetOffsets(int) call Lucene.Net.Index.TermPositionVector.GetOffsets(int) call Lucene.Net.Index.TermPositionVector.GetOffsets(int) call Lucene.Net.Index.TermPositionVector.GetOffsets(int) call Lucene.Net.Index.TermPositionVector.GetOffsets(int) != = : byte + : byte else = = = = call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() decl_stmt System.String = decl_stmt int = decl_stmt int = = for = < ++ decl_stmt int = - - decl_stmt int = - call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() = - decl_stmt int = call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() if decl_stmt int = call TermPositionVector.GetTermPositions() call TermPositionVector.GetTermPositions() call TermPositionVector.GetTermPositions() call TermPositionVector.GetTermPositions() call TermPositionVector.GetTermPositions() if == throw new == decl_stmt int = foreach in call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() - = if decl_stmt TermVectorOffsetInfo = call Lucene.Net.Index.TermPositionVector.GetOffsets(int) call Lucene.Net.Index.TermPositionVector.GetOffsets(int) call Lucene.Net.Index.TermPositionVector.GetOffsets(int) call Lucene.Net.Index.TermPositionVector.GetOffsets(int) call Lucene.Net.Index.TermPositionVector.GetOffsets(int) if == throw new == decl_stmt int = foreach in decl_stmt int = decl_stmt int = call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() - call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() - = if > decl_stmt long = for = < ++ decl_stmt long = call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() - = else call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() long long long long internal internal decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt long = for = < ++ call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() += call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() += call IndexOutput.CopyBytes() call IndexOutput.CopyBytes() call IndexOutput.CopyBytes() call IndexOutput.CopyBytes() call IndexOutput.CopyBytes() - call IndexOutput.CopyBytes() call IndexOutput.CopyBytes() call IndexOutput.CopyBytes() call IndexOutput.CopyBytes() call IndexOutput.CopyBytes() - == == decl System public public decl_stmt IOException = if != try call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() catch = if != try call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() catch if == = if != try call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() catch if == = if != throw new