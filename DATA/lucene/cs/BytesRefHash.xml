Lucene.Net.Util System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Util.ByteBlockPool.DirectAllocator class Lucene.Net.Util.BytesRefHash int int Counter decl int int decl int int int int BytesStartArray BytesRef ByteBlockPool public public return public public != < + call Lucene.Net.Index.ByteBlockPool.SetBytesRef(BytesRef,int) call Lucene.Net.Index.ByteBlockPool.SetBytesRef(BytesRef,int) call Lucene.Net.Index.ByteBlockPool.SetBytesRef(BytesRef,int) call Lucene.Net.Index.ByteBlockPool.SetBytesRef(BytesRef,int) call Lucene.Net.Index.ByteBlockPool.SetBytesRef(BytesRef,int) return int public public != decl_stmt int = for = < ++ if != - if < = = - ++ == = return decl int public public < decl_stmt int = new return int protected override protected override decl_stmt int = = = int protected override protected override decl_stmt int = = > && > return int decl_stmt int = > int protected internal override protected internal override decl_stmt int = > return private private call Lucene.Net.Index.ByteBlockPool.SetBytesRef(BytesRef,int) call Lucene.Net.Index.ByteBlockPool.SetBytesRef(BytesRef,int) call Lucene.Net.Index.ByteBlockPool.SetBytesRef(BytesRef,int) call Lucene.Net.Index.ByteBlockPool.SetBytesRef(BytesRef,int) call Lucene.Net.Index.ByteBlockPool.SetBytesRef(BytesRef,int) return call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) int private private decl_stmt int = while >= && / > /= if != call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) * - - = = new - = / = - return else return public public = = if call Lucene.Net.Index.ByteBlockPool.Reset() call Lucene.Net.Index.ByteBlockPool.Reset() call Lucene.Net.Index.ByteBlockPool.Reset() call Lucene.Net.Index.ByteBlockPool.Reset() call Lucene.Net.Index.ByteBlockPool.Reset() = call BytesStartArray.Clear() call BytesStartArray.Clear() call BytesStartArray.Clear() call BytesStartArray.Clear() call BytesStartArray.Clear() if != - && return - public public public public = call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) * - int var int int int int public public != decl_stmt int = decl_stmt int = decl_stmt int = if == - decl_stmt int = + if + > if > throw new + - + + call Lucene.Net.Index.ByteBlockPool.NextBuffer() call Lucene.Net.Index.ByteBlockPool.NextBuffer() call Lucene.Net.Index.ByteBlockPool.NextBuffer() call Lucene.Net.Index.ByteBlockPool.NextBuffer() call Lucene.Net.Index.ByteBlockPool.NextBuffer() decl_stmt var = decl_stmt int = if >= = call BytesStartArray.Grow() call BytesStartArray.Grow() call BytesStartArray.Grow() call BytesStartArray.Grow() call BytesStartArray.Grow() < + + + + = ++ = + if < = byte += + >= + + else = unchecked | & + = unchecked >> & += + + == - = if == * return return - + public public return int int int private private != decl_stmt int = decl_stmt int = & decl_stmt int = if != - && ! do ++ = & = != - && ! return int int int public public != decl_stmt int = decl_stmt int = & decl_stmt int = if != - && != do ++ = & = != - && != if == - if >= = call BytesStartArray.Grow() call BytesStartArray.Grow() call BytesStartArray.Grow() call BytesStartArray.Grow() call BytesStartArray.Grow() < + + + + = ++ = == - = if == * return return - + int int int int var int int int decl int int private private decl_stmt int = - call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) * decl_stmt int = new - for = < ++ decl_stmt int = if != - decl_stmt int if decl_stmt int = decl_stmt int = & decl_stmt var = >> decl_stmt int decl_stmt int if & == = = + else = & + + & << = + = else = decl_stmt int = & >= if != - do ++ = & != - = = call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) * - = = = / private static private static return public public if == = call BytesStartArray.Init() call BytesStartArray.Init() call BytesStartArray.Init() call BytesStartArray.Init() call BytesStartArray.Init() if == = new call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) call Lucene.Net.Util.Counter.AddAndGet(long) * public public != >= && < return public override public override return = public override public override != return = + public override public override return = new public override public override return