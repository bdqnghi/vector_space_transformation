Lucene.Net.Codecs.Memory System using System.Diagnostics using System.Collections.Generic using Lucene.Net.Util.Packed using Index.DocsAndPositionsEnum Index.DocsEnum Index.FieldInfo.IndexOptions Index.FieldInfo Index.FieldInfos Index.IndexFileNames Index.SegmentReadState Index.SegmentWriteState Index.Terms Index.TermsEnum Store.ByteArrayDataInput Store.ChecksumIndexInput Store.IOContext Store.IndexInput Store.IndexOutput Store.RAMOutputStream Util.ArrayUtil Util.Bits Util.BytesRef Util.IOUtils Util.IntsRef Util.RamUsageEstimator Util.Fst.ByteSequenceOutputs Util.Fst.FST Util.Fst.Util Util.Packed.PackedInts Lucene.Net.Util.Fst using class Lucene.Net.Codecs.Memory.MemoryPostingsFormat super super PostingsFormat int string float bool string int public override public override return + + + + internal internal = new int public override public override decl_stmt int = - == || > = ++ if == else if == << | else << > = = int int int int public override public override == || decl_stmt int = - >= = decl_stmt int = if = == : if != = << | else << else if >= decl_stmt int = - decl_stmt int = - if != << | else << = = if > public override public override public virtual public virtual == = = = = - return public override public override return int int public override public override == == if != - decl_stmt int = int decl_stmt int = + int if > = = = ++ decl FST public override public override if > if != decl_stmt Lucene.Net.Util.Fst.FST < = call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() return IndexOutput bool string public override public override decl_stmt string = decl_stmt IndexOutput = decl_stmt bool = try = finally if ! return new public override public override return new public override public override try finally internal internal = new public public return == && == public public > if < = = = - = = = = = return int int public override public override while if == return = ++ if == += else decl_stmt int = += uint >> if & != = else = > if == for = < ++ if ! else decl_stmt int = if & != = else if == for = < ++ decl_stmt int = if && & != = if & != if if == || return = public override public override return public override public override return public override public override return public override public override return internal internal = new public public return == && == public public > if < = - = = - = = = = = = = : - = return int int public override public override while > while if == return = ++ decl_stmt int = += uint >> if & != = else = > if == || = = : - = return = for = < ++ if ! else decl_stmt int = if & != = if if & != = if int int public override public override > -- if ! += else decl_stmt int = += uint >> if & != = if decl_stmt int = if & != = += uint >> if = = return public override public override return public override public override return + return > : public override public override return public override public override return public override public override return public override public override return internal internal if ! = if != = + else = - = = = - - = public override public override = = return != public override public override = if == return else = if return else return FSTDocsEnum public override public override decl_stmt FSTDocsEnum if == || ! is = new else = if ! call FSTDocsEnum.CanReuse() call FSTDocsEnum.CanReuse() call FSTDocsEnum.CanReuse() call FSTDocsEnum.CanReuse() call FSTDocsEnum.CanReuse() = new return call FSTDocsEnum.Reset() call FSTDocsEnum.Reset() call FSTDocsEnum.Reset() call FSTDocsEnum.Reset() call FSTDocsEnum.Reset() bool FSTDocsAndPositionsEnum public override public override decl_stmt bool = >= if < return decl_stmt FSTDocsAndPositionsEnum if == || ! is = new else = if ! call FSTDocsAndPositionsEnum.CanReuse() call FSTDocsAndPositionsEnum.CanReuse() call FSTDocsAndPositionsEnum.CanReuse() call FSTDocsAndPositionsEnum.CanReuse() call FSTDocsAndPositionsEnum.CanReuse() = new return call FSTDocsAndPositionsEnum.reset() call FSTDocsAndPositionsEnum.reset() call FSTDocsAndPositionsEnum.reset() call FSTDocsAndPositionsEnum.reset() call FSTDocsAndPositionsEnum.reset() public override public override return public override public override = if == return = return public override public override return public override public override return return public override public override throw new public override public override throw new return return return public override public override return public override public override return new return public override public override return >= public override public override return >= public override public override return >= public override public override return public public return != : var int TermsReader ChecksumIndexInput string public override public override decl_stmt string = decl_stmt Lucene.Net.Store.ChecksumIndexInput = decl_stmt var = new < try while decl_stmt int = call ChecksumIndexInput.ReadVInt() call ChecksumIndexInput.ReadVInt() call ChecksumIndexInput.ReadVInt() call ChecksumIndexInput.ReadVInt() call ChecksumIndexInput.ReadVInt() if == break decl_stmt TermsReader = new call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() finally call ChecksumIndexInput.Dispose() call ChecksumIndexInput.Dispose() call ChecksumIndexInput.Dispose() call ChecksumIndexInput.Dispose() call ChecksumIndexInput.Dispose() return new public override < public override < return < public override public override return return public override public override foreach in = long public override public override decl_stmt long = foreach in += * += return public override public override