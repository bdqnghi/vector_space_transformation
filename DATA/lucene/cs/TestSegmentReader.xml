Lucene.Net.Index System using System.Collections.Generic using NUnit.Framework using Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Lucene.Net.Search.DocIdSetIterator Documents.Document Lucene.Net.Store.IOContext Lucene.Net.Util.LuceneTestCase Lucene.Net.Util.TestUtil class attribute Lucene.Net.Index.TestSegmentReader super super LuceneTestCase Document Directory SegmentReader SegmentCommitInfo public override public override = = new decl_stmt Lucene.Net.Index.SegmentCommitInfo = = new public override public override call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public virtual public virtual != != > == decl IList Document public virtual public virtual == >= decl_stmt Lucene.Net.Documents.Document = call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) != == - decl_stmt System.Collections.Generic.IList < = foreach in != decl ICollection string decl ICollection decl ICollection decl ICollection decl ICollection public virtual public virtual decl_stmt System.Collections.Generic.ICollection < = new < decl_stmt System.Collections.Generic.ICollection < = new < decl_stmt System.Collections.Generic.ICollection < = new < decl_stmt System.Collections.Generic.ICollection < = new < decl_stmt System.Collections.Generic.ICollection < = new < foreach in decl_stmt string = call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() if call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() else call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() if call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() else if call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() == foreach in == || == foreach in == || == == == BytesRef Terms TermsEnum Fields DocsAndPositionsEnum DocsEnum string public virtual public virtual decl_stmt Lucene.Net.Index.Fields = foreach in decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() while call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() != decl_stmt string = string call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() != - decl_stmt Lucene.Net.Index.DocsEnum = new call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != = new call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != decl_stmt DocsAndPositionsEnum = new call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() == call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() >= public virtual public virtual NumericDocValues IndexableField public static public static for = < ++ decl_stmt Lucene.Net.Index.IndexableField = if call Lucene.Net.Index.IndexableField.FieldType() call Lucene.Net.Index.IndexableField.FieldType() call Lucene.Net.Index.IndexableField.FieldType() call Lucene.Net.Index.IndexableField.FieldType() call Lucene.Net.Index.IndexableField.FieldType() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() != ! call Lucene.Net.Index.IndexableField.FieldType() call Lucene.Net.Index.IndexableField.FieldType() call Lucene.Net.Index.IndexableField.FieldType() call Lucene.Net.Index.IndexableField.FieldType() call Lucene.Net.Index.IndexableField.FieldType() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() != ! call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() if call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() == decl_stmt NumericDocValues = call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() call Lucene.Net.Index.IndexableField.Name() int string Fields Terms TermsEnum public virtual public virtual decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() while call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != decl_stmt string = call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() decl_stmt int = int call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() != - > decl_stmt Lucene.Net.Index.Fields = call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) != int public virtual public virtual decl_stmt int = try call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) - catch try call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) - catch try call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) catch try call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) call Lucene.Net.Index.SegmentReader.GetTermVectors(int) catch