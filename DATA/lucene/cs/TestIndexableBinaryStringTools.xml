Lucene.Net.Util NUnit.Framework using System using System.Globalization using System.Text using class attribute attribute Lucene.Net.Util.TestIndexableBinaryStringTools super super LuceneTestCase int int public static public static = = int decl sbyte decl sbyte decl char int public virtual public virtual decl_stmt sbyte = new sbyte unchecked sbyte sbyte unchecked sbyte sbyte sbyte unchecked sbyte unchecked sbyte sbyte sbyte unchecked sbyte unchecked sbyte decl_stmt int = decl_stmt char = new decl_stmt int = decl_stmt sbyte = new + + + + + decl char decl char decl sbyte int int int int int decl sbyte decl char decl char int int public virtual public virtual decl_stmt sbyte = new decl_stmt char = new decl_stmt char = new * decl_stmt sbyte = new decl_stmt char = new decl_stmt char = new * for = < ++ decl_stmt int = - + for = < ++ decl_stmt int = = sbyte = char decl_stmt int = - + for = < ++ decl_stmt int = = sbyte = char decl_stmt int = new new = < - : > : decl_stmt int = if > = new decl_stmt int = if > = new decl_stmt int = new new = < - : > : + + + + + + + + + + + int decl sbyte decl sbyte decl char int public virtual public virtual decl_stmt sbyte = new decl_stmt int = decl_stmt char = new decl_stmt int = decl_stmt sbyte = new int decl sbyte decl sbyte decl char int public virtual public virtual decl_stmt sbyte = new decl_stmt int = decl_stmt char = new decl_stmt int = decl_stmt sbyte = new + + + + decl sbyte int int decl char int decl sbyte public virtual public virtual decl_stmt sbyte = new decl_stmt char = new * decl_stmt sbyte = new for = < ++ decl_stmt int = - + for = < ++ = sbyte decl_stmt int = if < = new decl_stmt int = + + + + + + + + + string StringBuilder public virtual public virtual decl_stmt System.Text.StringBuilder = new for = < ++ decl_stmt string = & if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call string.ToUpper() call string.ToUpper() call string.ToUpper() call string.ToUpper() call string.ToUpper() if < - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) string StringBuilder public virtual public virtual decl_stmt System.Text.StringBuilder = new for = < ++ decl_stmt string = int for = < - ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call string.ToUpper() call string.ToUpper() call string.ToUpper() call string.ToUpper() call string.ToUpper() if < - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int)