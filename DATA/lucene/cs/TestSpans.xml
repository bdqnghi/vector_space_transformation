Lucene.Net.Search.Spans System.Collections.Generic using Lucene.Net.Documents using Lucene.Net.Index using NUnit.Framework using Lucene.Net.Index.AtomicReaderContext Lucene.Net.Search.Similarities.DefaultSimilarity Lucene.Net.Store.Directory Lucene.Net.Index.DirectoryReader Documents.Document Field Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexReaderContext Lucene.Net.Index.IndexWriter Lucene.Net.Index.IndexWriterConfig Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Index.RandomIndexWriter Lucene.Net.Index.ReaderUtil Lucene.Net.Search.Similarities.Similarity Lucene.Net.Index.Term class attribute Lucene.Net.Search.Spans.TestSpans super super LuceneTestCase Directory IndexSearcher string decl string IndexReader Document RandomIndexWriter public override public override = decl_stmt Lucene.Net.Index.RandomIndexWriter = new new for = < ++ decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() = public override public override call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public virtual public virtual return new new private private bool SpanNearQuery private private decl_stmt bool = decl_stmt Lucene.Net.Search.Spans.SpanNearQuery = new new public virtual public virtual public virtual public virtual public virtual public virtual public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new int bool Spans SpanNearQuery public virtual public virtual decl_stmt bool = decl_stmt int = decl_stmt Lucene.Net.Search.Spans.SpanNearQuery = new new decl_stmt Spans = call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() SpanNearQuery Spans SpanNearQuery public virtual public virtual decl_stmt Lucene.Net.Search.Spans.SpanNearQuery = new new decl_stmt Spans = call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() == + call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() decl_stmt Lucene.Net.Search.Spans.SpanNearQuery = new new = new new = call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() == decl SpanQuery private private decl_stmt Lucene.Net.Search.Spans.SpanQuery = new for = < ++ = return new private private SpanOrQuery SpanOrQuery Spans public virtual public virtual decl_stmt Spans = new call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() decl_stmt Lucene.Net.Search.Spans.SpanOrQuery = new decl_stmt Lucene.Net.Search.Spans.SpanOrQuery = new call Lucene.Net.Search.Spans.SpanOrQuery.Equals(object) call Lucene.Net.Search.Spans.SpanOrQuery.Equals(object) call Lucene.Net.Search.Spans.SpanOrQuery.Equals(object) call Lucene.Net.Search.Spans.SpanOrQuery.Equals(object) call Lucene.Net.Search.Spans.SpanOrQuery.Equals(object) Spans public virtual public virtual decl_stmt Spans = new call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() int Spans public virtual public virtual decl_stmt Spans = new call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() decl_stmt int = call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.SkipTo() call Spans.SkipTo() call Spans.SkipTo() call Spans.SkipTo() call Spans.SkipTo() = call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() Spans public virtual public virtual decl_stmt Spans = new call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() Spans public virtual public virtual decl_stmt Spans = new call Spans.SkipTo() call Spans.SkipTo() call Spans.SkipTo() call Spans.SkipTo() call Spans.SkipTo() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() Spans public virtual public virtual decl_stmt Spans = new call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() Spans public virtual public virtual decl_stmt Spans = new call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() int Scorer decl IList AtomicReaderContext IndexReaderContext float SpanNearQuery bool int Similarity Similarity public virtual public virtual decl_stmt bool = decl_stmt int = decl_stmt IndexReaderContext = decl_stmt System.Collections.Generic.IList < = decl_stmt int = for = = < ++ decl_stmt Lucene.Net.Index.AtomicReaderContext = decl_stmt Lucene.Net.Search.Similarity = new decl_stmt Lucene.Net.Search.Similarity = decl_stmt Lucene.Net.Search.Scorer try = decl_stmt Lucene.Net.Search.Spans.SpanNearQuery = new new = call Lucene.Net.Search.IndexSearcher.CreateNormalizedWeight(Query) call Lucene.Net.Search.IndexSearcher.CreateNormalizedWeight(Query) call Lucene.Net.Search.IndexSearcher.CreateNormalizedWeight(Query) call Lucene.Net.Search.IndexSearcher.CreateNormalizedWeight(Query) call Lucene.Net.Search.IndexSearcher.CreateNormalizedWeight(Query) finally = if == call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() != call Scorer.DocID() call Scorer.DocID() call Scorer.DocID() call Scorer.DocID() call Scorer.DocID() + decl_stmt float = call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() == + else call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() == public override public override return Document private private decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) private private return new new private private return new new private private return new private private return new IndexSearcher IndexWriter Directory IndexReader public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new new new call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Lucene.Net.Search.IndexSearcher = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public virtual public virtual SpanTermQuery int SpanTermQuery Spans SpanNotQuery private private decl_stmt Lucene.Net.Search.Spans.SpanTermQuery = new new decl_stmt Lucene.Net.Search.Spans.SpanTermQuery = new new decl_stmt Lucene.Net.Search.Spans.SpanNotQuery = new decl_stmt Spans = decl_stmt int = while call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() ++ return