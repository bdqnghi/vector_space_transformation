Lucene.Net.Codecs.Lucene3x System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Util.ArrayUtil Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Lucene.Net.Index.FieldInfo Lucene.Net.Index.FieldInfos Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexOutput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Util.StringHelper class Lucene.Net.Codecs.Lucene3x.PreFlexRWTermVectorsWriter super super TermVectorsWriter int IndexOutput int bool int string int BytesRef decl int decl int int Directory decl long int string bool public override public override = = call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call decl long.WriteVInt() call decl long.WriteVInt() call decl long.WriteVInt() call decl long.WriteVInt() call decl long.WriteVInt() = = sbyte public override public override == || > + + + = if throw new = = = ++ = call decl long.WriteVInt() call decl long.WriteVInt() call decl long.WriteVInt() call decl long.WriteVInt() call decl long.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() decl_stmt sbyte = if |= if |= call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte <= if == for = < ++ call decl long.WriteVLong() call decl long.WriteVLong() call decl long.WriteVLong() call decl long.WriteVLong() call decl long.WriteVLong() - - int int public override public override decl_stmt int = decl_stmt int = - call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteBytes() call int.WriteBytes() call int.WriteBytes() call int.WriteBytes() call int.WriteBytes() + call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call decl int.CopyBytes() call decl int.CopyBytes() call decl int.CopyBytes() call decl int.CopyBytes() call decl int.CopyBytes() = = if && = = = = public override public override == if && call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() - = = = ++ if == for = < ++ call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() - call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() - = else if call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() - = else if call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() - call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() - = public override public override try catch public override public override if + long * != throw new + + + + + call IndexOutput.ToString() call IndexOutput.ToString() call IndexOutput.ToString() call IndexOutput.ToString() call IndexOutput.ToString() + protected override protected override = = = return