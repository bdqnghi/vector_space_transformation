Lucene.Net.Index System.Collections.Generic using Lucene.Net.Randomized.Generators using NUnit.Framework using Lucene.Net.Util.Counter Lucene.Net.Util.IntBlockPool Lucene.Net.Util.LuceneTestCase Lucene.Net.Util.RamUsageEstimator class attribute Lucene.Net.Index.TestIntBlockPool super super LuceneTestCase int Counter decl IntBlockPool decl SliceWriter int int IntBlockPool public virtual public virtual decl_stmt Lucene.Net.Util.Counter = decl_stmt Lucene.Net.Index.IntBlockPool = new new for = < ++ decl_stmt SliceWriter = new decl_stmt int = call decl IntBlockPool.StartNewSlice() call decl IntBlockPool.StartNewSlice() call decl IntBlockPool.StartNewSlice() call decl IntBlockPool.StartNewSlice() call decl IntBlockPool.StartNewSlice() decl_stmt int = for = < ++ call decl IntBlockPool.WriteInt() call decl IntBlockPool.WriteInt() call decl IntBlockPool.WriteInt() call decl IntBlockPool.WriteInt() call decl IntBlockPool.WriteInt() decl_stmt int = decl_stmt SliceReader = new call int.Reset() call int.Reset() call int.Reset() call int.Reset() call int.Reset() for = < ++ call int.ReadInt() call int.ReadInt() call int.ReadInt() call int.ReadInt() call int.ReadInt() call int.EndOfSlice() call int.EndOfSlice() call int.EndOfSlice() call int.EndOfSlice() call int.EndOfSlice() if call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() else call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() * call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() Counter decl IntBlockPool int int StartEndAndValues decl SliceWriter decl IList decl IntBlockPool IntBlockPool public virtual public virtual decl_stmt Lucene.Net.Util.Counter = decl_stmt Lucene.Net.Index.IntBlockPool = new new for = < ++ decl_stmt System.Collections.Generic.IList < = new < decl_stmt int = for = < ++ call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new decl_stmt SliceWriter = new decl_stmt SliceReader = new decl_stmt int = for = < ++ decl_stmt StartEndAndValues = if == = call decl IntBlockPool.StartNewSlice() call decl IntBlockPool.StartNewSlice() call decl IntBlockPool.StartNewSlice() call decl IntBlockPool.StartNewSlice() call decl IntBlockPool.StartNewSlice() else call decl IntBlockPool.Reset() call decl IntBlockPool.Reset() call decl IntBlockPool.Reset() call decl IntBlockPool.Reset() call decl IntBlockPool.Reset() call decl IntBlockPool.WriteInt() call decl IntBlockPool.WriteInt() call decl IntBlockPool.WriteInt() call decl IntBlockPool.WriteInt() call decl IntBlockPool.WriteInt() call StartEndAndValues.NextValue() call StartEndAndValues.NextValue() call StartEndAndValues.NextValue() call StartEndAndValues.NextValue() call StartEndAndValues.NextValue() = if == while > decl_stmt int = decl_stmt StartEndAndValues = call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() if call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() else call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() call Lucene.Net.Index.IntBlockPool.Reset() * call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() * return new public override public override - - * * private private for = < ++ + public virtual public virtual return + ++