Lucene.Net.Index System using System.Collections.Generic using Lucene.Net.Util using class Lucene.Net.Index.MultipleTermPositions super super TermPositions int IntQueue int bool TermPositionsQueue internal internal return public override public override return < private private = new internal internal if == ++ = internal internal return ++ internal internal - internal internal = = internal internal return - decl int private private decl_stmt int = new * = *= TermPositions public public if call TermPositionsQueue.Size() call TermPositionsQueue.Size() call TermPositionsQueue.Size() call TermPositionsQueue.Size() call TermPositionsQueue.Size() == return call IntQueue.clear() call IntQueue.clear() call IntQueue.clear() call IntQueue.clear() call IntQueue.clear() = call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() decl_stmt Lucene.Net.Index.TermPositions do = call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() for = < ++ call IntQueue.add() call IntQueue.add() call IntQueue.add() call IntQueue.add() call IntQueue.add() call Lucene.Net.Index.TermPositions.NextPosition() call Lucene.Net.Index.TermPositions.NextPosition() call Lucene.Net.Index.TermPositions.NextPosition() call Lucene.Net.Index.TermPositions.NextPosition() call Lucene.Net.Index.TermPositions.NextPosition() if call TermPositions.Next() call TermPositions.Next() call TermPositions.Next() call TermPositions.Next() call TermPositions.Next() call TermPositionsQueue.UpdateTop() call TermPositionsQueue.UpdateTop() call TermPositionsQueue.UpdateTop() call TermPositionsQueue.UpdateTop() call TermPositionsQueue.UpdateTop() else call TermPositionsQueue.Pop() call TermPositionsQueue.Pop() call TermPositionsQueue.Pop() call TermPositionsQueue.Pop() call TermPositionsQueue.Pop() call TermPositions.Close() call TermPositions.Close() call TermPositions.Close() call TermPositions.Close() call TermPositions.Close() call TermPositionsQueue.Size() call TermPositionsQueue.Size() call TermPositionsQueue.Size() call TermPositionsQueue.Size() call TermPositionsQueue.Size() > && call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() == call IntQueue.sort() call IntQueue.sort() call IntQueue.sort() call IntQueue.sort() call IntQueue.sort() = call IntQueue.size() call IntQueue.size() call IntQueue.size() call IntQueue.size() call IntQueue.size() return public public return call IntQueue.next() call IntQueue.next() call IntQueue.next() call IntQueue.next() call IntQueue.next() TermPositions public public while call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() != && > call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() call TermPositionsQueue.Peek() decl_stmt Lucene.Net.Index.TermPositions = call TermPositionsQueue.Pop() call TermPositionsQueue.Pop() call TermPositionsQueue.Pop() call TermPositionsQueue.Pop() call TermPositionsQueue.Pop() if call TermPositions.SkipTo() call TermPositions.SkipTo() call TermPositions.SkipTo() call TermPositions.SkipTo() call TermPositions.SkipTo() call TermPositionsQueue.Add() call TermPositionsQueue.Add() call TermPositionsQueue.Add() call TermPositionsQueue.Add() call TermPositionsQueue.Add() else call TermPositions.Close() call TermPositions.Close() call TermPositions.Close() call TermPositions.Close() call TermPositions.Close() return return return public public public public protected virtual protected virtual if return if while call TermPositionsQueue.Size() call TermPositionsQueue.Size() call TermPositionsQueue.Size() call TermPositionsQueue.Size() call TermPositionsQueue.Size() > call TermPositionsQueue.Pop() call TermPositionsQueue.Pop() call TermPositionsQueue.Pop() call TermPositionsQueue.Pop() call TermPositionsQueue.Pop() = public virtual public virtual throw new public virtual public virtual throw new public virtual public virtual throw new throw new public virtual public virtual throw new return