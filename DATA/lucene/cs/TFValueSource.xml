Lucene.Net.Queries.Function.ValueSources System using System.Collections using System.Collections.Generic using System.IO using Lucene.Net.Index using Lucene.Net.Queries.Function.DocValues using Lucene.Net.Search using Lucene.Net.Search.Similarities using Lucene.Net.Util using class Lucene.Net.Queries.Function.ValueSources.TFValueSource super super TermFreqValueSource return var var var var public override public override decl_stmt var = decl_stmt var = call var.Terms() call var.Terms() call var.Terms() call var.Terms() call var.Terms() decl_stmt var = decl_stmt var = if == throw new return new TermsEnum public virtual public virtual if != decl_stmt Lucene.Net.Index.TermsEnum = if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) else = else = if == = new = - public override public override return public override public override return public override public override return public override public override return public override public override return public override public override try if < = if < = if > return return catch throw new + + +