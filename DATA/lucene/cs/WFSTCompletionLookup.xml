Lucene.Net.Search.Suggest.Fst System using System.Collections.Generic using System.Diagnostics using System.IO using Lucene.Net.Store using Lucene.Net.Util using Lucene.Net.Util.Fst using class Lucene.Net.Search.Suggest.Fst.WFSTCompletionLookup super super Lookup long decl IComparer decl FST bool var var InputIterator long var var BytesRef public override public override if throw new if throw new = decl_stmt var = new decl_stmt Lucene.Net.Search.Suggest.InputIterator = new decl_stmt var = new decl_stmt Lucene.Net.Util.BytesRef = decl_stmt var = decl_stmt var = new < ? while = call InputIterator.Next() call InputIterator.Next() call InputIterator.Next() call InputIterator.Next() call InputIterator.Next() != decl_stmt long = if == = new else if call var.Equals() call var.Equals() call var.Equals() call var.Equals() call var.Equals() continue call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) ++ = call var.Finish() call var.Finish() call var.Finish() call var.Finish() call var.Finish() public override public override if == return call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() return public override public override = = new <> return decl Fst decl Util long BytesRef decl IList decl FST CharsRef int public override < public override < < if != throw new > if throw new if == return < decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt int = decl_stmt Lucene.Net.Util.Fst.FST < ? = new < ? decl_stmt long ? = try = catch throw new if == return decl_stmt System.Collections.Generic.IList < = new < decl_stmt Lucene.Net.Util.CharsRef = new if && call CharsRef.grow() call CharsRef.grow() call CharsRef.grow() call CharsRef.grow() call CharsRef.grow() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() + if -- == return decl_stmt Lucene.Net.Util.Fst.Util < ? = try = ! catch throw new decl_stmt Lucene.Net.Util.BytesRef = new foreach < ? in = call Lucene.Net.Util.BytesRef.Append(BytesRef) call Lucene.Net.Util.BytesRef.Append(BytesRef) call Lucene.Net.Util.BytesRef.Append(BytesRef) call Lucene.Net.Util.BytesRef.Append(BytesRef) call Lucene.Net.Util.BytesRef.Append(BytesRef) call Lucene.Net.Util.CharsRef.Grow(int) call Lucene.Net.Util.CharsRef.Grow(int) call Lucene.Net.Util.CharsRef.Grow(int) call Lucene.Net.Util.CharsRef.Grow(int) call Lucene.Net.Util.CharsRef.Grow(int) call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() return long int decl sbyte int var private ? private ? < ? == long decl_stmt long = decl_stmt var = call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() decl_stmt sbyte = decl_stmt int = decl_stmt int = + while < if call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() ++ & == return else += long return decl Arc long public virtual public virtual if == return decl_stmt Arc < ? = new < ? decl_stmt long ? = try = new catch throw new if == || ! return else return + private static private static return - private static private static if < || || throw new + return - int protected internal override protected internal override < if + >= = + protected internal override protected internal override -= + return public virtual public virtual ? ? return public override public override return == : call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() return