Lucene.Net.Index System using System.Diagnostics using Lucene.Net.Documents using NUnit.Framework using System.IO using Lucene.Net.Store.Directory Documents.Document Field FieldType Lucene.Net.Search.IndexSearcher Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Store.MockDirectoryWrapper NumericDocValuesField Lucene.Net.Index.IndexWriterConfig.OpenMode_e Lucene.Net.Store.RAMDirectory Lucene.Net.Search.ScoreDoc Lucene.Net.Search.TermQuery Lucene.Net.Util.TestUtil TextField class attribute Lucene.Net.Index.TestIndexWriterOnDiskFull super super LuceneTestCase bool bool long IndexWriter MergeScheduler MockDirectoryWrapper public virtual public virtual for = < ++ if + decl_stmt bool = == decl_stmt long = while if + decl_stmt Lucene.Net.Store.MockDirectoryWrapper = new new = decl_stmt Lucene.Net.Index.IndexWriter = new new decl_stmt Lucene.Net.Index.MergeScheduler = if is decl_stmt bool = try for = < ++ if call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) catch if = if if if call Lucene.Net.Index.IndexWriter.Rollback() call Lucene.Net.Index.IndexWriter.Rollback() call Lucene.Net.Index.IndexWriter.Rollback() call Lucene.Net.Index.IndexWriter.Rollback() call Lucene.Net.Index.IndexWriter.Rollback() else try if call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) catch if = call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) if call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() += : else = call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() break decl string IndexWriter string int long int long double bool int Term MockDirectoryWrapper decl IndexReader IndexWriter double IndexReader long int decl Directory int string int decl string long IndexSearcher decl ScoreDoc IOException bool string string long MergeScheduler MockDirectoryWrapper public virtual public virtual decl_stmt string = decl_stmt string = call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() || call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() decl_stmt int = decl_stmt int = : decl_stmt int = + * : decl_stmt Lucene.Net.Store.Directory = new decl_stmt long = for = < ++ = decl_stmt Lucene.Net.Index.IndexWriter = new new for = < ++ * + call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt string = for = < ++ += decl_stmt Lucene.Net.Store.MockDirectoryWrapper = decl_stmt Lucene.Net.Index.IndexWriter = new new for = < ++ call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt Lucene.Net.Index.Term = new decl_stmt Lucene.Net.Index.IndexReader = call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() decl_stmt Lucene.Net.Search.IndexSearcher = decl_stmt Lucene.Net.Search.ScoreDoc = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() decl_stmt long = call MockDirectoryWrapper.SizeInBytes() call MockDirectoryWrapper.SizeInBytes() call MockDirectoryWrapper.SizeInBytes() call MockDirectoryWrapper.SizeInBytes() call MockDirectoryWrapper.SizeInBytes() decl_stmt long = decl_stmt string = call Lucene.Net.Store.MockDirectoryWrapper.ListAll() call Lucene.Net.Store.MockDirectoryWrapper.ListAll() call Lucene.Net.Store.MockDirectoryWrapper.ListAll() call Lucene.Net.Store.MockDirectoryWrapper.ListAll() call Lucene.Net.Store.MockDirectoryWrapper.ListAll() for = < ++ += call Lucene.Net.Store.MockDirectoryWrapper.FileLength(string) call Lucene.Net.Store.MockDirectoryWrapper.FileLength(string) call Lucene.Net.Store.MockDirectoryWrapper.FileLength(string) call Lucene.Net.Store.MockDirectoryWrapper.FileLength(string) call Lucene.Net.Store.MockDirectoryWrapper.FileLength(string) for = < ++ if + decl_stmt long = + decl_stmt int = decl_stmt bool = decl_stmt bool = decl_stmt string if == = else if == = else = while ! if decl_stmt Lucene.Net.Store.MockDirectoryWrapper = new new = new new decl_stmt IOException = decl_stmt Lucene.Net.Index.MergeScheduler = for = < ++ if is if == else decl_stmt double = decl_stmt double = double / decl_stmt long decl_stmt string = if == = * = if >= /= if >= /= if >= = if = + + + + else = = = if = + + if + = = = try if == if + call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) if call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) else if == decl_stmt Lucene.Net.Index.IndexReader = new for = < ++ = try call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) finally for = < ++ else call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) = if if == = catch = = if + if == + if = try = catch + + decl_stmt int = call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() if if != + + + + else if != && != + + + + + + = try = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new catch + + decl_stmt int = if if != + + + + else if != + + + + call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() if + if || == break if + + + + + if - < * + + + + - + + * + + + + + + + = = = call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() += : call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() foreach in call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() var var public override public override if ! return decl_stmt var = new foreach in call var.GetFrames() call var.GetFrames() call var.GetFrames() call var.GetFrames() call var.GetFrames() decl_stmt var = if && ! = throw new if && ! = throw new Document FailTwiceDuringMerge IndexWriter MockDirectoryWrapper public virtual public virtual decl_stmt Lucene.Net.Store.MockDirectoryWrapper = decl_stmt Lucene.Net.Index.IndexWriter = new new new = decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) new call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) decl_stmt FailTwiceDuringMerge = new call FailTwiceDuringMerge.SetDoFail() call FailTwiceDuringMerge.SetDoFail() call FailTwiceDuringMerge.SetDoFail() call FailTwiceDuringMerge.SetDoFail() call FailTwiceDuringMerge.SetDoFail() call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) call Lucene.Net.Store.MockDirectoryWrapper.FailOn(Failure) try call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) catch || call FailTwiceDuringMerge.ClearDoFail() call FailTwiceDuringMerge.ClearDoFail() call FailTwiceDuringMerge.ClearDoFail() call FailTwiceDuringMerge.ClearDoFail() call FailTwiceDuringMerge.ClearDoFail() call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() Document IndexWriter FieldType MockDirectoryWrapper public virtual public virtual decl_stmt Lucene.Net.Store.MockDirectoryWrapper = decl_stmt Lucene.Net.Index.IndexWriter = new new new = decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.FieldType = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) try call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) catch try call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) catch try call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) catch = call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() call Lucene.Net.Store.MockDirectoryWrapper.Dispose() Document private private decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) if call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new Document private private decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) + call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) + if call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new