Lucene.Net.Join System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Index using Lucene.Net.Search using Lucene.Net.Util using class Lucene.Net.Join.ToParentBlockJoinQuery super super Query Query Filter ScoreMode Query public override public override return new call Lucene.Net.Search.Query.CreateWeight(IndexSearcher) call Lucene.Net.Search.Query.CreateWeight(IndexSearcher) call Lucene.Net.Search.Query.CreateWeight(IndexSearcher) call Lucene.Net.Search.Query.CreateWeight(IndexSearcher) call Lucene.Net.Search.Query.CreateWeight(IndexSearcher) return return * * public override public override * int DocIdSet Scorer public override public override decl_stmt Lucene.Net.Search.Scorer = if == return decl_stmt int = call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() call Scorer.NextDoc() if == return decl_stmt Lucene.Net.Search.DocIdSet = if == return if ! is throw new + return new BlockJoinScorer public override public override decl_stmt BlockJoinScorer = if != && call BlockJoinScorer.Advance() call BlockJoinScorer.Advance() call BlockJoinScorer.Advance() call BlockJoinScorer.Advance() call BlockJoinScorer.Advance() == return call BlockJoinScorer.Explain() call BlockJoinScorer.Explain() call BlockJoinScorer.Explain() call BlockJoinScorer.Explain() call BlockJoinScorer.Explain() return new public override public override return return new return return decl int internal virtual internal virtual decl_stmt int = if == = new else = return decl float internal virtual internal virtual if == throw new decl_stmt float = if == = new else = return int float float float public override public override while if == return = = if == throw new + + + != - if != && ! do = < if == throw new + + + continue decl_stmt float = decl_stmt float = = = do if != && == = if != && != && == = if != = if != decl_stmt float = decl_stmt int = if != = = += += ++ = < if == throw new + + + switch case = / break case = break case = break case break return public override public override return public override public override return public override public override return int public override public override if == return = if == return = - >= if > = if == throw new + + + decl_stmt int = return int int public virtual public virtual decl_stmt int = + + decl_stmt int = + - return new public override public override return public virtual public virtual = new if != = new public override public override < call Lucene.Net.Search.Query.ExtractTerms(ISet) call Lucene.Net.Search.Query.ExtractTerms(ISet) call Lucene.Net.Search.Query.ExtractTerms(ISet) call Lucene.Net.Search.Query.ExtractTerms(ISet) call Lucene.Net.Search.Query.ExtractTerms(ISet) Query Query public override public override decl_stmt Lucene.Net.Search.Query = call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) if != decl_stmt Lucene.Net.Search.Query = new = return return public override public override return + + protected protected return && && == && public override public override if return if return if != return return int public override public override unchecked decl_stmt int = = * ^ != call Filter.GetHashCode() call Filter.GetHashCode() call Filter.GetHashCode() call Filter.GetHashCode() call Filter.GetHashCode() : = * ^ int = * ^ != call Lucene.Net.Search.Query.GetHashCode() call Lucene.Net.Search.Query.GetHashCode() call Lucene.Net.Search.Query.GetHashCode() call Lucene.Net.Search.Query.GetHashCode() call Lucene.Net.Search.Query.GetHashCode() : return