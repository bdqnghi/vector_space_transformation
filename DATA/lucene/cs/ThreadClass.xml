Lucene.Net.Support System using System.Threading using class Lucene.Net.Support.ThreadClass super super IThreadRunnable ThreadClass Thread public virtual public virtual public virtual public virtual call Thread.Start() call Thread.Start() call Thread.Start() call Thread.Start() call Thread.Start() public virtual public virtual call Thread.Interrupt() call Thread.Interrupt() call Thread.Interrupt() call Thread.Interrupt() call Thread.Interrupt() return = return if == = public public = try return catch return try = catch return return = public public call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() public public call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() new * public public call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() call Thread.Join() new * + * public public public public call System.Threading.Thread.Abort() call System.Threading.Thread.Abort() call System.Threading.Thread.Abort() call System.Threading.Thread.Abort() call System.Threading.Thread.Abort() public public call System.Threading.Thread.Abort() call System.Threading.Thread.Abort() call System.Threading.Thread.Abort() call System.Threading.Thread.Abort() call System.Threading.Thread.Abort() public public public override public override return + + + + public static public static return public static public static int public static public static if == = new = return public static public static public static if object == return == return public static public static public static return ! == public override public override if == return if is return return public override public override return return