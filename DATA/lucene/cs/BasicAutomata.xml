Lucene.Net.Util.Automaton Lucene.Net.Support using System using System.Collections.Generic using System.Text using class Lucene.Net.Util.Automaton.BasicAutomata Automaton State public static public static decl_stmt Lucene.Net.Util.Automaton.Automaton = new decl_stmt Lucene.Net.Util.Automaton.State = new = = return Automaton public static public static decl_stmt Lucene.Net.Util.Automaton.Automaton = new = = return Automaton State public static public static decl_stmt Lucene.Net.Util.Automaton.Automaton = new decl_stmt Lucene.Net.Util.Automaton.State = new = = call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new = return public static public static return Automaton public static public static decl_stmt Lucene.Net.Util.Automaton.Automaton = new = new = return Automaton State State public static public static if == return decl_stmt Lucene.Net.Util.Automaton.Automaton = new decl_stmt Lucene.Net.Util.Automaton.State = new decl_stmt Lucene.Net.Util.Automaton.State = new = = if <= call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new = return State private static private static decl_stmt Lucene.Net.Util.Automaton.State = new if == = else call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new + return State char private static private static < decl_stmt Lucene.Net.Util.Automaton.State = new if == = else if decl_stmt char = call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new + && == if < call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new + + return State char private static private static decl_stmt Lucene.Net.Util.Automaton.State = new if == = else decl_stmt char = call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new char + if > call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new - + return State char char private static private static < decl_stmt Lucene.Net.Util.Automaton.State = new if == = else if decl_stmt char = decl_stmt char = if == call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new + && == else call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new + && == call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new + if + < call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new + - + return Automaton decl List int string string StringBuilder StringBuilder decl ICollection public static public static decl_stmt Lucene.Net.Util.Automaton.Automaton = new decl_stmt string = decl_stmt string = if > || > && > throw new decl_stmt int if > = else = decl_stmt System.Text.StringBuilder = new for = < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) decl_stmt System.Text.StringBuilder = new for = < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) decl_stmt System.Collections.Generic.ICollection < = new < = <= if <= decl_stmt System.Collections.Generic.List < = new < foreach in if != call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new call Automaton.Initial() call Automaton.Initial() call Automaton.Initial() call Automaton.Initial() call Automaton.Initial() call Automaton.Initial() call Automaton.Initial() call Automaton.Initial() call Automaton.Initial() new = else = call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() call Lucene.Net.Util.Automaton.Automaton.CheckMinimizeAlways() return Automaton public static public static decl_stmt Lucene.Net.Util.Automaton.Automaton = new = = return Automaton State State public static public static decl_stmt Lucene.Net.Util.Automaton.Automaton = new = decl_stmt Lucene.Net.Util.Automaton.State = new = for = < + ++ decl_stmt Lucene.Net.Util.Automaton.State = new call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new = = return public static public static < if == return else return