Lucene.Net.Util System.Collections.Generic using System.Linq using System.Text using Lucene.Net.Search using Lucene.Net.Store.AlreadyClosedException Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexReaderContext class Lucene.Net.Util.FieldCacheSanityChecker bool = public static public static return FieldCacheSanityChecker public static public static params params params params params decl_stmt Lucene.Net.Util.FieldCacheSanityChecker = new = return call Lucene.Net.Util.FieldCacheSanityChecker.Check(FieldCache,CacheEntry) call Lucene.Net.Util.FieldCacheSanityChecker.Check(FieldCache,CacheEntry) call Lucene.Net.Util.FieldCacheSanityChecker.Check(FieldCache,CacheEntry) call Lucene.Net.Util.FieldCacheSanityChecker.Check(FieldCache,CacheEntry) call Lucene.Net.Util.FieldCacheSanityChecker.Check(FieldCache,CacheEntry) decl CacheEntry decl ISet decl MapOfSets decl FieldCache object ReaderField decl MapOfSets int public public params params params params params if == || == return new if for = < ++ decl_stmt Lucene.Net.Util.MapOfSets < = new < new < < decl_stmt Lucene.Net.Util.MapOfSets < = new < new < < decl_stmt System.Collections.Generic.ISet < = new < for = < ++ decl_stmt CacheEntry = decl_stmt object = if is continue if is continue decl_stmt ReaderField = new decl_stmt int = call decl CacheEntry.GetHashCode() call decl CacheEntry.GetHashCode() call decl CacheEntry.GetHashCode() call decl CacheEntry.GetHashCode() call decl CacheEntry.GetHashCode() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.Put() if < call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() decl_stmt System.Collections.Generic.List < = new < * call int.AddRange() call int.AddRange() call int.AddRange() call int.AddRange() call int.AddRange() call int.AddRange() call int.AddRange() call int.AddRange() call int.AddRange() call int.AddRange() return call int.ToArray() call int.ToArray() call int.ToArray() call int.ToArray() call int.ToArray() decl IList decl IDictionary decl IDictionary decl FieldCache decl List private < private < < < < decl_stmt System.Collections.Generic.List < = new < * if != decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = foreach in decl_stmt System.Collections.Generic.IList < = new < * foreach in foreach in call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt CacheEntry = new = call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new + return decl MapOfSets decl HashSet decl List decl FieldCache decl IDictionary decl IDictionary decl List decl HashSet ReaderField decl Dictionary private < private < < < decl_stmt System.Collections.Generic.List < = new < decl_stmt org.apache.lucene.analysis.hunspell.Dictionary < < = new < < decl_stmt Lucene.Net.Util.MapOfSets < = new < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = decl_stmt System.Collections.Generic.HashSet < = new < foreach in if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() continue decl_stmt System.Collections.Generic.IList < = foreach in decl_stmt ReaderField = new if call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.PutAll() call decl MapOfSets.PutAll() call decl MapOfSets.PutAll() call decl MapOfSets.PutAll() call decl MapOfSets.PutAll() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() else if call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl MapOfSets.Put() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() foreach in decl_stmt System.Collections.Generic.HashSet < = decl_stmt System.Collections.Generic.List < = new < * foreach in call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() foreach in foreach in call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() decl_stmt CacheEntry = new = call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new + return var var var var private < private < decl_stmt var = new < for = < ++ decl_stmt var = decl_stmt var = as if != try decl_stmt var = if != foreach in call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() catch return call var.GetRange() call var.GetRange() call var.GetRange() call var.GetRange() call var.GetRange() - public override public override return * ReaderField public override public override if ! is return decl_stmt ReaderField = return == && public override public override return + + return return return string StringBuilder decl FieldCache public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt string = if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt CacheEntry = for = < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public override public override return