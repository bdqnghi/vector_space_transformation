Lucene.Net.Index System using System.Collections.Generic using Lucene.Net.Documents using Lucene.Net.Store using Lucene.Net.Util using NUnit.Framework using Lucene.Net.Search.DocIdSetIterator class attribute Lucene.Net.Index.TestStressAdvance super super LuceneTestCase decl IList Field int decl Document decl Documents TermsEnum DirectoryReader decl HashSet Field int RandomIndexWriter decl IList decl int Directory public virtual public virtual for = < ++ if + decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.Field = call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() decl_stmt Lucene.Net.Documents.Field = call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() decl_stmt int = if + for = < ++ if == = call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() else = = + call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) if + call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt int = new for = < ++ decl_stmt int = call decl IList.Document() call decl IList.Document() call decl IList.Document() call decl IList.Document() call decl IList.Document() if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() else call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt Lucene.Net.Index.TermsEnum = decl_stmt Lucene.Net.Index.DocsEnum = for = < ++ if + + + call int.SeekCeil() call int.SeekCeil() call int.SeekCeil() call int.SeekCeil() call int.SeekCeil() new = call int.SeekCeil() call int.SeekCeil() call int.SeekCeil() call int.SeekCeil() call int.SeekCeil() new = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call decl IList.Dispose() call decl IList.Dispose() call decl IList.Dispose() call decl IList.Dispose() call decl IList.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() int int int private private < if decl_stmt int = - while < if + + + decl_stmt int if == || == - if ++ = else decl_stmt int = - - if + += = if == if + + + else if + + + != int