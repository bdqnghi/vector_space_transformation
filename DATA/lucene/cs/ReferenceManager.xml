Lucene.Net.Search System.Collections.Generic using System.Diagnostics using Lucene.Net.Support using System using Lucene.Net.Store.AlreadyClosedException class super super IDisposable where comment string G decl ISet ReentrantLock private private if == throw new G private private lock decl_stmt G = = G public public decl_stmt G do if = == throw new if return if == && object == object != throw new public public lock if != protected internal virtual protected internal virtual G G bool private private call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() decl_stmt bool = try decl_stmt G = try decl_stmt G = if != object != object try = finally if ! finally finally call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() bool public public decl_stmt bool = call Lucene.Net.Support.ReentrantLock.TryLock() call Lucene.Net.Support.ReentrantLock.TryLock() call Lucene.Net.Support.ReentrantLock.TryLock() call Lucene.Net.Support.ReentrantLock.TryLock() call Lucene.Net.Support.ReentrantLock.TryLock() if try finally call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() return public public call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() try finally call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() protected internal virtual protected internal virtual public public != private private foreach in private private foreach in public virtual public virtual if == throw new call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() public virtual public virtual if == throw new call decl ISet.Remove() call decl ISet.Remove() call decl ISet.Remove() call decl ISet.Remove() call decl ISet.Remove()