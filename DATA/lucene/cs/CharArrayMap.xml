Lucene.Net.Analysis.Util System using System.Collections using System.Collections.Generic using System.Diagnostics using System.Text using Lucene.Net.Support using Lucene.Net.Util using class super int decl CharArrayMap decl char EntrySet bool CharArraySet int decl V CharacterUtils LuceneVersion public public < public virtual public virtual = default public public < throw new public virtual public virtual return != public virtual public virtual return != var var public virtual public virtual decl_stmt var = as if != decl_stmt var = return return public public public virtual public virtual return public virtual public virtual return var public virtual public virtual decl_stmt var = as if != return return decl char int int int private private decl_stmt int = decl_stmt int = & - decl_stmt char = if != && ! decl_stmt int = >> + | do += = & - = != && ! return decl char int int int private private decl_stmt int = decl_stmt int = & - decl_stmt char = if != && ! decl_stmt int = >> + | do += = & - = != && ! return public virtual public virtual return var public virtual public virtual decl_stmt var = as if != return return public virtual public virtual return int V public virtual public virtual if call CharacterUtils.ToLower() call CharacterUtils.ToLower() call CharacterUtils.ToLower() call CharacterUtils.ToLower() call CharacterUtils.ToLower() decl_stmt int = if != decl_stmt V = = return = = ++ if + >> > return default decl char decl V int int decl char private private == decl_stmt int = * decl_stmt char = decl_stmt V = = new = new for = < ++ decl_stmt char = if != decl_stmt int = = = int var private private if != return decl_stmt int = + if for = < decl_stmt var = call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) + if char != call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) return += else for = < ++ if + != return return int int private private decl_stmt int = if != return if for = < decl_stmt int = call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) if char != call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) return += else for = < ++ if != return return int int int private private if == throw new decl_stmt int = decl_stmt int = + if for = < decl_stmt int = call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) = * + char += else for = < ++ = * + return int int int private private if == throw new decl_stmt int = decl_stmt int = if for = < decl_stmt int = call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) call Lucene.Net.Analysis.Util.CharacterUtils.CodePointAt(char,int,int) = * + char += else for = < ++ = * + return public virtual public virtual throw new public public out out throw new return throw new public public < throw new return var public override public override decl_stmt var = new foreach < in if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() internal virtual internal virtual return new public public if == = return internal < internal < return public public if == = new return public override public override throw new public public throw new public override public override throw new public override public override throw new internal internal = ++ while < && == ++ public public return < public virtual public virtual return public virtual public virtual return new public virtual public virtual return V public virtual public virtual if ! throw new decl_stmt V = = return public < public < return new public public throw new public public public public if ! return return public public = - return new < private private return return return V public public if ! throw new decl_stmt V = = return public override public override return new == : public public return new var object object object public override public override if ! is return decl_stmt var = < decl_stmt object = decl_stmt object = decl_stmt object = return == == : call object.Equals() call object.Equals() call object.Equals() call object.Equals() call object.Equals() public public < throw new return private private throw new public public if ! throw new public static < public static < public static < < < if == throw new if == || return if is return return new < var var var public static < public static < < if == return if is decl_stmt var = < decl_stmt var = new decl_stmt var = new = new < = = return return new < public static < public static < return public override public override throw new public override public override throw new public override public override throw new public override public override throw new public override public override throw new public override public override throw new override override return new public override public override if == throw new return public public if == throw new return public override public override if == throw new return public override public override if == throw new return default public public if == throw new return default public override public override if == throw new return default