Lucene.Net.Index Lucene.Net.Support using System using System.Collections.Generic using System.IO using Lucene.Net.Codecs.CodecUtil Lucene.Net.Store.Directory Lucene.Net.Store.IndexInput Lucene.Net.Store.IndexOutput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Index.IndexWriterConfig.OpenMode_e class Lucene.Net.Index.PersistentSnapshotDeletionPolicy super super SnapshotDeletionPolicy int string string long int Directory IndexCommit bool public override public override lock decl_stmt Lucene.Net.Index.IndexCommit = decl_stmt bool = try = finally if ! try catch return bool public override public override lock decl_stmt bool = try = finally if ! try catch public virtual public virtual lock IndexOutput string bool string private private lock decl_stmt string = + decl_stmt IndexOutput = call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() decl_stmt bool = try call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() foreach < in call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() = finally if ! try call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() catch else call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() new if > decl_stmt string = + - try call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() catch ++ private private lock foreach in call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() if call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() if == return else return + - int long int decl IDictionary string IndexInput long IOException decl IList long private private lock decl_stmt long = - decl_stmt IOException = decl_stmt System.Collections.Generic.IList < = new < foreach in call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() if decl_stmt long = if == - || > call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() try decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() for = < ++ decl_stmt long = call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = catch if == = finally call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() = if == - if != throw else if > decl_stmt string = + foreach in if ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() = +