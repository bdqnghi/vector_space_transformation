Lucene.Net.Index Apache.NMS.Util using System using System.Collections.Generic using System.Threading using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Util.LuceneTestCase class attribute Lucene.Net.Index.TestDocumentsWriterStallControl super super LuceneTestCase decl ThreadClass DocumentsWriterStallControl public virtual public virtual decl_stmt Lucene.Net.Index.DocumentsWriterStallControl = new call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) decl_stmt Lucene.Net.Support.ThreadClass = call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) = call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() decl ThreadClass int long DocumentsWriterStallControl public virtual public virtual decl_stmt Lucene.Net.Index.DocumentsWriterStallControl = new call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) decl_stmt Lucene.Net.Support.ThreadClass = new for = < ++ decl_stmt int = + = new decl_stmt long = while - < * && ! call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) if else int public override public override decl_stmt int = for = < ++ == if == int int DocumentsWriterStallControl int AtomicBoolean var float AtomicBoolean var decl IList int public virtual public virtual decl_stmt Lucene.Net.Index.DocumentsWriterStallControl = new call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) decl_stmt Lucene.Net.Support.AtomicBoolean = new decl_stmt Lucene.Net.Support.AtomicBoolean = new decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt var = new + + + decl_stmt var = new + + decl_stmt System.Collections.Generic.IList < = new < for = < ++ = new for = < + ++ = new for = + < + + ++ = new decl_stmt int = decl_stmt float = : for = < ++ if call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() new if > foreach in if call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() call Lucene.Net.Index.DocumentsWriterStallControl.HasBlocked() && call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call var.Waiter() call var.Waiter() call var.Waiter() call var.Waiter() call var.Waiter() call var.Waiter() call var.Waiter() call var.Waiter() call var.Waiter() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() if >= float call var.Reset() call var.Reset() call var.Reset() call var.Reset() call var.Reset() + + + call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) if ! call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call var.Reset() call var.Reset() call var.Reset() call var.Reset() call var.Reset() + + + call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() call var.UpdateJoin() new call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call var.Waiter() call var.Waiter() call var.Waiter() call var.Waiter() call var.Waiter() call var.Waiter() call var.Waiter() call var.Waiter() call var.Waiter() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() call var.LeftCheckpoint() for = < ++ call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) if && is if == + call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() int private private decl_stmt int = while if && for = + < + + ++ if if < *= break else break else break public override public override try while ! if try catch + throw new catch int public override public override try while ! decl_stmt int = && : for = < ++ if try catch + throw new if catch public static public static foreach in if != return return public static public static foreach in public static public static foreach in decl ThreadClass public static public static decl_stmt Lucene.Net.Support.ThreadClass = new for = < ++ = new return public override public override bool public static public static params params params while decl_stmt bool = foreach in if != = break if return if else public public = new = new = new public public return new