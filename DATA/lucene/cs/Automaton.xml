Lucene.Net.Util.Automaton Lucene.Net.Support using System using System.Collections using System.Collections.Generic using System.Diagnostics using System.Linq using System.Text using class Lucene.Net.Util.Automaton.Automaton super super ICloneable object string bool decl State State int bool int bool = = bool public static public static decl_stmt bool = = return return = internal virtual internal virtual if return != return return = return = = return int decl State State Transition decl HashSet decl LinkedList decl State if == decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt System.Collections.Generic.LinkedList < = new < decl_stmt Lucene.Net.Util.Automaton.State = new decl_stmt int = call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() = = ++ while > decl_stmt Lucene.Net.Util.Automaton.State = call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() for = < ++ decl_stmt Lucene.Net.Util.Automaton.Transition = if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() = if == decl_stmt Lucene.Net.Util.Automaton.State = new + = = ++ if != decl_stmt Lucene.Net.Util.Automaton.State = new = = return decl State public virtual public virtual <= if < decl_stmt Lucene.Net.Util.Automaton.State = new = else = public virtual public virtual = decl HashSet State decl LinkedList decl HashSet decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt System.Collections.Generic.LinkedList < = new < call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() while > decl_stmt Lucene.Net.Util.Automaton.State = call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() if call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() foreach in if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() return State int internal virtual internal virtual decl_stmt Lucene.Net.Util.Automaton.State = new call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new foreach in decl_stmt int = foreach in if > new - if + > = + if <= new public virtual public virtual decl State public virtual public virtual decl_stmt Lucene.Net.Util.Automaton.State = if return foreach in decl State decl HashSet decl int int decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt System.Collections.Generic.HashSet < = new < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() foreach in foreach in call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() if < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() + decl_stmt int = new decl_stmt int = foreach in ++ = return decl State decl LinkedList decl HashSet State decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt System.Collections.Generic.HashSet < = new < foreach in if call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt System.Collections.Generic.HashSet < = new < foreach in if call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() for = < ++ = new < foreach in for = < ++ decl_stmt System.Collections.Generic.LinkedList < = new < while > decl_stmt Lucene.Net.Util.Automaton.State = call State.RemoveFirst() call State.RemoveFirst() call State.RemoveFirst() call State.RemoveFirst() call State.RemoveFirst() foreach in if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call State.AddLast() call State.AddLast() call State.AddLast() call State.AddLast() call State.AddLast() return call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() decl State BitArray decl State int Transition public virtual public virtual decl_stmt Lucene.Net.Util.Automaton.State = if return decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt System.Collections.System.Collections.Generic.BitArray = new foreach in call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() call BitArray.SafeSet() foreach in decl_stmt int = for = < ++ decl_stmt Lucene.Net.Util.Automaton.Transition = if call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeGet() call BitArray.SafeGet() ++ = = for = < ++ = if > = else decl State decl Transition decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt Lucene.Net.Util.Automaton.Transition = new foreach in = != return State State public virtual public virtual if decl_stmt Lucene.Net.Util.Automaton.State = new = for = = < += decl_stmt Lucene.Net.Util.Automaton.State = new call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new = = = = = if return return int if return decl_stmt int = foreach in += return public override public override throw new decl int decl State int StringBuilder public override public override decl_stmt System.Text.StringBuilder = new if call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt int = decl_stmt int = new for = = = < += ++ = = foreach in call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else decl_stmt Lucene.Net.Util.Automaton.State = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) foreach in call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) decl State StringBuilder public virtual public virtual decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt Lucene.Net.Util.Automaton.State = foreach in call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) foreach in call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) Automaton public virtual public virtual decl_stmt Lucene.Net.Util.Automaton.Automaton = call Lucene.Net.Util.Automaton.Automaton.ExpandSingleton() call Lucene.Net.Util.Automaton.Automaton.ExpandSingleton() call Lucene.Net.Util.Automaton.Automaton.ExpandSingleton() call Lucene.Net.Util.Automaton.Automaton.ExpandSingleton() call Lucene.Net.Util.Automaton.Automaton.ExpandSingleton() return internal virtual internal virtual if return else return Automaton decl State decl Dictionary State public public decl_stmt Lucene.Net.Util.Automaton.Automaton = if ! decl_stmt org.apache.lucene.analysis.hunspell.Dictionary < = new < decl_stmt Lucene.Net.Util.Automaton.State = foreach in = new foreach in decl_stmt Lucene.Net.Util.Automaton.State = = if == = foreach in call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() call Lucene.Net.Util.Automaton.Automaton.ClearNumberedStates() return internal virtual internal virtual if return else return public virtual public virtual return public static public static < return public virtual public virtual return public virtual public virtual return public virtual public virtual return public virtual public virtual return public virtual public virtual return public virtual public virtual return public virtual public virtual return public virtual public virtual return public virtual public virtual return public static public static < return public virtual public virtual return public static public static return