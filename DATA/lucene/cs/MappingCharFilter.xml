Lucene.Net.Analysis System.Collections.Generic using class Lucene.Net.Analysis.MappingCharFilter super super BaseCharFilter decl LinkedList int decl System decl String NormalizeCharMap NormalizeCharMap int NormalizeCharMap int public override public override while if != && < return ++ decl_stmt int = if == - return - decl_stmt Lucene.Net.Analysis.CharFilters.NormalizeCharMap = != char : if == return decl_stmt Lucene.Net.Analysis.CharFilters.NormalizeCharMap = if == return = = if != decl_stmt int = if < for = < - ++ + - - - else - - + char private private ++ if != && != decl_stmt char = call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() return return private private -- if == = new < call decl LinkedList.AddFirst() call decl LinkedList.AddFirst() call decl LinkedList.AddFirst() call decl LinkedList.AddFirst() call decl LinkedList.AddFirst() char private private if == = new < call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() char int NormalizeCharMap NormalizeCharMap private private decl_stmt Lucene.Net.Analysis.CharFilters.NormalizeCharMap = if != decl_stmt int = if != - decl_stmt Lucene.Net.Analysis.CharFilters.NormalizeCharMap = char if != = if == if == && != = return var int int public override public override decl_stmt var = new decl_stmt int = if != for = < ++ = for = < + ++ decl_stmt int = if == - break = char ++ return == - :