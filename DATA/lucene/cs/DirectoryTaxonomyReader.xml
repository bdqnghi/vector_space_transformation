Lucene.Net.Facet.Taxonomy.Directory System using System.Collections.Generic using System.IO using System.Text using Lucene.Net.Store using Lucene.Net.Documents.Document Lucene.Net.Facet.Taxonomy using Lucene.Net.Index.CorruptIndexException Lucene.Net.Index.DirectoryReader Lucene.Net.Index.DocsEnum Lucene.Net.Index.IndexWriter Lucene.Net.Index.MultiFields Lucene.Net.Search.DocIdSetIterator Lucene.Net.Store.Directory Lucene.Net.Util.BytesRef Lucene.Net.Util.IOUtils class Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyReader super super TaxonomyReader super IDisposable DirectoryReader DirectoryTaxonomyWriter decl LRUHashMap long TaxonomyIndexArrays int decl LRUHashMap TaxonomyIndexArrays private private lock if == decl_stmt Lucene.Net.Facet.Taxonomy.Directory.TaxonomyIndexArrays = new = protected internal override protected internal override call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() = = = bool var bool string string DirectoryTaxonomyReader protected override protected override decl_stmt var = if == return decl_stmt bool = try decl_stmt bool = if == decl_stmt string = decl_stmt string = if == if != = else if ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() = else if != = decl_stmt Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyReader if = new else = new = return finally if ! protected virtual protected virtual return protected virtual protected virtual return return if == return return IntClass int DocsEnum public override public override if == return lock decl_stmt IntClass = call decl LRUHashMap.Get() call decl LRUHashMap.Get() call decl LRUHashMap.Get() call decl LRUHashMap.Get() call decl LRUHashMap.Get() if != && != if int < return int else return decl_stmt int = decl_stmt Lucene.Net.Index.DocsEnum = new if != && call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != = call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() lock call decl LRUHashMap.Put() call decl LRUHashMap.Put() call decl LRUHashMap.Put() call decl LRUHashMap.Put() call decl LRUHashMap.Put() new = return var Document FacetLabel int public override public override if < || >= return decl_stmt int = lock decl_stmt var = call decl LRUHashMap.Get() call decl LRUHashMap.Get() call decl LRUHashMap.Get() call decl LRUHashMap.Get() call decl LRUHashMap.Get() if != return decl_stmt Lucene.Net.Documents.Document = call DirectoryReader.Document() call DirectoryReader.Document() call DirectoryReader.Document() call DirectoryReader.Document() call DirectoryReader.Document() decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = new call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) lock call decl LRUHashMap.Put() call decl LRUHashMap.Put() call decl LRUHashMap.Put() call decl LRUHashMap.Put() call decl LRUHashMap.Put() return return lock = lock = FacetLabel StringBuilder int public virtual public virtual decl_stmt System.Text.StringBuilder = new decl_stmt int = for = < ++ try decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + continue if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + continue call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + + call FacetLabel.ToString() call FacetLabel.ToString() call FacetLabel.ToString() call FacetLabel.ToString() call FacetLabel.ToString() + catch throw return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public public