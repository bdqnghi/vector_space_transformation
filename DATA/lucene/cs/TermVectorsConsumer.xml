Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Util.ArrayUtil Lucene.Net.Util.BytesRef Lucene.Net.Store.FlushInfo Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Util.RamUsageEstimator Lucene.Net.Codecs.TermVectorsWriter class Lucene.Net.Index.TermVectorsConsumer super super TermsHashConsumer ByteSliceReader int BytesRef TermVectorsWriter bool ByteSliceReader decl TermVectorsConsumerPerField DocumentsWriterPerThread int decl DocState decl DocumentsWriterPerThread int TermVectorsConsumerPerField public override public override < if != decl_stmt int = > try != call TermVectorsWriter.Finish() call TermVectorsWriter.Finish() call TermVectorsWriter.Finish() call TermVectorsWriter.Finish() call TermVectorsWriter.Finish() finally = = = foreach in decl_stmt Lucene.Net.Index.TermVectorsConsumerPerField = call TermVectorsConsumerPerField.TermsHashPerField() call TermVectorsConsumerPerField.TermsHashPerField() call TermVectorsConsumerPerField.TermsHashPerField() call TermVectorsConsumerPerField.TermsHashPerField() call TermVectorsConsumerPerField.TermsHashPerField() call TermVectorsConsumerPerField.TermsHashPerField() call TermVectorsConsumerPerField.TermsHashPerField() call TermVectorsConsumerPerField.TermsHashPerField() call TermVectorsConsumerPerField.TermsHashPerField() call Lucene.Net.Index.TermVectorsConsumerPerField.ShrinkHash() call Lucene.Net.Index.TermVectorsConsumerPerField.ShrinkHash() call Lucene.Net.Index.TermVectorsConsumerPerField.ShrinkHash() call Lucene.Net.Index.TermVectorsConsumerPerField.ShrinkHash() call Lucene.Net.Index.TermVectorsConsumerPerField.ShrinkHash() internal internal while < call TermVectorsWriter.StartDocument() call TermVectorsWriter.StartDocument() call TermVectorsWriter.StartDocument() call TermVectorsWriter.StartDocument() call TermVectorsWriter.StartDocument() call Lucene.Net.Index.TermVectorsWriter.FinishDocument() call Lucene.Net.Index.TermVectorsWriter.FinishDocument() call Lucene.Net.Index.TermVectorsWriter.FinishDocument() call Lucene.Net.Index.TermVectorsWriter.FinishDocument() call Lucene.Net.Index.TermVectorsWriter.FinishDocument() ++ IOContext private private if == decl_stmt Lucene.Net.Store.IOContext = new new call DocumentsWriterPerThread.BytesUsed() call DocumentsWriterPerThread.BytesUsed() call DocumentsWriterPerThread.BytesUsed() call DocumentsWriterPerThread.BytesUsed() call DocumentsWriterPerThread.BytesUsed() = call DocumentsWriterPerThread.Codec() call DocumentsWriterPerThread.Codec() call DocumentsWriterPerThread.Codec() call DocumentsWriterPerThread.Codec() call DocumentsWriterPerThread.Codec() call DocumentsWriterPerThread.Codec() call DocumentsWriterPerThread.Codec() call DocumentsWriterPerThread.Codec() call DocumentsWriterPerThread.Codec() = public override public override call Lucene.Net.Index.DocumentsWriterPerThread.TestPoint(string) call Lucene.Net.Index.DocumentsWriterPerThread.TestPoint(string) call Lucene.Net.Index.DocumentsWriterPerThread.TestPoint(string) call Lucene.Net.Index.DocumentsWriterPerThread.TestPoint(string) call Lucene.Net.Index.DocumentsWriterPerThread.TestPoint(string) if ! return call TermVectorsWriter.StartDocument() call TermVectorsWriter.StartDocument() call TermVectorsWriter.StartDocument() call TermVectorsWriter.StartDocument() call TermVectorsWriter.StartDocument() for = < ++ call Lucene.Net.Index.TermVectorsWriter.FinishDocument() call Lucene.Net.Index.TermVectorsWriter.FinishDocument() call Lucene.Net.Index.TermVectorsWriter.FinishDocument() call Lucene.Net.Index.TermVectorsWriter.FinishDocument() call Lucene.Net.Index.TermVectorsWriter.FinishDocument() == + + + ++ call Lucene.Net.Index.DocumentsWriterPerThread.TestPoint(string) call Lucene.Net.Index.DocumentsWriterPerThread.TestPoint(string) call Lucene.Net.Index.DocumentsWriterPerThread.TestPoint(string) call Lucene.Net.Index.DocumentsWriterPerThread.TestPoint(string) call Lucene.Net.Index.DocumentsWriterPerThread.TestPoint(string) public override public override = if != call TermVectorsWriter.Abort() call TermVectorsWriter.Abort() call TermVectorsWriter.Abort() call TermVectorsWriter.Abort() call TermVectorsWriter.Abort() = = internal internal = public override public override return new int decl TermVectorsConsumerPerField internal internal if == decl_stmt int = + decl_stmt Lucene.Net.Index.TermVectorsConsumerPerField = new = ++ = public override public override internal internal = return internal internal try return != call decl TermVectorsConsumerPerField.CompareTo() call decl TermVectorsConsumerPerField.CompareTo() call decl TermVectorsConsumerPerField.CompareTo() call decl TermVectorsConsumerPerField.CompareTo() call decl TermVectorsConsumerPerField.CompareTo() < : finally =