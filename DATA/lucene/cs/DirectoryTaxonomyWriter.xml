Lucene.Net.Facet.Taxonomy.Directory System using System.Collections using System.Collections.Concurrent using System.Diagnostics using System.Collections.Generic using System.IO using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Store using Lucene.Net.Support using Lucene.Net.Util using Lucene.Net.Analysis.TokenStream Lucene.Net.Analysis.Tokenattributes.CharTermAttribute Lucene.Net.Analysis.Tokenattributes.PositionIncrementAttribute Lucene.Net.Documents.Document Lucene.Net.Documents.Field Lucene.Net.Documents.FieldType Lucene.Net.Documents.StringField Lucene.Net.Documents.TextField Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache Lucene.Net.Facet.Taxonomy.WriterCache.Cl2oTaxonomyWriterCache Lucene.Net.Facet.Taxonomy.WriterCache.LruTaxonomyWriterCache Lucene.Net.Index.AtomicReader Lucene.Net.Index.AtomicReaderContext Lucene.Net.Index.CorruptIndexException Lucene.Net.Index.DirectoryReader Lucene.Net.Index.DocsEnum Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexWriter Lucene.Net.Index.IndexWriterConfig.OpenMode_e Lucene.Net.Index.IndexWriterConfig Lucene.Net.Index.LogByteSizeMergePolicy Lucene.Net.Index.ReaderManager Lucene.Net.Index.SegmentInfos Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum Lucene.Net.Index.TieredMergePolicy Lucene.Net.Store.AlreadyClosedException Lucene.Net.Store.Directory Lucene.Net.Store.LockObtainFailedException Lucene.Net.Store.NativeFSLockFactory Lucene.Net.Store.SimpleFSLockFactory Lucene.Net.Util.BytesRef class Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter super super TaxonomyWriter bool ReaderManager Field bool bool TaxonomyWriterCache SinglePositionTokenStream AtomicInteger bool IndexWriter TaxonomyIndexArrays int bool long int Field string Directory SegmentInfos private static < private static < decl_stmt Lucene.Net.Index.SegmentInfos = new call Lucene.Net.Index.SegmentInfos.Read(Directory) call Lucene.Net.Index.SegmentInfos.Read(Directory) call Lucene.Net.Index.SegmentInfos.Read(Directory) call Lucene.Net.Index.SegmentInfos.Read(Directory) call Lucene.Net.Index.SegmentInfos.Read(Directory) return public static public static protected virtual protected virtual return new protected virtual protected virtual return new new private private if ! lock if ! = new = = public static public static return new public public lock if ! private private call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) = protected virtual protected virtual lock if call ReaderManager.Dispose() call ReaderManager.Dispose() call ReaderManager.Dispose() call ReaderManager.Dispose() call ReaderManager.Dispose() = = if != call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Close() call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Close() call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Close() call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Close() call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Close() Terms TermsEnum DocsEnum DirectoryReader BytesRef int int protected virtual protected virtual lock decl_stmt int = call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) if >= || return call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() = call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) if >= || return decl_stmt int = - decl_stmt Lucene.Net.Index.DirectoryReader = call ReaderManager.Acquire() call ReaderManager.Acquire() call ReaderManager.Acquire() call ReaderManager.Acquire() call ReaderManager.Acquire() try decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt Lucene.Net.Index.TermsEnum = decl_stmt Lucene.Net.Index.DocsEnum = foreach in decl_stmt Lucene.Net.Index.Terms = if != = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() + break finally call ReaderManager.Release() call ReaderManager.Release() call ReaderManager.Release() call ReaderManager.Release() call ReaderManager.Release() if > return int public virtual public virtual decl_stmt int = call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Get(FacetLabel) if < lock = if < = return int int FacetLabel private private decl_stmt int if > decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = - = if < = else if == = else = decl_stmt int = return protected internal protected internal if throw new Document int private private call SinglePositionTokenStream.Set() call SinglePositionTokenStream.Set() call SinglePositionTokenStream.Set() call SinglePositionTokenStream.Set() call SinglePositionTokenStream.Set() + decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) decl_stmt int = ++ = = return public virtual public virtual = = public sealed override public sealed override if return = = return private private if call TaxonomyWriterCache.Put() call TaxonomyWriterCache.Put() call TaxonomyWriterCache.Put() call TaxonomyWriterCache.Put() call TaxonomyWriterCache.Put() = private private lock if && call ReaderManager.MaybeRefresh() call ReaderManager.MaybeRefresh() call ReaderManager.MaybeRefresh() call ReaderManager.MaybeRefresh() call ReaderManager.MaybeRefresh() = string public virtual public virtual lock decl_stmt string = call IndexWriter.CommitData() call IndexWriter.CommitData() call IndexWriter.CommitData() call IndexWriter.CommitData() call IndexWriter.CommitData() call IndexWriter.CommitData() call IndexWriter.CommitData() call IndexWriter.CommitData() call IndexWriter.CommitData() out if == || != = call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) decl IDictionary private < private < < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < if != call decl IDictionary.PutAll() call decl IDictionary.PutAll() call decl IDictionary.PutAll() call decl IDictionary.PutAll() call decl IDictionary.PutAll() = return = return string public virtual public virtual lock decl_stmt string = if == || != = call Lucene.Net.Index.IndexWriter.PrepareCommit() call Lucene.Net.Index.IndexWriter.PrepareCommit() call Lucene.Net.Index.IndexWriter.PrepareCommit() call Lucene.Net.Index.IndexWriter.PrepareCommit() call Lucene.Net.Index.IndexWriter.PrepareCommit() return = DocsEnum Terms TermsEnum bool BytesRef bool DirectoryReader FacetLabel private private lock if call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() < return if ! return = decl_stmt bool = decl_stmt Lucene.Net.Index.DirectoryReader = call ReaderManager.Acquire() call ReaderManager.Acquire() call ReaderManager.Acquire() call ReaderManager.Acquire() call ReaderManager.Acquire() try decl_stmt Lucene.Net.Index.TermsEnum = decl_stmt Lucene.Net.Index.DocsEnum = foreach in decl_stmt Lucene.Net.Index.Terms = if != = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() while call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != if ! decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = new call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) decl_stmt bool = call TaxonomyWriterCache.Put() call TaxonomyWriterCache.Put() call TaxonomyWriterCache.Put() call TaxonomyWriterCache.Put() call TaxonomyWriterCache.Put() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() + ! else = break if break finally call ReaderManager.Release() call ReaderManager.Release() call ReaderManager.Release() call ReaderManager.Release() call ReaderManager.Release() = ! if lock call ReaderManager.Dispose() call ReaderManager.Dispose() call ReaderManager.Dispose() call ReaderManager.Dispose() call ReaderManager.Dispose() = = TaxonomyIndexArrays DirectoryReader if == lock if == decl_stmt Lucene.Net.Index.DirectoryReader = call ReaderManager.Acquire() call ReaderManager.Acquire() call ReaderManager.Acquire() call ReaderManager.Acquire() call ReaderManager.Acquire() try decl_stmt Lucene.Net.Facet.Taxonomy.Directory.TaxonomyIndexArrays = new = finally call ReaderManager.Release() call ReaderManager.Release() call ReaderManager.Release() call ReaderManager.Release() call ReaderManager.Release() return decl int public virtual public virtual if >= throw new decl_stmt int = < + + + + return int OrdinalMap FacetLabel Terms DocsEnum int DirectoryReader TermsEnum AtomicReader int public virtual public virtual decl_stmt Lucene.Net.Index.DirectoryReader = try decl_stmt int = decl_stmt Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap = = decl_stmt int = decl_stmt Lucene.Net.Index.TermsEnum = decl_stmt Lucene.Net.Index.DocsEnum = foreach in decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() while call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = new call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() decl_stmt int = = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap.AddMapping(int,int) call Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap.AddMapping(int,int) call Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap.AddMapping(int,int) call Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap.AddMapping(int,int) call Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap.AddMapping(int,int) call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() + += call Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap.AddDone() call Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap.AddDone() call Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap.AddDone() call Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap.AddDone() call Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap.AddDone() finally call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() public public if - >= = else ref + = public public return public public public public if != = int int var var if != return decl_stmt var = new decl_stmt var = new = new call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() for = < ++ decl_stmt int = call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() decl_stmt int = call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() call var.ReadInt() = call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() if return public virtual public virtual lock call Lucene.Net.Index.IndexWriter.Rollback() call Lucene.Net.Index.IndexWriter.Rollback() call Lucene.Net.Index.IndexWriter.Rollback() call Lucene.Net.Index.IndexWriter.Rollback() call Lucene.Net.Index.IndexWriter.Rollback() public virtual public virtual lock call Lucene.Net.Index.IndexWriter.DeleteAll() call Lucene.Net.Index.IndexWriter.DeleteAll() call Lucene.Net.Index.IndexWriter.DeleteAll() call Lucene.Net.Index.IndexWriter.DeleteAll() call Lucene.Net.Index.IndexWriter.DeleteAll() call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) = = = call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Clear() call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Clear() call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Clear() call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Clear() call Lucene.Net.Facet.Taxonomy.WriterCache.TaxonomyWriterCache.Clear() = = call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) ++ return return return