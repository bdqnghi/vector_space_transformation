Lucene.Net.Index Apache.NMS.Util using System using System.Collections.Generic using Lucene.Net.Documents using Lucene.Net.Search using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using System.IO using BinaryDocValuesField Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Documents.Document Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer NumericDocValuesField SortedDocValuesField Lucene.Net.Util.TestUtil class attribute Lucene.Net.Index.TestDocValuesWithThreads super super LuceneTestCase decl IList Document ThreadClass Random int BytesRef long IndexReader decl IList decl IList IndexWriter CountDownLatch decl IList int AtomicReader Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new new decl_stmt System.Collections.Generic.IList < ? = new < ? decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < decl_stmt int = for = < ++ decl_stmt Lucene.Net.Documents.Document = new decl_stmt long = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new decl_stmt Lucene.Net.Util.BytesRef = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) decl_stmt Lucene.Net.Index.IndexReader = call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt int = decl_stmt System.Collections.Generic.IList < = new < decl_stmt CountDownLatch = new for = < ++ decl_stmt System.Random = new decl_stmt Lucene.Net.Support.ThreadClass = new call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() call CountDownLatch.countDown() foreach in call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() BinaryDocValues BytesRef SortedDocValues int BytesRef decl Longs decl FieldCache public override public override try decl_stmt Longs = decl_stmt BinaryDocValues = decl_stmt Lucene.Net.Index.SortedDocValues = decl_stmt int = decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ decl_stmt int = switch case long sbyte break case long short break case long int break case long break case int break case long break call decl Longs.Get() call decl Longs.Get() call decl Longs.Get() call decl Longs.Get() call decl Longs.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() catch throw new int Random int Document RandomIndexWriter string DirectoryReader decl ThreadClass decl IList BytesRef AtomicReader bool decl HashSet int Directory long public virtual public virtual decl_stmt System.Random = decl_stmt int = decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt bool = call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() decl_stmt System.Collections.Generic.HashSet < = new < if + + + decl_stmt int = decl_stmt System.Collections.Generic.IList < = new < while < decl_stmt string if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() = else = decl_stmt Lucene.Net.Util.BytesRef = new if ! if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() continue call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() if + + + decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) ++ if call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) == call RandomIndexWriter.Reader() call RandomIndexWriter.Reader() call RandomIndexWriter.Reader() call RandomIndexWriter.Reader() call RandomIndexWriter.Reader() call RandomIndexWriter.Reader() call RandomIndexWriter.Reader() call RandomIndexWriter.Reader() call RandomIndexWriter.Reader() call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) decl_stmt Lucene.Net.Index.DirectoryReader = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt long = + : decl_stmt int = decl_stmt Lucene.Net.Support.ThreadClass = new for = < ++ = new foreach in call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() int NumericDocValues BytesRef Random SortedDocValues SortedDocValues public override public override decl_stmt System.Random = decl_stmt Lucene.Net.Index.SortedDocValues decl_stmt NumericDocValues try = = catch throw new while < decl_stmt Lucene.Net.Index.SortedDocValues = decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call SortedDocValues.Get() call SortedDocValues.Get() call SortedDocValues.Get() call SortedDocValues.Get() call SortedDocValues.Get() int call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get()