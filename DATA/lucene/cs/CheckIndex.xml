Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Support using System.Globalization using System.IO using Lucene.Net.Util.Bits Lucene.Net.Codecs.BlockTreeTermsReader Lucene.Net.Util.BytesRef Lucene.Net.Codecs.Codec Lucene.Net.Store.Directory Lucene.Net.Search.DocIdSetIterator Documents.Document Lucene.Net.Index.CheckIndex.Status.DocValuesStatus Lucene.Net.Util.FixedBitSet Lucene.Net.Store.IndexInput Lucene.Net.Store.IOContext Lucene.Net.Util.LongBitSet Lucene.Net.Codecs.Lucene3x.Lucene3xSegmentInfoFormat Lucene.Net.Codecs.PostingsFormat Lucene.Net.Util.StringHelper class Lucene.Net.Index.CheckIndex bool bool Directory StreamWriter bool = return public virtual public virtual = = public public call System.IO.StreamWriter.Flush(bool,bool) call System.IO.StreamWriter.Flush(bool,bool) call System.IO.StreamWriter.Flush(bool,bool) call System.IO.StreamWriter.Flush(bool,bool) call System.IO.StreamWriter.Flush(bool,bool) private static private static if != public virtual public virtual return string int string int string Status string string SegmentInfos decl IComparer NumberFormatInfo bool string AtomicReader int decl SegmentInfoStatus Codec string FieldInfos IndexInput SegmentCommitInfo bool int int decl Status Bits string decl IDictionary string public virtual public virtual < decl_stmt System.Globalization.NumberFormatInfo = decl_stmt Lucene.Net.Index.SegmentInfos = new decl_stmt System.IdentityModel.Protocols.WSTrust.Status = new = try call Lucene.Net.Index.SegmentInfos.Read(Directory) call Lucene.Net.Index.SegmentInfos.Read(Directory) call Lucene.Net.Index.SegmentInfos.Read(Directory) call Lucene.Net.Index.SegmentInfos.Read(Directory) call Lucene.Net.Index.SegmentInfos.Read(Directory) catch = if != call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) return decl_stmt string = = decl_stmt string = decl_stmt bool = decl_stmt System.Collections.Generic.IComparer < = foreach in decl_stmt string = if == = else = if call string.Compare() call string.Compare() call string.Compare() call string.Compare() call string.Compare() < = if call string.Compare() call string.Compare() call string.Compare() call string.Compare() call string.Compare() > = decl_stmt int = call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() decl_stmt string = decl_stmt Lucene.Net.Store.IndexInput = try = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() catch if != call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) = return decl_stmt int = try = call int.ReadInt() call int.ReadInt() call int.ReadInt() call int.ReadInt() call int.ReadInt() catch if != call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) = return finally if != call int.Dispose() call int.Dispose() call int.Dispose() call int.Dispose() call int.Dispose() decl_stmt string = decl_stmt bool = = = = decl_stmt string if > = + else = decl_stmt string = if != if = + + + + else = + else = call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() + : + + + + + + + + + + + + if != = if != call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) foreach in call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) + call Status.SegmentsChecked() call Status.SegmentsChecked() call Status.SegmentsChecked() call Status.SegmentsChecked() call Status.SegmentsChecked() call Status.SegmentsChecked() call Status.SegmentsChecked() call Status.SegmentsChecked() call Status.SegmentsChecked() if = return = call Lucene.Net.Index.SegmentInfos.Clone() call Lucene.Net.Index.SegmentInfos.Clone() call Lucene.Net.Index.SegmentInfos.Clone() call Lucene.Net.Index.SegmentInfos.Clone() call Lucene.Net.Index.SegmentInfos.Clone() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() = - for = < ++ decl_stmt Lucene.Net.Index.SegmentCommitInfo = call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Info(int) decl_stmt int = try = call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() catch if > = if != && ! continue decl_stmt SegmentInfoStatus = new call Status.SegmentInfos() call Status.SegmentInfos() call Status.SegmentInfos() call Status.SegmentInfos() call Status.SegmentInfos() call Status.SegmentInfos() call Status.SegmentInfos() call Status.SegmentInfos() call Status.SegmentInfos() + + + + + + + + = = decl_stmt string = if <= && != && call string.Compare() call string.Compare() call string.Compare() call string.Compare() call string.Compare() >= throw new + decl_stmt int = decl_stmt Lucene.Net.Index.AtomicReader = try decl_stmt Lucene.Net.Codecs.Codec = + = + = + call int.Files() call int.Files() call int.Files() call int.Files() call int.Files() = call int.Files() call int.Files() call int.Files() call int.Files() call int.Files() = call int.SizeInBytes() call int.SizeInBytes() call int.SizeInBytes() call int.SizeInBytes() call int.SizeInBytes() / * if call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() call int.Info() == + call decl SegmentInfoStatus.SizeMB() call decl SegmentInfoStatus.SizeMB() call decl SegmentInfoStatus.SizeMB() call decl SegmentInfoStatus.SizeMB() call decl SegmentInfoStatus.SizeMB() call decl SegmentInfoStatus.SizeMB() call decl SegmentInfoStatus.SizeMB() call decl SegmentInfoStatus.SizeMB() call decl SegmentInfoStatus.SizeMB() decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = = if > + if ! call int.HasDeletions() call int.HasDeletions() call int.HasDeletions() call int.HasDeletions() call int.HasDeletions() = else + + = = if != call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) = new = if != call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call AtomicReader.CheckIntegrity() call AtomicReader.CheckIntegrity() call AtomicReader.CheckIntegrity() call AtomicReader.CheckIntegrity() call AtomicReader.CheckIntegrity() if != call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) decl_stmt int = = if if != - throw new + - + + if - > throw new + + + - if - != throw new + + + - decl_stmt Lucene.Net.Spatial.Util.Bits = if == throw new else decl_stmt int = for = < call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() ++ if call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() ++ if != throw new + + + = - + + else if != throw new + + + - decl_stmt Lucene.Net.Spatial.Util.Bits = if != for = < call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() ++ if ! call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() throw new + + if != throw new + + + if != call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) decl_stmt Lucene.Net.Index.FieldInfos = + call Lucene.Net.Index.FieldInfos.Size() call Lucene.Net.Index.FieldInfos.Size() call Lucene.Net.Index.FieldInfos.Size() call Lucene.Net.Index.FieldInfos.Size() call Lucene.Net.Index.FieldInfos.Size() + = call Lucene.Net.Index.FieldInfos.Size() call Lucene.Net.Index.FieldInfos.Size() call Lucene.Net.Index.FieldInfos.Size() call Lucene.Net.Index.FieldInfos.Size() call Lucene.Net.Index.FieldInfos.Size() = = = = = if != throw new else if != throw new else if != throw new else if != throw new else if != throw new catch decl_stmt string = + + if != call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) += ++ continue finally if != call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call Status.NewSegments() call int.Clone() call int.Clone() call int.Clone() call int.Clone() call int.Clone() if == = else + + + + if ! = < = = + + + + if return decl Status public static public static decl_stmt FieldNormStatus = new try if != call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) foreach in if ++ else ! if != throw new + + + + catch + + = if != call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) return DocsEnum int long long long int int long bool bool bool int decl IComparer long long int int int Terms int long int long bool DocsEnum int TermsEnum DocsEnum DocsEnum int decl Status long FieldInfo bool int int bool FixedBitSet int string int int decl BytesRef int decl TermIndexStatus int int bool long long long DocsEnum long DocsAndPositionsEnum BytesRef long Terms bool bool int private static private static decl_stmt TermIndexStatus = new decl_stmt int = if == return decl_stmt Lucene.Net.Index.DocsEnum = decl_stmt Lucene.Net.Index.DocsEnum = decl_stmt DocsAndPositionsEnum = decl_stmt string = foreach in if != && <= throw new + + + = decl_stmt Lucene.Net.Index.FieldInfo = if == throw new + if ! throw new + ++ decl_stmt Lucene.Net.Index.Terms = if == continue decl_stmt bool = call FieldInfo.HasFreqs() call FieldInfo.HasFreqs() call FieldInfo.HasFreqs() call FieldInfo.HasFreqs() call FieldInfo.HasFreqs() decl_stmt bool = call FieldInfo.HasPositions() call FieldInfo.HasPositions() call FieldInfo.HasPositions() call FieldInfo.HasPositions() call FieldInfo.HasPositions() decl_stmt bool = call FieldInfo.HasPayloads() call FieldInfo.HasPayloads() call FieldInfo.HasPayloads() call FieldInfo.HasPayloads() call FieldInfo.HasPayloads() decl_stmt bool = call FieldInfo.HasOffsets() call FieldInfo.HasOffsets() call FieldInfo.HasOffsets() call FieldInfo.HasOffsets() call FieldInfo.HasOffsets() decl_stmt bool = || >= if != throw new + + + + + if == if != - throw new + + + + if ! decl_stmt bool = >= if != throw new + + + + + decl_stmt bool = call string.HasPayloads() call string.HasPayloads() call string.HasPayloads() call string.HasPayloads() call string.HasPayloads() if != throw new + + + + + decl_stmt bool = >= if != throw new + + + + + decl_stmt Lucene.Net.Index.TermsEnum = call FieldInfo.Iterator() call FieldInfo.Iterator() call FieldInfo.Iterator() call FieldInfo.Iterator() call FieldInfo.Iterator() decl_stmt bool = decl_stmt long = + decl_stmt Lucene.Net.Util.BytesRef = decl_stmt System.Collections.Generic.IComparer < = decl_stmt long = decl_stmt long = decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new while decl_stmt Lucene.Net.Util.BytesRef = call bool.Next() call bool.Next() call bool.Next() call bool.Next() call bool.Next() if == break if == = else if call Lucene.Net.Util.BytesRef.Compare(BytesRef,BytesRef) call Lucene.Net.Util.BytesRef.Compare(BytesRef,BytesRef) call Lucene.Net.Util.BytesRef.Compare(BytesRef,BytesRef) call Lucene.Net.Util.BytesRef.Compare(BytesRef,BytesRef) call Lucene.Net.Util.BytesRef.Compare(BytesRef,BytesRef) >= throw new + + + call long.CopyBytes() call long.CopyBytes() call long.CopyBytes() call long.CopyBytes() call long.CopyBytes() decl_stmt int = call bool.DocFreq() call bool.DocFreq() call bool.DocFreq() call bool.DocFreq() call bool.DocFreq() if <= throw new + + += = call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() = call bool.DocsAndPositions() call bool.DocsAndPositions() call bool.DocsAndPositions() call bool.DocsAndPositions() call bool.DocsAndPositions() if == if call bool.TotalTermFreq() call bool.TotalTermFreq() call bool.TotalTermFreq() call bool.TotalTermFreq() call bool.TotalTermFreq() != - throw new + + + call bool.TotalTermFreq() call bool.TotalTermFreq() call bool.TotalTermFreq() call bool.TotalTermFreq() call bool.TotalTermFreq() + if decl_stmt long = - try = call bool.Ord() call bool.Ord() call bool.Ord() call bool.Ord() call bool.Ord() catch = if decl_stmt long = + - if != throw new + + + decl_stmt Lucene.Net.Index.DocsEnum if != = else = decl_stmt int = - decl_stmt int = decl_stmt long = while decl_stmt int = call long.NextDoc() call long.NextDoc() call long.NextDoc() call long.NextDoc() call long.NextDoc() if == break ++ call long.Set() call long.Set() call long.Set() call long.Set() call long.Set() decl_stmt int = - if = call long.Freq() call long.Freq() call long.Freq() call long.Freq() call long.Freq() if <= throw new + + + + + + += += else if call long.Freq() call long.Freq() call long.Freq() call long.Freq() call long.Freq() != throw new + + + + + + ++ if <= throw new + + + + + if >= throw new + + + + + = decl_stmt int = - decl_stmt int = if for = < ++ decl_stmt int = call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() if < throw new + + + + + + if < throw new + + + + + + + = decl_stmt Lucene.Net.Util.BytesRef = if != if != && < throw new + + + + + + + if decl_stmt int = call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() decl_stmt int = call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() if ! if < throw new + + + + + + + + if < throw new + + + + + + + + + if < throw new + + + + + + + + if < throw new + + + + + + + + + = if != ++ else ++ decl_stmt long = call bool.TotalTermFreq() call bool.TotalTermFreq() call bool.TotalTermFreq() call bool.TotalTermFreq() call bool.TotalTermFreq() decl_stmt bool = && != - if != if decl_stmt Lucene.Net.Index.DocsEnum = call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() = = while call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != call long.Set() call long.Set() call long.Set() call long.Set() call long.Set() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() ++ += call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() else decl_stmt Lucene.Net.Index.DocsEnum = call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() = = - while call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != call long.Set() call long.Set() call long.Set() call long.Set() call long.Set() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() ++ if != throw new + + + + + if if <= throw new + + += if != throw new + + + + + if for = < ++ decl_stmt int = + * long / = call bool.DocsAndPositions() call bool.DocsAndPositions() call bool.DocsAndPositions() call bool.DocsAndPositions() call bool.DocsAndPositions() decl_stmt int = call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() if == break else if < throw new + + + + + decl_stmt int = call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() if <= throw new + + decl_stmt int = - decl_stmt int = for = < ++ decl_stmt int = call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() if < throw new + + if < throw new + + + = if decl_stmt int = call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() decl_stmt int = call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() if ! if < throw new + + + + + + + + if < throw new + + + + + + + + + if < throw new + + + + + + + + if < throw new + + + + + + + + + = decl_stmt int = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() if == break if <= throw new + + + + + + + else for = < ++ decl_stmt int = + * long / = call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() decl_stmt int = call int.Advance() call int.Advance() call int.Advance() call int.Advance() call int.Advance() if == break else if < throw new + + + + + decl_stmt int = call int.NextDoc() call int.NextDoc() call int.NextDoc() call int.NextDoc() call int.NextDoc() if == break if <= throw new + + + + + + + decl_stmt Lucene.Net.Index.Terms = if == else if is decl_stmt Stats = != if == = new < = if != decl_stmt long = if != - && != throw new + + + + + if != decl_stmt long = if != - && != throw new + + + + + if != decl_stmt int = if != - && call long.Cardinality() call long.Cardinality() call long.Cardinality() call long.Cardinality() call long.Cardinality() != throw new + + + + + call long.Cardinality() call long.Cardinality() call long.Cardinality() call long.Cardinality() call long.Cardinality() if != if call bool.SeekCeil() call bool.SeekCeil() call bool.SeekCeil() call bool.SeekCeil() call bool.SeekCeil() != throw new + + decl_stmt int = call bool.DocFreq() call bool.DocFreq() call bool.DocFreq() call bool.DocFreq() call bool.DocFreq() decl_stmt Lucene.Net.Index.DocsEnum = call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() decl_stmt int = while call int.NextDoc() call int.NextDoc() call int.NextDoc() call int.NextDoc() call int.NextDoc() != ++ if != throw new + + + + + decl_stmt long = - if + - > = if != - && != + - throw new + + + + - if && - > decl_stmt int = int if > decl_stmt Lucene.Net.Util.BytesRef = new for = - >= -- decl_stmt long = * / call bool.SeekExact() call bool.SeekExact() call bool.SeekExact() call bool.SeekExact() call bool.SeekExact() = call bool.Term() call bool.Term() call bool.Term() call bool.Term() call bool.Term() decl_stmt long = for = - >= -- if call bool.SeekCeil() call bool.SeekCeil() call bool.SeekCeil() call bool.SeekCeil() call bool.SeekCeil() != throw new + + = call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() if == throw new + while call int.NextDoc() call int.NextDoc() call int.NextDoc() call int.NextDoc() call int.NextDoc() != ++ decl_stmt long = decl_stmt long = for = < ++ if ! call bool.SeekExact() call bool.SeekExact() call bool.SeekExact() call bool.SeekExact() call bool.SeekExact() throw new + + += call bool.DocFreq() call bool.DocFreq() call bool.DocFreq() call bool.DocFreq() call bool.DocFreq() = call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() call bool.Docs() if == throw new + while call int.NextDoc() call int.NextDoc() call int.NextDoc() call int.NextDoc() call int.NextDoc() != ++ if > throw new + + + if != throw new + + + decl_stmt int = if != - if < throw new + if != throw new + + + decl_stmt long = if != - && + != throw new + + + + if + + + + + + if && != && != && > foreach < in call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) + + call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) + return public static public static return decl Status Bits Fields decl TermIndexStatus int public static public static decl_stmt TermIndexStatus decl_stmt int = decl_stmt Lucene.Net.Spatial.Util.Bits = try if != call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) decl_stmt Lucene.Net.Index.Fields = decl_stmt Lucene.Net.Index.FieldInfos = = if != if != call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) catch + = new = if != call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) return decl Status Bits decl StoredFieldStatus public static public static decl_stmt StoredFieldStatus = new try if != call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) decl_stmt Lucene.Net.Spatial.Util.Bits = for = < ++ decl_stmt Lucene.Net.Documents.Document = if == || call decl StoredFieldStatus.Get() call decl StoredFieldStatus.Get() call decl StoredFieldStatus.Get() call decl StoredFieldStatus.Get() call decl StoredFieldStatus.Get() ++ += if != throw new + + + + + + + float / + catch + + = if != call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) return decl Status public static public static decl_stmt DocValuesStatus = new try if != call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) foreach in if ++ else if != || != || != || != || != throw new + + + + + + + + + + + + catch + + = if != call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) return BytesRef private static private static decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ if == && > throw new + + + + + int int BytesRef FixedBitSet BytesRef int private static private static decl_stmt int = - decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new decl_stmt int = - for = < ++ decl_stmt int = if == - if throw new + + + else if < - || - || throw new + else if ! throw new + + + + + = call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) if != throw new + + + + + if call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() != throw new + + + + + call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() decl_stmt Lucene.Net.Util.BytesRef = decl_stmt Lucene.Net.Util.BytesRef = new for = <= ++ if != if call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) <= throw new + + + + + = long long BytesRef LongBitSet int BytesRef long long long long long private static private static decl_stmt long = - decl_stmt Lucene.Net.Util.LongBitSet = new decl_stmt long = - for = < ++ = decl_stmt long = - decl_stmt long if decl_stmt int = while = != if <= throw new + + + + + if < || || throw new + if is decl_stmt long = if != throw new + + + + + + + = = call Lucene.Net.Util.LongBitSet.Set(long,long) call Lucene.Net.Util.LongBitSet.Set(long,long) call Lucene.Net.Util.LongBitSet.Set(long,long) call Lucene.Net.Util.LongBitSet.Set(long,long) call Lucene.Net.Util.LongBitSet.Set(long,long) ++ if == throw new + + + if is decl_stmt long = if != throw new + + + + + else decl_stmt long = if != throw new + + + + + if is decl_stmt long = if != throw new + + + + + if != throw new + + + + + if call Lucene.Net.Util.LongBitSet.Cardinality() call Lucene.Net.Util.LongBitSet.Cardinality() call Lucene.Net.Util.LongBitSet.Cardinality() call Lucene.Net.Util.LongBitSet.Cardinality() call Lucene.Net.Util.LongBitSet.Cardinality() != throw new + + + + + call Lucene.Net.Util.LongBitSet.Cardinality() call Lucene.Net.Util.LongBitSet.Cardinality() call Lucene.Net.Util.LongBitSet.Cardinality() call Lucene.Net.Util.LongBitSet.Cardinality() call Lucene.Net.Util.LongBitSet.Cardinality() decl_stmt Lucene.Net.Util.BytesRef = decl_stmt Lucene.Net.Util.BytesRef = new for = <= ++ if != if call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) call Lucene.Net.Util.BytesRef.CompareTo(object) <= throw new + + + + + = long private static private static for = < ++ decl_stmt long = if == && != throw new + + + + + Bits private static private static decl_stmt Lucene.Net.Spatial.Util.Bits = if == throw new + else if call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() != throw new + + call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() + + switch case ++ if != || != || != throw new + break case ++ if != || != || != throw new + break case ++ if != || != || != throw new + break case ++ if != || != || != throw new + break default: throw new private static private static switch case new break default: throw new + public static public static return decl TermVectorStatus DocsEnum int DocsEnum BytesRef int BytesRef Bits int bool BytesRef int int bool decl Status FieldInfo int Bits FieldInfos int DocsEnum bool Terms TermsEnum Terms TermsEnum bool Fields int DocsAndPositionsEnum DocsEnum DocsAndPositionsEnum bool int Fields public static public static decl_stmt TermVectorStatus = new decl_stmt Lucene.Net.Index.FieldInfos = decl_stmt Lucene.Net.Spatial.Util.Bits = new try if != call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) call System.IO.StreamWriter.Write(char) decl_stmt Lucene.Net.Index.DocsEnum = decl_stmt DocsAndPositionsEnum = decl_stmt Lucene.Net.Index.DocsEnum = decl_stmt DocsAndPositionsEnum = decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt Lucene.Net.Index.Fields if = else = decl_stmt Lucene.Net.Index.TermsEnum = decl_stmt Lucene.Net.Index.TermsEnum = for = < ++ decl_stmt Lucene.Net.Index.Fields = if != decl_stmt bool = == || call DocsAndPositionsEnum.Get() call DocsAndPositionsEnum.Get() call DocsAndPositionsEnum.Get() call DocsAndPositionsEnum.Get() call DocsAndPositionsEnum.Get() if ++ foreach in if ++ decl_stmt Lucene.Net.Index.FieldInfo = call decl TermVectorStatus.FieldInfo() call decl TermVectorStatus.FieldInfo() call decl TermVectorStatus.FieldInfo() call decl TermVectorStatus.FieldInfo() call decl TermVectorStatus.FieldInfo() if ! call bool.HasVectors() call bool.HasVectors() call bool.HasVectors() call bool.HasVectors() call bool.HasVectors() throw new + + + + if decl_stmt Lucene.Net.Index.Terms = call TermsEnum.Terms() call TermsEnum.Terms() call TermsEnum.Terms() call TermsEnum.Terms() call TermsEnum.Terms() = call FieldInfo.Iterator() call FieldInfo.Iterator() call FieldInfo.Iterator() call FieldInfo.Iterator() call FieldInfo.Iterator() decl_stmt bool = >= decl_stmt bool = call bool.HasPayloads() call bool.HasPayloads() call bool.HasPayloads() call bool.HasPayloads() call bool.HasPayloads() decl_stmt bool = call FieldInfo.HasPayloads() call FieldInfo.HasPayloads() call FieldInfo.HasPayloads() call FieldInfo.HasPayloads() call FieldInfo.HasPayloads() decl_stmt Lucene.Net.Index.Terms = call Bits.Terms() call Bits.Terms() call Bits.Terms() call Bits.Terms() call Bits.Terms() if == throw new + + + = call bool.Iterator() call bool.Iterator() call bool.Iterator() call bool.Iterator() call bool.Iterator() decl_stmt bool = call FieldInfo.HasOffsets() call FieldInfo.HasOffsets() call FieldInfo.HasOffsets() call FieldInfo.HasOffsets() call FieldInfo.HasOffsets() || call FieldInfo.HasPositions() call FieldInfo.HasPositions() call FieldInfo.HasPositions() call FieldInfo.HasPositions() call FieldInfo.HasPositions() decl_stmt Lucene.Net.Util.BytesRef = while = call Fields.Next() call Fields.Next() call Fields.Next() call Fields.Next() call Fields.Next() != if = call Fields.DocsAndPositions() call Fields.DocsAndPositions() call Fields.DocsAndPositions() call Fields.DocsAndPositions() call Fields.DocsAndPositions() != = else = call Fields.Docs() call Fields.Docs() call Fields.Docs() call Fields.Docs() call Fields.Docs() != = decl_stmt Lucene.Net.Index.DocsEnum if != = else != = decl_stmt Lucene.Net.Index.DocsEnum if ! call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) throw new + + + + + = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) if == = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) if == throw new + + + + + if != = else = decl_stmt int = call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() if != throw new + + + + + + + + decl_stmt int = call BytesRef.NextDoc() call BytesRef.NextDoc() call BytesRef.NextDoc() call BytesRef.NextDoc() call BytesRef.NextDoc() if != throw new + + + if decl_stmt int = call BytesRef.Freq() call BytesRef.Freq() call BytesRef.Freq() call BytesRef.Freq() call BytesRef.Freq() if && call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() != throw new + + + + + + + + + call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() if for = < ++ decl_stmt int = call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() if != decl_stmt int = call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() call DocsEnum.NextPosition() if call FieldInfo.HasPositions() call FieldInfo.HasPositions() call FieldInfo.HasPositions() call FieldInfo.HasPositions() call FieldInfo.HasPositions() && != throw new + + + + + + + + + decl_stmt int = call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() decl_stmt int = call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() if != decl_stmt int = call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() call DocsEnum.StartOffset() decl_stmt int = call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() call DocsEnum.EndOffset() if != - && != - && != throw new + + + + + + + + + if != - && != - && != throw new + + + + + + + + + decl_stmt Lucene.Net.Util.BytesRef = if != if && != if == if != throw new + + + + + + + else if == throw new + + + + + + + + decl_stmt Lucene.Net.Util.BytesRef = if ! call int.Equals() call int.Equals() call int.Equals() call int.Equals() call int.Equals() throw new + + + + + + + + + decl_stmt float = == : / float + + + call Lucene.Net.Util.BytesRef.ToString() call Lucene.Net.Util.BytesRef.ToString() call Lucene.Net.Util.BytesRef.ToString() call Lucene.Net.Util.BytesRef.ToString() call Lucene.Net.Util.BytesRef.ToString() + catch + + = if != call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) return public virtual public virtual if throw new private static private static = return private static private static return