Lucene.Net.Index Apache.NMS.Util using System using System.Collections.Generic using Lucene.Net.Documents using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using System.IO using BinaryDocValuesField Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Documents.Document Lucene.Net.Util.IOUtils Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer NumericDocValuesField Field.Store StringField Lucene.Net.Util.TestUtil class attribute Lucene.Net.Index.TestMixedDocValuesUpdates super super LuceneTestCase DirectoryReader BytesRef Random string IndexWriterConfig bool int IndexWriter BinaryDocValues int int Bits int LogMergePolicy decl bool DirectoryReader int int decl long int int Bits Document string AtomicReader Directory NumericDocValues public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt System.Random = decl_stmt Lucene.Net.Index.IndexWriterConfig = new decl_stmt Lucene.Net.Index.LogMergePolicy = = call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) call Lucene.Net.Index.IndexWriterConfig.SetMergePolicy(MergePolicy) decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt bool = call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() decl_stmt Lucene.Net.Index.DirectoryReader if = else call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) = decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) + decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) / + decl_stmt long = new decl_stmt bool = new for = < ++ = decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = for = < ++ decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new + call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new for = < ++ if < call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new + else call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new + call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) ++ for = < ++ if ! if < call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) new + else call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) new + decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) decl_stmt string = + if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() = if < call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) new else call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) new else = if < call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) new ++ else call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) new ++ if call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() < decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) new + if ! call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) decl_stmt Lucene.Net.Index.DirectoryReader = call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() = > decl_stmt Lucene.Net.Util.BytesRef = new foreach in decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Spatial.Util.Bits = for = < ++ decl_stmt string = + decl_stmt BinaryDocValues = call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() decl_stmt NumericDocValues = call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() decl_stmt Lucene.Net.Spatial.Util.Bits = call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() if < else decl_stmt int = for = < ++ if == || call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() if call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() if < call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() + + + + + else + + + + + else call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() NumericDocValues int string long CountDownLatch IndexWriterConfig long double IndexWriter BinaryDocValues BytesRef Bits DirectoryReader decl ThreadClass Bits int string Bits AtomicInteger Document string long AtomicReader Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriterConfig = new decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt int = decl_stmt int = for = < ++ decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new + decl_stmt double = decl_stmt string if group < = else if group < = else if group < = else = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new for = < ++ decl_stmt long = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new + call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new + * call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) decl_stmt CountDownLatch = new decl_stmt Lucene.Net.Support.AtomicInteger = new decl_stmt Lucene.Net.Support.ThreadClass = new for = < ++ decl_stmt string = + decl_stmt string = + = new + foreach in call CountDownLatch.await() call CountDownLatch.await() call CountDownLatch.await() call CountDownLatch.await() call CountDownLatch.await() call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt Lucene.Net.Util.BytesRef = new foreach in decl_stmt Lucene.Net.Index.AtomicReader = for = < ++ decl_stmt BinaryDocValues = call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() + decl_stmt NumericDocValues = call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() + decl_stmt Lucene.Net.Spatial.Util.Bits = call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() + decl_stmt Lucene.Net.Spatial.Util.Bits = call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() + decl_stmt Lucene.Net.Spatial.Util.Bits = for = < ++ if == || call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() if call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() decl_stmt long = call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() decl_stmt long = * call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() long double DirectoryReader bool int Random Term DirectoryReader public override public override decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt bool = try decl_stmt System.Random = while > decl_stmt double = call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() decl_stmt Lucene.Net.Index.Term if group < = new else if group < = new else if group < = new else = new if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() else decl_stmt long = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) * if call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() < decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) new + if call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() < if call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() < if == = else decl_stmt Lucene.Net.Index.DirectoryReader = if != call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() = = catch throw new finally if != try call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() catch if throw new int IndexWriter BinaryDocValues DirectoryReader long AtomicReader NumericDocValues int IndexWriterConfig BytesRef int Directory Term public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriterConfig = new call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt int = for = < ++ decl_stmt Lucene.Net.Documents.Document = new call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() new + decl_stmt long = call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() new call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() new * call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) decl_stmt int = decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ decl_stmt int = decl_stmt Lucene.Net.Index.Term = new + decl_stmt long = call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) * decl_stmt Lucene.Net.Index.DirectoryReader = foreach in decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt BinaryDocValues = call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() decl_stmt NumericDocValues = call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() for = < ++ call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() * call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() AtomicReader Random long int BinaryDocValues int Document IndexWriter NumericDocValues long Term int decl HashSet BytesRef IndexWriterConfig DirectoryReader int int int Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt System.Random = decl_stmt Lucene.Net.Index.IndexWriterConfig = new call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt System.Collections.Generic.HashSet < = new < while < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() for = < ++ decl_stmt Lucene.Net.Documents.Document = new decl_stmt int = / for = < ++ call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new for = < ++ decl_stmt long = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new + call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new + * call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call IndexWriter.Config() call IndexWriter.Config() call IndexWriter.Config() call IndexWriter.Config() call IndexWriter.Config() call IndexWriter.Config() call IndexWriter.Config() call IndexWriter.Config() call IndexWriter.Config() / / decl_stmt int = for = < ++ decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) decl_stmt Lucene.Net.Index.Term = new decl_stmt long = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) + call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) + * call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt Lucene.Net.Util.BytesRef = new foreach in for = < ++ decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt BinaryDocValues = call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() + decl_stmt NumericDocValues = call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() + for = < ++ call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() * + + + + + call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose()