Lucene.Net.Index System using Lucene.Net.Store.BufferedIndexInput Lucene.Net.Store.Directory Lucene.Net.Store.IndexInput class Lucene.Net.Index.TermVectorsReader super super IDisposable int int int int int int int bool byte int byte int FieldInfos IndexInput IndexInput IndexInput internal virtual internal virtual return internal virtual internal virtual return private private if < call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() + * + else call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() + * + internal virtual internal virtual return >= int int long long long long internal internal if == for = < ++ = for = < ++ = return if < throw new decl_stmt long = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt long = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt long = decl_stmt long = decl_stmt int = while < decl_stmt int = + + + <= if < = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() else = call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() = call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() == - = - = - ++ = = int private private decl_stmt int = if > throw new + + + + return public public decl System protected virtual protected virtual if return if decl_stmt IOException = if != try call IndexInput.Close() call IndexInput.Close() call IndexInput.Close() call IndexInput.Close() call IndexInput.Close() catch if == = if != try call IndexInput.Close() call IndexInput.Close() call IndexInput.Close() call IndexInput.Close() call IndexInput.Close() catch if == = if != try call IndexInput.Close() call IndexInput.Close() call IndexInput.Close() call IndexInput.Close() call IndexInput.Close() catch if == = if != throw new = internal virtual internal virtual return int int int long long int public virtual public virtual if != decl_stmt int = call FieldInfos.FieldNumber() call FieldInfos.FieldNumber() call FieldInfos.FieldNumber() call FieldInfos.FieldNumber() call FieldInfos.FieldNumber() decl_stmt long = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt int = decl_stmt int = - for = < ++ if >= = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() else += call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if == = if != - decl_stmt long if >= = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() else = call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() for = <= ++ += call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() else else ParallelArrayTermVectorMapper public virtual public virtual decl_stmt ParallelArrayTermVectorMapper = new return call ParallelArrayTermVectorMapper.MaterializeVector() call ParallelArrayTermVectorMapper.MaterializeVector() call ParallelArrayTermVectorMapper.MaterializeVector() call ParallelArrayTermVectorMapper.MaterializeVector() call ParallelArrayTermVectorMapper.MaterializeVector() decl System int private private decl_stmt int = decl_stmt System.String = new for = < ++ if >= = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() else += call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = call FieldInfos.FieldName() call FieldInfos.FieldName() call FieldInfos.FieldName() call FieldInfos.FieldName() call FieldInfos.FieldName() return long decl long private private decl_stmt long if >= = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() else = call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() decl_stmt long = new = for = < ++ += call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() = return long decl System int decl ITermFreqVector decl String public virtual public virtual decl_stmt Lucene.Net.Index.ITermFreqVector = if != decl_stmt long = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if != decl_stmt System.String = decl_stmt long = = else return long decl System int decl String public virtual public virtual if != decl_stmt long = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if != decl_stmt System.String = decl_stmt long = else decl SegmentTermVector var private private decl_stmt Lucene.Net.Index.SegmentTermVector = new for = < ++ decl_stmt var = new call var.SetDocumentNumber() call var.SetDocumentNumber() call var.SetDocumentNumber() call var.SetDocumentNumber() call var.SetDocumentNumber() = call var.MaterializeVector() call var.MaterializeVector() call var.MaterializeVector() call var.MaterializeVector() call var.MaterializeVector() return private private for = < ++ bool decl System int int int decl char int decl char bool decl int int int decl TermVectorOffsetInfo decl byte decl String int decl byte bool byte int private private call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if == return decl_stmt bool decl_stmt bool if >= decl_stmt byte = call IndexInput.ReadByte() call IndexInput.ReadByte() call IndexInput.ReadByte() call IndexInput.ReadByte() call IndexInput.ReadByte() = & != = & != else call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = = decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt byte decl_stmt char decl_stmt bool = < if = new = else = = new for = < ++ = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = + decl_stmt System.String if if < decl_stmt char = new * = call IndexInput.ReadChars() call IndexInput.ReadChars() call IndexInput.ReadChars() call IndexInput.ReadChars() call IndexInput.ReadChars() = new else if < decl_stmt byte = new * = call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() = decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt int = if if == = new decl_stmt int = for = < ++ = + call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = else for = < ++ call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt TermVectorOffsetInfo = if if == = new decl_stmt int = for = < ++ decl_stmt int = + call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt int = + call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = new = else for = < ++ call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() TermVectorsReader public virtual public virtual decl_stmt Lucene.Net.Index.TermVectorsReader = if != && != && != = call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() = call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() = call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() return