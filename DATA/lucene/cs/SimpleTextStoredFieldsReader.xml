Lucene.Net.Codecs.SimpleText System using System.Diagnostics using Support using Index.FieldInfo Index.FieldInfos Index.IndexFileNames Index.SegmentInfo Index.StoredFieldVisitor Store.AlreadyClosedException Store.BufferedChecksumIndexInput Store.ChecksumIndexInput Store.Directory Store.IOContext Store.IndexInput Util.ArrayUtil Util.BytesRef Util.CharsRef Util.IOUtils Util.StringHelper Util.UnicodeUtil class Lucene.Net.Codecs.SimpleText.SimpleTextStoredFieldsReader super super StoredFieldsReader decl long BytesRef FieldInfos CharsRef IndexInput var ChecksumIndexInput private private decl_stmt Lucene.Net.Store.ChecksumIndexInput = new = new decl_stmt var = while ! call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) if = ++ == FieldInfo int var BytesRef public override public override call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt var = for = < ++ decl_stmt int = decl_stmt Lucene.Net.Index.FieldInfo = call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) decl_stmt Lucene.Net.Util.BytesRef if = else if = else if = else if = else if = else if = else throw new switch case break case break case return var private private if call BytesRef.Bytes() call BytesRef.Bytes() call BytesRef.Bytes() call BytesRef.Bytes() call BytesRef.Bytes() call BytesRef.Bytes() call BytesRef.Bytes() call BytesRef.Bytes() call BytesRef.Bytes() + - else if decl_stmt var = new - + else if + - call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() else if + - call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() else if + - call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() else if + - call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() public override public override if == throw new return new call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() protected override protected override if return try finally = = private private private private + - return private private return == - && + - public override public override return public override public override