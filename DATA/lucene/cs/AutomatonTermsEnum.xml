Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Util.Automaton.ByteRunAutomaton Lucene.Net.Util.BytesRef Lucene.Net.Util.Automaton.CompiledAutomaton Lucene.Net.Util.IntsRef Lucene.Net.Util.StringHelper Lucene.Net.Util.Automaton.Transition class Lucene.Net.Index.AutomatonTermsEnum super super FilteredTermsEnum decl IComparer bool long BytesRef decl Transition BytesRef IntsRef bool BytesRef decl long ByteRunAutomaton protected internal override protected internal override if == || if call ByteRunAutomaton.Run() call ByteRunAutomaton.Run() call ByteRunAutomaton.Run() call ByteRunAutomaton.Run() call ByteRunAutomaton.Run() return : else return && call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() < : else return && call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() < : protected internal override protected internal override if == == if call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() return else call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) if return else return int int int Transition == decl_stmt int = decl_stmt int = for = < ++ = call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() & >= + for = < ++ decl_stmt Lucene.Net.Util.Automaton.Transition = if <= & && & <= = break if != ++ decl_stmt int = + if < = new = byte = = decl int int int int int private private decl_stmt int decl_stmt int = call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) call Lucene.Net.Util.IntsRef.Grow(int) + decl_stmt int = = while ++ = for = < ++ = decl_stmt int = call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() & if == - break + = if == && ! && == = = if return else if = < return decl_stmt int = call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() call ByteRunAutomaton.Step() & if >= && call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() return if == = int int decl Transition Transition private private decl_stmt int = if < = & if ++ == return = = decl_stmt Lucene.Net.Util.Automaton.Transition = for = < ++ decl_stmt Lucene.Net.Util.Automaton.Transition = if >= decl_stmt int = call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) + ++ - = byte = while != && ! call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() call ByteRunAutomaton.IsAccept() = = = call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) + ++ - = byte if == && ! && == = - return return int private private while -- > decl_stmt int = & if ++ != = byte = + return return -