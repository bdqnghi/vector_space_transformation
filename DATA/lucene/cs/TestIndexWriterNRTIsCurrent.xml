Lucene.Net.Index Apache.NMS.Util using System using System.Threading using Lucene.Net.Documents using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using System.IO using Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Documents.Document Field Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer TextField class attribute Lucene.Net.Index.TestIndexWriterNRTIsCurrent super super LuceneTestCase bool IndexWriter WriterThread decl ReaderThread IndexWriterConfig CountDownLatch ReaderHolder Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriterConfig = new decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt ReaderHolder = new decl_stmt ReaderThread = new decl_stmt CountDownLatch = new decl_stmt WriterThread = new for = < ++ = new call WriterThread.Start() call WriterThread.Start() call WriterThread.Start() call WriterThread.Start() call WriterThread.Start() call WriterThread.Join() call WriterThread.Join() call WriterThread.Join() call WriterThread.Join() call WriterThread.Join() decl_stmt bool = != if call WriterThread.Failed() call WriterThread.Failed() call WriterThread.Failed() call WriterThread.Failed() call WriterThread.Failed() call WriterThread.Failed() call WriterThread.Failed() call WriterThread.Failed() call WriterThread.Failed() for = < ++ if != = call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() Term Document Random DirectoryReader DirectoryReader float public override public override decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt System.Random = try decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new = = decl_stmt Lucene.Net.Index.Term = new for = < && ! ++ decl_stmt float = float call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() call Random.NextDouble() if < call Lucene.Net.Index.Term.Set(string,BytesRef) call Lucene.Net.Index.Term.Set(string,BytesRef) call Lucene.Net.Index.Term.Set(string,BytesRef) call Lucene.Net.Index.Term.Set(string,BytesRef) call Lucene.Net.Index.Term.Set(string,BytesRef) new else if < else call Lucene.Net.Index.Term.Set(string,BytesRef) call Lucene.Net.Index.Term.Set(string,BytesRef) call Lucene.Net.Index.Term.Set(string,BytesRef) call Lucene.Net.Index.Term.Set(string,BytesRef) call Lucene.Net.Index.Term.Set(string,BytesRef) new if != = if = if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() decl_stmt Lucene.Net.Index.DirectoryReader = if != call DirectoryReader.DecRef() call DirectoryReader.DecRef() call DirectoryReader.DecRef() call DirectoryReader.DecRef() call DirectoryReader.DecRef() = if == catch = finally = if if != try call DirectoryReader.DecRef() call DirectoryReader.DecRef() call DirectoryReader.DecRef() call DirectoryReader.DecRef() call DirectoryReader.DecRef() catch if + bool DirectoryReader public override public override try catch = return decl_stmt Lucene.Net.Index.DirectoryReader while = != if call DirectoryReader.TryIncRef() call DirectoryReader.TryIncRef() call DirectoryReader.TryIncRef() call DirectoryReader.TryIncRef() call DirectoryReader.TryIncRef() try decl_stmt bool = if + + + + + catch if + + + + = = return finally try call DirectoryReader.DecRef() call DirectoryReader.DecRef() call DirectoryReader.DecRef() call DirectoryReader.DecRef() call DirectoryReader.DecRef() catch if == = return