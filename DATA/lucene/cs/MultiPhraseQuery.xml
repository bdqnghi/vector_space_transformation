Lucene.Net.Search System using System.Collections.Generic using System.Diagnostics using System.Linq using System.Text using Lucene.Net.Support using Lucene.Net.Util.ArrayUtil Lucene.Net.Index.AtomicReader Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Index.DocsAndPositionsEnum Lucene.Net.Index.DocsEnum Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexReaderContext Lucene.Net.Search.Similarities.Similarity Lucene.Net.Search.Similarities.Similarity.SimScorer Lucene.Net.Index.Term Lucene.Net.Index.TermContext Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum Lucene.Net.Index.TermState Lucene.Net.Util.ToStringUtils class Lucene.Net.Search.MultiPhraseQuery super super Query string decl List int decl List if < throw new = return public virtual public virtual new int public virtual public virtual decl_stmt int = if > = int - + public virtual public virtual if == = for = < ++ if ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() throw new + + + call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return call decl List.AsReadOnly() call decl List.AsReadOnly() call decl List.AsReadOnly() call decl List.AsReadOnly() call decl List.AsReadOnly() var decl_stmt var = new for = < ++ = int return public override public override < foreach in foreach in return return public override public override TermState TermsEnum DocsAndPositionsEnum Bits Terms decl PhraseQuery TermState AtomicReader Term decl Term decl PostingsAndFreq public override public override > decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt PostingsAndFreq = new decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) if == return decl_stmt Lucene.Net.Index.TermsEnum = call decl PostingsAndFreq.Iterator() call decl PostingsAndFreq.Iterator() call decl PostingsAndFreq.Iterator() call decl PostingsAndFreq.Iterator() call decl PostingsAndFreq.Iterator() for = < ++ decl_stmt Lucene.Net.Index.Term = decl_stmt DocsAndPositionsEnum decl_stmt int if > = new = for = < ++ decl_stmt Lucene.Net.Index.Term = decl_stmt Lucene.Net.Index.TermState = if == continue call Terms.SeekExact() call Terms.SeekExact() call Terms.SeekExact() call Terms.SeekExact() call Terms.SeekExact() += call Terms.DocFreq() call Terms.DocFreq() call Terms.DocFreq() call Terms.DocFreq() call Terms.DocFreq() if == return else decl_stmt Lucene.Net.Index.Term = decl_stmt Lucene.Net.Index.TermState = if == return call Terms.SeekExact() call Terms.SeekExact() call Terms.SeekExact() call Terms.SeekExact() call Terms.SeekExact() = call Terms.DocsAndPositions() call Terms.DocsAndPositions() call Terms.DocsAndPositions() call Terms.DocsAndPositions() call Terms.DocsAndPositions() if == call Terms.Docs() call Terms.Docs() call Terms.Docs() call Terms.Docs() call Terms.Docs() != throw new + + + call TermState.Text() call TermState.Text() call TermState.Text() call TermState.Text() call TermState.Text() + = call Terms.DocFreq() call Terms.DocFreq() call Terms.DocFreq() call Terms.DocFreq() call Terms.DocFreq() = new int if == if == decl_stmt Lucene.Net.Search.ExactPhraseScorer = new if return else return else return new Scorer SimScorer ComplexExplanation int float Explanation public override public override decl_stmt Lucene.Net.Search.Scorer = if != decl_stmt int = call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() if == decl_stmt float = == call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() : decl_stmt SimScorer = decl_stmt Lucene.Net.Search.ComplexExplanation = new = + + + + + + decl_stmt Lucene.Net.Search.Explanation = call SimScorer.Explain() call SimScorer.Explain() call SimScorer.Explain() call SimScorer.Explain() call SimScorer.Explain() new + call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() = = return return new BooleanQuery decl Term BooleanQuery public override public override if == decl_stmt Lucene.Net.Search.BooleanQuery = new = return else if == decl_stmt Lucene.Net.Index.Term = decl_stmt Lucene.Net.Search.BooleanQuery = new for = < ++ call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) new = return else return public override public override return new decl Term StringBuilder int int decl IEnumerator int bool public override sealed public override sealed decl_stmt System.Text.StringBuilder = new if == || ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt int = decl_stmt System.Collections.Generic.IEnumerator < = call decl List.GetEnumerator() call decl List.GetEnumerator() call decl List.GetEnumerator() call decl List.GetEnumerator() call decl List.GetEnumerator() decl_stmt int ? = - decl_stmt bool = while call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt Lucene.Net.Index.Term = decl_stmt int ? = if = else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) for = < - ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) for = < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if < - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) MultiPhraseQuery public override public override if ! is return decl_stmt Lucene.Net.Search.MultiPhraseQuery = return == && == && && public override public override return ^ ^ ^ == : call decl List.First() call decl List.First() call decl List.First() call decl List.First() call decl List.First() call decl List.Last() call decl List.Last() call decl List.Last() call decl List.Last() call decl List.Last() ^ int private private decl_stmt int = foreach in = * + == : return decl Term decl IEnumerator decl IEnumerator decl Term private private < < if != return decl_stmt System.Collections.Generic.IEnumerator < = decl_stmt System.Collections.Generic.IEnumerator < = while call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt Lucene.Net.Index.Term = call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt Lucene.Net.Index.Term = if ! == == : return return