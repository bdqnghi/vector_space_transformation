Lucene.Net.Index Lucene.Net.Store using Lucene.Net.Support using System using System.Threading using System.Diagnostics using Lucene.Net.Index.DocValuesUpdate.BinaryDocValuesUpdate Lucene.Net.Index.DocValuesUpdate.NumericDocValuesUpdate Lucene.Net.Search.Query class Lucene.Net.Index.DocumentsWriterDeleteQueue long Node BufferedUpdates ReentrantLock DeleteSlice public public params params params new public public params params params new internal internal new internal internal new TermNode public public decl_stmt TermNode = new = != Node Node private private while decl_stmt Lucene.Net.Util.Fst.Node = decl_stmt Lucene.Net.Util.Fst.Node = if == if != ref else if call Node.CasNext() call Node.CasNext() call Node.CasNext() call Node.CasNext() call Node.CasNext() ref return public public call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() try return call Lucene.Net.Index.BufferedUpdates.Any() call Lucene.Net.Index.BufferedUpdates.Any() call Lucene.Net.Index.BufferedUpdates.Any() call Lucene.Net.Index.BufferedUpdates.Any() call Lucene.Net.Index.BufferedUpdates.Any() || ! || != || != finally call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() public public if call Lucene.Net.Support.ReentrantLock.TryLock() call Lucene.Net.Support.ReentrantLock.TryLock() call Lucene.Net.Support.ReentrantLock.TryLock() call Lucene.Net.Support.ReentrantLock.TryLock() call Lucene.Net.Support.ReentrantLock.TryLock() try if call DeleteSlice.Apply() call DeleteSlice.Apply() call DeleteSlice.Apply() call DeleteSlice.Apply() call DeleteSlice.Apply() finally call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() Node FrozenBufferedUpdates public public call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() decl_stmt Lucene.Net.Util.Fst.Node = if != = try if != = call DeleteSlice.Apply() call DeleteSlice.Apply() call DeleteSlice.Apply() call DeleteSlice.Apply() call DeleteSlice.Apply() decl_stmt Lucene.Net.Index.FrozenBufferedUpdates = new call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() return finally call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() public public return new public public if != = return return Node public virtual public virtual if == return decl_stmt Lucene.Net.Util.Fst.Node = do = != call Node.Apply() call Node.Apply() call Node.Apply() call Node.Apply() call Node.Apply() != internal virtual internal virtual = public virtual public virtual return == return == public public return call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() Node public public call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() try decl_stmt Lucene.Net.Util.Fst.Node = = = call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() finally call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() internal virtual internal virtual throw new internal virtual internal virtual return ref internal override internal override public override public override return + internal override internal override foreach in internal override internal override foreach in public override public override return + internal override internal override public override public override return + internal override internal override public override public override return + Node private private call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() decl_stmt Lucene.Net.Util.Fst.Node = try if != = call DeleteSlice.Apply() call DeleteSlice.Apply() call DeleteSlice.Apply() call DeleteSlice.Apply() call DeleteSlice.Apply() return call Lucene.Net.Index.BufferedUpdates.Any() call Lucene.Net.Index.BufferedUpdates.Any() call Lucene.Net.Index.BufferedUpdates.Any() call Lucene.Net.Index.BufferedUpdates.Any() call Lucene.Net.Index.BufferedUpdates.Any() finally call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() call ReentrantLock.Lock() try return finally call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() call Lucene.Net.Support.ReentrantLock.Unlock() public public return call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() public override public override return + +