Lucene.Net.Store System using System.Collections.Generic using System.Linq using System.Threading using Lucene.Net.Support using System.IO using Lucene.Net.Util.Constants Lucene.Net.Util.IOUtils class Lucene.Net.Store.FSDirectory super super BaseDirectory DirectoryInfo decl ISet int int public static public static return public static public static if || || && && return new else if return new else return new FSLockFactory DirectoryInfo = if is decl_stmt Lucene.Net.Store.FSLockFactory = decl_stmt System.IO.DirectoryInfo = if == = = else if call DirectoryInfo.FullName() call DirectoryInfo.FullName() call DirectoryInfo.FullName() call DirectoryInfo.FullName() call DirectoryInfo.FullName() call DirectoryInfo.FullName() call DirectoryInfo.FullName() call DirectoryInfo.FullName() call DirectoryInfo.FullName() = decl FileInfo decl string public static public static if ! throw new + + else if throw new + + decl_stmt System.IO.FileInfo = decl_stmt string = new for = < ++ = if == throw new + + return public override public override return public override public override return long FileInfo public override public override decl_stmt System.IO.FileInfo = new decl_stmt long = if == && ! throw new else return FileInfo public override public override decl_stmt System.IO.FileInfo = new try call System.IO.FileInfo.Delete() call System.IO.FileInfo.Delete() call System.IO.FileInfo.Delete() call System.IO.FileInfo.Delete() call System.IO.FileInfo.Delete() catch throw new + call decl ISet.Remove() call decl ISet.Remove() call decl ISet.Remove() call decl ISet.Remove() call decl ISet.Remove() public override public override return new FileInfo protected internal virtual protected internal virtual if ! try call System.IO.DirectoryInfo.Create(DirectorySecurity) call System.IO.DirectoryInfo.Create(DirectorySecurity) call System.IO.DirectoryInfo.Create(DirectorySecurity) call System.IO.DirectoryInfo.Create(DirectorySecurity) call System.IO.DirectoryInfo.Create(DirectorySecurity) catch throw new + decl_stmt System.IO.FileInfo = new if try call System.IO.FileInfo.Delete() call System.IO.FileInfo.Delete() call System.IO.FileInfo.Delete() call System.IO.FileInfo.Delete() call System.IO.FileInfo.Delete() catch throw new + protected internal virtual protected internal virtual call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() decl ISet public override public override < decl_stmt System.Collections.Generic.ISet < = new < call decl ISet.IntersectWith() call decl ISet.IntersectWith() call decl ISet.IntersectWith() call decl ISet.IntersectWith() call decl ISet.IntersectWith() foreach in if > call decl ISet.ExceptWith() call decl ISet.ExceptWith() call decl ISet.ExceptWith() call decl ISet.ExceptWith() call decl ISet.ExceptWith() char string int decl_stmt string try = catch throw new decl_stmt int = for = < ++ decl_stmt char = = * + return + call int.ToString() call int.ToString() call int.ToString() call int.ToString() call int.ToString() public override public override = return public override public override return + + + + if <= throw new = return int protected internal override protected internal override while > decl_stmt int = += -= decl System public override public override if decl_stmt IOException = try catch = finally = public override public override return protected protected =