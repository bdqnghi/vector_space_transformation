Lucene.Net.Index System.Collections.Generic using System.Diagnostics using System.Threading using System using System.IO using System.Text.RegularExpressions using Lucene.Net.Store.AlreadyClosedException Lucene.Net.Util.CollectionUtil Lucene.Net.Store.Directory Lucene.Net.Util.InfoStream Lucene.Net.Store.NoSuchDirectoryException class Lucene.Net.Index.IndexFileDeleter super super IDisposable IndexWriter InfoStream decl IList decl IList decl List bool IndexDeletionPolicy decl IList decl IDictionary Directory bool SegmentInfos private private return == || private private if == throw new else call Lucene.Net.Index.IndexWriter.EnsureOpen() call Lucene.Net.Index.IndexWriter.EnsureOpen() call Lucene.Net.Index.IndexWriter.EnsureOpen() call Lucene.Net.Index.IndexWriter.EnsureOpen() call Lucene.Net.Index.IndexWriter.EnsureOpen() return int CommitPoint int int private private decl_stmt int = if > for = < ++ decl_stmt CommitPoint = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + foreach in call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() = decl_stmt int = decl_stmt int = while < decl_stmt CommitPoint = if ! if != = ++ ++ while > call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() - -- decl string string string Regex string public public decl_stmt string = call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() decl_stmt string decl_stmt string if != = + = + else = = decl_stmt System.Text.RegularExpressions.Regex = for = < ++ decl_stmt string = if == || call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() || call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() && ! call string.EndsWith() call string.EndsWith() call string.EndsWith() call string.EndsWith() call string.EndsWith() && ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() && ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() && call System.Text.RegularExpressions.Regex.IsMatch(String,String,RegexOptions,TimeSpan) call System.Text.RegularExpressions.Regex.IsMatch(String,String,RegexOptions,TimeSpan) call System.Text.RegularExpressions.Regex.IsMatch(String,String,RegexOptions,TimeSpan) call System.Text.RegularExpressions.Regex.IsMatch(String,String,RegexOptions,TimeSpan) call System.Text.RegularExpressions.Regex.IsMatch(String,String,RegexOptions,TimeSpan) || call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + public public = public public if > call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() internal internal if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) if > call IndexDeletionPolicy.OnCommit() call IndexDeletionPolicy.OnCommit() call IndexDeletionPolicy.OnCommit() call IndexDeletionPolicy.OnCommit() call IndexDeletionPolicy.OnCommit() decl IList int public public if != decl_stmt System.Collections.Generic.IList < = = decl_stmt int = for = < ++ if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + long long public public decl_stmt long = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) = / call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.ToLiveInfos(SegmentInfos) call Lucene.Net.Index.IndexWriter.ToLiveInfos(SegmentInfos) call Lucene.Net.Index.IndexWriter.ToLiveInfos(SegmentInfos) call Lucene.Net.Index.IndexWriter.ToLiveInfos(SegmentInfos) call Lucene.Net.Index.IndexWriter.ToLiveInfos(SegmentInfos) + + + + + + if call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call IndexDeletionPolicy.OnCommit() call IndexDeletionPolicy.OnCommit() call IndexDeletionPolicy.OnCommit() call IndexDeletionPolicy.OnCommit() call IndexDeletionPolicy.OnCommit() else call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) decl_stmt long = / call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) - / + internal internal foreach in internal internal < foreach in RefCount internal internal decl_stmt Lucene.Net.Util.RefCount = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) if call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + call Lucene.Net.Util.RefCount.IncRef() call Lucene.Net.Util.RefCount.IncRef() call Lucene.Net.Util.RefCount.IncRef() call Lucene.Net.Util.RefCount.IncRef() call Lucene.Net.Util.RefCount.IncRef() internal internal < foreach in RefCount internal internal decl_stmt Lucene.Net.Util.RefCount = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) if call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + if == call Lucene.Net.Util.RefCount.DecRef() call Lucene.Net.Util.RefCount.DecRef() call Lucene.Net.Util.RefCount.DecRef() call Lucene.Net.Util.RefCount.DecRef() call Lucene.Net.Util.RefCount.DecRef() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() internal internal foreach in public public if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() return else return > RefCount private private decl_stmt Lucene.Net.Util.RefCount if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() = new = else = return internal internal < foreach in internal internal < foreach in if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() || == if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + internal internal try if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() catch if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + if == = new < call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() public public if ! = else > + + + return ++ public public > + + + return -- public override public override return + + return return return return return return public override public override if ! = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return