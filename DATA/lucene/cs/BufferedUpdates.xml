Lucene.Net.Index System using System.Collections.Generic using System.Collections.Specialized using Lucene.Net.Support using Lucene.Net.Index.DocValuesUpdate.BinaryDocValuesUpdate Lucene.Net.Index.DocValuesUpdate.NumericDocValuesUpdate Lucene.Net.Search.Query Lucene.Net.Util.RamUsageEstimator class Lucene.Net.Index.BufferedUpdates int AtomicLong int decl IDictionary AtomicInteger int decl IDictionary long AtomicInteger int int bool int decl IList AtomicInteger int int decl IDictionary string public override public override if return + + + + + + + + + + + + + + + else decl_stmt string = + if call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() != += + call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() + + + if != += + + if != += + + if call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() != += + call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() + + + if call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() != += + call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() + + + if call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() != += + call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() return int public virtual public virtual decl_stmt int ? call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = if == call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() public virtual public virtual call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() int public virtual public virtual decl_stmt int ? out if != && < return = call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() if == call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() + + * NumericDocValuesUpdate OrderedDictionary public virtual public virtual decl_stmt System.Web.Util.OrderedDictionary = if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = new = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() decl_stmt NumericDocValuesUpdate = if call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) = as if != && < return = if != call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) = call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() if == call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() + BinaryDocValuesUpdate OrderedDictionary public virtual public virtual decl_stmt System.Web.Util.OrderedDictionary if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = new = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() decl_stmt BinaryDocValuesUpdate = if call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) call System.Web.Util.OrderedDictionary.Contains(KeyValuePair) = as if != && < return = if != call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) call System.Web.Util.OrderedDictionary.Remove(TKey) = call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() if == call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() + internal virtual internal virtual call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicLong.Set(int) call Lucene.Net.Support.AtomicLong.Set(int) call Lucene.Net.Support.AtomicLong.Set(int) call Lucene.Net.Support.AtomicLong.Set(int) call Lucene.Net.Support.AtomicLong.Set(int) internal virtual internal virtual return > || > || > || > || >