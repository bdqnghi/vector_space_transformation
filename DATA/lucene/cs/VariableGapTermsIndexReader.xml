Lucene.Net.Codecs.BlockTerms System using System.Collections.Generic using System.Diagnostics using System.Linq using Index using Store using Util using Util.Fst using class Lucene.Net.Codecs.BlockTerms.VariableGapTermsIndexReader super super TermsIndexReaderBase int IndexInput bool PositiveIntOutputs int long decl Dictionary int private private decl_stmt int = if < = return public override public override if != && ! call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() return return FieldIndexData public override public override decl_stmt FieldIndexData = return == : new private private if >= - - = else if >= - = return call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() var var var var var var private private if != return decl_stmt var = call var.Seek() call var.Seek() call var.Seek() call var.Seek() call var.Seek() = new < ? call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() if > decl_stmt var = new decl_stmt var = decl_stmt var = new < ? decl_stmt var = new < ? decl_stmt var = decl_stmt var = new decl_stmt var = decl_stmt var = new < ? decl_stmt var = new < ? decl_stmt var = while = call var.Next() call var.Next() call var.Next() call var.Next() call var.Next() != if == call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() = ++ = call var.Finish() call var.Finish() call var.Finish() call var.Finish() call var.Finish() public public return == : return == : public override ? public override ? = return = if == return - return throw new public override ? public override ? throw new