Lucene.Net.Search.Spans System.Collections.Generic using System.Linq using System.Text using Lucene.Net.Support using Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.Bits Lucene.Net.Index.IndexReader Lucene.Net.Index.Term Lucene.Net.Index.TermContext Lucene.Net.Util.ToStringUtils class Lucene.Net.Search.Spans.SpanNearQuery super super SpanQuery bool decl IList int bool string return call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() return return return public override public override < foreach in StringBuilder decl IEnumerator SpanQuery public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt System.Collections.Generic.IEnumerator < = call decl IList.GetEnumerator() call decl IList.GetEnumerator() call decl IList.GetEnumerator() call decl IList.GetEnumerator() call decl IList.GetEnumerator() while call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt Lucene.Net.Search.Spans.SpanQuery = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call SpanQuery.ToString() call SpanQuery.ToString() call SpanQuery.ToString() call SpanQuery.ToString() call SpanQuery.ToString() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if > call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public override public override < if == return new if == return return new : new SpanQuery SpanNearQuery SpanQuery public override public override decl_stmt Lucene.Net.Search.Spans.SpanNearQuery = for = < ++ decl_stmt Lucene.Net.Search.Spans.SpanQuery = decl_stmt Lucene.Net.Search.Spans.SpanQuery = call SpanQuery.Rewrite() call SpanQuery.Rewrite() call SpanQuery.Rewrite() call SpanQuery.Rewrite() call SpanQuery.Rewrite() if != if == = = if != return else return int decl SpanQuery SpanNearQuery public override public override decl_stmt int = decl_stmt Lucene.Net.Search.Spans.SpanQuery = new for = < ++ = decl_stmt Lucene.Net.Search.Spans.SpanNearQuery = new = return SpanNearQuery public override public override if == return if ! is return decl_stmt Lucene.Net.Search.Spans.SpanNearQuery = if != return if != return if ! call decl IList.SequenceEqual() call decl IList.SequenceEqual() call decl IList.SequenceEqual() call decl IList.SequenceEqual() call decl IList.SequenceEqual() return return == int public override public override decl_stmt int = call decl IList.First() call decl IList.First() call decl IList.First() call decl IList.First() call decl IList.First() call decl IList.Last() call decl IList.Last() call decl IList.Last() call decl IList.Last() call decl IList.Last() ^= << | uint >> += += ^= unchecked int : return