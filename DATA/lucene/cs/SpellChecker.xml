SpellChecker.Net.Search.Spell System.Collections.Generic using System using Lucene.Net.Search using Lucene.Net.Store using Lucene.Net.Search.BooleanClause Lucene.Net.Search.BooleanQuery Lucene.Net.Store.Directory Lucene.Net.Documents.Document Lucene.Net.Documents.Field Lucene.Net.Index.IndexReader Lucene.Net.Search.IndexSearcher Lucene.Net.Index.IndexWriter Lucene.Net.Search.Query Lucene.Net.Index.Term Lucene.Net.Search.TermQuery Lucene.Net.Analysis.WhitespaceAnalyzer class SpellChecker.Net.Search.Spell.SpellChecker super super IDisposable float Directory decl System IndexSearcher decl System Term float decl Object decl System decl String decl Object var virtual public virtual public lock if ! decl_stmt var = new call var.Close() call var.Close() call var.Close() call var.Close() call var.Close() public public = public public return virtual public virtual public = public virtual public virtual return var SuggestWordQueue decl String int float decl String int int decl ScoreDoc int IndexSearcher String var int SuggestWord public virtual public virtual decl_stmt Lucene.Net.Search.IndexSearcher = try decl_stmt float = decl_stmt int = decl_stmt int = != && != new : decl_stmt int = && != && != : if ! && > return new decl_stmt var = new decl_stmt System.String decl_stmt System.String decl_stmt var = new < for = <= ++ = + = if == continue if > + if > + - for = < ++ decl_stmt int = * decl_stmt Lucene.Net.Search.ScoreDoc = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) decl_stmt SpellChecker.Net.Search.Spell.SuggestWordQueue = new decl_stmt int = decl_stmt SpellChecker.Net.Search.Spell.SuggestWord = new for = < ++ = call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) if call SuggestWord.termString() call SuggestWord.termString() call SuggestWord.termString() call SuggestWord.termString() call SuggestWord.termString() call SuggestWord.termString() call SuggestWord.termString() call SuggestWord.termString() call SuggestWord.termString() continue = call decl Object.GetDistance() call decl Object.GetDistance() call decl Object.GetDistance() call decl Object.GetDistance() call decl Object.GetDistance() if < continue if != && != = new if && > || < continue if call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() == continue call SuggestWordQueue.InsertWithOverflow() call SuggestWordQueue.InsertWithOverflow() call SuggestWordQueue.InsertWithOverflow() call SuggestWordQueue.InsertWithOverflow() call SuggestWordQueue.InsertWithOverflow() if call SuggestWordQueue.Size() call SuggestWordQueue.Size() call SuggestWordQueue.Size() call SuggestWordQueue.Size() call SuggestWordQueue.Size() == = call SuggestWordQueue.Top() call SuggestWordQueue.Top() call SuggestWordQueue.Top() call SuggestWordQueue.Top() call SuggestWordQueue.Top() = new decl_stmt System.String = new call SuggestWordQueue.Size() call SuggestWordQueue.Size() call SuggestWordQueue.Size() call SuggestWordQueue.Size() call SuggestWordQueue.Size() for = call SuggestWordQueue.Size() call SuggestWordQueue.Size() call SuggestWordQueue.Size() call SuggestWordQueue.Size() call SuggestWordQueue.Size() - >= -- = call SuggestWordQueue.Pop() call SuggestWordQueue.Pop() call SuggestWordQueue.Pop() call SuggestWordQueue.Pop() call SuggestWordQueue.Pop() return finally Query private static private static decl_stmt Lucene.Net.Search.Query = new new = new private static private static new new new decl System int private static private static decl_stmt int = decl_stmt System.String = new - + for = < - + ++ = + - return IndexWriter Directory public virtual public virtual lock decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new call IndexWriter.Close() call IndexWriter.Close() call IndexWriter.Close() call IndexWriter.Close() call IndexWriter.Close() IndexSearcher public virtual public virtual decl_stmt Lucene.Net.Search.IndexSearcher = try return call IndexSearcher.DocFreq() call IndexSearcher.DocFreq() call IndexSearcher.DocFreq() call IndexSearcher.DocFreq() call IndexSearcher.DocFreq() call decl String.CreateTerm() call decl String.CreateTerm() call decl String.CreateTerm() call decl String.CreateTerm() call decl String.CreateTerm() > finally decl Collections decl System IndexWriter decl IEnumerator decl System Directory public virtual public virtual lock decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new new = call IndexWriter.SetMaxBufferedDocs() call IndexWriter.SetMaxBufferedDocs() call IndexWriter.SetMaxBufferedDocs() call IndexWriter.SetMaxBufferedDocs() call IndexWriter.SetMaxBufferedDocs() decl_stmt System.Collections.Generic.IEnumerator = while call decl System.MoveNext() call decl System.MoveNext() call decl System.MoveNext() call decl System.MoveNext() call decl System.MoveNext() decl_stmt System.String = decl_stmt int = if < continue if continue decl_stmt Lucene.Net.Documents.Document = call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call IndexWriter.Optimize() call IndexWriter.Optimize() call IndexWriter.Optimize() call IndexWriter.Optimize() call IndexWriter.Optimize() call IndexWriter.Close() call IndexWriter.Close() call IndexWriter.Close() call IndexWriter.Close() call IndexWriter.Close() public public private private if > return if == return return private private if > return if == return return Document private static private static decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new return decl String decl System int decl System private static private static decl_stmt int = for = <= ++ decl_stmt System.String = + decl_stmt System.String = for = < - + ++ decl_stmt System.String = + - new if == new + = if != new + private private lock call float.IndexReader() call float.IndexReader() call float.IndexReader() call float.IndexReader() call float.IndexReader() call float.IndexReader() call float.IndexReader() call float.IndexReader() call float.IndexReader() return private private private private if throw new public public lock = if != call float.Close() call float.Close() call float.Close() call float.Close() call float.Close() = IndexSearcher private private decl_stmt Lucene.Net.Search.IndexSearcher = lock if call IndexSearcher.Close() call IndexSearcher.Close() call IndexSearcher.Close() call IndexSearcher.Close() call IndexSearcher.Close() throw new if != call float.Close() call float.Close() call float.Close() call float.Close() call float.Close() = = public virtual public virtual return new return public public protected protected if if !