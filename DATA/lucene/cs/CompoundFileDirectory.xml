Lucene.Net.Store System.Collections.Generic using System.Diagnostics using System.Linq using Lucene.Net.Support using System using Lucene.Net.Codecs.CodecUtil Lucene.Net.Index.CorruptIndexException Lucene.Net.Index.IndexFileNames Lucene.Net.Util.IOUtils class Lucene.Net.Store.CompoundFileDirectory super super BaseDirectory Directory IndexInputSlicer int CompoundFileWriter string byte bool byte byte decl IDictionary decl IDictionary byte byte byte decl IO int ChecksumIndexInput IndexInput string int byte int decl IDictionary decl IOException decl System private static < private static < decl_stmt IOException = decl_stmt Lucene.Net.Store.IndexInput = decl_stmt Lucene.Net.Store.ChecksumIndexInput = try decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = decl_stmt int = call decl IO.ReadVInt() call decl IO.ReadVInt() call decl IO.ReadVInt() call decl IO.ReadVInt() call decl IO.ReadVInt() if == decl_stmt byte = call decl IO.ReadByte() call decl IO.ReadByte() call decl IO.ReadByte() call decl IO.ReadByte() call decl IO.ReadByte() decl_stmt byte = call decl IO.ReadByte() call decl IO.ReadByte() call decl IO.ReadByte() call decl IO.ReadByte() call decl IO.ReadByte() decl_stmt byte = call decl IO.ReadByte() call decl IO.ReadByte() call decl IO.ReadByte() call decl IO.ReadByte() call decl IO.ReadByte() if != || != || != throw new + + + + + decl_stmt int = decl_stmt string = = decl_stmt int = call decl IOException.ReadVInt() call decl IOException.ReadVInt() call decl IOException.ReadVInt() call decl IOException.ReadVInt() call decl IOException.ReadVInt() = new < for = < ++ decl_stmt FileEntry = new decl_stmt string = call decl IOException.ReadString() call decl IOException.ReadString() call decl IOException.ReadString() call decl IOException.ReadString() call decl IOException.ReadString() if call IndexInput.ContainsKey() call IndexInput.ContainsKey() call IndexInput.ContainsKey() call IndexInput.ContainsKey() call IndexInput.ContainsKey() throw new + + + else = = call decl IOException.ReadLong() call decl IOException.ReadLong() call decl IOException.ReadLong() call decl IOException.ReadLong() call decl IOException.ReadLong() = call decl IOException.ReadLong() call decl IOException.ReadLong() call decl IOException.ReadLong() call decl IOException.ReadLong() call decl IOException.ReadLong() if >= else else = return catch = finally throw new int bool decl IDictionary long long FileEntry string FileEntry private static < private static < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < decl_stmt int decl_stmt bool if < if < throw new + + + + + + = = else = = decl_stmt long = decl_stmt FileEntry = for = < ++ decl_stmt long = if < || || throw new + + + + decl_stmt string = if = if != = - = new = decl_stmt FileEntry = = if != throw new + + + if != = - return return return public override public override lock if ! return = if != call Lucene.Net.Store.CompoundFileWriter.Dispose() call Lucene.Net.Store.CompoundFileWriter.Dispose() call Lucene.Net.Store.CompoundFileWriter.Dispose() call Lucene.Net.Store.CompoundFileWriter.Dispose() call Lucene.Net.Store.CompoundFileWriter.Dispose() else FileEntry string public override public override lock ! decl_stmt string = decl_stmt FileEntry if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out throw new + + + + + + return call IndexInputSlicer.OpenSlice() call IndexInputSlicer.OpenSlice() call IndexInputSlicer.OpenSlice() call IndexInputSlicer.OpenSlice() call IndexInputSlicer.OpenSlice() string decl string public override public override decl_stmt string if != = call Lucene.Net.Store.CompoundFileWriter.ListAll() call Lucene.Net.Store.CompoundFileWriter.ListAll() call Lucene.Net.Store.CompoundFileWriter.ListAll() call Lucene.Net.Store.CompoundFileWriter.ListAll() call Lucene.Net.Store.CompoundFileWriter.ListAll() else = call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() decl_stmt string = for = < ++ = + return public override public override if != return call Lucene.Net.Store.CompoundFileWriter.FileExists(string) call Lucene.Net.Store.CompoundFileWriter.FileExists(string) call Lucene.Net.Store.CompoundFileWriter.FileExists(string) call Lucene.Net.Store.CompoundFileWriter.FileExists(string) call Lucene.Net.Store.CompoundFileWriter.FileExists(string) return call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() public override public override throw new public public throw new FileEntry public override public override if != return call CompoundFileWriter.FileLength() call CompoundFileWriter.FileLength() call CompoundFileWriter.FileLength() call CompoundFileWriter.FileLength() call CompoundFileWriter.FileLength() decl_stmt FileEntry = if == throw new return public override public override return call Lucene.Net.Store.CompoundFileWriter.CreateOutput(string,IOContext) call Lucene.Net.Store.CompoundFileWriter.CreateOutput(string,IOContext) call Lucene.Net.Store.CompoundFileWriter.CreateOutput(string,IOContext) call Lucene.Net.Store.CompoundFileWriter.CreateOutput(string,IOContext) call Lucene.Net.Store.CompoundFileWriter.CreateOutput(string,IOContext) public override public override < throw new public override public override throw new FileEntry string public override public override ! decl_stmt string = decl_stmt FileEntry = if == throw new + + + + + + return new public override public override public override public override return + public override public override return public override public override return + + + +