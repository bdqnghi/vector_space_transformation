Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Threading using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Documents using Lucene.Net.Randomized.Generators using Lucene.Net.Support using Lucene.Net.Util using NUnit.Framework using Lucene.Net.Store.Directory Lucene.Net.Search.DocIdSetIterator Documents.Document Field FieldType Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Index.IndexWriterConfig.OpenMode_e Lucene.Net.Search.TermQuery TextField class attribute Lucene.Net.Index.TestStressIndexing2 super super LuceneTestCase int Term decl IComparer int int int decl IndexingThread bool int public public if == DocsAndWriter Directory DirectoryReader public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt DocsAndWriter = decl_stmt Lucene.Net.Index.DirectoryReader = call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call DocsAndWriter.Writer() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() Directory Directory int decl IDictionary bool public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Store.Directory = decl_stmt int = + decl_stmt bool = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() Directory Directory int int bool decl IDictionary int int int public virtual public virtual decl_stmt int = for = < ++ if + = = + = + decl_stmt int = + decl_stmt bool = ++ decl_stmt int = + decl_stmt int = + decl_stmt int = + decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Store.Directory = if + + + + + + + + + + + + + + + decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = if if call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public virtual public virtual return LogMergePolicy decl IDictionary IndexingThread IndexWriter DocsAndWriter public virtual public virtual decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < decl_stmt Lucene.Net.Index.IndexWriter = new new call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) decl_stmt Lucene.Net.Index.LogMergePolicy = = = = new for = < ++ decl_stmt IndexingThread = new = = * = = = for = < ++ for = < ++ for = < ++ decl_stmt IndexingThread = lock call decl IDictionary.PutAll() call decl IDictionary.PutAll() call decl IDictionary.PutAll() call decl IDictionary.PutAll() call decl IDictionary.PutAll() decl_stmt DocsAndWriter = new = = return LogMergePolicy decl IDictionary IndexingThread IndexWriter public virtual < public virtual < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < decl_stmt Lucene.Net.Index.IndexWriter = new new new decl_stmt Lucene.Net.Index.LogMergePolicy = = = = new for = < ++ decl_stmt IndexingThread = new = = * = = = for = < ++ for = < ++ call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) for = < ++ decl_stmt IndexingThread = lock call decl IDictionary.PutAll() call decl IDictionary.PutAll() call decl IDictionary.PutAll() call decl IDictionary.PutAll() call decl IDictionary.PutAll() return decl List Document decl IEnumerator IndexWriter Document public static public static < decl_stmt Lucene.Net.Index.IndexWriter = new new decl_stmt System.Collections.Generic.IEnumerator < = while call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt Lucene.Net.Documents.Document = decl_stmt System.Collections.Generic.List < = new < call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() decl_stmt Lucene.Net.Documents.Document = new for = < ++ call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) DirectoryReader public virtual public virtual decl_stmt Lucene.Net.Index.DirectoryReader = call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() DirectoryReader DirectoryReader public virtual public virtual decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt Lucene.Net.Index.DirectoryReader = call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() Document AtomicReader Bits private static private static foreach in decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Spatial.Util.Bits = + for = < ++ decl_stmt Lucene.Net.Documents.Document = call AtomicReader.Document() call AtomicReader.Document() call AtomicReader.Document() call AtomicReader.Document() call AtomicReader.Document() if == || call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() + + + call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) else + + + call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) Fields DocsEnum DocsEnum DocsAndPositionsEnum decl long int int decl long BytesRef bool int int decl IEnumerator int Terms TermsEnum string int decl int Terms Bits Bits Terms Fields Fields int Terms DocsEnum Fields Fields decl IEnumerator int BytesRef int Terms TermsEnum Fields Bits DocsEnum TermsEnum TermsEnum DocsEnum public virtual public virtual if if != + + + decl_stmt bool = ! == && == decl_stmt int = new decl_stmt Lucene.Net.Index.Fields = if == return decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() if == == || == return decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt Lucene.Net.Index.Fields = if == decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt Lucene.Net.Index.DocsEnum = while call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != = while call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != return decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt Lucene.Net.Index.DocsEnum = decl_stmt Lucene.Net.Index.DocsEnum = while decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() if == break = if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) = else = if call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() == == || call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() == continue decl_stmt int = call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != decl_stmt int = call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() = try catch + + + + + + + + + throw try catch + + + + + decl_stmt Lucene.Net.Index.Fields = + if != decl_stmt DocsAndPositionsEnum = decl_stmt Lucene.Net.Index.DocsEnum = foreach in + + decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt Lucene.Net.Util.BytesRef while = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != + call int.Utf8ToString() call int.Utf8ToString() call int.Utf8ToString() call int.Utf8ToString() call int.Utf8ToString() + + call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) if != call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != decl_stmt int = call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() + call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() + + for = < ++ + call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() else = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != decl_stmt int = call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() + call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() + + decl_stmt Lucene.Net.Index.Fields = + if != decl_stmt DocsAndPositionsEnum = decl_stmt Lucene.Net.Index.DocsEnum = foreach in + + decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt Lucene.Net.Util.BytesRef while = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != + call int.Utf8ToString() call int.Utf8ToString() call int.Utf8ToString() call int.Utf8ToString() call int.Utf8ToString() + + call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) if != call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != decl_stmt int = call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() + call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() + + for = < ++ + call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() else = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != decl_stmt int = call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() + call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() + + throw decl_stmt Lucene.Net.Index.Fields = decl_stmt System.Collections.Generic.IEnumerator < = call Fields.GetEnumerator() call Fields.GetEnumerator() call Fields.GetEnumerator() call Fields.GetEnumerator() call Fields.GetEnumerator() decl_stmt Lucene.Net.Index.Fields = decl_stmt System.Collections.Generic.IEnumerator < = call Fields.GetEnumerator() call Fields.GetEnumerator() call Fields.GetEnumerator() call Fields.GetEnumerator() call Fields.GetEnumerator() decl_stmt string = = decl_stmt Lucene.Net.Index.TermsEnum = = decl_stmt Lucene.Net.Index.DocsEnum = = decl_stmt long = new decl_stmt long = new for decl_stmt Lucene.Net.Util.BytesRef = = decl_stmt int for = if == if ! call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() break = decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() if == continue = call int.Iterator() call int.Iterator() call int.Iterator() call int.Iterator() call int.Iterator() = call DocsEnum.Next() call DocsEnum.Next() call DocsEnum.Next() call DocsEnum.Next() call DocsEnum.Next() if == = continue = while call decl long.NextDoc() call decl long.NextDoc() call decl long.NextDoc() call decl long.NextDoc() call decl long.NextDoc() != decl_stmt int = call decl long.DocID() call decl long.DocID() call decl long.DocID() call decl long.DocID() call decl long.DocID() decl_stmt int = call decl long.Freq() call decl long.Freq() call decl long.Freq() call decl long.Freq() call decl long.Freq() = long << | ++ if > break decl_stmt int for = if == if ! call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() break = decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() if == continue = call int.Iterator() call int.Iterator() call int.Iterator() call int.Iterator() call int.Iterator() = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() if == = continue = while call decl long.NextDoc() call decl long.NextDoc() call decl long.NextDoc() call decl long.NextDoc() call decl long.NextDoc() != decl_stmt int = call decl long.DocID() call decl long.DocID() call decl long.DocID() call decl long.DocID() call decl long.DocID() decl_stmt int = call decl long.Freq() call decl long.Freq() call decl long.Freq() call decl long.Freq() call decl long.Freq() = long << | ++ if > break if == break call Terms.BytesEquals() call Terms.BytesEquals() call Terms.BytesEquals() call Terms.BytesEquals() call Terms.BytesEquals() if ! call DocsEnum.DocFreq() call DocsEnum.DocFreq() call DocsEnum.DocFreq() call DocsEnum.DocFreq() call DocsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() + + + + + for = < ++ + + + + + ulong >> + + & + + ulong >> + + & + + + + call Terms.Utf8ToString() call Terms.Utf8ToString() call Terms.Utf8ToString() call Terms.Utf8ToString() call Terms.Utf8ToString() IndexableField IndexableField string string decl List decl List public static public static decl_stmt System.Collections.Generic.List < = decl_stmt System.Collections.Generic.List < = call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() + + for = < ++ decl_stmt Lucene.Net.Index.IndexableField = decl_stmt Lucene.Net.Index.IndexableField = if call Lucene.Net.Index.IndexableField.BinaryValue() call Lucene.Net.Index.IndexableField.BinaryValue() call Lucene.Net.Index.IndexableField.BinaryValue() call Lucene.Net.Index.IndexableField.BinaryValue() call Lucene.Net.Index.IndexableField.BinaryValue() != call Lucene.Net.Index.IndexableField.BinaryValue() call Lucene.Net.Index.IndexableField.BinaryValue() call Lucene.Net.Index.IndexableField.BinaryValue() call Lucene.Net.Index.IndexableField.BinaryValue() call Lucene.Net.Index.IndexableField.BinaryValue() != else decl_stmt string = decl_stmt string = + + int decl IEnumerator IOffsetAttribute IOffsetAttribute BytesRef BytesRef string DocsAndPositionsEnum DocsEnum DocsEnum int TermsEnum TermsEnum Terms int Terms DocsAndPositionsEnum int int public static public static if == == || == return != decl_stmt System.Collections.Generic.IEnumerator < = foreach in call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt string = decl_stmt Lucene.Net.Index.Terms = decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt Lucene.Net.Index.Terms = decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt DocsAndPositionsEnum = decl_stmt DocsAndPositionsEnum = decl_stmt Lucene.Net.Index.DocsEnum = decl_stmt Lucene.Net.Index.DocsEnum = decl_stmt Lucene.Net.Util.BytesRef while = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) if != decl_stmt int = call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != decl_stmt int = call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() decl_stmt int = call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() decl_stmt Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute = call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() < call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() < : decl_stmt Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute = call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() < call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() call DocsAndPositionsEnum.Attributes() < : if != else for = < ++ decl_stmt int = call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() decl_stmt int = call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() if != call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call IOffsetAttribute.StartOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.EndOffset() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() else = = decl_stmt int = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != decl_stmt int = call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() decl_stmt int = call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() public virtual public virtual return public virtual public virtual return + - decl char int int internal virtual internal virtual decl_stmt int = + if < + decl_stmt char = new + * = for = < ++ decl_stmt int = if == && < - ++ = char = char else if <= = char else if == = char else if == = char else if == = char = return + decl char public virtual public virtual = != : + if return decl_stmt char = new * for = < ++ * = + * + = return new int public virtual public virtual decl_stmt int = char for = < ++ = return new return + Field Document decl List FieldType string FieldType int public virtual public virtual decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.FieldType = new = = decl_stmt System.Collections.Generic.List < = new < decl_stmt string = decl_stmt Lucene.Net.Documents.Field = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() decl_stmt int = for = < ++ decl_stmt Lucene.Net.Documents.FieldType = new switch case break case = break case = = break case = = break switch case = = = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() + break case = = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() + break case = = = = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() + break case = = = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() + break if call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() else for = < ++ call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) if + + new = string public virtual public virtual decl_stmt string = if + + new string public virtual public virtual decl_stmt string = if + + new new int int public override public override try = new + + for = < ++ decl_stmt int = if < else if < else catch lock decl_stmt int =