Lucene.Net.Store Lucene.Net.Support using Lucene.Net.Util using System using System.Diagnostics using class Lucene.Net.Store.ByteBufferIndexInput super super IndexInput bool int ByteBuffer int long int decl WeakIdentityMap string long decl ByteBuffer return = public override sealed public override sealed try return call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() catch do ++ if >= throw new + = = ! return call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() catch throw new + int public override public override try call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() catch decl_stmt int = while > call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() -= += ++ if >= throw new + = = = call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() call Lucene.Net.Support.ByteBuffer.Get() catch throw new + public override sealed public override sealed try return call Lucene.Net.Support.ByteBuffer.GetShort(int) call Lucene.Net.Support.ByteBuffer.GetShort(int) call Lucene.Net.Support.ByteBuffer.GetShort(int) call Lucene.Net.Support.ByteBuffer.GetShort(int) call Lucene.Net.Support.ByteBuffer.GetShort(int) catch return catch throw new + public override sealed public override sealed try return call Lucene.Net.Support.ByteBuffer.GetInt() call Lucene.Net.Support.ByteBuffer.GetInt() call Lucene.Net.Support.ByteBuffer.GetInt() call Lucene.Net.Support.ByteBuffer.GetInt() call Lucene.Net.Support.ByteBuffer.GetInt() catch return catch throw new + public override sealed public override sealed try return call Lucene.Net.Support.ByteBuffer.GetLong(int) call Lucene.Net.Support.ByteBuffer.GetLong(int) call Lucene.Net.Support.ByteBuffer.GetLong(int) call Lucene.Net.Support.ByteBuffer.GetLong(int) call Lucene.Net.Support.ByteBuffer.GetLong(int) catch return catch throw new + try return long << + - catch throw new + ByteBuffer int public override sealed public override sealed if < throw new + += decl_stmt int = >> try decl_stmt Lucene.Net.Support.ByteBuffer = = & = = catch throw new + catch throw new + catch throw new + public override sealed public override sealed return ByteBufferIndexInput public override sealed public override sealed decl_stmt Lucene.Net.Store.ByteBufferIndexInput = try call Lucene.Net.Store.ByteBufferIndexInput.Seek(long) call Lucene.Net.Store.ByteBufferIndexInput.Seek(long) call Lucene.Net.Store.ByteBufferIndexInput.Seek(long) call Lucene.Net.Store.ByteBufferIndexInput.Seek(long) call Lucene.Net.Store.ByteBufferIndexInput.Seek(long) catch throw new + return ByteBufferIndexInput public public if throw new + + + decl_stmt Lucene.Net.Store.ByteBufferIndexInput = = try call Lucene.Net.Store.ByteBufferIndexInput.Seek(long) call Lucene.Net.Store.ByteBufferIndexInput.Seek(long) call Lucene.Net.Store.ByteBufferIndexInput.Seek(long) call Lucene.Net.Store.ByteBufferIndexInput.Seek(long) call Lucene.Net.Store.ByteBufferIndexInput.Seek(long) catch throw new + return ByteBufferIndexInput private private if == throw new + if < || < || || + || || + throw new + + + + + + + + + += decl_stmt Lucene.Net.Store.ByteBufferIndexInput = = == = = & = if != new return int int long decl ByteBuffer private private decl_stmt long = + decl_stmt int = ulong >> decl_stmt int = ulong >> decl_stmt Lucene.Net.Support.ByteBuffer = new - + for = < ++ = + - = & return private private = = = decl ByteBuffer public override public override try if == return decl_stmt Lucene.Net.Support.ByteBuffer = if != call decl WeakIdentityMap.Remove() call decl WeakIdentityMap.Remove() call decl WeakIdentityMap.Remove() call decl WeakIdentityMap.Remove() call decl WeakIdentityMap.Remove() if return if != foreach in foreach in finally public override sealed public override sealed if != return + + + else return