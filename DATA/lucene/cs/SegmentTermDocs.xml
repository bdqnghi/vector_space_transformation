Lucene.Net.Index System using Lucene.Net.Support using Lucene.Net.Store.IndexInput Lucene.Net.Util.BitVector class Lucene.Net.Index.SegmentTermDocs super super TermDocs int long long BitVector SegmentReader bool int int bool int bool int long int IndexInput bool DefaultSkipListReader TermInfo public virtual public virtual decl_stmt Lucene.Net.Codecs.Lucene3x.TermInfo = call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() var Term TermInfo public virtual public virtual decl_stmt Lucene.Net.Codecs.Lucene3x.TermInfo decl_stmt Lucene.Net.Index.Term if is && == decl_stmt var = = = call var.TermInfo() call var.TermInfo() call var.TermInfo() call var.TermInfo() call var.TermInfo() else = = call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() FieldInfo internal virtual internal virtual = decl_stmt Lucene.Net.Index.FieldInfo = call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() call SegmentReader.core() = != && = != && if == = else = = = = = + call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() = public public public public protected virtual protected virtual if return call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() if != call DefaultSkipListReader.Dispose() call DefaultSkipListReader.Dispose() call DefaultSkipListReader.Dispose() call DefaultSkipListReader.Dispose() call DefaultSkipListReader.Dispose() = return return protected internal virtual protected internal virtual int public virtual public virtual while if == return decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if += = else += if & != = else = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() ++ if == || ! call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) break return int int int public virtual public virtual decl_stmt int = if return else decl_stmt int = while < && < decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() += if & != = else = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() ++ if == || ! call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) = = ++ return int private private decl_stmt int = while < && < += call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() ++ if == || ! call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) call Lucene.Net.Codecs.Lucene40.BitVector.Get(int) = = ++ return protected internal virtual protected internal virtual int public virtual public virtual if >= if == = new call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() if ! call Lucene.Net.Index.DefaultSkipListReader.Init(long,long,long,int,bool) call Lucene.Net.Index.DefaultSkipListReader.Init(long,long,long,int,bool) call Lucene.Net.Index.DefaultSkipListReader.Init(long,long,long,int,bool) call Lucene.Net.Index.DefaultSkipListReader.Init(long,long,long,int,bool) call Lucene.Net.Index.DefaultSkipListReader.Init(long,long,long,int,bool) = decl_stmt int = call DefaultSkipListReader.SkipTo() call DefaultSkipListReader.SkipTo() call DefaultSkipListReader.SkipTo() call DefaultSkipListReader.SkipTo() call DefaultSkipListReader.SkipTo() if > call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call Lucene.Net.Index.DefaultSkipListReader.GetFreqPointer() call Lucene.Net.Index.DefaultSkipListReader.GetFreqPointer() call Lucene.Net.Index.DefaultSkipListReader.GetFreqPointer() call Lucene.Net.Index.DefaultSkipListReader.GetFreqPointer() call Lucene.Net.Index.DefaultSkipListReader.GetFreqPointer() call Lucene.Net.Index.DefaultSkipListReader.GetProxPointer() call Lucene.Net.Index.DefaultSkipListReader.GetProxPointer() call Lucene.Net.Index.DefaultSkipListReader.GetProxPointer() call Lucene.Net.Index.DefaultSkipListReader.GetProxPointer() call Lucene.Net.Index.DefaultSkipListReader.GetProxPointer() call Lucene.Net.Index.DefaultSkipListReader.GetPayloadLength() call Lucene.Net.Index.DefaultSkipListReader.GetPayloadLength() call Lucene.Net.Index.DefaultSkipListReader.GetPayloadLength() call Lucene.Net.Index.DefaultSkipListReader.GetPayloadLength() call Lucene.Net.Index.DefaultSkipListReader.GetPayloadLength() = call DefaultSkipListReader.GetDoc() call DefaultSkipListReader.GetDoc() call DefaultSkipListReader.GetDoc() call DefaultSkipListReader.GetDoc() call DefaultSkipListReader.GetDoc() = do if ! return > return