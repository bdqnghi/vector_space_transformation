Lucene.Net.Codecs.Lucene40 System using System.Collections.Generic using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Index.AtomicReader Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Lucene.Net.Index.DirectoryReader Lucene.Net.Index.DocsEnum Lucene.Net.Index.IndexWriter Lucene.Net.Util.IOUtils Lucene.Net.Util.LineFileDocs Lucene.Net.Util.LuceneTestCase Lucene.Net.Util.Bits_MatchNoBits Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Index.RandomIndexWriter Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum Lucene.Net.Util.TestUtil class attribute Lucene.Net.Codecs.Lucene40.TestReuseDocsEnum super super LuceneTestCase public static public static = decl IdentityHashMap Terms TermsEnum AtomicReader MatchNoBits RandomIndexWriter DocsEnum int Codec DirectoryReader Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Codecs.Codec = new decl_stmt Lucene.Net.Index.RandomIndexWriter = new new decl_stmt int = call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() decl_stmt Lucene.Net.Index.DirectoryReader = foreach in decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt IdentityHashMap < ? = new < ? decl_stmt MatchNoBits = new while call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != decl_stmt Lucene.Net.Index.DocsEnum = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) : new : = call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() decl IdentityHashMap Terms TermsEnum MatchNoBits RandomIndexWriter DocsEnum int Codec DirectoryReader Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Codecs.Codec = new decl_stmt Lucene.Net.Index.RandomIndexWriter = new new decl_stmt int = call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() decl_stmt Lucene.Net.Index.DirectoryReader = foreach in decl_stmt Lucene.Net.Index.Terms = decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt IdentityHashMap < ? = new < ? decl_stmt MatchNoBits = new decl_stmt Lucene.Net.Index.DocsEnum = while call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) : = call decl IdentityHashMap.Clear() call decl IdentityHashMap.Clear() call decl IdentityHashMap.Clear() call decl IdentityHashMap.Clear() call decl IdentityHashMap.Clear() = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() = while call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) new : = call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call decl IdentityHashMap.Clear() call decl IdentityHashMap.Clear() call decl IdentityHashMap.Clear() call decl IdentityHashMap.Clear() call decl IdentityHashMap.Clear() = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() = while call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) : = DirectoryReader BytesRef decl IdentityHashMap Terms TermsEnum decl IList DocsEnum decl IList RandomIndexWriter MockAnalyzer DirectoryReader int Codec MatchNoBits Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Codecs.Codec = new decl_stmt Lucene.Net.Analysis.MockAnalyzer = new = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt int = call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt System.Collections.Generic.IList < = decl_stmt System.Collections.Generic.IList < = foreach in decl_stmt Lucene.Net.Index.Terms = decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt IdentityHashMap < ? = new < ? decl_stmt MatchNoBits = new = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt Lucene.Net.Index.DocsEnum = decl_stmt Lucene.Net.Util.BytesRef = while = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) : = call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call decl IdentityHashMap.Clear() call decl IdentityHashMap.Clear() call decl IdentityHashMap.Clear() call decl IdentityHashMap.Clear() call decl IdentityHashMap.Clear() = while = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) : = call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() call Terms.Size() Terms TermsEnum AtomicReader public virtual public virtual < if == return decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) if == return decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) return call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) : return LineFileDocs public static public static decl_stmt Lucene.Net.Util.LineFileDocs = new for = < ++ call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose()