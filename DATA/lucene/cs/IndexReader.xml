Lucene.Net.Index System using System.Collections.Generic using System.IO using Lucene.Net.Documents using Lucene.Net.Support using System.Runtime.CompilerServices using Lucene.Net.Store.AlreadyClosedException Lucene.Net.Store.Directory Documents.Document DocumentStoredFieldVisitor Lucene.Net.Util.IOUtils class Lucene.Net.Index.IndexReader super super IDisposable decl ISet bool AtomicInteger decl ISet bool public public call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() public public call decl ISet.Remove() call decl ISet.Remove() call decl ISet.Remove() call decl ISet.Remove() call decl ISet.Remove() public public call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() new < private private lock foreach in try catch if == = else IndexReader private private lock foreach < in decl_stmt Lucene.Net.Index.IndexReader = if != = call IndexReader.refCount() call IndexReader.refCount() call IndexReader.refCount() call IndexReader.refCount() call IndexReader.refCount() call IndexReader.refCount() call IndexReader.refCount() call IndexReader.refCount() call IndexReader.refCount() call Lucene.Net.Index.IndexReader.ReportCloseToParentReaders() call Lucene.Net.Index.IndexReader.ReportCloseToParentReaders() call Lucene.Net.Index.IndexReader.ReportCloseToParentReaders() call Lucene.Net.Index.IndexReader.ReportCloseToParentReaders() call Lucene.Net.Index.IndexReader.ReportCloseToParentReaders() return call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() public public if ! int public public decl_stmt int while = call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() > if call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) + return return Exception int public public if call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() <= throw new decl_stmt int = call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() if == = decl_stmt System.Exception = try catch = finally try finally else if < throw new + + protected internal protected internal if call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() <= throw new if throw new public override sealed public override sealed return == public override sealed public override sealed return public static public static return public static public static return public static public static return public static public static return public static public static return Fields public public decl_stmt Lucene.Net.Index.Fields = if == return return call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() return - var public public decl_stmt var = new return var public public < decl_stmt var = new return return > public public protected virtual protected virtual if lock if ! = return return return