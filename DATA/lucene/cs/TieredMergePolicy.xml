Lucene.Net.Index Lucene.Net.Support using System using System.Collections.Generic using System.Globalization using System.Text using class Lucene.Net.Index.TieredMergePolicy super super MergePolicy double double long int long double double int public virtual public virtual if < throw new + + = return return public virtual public virtual if < throw new + + = return return public virtual public virtual if < throw new + + *= * = > : long return return / / public virtual public virtual if < throw new + + = return return public virtual public virtual if <= throw new + + *= * = > : long return return / * public virtual public virtual if < || || throw new + + = return return public virtual public virtual if < throw new + + = return return long long public virtual public virtual try decl_stmt long = decl_stmt long = if > return - else if > return else return catch throw new string decl ICollection bool decl IList long long decl IList decl IList decl List MergeScore decl ICollection double MergeScore MergeSpecification long bool long long int double SegmentCommitInfo long long long OneMerge int bool public override public override ? if + + if == return decl_stmt System.Collections.Generic.ICollection < = decl_stmt System.Collections.Generic.ICollection < = new < decl_stmt System.Collections.Generic.List < = new < call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() new decl_stmt long = decl_stmt long = foreach in decl_stmt long = if decl_stmt string = call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() : if >= / += else if < += + + + / / + + = += decl_stmt int = while < && >= / -= ++ = decl_stmt long = decl_stmt long = decl_stmt double = while decl_stmt double = / double if < += break += -= * *= decl_stmt int = int decl_stmt MergeSpecification = while decl_stmt long = decl_stmt System.Collections.Generic.IList < = new < for = < ++ decl_stmt Lucene.Net.Index.SegmentCommitInfo = if call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() += call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() else if ! call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt bool = >= if + + + + + + + if == return if >= decl_stmt MergeScore = decl_stmt System.Collections.Generic.IList < = decl_stmt bool = decl_stmt long = for = <= - ++ decl_stmt long = decl_stmt System.Collections.Generic.IList < = new < decl_stmt bool = for = < && < ++ decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt long = if + > = continue call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() += decl_stmt MergeScore = if + + + + + + + + + / / if == || < && ! || ! = = = = if != if == = new decl_stmt OneMerge = new call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() foreach in call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() if + + + / / + + + + + : else return else return double long long double long double double long protected internal virtual protected internal virtual < decl_stmt long = decl_stmt long = decl_stmt long = foreach in decl_stmt long = += += += decl_stmt double if = / else = double / decl_stmt double = *= decl_stmt double = double / *= decl_stmt double = return new return return + + + int bool bool OneMerge decl ICollection bool int MergeSpecification decl List public override public override < ? if + + + + + decl_stmt System.Collections.Generic.List < = new < decl_stmt bool = decl_stmt System.Collections.Generic.ICollection < = decl_stmt bool ? = foreach in decl_stmt bool ? if out = if ! call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() else = if == return if > && <= || == && == && == || if return call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() new if + + decl_stmt int = decl_stmt MergeSpecification = while >= + - if == = new decl_stmt OneMerge = new call decl List.SubList() call decl List.SubList() call decl List.SubList() call decl List.SubList() call decl List.SubList() - if + call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() -= if == && ! decl_stmt int = - + decl_stmt OneMerge = new call decl List.SubList() call decl List.SubList() call decl List.SubList() call decl List.SubList() call decl List.SubList() - if + call OneMerge.SegString() call OneMerge.SegString() call OneMerge.SegString() call OneMerge.SegString() call OneMerge.SegString() = new call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() return int decl List MergeSpecification int decl ICollection OneMerge double public override public override if + + + decl_stmt System.Collections.Generic.List < = new < decl_stmt System.Collections.Generic.ICollection < = foreach in decl_stmt double = * double / if > && ! call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if == return call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() new if + decl_stmt int = decl_stmt MergeSpecification = while < decl_stmt int = + if == = new decl_stmt OneMerge = new call decl List.SubList() call decl List.SubList() call decl List.SubList() call decl List.SubList() call decl List.SubList() if + call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() = return public override public override private private return IndexWriter private private decl_stmt Lucene.Net.Index.IndexWriter = return != && call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() private private StringBuilder public override public override decl_stmt System.Text.StringBuilder = new + + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) / / call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) / / call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int)