Lucene.Net.Codecs.Lucene3x System.Diagnostics using System using System.IO using Lucene.Net.Util.BytesRef Lucene.Net.Util.CharsRef Lucene.Net.Store.Directory Lucene.Net.Index.FieldInfos Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexOutput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Util.UnicodeUtil class Lucene.Net.Codecs.Lucene3x.TermInfosWriter super super IDisposable int int bool int FieldInfos BytesRef long int int int TermInfo int CharsRef IndexOutput CharsRef BytesRef TermInfosWriter long bool private private = = = = : decl_stmt bool = try call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() = finally if ! try : catch private private = new = new return internal static internal static if == - return else return char char int int private private if != decl_stmt int = if != || != - return call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) == == decl_stmt int if < = else = for = < ++ decl_stmt char = decl_stmt char = if != return - if == && == - return - return - public public < || && == && == + + + + + + + + + + + + + call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() >= + + + + >= + + + + if ! && == call Lucene.Net.Codecs.Lucene3x.TermInfosWriter.Add(int,BytesRef,TermInfo) call Lucene.Net.Codecs.Lucene3x.TermInfosWriter.Add(int,BytesRef,TermInfo) call Lucene.Net.Codecs.Lucene3x.TermInfosWriter.Add(int,BytesRef,TermInfo) call Lucene.Net.Codecs.Lucene3x.TermInfosWriter.Add(int,BytesRef,TermInfo) call Lucene.Net.Codecs.Lucene3x.TermInfosWriter.Add(int,BytesRef,TermInfo) call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() - call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() - if >= call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() if call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() - = = call Lucene.Net.Codecs.Lucene3x.TermInfo.Set(TermInfo) call Lucene.Net.Codecs.Lucene3x.TermInfo.Set(TermInfo) call Lucene.Net.Codecs.Lucene3x.TermInfo.Set(TermInfo) call Lucene.Net.Codecs.Lucene3x.TermInfo.Set(TermInfo) call Lucene.Net.Codecs.Lucene3x.TermInfo.Set(TermInfo) ++ int int int private private decl_stmt int = decl_stmt int = < : while < if + != + break ++ decl_stmt int = - call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() + call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) public public try call IndexOutput.Seek() call IndexOutput.Seek() call IndexOutput.Seek() call IndexOutput.Seek() call IndexOutput.Seek() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() finally try call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() finally if ! call Lucene.Net.Codecs.Lucene3x.TermInfosWriter.Dispose() call Lucene.Net.Codecs.Lucene3x.TermInfosWriter.Dispose() call Lucene.Net.Codecs.Lucene3x.TermInfosWriter.Dispose() call Lucene.Net.Codecs.Lucene3x.TermInfosWriter.Dispose() call Lucene.Net.Codecs.Lucene3x.TermInfosWriter.Dispose()