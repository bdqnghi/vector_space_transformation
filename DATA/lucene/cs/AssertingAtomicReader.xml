Lucene.Net.Index System.Collections.Generic using System.Diagnostics using Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Util.Automaton.CompiledAutomaton Lucene.Net.Search.DocIdSetIterator class Lucene.Net.Index.AssertingAtomicReader super super FilterAtomicReader Fields decl_stmt Lucene.Net.Index.Fields = return == : new Fields public override public override decl_stmt Lucene.Net.Index.Fields = return == : new decl IEnumerator public override < public override < decl_stmt System.Collections.Generic.IEnumerator < = != return Terms public override public override decl_stmt Lucene.Net.Index.Terms = return == : new TermsEnum public override public override decl_stmt Lucene.Net.Index.TermsEnum = != == || return new TermsEnum public override public override if is = decl_stmt Lucene.Net.Index.TermsEnum = != return new DocsEnum public override public override == if is = decl_stmt Lucene.Net.Index.DocsEnum = return == : new DocsAndPositionsEnum public override public override == if is = decl_stmt DocsAndPositionsEnum = return == : new BytesRef public override public override == || == decl_stmt Lucene.Net.Util.BytesRef = if == = else = return public override public override == return public override public override == return public override public override == return BytesRef public override public override == decl_stmt Lucene.Net.Util.BytesRef = == || return public override public override = SeekStatus public override public override decl_stmt SeekStatus = if == = else = return public override public override if = return else = return public override public override == return public override public override = int public override public override != decl_stmt int = > + + + + + if == = else = == return = int public override public override != > + + + decl_stmt int = >= + + + if == = else = == return = public override public override == + + + + + return int public override public override != != decl_stmt int = > return int public override public override != decl_stmt int = > + + + = if == = = else = = == return = int public override public override != > + + + decl_stmt int = >= + + + = if == = = else = = == return = public override public override == + + + + + return int public override public override != != decl_stmt int = > return int public override public override != != < decl_stmt int = >= || == - + ++ return public override public override != != > return public override public override != != > return BytesRef != != > decl_stmt Lucene.Net.Util.BytesRef = == || && > return public override public override >= && < return public override public override >= && < int public override public override >= && < decl_stmt int = >= - && < return public override public override >= && < int decl_stmt int = == return public override public override >= && < int public override public override decl_stmt int = < return long public override public override != decl_stmt long = < == || > = return >= && < + + + = = - public override public override >= && < long decl_stmt long = == return long public override public override decl_stmt long = < return public public >= && < return public public return Bits decl_stmt Lucene.Net.Spatial.Util.Bits = if != == call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() = new else == ! return return return