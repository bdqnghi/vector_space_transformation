Lucene.Net.Util Lucene.Net.Support using System using System.Collections.Generic using System.Diagnostics using System.Globalization using System.Reflection using class Lucene.Net.Util.RamUsageEstimator int int int int long int long int decl IDictionary int long int string int int int int object public static public static += long - return - public static public static return long + public static public static return long + public static public static return long + long * public static public static return long + long * public static public static return long + long * public static public static return long + long * public static public static return long + long * public static public static return long + long * public static public static return Type public static public static if == return decl_stmt System.Type = if return else return decl FieldInfo long public static public static if throw new if return decl_stmt long = for != = decl_stmt Lucene.Net.Index.FieldInfo = foreach in if ! = return Type int long private static private static decl_stmt long = decl_stmt int = if > decl_stmt System.Type = if += long * else += long * return Type long decl HashMap object int Type object decl IdentityHashSet Array ClassCache decl Stack long private static private static decl_stmt IdentityHashSet < = new < decl_stmt Lucene.Net.Support.HashMap < = new < decl_stmt System.Collections.Generic.Stack < = new < call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() decl_stmt long = while > decl_stmt object = call decl Stack.Pop() call decl Stack.Pop() call decl Stack.Pop() call decl Stack.Pop() call decl Stack.Pop() if == || call decl IdentityHashSet.Contains() call decl IdentityHashSet.Contains() call decl IdentityHashSet.Contains() call decl IdentityHashSet.Contains() call decl IdentityHashSet.Contains() continue call decl IdentityHashSet.Add() call decl IdentityHashSet.Add() call decl IdentityHashSet.Add() call decl IdentityHashSet.Add() call decl IdentityHashSet.Add() decl_stmt System.Type = call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() if decl_stmt long = decl_stmt System.Array = decl_stmt int = if > decl_stmt System.Type = call Type.GetElementType() call Type.GetElementType() call Type.GetElementType() call Type.GetElementType() call Type.GetElementType() if += long * else += long * for = -- >= decl_stmt object = call System.Array.GetValue(int,int) call System.Array.GetValue(int,int) call System.Array.GetValue(int,int) call System.Array.GetValue(int,int) call System.Array.GetValue(int,int) if != && ! call decl IdentityHashSet.Contains() call decl IdentityHashSet.Contains() call decl IdentityHashSet.Contains() call decl IdentityHashSet.Contains() call decl IdentityHashSet.Contains() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() += else try decl_stmt ClassCache = if == = = foreach in decl_stmt object = if != && ! call decl IdentityHashSet.Contains() call decl IdentityHashSet.Contains() call decl IdentityHashSet.Contains() call decl IdentityHashSet.Contains() call decl IdentityHashSet.Contains() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() += catch throw new call decl IdentityHashSet.Clear() call decl IdentityHashSet.Clear() call decl IdentityHashSet.Clear() call decl IdentityHashSet.Clear() call decl IdentityHashSet.Clear() call decl Stack.Clear() call decl Stack.Clear() call decl Stack.Clear() call decl Stack.Clear() call decl Stack.Clear() call decl HashMap.Clear() call decl HashMap.Clear() call decl HashMap.Clear() call decl HashMap.Clear() call decl HashMap.Clear() return long decl List ClassCache decl FieldInfo private static private static decl_stmt ClassCache decl_stmt long = decl_stmt System.Collections.Generic.List < = new < for = != = decl_stmt Lucene.Net.Index.FieldInfo = | foreach in if ! = if ! call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() = new call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() return int Type private static private static decl_stmt System.Type = decl_stmt int = : return + public static public static return new = public static public static if / > return float / + else if / > return float / + else if / > return float / + else return + public static public static return int int object public public != if >= decl_stmt int = - decl_stmt int = & decl_stmt object while = != if return = + & ++ = return int int object public public decl_stmt int = - decl_stmt int = & decl_stmt object while = != if return = + & return int internal static internal static decl_stmt int = ^= uint >> *= unchecked int ^= uint >> *= unchecked int ^= uint >> return decl object int int object internal internal decl_stmt object = >= decl_stmt int = - for = < ++ decl_stmt object = if != decl_stmt int = & while != = + & = internal internal = new = * protected internal protected internal > && & - == << > + uint >> + if < / = / return << int private private if > uint >> return uint >> decl_stmt int = while < <<= return public public = public public return return == public < public < return new return object public public decl_stmt object = if == return = = return return return private private ++ while < && == ++ return >= : public public throw new public public