Lucene.Net.Search System using System.Collections using System.Collections.Generic using System.Linq using System.Text using Lucene.Net.Search using Lucene.Net.Index using Lucene.Net.Analysis using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Support using Lucene.Net.Util using class Lucene.Net.Search.FuzzyLikeThisQuery super super Query decl EquatableList bool Analyzer ScoreTermQueue Similarity int int Query int int public override public override decl_stmt int = decl_stmt int = = * + == : call Analyzer.GetHashCode() call Analyzer.GetHashCode() call Analyzer.GetHashCode() call Analyzer.GetHashCode() call Analyzer.GetHashCode() = * + == : call decl EquatableList.GetHashCode() call decl EquatableList.GetHashCode() call decl EquatableList.GetHashCode() call decl EquatableList.GetHashCode() call decl EquatableList.GetHashCode() = * + : = * + return FuzzyLikeThisQuery public override public override if == return if == return if != return decl_stmt Lucene.Net.Search.FuzzyLikeThisQuery = if == if != return else if ! call Analyzer.Equals() call Analyzer.Equals() call Analyzer.Equals() call Analyzer.Equals() call Analyzer.Equals() return if == if != return else if ! call decl EquatableList.Equals() call decl EquatableList.Equals() call decl EquatableList.Equals() call decl EquatableList.Equals() call decl EquatableList.Equals() return if != return if != return return int int public override public override decl_stmt int = decl_stmt int = = * + == : = * + = * + = * + == : return FieldVals public override public override if == return if == return if != return decl_stmt FieldVals = if == if != return else if ! return if != return if != return if == if != return else if ! return return public public call decl EquatableList.Add() call decl EquatableList.Add() call decl EquatableList.Add() call decl EquatableList.Add() call decl EquatableList.Add() new String int Term int int int Term Term TermEnum TokenStream ScoreTermQueue ScoreTerm decl HashSet ITermAttribute FuzzyTermEnum int float float int private private if == return decl_stmt Lucene.Net.Analysis.TokenStream = call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) new decl_stmt Lucene.Net.Analysis.Tokenattributes.ITermAttribute = < decl_stmt int = decl_stmt Lucene.Net.Index.Term = new decl_stmt System.Collections.Generic.HashSet < = new < while call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() decl_stmt System.String = if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() decl_stmt ScoreTermQueue = new decl_stmt float = decl_stmt Lucene.Net.Index.Term = call Term.CreateTerm() call Term.CreateTerm() call Term.CreateTerm() call Term.CreateTerm() call Term.CreateTerm() decl_stmt Lucene.Net.Search.FuzzyTermEnum = new decl_stmt Lucene.Net.Index.TermEnum = decl_stmt int = if call Lucene.Net.Index.Term.Equals(Term) call Lucene.Net.Index.Term.Equals(Term) call Lucene.Net.Index.Term.Equals(Term) call Lucene.Net.Index.Term.Equals(Term) call Lucene.Net.Index.Term.Equals(Term) = call TermEnum.DocFreq() call TermEnum.DocFreq() call TermEnum.DocFreq() call TermEnum.DocFreq() call TermEnum.DocFreq() decl_stmt int = decl_stmt int = do decl_stmt Lucene.Net.Index.Term = if != ++ += call FuzzyTermEnum.DocFreq() call FuzzyTermEnum.DocFreq() call FuzzyTermEnum.DocFreq() call FuzzyTermEnum.DocFreq() call FuzzyTermEnum.DocFreq() decl_stmt float = call FuzzyTermEnum.Difference() call FuzzyTermEnum.Difference() call FuzzyTermEnum.Difference() call FuzzyTermEnum.Difference() call FuzzyTermEnum.Difference() if call ScoreTermQueue.Size() call ScoreTermQueue.Size() call ScoreTermQueue.Size() call ScoreTermQueue.Size() call ScoreTermQueue.Size() < || > decl_stmt ScoreTerm = new call ScoreTermQueue.InsertWithOverflow() call ScoreTermQueue.InsertWithOverflow() call ScoreTermQueue.InsertWithOverflow() call ScoreTermQueue.InsertWithOverflow() call ScoreTermQueue.InsertWithOverflow() = call ScoreTermQueue.Top() call ScoreTermQueue.Top() call ScoreTermQueue.Top() call ScoreTermQueue.Top() call ScoreTermQueue.Top() call FuzzyTermEnum.Next() call FuzzyTermEnum.Next() call FuzzyTermEnum.Next() call FuzzyTermEnum.Next() call FuzzyTermEnum.Next() if > decl_stmt int = / if == = decl_stmt int = call ScoreTermQueue.Size() call ScoreTermQueue.Size() call ScoreTermQueue.Size() call ScoreTermQueue.Size() call ScoreTermQueue.Size() for = < ++ decl_stmt ScoreTerm = call ScoreTermQueue.Pop() call ScoreTermQueue.Pop() call ScoreTermQueue.Pop() call ScoreTermQueue.Pop() call ScoreTermQueue.Pop() = * * call Similarity.Idf() call Similarity.Idf() call Similarity.Idf() call Similarity.Idf() call Similarity.Idf() call ScoreTermQueue.InsertWithOverflow() call ScoreTermQueue.InsertWithOverflow() call ScoreTermQueue.InsertWithOverflow() call ScoreTermQueue.InsertWithOverflow() call ScoreTermQueue.InsertWithOverflow() var TermQuery BooleanQuery ScoreTerm decl HashMap BooleanQuery int public override public override if != return foreach in call decl EquatableList.Clear() call decl EquatableList.Clear() call decl EquatableList.Clear() call decl EquatableList.Clear() call decl EquatableList.Clear() decl_stmt Lucene.Net.Search.BooleanQuery = new decl_stmt Lucene.Net.Support.HashMap < < = new < < decl_stmt int = call ScoreTermQueue.Size() call ScoreTermQueue.Size() call ScoreTermQueue.Size() call ScoreTermQueue.Size() call ScoreTermQueue.Size() for = < ++ decl_stmt ScoreTerm = call ScoreTermQueue.Pop() call ScoreTermQueue.Pop() call ScoreTermQueue.Pop() call ScoreTermQueue.Pop() call ScoreTermQueue.Pop() decl_stmt var = if == = new < call decl HashMap.Add() call decl HashMap.Add() call decl HashMap.Add() call decl HashMap.Add() call decl HashMap.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() foreach in if == decl_stmt ScoreTerm = decl_stmt Lucene.Net.Search.TermQuery = new = call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) else decl_stmt Lucene.Net.Search.BooleanQuery = new foreach in decl_stmt Lucene.Net.Search.TermQuery = new = call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) = = return public override public override if == return > else return < Similarity public override public override decl_stmt Lucene.Net.Search.Similarity = = new return public override public override if return return public override public override return public override public override return public public return public public =