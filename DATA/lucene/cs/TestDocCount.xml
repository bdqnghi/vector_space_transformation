Lucene.Net.Index System.Collections.Generic using Lucene.Net.Documents using NUnit.Framework using Lucene.Net.Store.Directory Lucene.Net.Search.DocIdSetIterator Documents.Document Field Lucene.Net.Util.FixedBitSet Lucene.Net.Util.LuceneTestCase Lucene.Net.Util.TestUtil class attribute Lucene.Net.Index.TestDocCount super super LuceneTestCase int IndexReader RandomIndexWriter Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt int = for = < ++ call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.IndexReader = call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) = call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() Document int private < private < decl_stmt Lucene.Net.Documents.Document = new decl_stmt int = for = < ++ call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) + + return Terms Fields DocsEnum int FixedBitSet TermsEnum private private decl_stmt Lucene.Net.Index.Fields = if == return foreach in decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() if == continue decl_stmt int = decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() while call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != decl_stmt Lucene.Net.Index.DocsEnum = while call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality()