Lucene.Net.Search Lucene.Net.Documents using Lucene.Net.Support using System using System.Diagnostics using System.Text using System.Threading using NUnit.Framework using System.IO using Lucene.Net.Store.Directory Lucene.Net.Index.DirectoryReader Lucene.Net.Util.English Lucene.Net.Index.Fields Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexWriter Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum class attribute Lucene.Net.Search.TestMultiThreadTermVectors super super LuceneTestCase Directory int int decl Documents IndexWriter FieldType decl Document public override public override = decl_stmt Lucene.Net.Index.IndexWriter = new new decl_stmt Lucene.Net.Documents.FieldType = new = = for = < ++ decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.Field = call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) public override public override call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() IndexReader public virtual public virtual decl_stmt Lucene.Net.Index.IndexReader = try = for = <= ++ catch finally if != try call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() catch decl MultiThreadTermVectorsReader long int public virtual public virtual decl_stmt MultiThreadTermVectorsReader = new for = < ++ = new decl_stmt int = while > = for = < ++ if == break -- decl_stmt long = for = < ++ += =