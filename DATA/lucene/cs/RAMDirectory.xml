Lucene.Net.Store System.Linq using Lucene.Net.Support using Lucene.Net.Support.Compatibility using System.Collections.Concurrent using System.Collections.Generic using System.IO using class Lucene.Net.Store.RAMDirectory super super BaseDirectory AtomicLong decl IDictionary RAMFile public public decl_stmt Lucene.Net.Store.RAMFile call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out return public public = public < public < return public public call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return + decl IList decl ISet public override sealed public override sealed decl_stmt System.Collections.Generic.ISet < = decl_stmt System.Collections.Generic.IList < = new < foreach in call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() public override sealed public override sealed return call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() RAMFile public override sealed public override sealed decl_stmt Lucene.Net.Store.RAMFile = if == throw new return public public return call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() RAMFile public override public override decl_stmt Lucene.Net.Store.RAMFile call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() if != = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() - else throw new RAMFile RAMFile public override public override decl_stmt Lucene.Net.Store.RAMFile = decl_stmt Lucene.Net.Store.RAMFile call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if != call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() - = = return new protected internal virtual protected internal virtual return new public override public override < RAMFile public override public override decl_stmt Lucene.Net.Store.RAMFile if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out throw new return new public override public override = call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear()