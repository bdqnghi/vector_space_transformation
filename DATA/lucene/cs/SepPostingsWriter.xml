Lucene.Net.Codecs.Sep System.Diagnostics using Index using Store using Util using class Lucene.Net.Codecs.Sep.SepPostingsWriter super super PostingsWriterBase IntIndexOutput int string int int string long IntIndexOutput IntIndexOutputIndex int IntIndexOutput decl FieldInfo int FieldInfo bool string string int string int string IntIndexOutputIndex int SepSkipListWriter IntIndexOutputIndex IndexOutput int decl IndexOptions SepTermState int long int IndexOutput public override public override public override public override return new public override public override call IntIndexOutputIndex.Mark() call IntIndexOutputIndex.Mark() call IntIndexOutputIndex.Mark() call IntIndexOutputIndex.Mark() call IntIndexOutputIndex.Mark() if != call IntIndexOutputIndex.Mark() call IntIndexOutputIndex.Mark() call IntIndexOutputIndex.Mark() call IntIndexOutputIndex.Mark() call IntIndexOutputIndex.Mark() if == call IntIndexOutputIndex.Mark() call IntIndexOutputIndex.Mark() call IntIndexOutputIndex.Mark() call IntIndexOutputIndex.Mark() call IntIndexOutputIndex.Mark() = = - call Lucene.Net.Codecs.Sep.SepSkipListWriter.ResetSkip(IntIndexOutputIndex,IntIndexOutputIndex,IntIndexOutputIndex) call Lucene.Net.Codecs.Sep.SepSkipListWriter.ResetSkip(IntIndexOutputIndex,IntIndexOutputIndex,IntIndexOutputIndex) call Lucene.Net.Codecs.Sep.SepSkipListWriter.ResetSkip(IntIndexOutputIndex,IntIndexOutputIndex,IntIndexOutputIndex) call Lucene.Net.Codecs.Sep.SepSkipListWriter.ResetSkip(IntIndexOutputIndex,IntIndexOutputIndex,IntIndexOutputIndex) call Lucene.Net.Codecs.Sep.SepSkipListWriter.ResetSkip(IntIndexOutputIndex,IntIndexOutputIndex,IntIndexOutputIndex) public override public override = if = if >= throw new = = == && call decl IndexOptions.HasPayloads() call decl IndexOptions.HasPayloads() call decl IndexOptions.HasPayloads() call decl IndexOptions.HasPayloads() call decl IndexOptions.HasPayloads() = = = return var private private decl_stmt var = new = call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() if != = call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() if == = call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() = = return var public override public override decl_stmt var = - if < || > && <= throw new + + + + + + if ++ == call SepSkipListWriter.SetSkipData() call SepSkipListWriter.SetSkipData() call SepSkipListWriter.SetSkipData() call SepSkipListWriter.SetSkipData() call SepSkipListWriter.SetSkipData() call SepSkipListWriter.BufferSkip() call SepSkipListWriter.BufferSkip() call SepSkipListWriter.BufferSkip() call SepSkipListWriter.BufferSkip() call SepSkipListWriter.BufferSkip() = call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() if != call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() int int public override public override == decl_stmt int = - >= + + + = if decl_stmt int = == : if != = call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() << | call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() else call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() << if > && != call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() else call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() call IntIndexOutput.Write() = public override public override = var public override public override decl_stmt var = > == = call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call var.DocIndex() call var.DocIndex() call var.DocIndex() call var.DocIndex() call var.DocIndex() call var.DocIndex() call var.DocIndex() call var.DocIndex() call var.DocIndex() if != = call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call var.FreqIndex() call var.FreqIndex() call var.FreqIndex() call var.FreqIndex() call var.FreqIndex() call var.FreqIndex() call var.FreqIndex() call var.FreqIndex() call var.FreqIndex() if == = call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call IntIndexOutput.Index() call var.PosIndex() call var.PosIndex() call var.PosIndex() call var.PosIndex() call var.PosIndex() call var.PosIndex() call var.PosIndex() call var.PosIndex() call var.PosIndex() else = else = = if >= = call SepSkipListWriter.WriteSkip() call SepSkipListWriter.WriteSkip() call SepSkipListWriter.WriteSkip() call SepSkipListWriter.WriteSkip() call SepSkipListWriter.WriteSkip() else = - = = = var public override public override decl_stmt var = if = = = call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() call int.DocIndex() if != call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() call int.FreqIndex() if == call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() call int.PosIndex() if if else - = if == - return if else - = protected override protected override if return