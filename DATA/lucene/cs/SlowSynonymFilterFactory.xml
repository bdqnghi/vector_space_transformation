Lucene.Net.Analysis.Synonym System using System.Collections using System.Collections.Generic using System.Text using Lucene.Net.Analysis.Util using class attribute Lucene.Net.Analysis.Synonym.SlowSynonymFilterFactory super super TokenFilterFactory super ResourceLoaderAware SlowSynonymMap decl IDictionary bool string string bool TokenizerFactory decl IEnumerable public public decl_stmt Lucene.Net.Analysis.Util.TokenizerFactory = if != = decl_stmt System.Collections.Generic.IEnumerable < = = new decl IList decl IList File decl IList protected internal < protected internal < decl_stmt System.Collections.Generic.IList < = decl_stmt System.IO.File = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() = else decl_stmt System.Collections.Generic.IList < = = new <> foreach in decl_stmt System.Collections.Generic.IList < = call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() return int decl IList bool decl IList decl IList internal static internal static < decl_stmt int = foreach in decl_stmt System.Collections.Generic.IList < = decl_stmt System.Collections.Generic.IList < < decl_stmt System.Collections.Generic.IList < < if > throw new + else if == = = else = if = else = new <> call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt bool = foreach < in ++ foreach < in decl IList decl IList decl IList private static < < private static < < decl_stmt System.Collections.Generic.IList < = decl_stmt System.Collections.Generic.IList < < = new < < foreach in decl_stmt System.Collections.Generic.IList < = == : call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return decl IList CharTermAttribute TokenStream StringReader private static < private static < decl_stmt System.IO.StringReader = new decl_stmt Lucene.Net.Analysis.TokenStream = decl_stmt System.Collections.Generic.IList < = new < try decl_stmt Lucene.Net.Analysis.Tokenattributes.CharTermAttribute = call TokenStream.addAttribute() call TokenStream.addAttribute() call TokenStream.addAttribute() call TokenStream.addAttribute() call TokenStream.addAttribute() typeof call TokenStream.reset() call TokenStream.reset() call TokenStream.reset() call TokenStream.reset() call TokenStream.reset() while call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() call TokenStream.incrementToken() if call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() call CharTermAttribute.length() > call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call Lucene.Net.Analysis.Tokenattributes.CharTermAttribute.ToString() call Lucene.Net.Analysis.Tokenattributes.CharTermAttribute.ToString() call Lucene.Net.Analysis.Tokenattributes.CharTermAttribute.ToString() call Lucene.Net.Analysis.Tokenattributes.CharTermAttribute.ToString() call Lucene.Net.Analysis.Tokenattributes.CharTermAttribute.ToString() finally call StringReader.close() call StringReader.close() call StringReader.close() call StringReader.close() call StringReader.close() return TokenizerFactory Type private private decl_stmt System.Type = typeof try decl_stmt Lucene.Net.Analysis.Util.TokenizerFactory = call Type.getConstructor() call Type.getConstructor() call Type.getConstructor() call Type.getConstructor() call Type.getConstructor() typeof if is return catch throw new private static private static return return public override public override return new StringBuilder decl List char int public static < public static < decl_stmt System.Collections.Generic.List < = new < decl_stmt System.Text.StringBuilder = new decl_stmt int = = while < decl_stmt char = ++ if if > call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) = new continue if == if ! call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if >= break = ++ if switch case = break case = break case = break case = break case = break call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if > call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) return StringBuilder decl List char int public static < public static < decl_stmt System.Collections.Generic.List < = new < decl_stmt System.Text.StringBuilder = new decl_stmt int = = while < if if > call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) = new += continue decl_stmt char = ++ if == if ! call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if >= break = ++ if switch case = break case = break case = break case = break case = break call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if > call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) return