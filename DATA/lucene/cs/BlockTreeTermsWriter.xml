Lucene.Net.Codecs System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Util.Fst using Lucene.Net.Util.ArrayUtil Lucene.Net.Util.Fst.ByteSequenceOutputs Lucene.Net.Util.BytesRef Lucene.Net.Index.FieldInfo Lucene.Net.Index.FieldInfos Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexOutput Lucene.Net.Util.IntsRef Lucene.Net.Util.IOUtils Lucene.Net.Util.Fst.NoOutputs Lucene.Net.Util.Packed.PackedInts Lucene.Net.Store.RAMOutputStream Lucene.Net.Index.SegmentWriteState Lucene.Net.Util.Fst.Util class Lucene.Net.Codecs.BlockTreeTermsWriter super super FieldsConsumer FieldInfo int IndexOutput int int int int int int FieldInfos decl IList int int string string int IndexOutput int string int RAMOutputStream string int PostingsWriterBase protected internal virtual protected internal virtual protected internal virtual protected internal virtual protected internal virtual protected internal virtual call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() protected internal virtual protected internal virtual public override public override == || call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() call FieldInfo.Name() < = return new internal static internal static < << return << | : | : public override public override return public override public override return + ByteSequenceOutputs var decl Builder public public < && != && != || ! && == + + + == if foreach in != - byte sbyte > - << | : decl_stmt Lucene.Net.Util.Fst.ByteSequenceOutputs = decl_stmt Lucene.Net.Util.Fst.Builder < = new < < < < < decl_stmt var = new int > call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() new if != foreach < in if != foreach in if != foreach < in = = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() = decl BytesRefFSTEnum internal internal < < decl_stmt Lucene.Net.Util.Fst.BytesRefFSTEnum < = new < decl_stmt Lucene.Net.Util.Fst.BytesRefFSTEnum < = new < while = call decl BytesRefFSTEnum.Next() call decl BytesRefFSTEnum.Next() call decl BytesRefFSTEnum.Next() call decl BytesRefFSTEnum.Next() call decl BytesRefFSTEnum.Next() != long public override public override < < < < for = >= -- decl_stmt long = if ++ for = < ++ += = = if >= || == int = else = = new < < < < int int decl IList int PendingBlock int int int decl IList PendingTerm PendingBlock PendingBlock int int int int PendingBlock int internal virtual internal virtual if == || <= decl_stmt PendingBlock = - call PendingBlock.CompileIndex() call PendingBlock.CompileIndex() call PendingBlock.CompileIndex() call PendingBlock.CompileIndex() call PendingBlock.CompileIndex() else decl_stmt int = + decl_stmt System.Collections.Generic.IList < = < - decl_stmt int = - decl_stmt int = decl_stmt int = decl_stmt int = foreach in decl_stmt int if decl_stmt PendingTerm = if == == - == = - else = + & else decl_stmt PendingBlock = > = + & if != && + != if == = = = = = = = = = ++ if ++ else ++ if == = = = = = = ++ if < = decl_stmt int = for = - >= -- += = decl_stmt int = decl_stmt int = decl_stmt int = = decl_stmt System.Collections.Generic.IList < = new < decl_stmt PendingBlock = for = < ++ += + ++ if >= decl_stmt int if == - = else = + + = decl_stmt PendingBlock = + == if == = else call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() -= = == || > + + + + + + + + + + + + + = = + if == break if <= != - != + = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() + break + = != call PendingBlock.CompileIndex() call PendingBlock.CompileIndex() call PendingBlock.CompileIndex() call PendingBlock.CompileIndex() call PendingBlock.CompileIndex() = - internal virtual internal virtual try return + + catch return PendingTerm decl IList int decl IList decl long BlockTermState int BytesRef bool bool long int PendingBlock bool private private > decl_stmt int = - >= + + + + + decl_stmt System.Collections.Generic.IList < = + decl_stmt long = decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ = byte = << | : decl_stmt bool if < = else if ! = else decl_stmt bool = foreach in if ! = break = decl_stmt System.Collections.Generic.IList < < decl_stmt int decl_stmt long = new decl_stmt bool = if = foreach in decl_stmt PendingTerm = decl_stmt Lucene.Net.Codecs.BlockTermState = decl_stmt int = - if != >= + + - for = < ++ >= = = else = new < < = foreach in if decl_stmt PendingTerm = decl_stmt Lucene.Net.Codecs.BlockTermState = decl_stmt int = - << if != >= - for = < ++ >= = ++ else decl_stmt PendingBlock = decl_stmt int = - > << | < - call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() != << | : int int call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() if >= if < + = else -= return new != return public override public override return BlockTermState PendingTerm public override public override > decl_stmt Lucene.Net.Codecs.BlockTermState = = = decl_stmt PendingTerm = new ++ PendingBlock public override public override if > == && ! + + + decl_stmt PendingBlock = == != = = = = call PendingBlock.Index() call PendingBlock.Index() call PendingBlock.Index() call PendingBlock.Index() call PendingBlock.Index() call PendingBlock.Index() call PendingBlock.Index() call PendingBlock.Index() call PendingBlock.Index() new else == || == && == - == == decl System decl IOException decl IO public override public override decl_stmt IOException = try decl_stmt long = decl_stmt long = call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() foreach in call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() if != call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() catch = finally