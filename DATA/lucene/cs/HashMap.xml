Lucene.Net.Support System using System.Collections using System.Collections.Generic using class attribute super bool bool TValue decl IDictionary decl IEqualityComparer public public if ! && && call TValue.Equals() call TValue.Equals() call TValue.Equals() call TValue.Equals() call TValue.Equals() return return call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() public public if ! return default return public < < public < < if ! && yield new < default foreach in yield return < < < < < public public = = default call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() < < < < < if ! && call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() default return && < < < < return < < < < < < < < < if ! && - = new < default public public < if ! && call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() default if ! return = = default return return < < return + : return public public if ! && call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() default if return return return call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() public virtual public virtual if ! && call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() default = = else = public public if ! && call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() default = = default return else return call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() public public out out if ! && call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() default if = return = default return else return call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if ! && call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() call decl IEqualityComparer.Equals() default if ! return default return return call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() : default if ! return return new if ! return return new public < public < yield foreach in yield return public public throw new return + return < < throw new < < throw new < < throw new < < throw new public < public < yield default foreach in yield return public public throw new return + return < < throw new < < throw new < < throw new < < throw new