Lucene.Net.Analysis.Synonym System using System.Collections.Generic using System.Diagnostics using System.IO using System.Linq using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Store using Lucene.Net.Support using Lucene.Net.Util using Lucene.Net.Util.Fst using System.IO.TextReader class Lucene.Net.Analysis.Synonym.SynonymMap char int decl FST BytesRefHash int decl char int int public static public static decl_stmt int = decl_stmt char = foreach in decl_stmt int = decl_stmt int = == : + + if > = if > ++ = - += = return int internal virtual internal virtual decl_stmt int = + for = + < ++ if == && - == return if == return if + - == return return int MapEntry internal virtual internal virtual if <= throw new + + if <= throw new + + if <= throw new + + if <= throw new + + ! + ! + decl_stmt int = call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) call Lucene.Net.Util.BytesRefHash.Add(BytesRef) if < = - - else decl_stmt MapEntry = if == = new = call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() call MapEntry.ords() |= = = int int int internal virtual internal virtual decl_stmt int = decl_stmt int = decl_stmt int = + while < if ++ == ++ return public virtual public virtual int IntsRef int decl FST CharsRef MapEntry decl KeyCollection ByteSequenceOutputs var int int decl HashSet var BytesRef int ByteArrayDataOutput int decl CharsRef int public virtual public virtual decl_stmt Lucene.Net.Util.Fst.ByteSequenceOutputs = decl_stmt var = new < decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt Lucene.Net.Store.ByteArrayDataOutput = new decl_stmt System.Collections.Generic.HashSet < ? if = new < ? else = decl_stmt var = new decl_stmt KeyCollection < < = decl_stmt Lucene.Net.Util.CharsRef = call decl KeyCollection.ToArray() call decl KeyCollection.ToArray() call decl KeyCollection.ToArray() call decl KeyCollection.ToArray() call decl KeyCollection.ToArray() decl_stmt Lucene.Net.Util.IntsRef = new for = < ++ decl_stmt Lucene.Net.Util.CharsRef = decl_stmt MapEntry = decl_stmt int = decl_stmt int = + * call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Store.ByteArrayDataOutput.Reset(byte,int,int) call Lucene.Net.Store.ByteArrayDataOutput.Reset(byte,int,int) call Lucene.Net.Store.ByteArrayDataOutput.Reset(byte,int,int) call Lucene.Net.Store.ByteArrayDataOutput.Reset(byte,int,int) call Lucene.Net.Store.ByteArrayDataOutput.Reset(byte,int,int) == decl_stmt int = for = < ++ if != decl_stmt int ? = if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() continue call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call ByteArrayDataOutput.WriteVInt() call ByteArrayDataOutput.WriteVInt() call ByteArrayDataOutput.WriteVInt() call ByteArrayDataOutput.WriteVInt() call ByteArrayDataOutput.WriteVInt() ++ decl_stmt int = call ByteArrayDataOutput.WriteVInt() call ByteArrayDataOutput.WriteVInt() call ByteArrayDataOutput.WriteVInt() call ByteArrayDataOutput.WriteVInt() call ByteArrayDataOutput.WriteVInt() << | : decl_stmt int = decl_stmt int = - if != call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() = - call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() decl_stmt Lucene.Net.Util.Fst.FST < = call var.Finish() call var.Finish() call var.Finish() call var.Finish() call var.Finish() return new int var TokenStream IOException int var public virtual public virtual decl_stmt IOException = decl_stmt Lucene.Net.Analysis.TokenStream = try decl_stmt var = < decl_stmt var = < call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() = while call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() decl_stmt int = if == throw new + + if != throw new + + + + decl_stmt int = + if > ++ = ++ call var.Buffer() call var.Buffer() call var.Buffer() call var.Buffer() call var.Buffer() += call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() catch = finally if == throw new + + return