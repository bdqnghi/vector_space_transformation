Lucene.Net.Facet.Taxonomy System using System.Collections using System.Collections.Generic using System.IO using System.Threading using Lucene.Net.Facet using FacetsCollector.MatchingDocs Lucene.Net.Index.AtomicReaderContext Lucene.Net.Queries.Function.FunctionValues Lucene.Net.Queries.Function.ValueSource Lucene.Net.Queries.Function.DocValues.DoubleDocValues Lucene.Net.Search.DocIdSetIterator Lucene.Net.Search.Scorer Lucene.Net.Search.Weight Lucene.Net.Util.IntsRef class Lucene.Net.Facet.Taxonomy.TaxonomyFacetSumValueSource super super FloatTaxonomyFacets OrdinalsReader public override public override return public override public override throw new public override public override return public override public override throw new public override public override throw new public override public override return throw new throw new decl float FakeScorer FunctionValues IntsRef int decl OrdinalsSegmentReader DocIdSetIterator IDictionary int decl OrdinalsReader private private < decl_stmt Lucene.Net.Search.FakeScorer = new decl_stmt SpellChecker.Net.Search.Spell.IDictionary = new < if = decl_stmt Lucene.Net.Util.IntsRef = new foreach in decl_stmt OrdinalsSegmentReader = call OrdinalsReader.GetReader() call OrdinalsReader.GetReader() call OrdinalsReader.GetReader() call OrdinalsReader.GetReader() call OrdinalsReader.GetReader() decl_stmt int = decl_stmt float = decl_stmt Lucene.Net.Queries.Function.FunctionValues = decl_stmt Lucene.Net.Search.DocIdSetIterator = decl_stmt int while = call FunctionValues.NextDoc() call FunctionValues.NextDoc() call FunctionValues.NextDoc() call FunctionValues.NextDoc() call FunctionValues.NextDoc() != call decl OrdinalsReader.Get() call decl OrdinalsReader.Get() call decl OrdinalsReader.Get() call decl OrdinalsReader.Get() call decl OrdinalsReader.Get() if = = ++ decl_stmt float = float call decl float.DoubleVal() call decl float.DoubleVal() call decl float.DoubleVal() call decl float.DoubleVal() call decl float.DoubleVal() for = < ++ += Scorer public override public override decl_stmt Lucene.Net.Search.Scorer = if == throw new return new public override public override try return catch throw public override public override if return if return if != return return protected protected return public override public override return return