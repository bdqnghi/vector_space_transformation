Lucene.Net.Util.Packed System using System.Collections.Generic using System.Globalization using System.IO using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Codecs.CodecUtil Lucene.Net.Store.ByteArrayDataInput Lucene.Net.Store.DataInput Lucene.Net.Store.Directory Lucene.Net.Store.IOContext Lucene.Net.Store.IndexInput Lucene.Net.Store.IndexOutput Lucene.Net.Store.RAMDirectory Lucene.Net.Util.Packed.PackedInts.Reader class attribute Lucene.Net.Util.Packed.TestPackedInts super super LuceneTestCase int string int long public virtual public virtual decl_stmt int = for = < ++ decl_stmt int = foreach in for = <= ++ decl_stmt long = decl_stmt string = + + + + + + + * >= long * if == - * < long * public virtual public virtual long - public virtual public virtual decl PackedInts decl Reader int int int LongsRef decl PackedInts int decl long long float decl ReaderIterator IndexOutput long IndexInput Directory decl ReaderIterator long int decl PackedInts int decl PackedInts decl Writer public virtual public virtual decl_stmt int = for = < ++ for = <= ++ decl_stmt long = decl_stmt int = decl_stmt int = : decl_stmt Lucene.Net.Store.Directory = decl_stmt IndexOutput = call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() decl_stmt float if == = else = decl_stmt Writer = decl_stmt long = decl_stmt int = : decl_stmt long = new for = < ++ if == = else = call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() decl_stmt long = call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() decl_stmt long = call decl PackedInts.Format() call decl PackedInts.Format() call decl PackedInts.Format() call decl PackedInts.Format() call decl PackedInts.Format() call decl PackedInts.Format() call decl PackedInts.Format() call decl PackedInts.Format() call decl PackedInts.Format() call decl PackedInts.BitsPerValue() call decl PackedInts.BitsPerValue() call decl PackedInts.BitsPerValue() call decl PackedInts.BitsPerValue() call decl PackedInts.BitsPerValue() - decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call decl PackedInts.BitsPerValue() call decl PackedInts.BitsPerValue() call decl PackedInts.BitsPerValue() call decl PackedInts.BitsPerValue() call decl PackedInts.BitsPerValue() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.ReadVInt() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() decl_stmt Reader = for = < ++ call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() + + + + + + + call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() decl_stmt long = decl_stmt long = call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() + + + + decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() decl_stmt ReaderIterator = for = < ++ call decl PackedInts.Next() call decl PackedInts.Next() call decl PackedInts.Next() call decl PackedInts.Next() call decl PackedInts.Next() + + + + + + + call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.Ord() call decl PackedInts.Ord() call decl PackedInts.Ord() call decl PackedInts.Ord() call decl PackedInts.Ord() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() decl_stmt ReaderIterator = decl_stmt int = while < decl_stmt int = decl_stmt Lucene.Net.Util.LongsRef = call decl PackedInts.Next() call decl PackedInts.Next() call decl PackedInts.Next() call decl PackedInts.Next() call decl PackedInts.Next() for = < ++ + + + + + + + + + call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() += call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() decl_stmt Reader = for = < ++ decl_stmt string = + + + + + + + call int.GetType() call int.GetType() call int.GetType() call int.GetType() call int.GetType() decl_stmt int = call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() call int.Size() call int.Size() call int.Size() call int.Size() call int.Size() - call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call decl ReaderIterator.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() decl ReaderIterator long decl PackedInts string int IndexInput IndexOutput Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt int = decl_stmt IndexOutput = call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() for = < ++ call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() for = <= ++ for = <= ++ foreach in if ! continue decl_stmt long = decl_stmt string = + + + + + + + call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt ReaderIterator = << for = < ++ call decl PackedInts.Next() call decl PackedInts.Next() call decl PackedInts.Next() call decl PackedInts.Next() call decl PackedInts.Next() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt Reader = call decl ReaderIterator.Get() call decl ReaderIterator.Get() call decl ReaderIterator.Get() call decl ReaderIterator.Get() call decl ReaderIterator.Get() - call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() int decl IList int public virtual public virtual decl_stmt int const const = decl_stmt int const const = decl_stmt System.Collections.Generic.IList < = foreach in for = < ++ + int decl Mutable long decl PackedInts decl long long int int int int int int decl Mutable decl PackedInts int public virtual public virtual decl_stmt int = for = < ++ if + decl_stmt int = decl_stmt int = decl_stmt int = if > decl_stmt int = = = if + + + + + decl_stmt Mutable = decl_stmt Mutable = decl_stmt long = for = < ++ decl_stmt long = call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Set() call decl Mutable.Set() call decl Mutable.Set() call decl Mutable.Set() call decl Mutable.Set() call decl Mutable.Set() decl_stmt long = new for = < ++ decl_stmt int = - decl_stmt int = - decl_stmt int if + + + if == = else = - if decl_stmt int = call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() <= decl_stmt int = call decl Mutable.Set() call decl Mutable.Set() call decl Mutable.Set() call decl Mutable.Set() call decl Mutable.Set() <= else * for = < ++ call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl Mutable.Get() call decl Mutable.Get() call decl Mutable.Get() call decl Mutable.Get() call decl Mutable.Get() + int int public virtual public virtual decl_stmt int = for = < ++ decl_stmt int = for = <= ++ decl IList private static private static decl_stmt System.Collections.Generic.IList < = foreach in try catch decl IList private static < private static < decl_stmt System.Collections.Generic.IList < = new < if <= call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new if <= call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new if <= && <= call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new if <= call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new if <= && <= call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new if <= call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new for = <= ++ if call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return Random long private static private static decl_stmt System.Random = new int for = < ++ decl_stmt long = private static private static private static < < where where decl PackedInts decl Reader private static private static private static < < where where if == return decl_stmt Reader = decl_stmt int = call decl PackedInts.Size() call decl PackedInts.Size() call decl PackedInts.Size() call decl PackedInts.Size() call decl PackedInts.Size() foreach in + for = < ++ for = < ++ call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() long long decl Writer Reader decl PackedInts IndexInput IndexOutput Directory public virtual public virtual for = <= ++ decl_stmt Lucene.Net.Store.Directory = decl_stmt IndexOutput = call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() decl_stmt Writer = decl_stmt long = & call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() decl_stmt long = call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() decl_stmt Reader = decl_stmt string = + call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() call decl PackedInts.GetType() + + call IndexInput.Size() call IndexInput.Size() call IndexInput.Size() call IndexInput.Size() call IndexInput.Size() call IndexInput.Get() call IndexInput.Get() call IndexInput.Get() call IndexInput.Get() call IndexInput.Get() call long.Dispose() call long.Dispose() call long.Dispose() call long.Dispose() call long.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() decl PackedInts public virtual public virtual decl_stmt Mutable = new call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Set() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() int Packed64SingleBlock Packed64 int Packed8ThreeBlocks Packed16ThreeBlocks int public virtual public virtual decl_stmt int = int + decl_stmt int = decl_stmt Lucene.Net.Util.Packed.Packed64 = try = new catch if != call Lucene.Net.Util.Packed.Packed64.Set(int,long) call Lucene.Net.Util.Packed.Packed64.Set(int,long) call Lucene.Net.Util.Packed.Packed64.Set(int,long) call Lucene.Net.Util.Packed.Packed64.Set(int,long) call Lucene.Net.Util.Packed.Packed64.Set(int,long) - call Lucene.Net.Util.Packed.Packed64.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed64.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed64.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed64.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed64.Get(int,long,int,int) - + - + = decl_stmt Lucene.Net.Util.Packed.Packed64SingleBlock = try = catch if != call Lucene.Net.Util.Packed.Packed64SingleBlock.Set(int,long) call Lucene.Net.Util.Packed.Packed64SingleBlock.Set(int,long) call Lucene.Net.Util.Packed.Packed64SingleBlock.Set(int,long) call Lucene.Net.Util.Packed.Packed64SingleBlock.Set(int,long) call Lucene.Net.Util.Packed.Packed64SingleBlock.Set(int,long) - call Lucene.Net.Util.Packed.Packed64SingleBlock.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed64SingleBlock.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed64SingleBlock.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed64SingleBlock.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed64SingleBlock.Get(int,long,int,int) - + - + + call Packed64SingleBlock.GetType() call Packed64SingleBlock.GetType() call Packed64SingleBlock.GetType() call Packed64SingleBlock.GetType() call Packed64SingleBlock.GetType() decl_stmt int = / + decl_stmt Lucene.Net.Util.Packed.Packed8ThreeBlocks = try = new catch if != call Lucene.Net.Util.Packed.Packed8ThreeBlocks.Set(int,long) call Lucene.Net.Util.Packed.Packed8ThreeBlocks.Set(int,long) call Lucene.Net.Util.Packed.Packed8ThreeBlocks.Set(int,long) call Lucene.Net.Util.Packed.Packed8ThreeBlocks.Set(int,long) call Lucene.Net.Util.Packed.Packed8ThreeBlocks.Set(int,long) - call Lucene.Net.Util.Packed.Packed8ThreeBlocks.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed8ThreeBlocks.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed8ThreeBlocks.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed8ThreeBlocks.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed8ThreeBlocks.Get(int,long,int,int) - + - + = = / + decl_stmt Lucene.Net.Util.Packed.Packed16ThreeBlocks = try = new catch if != call Lucene.Net.Util.Packed.Packed16ThreeBlocks.Set(int,long) call Lucene.Net.Util.Packed.Packed16ThreeBlocks.Set(int,long) call Lucene.Net.Util.Packed.Packed16ThreeBlocks.Set(int,long) call Lucene.Net.Util.Packed.Packed16ThreeBlocks.Set(int,long) call Lucene.Net.Util.Packed.Packed16ThreeBlocks.Set(int,long) - call Lucene.Net.Util.Packed.Packed16ThreeBlocks.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed16ThreeBlocks.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed16ThreeBlocks.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed16ThreeBlocks.Get(int,long,int,int) call Lucene.Net.Util.Packed.Packed16ThreeBlocks.Get(int,long,int,int) - + - + = decl IList int long int int string public virtual public virtual decl_stmt int const const = decl_stmt int = + decl_stmt int = from + + - from for = <= ++ decl_stmt long = decl_stmt System.Collections.Generic.IList < = foreach in decl_stmt string = + + + + from + + + + from for = < ++ if >= from && < + + else + + Reader decl long int int public virtual public virtual decl_stmt int = decl_stmt Reader = new call Reader.Get() call Reader.Get() call Reader.Get() call Reader.Get() call Reader.Get() - decl_stmt long = new + decl_stmt int = call Reader.Get() call Reader.Get() call Reader.Get() call Reader.Get() call Reader.Get() - - for -- >= -- = call Reader.Get() call Reader.Get() call Reader.Get() call Reader.Get() call Reader.Get() + - for = < - ++ decl IList int decl long int string long int int string int public virtual public virtual decl_stmt int const const = decl_stmt int = decl_stmt int = * decl_stmt int = for = <= ++ decl_stmt long = decl_stmt System.Collections.Generic.IList < = foreach in for = < ++ * - & decl_stmt long = new + decl_stmt string = + + + + + + + + decl_stmt int = > <= <= - for = < ++ decl_stmt string = + + if >= && < + - + else decl IList int decl long int string long int int int string public virtual public virtual decl_stmt int const const = decl_stmt int = decl_stmt int = * decl_stmt int = decl_stmt long = new + for = <= ++ decl_stmt long = decl_stmt System.Collections.Generic.IList < = for = < ++ = * + & foreach in decl_stmt string = + + + + + + + + decl_stmt int = > <= for = < ++ decl_stmt string = + + if >= && < + - + else int int int string long int int string public virtual public virtual decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = - - decl_stmt int = for = <= ++ decl_stmt long = foreach in for = < ++ * - & foreach in decl_stmt string = + + + + + + + + + + + for = < ++ decl_stmt string = + + if >= && < + - + else int GrowableWriter public virtual public virtual decl_stmt int = + decl_stmt Lucene.Net.Util.Packed.GrowableWriter = new call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) - call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) - << << call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) - call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) << - << call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) - call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) call Lucene.Net.Util.Packed.GrowableWriter.Set(int,long) - << call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) - call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) - call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) << - call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) - << call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) call Lucene.Net.Util.Packed.GrowableWriter.Get(int,long,int,int) - call Lucene.Net.Util.Packed.GrowableWriter.RamBytesUsed() call Lucene.Net.Util.Packed.GrowableWriter.RamBytesUsed() call Lucene.Net.Util.Packed.GrowableWriter.RamBytesUsed() call Lucene.Net.Util.Packed.GrowableWriter.RamBytesUsed() call Lucene.Net.Util.Packed.GrowableWriter.RamBytesUsed() int long PagedGrowableWriter PagedGrowableWriter AppendingDeltaPackedLongBuffer PagedGrowableWriter int public virtual public virtual decl_stmt int = << decl_stmt Lucene.Net.Util.Packed.PagedGrowableWriter = new call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() decl_stmt Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer = new decl_stmt int = decl_stmt long = for = < ++ call AppendingDeltaPackedLongBuffer.Add() call AppendingDeltaPackedLongBuffer.Add() call AppendingDeltaPackedLongBuffer.Add() call AppendingDeltaPackedLongBuffer.Add() call AppendingDeltaPackedLongBuffer.Add() if = : = new call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() for = - >= -- call PagedGrowableWriter.Set() call PagedGrowableWriter.Set() call PagedGrowableWriter.Set() call PagedGrowableWriter.Set() call PagedGrowableWriter.Set() call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) for = < ++ call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.RamBytesUsed() call PagedGrowableWriter.RamBytesUsed() call PagedGrowableWriter.RamBytesUsed() call PagedGrowableWriter.RamBytesUsed() call PagedGrowableWriter.RamBytesUsed() decl_stmt Lucene.Net.Util.Packed.PagedGrowableWriter = call PagedGrowableWriter.Resize() call PagedGrowableWriter.Resize() call PagedGrowableWriter.Resize() call PagedGrowableWriter.Resize() call PagedGrowableWriter.Resize() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() / call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() * / for = < call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() ++ if < call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() else call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() decl_stmt Lucene.Net.Util.Packed.PagedGrowableWriter = call PagedGrowableWriter.Grow() call PagedGrowableWriter.Grow() call PagedGrowableWriter.Grow() call PagedGrowableWriter.Grow() call PagedGrowableWriter.Grow() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() / call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() * / for = < call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() ++ if < call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Size() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() else call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() int long PagedMutable int PagedMutable AppendingDeltaPackedLongBuffer PagedMutable int public virtual public virtual decl_stmt int = decl_stmt long = decl_stmt int = << decl_stmt Lucene.Net.Util.Packed.PagedMutable = new / call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() decl_stmt Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer = new decl_stmt int = for = < ++ call AppendingDeltaPackedLongBuffer.Add() call AppendingDeltaPackedLongBuffer.Add() call AppendingDeltaPackedLongBuffer.Add() call AppendingDeltaPackedLongBuffer.Add() call AppendingDeltaPackedLongBuffer.Add() == : = new call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() for = - >= -- call PagedMutable.Set() call PagedMutable.Set() call PagedMutable.Set() call PagedMutable.Set() call PagedMutable.Set() call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) for = < ++ call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer.Get(int,int) call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() - call PagedMutable.RamBytesUsed() call PagedMutable.RamBytesUsed() call PagedMutable.RamBytesUsed() call PagedMutable.RamBytesUsed() call PagedMutable.RamBytesUsed() decl_stmt Lucene.Net.Util.Packed.PagedMutable = call PagedMutable.Resize() call PagedMutable.Resize() call PagedMutable.Resize() call PagedMutable.Resize() call PagedMutable.Resize() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() / call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() * / for = < call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() ++ if < call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() else call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() decl_stmt Lucene.Net.Util.Packed.PagedMutable = call PagedMutable.Grow() call PagedMutable.Grow() call PagedMutable.Grow() call PagedMutable.Grow() call PagedMutable.Grow() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() / call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() * / for = < call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() ++ if < call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Size() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() else call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() call PagedMutable.Get() long PagedGrowableWriter long int long public virtual public virtual decl_stmt long = * long * long decl_stmt int = << decl_stmt Lucene.Net.Util.Packed.PagedGrowableWriter = new decl_stmt long = long - call PagedGrowableWriter.Set() call PagedGrowableWriter.Set() call PagedGrowableWriter.Set() call PagedGrowableWriter.Set() call PagedGrowableWriter.Set() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() for = < ++ decl_stmt long = if == call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() else call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() call PagedGrowableWriter.Get() decl IList int IndexOutput int IndexInput decl PackedInts RAMDirectory public virtual public virtual decl_stmt int = for = <= ++ decl_stmt int = int decl_stmt Lucene.Net.Store.RAMDirectory = new decl_stmt System.Collections.Generic.IList < = foreach in for = < ++ decl_stmt IndexOutput = call Lucene.Net.Store.RAMDirectory.CreateOutput(string,IOContext) call Lucene.Net.Store.RAMDirectory.CreateOutput(string,IOContext) call Lucene.Net.Store.RAMDirectory.CreateOutput(string,IOContext) call Lucene.Net.Store.RAMDirectory.CreateOutput(string,IOContext) call Lucene.Net.Store.RAMDirectory.CreateOutput(string,IOContext) call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) decl_stmt Reader = call decl PackedInts.Size() call decl PackedInts.Size() call decl PackedInts.Size() call decl PackedInts.Size() call decl PackedInts.Size() if is is else is for = < ++ call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.Dispose() call Lucene.Net.Store.RAMDirectory.Dispose() call Lucene.Net.Store.RAMDirectory.Dispose() call Lucene.Net.Store.RAMDirectory.Dispose() call Lucene.Net.Store.RAMDirectory.Dispose() int decl sbyte int int string int int int decl long int decl long decl PackedInts decl PackedInts int decl Encoder int decl long decl long decl Decoder decl int decl long int decl int int public virtual public virtual foreach in for = <= ++ if ! continue decl_stmt string = + + decl_stmt System.Text.Encoder = decl_stmt Lucene.Net.Util.Packed.Decoder = decl_stmt int = call decl PackedInts.LongBlockCount() call decl PackedInts.LongBlockCount() call decl PackedInts.LongBlockCount() call decl PackedInts.LongBlockCount() call decl PackedInts.LongBlockCount() decl_stmt int = call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() decl_stmt int = call decl PackedInts.ByteBlockCount() call decl PackedInts.ByteBlockCount() call decl PackedInts.ByteBlockCount() call decl PackedInts.ByteBlockCount() call decl PackedInts.ByteBlockCount() decl_stmt int = call decl PackedInts.ByteValueCount() call decl PackedInts.ByteValueCount() call decl PackedInts.ByteValueCount() call decl PackedInts.ByteValueCount() call decl PackedInts.ByteValueCount() call decl Encoder.LongBlockCount() call decl Encoder.LongBlockCount() call decl Encoder.LongBlockCount() call decl Encoder.LongBlockCount() call decl Encoder.LongBlockCount() call decl Encoder.LongValueCount() call decl Encoder.LongValueCount() call decl Encoder.LongValueCount() call decl Encoder.LongValueCount() call decl Encoder.LongValueCount() call decl Encoder.ByteBlockCount() call decl Encoder.ByteBlockCount() call decl Encoder.ByteBlockCount() call decl Encoder.ByteBlockCount() call decl Encoder.ByteBlockCount() call decl Encoder.ByteValueCount() call decl Encoder.ByteValueCount() call decl Encoder.ByteValueCount() call decl Encoder.ByteValueCount() call decl Encoder.ByteValueCount() decl_stmt int = decl_stmt int = * / * * decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = * decl_stmt long = new + for = < ++ = if == && != decl_stmt int = = << >> decl_stmt long = new + * call decl Encoder.Decode() call decl Encoder.Decode() call decl Encoder.Decode() call decl Encoder.Decode() call decl Encoder.Decode() foreach in <= decl_stmt int if <= = new call decl Encoder.Decode() call decl Encoder.Decode() call decl Encoder.Decode() call decl Encoder.Decode() call decl Encoder.Decode() else = decl_stmt long = new + call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() if <= decl_stmt long = new call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() decl_stmt sbyte = new * decl_stmt long = new + * call decl Encoder.Decode() call decl Encoder.Decode() call decl Encoder.Decode() call decl Encoder.Decode() call decl Encoder.Decode() * foreach in <= if <= decl_stmt int = new call decl Encoder.Decode() call decl Encoder.Decode() call decl Encoder.Decode() call decl Encoder.Decode() call decl Encoder.Decode() * decl_stmt sbyte = new * + call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() * if <= decl_stmt sbyte = new call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() * private static private static if != return for = < ++ if & != return return