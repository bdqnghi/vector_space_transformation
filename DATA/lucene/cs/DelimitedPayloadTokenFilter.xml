Lucene.Net.Analysis.Payloads Lucene.Net.Analysis.Tokenattributes using class Lucene.Net.Analysis.Payloads.DelimitedPayloadTokenFilter super super TokenFilter ITermAttribute char PayloadEncoder char IPayloadAttribute decl char bool int bool public override public override decl_stmt bool = if decl_stmt char = call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() decl_stmt int = call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() decl_stmt bool = for = < ++ if == call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) = call Lucene.Net.Analysis.Payloads.PayloadEncoder.Encode(char,int,int) call Lucene.Net.Analysis.Payloads.PayloadEncoder.Encode(char,int,int) call Lucene.Net.Analysis.Payloads.PayloadEncoder.Encode(char,int,int) call Lucene.Net.Analysis.Payloads.PayloadEncoder.Encode(char,int,int) call Lucene.Net.Analysis.Payloads.PayloadEncoder.Encode(char,int,int) + - + = break if == = = return