Lucene.Net.Search.Highlight System using System.Collections.Generic using System.IO using System.Linq using System.Text using Lucene.Net.Analysis using Lucene.Net.Index using Lucene.Net.Index.Memory using Lucene.Net.Search.Spans using Lucene.Net.Store using Lucene.Net.Support using Lucene.Net.Util using class Lucene.Net.Search.Highlight.WeightedSpanTermExtractor String bool decl IDictionary bool String TokenStream bool decl ICollection private private decl_stmt System.Collections.Generic.ICollection < = foreach in try catch SpanNearQuery decl List int decl IList IndexReader int decl BooleanClause decl Term decl SpanQuery int int int bool int int MultiPhraseQuery var int PhraseQuery int decl int MultiTermQuery FakeReader int decl Term private private < if is decl_stmt Lucene.Net.Search.BooleanClause = for = < ++ if ! else if is decl_stmt Lucene.Net.Search.PhraseQuery = decl_stmt Lucene.Net.Index.Term = call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() call PhraseQuery.GetTerms() decl_stmt Lucene.Net.Search.Spans.SpanQuery = new for = < ++ = new decl_stmt int = decl_stmt int = call PhraseQuery.GetPositions() call PhraseQuery.GetPositions() call PhraseQuery.GetPositions() call PhraseQuery.GetPositions() call PhraseQuery.GetPositions() if > decl_stmt int = decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = decl_stmt int = - if > = = if > += decl_stmt bool = == decl_stmt Lucene.Net.Search.Spans.SpanNearQuery = new = else if is else if is else if is else if is foreach in else if is && decl_stmt Lucene.Net.Search.MultiTermQuery = if != = call MultiTermQuery.Clone() call MultiTermQuery.Clone() call MultiTermQuery.Clone() call MultiTermQuery.Clone() call MultiTermQuery.Clone() = = decl_stmt FakeReader = new if != decl_stmt Lucene.Net.Index.IndexReader = else if is decl_stmt Lucene.Net.Search.MultiPhraseQuery = decl_stmt System.Collections.Generic.IList < = call MultiPhraseQuery.GetTermArrays() call MultiPhraseQuery.GetTermArrays() call MultiPhraseQuery.GetTermArrays() call MultiPhraseQuery.GetTermArrays() call MultiPhraseQuery.GetTermArrays() decl_stmt int = call MultiPhraseQuery.GetPositions() call MultiPhraseQuery.GetPositions() call MultiPhraseQuery.GetPositions() call MultiPhraseQuery.GetPositions() call MultiPhraseQuery.GetPositions() if > decl_stmt int = - for = < - ++ if > = decl_stmt var = new < + decl_stmt int = for = < ++ decl_stmt Lucene.Net.Index.Term = decl_stmt System.Collections.Generic.List < = if == = = new < ++ for = < ++ call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new decl_stmt int = decl_stmt int = decl_stmt Lucene.Net.Search.Spans.SpanQuery = new for = < ++ decl_stmt System.Collections.Generic.List < = if != ++ = new call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() else ++ decl_stmt int = decl_stmt bool = == decl_stmt Lucene.Net.Search.Spans.SpanNearQuery = new + = bool decl List decl HashSet var IndexReader decl Spans decl Spans decl IDictionary SpanQuery private private < decl_stmt System.Collections.Generic.HashSet < if == = new < else = new < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() if != call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < decl_stmt var = < decl_stmt bool = if foreach in decl_stmt Lucene.Net.Search.Spans.SpanQuery = = call SpanQuery.ExtractTerms() call SpanQuery.ExtractTerms() call SpanQuery.ExtractTerms() call SpanQuery.ExtractTerms() call SpanQuery.ExtractTerms() else decl_stmt System.Collections.Generic.List < = new < foreach in decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Spans if = else = while call decl Spans.Next() call decl Spans.Next() call decl Spans.Next() call decl Spans.Next() call decl Spans.Next() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new call decl Spans.Start() call decl Spans.Start() call decl Spans.Start() call decl Spans.Start() call decl Spans.Start() call decl Spans.End() call decl Spans.End() call decl Spans.End() call decl Spans.End() call decl Spans.End() - if == return foreach in if decl_stmt Lucene.Net.Search.Highlight.WeightedSpanTerm = if == = new call decl Spans.AddPositionSpans() call decl Spans.AddPositionSpans() call decl Spans.AddPositionSpans() call decl Spans.AddPositionSpans() call decl Spans.AddPositionSpans() call decl Spans.SetPositionSensitive() call decl Spans.SetPositionSensitive() call decl Spans.SetPositionSensitive() call decl Spans.SetPositionSensitive() call decl Spans.SetPositionSensitive() = else if > call decl Spans.AddPositionSpans() call decl Spans.AddPositionSpans() call decl Spans.AddPositionSpans() call decl Spans.AddPositionSpans() call decl Spans.AddPositionSpans() WeightedSpanTerm var private private < decl_stmt var = < foreach in if decl_stmt Lucene.Net.Search.Highlight.WeightedSpanTerm = new = bool private private decl_stmt bool = == || == || == return IndexSearcher MemoryIndex IndexReader private private if && ! && ! is = new = decl_stmt Lucene.Net.Index.IndexReader = if == decl_stmt Lucene.Net.Index.Memory.MemoryIndex = new call Lucene.Net.Index.Memory.MemoryIndex.AddField(String,TokenStream,float) call Lucene.Net.Index.Memory.MemoryIndex.AddField(String,TokenStream,float) call Lucene.Net.Index.Memory.MemoryIndex.AddField(String,TokenStream,float) call Lucene.Net.Index.Memory.MemoryIndex.AddField(String,TokenStream,float) call Lucene.Net.Index.Memory.MemoryIndex.AddField(String,TokenStream,float) call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() decl_stmt Lucene.Net.Search.IndexSearcher = call Lucene.Net.Index.Memory.MemoryIndex.CreateSearcher() call Lucene.Net.Index.Memory.MemoryIndex.CreateSearcher() call Lucene.Net.Index.Memory.MemoryIndex.CreateSearcher() call Lucene.Net.Index.Memory.MemoryIndex.CreateSearcher() call Lucene.Net.Index.Memory.MemoryIndex.CreateSearcher() = = return public < public < return decl IDictionary public < public < if != = else = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < = try finally return int decl IDictionary WeightedSpanTerm var int float public < public < if != = else = = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < decl_stmt int = decl_stmt var = try foreach in decl_stmt Lucene.Net.Search.Highlight.WeightedSpanTerm = decl_stmt int = new if < = decl_stmt float = float / + + *= finally return private private < if is else if is else if is foreach in else if is else if is foreach in else SpanNotQuery private private if ! return else if is return else if is return else if is foreach in if return return else if is decl_stmt Lucene.Net.Search.Spans.SpanNotQuery = return || else if is foreach in if return return else if is return else return public public < < foreach in WeightedSpanTerm WeightedSpanTerm WeightedSpanTerm public override public override decl_stmt Lucene.Net.Search.Highlight.WeightedSpanTerm = if == return decl_stmt Lucene.Net.Search.Highlight.WeightedSpanTerm = decl_stmt Lucene.Net.Search.Highlight.WeightedSpanTerm = if ! call WeightedSpanTerm.IsPositionSensitive() call WeightedSpanTerm.IsPositionSensitive() call WeightedSpanTerm.IsPositionSensitive() call WeightedSpanTerm.IsPositionSensitive() call WeightedSpanTerm.IsPositionSensitive() call Lucene.Net.Search.Highlight.WeightedSpanTerm.SetPositionSensitive(bool) call Lucene.Net.Search.Highlight.WeightedSpanTerm.SetPositionSensitive(bool) call Lucene.Net.Search.Highlight.WeightedSpanTerm.SetPositionSensitive(bool) call Lucene.Net.Search.Highlight.WeightedSpanTerm.SetPositionSensitive(bool) call Lucene.Net.Search.Highlight.WeightedSpanTerm.SetPositionSensitive(bool) = return return return public public = public override public override if != && == = return