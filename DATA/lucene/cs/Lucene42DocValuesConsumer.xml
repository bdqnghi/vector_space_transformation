Lucene.Net.Codecs.Lucene42 System using System.Collections.Generic using System.Diagnostics using System.IO using System.Linq using Lucene.Net.Util.Fst using Lucene.Net.Util.ArrayUtil Lucene.Net.Util.Packed.BlockPackedWriter Lucene.Net.Store.ByteArrayDataOutput Lucene.Net.Util.BytesRef Lucene.Net.Index.FieldInfo Lucene.Net.Util.Packed.PackedInts.FormatAndBits Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexOutput Lucene.Net.Util.Fst.FST.INPUT_TYPE Lucene.Net.Util.IntsRef Lucene.Net.Util.IOUtils Lucene.Net.Util.MathUtil Lucene.Net.Util.Packed.MonotonicBlockPackedWriter Lucene.Net.Util.Packed.PackedInts Lucene.Net.Util.Fst.PositiveIntOutputs Lucene.Net.Index.SegmentWriteState Lucene.Net.Util.Fst.Util class Lucene.Net.Codecs.Lucene42.Lucene42DocValuesConsumer super super DocValuesConsumer int IndexOutput float public override public override < ? long FormatAndBits long long long BlockPackedWriter long int decl HashSet long var decl long internal virtual internal virtual < ? call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt System.Collections.Generic.HashSet < = if = new < decl_stmt long = foreach ? in decl_stmt long = == : long if != if < / || / || / = else if != = - = = if != if call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() if > = ++ == if != decl_stmt int = - decl_stmt FormatAndBits = if == && >= && <= call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte foreach ? in call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() == byte : byte else call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte decl_stmt long = call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() decl_stmt var = new < call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() for = < ++ call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() = call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() decl_stmt Writer = foreach ? in call long.Add() call long.Add() call long.Add() call long.Add() call long.Add() == : long call long.Finish() call long.Finish() call long.Finish() call long.Finish() call long.Finish() else if != && != call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() decl_stmt Lucene.Net.Util.Packed.BlockPackedWriter = new foreach ? in decl_stmt long = == : long call long.Add() call long.Add() call long.Add() call long.Add() call long.Add() - / call long.Finish() call long.Finish() call long.Finish() call long.Finish() call long.Finish() else call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() decl_stmt Lucene.Net.Util.Packed.BlockPackedWriter = new foreach ? in call long.Add() call long.Add() call long.Add() call long.Add() call long.Add() == : long call long.Finish() call long.Finish() call long.Finish() call long.Finish() call long.Finish() bool protected override protected override if decl_stmt bool = try if != call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() - = finally if else long int MonotonicBlockPackedWriter int int long public override public override < call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte decl_stmt int = decl_stmt int = decl_stmt long = foreach in decl_stmt int = == : if > throw new + + + = = if != call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() - call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() if != call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() decl_stmt Lucene.Net.Util.Packed.MonotonicBlockPackedWriter = new decl_stmt long = foreach in if != += call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Finish() call MonotonicBlockPackedWriter.Finish() call MonotonicBlockPackedWriter.Finish() call MonotonicBlockPackedWriter.Finish() call MonotonicBlockPackedWriter.Finish() PositiveIntOutputs decl Builder var long IntsRef private private < call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() decl_stmt Lucene.Net.Util.Fst.PositiveIntOutputs = decl_stmt Lucene.Net.Util.Fst.Builder < ? = new < ? decl_stmt Lucene.Net.Util.IntsRef = new decl_stmt long = foreach in call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() ++ decl_stmt var = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() if != call var.Save() call var.Save() call var.Save() call var.Save() call var.Save() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() bool bool public override public override < < ? decl_stmt bool = foreach ? in if == - = break decl_stmt bool = foreach in = == break if ! else if = else = = public override public override < < ? < ? new public < public < return new return int int public public if ! return decl_stmt int = int decl_stmt int = * if > = try catch throw new = = = return return return long long internal virtual internal virtual decl_stmt long = for = < ++ decl_stmt long = - = public public throw new public public