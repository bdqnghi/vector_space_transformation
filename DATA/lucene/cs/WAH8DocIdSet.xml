Lucene.Net.Util System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Store.ByteArrayDataInput Lucene.Net.Search.DocIdSet Lucene.Net.Search.DocIdSetIterator Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer Lucene.Net.Util.Packed.PackedInts class Lucene.Net.Util.WAH8DocIdSet super super DocIdSet int int MonotonicAppendingLongBuffer int int MonotonicAppendingLongBuffer decl IComparer decl byte WAH8DocIdSet public virtual public virtual return - public static public static < return int int WordBuilder var var var int byte public static public static < switch case throw new case decl_stmt var = call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() return decl_stmt int = decl_stmt var = new decl_stmt int = foreach in decl_stmt var = ++ = decl_stmt WordBuilder = new decl_stmt int = while = if == break decl_stmt byte = for = < ++ if < if > = goto goto == &= if == ++ goto goto != call WordBuilder.AddWord() call WordBuilder.AddWord() call WordBuilder.AddWord() call WordBuilder.AddWord() call WordBuilder.AddWord() ++ return call WordBuilder.Build() call WordBuilder.Build() call WordBuilder.Build() call WordBuilder.Build() call WordBuilder.Build() public static public static < return int Iterator Iterator var decl PriorityQueue int byte WordBuilder public static public static < switch case return case decl_stmt var = call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() return decl_stmt int = decl_stmt Lucene.Net.Support.PriorityQueue < = new foreach in decl_stmt System.IO.Iterator = call Iterator.NextWord() call Iterator.NextWord() call Iterator.NextWord() call Iterator.NextWord() call Iterator.NextWord() call decl PriorityQueue.Add() call decl PriorityQueue.Add() call decl PriorityQueue.Add() call decl PriorityQueue.Add() call decl PriorityQueue.Add() decl_stmt System.IO.Iterator = call decl PriorityQueue.Top() call decl PriorityQueue.Top() call decl PriorityQueue.Top() call decl PriorityQueue.Top() call decl PriorityQueue.Top() if == return decl_stmt int = decl_stmt byte = decl_stmt WordBuilder = new while call Iterator.NextWord() call Iterator.NextWord() call Iterator.NextWord() call Iterator.NextWord() call Iterator.NextWord() call decl PriorityQueue.UpdateTop() call decl PriorityQueue.UpdateTop() call decl PriorityQueue.UpdateTop() call decl PriorityQueue.UpdateTop() call decl PriorityQueue.UpdateTop() = call decl PriorityQueue.Top() call decl PriorityQueue.Top() call decl PriorityQueue.Top() call decl PriorityQueue.Top() call decl PriorityQueue.Top() if == |= else call WordBuilder.AddWord() call WordBuilder.AddWord() call WordBuilder.AddWord() call WordBuilder.AddWord() call WordBuilder.AddWord() if == break = = return call WordBuilder.Build() call WordBuilder.Build() call WordBuilder.Build() call WordBuilder.Build() call WordBuilder.Build() public override public override return < internal static internal static >= return uint >> public virtual public virtual if < throw new + = return int int internal virtual internal virtual decl_stmt int = - >= >= decl_stmt int = & << | & if |= << if > |= << if > |= << byte sbyte if > uint >> if > uint >> internal virtual internal virtual for = < ++ - != || != byte - != || byte != return internal virtual internal virtual try catch throw new = ++ internal virtual internal virtual > != if ! if == - = + else switch - case if == && byte - == -- = = else break case break default: = - - break else >= switch - case if == if == ++ else if byte - == -- = else else break case break default: = = - - break = += MonotonicAppendingLongBuffer int MonotonicAppendingLongBuffer int Iterator MonotonicAppendingLongBuffer bool int int int decl byte public virtual public virtual if == == - return decl_stmt byte = decl_stmt int = - / + decl_stmt Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer if <= = = else decl_stmt int const const = decl_stmt int = + - / decl_stmt Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer = new decl_stmt Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer = new call MonotonicAppendingLongBuffer.Add() call MonotonicAppendingLongBuffer.Add() call MonotonicAppendingLongBuffer.Add() call MonotonicAppendingLongBuffer.Add() call MonotonicAppendingLongBuffer.Add() call Iterator.Add() call Iterator.Add() call Iterator.Add() call Iterator.Add() call Iterator.Add() decl_stmt System.IO.Iterator = new == == - for = < ++ for = < ++ decl_stmt bool = call bool.ReadSequence() call bool.ReadSequence() call bool.ReadSequence() call bool.ReadSequence() call bool.ReadSequence() call bool.SkipDirtyBytes() call bool.SkipDirtyBytes() call bool.SkipDirtyBytes() call bool.SkipDirtyBytes() call bool.SkipDirtyBytes() decl_stmt int = decl_stmt int = call MonotonicAppendingLongBuffer.Add() call MonotonicAppendingLongBuffer.Add() call MonotonicAppendingLongBuffer.Add() call MonotonicAppendingLongBuffer.Add() call MonotonicAppendingLongBuffer.Add() call Iterator.Add() call Iterator.Add() call Iterator.Add() call Iterator.Add() call Iterator.Add() + call MonotonicAppendingLongBuffer.Freeze() call MonotonicAppendingLongBuffer.Freeze() call MonotonicAppendingLongBuffer.Freeze() call MonotonicAppendingLongBuffer.Freeze() call MonotonicAppendingLongBuffer.Freeze() call Iterator.Freeze() call Iterator.Freeze() call Iterator.Freeze() call Iterator.Freeze() call Iterator.Freeze() = = return new int public public if <= throw new + + + decl_stmt int = if == - = = << & else if == |= << & else byte = = << & = return public public for = != = return public override public override return public override public override if != - byte return return public override public override return new int int internal static internal static decl_stmt int = uint >> & decl_stmt int = if & != = & | << if != += return int internal static internal static decl_stmt int = & if & != = & | << return long internal static internal static decl_stmt long = * * return int int int internal virtual internal virtual if = return decl_stmt int = & if & << == decl_stmt int = += else = = - >= + + + + ++ return internal virtual internal virtual >= <= + += if <= -= else -= = -= internal virtual internal virtual += + = = internal virtual internal virtual if > = ++ -- return if > = ++ -- if != return if > = ++ -- != return if int int int int int internal virtual internal virtual decl_stmt int = int decl_stmt int = / = + == - || <= + == || + > while if >= = - break else if >= break decl_stmt int = += - << = while <= decl_stmt int = + >> decl_stmt int = int if <= = + else = - <= + == || + > return int int int internal virtual internal virtual > decl_stmt int = - if <= + + - else == if > decl_stmt int = decl_stmt int = int call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.Get(int,int) call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.Get(int,int) if > = int - = = * - while if ! return = - if <= + + if > - break public override public override return public override public override if != = << | & - = uint >> return if == return = = != = << | & - = uint >> return int public override public override > decl_stmt int = if > = return public override public override return public public return public public return * + * + + call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.RamBytesUsed() call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.RamBytesUsed() call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.RamBytesUsed() call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.RamBytesUsed() call Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer.RamBytesUsed() +