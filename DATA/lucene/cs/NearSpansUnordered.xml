Lucene.Net.Search.Spans System using System.Collections using System.Collections.Generic using Lucene.Net.Util using Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.Bits Lucene.Net.Index.Term Lucene.Net.Index.TermContext class Lucene.Net.Search.Spans.NearSpansUnordered super super Spans int SpansCell decl IList int CellQueue SpansCell bool decl Spans SpanNearQuery bool SpansCell public override public override if == return else return < public override public override return public override public override return internal virtual internal virtual if != - -= if = - += if == || > || == && > = = return public override public override return public override public override return public override public override return return new < return public override public override return public override public override return + + return bool public override public override if = else if if call CellQueue.UpdateTop() call CellQueue.UpdateTop() call CellQueue.UpdateTop() call CellQueue.UpdateTop() call CellQueue.UpdateTop() else = while decl_stmt bool = if != call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() = while && call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() < call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() = call SpansCell.SkipTo() call SpansCell.SkipTo() call SpansCell.SkipTo() call SpansCell.SkipTo() call SpansCell.SkipTo() call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() = if ! return if = if return = if call CellQueue.UpdateTop() call CellQueue.UpdateTop() call CellQueue.UpdateTop() call CellQueue.UpdateTop() call CellQueue.UpdateTop() return public override public override if for = && != = = if = else while && < if call CellQueue.UpdateTop() call CellQueue.UpdateTop() call CellQueue.UpdateTop() call CellQueue.UpdateTop() call CellQueue.UpdateTop() else = return && || private private return call CellQueue.Top() call CellQueue.Top() call CellQueue.Top() call CellQueue.Top() call CellQueue.Top() public override public override return public override public override return public override public override return call SpansCell.End() call SpansCell.End() call SpansCell.End() call SpansCell.End() call SpansCell.End() var decl_stmt var = new < for = != = if call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() return SpansCell decl_stmt SpansCell = while != if return = return long public override public override decl_stmt long = for = < ++ = return public override public override return + + call Lucene.Net.Search.Spans.SpanNearQuery.ToString(string) call Lucene.Net.Search.Spans.SpanNearQuery.ToString(string) call Lucene.Net.Search.Spans.SpanNearQuery.ToString(string) call Lucene.Net.Search.Spans.SpanNearQuery.ToString(string) call Lucene.Net.Search.Spans.SpanNearQuery.ToString(string) + + : + + + + : SpansCell private private for = && < ++ decl_stmt SpansCell = if = call SpansCell.Next() call SpansCell.Next() call SpansCell.Next() call SpansCell.Next() call SpansCell.Next() if private private if != = else = = = private private = = = = private private = = while call CellQueue.Top() call CellQueue.Top() call CellQueue.Top() call CellQueue.Top() call CellQueue.Top() != call CellQueue.Pop() call CellQueue.Pop() call CellQueue.Pop() call CellQueue.Pop() call CellQueue.Pop() private private call CellQueue.Clear() call CellQueue.Clear() call CellQueue.Clear() call CellQueue.Clear() call CellQueue.Clear() for = != = call CellQueue.Add() call CellQueue.Add() call CellQueue.Add() call CellQueue.Add() call CellQueue.Add() private private return == call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() call SpansCell.Doc() && call SpansCell.End() call SpansCell.End() call SpansCell.End() call SpansCell.End() call SpansCell.End() - - <=