Lucene.Net.Analysis.Ngram System using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Util using System.IO.TextReader Lucene.Net.Util.LuceneVersion class attribute Lucene.Net.Analysis.Ngram.Lucene43EdgeNGramTokenizer super super Tokenizer PositionIncrementAttribute string bool Side int int int CharTermAttribute int int OffsetAttribute Side int private private if == throw new if == throw new if < throw new if > throw new if if == throw new else = = = = int bool decl char int int int var public override public override if ! = = decl_stmt int = == : decl_stmt char = new = decl_stmt bool = while < decl_stmt int = - if <= = break += if == && < = = new = call string.Trim() call string.Trim() call string.Trim() call string.Trim() call string.Trim() if ! decl_stmt var = new while decl_stmt int = if <= break += = if == return = else = if > return if > || > return decl_stmt int = == : - decl_stmt int = + call Lucene.Net.Analysis.Tokenattributes.CharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.CharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.CharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.CharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.CharTermAttribute.SetEmpty() call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.SetOffset(int,int) ++ return int public override public override decl_stmt int = public override public override =