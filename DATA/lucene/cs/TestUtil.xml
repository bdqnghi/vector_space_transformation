Lucene.Net.Util System.Numerics using Lucene.Net.Documents using Lucene.Net.Index using System using System.Collections.Generic using System.Text using System.Threading.Tasks using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using System.IO using Lucene.Net.Index.AtomicReader Lucene.Net.Index.AtomicReaderContext BinaryDocValuesField Lucene.Net.Codecs.Codec Lucene.Net.Index.ConcurrentMergeScheduler Lucene.Net.Store.Directory Lucene.Net.Index.DocsAndPositionsEnum Lucene.Net.Index.DocsEnum Documents.Document Lucene.Net.Codecs.DocValuesFormat Lucene.Net.Index.FieldInfo.DocValuesType_e DoubleField Field Lucene.Net.Search.FieldDoc FieldType Lucene.Net.Search.FilteredQuery FloatField Lucene.Net.Index.IndexableField Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexWriter IntField Lucene.Net.Index.LogMergePolicy LongField Lucene.Net.Codecs.Lucene46.Lucene46Codec Lucene.Net.Index.MergePolicy Lucene.Net.Index.MergeScheduler Lucene.Net.Index.MultiFields NumericDocValuesField FieldType.NumericType Lucene.Net.Codecs.Perfield.PerFieldDocValuesFormat Lucene.Net.Codecs.Perfield.PerFieldPostingsFormat Lucene.Net.Codecs.PostingsFormat Lucene.Net.Search.ScoreDoc SortedDocValuesField Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum Lucene.Net.Index.TieredMergePolicy Lucene.Net.Search.TopDocs class Lucene.Net.Util.TestUtil decl IList decl int decl int decl string decl char int private static < private static < < params params params foreach in if try catch return private static < private static < < params params params foreach in if try catch return public static public static public static public static if is public static public static return decl CheckIndex CheckIndex ByteArrayOutputStream public static public static decl_stmt Lucene.Net.Support.ByteArrayOutputStream = new decl_stmt Lucene.Net.Index.CheckIndex = new = = new decl_stmt System.IdentityModel.Protocols.WSTrust.Status = call Lucene.Net.Index.CheckIndex.DoCheckIndex() call Lucene.Net.Index.CheckIndex.DoCheckIndex() call Lucene.Net.Index.CheckIndex.DoCheckIndex() call Lucene.Net.Index.CheckIndex.DoCheckIndex() call Lucene.Net.Index.CheckIndex.DoCheckIndex() if == || == call Lucene.Net.Index.CheckIndex.FlushInfoStream() call Lucene.Net.Index.CheckIndex.FlushInfoStream() call Lucene.Net.Index.CheckIndex.FlushInfoStream() call Lucene.Net.Index.CheckIndex.FlushInfoStream() call Lucene.Net.Index.CheckIndex.FlushInfoStream() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() throw new else if call Lucene.Net.Index.CheckIndex.FlushInfoStream() call Lucene.Net.Index.CheckIndex.FlushInfoStream() call Lucene.Net.Index.CheckIndex.FlushInfoStream() call Lucene.Net.Index.CheckIndex.FlushInfoStream() call Lucene.Net.Index.CheckIndex.FlushInfoStream() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() return public static public static foreach in decl FieldNormStatus decl CheckIndex ByteArrayOutputStream decl Status StreamWriter decl Status decl CheckIndex public static public static decl_stmt Lucene.Net.Support.ByteArrayOutputStream = new decl_stmt System.IO.StreamWriter = new decl_stmt FieldNormStatus = decl_stmt TermIndexStatus = decl_stmt StoredFieldStatus = decl_stmt TermVectorStatus = decl_stmt DocValuesStatus = if != || != || != || != || != call System.IO.StreamWriter.Flush(bool,bool) call System.IO.StreamWriter.Flush(bool,bool) call System.IO.StreamWriter.Flush(bool,bool) call System.IO.StreamWriter.Flush(bool,bool) call System.IO.StreamWriter.Flush(bool,bool) call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() throw new else if call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() call ByteArrayOutputStream.ToString() public static public static return BigInteger BigInteger long public static public static >= decl_stmt BigInteger = + - if call BigInteger.CompareTo() call BigInteger.CompareTo() call BigInteger.CompareTo() call BigInteger.CompareTo() call BigInteger.CompareTo() <= return + int else decl_stmt BigInteger = new + - * decl_stmt long = + long >= <= return public static public static return decl char int public static public static decl_stmt int = if == return decl_stmt char = new for = < ++ = char return new decl char int public static public static decl_stmt int = if == return decl_stmt char = new for = < ++ = char return new public static public static return public static public static return decl char int public static public static decl_stmt int = if == return decl_stmt char = new return new int int int public static public static decl_stmt int = decl_stmt int = + while < decl_stmt int = if == && < - ++ = char ++ = char else if <= ++ = char else if == ++ = char else if == ++ = char else if == ++ = char public static public static return StringBuilder public static public static decl_stmt System.Text.StringBuilder = new for = > -- if call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) char else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) StringBuilder int int public static public static decl_stmt int = if == return decl_stmt System.Text.StringBuilder = new for = < ++ decl_stmt int = switch case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) for = < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) switch case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) - break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) switch case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break default: call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) string var int public static public static decl_stmt var = new decl_stmt int = while < decl_stmt string if + < && + = else = += switch case call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call string.ToUpper() call string.ToUpper() call string.ToUpper() call string.ToUpper() call string.ToUpper() break case call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call string.ToLower() call string.ToLower() call string.ToLower() call string.ToLower() call string.ToLower() break case call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() break return call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() public static public static return public static public static return StringBuilder int int public static public static decl_stmt int = decl_stmt int = decl_stmt System.Text.StringBuilder = new for = < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) decl char int int int public static public static decl_stmt char = new * decl_stmt int = decl_stmt int = for < && != ++ decl_stmt int if >= = else if >= = else if >= = else = if == = char -- else if == = char -= else if == = char -= else if == = char -= else if == ++ = char = char -= return new public static public static if + return new public override public override return public static public static if + return new public override public override return public static public static return PostingsFormat public static public static decl_stmt Lucene.Net.Codecs.PostingsFormat = if is return else return public static public static return DocValuesFormat public static public static decl_stmt Lucene.Net.Codecs.DocValuesFormat = if is return else return string public static public static decl_stmt string = if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() || call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() || call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return return decl string public static public static decl_stmt string = if > || == && ! return else return LogMergePolicy TieredMergePolicy MergePolicy MergeScheduler public static public static decl_stmt Lucene.Net.Index.MergePolicy = if is decl_stmt Lucene.Net.Index.LogMergePolicy = = = else if is decl_stmt Lucene.Net.Index.TieredMergePolicy = = = = decl_stmt Lucene.Net.Index.MergeScheduler = if is decl IDictionary decl IDictionary public static public static < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < new decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < foreach < in call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() object public public public < where where typeof public public + + = ScoreDoc ScoreDoc public static public static for = < ++ decl_stmt Lucene.Net.Search.ScoreDoc = decl_stmt Lucene.Net.Search.ScoreDoc = if is is else is Document Field Field DocValuesType_e NumericType public static public static decl_stmt Lucene.Net.Documents.Document = new foreach in decl_stmt Lucene.Net.Documents.Field = decl_stmt Lucene.Net.Documents.Field decl_stmt DocValuesType_e ? = call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() decl_stmt NumericType ? = call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() if != switch case = new call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() long break case = new call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.BinaryValue() call Lucene.Net.Documents.Field.BinaryValue() call Lucene.Net.Documents.Field.BinaryValue() call Lucene.Net.Documents.Field.BinaryValue() call Lucene.Net.Documents.Field.BinaryValue() break case = new call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.BinaryValue() call Lucene.Net.Documents.Field.BinaryValue() call Lucene.Net.Documents.Field.BinaryValue() call Lucene.Net.Documents.Field.BinaryValue() call Lucene.Net.Documents.Field.BinaryValue() break default: throw new + else if != switch case = new call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() int call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() break case = new call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() int call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() break case = new call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() int call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() break case = new call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() int call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() break default: throw new + else = new call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.Name() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Field.FieldType() call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) return Terms TermsEnum public static public static decl_stmt Lucene.Net.Index.Terms = if == return decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() if ! call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) return return DocsAndPositionsEnum int public static public static if if decl_stmt int switch case = break case = break case = break default: = | break decl_stmt DocsAndPositionsEnum = if != return |= return public static public static return new CharsRef public static public static switch case decl_stmt Lucene.Net.Util.CharsRef = new return default: return new public static public static public static public static switch case case return new case return case return case return case return default: return protected override protected override return StringBuilder char int int public static public static decl_stmt int = decl_stmt System.Text.StringBuilder = new for = < ++ decl_stmt int = - decl_stmt char = + + + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) int int StringBuilder public static public static >= if == return = decl_stmt int = decl_stmt System.Text.StringBuilder = new while < if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt int = - while < = * + = - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) StringBuilder string int public static public static if == return decl_stmt int = decl_stmt System.Text.StringBuilder = new while < if call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) : else if < call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if < call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if > = if - = - if == decl_stmt string = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) == + + + + + + + return else return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) var public static public static this this this decl_stmt var = new return