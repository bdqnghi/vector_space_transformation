Lucene.Net.Index Lucene.Net.Util using System.Collections.Generic using System.Text using Lucene.Net.Util.Bits class Lucene.Net.Index.FieldFilterAtomicReader super super FilterAtomicReader bool decl ISet FieldInfos internal internal return ^ call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() return Fields public override public override decl_stmt Lucene.Net.Index.Fields = if == return = new return call Fields.GetEnumerator() call Fields.GetEnumerator() call Fields.GetEnumerator() call Fields.GetEnumerator() call Fields.GetEnumerator() : public override public override new public override public override public override public override public override public override public override public override public override public override public override public override public override public override return : Fields decl_stmt Lucene.Net.Index.Fields = return == : new public override public override return : public override public override return : public override public override return : public override public override return : public override public override return : StringBuilder public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return - public override < public override < return new protected override protected override return public override public override return :