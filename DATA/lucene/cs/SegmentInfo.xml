Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Text using System.Text.RegularExpressions using Lucene.Net.Codecs.Codec Lucene.Net.Store.Directory Lucene.Net.Codecs.Lucene3x.Lucene3xSegmentInfoFormat Lucene.Net.Store.TrackingDirectoryWrapper class Lucene.Net.Index.SegmentInfo int string int decl ISet Codec decl IDictionary int string decl IDictionary Directory bool = return internal internal return != = return == if == throw new = return if == - throw new return if != - throw new = public override public override return StringBuilder char public public decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) == : decl_stmt char = : call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) SegmentInfo public override public override if == return if is decl_stmt Lucene.Net.Index.SegmentInfo = return == && call SegmentInfo.Name() call SegmentInfo.Name() call SegmentInfo.Name() call SegmentInfo.Name() call SegmentInfo.Name() call SegmentInfo.Name() call SegmentInfo.Name() call SegmentInfo.Name() call SegmentInfo.Name() else return public override public override return call Directory.GetHashCode() call Directory.GetHashCode() call Directory.GetHashCode() call Directory.GetHashCode() call Directory.GetHashCode() + call string.GetHashCode() call string.GetHashCode() call string.GetHashCode() call string.GetHashCode() call string.GetHashCode() = return if == throw new return = public public < call decl ISet.UnionWith() call decl ISet.UnionWith() call decl ISet.UnionWith() call decl ISet.UnionWith() call decl ISet.UnionWith() public public new call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() Regex private private < decl_stmt System.Text.RegularExpressions.Regex = foreach in if ! call System.Text.RegularExpressions.Regex.IsMatch(String,String,RegexOptions,TimeSpan) call System.Text.RegularExpressions.Regex.IsMatch(String,String,RegexOptions,TimeSpan) call System.Text.RegularExpressions.Regex.IsMatch(String,String,RegexOptions,TimeSpan) call System.Text.RegularExpressions.Regex.IsMatch(String,String,RegexOptions,TimeSpan) call System.Text.RegularExpressions.Regex.IsMatch(String,String,RegexOptions,TimeSpan) throw new + + + public public if == return else return public public if == = new < return = public < public < return