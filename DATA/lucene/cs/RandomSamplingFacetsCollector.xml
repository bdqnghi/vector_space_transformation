Lucene.Net.Facet System using System.Collections.Generic using System.IO using Lucene.Net.Facet using Lucene.Net.Search using FacetsConfig.DimConfig Lucene.Net.Index.IndexReader Lucene.Net.Index.Term Lucene.Net.Search.DocIdSetIterator Lucene.Net.Search.IndexSearcher Lucene.Net.Util.FixedBitSet class Lucene.Net.Facet.RandomSamplingFacetsCollector super super FacetsCollector int int XORShift64Random int double int decl IList int public virtual public virtual ^= << ^= ulong >> ^= << return int public virtual public virtual decl_stmt int = return < - : decl IList decl_stmt System.Collections.Generic.IList < = if == = foreach in += if <= return if == = * / = return return decl IList private < private < < decl_stmt System.Collections.Generic.IList < = new < foreach in call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return DocIdSetIterator FixedBitSet int int int int private private decl_stmt int = decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new decl_stmt int = / try decl_stmt int = decl_stmt int if != = = else = = call XORShift64Random.NextInt() call XORShift64Random.NextInt() call XORShift64Random.NextInt() call XORShift64Random.NextInt() call XORShift64Random.NextInt() decl_stmt Lucene.Net.Search.DocIdSetIterator = for = != = if == call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) ++ if >= = = = call XORShift64Random.NextInt() call XORShift64Random.NextInt() call XORShift64Random.NextInt() call XORShift64Random.NextInt() call XORShift64Random.NextInt() if == = = else = - if > = - else if < = return new catch throw new decl LabelAndValue decl string DimConfig IndexReader int int string int public virtual public virtual if == || <= return decl_stmt Lucene.Net.Facet.LabelAndValue = new decl_stmt Lucene.Net.Index.IndexReader = decl_stmt DimConfig = decl_stmt string = new + = for = < ++ + = decl_stmt string = decl_stmt int = call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() new decl_stmt int = double / = = new decl_stmt int = int if > = double / return new return