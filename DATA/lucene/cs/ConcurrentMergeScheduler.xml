Lucene.Net.Index System using System.Collections.Generic using System.Text using System.Threading using Lucene.Net.Support using Lucene.Net.Util.CollectionUtil Lucene.Net.Store.Directory class Lucene.Net.Index.ConcurrentMergeScheduler super super MergeScheduler IndexWriter decl IList int int int int decl IComparer int int bool Directory public virtual public virtual if < throw new if < throw new if > throw new + + = = return return lock return lock if > int || < int throw new + int + + int + = decl OneMerge decl MergePolicy decl MergePolicy decl OneMerge public virtual public virtual decl_stmt OneMerge = decl_stmt OneMerge = decl_stmt int = == : decl_stmt int = == : return - int int decl MergePolicy int decl OneMerge MergeThread decl IList protected internal virtual protected internal virtual lock decl_stmt System.Collections.Generic.IList < = new < decl_stmt int = while < decl_stmt MergeThread = if ! call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() continue if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() ++ decl_stmt int = decl_stmt int = for = < ++ decl_stmt MergeThread = decl_stmt OneMerge = if == continue decl_stmt bool = < - if if != if + else + if != = if ! if + + + = = int + protected internal virtual protected internal virtual return != && call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() protected internal virtual protected internal virtual call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() private private lock if == - = + int if > int = int public override public override MergeThread bool public virtual public virtual decl_stmt bool = try while decl_stmt MergeThread = lock foreach in if = break if != try call MergeThread.Join() call MergeThread.Join() call MergeThread.Join() call MergeThread.Join() call MergeThread.Join() catch = else break finally if int protected internal virtual protected internal virtual lock decl_stmt int = foreach in if && != ++ return bool decl MergePolicy long decl OneMerge public override public override lock = = if + while decl_stmt long = while && >= = if try catch throw new if if != + - + decl_stmt OneMerge = if == if return decl_stmt bool = try if + decl_stmt MergeThread = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if + + call bool.Start() call bool.Start() call bool.Start() call bool.Start() call bool.Start() = finally if ! protected internal virtual protected internal virtual call Lucene.Net.Index.IndexWriter.Merge(MergePolicy,OneMerge) call Lucene.Net.Index.IndexWriter.Merge(MergePolicy,OneMerge) call Lucene.Net.Index.IndexWriter.Merge(MergePolicy,OneMerge) call Lucene.Net.Index.IndexWriter.Merge(MergePolicy,OneMerge) call Lucene.Net.Index.IndexWriter.Merge(MergePolicy,OneMerge) MergeThread protected internal virtual protected internal virtual lock decl_stmt MergeThread = new = = = + ++ return lock = lock return lock if return else if != return else return try = catch catch decl MergePolicy public override public override decl_stmt OneMerge = try if while = = lock if != if + else break if catch if ! is if ! finally = lock protected internal virtual protected internal virtual try catch throw new throw new public virtual public virtual = public virtual public virtual = StringBuilder public override public override decl_stmt System.Text.StringBuilder = new + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) ConcurrentMergeScheduler public override public override decl_stmt Lucene.Net.Index.ConcurrentMergeScheduler = = = = new < return