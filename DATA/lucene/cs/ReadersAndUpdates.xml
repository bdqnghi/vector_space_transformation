Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Globalization using System.Linq using System.Text using Lucene.Net.Documents using Lucene.Net.Support using BinaryDocValuesField Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Codecs.Codec Lucene.Net.Store.Directory Lucene.Net.Codecs.DocValuesConsumer Lucene.Net.Codecs.DocValuesFormat Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Codecs.LiveDocsFormat Lucene.Net.Util.MutableBits NumericDocValuesField Lucene.Net.Store.TrackingDirectoryWrapper class Lucene.Net.Index.ReadersAndUpdates SegmentCommitInfo int decl IDictionary bool IndexWriter AtomicInteger Bits SegmentReader SegmentReader bool int public virtual public virtual decl_stmt int = call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() > int public virtual public virtual decl_stmt int = call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() >= int public virtual public virtual decl_stmt int = call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() >= return lock return int public virtual public virtual lock decl_stmt int if != = for = < ++ if call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() ++ else = - - == + + + + + + + return public virtual public virtual if == = new if == = call SegmentReader.IncRef() call SegmentReader.IncRef() call SegmentReader.IncRef() call SegmentReader.IncRef() call SegmentReader.IncRef() return public virtual public virtual lock if == if != call SegmentReader.IncRef() call SegmentReader.IncRef() call SegmentReader.IncRef() call SegmentReader.IncRef() call SegmentReader.IncRef() = else = new - if == = call SegmentReader.IncRef() call SegmentReader.IncRef() call SegmentReader.IncRef() call SegmentReader.IncRef() call SegmentReader.IncRef() return public virtual public virtual lock == bool public virtual public virtual lock != >= && < call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() + + + call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() + + + + ! decl_stmt bool = call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() if ++ return public virtual public virtual lock try if != try call SegmentReader.DecRef() call SegmentReader.DecRef() call SegmentReader.DecRef() call SegmentReader.DecRef() call SegmentReader.DecRef() finally = finally if != try call SegmentReader.DecRef() call SegmentReader.DecRef() call SegmentReader.DecRef() call SegmentReader.DecRef() call SegmentReader.DecRef() finally = public virtual public virtual lock if == != = if != return new - - else == call SegmentReader.IncRef() call SegmentReader.IncRef() call SegmentReader.IncRef() call SegmentReader.IncRef() call SegmentReader.IncRef() return LiveDocsFormat public virtual public virtual lock > if decl_stmt LiveDocsFormat = call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() call SegmentCommitInfo.Info() if == = call LiveDocsFormat.NewLiveDocs() call LiveDocsFormat.NewLiveDocs() call LiveDocsFormat.NewLiveDocs() call LiveDocsFormat.NewLiveDocs() call LiveDocsFormat.NewLiveDocs() else = call LiveDocsFormat.NewLiveDocs() call LiveDocsFormat.NewLiveDocs() call LiveDocsFormat.NewLiveDocs() call LiveDocsFormat.NewLiveDocs() call LiveDocsFormat.NewLiveDocs() = lock return lock = return public virtual public virtual lock = TrackingDirectoryWrapper Codec bool public virtual public virtual lock if == return call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() call Lucene.Net.Spatial.Util.Bits.Length() == decl_stmt Lucene.Net.Store.TrackingDirectoryWrapper = new decl_stmt bool = try decl_stmt Lucene.Net.Codecs.Codec = call Codec.LiveDocsFormat() call Codec.LiveDocsFormat() call Codec.LiveDocsFormat() call Codec.LiveDocsFormat() call Codec.LiveDocsFormat() = finally if ! call Lucene.Net.Index.SegmentCommitInfo.AdvanceNextWriteDelGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceNextWriteDelGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceNextWriteDelGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceNextWriteDelGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceNextWriteDelGen() foreach in try catch call Lucene.Net.Index.SegmentCommitInfo.AdvanceDelGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceDelGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceDelGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceDelGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceDelGen() = + = return long FieldInfos long DocValuesConsumer SegmentWriteState FieldInfo string Codec DocValuesFormat SegmentReader decl Builder string string DocValuesFieldUpdates TrackingDirectoryWrapper SegmentReader decl IDictionary decl IDictionary DocValuesFieldUpdates BinaryDocValuesFieldUpdates FieldInfo long bool decl FieldInfos public virtual public virtual lock decl_stmt Lucene.Net.Store.TrackingDirectoryWrapper = new decl_stmt Lucene.Net.Index.FieldInfos = decl_stmt bool = try decl_stmt Lucene.Net.Codecs.Codec = decl_stmt Lucene.Net.Index.SegmentReader = == new : try decl_stmt Lucene.Net.Util.Fst.Builder = new foreach in decl_stmt Lucene.Net.Index.FieldInfo = call decl FieldInfos.Add() call decl FieldInfos.Add() call decl FieldInfos.Add() call decl FieldInfos.Add() call decl FieldInfos.Add() if != foreach < in call decl Builder.PutAttribute() call decl Builder.PutAttribute() call decl Builder.PutAttribute() call decl Builder.PutAttribute() call decl Builder.PutAttribute() = foreach in call decl FieldInfos.AddOrUpdate() call decl FieldInfos.AddOrUpdate() call decl FieldInfos.AddOrUpdate() call decl FieldInfos.AddOrUpdate() call decl FieldInfos.AddOrUpdate() foreach in call decl FieldInfos.AddOrUpdate() call decl FieldInfos.AddOrUpdate() call decl FieldInfos.AddOrUpdate() call decl FieldInfos.AddOrUpdate() call decl FieldInfos.AddOrUpdate() = call decl FieldInfos.Finish() call decl FieldInfos.Finish() call decl FieldInfos.Finish() call decl FieldInfos.Finish() call decl FieldInfos.Finish() decl_stmt long = decl_stmt string = call FieldInfo.ToString() call FieldInfo.ToString() call FieldInfo.ToString() call FieldInfo.ToString() call FieldInfo.ToString() decl_stmt SegmentWriteState = new decl_stmt Lucene.Net.Codecs.DocValuesFormat = call Codec.DocValuesFormat() call Codec.DocValuesFormat() call Codec.DocValuesFormat() call Codec.DocValuesFormat() call Codec.DocValuesFormat() decl_stmt Lucene.Net.Codecs.DocValuesConsumer = call SegmentWriteState.FieldsConsumer() call SegmentWriteState.FieldsConsumer() call SegmentWriteState.FieldsConsumer() call SegmentWriteState.FieldsConsumer() call SegmentWriteState.FieldsConsumer() decl_stmt bool = try foreach < in decl_stmt string = decl_stmt Lucene.Net.Index.NumericDocValuesFieldUpdates = decl_stmt Lucene.Net.Index.FieldInfo = call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) != = call DocValuesFormat.AddNumericField() call DocValuesFormat.AddNumericField() call DocValuesFormat.AddNumericField() call DocValuesFormat.AddNumericField() call DocValuesFormat.AddNumericField() foreach < in decl_stmt string = decl_stmt Lucene.Net.Index.BinaryDocValuesFieldUpdates = decl_stmt Lucene.Net.Index.FieldInfo = call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) != = call DocValuesFormat.AddBinaryField() call DocValuesFormat.AddBinaryField() call DocValuesFormat.AddBinaryField() call DocValuesFormat.AddBinaryField() call DocValuesFormat.AddBinaryField() call Codec.FieldInfosFormat() call Codec.FieldInfosFormat() call Codec.FieldInfosFormat() call Codec.FieldInfosFormat() call Codec.FieldInfosFormat() = finally if call DocValuesFormat.Dispose() call DocValuesFormat.Dispose() call DocValuesFormat.Dispose() call DocValuesFormat.Dispose() call DocValuesFormat.Dispose() else finally if != call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() = finally if ! call SegmentCommitInfo.AdvanceNextWriteFieldInfosGen() call SegmentCommitInfo.AdvanceNextWriteFieldInfosGen() call SegmentCommitInfo.AdvanceNextWriteFieldInfosGen() call SegmentCommitInfo.AdvanceNextWriteFieldInfosGen() call SegmentCommitInfo.AdvanceNextWriteFieldInfosGen() foreach in try catch call Lucene.Net.Index.SegmentCommitInfo.AdvanceFieldInfosGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceFieldInfosGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceFieldInfosGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceFieldInfosGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceFieldInfosGen() if foreach < in decl_stmt Lucene.Net.Index.DocValuesFieldUpdates if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = else call DocValuesFieldUpdates.Merge() call DocValuesFieldUpdates.Merge() call DocValuesFieldUpdates.Merge() call DocValuesFieldUpdates.Merge() call DocValuesFieldUpdates.Merge() foreach < in decl_stmt Lucene.Net.Index.DocValuesFieldUpdates if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = else call DocValuesFieldUpdates.Merge() call DocValuesFieldUpdates.Merge() call DocValuesFieldUpdates.Merge() call DocValuesFieldUpdates.Merge() call DocValuesFieldUpdates.Merge() decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < < = new < < decl_stmt long = foreach in decl_stmt long = if != - && ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() if == = else = = call Lucene.Net.Index.IndexWriter.Checkpoint() call Lucene.Net.Index.IndexWriter.Checkpoint() call Lucene.Net.Index.IndexWriter.Checkpoint() call Lucene.Net.Index.IndexWriter.Checkpoint() call Lucene.Net.Index.IndexWriter.Checkpoint() if != decl_stmt Lucene.Net.Index.SegmentReader = new - - decl_stmt bool = try call SegmentReader.DecRef() call SegmentReader.DecRef() call SegmentReader.DecRef() call SegmentReader.DecRef() call SegmentReader.DecRef() = = finally if ! call long.DecRef() call long.DecRef() call long.DecRef() call long.DecRef() call long.DecRef() int Bits decl Iterator int NumericDocValues decl NumericDocValuesFieldUpdates private < ? private < ? decl_stmt int = decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt NumericDocValues = decl_stmt System.IO.Iterator = decl_stmt int = call decl NumericDocValuesFieldUpdates.NextDoc() call decl NumericDocValuesFieldUpdates.NextDoc() call decl NumericDocValuesFieldUpdates.NextDoc() call decl NumericDocValuesFieldUpdates.NextDoc() call decl NumericDocValuesFieldUpdates.NextDoc() for = < ++ if == decl_stmt long ? = long call decl NumericDocValuesFieldUpdates.Value() call decl NumericDocValuesFieldUpdates.Value() call decl NumericDocValuesFieldUpdates.Value() call decl NumericDocValuesFieldUpdates.Value() call decl NumericDocValuesFieldUpdates.Value() = call decl NumericDocValuesFieldUpdates.NextDoc() call decl NumericDocValuesFieldUpdates.NextDoc() call decl NumericDocValuesFieldUpdates.NextDoc() call decl NumericDocValuesFieldUpdates.NextDoc() call decl NumericDocValuesFieldUpdates.NextDoc() yield else if != && call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() yield call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() else yield Bits int var int BytesRef BinaryDocValues var private < private < decl_stmt BinaryDocValues = decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt int = decl_stmt var = decl_stmt int = call var.NextDoc() call var.NextDoc() call var.NextDoc() call var.NextDoc() call var.NextDoc() for = < ++ if == decl_stmt Lucene.Net.Util.BytesRef = call var.Value() call var.Value() call var.Value() call var.Value() call var.Value() = call var.NextDoc() call var.NextDoc() call var.NextDoc() call var.NextDoc() call var.NextDoc() yield else if != && call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() decl_stmt var = new call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() yield else yield internal virtual internal virtual lock = return public virtual public virtual lock call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() = lock return StringBuilder public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int)