Lucene.Net.Index Lucene.Net.Analysis.Tokenattributes using System using System.Diagnostics using Lucene.Net.Documents using Lucene.Net.Randomized.Generators using NUnit.Framework using System.IO using Lucene.Net.Analysis.Analyzer Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Lucene.Net.Search.DocIdSetIterator Documents.Document Field FieldType Lucene.Net.Util.FixedBitSet Lucene.Net.Util.IOUtils Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Util.TestUtil TextField Lucene.Net.Analysis.TokenStream class attribute Lucene.Net.Index.TestLongPostings super super LuceneTestCase Analyzer int BytesRef bool TokenStream IOException string ITermToBytesRefAttribute private private decl_stmt Lucene.Net.Analysis.Analyzer = new while decl_stmt string = if != && call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() continue decl_stmt IOException = decl_stmt Lucene.Net.Analysis.TokenStream = call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) new try decl_stmt Lucene.Net.Analysis.Tokenattributes.ITermToBytesRefAttribute = < decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() decl_stmt int = decl_stmt bool = while call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call ITermToBytesRefAttribute.FillBytesRef() call ITermToBytesRefAttribute.FillBytesRef() call ITermToBytesRefAttribute.FillBytesRef() call ITermToBytesRefAttribute.FillBytesRef() call ITermToBytesRefAttribute.FillBytesRef() if == && ! call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() = ++ call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() if ! && == return catch = finally int RandomIndexWriter int FixedBitSet int string string int bool DocsAndPositionsEnum IndexWriterConfig int int int var string int Field Document string IndexReader Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = + + decl_stmt int = if + decl_stmt string = decl_stmt string = if + + + decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new for = < ++ if call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) decl_stmt Lucene.Net.Index.IndexReader decl_stmt Lucene.Net.Index.IndexWriterConfig = new call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) + * call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) - decl_stmt Lucene.Net.Index.RandomIndexWriter = new for = < ++ decl_stmt Lucene.Net.Documents.Document = new decl_stmt string = call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) : decl_stmt Lucene.Net.Documents.Field = decl_stmt int = for = < ++ call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() new > call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() new > decl_stmt int = for = < ++ decl_stmt string decl_stmt bool if = = else = = if + + + decl_stmt DocsAndPositionsEnum = new decl_stmt int = - while < decl_stmt int = if == if + + decl_stmt int = + while if == = break else if call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) == break else ++ = call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() if + if == break if == decl_stmt int = call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() >= && <= for = < ++ call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() if decl_stmt var = if = else decl_stmt int if == - = + else = + - if + + + + decl_stmt int = while if == = break else if call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) == break else ++ = call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() call DocsAndPositionsEnum.Advance() if + if == break if == decl_stmt int = call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() >= && <= for = < ++ call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() if decl_stmt var = if = call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public virtual public virtual int RandomIndexWriter int FixedBitSet FieldType int string string int bool DocsEnum IndexWriterConfig int DocsEnum int int string int Field Document string IndexReader Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = + + decl_stmt int = if + decl_stmt string = decl_stmt string = if + + + decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new for = < ++ if call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) decl_stmt Lucene.Net.Index.IndexReader if decl_stmt Lucene.Net.Index.IndexWriterConfig = new call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) call Lucene.Net.Index.IndexWriterConfig.SetRAMBufferSizeMB(double) + * call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) - decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt Lucene.Net.Documents.FieldType = new = for = < ++ decl_stmt Lucene.Net.Documents.Document = new decl_stmt string = call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) : decl_stmt Lucene.Net.Documents.Field = decl_stmt int = for = < ++ call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() else = call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() new > call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() call IndexReader.DocFreq() new > decl_stmt int = for = < ++ decl_stmt string decl_stmt bool if = = else = = if + + + + + decl_stmt Lucene.Net.Index.DocsEnum decl_stmt Lucene.Net.Index.DocsEnum if == = new = else = = new != != decl_stmt int = - while < decl_stmt int = if == if + + decl_stmt int = + while if == = break else if call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) == break else ++ = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() if + if == break if == && != decl_stmt int = call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() >= && <= else decl_stmt int if == - = + else = + - if + + + + decl_stmt int = while if == = break else if call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) call Lucene.Net.Spatial.Util.FixedBitSet.Get(int) == break else ++ = call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() if + if == break if == && != decl_stmt int = call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() >= && <= + call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose()