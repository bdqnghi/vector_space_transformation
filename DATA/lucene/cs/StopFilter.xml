Lucene.Net.Analysis System using System.Collections.Generic using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Util using Lucene.Net.QueryParsers.QueryParser Lucene.Net.Util.Version class Lucene.Net.Analysis.StopFilter super super TokenFilter CharArraySet IPositionIncrementAttribute ITermAttribute bool public static < public static < params params params return public static < public static < < return var public static < public static < decl_stmt var = new call var.AddAll() call var.AddAll() call var.AddAll() call var.AddAll() call var.AddAll() return var public static < public static < < decl_stmt var = new foreach in call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() return int public override public override decl_stmt int = while if ! call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.CharArraySet.Contains(string) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() if = + return += return public static public static return return =