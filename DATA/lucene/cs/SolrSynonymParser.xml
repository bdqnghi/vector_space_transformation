Lucene.Net.Analysis.Synonym System using System.Collections.Generic using System.Text using System.IO.TextReader class Lucene.Net.Analysis.Synonym.SolrSynonymParser super bool ParseException LineNumberReader public override public override decl_stmt LineNumberReader = new try catch decl_stmt ParseException = new + call ParseException.initCause() call ParseException.initCause() call ParseException.initCause() call ParseException.initCause() call ParseException.initCause() throw finally call LineNumberReader.close() call LineNumberReader.close() call LineNumberReader.close() call LineNumberReader.close() call LineNumberReader.close() decl CharsRef decl CharsRef decl string decl string string decl string private private decl_stmt string = while = != if == || == continue decl_stmt Lucene.Net.Util.CharsRef decl_stmt Lucene.Net.Util.CharsRef decl_stmt string = if > if != throw new decl_stmt string = = new for = < ++ = new decl_stmt string = = new for = < ++ = new else decl_stmt string = = new for = < ++ = new if = else = new = for = < ++ for = < ++ StringBuilder char decl List int private static private static decl_stmt System.Collections.Generic.List < = new < decl_stmt System.Text.StringBuilder = new decl_stmt int = = while < if if > call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) = new += continue decl_stmt char = ++ if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if >= break = ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if > call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) return call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() StringBuilder char private private if >= decl_stmt System.Text.StringBuilder = new for = < ++ decl_stmt char = if == && < - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) ++ else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) return