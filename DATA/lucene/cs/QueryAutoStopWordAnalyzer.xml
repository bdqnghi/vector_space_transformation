Lucene.Net.Analysis.Query System using System.Collections.Generic using System.IO using System.Linq using System.Text using Lucene.Net.Index using Lucene.Net.Support using Lucene.Net.Util using Lucene.Net.Util.Version class Lucene.Net.Analysis.Query.QueryAutoStopWordAnalyzer super super Analyzer float Version decl HashMap Analyzer public public return String decl ICollection int public public decl_stmt int = decl_stmt System.Collections.Generic.ICollection < = for < = call decl ICollection.GetEnumerator() call decl ICollection.GetEnumerator() call decl ICollection.GetEnumerator() call decl ICollection.GetEnumerator() call decl ICollection.GetEnumerator() decl_stmt System.String = += return String decl ICollection int public public decl_stmt int = decl_stmt System.Collections.Generic.ICollection < = for < = call decl ICollection.GetEnumerator() call decl ICollection.GetEnumerator() call decl ICollection.GetEnumerator() call decl ICollection.GetEnumerator() call decl ICollection.GetEnumerator() decl_stmt System.String = += return public public return * var TermEnum Term String decl IDictionary public public decl_stmt var = < decl_stmt System.String = decl_stmt Lucene.Net.Index.TermEnum = new decl_stmt Lucene.Net.Index.Term = while != if != break if call TermEnum.DocFreq() call TermEnum.DocFreq() call TermEnum.DocFreq() call TermEnum.DocFreq() call TermEnum.DocFreq() > call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if ! call TermEnum.Next() call TermEnum.Next() call TermEnum.Next() call TermEnum.Next() call TermEnum.Next() break = call decl HashMap.Add() call decl HashMap.Add() call decl HashMap.Add() call decl HashMap.Add() call decl HashMap.Add() decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = < if != call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() return var TokenStream public override public override decl_stmt Lucene.Net.Analysis.TokenStream try = call Analyzer.ReusableTokenStream() call Analyzer.ReusableTokenStream() call Analyzer.ReusableTokenStream() call Analyzer.ReusableTokenStream() call Analyzer.ReusableTokenStream() catch = call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) decl_stmt var = if != = new return var decl IDictionary SavedStreams TokenStream public override public override if return decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = < if == = new < = decl_stmt SavedStreams = if == = new call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() = call Analyzer.ReusableTokenStream() call Analyzer.ReusableTokenStream() call Analyzer.ReusableTokenStream() call Analyzer.ReusableTokenStream() call Analyzer.ReusableTokenStream() decl_stmt var = if != = new else = else decl_stmt Lucene.Net.Analysis.TokenStream = call Analyzer.ReusableTokenStream() call Analyzer.ReusableTokenStream() call Analyzer.ReusableTokenStream() call Analyzer.ReusableTokenStream() call Analyzer.ReusableTokenStream() if == call SavedStreams.WithStopFilter() call SavedStreams.WithStopFilter() call SavedStreams.WithStopFilter() call SavedStreams.WithStopFilter() call SavedStreams.WithStopFilter() call SavedStreams.WithStopFilter() call SavedStreams.WithStopFilter() call SavedStreams.WithStopFilter() call SavedStreams.WithStopFilter() else = decl_stmt var = if != = new else = return var decl String public public decl_stmt System.String decl_stmt var = if != = call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() else = new return decl List var public public decl_stmt System.Collections.Generic.List < = new < foreach in decl_stmt var = foreach in call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new return call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray()