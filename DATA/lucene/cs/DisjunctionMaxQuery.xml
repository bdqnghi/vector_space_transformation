Lucene.Net.Search System using System.Collections.Generic using System.Linq using System.Text using Lucene.Net.Support using System.Collections using Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.Bits Lucene.Net.Index.IndexReader Lucene.Net.Index.Term class Lucene.Net.Search.DisjunctionMaxQuery super super Query decl EquatableList float public virtual public virtual call decl EquatableList.Add() call decl EquatableList.Add() call decl EquatableList.Add() call decl EquatableList.Add() call decl EquatableList.Add() public virtual public virtual < public virtual < public virtual < return call decl EquatableList.GetEnumerator() call decl EquatableList.GetEnumerator() call decl EquatableList.GetEnumerator() call decl EquatableList.GetEnumerator() call decl EquatableList.GetEnumerator() return return return return float float float decl_stmt float = = foreach in decl_stmt float = += = decl_stmt float = return - * * + * * public override public override *= foreach in Scorer decl IList DisjunctionMaxScorer public override public override decl_stmt System.Collections.Generic.IList < = new < foreach in decl_stmt Lucene.Net.Search.Scorer = if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if == return decl_stmt Lucene.Net.Search.DisjunctionMaxScorer = new call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() return float Explanation ComplexExplanation public override public override if == return decl_stmt Lucene.Net.Search.ComplexExplanation = new decl_stmt float = = = == : + + foreach in decl_stmt Lucene.Net.Search.Explanation = if = call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() += = = + - * return public override public override return new Query Query Query DisjunctionMaxQuery Query int public override public override decl_stmt int = if == decl_stmt Lucene.Net.Search.Query = decl_stmt Lucene.Net.Search.Query = call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) if != if == = call Lucene.Net.Search.Query.Clone() call Lucene.Net.Search.Query.Clone() call Lucene.Net.Search.Query.Clone() call Lucene.Net.Search.Query.Clone() call Lucene.Net.Search.Query.Clone() = * return decl_stmt Lucene.Net.Search.DisjunctionMaxQuery = for = < ++ decl_stmt Lucene.Net.Search.Query = decl_stmt Lucene.Net.Search.Query = call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) if != if == = = if != return else return DisjunctionMaxQuery public override public override decl_stmt Lucene.Net.Search.DisjunctionMaxQuery = = < return public override public override < foreach in StringBuilder Query int public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt int = for = < ++ decl_stmt Lucene.Net.Search.Query = if is call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call Query.ToString() call Query.ToString() call Query.ToString() call Query.ToString() call Query.ToString() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call Query.ToString() call Query.ToString() call Query.ToString() call Query.ToString() call Query.ToString() if != - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) DisjunctionMaxQuery public override public override if ! is return decl_stmt Lucene.Net.Search.DisjunctionMaxQuery = return == && == && public override public override return + + call decl EquatableList.GetHashCode() call decl EquatableList.GetHashCode() call decl EquatableList.GetHashCode() call decl EquatableList.GetHashCode() call decl EquatableList.GetHashCode()