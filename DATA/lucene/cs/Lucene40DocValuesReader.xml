Lucene.Net.Codecs.Lucene40 System using System.Collections.Generic using Lucene.Net.Support using Lucene.Net.Index.BinaryDocValues Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Store.CompoundFileDirectory Lucene.Net.Index.CorruptIndexException Lucene.Net.Store.Directory Lucene.Net.Index.FieldInfo Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexInput Lucene.Net.Util.IOUtils Lucene.Net.Codecs.Lucene40.Lucene40FieldInfosReader.LegacyDocValuesType Lucene.Net.Index.NumericDocValues Lucene.Net.Util.Packed.PackedInts Lucene.Net.Util.PagedBytes Lucene.Net.Util.RamUsageEstimator Lucene.Net.Index.SegmentReadState Lucene.Net.Index.SortedDocValues Lucene.Net.Index.SortedSetDocValues class attribute Lucene.Net.Codecs.Lucene40.Lucene40DocValuesReader super super DocValuesProducer string AtomicLong decl IDictionary SegmentReadState decl IDictionary decl IDictionary string Directory NumericDocValues var IndexInput bool string public override public override lock decl_stmt NumericDocValues if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out decl_stmt string = + + decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() decl_stmt bool = try decl_stmt var = if == = else if == = else if == = else if == = else if == = else if == = else if == = else throw new = finally if else = return int long long var var decl PackedInts private private decl_stmt var = sbyte if == decl_stmt int = decl_stmt var = new for = < ++ = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return new else if == decl_stmt long = decl_stmt long = decl_stmt Reader = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() return new else throw new + + + + public override public override return long public override public override decl_stmt long = if == return else return + int var int private private decl_stmt int = if != throw new + decl_stmt int = decl_stmt var = new call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return new public override public override return sbyte int decl short int private private decl_stmt int = if != throw new + decl_stmt int = decl_stmt short = new for = < ++ = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return new public override public override return int var int private private decl_stmt int = if != throw new + decl_stmt int = decl_stmt var = new for = < ++ = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return new public override public override return int decl long int private private decl_stmt int = if != throw new + decl_stmt int = decl_stmt long = new for = < ++ = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return new public override public override return int decl int int private private decl_stmt int = if != throw new + decl_stmt int = decl_stmt int = new for = < ++ = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return new public override public override return int decl long int private private decl_stmt int = if != throw new + decl_stmt int = decl_stmt long = new for = < ++ = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return new public override public override return BinaryDocValues var public override public override lock decl_stmt BinaryDocValues if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out decl_stmt var = if == = else if == = else if == = else if == = else throw new = return int bool var string decl PagedBytes IndexInput private private decl_stmt string = + + decl_stmt Lucene.Net.Store.IndexInput = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() decl_stmt bool = try decl_stmt int = call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() decl_stmt var = new call var.Copy() call var.Copy() call var.Copy() call var.Copy() call var.Copy() * long decl_stmt Reader = call var.Freeze() call var.Freeze() call var.Freeze() call var.Freeze() call var.Freeze() = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() return new finally if else public override public override * long IndexInput string bool long decl Reader PagedBytes string decl PagedBytes IndexInput private private decl_stmt string = + + decl_stmt string = + + decl_stmt Lucene.Net.Store.IndexInput = decl_stmt Lucene.Net.Store.IndexInput = decl_stmt bool = try = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() decl_stmt long = call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() call IndexInput.ReadVLong() decl_stmt Lucene.Net.Util.PagedBytes = new call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) decl_stmt Reader = call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) decl_stmt Reader = = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() + call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() return new finally if else long long public override public override decl_stmt long = decl_stmt long = + - int string bool IndexInput decl Reader PagedBytes string int decl PagedBytes IndexInput private private decl_stmt string = + + decl_stmt string = + + decl_stmt Lucene.Net.Store.IndexInput = decl_stmt Lucene.Net.Store.IndexInput = decl_stmt bool = try = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() decl_stmt int = call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() decl_stmt int = call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() call IndexInput.ReadInt() decl_stmt Lucene.Net.Util.PagedBytes = new call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) * long decl_stmt Reader = call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) decl_stmt Reader = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() + call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() = return new finally if else long public override public override decl_stmt long = * IndexInput string bool long decl Reader PagedBytes string decl PagedBytes IndexInput private private decl_stmt string = + + decl_stmt string = + + decl_stmt Lucene.Net.Store.IndexInput = decl_stmt Lucene.Net.Store.IndexInput = decl_stmt bool = try = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() decl_stmt long = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() decl_stmt Lucene.Net.Util.PagedBytes = new call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) decl_stmt Reader = call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) decl_stmt Reader = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() + call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() = return new finally if else long int var BytesRef public override public override decl_stmt long = decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt var = if & == + int else + decl_stmt int = & << | & + IndexInput string bool string var SortedDocValues IndexInput public override public override lock decl_stmt Lucene.Net.Index.SortedDocValues if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out decl_stmt string = + + decl_stmt string = + + decl_stmt Lucene.Net.Store.IndexInput = decl_stmt Lucene.Net.Store.IndexInput = decl_stmt bool = try = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() = call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() decl_stmt var = if == = else if == = else throw new = finally if else = return int int decl Reader PagedBytes decl PagedBytes private private decl_stmt int = decl_stmt int = decl_stmt Lucene.Net.Util.PagedBytes = new call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) * long decl_stmt Reader = call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) decl_stmt Reader = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() + call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() return new public override public override return int public override public override * long return decl PackedInts long PagedBytes decl Reader decl Reader decl PagedBytes private private decl_stmt long = decl_stmt Lucene.Net.Util.PagedBytes = new call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) decl_stmt Reader = call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) decl_stmt Reader = decl_stmt Reader = decl_stmt int = call decl Reader.Size() call decl Reader.Size() call decl Reader.Size() call decl Reader.Size() call decl Reader.Size() - call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() call Lucene.Net.Util.PagedBytes.RamBytesUsed() + call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() call decl Reader.RamBytesUsed() + call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() call decl PackedInts.RamBytesUsed() return new public override public override return int long long public override public override decl_stmt long = decl_stmt long = + - return int private private decl_stmt int = for = < ++ if == return return new public override public override return - public override public override + return - public override public override throw new public override public override return new protected override protected override if call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public override public override return call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() public override public override