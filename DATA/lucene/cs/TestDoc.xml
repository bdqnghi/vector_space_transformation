Lucene.Net.Index Lucene.Net.Documents using Lucene.Net.Support using System using System.Collections.Generic using NUnit.Framework using System.IO using Lucene.Net.Codecs.Codec Lucene.Net.Util.Constants Lucene.Net.Store.Directory Lucene.Net.Search.DocIdSetIterator Documents.Document Lucene.Net.Util.InfoStream Lucene.Net.Store.IOContext Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Store.MockDirectoryWrapper Lucene.Net.Index.IndexWriterConfig.OpenMode_e TextField Lucene.Net.Store.TrackingDirectoryWrapper class attribute Lucene.Net.Index.TestDoc super super LuceneTestCase decl LinkedList DirectoryInfo DirectoryInfo Directory public override public override if = = decl_stmt Lucene.Net.Store.Directory = call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() = new < call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() StreamWriter FileInfo private private decl_stmt System.IO.StreamWriter = try decl_stmt System.IO.FileInfo = new if call System.IO.FileInfo.Delete() call System.IO.FileInfo.Delete() call System.IO.FileInfo.Delete() call System.IO.FileInfo.Delete() call System.IO.FileInfo.Delete() = new call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) call System.IO.StreamWriter.WriteLine(string) return finally if != call System.IO.StreamWriter.Dispose(bool) call System.IO.StreamWriter.Dispose(bool) call System.IO.StreamWriter.Dispose(bool) call System.IO.StreamWriter.Dispose(bool) call System.IO.StreamWriter.Dispose(bool) SegmentCommitInfo SegmentCommitInfo SegmentCommitInfo string string IndexWriter MemoryStream MockDirectoryWrapper Directory SegmentCommitInfo SegmentCommitInfo StreamWriter public virtual public virtual decl_stmt System.IO.MemoryStream = new decl_stmt System.IO.StreamWriter = new decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Store.MockDirectoryWrapper = as if != = decl_stmt Lucene.Net.Index.IndexWriter = new new - decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt Lucene.Net.Index.SegmentCommitInfo = call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt Lucene.Net.Index.SegmentCommitInfo = call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call System.IO.StreamWriter.Dispose(bool) call System.IO.StreamWriter.Dispose(bool) call System.IO.StreamWriter.Dispose(bool) call System.IO.StreamWriter.Dispose(bool) call System.IO.StreamWriter.Dispose(bool) call System.IO.MemoryStream.Dispose(bool) call System.IO.MemoryStream.Dispose(bool) call System.IO.MemoryStream.Dispose(bool) call System.IO.MemoryStream.Dispose(bool) call System.IO.MemoryStream.Dispose(bool) decl_stmt string = call MemoryStream.ToString() call MemoryStream.ToString() call MemoryStream.ToString() call MemoryStream.ToString() call MemoryStream.ToString() = new = new = = as if != = = new new - = = call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) = = = call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call System.IO.StreamWriter.Dispose(bool) call System.IO.StreamWriter.Dispose(bool) call System.IO.StreamWriter.Dispose(bool) call System.IO.StreamWriter.Dispose(bool) call System.IO.StreamWriter.Dispose(bool) call System.IO.MemoryStream.Dispose(bool) call System.IO.MemoryStream.Dispose(bool) call System.IO.MemoryStream.Dispose(bool) call System.IO.MemoryStream.Dispose(bool) call System.IO.MemoryStream.Dispose(bool) decl_stmt string = call MemoryStream.ToString() call MemoryStream.ToString() call MemoryStream.ToString() call MemoryStream.ToString() call MemoryStream.ToString() Document StreamReader FileInfo private private decl_stmt System.IO.FileInfo = new decl_stmt Lucene.Net.Documents.Document = new decl_stmt System.IO.StreamReader = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new call System.IO.StreamReader.Dispose(bool) call System.IO.StreamReader.Dispose(bool) call System.IO.StreamReader.Dispose(bool) call System.IO.StreamReader.Dispose(bool) call System.IO.StreamReader.Dispose(bool) return SegmentInfo SegmentReader SegmentReader SegmentMerger decl ICollection TrackingDirectoryWrapper MergeState SegmentInfo Codec IOContext private private decl_stmt Lucene.Net.Store.IOContext = decl_stmt Lucene.Net.Index.SegmentReader = new decl_stmt Lucene.Net.Index.SegmentReader = new decl_stmt Lucene.Net.Codecs.Codec = decl_stmt Lucene.Net.Store.TrackingDirectoryWrapper = new decl_stmt Lucene.Net.Index.SegmentInfo = new - decl_stmt Lucene.Net.Index.SegmentMerger = new < new decl_stmt Lucene.Net.Index.MergeState = call Lucene.Net.Index.SegmentMerger.Merge() call Lucene.Net.Index.SegmentMerger.Merge() call Lucene.Net.Index.SegmentMerger.Merge() call Lucene.Net.Index.SegmentMerger.Merge() call Lucene.Net.Index.SegmentMerger.Merge() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() decl_stmt Lucene.Net.Index.SegmentInfo = new + = new < if decl_stmt System.Collections.Generic.ICollection < = = foreach in return new - - Fields DocsAndPositionsEnum TermsEnum Terms SegmentReader private private decl_stmt Lucene.Net.Index.SegmentReader = new for = < ++ call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) call Lucene.Net.Index.SegmentReader.Document(int,StoredFieldVisitor) decl_stmt Lucene.Net.Index.Fields = foreach in decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() while call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != + + + call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() + call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() decl_stmt DocsAndPositionsEnum = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) while call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() != + call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() call DocsAndPositionsEnum.DocID() + call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() for = < call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() ++ + call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose() call SegmentReader.Dispose()