Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Linq using System.Threading using System.Threading.Tasks using Lucene.Net.Documents using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using System.IO using Lucene.Net.Store.BaseDirectoryWrapper Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Documents.Document Lucene.Net.Util.FailOnNonBulkMergesInfoStream Field Lucene.Net.Search.IndexSearcher Lucene.Net.Util.LineFileDocs Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Search.PhraseQuery Lucene.Net.Util.PrintStreamInfoStream Lucene.Net.Search.Query Lucene.Net.Search.ScoreDoc Lucene.Net.Search.Sort Lucene.Net.Search.SortField Lucene.Net.Search.TermQuery Lucene.Net.Util.TestUtil Lucene.Net.Search.TopDocs class Lucene.Net.Index.ThreadedIndexingAndSearchingTestCase super super LuceneTestCase AtomicInteger decl IDictionary AtomicInteger bool IndexWriter AtomicBoolean AtomicInteger Directory protected internal virtual protected internal virtual protected internal virtual protected internal virtual return protected internal virtual protected internal virtual < < call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) protected internal virtual protected internal virtual < < call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) protected internal virtual protected internal virtual < call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) protected internal virtual protected internal virtual < call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) protected internal virtual protected internal virtual call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) protected internal virtual protected internal virtual decl ThreadClass private private < < < decl_stmt Lucene.Net.Support.ThreadClass = new for = < ++ = new return Term int string string Document string decl IList decl IList Field int decl IList SubDocs SubDocs decl IList public override public override decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < while < && ! try if && == if + if == if + decl_stmt Lucene.Net.Documents.Document = if == break decl_stmt string if = + call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) else = if if decl_stmt string decl_stmt SubDocs if > && = ! call decl IList.Remove() call decl IList.Remove() call decl IList.Remove() call decl IList.Remove() call decl IList.Remove() = else = = + decl_stmt Lucene.Net.Documents.Field = decl_stmt System.Collections.Generic.IList < = new < decl_stmt SubDocs = new decl_stmt System.Collections.Generic.IList < = new < call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) decl_stmt int = while < = if == break call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) decl_stmt Lucene.Net.Index.Term = new if != = if + + + + + + else if + + + + + + call Lucene.Net.Documents.Document.RemoveField(string) call Lucene.Net.Documents.Document.RemoveField(string) call Lucene.Net.Documents.Document.RemoveField(string) call Lucene.Net.Documents.Document.RemoveField(string) call Lucene.Net.Documents.Document.RemoveField(string) if == if + + call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() else decl_stmt string = call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) if + + new if == if + + call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() else if + + call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) decl_stmt string = call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) new if == if + + call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if == if + + + foreach in if + + new decl_stmt int = if + + + call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() foreach in ! new = if + + + + call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() if != call Lucene.Net.Documents.Document.RemoveField(string) call Lucene.Net.Documents.Document.RemoveField(string) call Lucene.Net.Documents.Document.RemoveField(string) call Lucene.Net.Documents.Document.RemoveField(string) call Lucene.Net.Documents.Document.RemoveField(string) catch + throw new if + AtomicInteger int decl ThreadClass AtomicInteger protected internal virtual protected internal virtual decl_stmt int = decl_stmt Lucene.Net.Support.ThreadClass = new decl_stmt Lucene.Net.Support.AtomicInteger = new decl_stmt Lucene.Net.Support.AtomicInteger = new for = < ++ = new for = < ++ if + BytesRef Terms TermsEnum Fields string IndexSearcher int decl IDictionary int int SegmentReader public override public override if + while < try decl_stmt Lucene.Net.Search.IndexSearcher = try foreach in decl_stmt Lucene.Net.Index.SegmentReader = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = decl_stmt string = if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() ! || + + + + + + + if > decl_stmt Lucene.Net.Index.Fields = if == continue decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() if == continue decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt int = decl_stmt int decl_stmt int if < = = else = / = while < decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() if == break ++ if + == new new finally catch + throw new protected internal virtual protected internal virtual protected internal virtual protected internal virtual decl ISet Random string bool IndexWriterConfig TaskScheduler int int DateTime int MergePolicy int LineFileDocs decl IList MockAnalyzer DirectoryInfo decl ThreadClass TopDocs int int Document DateTime IndexSearcher decl ISet public virtual public virtual call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) decl_stmt DateTime = decl_stmt System.Random = new decl_stmt Lucene.Net.Util.LineFileDocs = new decl_stmt System.IO.DirectoryInfo = = if is = decl_stmt Lucene.Net.Analysis.MockAnalyzer = new = decl_stmt Lucene.Net.Index.IndexWriterConfig = new if decl_stmt Lucene.Net.Index.MergePolicy = if is = else if is = else if is = call Lucene.Net.Index.IndexWriterConfig.SetMergedSegmentWarmer(IndexReaderWarmer) call Lucene.Net.Index.IndexWriterConfig.SetMergedSegmentWarmer(IndexReaderWarmer) call Lucene.Net.Index.IndexWriterConfig.SetMergedSegmentWarmer(IndexReaderWarmer) call Lucene.Net.Index.IndexWriterConfig.SetMergedSegmentWarmer(IndexReaderWarmer) call Lucene.Net.Index.IndexWriterConfig.SetMergedSegmentWarmer(IndexReaderWarmer) new if = new = new decl_stmt System.Threading.Tasks.TaskScheduler = decl_stmt int = decl_stmt int = : decl_stmt System.Collections.Generic.ISet < = new < new < decl_stmt System.Collections.Generic.ISet < = new < new < decl_stmt System.Collections.Generic.IList < = new < decl_stmt DateTime = decl_stmt Lucene.Net.Support.ThreadClass = if + + + - + if + - + for = < ++ if + - + + + + decl_stmt Lucene.Net.Search.IndexSearcher = if + call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() decl_stmt bool = foreach in decl_stmt Lucene.Net.Search.TopDocs = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new if != + + + + + = foreach in decl_stmt Lucene.Net.Search.TopDocs = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new if != + + + + = foreach in call decl IList.ToList() call decl IList.ToList() call decl IList.ToList() call decl IList.ToList() call decl IList.ToList() decl_stmt Lucene.Net.Search.TopDocs = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new if ! if != + + + + + = else decl_stmt int = - decl_stmt int = - foreach in decl_stmt int = if != - + else = = decl_stmt Lucene.Net.Documents.Document = call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) call Lucene.Net.Documents.Document.Get(string) = - foreach in = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new decl_stmt int = if != - + = else foreach in call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new decl_stmt int = call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() for = < ++ decl_stmt string = + if ! call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() decl_stmt Lucene.Net.Search.TopDocs = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new if != + + + + + call decl ISet.ToArray() call decl ISet.ToArray() call decl ISet.ToArray() call decl ISet.ToArray() call decl ISet.ToArray() = call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() - call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() + call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.SegString() + + + + call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() - call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.NumDocs() + call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.SegString() call Lucene.Net.Index.IndexWriter.SegString() + + + + call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() if + - + IndexSearcher int Bits Document int int public override public override if + = decl_stmt int = decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt int = decl_stmt int = / for = < += if == || call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() decl_stmt Lucene.Net.Documents.Document = += decl_stmt Lucene.Net.Search.IndexSearcher = += call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new if + + public override public override if return Sort int int private private decl_stmt int = new new if decl_stmt Lucene.Net.Search.Sort = new new decl_stmt int = return PhraseQuery protected internal virtual protected internal virtual new new new new decl_stmt Lucene.Net.Search.PhraseQuery = new call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) new call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) call Lucene.Net.Search.PhraseQuery.Add(Term) new