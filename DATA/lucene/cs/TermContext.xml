Lucene.Net.Index System.Diagnostics using Lucene.Net.Support using Lucene.Net.Util.BytesRef class Lucene.Net.Index.TermContext decl TermState long IndexReaderContext int Terms TermsEnum Fields TermContext BytesRef string TermState public static public static != && decl_stmt string = decl_stmt Lucene.Net.Util.BytesRef = decl_stmt Lucene.Net.Index.TermContext = new foreach in decl_stmt Lucene.Net.Index.Fields = if != decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() if != decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) decl_stmt Lucene.Net.Index.TermState = call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermContext.Register(TermState,int,int,long) call Lucene.Net.Index.TermContext.Register(TermState,int,int,long) call Lucene.Net.Index.TermContext.Register(TermState,int,int,long) call Lucene.Net.Index.TermContext.Register(TermState,int,int,long) call Lucene.Net.Index.TermContext.Register(TermState,int,int,long) call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() return public public = public public != >= && < == + + += if >= && >= += else = - = public public >= && < return public public return = return