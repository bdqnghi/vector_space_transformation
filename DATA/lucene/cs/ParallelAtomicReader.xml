Lucene.Net.Index Lucene.Net.Support using System.Collections.Generic using System.Text using System.IO using Lucene.Net.Util.Bits class Lucene.Net.Index.ParallelAtomicReader super super AtomicReader bool bool decl ISet FieldInfos decl AtomicReader decl IDictionary bool decl IDictionary ParallelFields int private private = new StringBuilder bool public override public override decl_stmt System.Text.StringBuilder = new decl_stmt bool = foreach in call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = if call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) - return call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) internal internal = public override < public override < return Terms public override public override decl_stmt Lucene.Net.Index.Terms out return return return return : return return return public override public override foreach in ParallelFields Terms string public override public override decl_stmt ParallelFields = foreach < in decl_stmt string = decl_stmt Lucene.Net.Index.Terms = if != if == = new call ParallelFields.AddField() call ParallelFields.AddField() call ParallelFields.AddField() call ParallelFields.AddField() call ParallelFields.AddField() return IOException protected internal override protected internal override lock decl_stmt IOException = foreach in try if else catch if == = if != throw AtomicReader public override public override decl_stmt Lucene.Net.Index.AtomicReader return out call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() call AtomicReader.GetNumericDocValues() : AtomicReader public override public override decl_stmt Lucene.Net.Index.AtomicReader return out call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() call AtomicReader.GetBinaryDocValues() : AtomicReader public override public override decl_stmt Lucene.Net.Index.AtomicReader return out call AtomicReader.GetSortedDocValues() call AtomicReader.GetSortedDocValues() call AtomicReader.GetSortedDocValues() call AtomicReader.GetSortedDocValues() call AtomicReader.GetSortedDocValues() : AtomicReader public override public override decl_stmt Lucene.Net.Index.AtomicReader return out call AtomicReader.GetSortedSetDocValues() call AtomicReader.GetSortedSetDocValues() call AtomicReader.GetSortedSetDocValues() call AtomicReader.GetSortedSetDocValues() call AtomicReader.GetSortedSetDocValues() : AtomicReader public override public override decl_stmt Lucene.Net.Index.AtomicReader return out call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() call AtomicReader.GetDocsWithField() : NumericDocValues AtomicReader public override public override decl_stmt Lucene.Net.Index.AtomicReader decl_stmt NumericDocValues = if out = call AtomicReader.GetNormValues() call AtomicReader.GetNormValues() call AtomicReader.GetNormValues() call AtomicReader.GetNormValues() call AtomicReader.GetNormValues() return public override public override foreach in