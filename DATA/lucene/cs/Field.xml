Lucene.Net.Documents System using System.IO using System.Text using Lucene.Net.Analysis using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Index using Lucene.Net.Support using Lucene.Net.Util using class Lucene.Net.Documents.Field super super IndexableField TokenStream object float string TokenStream FieldType public virtual public virtual return return == : call object.ToString() call object.ToString() call object.ToString() call object.ToString() call object.ToString() if ! is throw new + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() + = return is : if ! is throw new + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() + = if ! is throw new + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() + if throw new = if ! is sbyte throw new + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() + = if ! is short throw new + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() + = if ! is int throw new + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() + = if ! is long throw new + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() + = if ! is float throw new + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() + = if ! is double throw new + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() + = if ! || ! throw new if != throw new = public public return public public return if != if == || throw new = long string decl_stmt string = as string if != decl_stmt long if out return if is int || is float || is double || is long return return public public if is return else return StringBuilder public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call Lucene.Net.Documents.FieldType.ToString() call Lucene.Net.Documents.FieldType.ToString() call Lucene.Net.Documents.FieldType.ToString() call Lucene.Net.Documents.FieldType.ToString() call Lucene.Net.Documents.FieldType.ToString() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public public return object decl FieldType decl NumericType var public public if ! return decl_stmt NumericType ? = if != if ! is = new decl_stmt var = decl_stmt object = switch case call decl NumericType.SetIntValue() call decl NumericType.SetIntValue() call decl NumericType.SetIntValue() call decl NumericType.SetIntValue() call decl NumericType.SetIntValue() break case call decl NumericType.SetLongValue() call decl NumericType.SetLongValue() call decl NumericType.SetLongValue() call decl NumericType.SetLongValue() call decl NumericType.SetLongValue() break case call decl NumericType.SetFloatValue() call decl NumericType.SetFloatValue() call decl NumericType.SetFloatValue() call decl NumericType.SetFloatValue() call decl NumericType.SetFloatValue() break case call decl NumericType.SetDoubleValue() call decl NumericType.SetDoubleValue() call decl NumericType.SetDoubleValue() call decl NumericType.SetDoubleValue() call decl NumericType.SetDoubleValue() break default: throw new return if ! if == throw new if ! is = new = return if != return else if != return else if != decl_stmt System.IO.TextReader = new return throw new + internal internal = < = < = public override public override if return = return int public override public override decl_stmt int = public override public override = public public if =