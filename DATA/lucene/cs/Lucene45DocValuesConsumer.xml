Lucene.Net.Codecs.Lucene45 System using System.Collections using System.Collections.Generic using System.Diagnostics using System.Linq using Lucene.Net.Util.Packed.BlockPackedWriter Lucene.Net.Util.BytesRef Lucene.Net.Index.FieldInfo Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexOutput Lucene.Net.Util.IOUtils Lucene.Net.Util.MathUtil Lucene.Net.Util.Packed.MonotonicBlockPackedWriter Lucene.Net.Util.Packed.PackedInts Lucene.Net.Store.RAMOutputStream Lucene.Net.Index.SegmentWriteState Lucene.Net.Util.StringHelper class Lucene.Net.Codecs.Lucene45.Lucene45DocValuesConsumer super super DocValuesConsumer super IDisposable int int long int int int int int int int int IndexOutput int public override public override < ? long BlockPackedWriter BlockPackedWriter long bool int long long long long decl long int decl HashSet long decl Dictionary decl PackedInts internal virtual internal virtual < ? decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt bool = decl_stmt System.Collections.Generic.HashSet < = if = new < foreach ? in decl_stmt long if == = = else = if != if < / || / || / = else if != = - = = if != if call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() if > = ++ else foreach in ++ decl_stmt long = - decl_stmt int if != && < || - < && <= = else if != && != = else = call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() if call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() else call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() - call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() switch case call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() decl_stmt Lucene.Net.Util.Packed.BlockPackedWriter = new foreach ? in decl_stmt long = == : call BlockPackedWriter.Add() call BlockPackedWriter.Add() call BlockPackedWriter.Add() call BlockPackedWriter.Add() call BlockPackedWriter.Add() - / call BlockPackedWriter.Finish() call BlockPackedWriter.Finish() call BlockPackedWriter.Finish() call BlockPackedWriter.Finish() call BlockPackedWriter.Finish() break case decl_stmt Lucene.Net.Util.Packed.BlockPackedWriter = new foreach ? in call BlockPackedWriter.Add() call BlockPackedWriter.Add() call BlockPackedWriter.Add() call BlockPackedWriter.Add() call BlockPackedWriter.Add() == : call BlockPackedWriter.Finish() call BlockPackedWriter.Finish() call BlockPackedWriter.Finish() call BlockPackedWriter.Finish() call BlockPackedWriter.Finish() break case decl_stmt long = call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() decl_stmt org.apache.lucene.analysis.hunspell.Dictionary < = new < call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() for = < ++ call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() = decl_stmt int = - decl_stmt Writer = int foreach ? in call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() == : call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() break default: throw new int sbyte internal virtual internal virtual decl_stmt sbyte = decl_stmt int = foreach in if == call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() byte = = if != |= << & ++ if > call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() byte long long bool int MonotonicBlockPackedWriter int int long public override public override < call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte decl_stmt int = decl_stmt int = decl_stmt long = decl_stmt long = decl_stmt bool = foreach in decl_stmt int if == = = else = = = if != call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() ++ call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() == : if call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() else call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() - call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() if != call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() decl_stmt Lucene.Net.Util.Packed.MonotonicBlockPackedWriter = new decl_stmt long = foreach in if != += call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Finish() call MonotonicBlockPackedWriter.Finish() call MonotonicBlockPackedWriter.Finish() call MonotonicBlockPackedWriter.Finish() call MonotonicBlockPackedWriter.Finish() long int int BytesRef RAMOutputStream long MonotonicBlockPackedWriter int long protected internal virtual protected internal virtual < decl_stmt int = decl_stmt int = foreach in = = if == else call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() - decl_stmt long = decl_stmt Lucene.Net.Store.RAMOutputStream = new decl_stmt Lucene.Net.Util.Packed.MonotonicBlockPackedWriter = new decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt long = foreach in if == call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Add() call MonotonicBlockPackedWriter.Add() - = decl_stmt int = call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() - call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() + - call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) ++ decl_stmt long = call MonotonicBlockPackedWriter.Finish() call MonotonicBlockPackedWriter.Finish() call MonotonicBlockPackedWriter.Finish() call MonotonicBlockPackedWriter.Finish() call MonotonicBlockPackedWriter.Finish() call Lucene.Net.Store.RAMOutputStream.WriteTo(byte,int) call Lucene.Net.Store.RAMOutputStream.WriteTo(byte,int) call Lucene.Net.Store.RAMOutputStream.WriteTo(byte,int) call Lucene.Net.Store.RAMOutputStream.WriteTo(byte,int) call Lucene.Net.Store.RAMOutputStream.WriteTo(byte,int) = = call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() public override public override < < ? call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte private static private static < ? return <= var long public override public override < < ? < ? call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte if call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() return call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() - call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVLong() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() decl_stmt var = new decl_stmt long = foreach ? in += call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Finish() call var.Finish() call var.Finish() call var.Finish() call var.Finish() decl IEnumerator long decl IEnumerator long private < ? private < ? < ? < ? decl_stmt System.Collections.Generic.IEnumerator < ? = decl_stmt System.Collections.Generic.IEnumerator < ? = decl_stmt long const const = - while call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt long = if == yield else == call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() yield ! call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() bool protected override protected override if decl_stmt bool = try if != call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() - if != = finally if else = =