Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Threading using Lucene.Net.Documents using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Util.BytesRef Lucene.Net.Codecs.Codec Lucene.Net.Util.Constants Lucene.Net.Store.Directory Lucene.Net.Search.DocIdSetIterator Documents.Document Lucene.Net.Index.FieldInfo.DocValuesType_e Lucene.Net.Codecs.FieldsConsumer Lucene.Net.Codecs.FieldsProducer FieldType Lucene.Net.Search.IndexSearcher Lucene.Net.Util.InfoStream Lucene.Net.Codecs.Lucene3x.Lucene3xCodec Lucene.Net.Codecs.Lucene40.Lucene40RWCodec Lucene.Net.Codecs.Lucene41.Lucene41RWCodec Lucene.Net.Codecs.Lucene42.Lucene42RWCodec Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer NumericDocValuesField Lucene.Net.Util.OpenBitSet Lucene.Net.Codecs.PostingsConsumer Lucene.Net.Search.Query Lucene.Net.Search.ScoreDoc Field.Store StringField Lucene.Net.Codecs.TermsConsumer Lucene.Net.Codecs.TermStats Lucene.Net.Util.TestUtil class attribute Lucene.Net.Index.TestCodecs super super LuceneTestCase int int int decl string int int int string public static public static = return return return return return return return return return : throw new return public public return long TermsConsumer OpenBitSet long public virtual public virtual decl_stmt Lucene.Net.Codecs.TermsConsumer = decl_stmt long = decl_stmt long = decl_stmt Lucene.Net.Util.OpenBitSet = new foreach in for = < ++ call Lucene.Net.Util.OpenBitSet.Set(long,long) call Lucene.Net.Util.OpenBitSet.Set(long,long) call Lucene.Net.Util.OpenBitSet.Set(long,long) call Lucene.Net.Util.OpenBitSet.Set(long,long) call Lucene.Net.Util.OpenBitSet.Set(long,long) += += call TermsConsumer.Finish() call TermsConsumer.Finish() call TermsConsumer.Finish() call TermsConsumer.Finish() call TermsConsumer.Finish() - : int call Lucene.Net.Util.OpenBitSet.Cardinality() call Lucene.Net.Util.OpenBitSet.Cardinality() call Lucene.Net.Util.OpenBitSet.Cardinality() call Lucene.Net.Util.OpenBitSet.Cardinality() call Lucene.Net.Util.OpenBitSet.Cardinality() public virtual public virtual return int long PostingsConsumer PositionData public virtual public virtual decl_stmt Lucene.Net.Codecs.PostingsConsumer = decl_stmt long = for = < ++ decl_stmt int if = - else = call PostingsConsumer.StartDoc() call PostingsConsumer.StartDoc() call PostingsConsumer.StartDoc() call PostingsConsumer.StartDoc() call PostingsConsumer.StartDoc() if ! += for = < ++ decl_stmt PositionData = call PostingsConsumer.AddPosition() call PostingsConsumer.AddPosition() call PostingsConsumer.AddPosition() call PostingsConsumer.AddPosition() call PostingsConsumer.AddPosition() - - call PostingsConsumer.FinishDoc() call PostingsConsumer.FinishDoc() call PostingsConsumer.FinishDoc() call PostingsConsumer.FinishDoc() call PostingsConsumer.FinishDoc() new - : return decl HashSet decl PositionData int decl TermData decl int var string int int int int BytesRef internal virtual internal virtual decl_stmt int = + decl_stmt TermData = new decl_stmt System.Collections.Generic.HashSet < = new < for = < ++ decl_stmt string while = if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() && ! call string.EndsWith() call string.EndsWith() call string.EndsWith() call string.EndsWith() call string.EndsWith() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() break decl_stmt int = + decl_stmt int = new decl_stmt PositionData if ! = new else = decl_stmt int = for = < ++ += = if ! decl_stmt int = + = new decl_stmt int = for = < ++ += decl_stmt Lucene.Net.Util.BytesRef if && == decl_stmt var = new + for = < ++ = byte = new else = = new = new return FieldsProducer decl TermData FieldData Terms decl int decl FieldInfos SegmentInfo TermsEnum decl FieldData decl Builder Codec Directory decl IEnumerator int string DocsEnum string FieldInfos public virtual public virtual decl_stmt int const const = decl_stmt TermData = new for = < ++ decl_stmt int = new decl_stmt string = = new decl_stmt Lucene.Net.Util.Fst.Builder = new decl_stmt FieldData = new decl_stmt FieldData = new decl_stmt Lucene.Net.Index.FieldInfos = call decl FieldInfos.Finish() call decl FieldInfos.Finish() call decl FieldInfos.Finish() call decl FieldInfos.Finish() call decl FieldInfos.Finish() decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Codecs.Codec = decl_stmt Lucene.Net.Index.SegmentInfo = new decl_stmt FieldsProducer = call Directory.PostingsFormat() call Directory.PostingsFormat() call Directory.PostingsFormat() call Directory.PostingsFormat() call Directory.PostingsFormat() new decl_stmt System.Collections.Generic.IEnumerator < = call SegmentInfo.GetEnumerator() call SegmentInfo.GetEnumerator() call SegmentInfo.GetEnumerator() call SegmentInfo.GetEnumerator() call SegmentInfo.GetEnumerator() call FieldsProducer.MoveNext() call FieldsProducer.MoveNext() call FieldsProducer.MoveNext() call FieldsProducer.MoveNext() call FieldsProducer.MoveNext() decl_stmt string = decl_stmt Lucene.Net.Index.Terms = call SegmentInfo.Terms() call SegmentInfo.Terms() call SegmentInfo.Terms() call SegmentInfo.Terms() call SegmentInfo.Terms() decl_stmt Lucene.Net.Index.TermsEnum = call string.Iterator() call string.Iterator() call string.Iterator() call string.Iterator() call string.Iterator() decl_stmt Lucene.Net.Index.DocsEnum = for = < ++ decl_stmt Lucene.Net.Util.BytesRef = call Terms.Next() call Terms.Next() call Terms.Next() call Terms.Next() call Terms.Next() call DocsEnum.Utf8ToString() call DocsEnum.Utf8ToString() call DocsEnum.Utf8ToString() call DocsEnum.Utf8ToString() call DocsEnum.Utf8ToString() for = < ++ = call TermsEnum.NextDoc() call TermsEnum.NextDoc() call TermsEnum.NextDoc() call TermsEnum.NextDoc() call TermsEnum.NextDoc() call TermsEnum.NextDoc() call TermsEnum.NextDoc() call TermsEnum.NextDoc() call TermsEnum.NextDoc() call TermsEnum.NextDoc() call Terms.Next() call Terms.Next() call Terms.Next() call Terms.Next() call Terms.Next() for = < ++ call Terms.SeekCeil() call Terms.SeekCeil() call Terms.SeekCeil() call Terms.SeekCeil() call Terms.SeekCeil() new call FieldsProducer.MoveNext() call FieldsProducer.MoveNext() call FieldsProducer.MoveNext() call FieldsProducer.MoveNext() call FieldsProducer.MoveNext() call SegmentInfo.Dispose() call SegmentInfo.Dispose() call SegmentInfo.Dispose() call SegmentInfo.Dispose() call SegmentInfo.Dispose() call FieldInfos.Dispose() call FieldInfos.Dispose() call FieldInfos.Dispose() call FieldInfos.Dispose() call FieldInfos.Dispose() SegmentInfo Directory decl FieldInfos decl FieldData bool Codec FieldInfos FieldsProducer decl Builder bool public virtual public virtual decl_stmt Lucene.Net.Util.Fst.Builder = new decl_stmt FieldData = new for = < ++ decl_stmt bool = == decl_stmt bool = == = new decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.FieldInfos = call decl FieldInfos.Finish() call decl FieldInfos.Finish() call decl FieldInfos.Finish() call decl FieldInfos.Finish() call decl FieldInfos.Finish() if decl_stmt Lucene.Net.Codecs.Codec = decl_stmt Lucene.Net.Index.SegmentInfo = new if decl_stmt FieldsProducer = call FieldInfos.PostingsFormat() call FieldInfos.PostingsFormat() call FieldInfos.PostingsFormat() call FieldInfos.PostingsFormat() call FieldInfos.PostingsFormat() new decl_stmt ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.common.common.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.target001.target001.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.target002.target002.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.target003.target003.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.target004.target004.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.target005.target005.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.target006.target006.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.target007.target007.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.target008.target008.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.target010.target010.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.target012.target012.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.conversion001.conversion001.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.conversion002.conversion002.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.conversion003.conversion003.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.conversion005.conversion005.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context001.context001.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context002.context002.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context002a.context002a.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context002b.context002b.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context002c.context002c.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context003.context003.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context004.context004.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context005.context005.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context006.context006.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context007.context007.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context008b.context008b.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context010.context010.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context011.context011.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.context012.context012.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.dynamicobj001.dynamicobj001.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.dynamicobj002.dynamicobj002.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.dynamicobj003.dynamicobj003.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.dynamicobj004.dynamicobj004.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.dynamicobj005.dynamicobj005.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.dynamicobj006.dynamicobj006.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.dynamicobj007.dynamicobj007.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.dlgate003.dlgate003.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.dlgate004.dlgate004.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.arrayinit001.arrayinit001.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.ternary001.ternary001.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.using001.using001.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.array001.array001.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.array002.array002.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.array003.array003.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.bug819947ulngenum.bug819947ulngenum.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.numeric001.numeric001.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.numeric002.numeric002.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.numeric003.numeric003.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.cnst001.cnst001.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.cnst001b.cnst001b.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.cnst002.cnst002.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.cnst002b.cnst002b.ManagedTests.DynamicCSharp.Conformance.dynamic.dynamicType.conversions.cnst003.cnst003.Verify = new - for = < - ++ = new new for = < - ++ ! call SegmentInfo.Dispose() call SegmentInfo.Dispose() call SegmentInfo.Dispose() call SegmentInfo.Dispose() call SegmentInfo.Dispose() call bool.Dispose() call bool.Dispose() call bool.Dispose() call bool.Dispose() call bool.Dispose() IndexSearcher IndexReader private private decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Lucene.Net.Search.IndexSearcher = try return call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) finally call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() public override public override try catch = throw new int internal virtual internal virtual for = < ++ decl_stmt int = != if BytesRef int internal virtual internal virtual for = < ++ decl_stmt int = if != if < decl_stmt Lucene.Net.Util.BytesRef = + + + call Lucene.Net.Util.BytesRef.ToString() call Lucene.Net.Util.BytesRef.ToString() call Lucene.Net.Util.BytesRef.ToString() call Lucene.Net.Util.BytesRef.ToString() call Lucene.Net.Util.BytesRef.ToString() else int decl TermsEnum BytesRef int TermData decl SeekStatus TermsEnum string int bool FieldData int DocsEnum int BytesRef DocsAndPositionsEnum DocsEnum bool public virtual public virtual for = < ++ decl_stmt FieldData = decl_stmt Lucene.Net.Index.TermsEnum = if is continue decl_stmt int = while decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() if == break decl_stmt Lucene.Net.Util.BytesRef = new ++ call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) + + + decl_stmt TermData = decl_stmt SeekStatus = call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) new call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() if else call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) decl_stmt int = = decl_stmt bool = try call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) = catch if call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() new call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() if else call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) if for = < ++ decl_stmt string = + = call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) new == || == if for = - >= -- call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) new + + + + call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() for = - >= -- try call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() new catch = call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) new call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() new call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) new = do = if == decl_stmt Lucene.Net.Index.DocsEnum decl_stmt Lucene.Net.Index.DocsEnum decl_stmt DocsAndPositionsEnum if ! = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) if != = = else = = else = = = decl_stmt int = - decl_stmt bool = while < - decl_stmt int = - decl_stmt int if == && >= decl_stmt int = + - += if == = call string.Advance() call string.Advance() call string.Advance() call string.Advance() call string.Advance() else = call string.Advance() call string.Advance() call string.Advance() call string.Advance() call string.Advance() + if == == - = break else < - if >= + ++ else = call string.NextDoc() call string.NextDoc() call string.NextDoc() call string.NextDoc() call string.NextDoc() != - ++ if ! call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() if == if ! call string.NextDoc() call string.NextDoc() call string.NextDoc() call string.NextDoc() call string.NextDoc() ++ call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != int SegmentInfo Codec FieldsConsumer SegmentWriteState private private decl_stmt int = decl_stmt Lucene.Net.Codecs.Codec = decl_stmt Lucene.Net.Index.SegmentInfo = new decl_stmt SegmentWriteState = new decl_stmt Lucene.Net.Codecs.FieldsConsumer = call Codec.PostingsFormat() call Codec.PostingsFormat() call Codec.PostingsFormat() call Codec.PostingsFormat() call Codec.PostingsFormat() foreach in if ! && is continue call FieldsConsumer.Dispose() call FieldsConsumer.Dispose() call FieldsConsumer.Dispose() call FieldsConsumer.Dispose() call FieldsConsumer.Dispose() Term Random Document IndexWriter DocsEnum DirectoryReader int Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt System.Random = decl_stmt Lucene.Net.Index.IndexWriter = new new decl_stmt int = for = < ++ decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt Lucene.Net.Index.Term = new new decl_stmt Lucene.Net.Index.DirectoryReader = foreach in decl_stmt Lucene.Net.Index.DocsEnum = while call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() + call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() Document IndexWriter IndexWriterConfig Directory decl Codec public virtual public virtual decl_stmt Lucene.Net.Codecs.Codec = new new new new decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriterConfig = new call Lucene.Net.Index.IndexWriterConfig.SetCodec(Codec) call Lucene.Net.Index.IndexWriterConfig.SetCodec(Codec) call Lucene.Net.Index.IndexWriterConfig.SetCodec(Codec) call Lucene.Net.Index.IndexWriterConfig.SetCodec(Codec) call Lucene.Net.Index.IndexWriterConfig.SetCodec(Codec) decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) = try call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) catch call Lucene.Net.Index.IndexWriter.Rollback() call Lucene.Net.Index.IndexWriter.Rollback() call Lucene.Net.Index.IndexWriter.Rollback() call Lucene.Net.Index.IndexWriter.Rollback() call Lucene.Net.Index.IndexWriter.Rollback() finally = call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose()