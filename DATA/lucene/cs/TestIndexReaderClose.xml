Lucene.Net.Index System.Collections.Generic using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using System using Lucene.Net.Store.AlreadyClosedException Lucene.Net.Store.Directory Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer class attribute Lucene.Net.Index.TestIndexReaderClose super super LuceneTestCase int AtomicInteger var bool IndexWriter decl IList FilterAtomicReader AtomicReader bool DirectoryReader Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new new call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt bool = ! decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.FilterAtomicReader = new decl_stmt System.Collections.Generic.IList < = new < decl_stmt int = decl_stmt Lucene.Net.Support.AtomicInteger = new decl_stmt bool = for = < ++ if = call FilterAtomicReader.AddReaderClosedListener() call FilterAtomicReader.AddReaderClosedListener() call FilterAtomicReader.AddReaderClosedListener() call FilterAtomicReader.AddReaderClosedListener() call FilterAtomicReader.AddReaderClosedListener() new else call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call FilterAtomicReader.AddReaderClosedListener() call FilterAtomicReader.AddReaderClosedListener() call FilterAtomicReader.AddReaderClosedListener() call FilterAtomicReader.AddReaderClosedListener() call FilterAtomicReader.AddReaderClosedListener() new if ! && ! call FilterAtomicReader.AddReaderClosedListener() call FilterAtomicReader.AddReaderClosedListener() call FilterAtomicReader.AddReaderClosedListener() call FilterAtomicReader.AddReaderClosedListener() call FilterAtomicReader.AddReaderClosedListener() new try call FilterAtomicReader.Dispose() call FilterAtomicReader.Dispose() call FilterAtomicReader.Dispose() call FilterAtomicReader.Dispose() call FilterAtomicReader.Dispose() catch if else try decl_stmt var = catch if call FilterAtomicReader.Dispose() call FilterAtomicReader.Dispose() call FilterAtomicReader.Dispose() call FilterAtomicReader.Dispose() call FilterAtomicReader.Dispose() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call AtomicReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() protected override protected override if throw new public public public public throw new