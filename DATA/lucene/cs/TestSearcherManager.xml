Lucene.Net.Search Apache.NMS.Util using System using System.Collections.Generic using System.Threading using System.Threading.Tasks using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Store.AlreadyClosedException Lucene.Net.Index.ConcurrentMergeScheduler Lucene.Net.Store.Directory Lucene.Net.Index.DirectoryReader Documents.Document Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexWriter Lucene.Net.Index.IndexWriterConfig Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Index.RandomIndexWriter Lucene.Net.Index.Term Lucene.Net.Util.TestUtil Lucene.Net.Index.ThreadedIndexingAndSearchingTestCase class attribute Lucene.Net.Search.TestSearcherManager super super ThreadedIndexingAndSearchingTestCase decl IList SearcherManager decl Pruner decl SearcherLifetimeManager SearcherLifetimeManager bool public virtual public virtual = new : if ! call decl Pruner.MaybeRefresh() call decl Pruner.MaybeRefresh() call decl Pruner.MaybeRefresh() call decl Pruner.MaybeRefresh() call decl Pruner.MaybeRefresh() || return call decl Pruner.Acquire() call decl Pruner.Acquire() call decl Pruner.Acquire() call decl Pruner.Acquire() call decl Pruner.Acquire() SearcherFactory protected override protected override decl_stmt Lucene.Net.Search.SearcherFactory = new if = new = else = new = = = new IndexSearcher public override public override decl_stmt Lucene.Net.Search.IndexSearcher = new = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new return ThreadClass protected override protected override decl_stmt Lucene.Net.Support.ThreadClass = new call Lucene.Net.Support.ThreadClass.SetDaemon(bool) call Lucene.Net.Support.ThreadClass.SetDaemon(bool) call Lucene.Net.Support.ThreadClass.SetDaemon(bool) call Lucene.Net.Support.ThreadClass.SetDaemon(bool) call Lucene.Net.Support.ThreadClass.SetDaemon(bool) call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) bool public override public override try if + + while < decl_stmt bool = if else if catch if throw new IndexSearcher long if == if call decl Pruner.MaybeRefresh() call decl Pruner.MaybeRefresh() call decl Pruner.MaybeRefresh() call decl Pruner.MaybeRefresh() call decl Pruner.MaybeRefresh() call SearcherManager.Prune() call SearcherManager.Prune() call SearcherManager.Prune() call SearcherManager.Prune() call SearcherManager.Prune() decl_stmt Lucene.Net.Search.IndexSearcher = lock while != && < decl_stmt long = = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() if == call SearcherLifetimeManager.Remove() call SearcherLifetimeManager.Remove() call SearcherLifetimeManager.Remove() call SearcherLifetimeManager.Remove() call SearcherLifetimeManager.Remove() else break if == = call decl Pruner.Acquire() call decl Pruner.Acquire() call decl Pruner.Acquire() call decl Pruner.Acquire() call decl Pruner.Acquire() if != decl_stmt long = call SearcherManager.Record() call SearcherManager.Record() call SearcherManager.Record() call SearcherManager.Record() call SearcherManager.Record() lock if ! call SearcherLifetimeManager.Contains() call SearcherLifetimeManager.Contains() call SearcherLifetimeManager.Contains() call SearcherLifetimeManager.Contains() call SearcherLifetimeManager.Contains() call SearcherLifetimeManager.Add() call SearcherLifetimeManager.Add() call SearcherLifetimeManager.Add() call SearcherLifetimeManager.Add() call SearcherLifetimeManager.Add() return protected override protected override protected override protected override if call decl Pruner.Dispose() call decl Pruner.Dispose() call decl Pruner.Dispose() call decl Pruner.Dispose() call decl Pruner.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() public override public override try if catch return new public public try if catch catch if = SearcherManager Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = new new decl_stmt Lucene.Net.Search.SearcherManager = new call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() IndexSearcher IndexSearcher IndexWriter SearcherManager Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new new new decl_stmt Lucene.Net.Search.SearcherManager = new new call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) new call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call IndexSearcher.IndexReader() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() try call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() catch call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() IndexSearcher SearcherManager Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = new new decl_stmt Lucene.Net.Search.SearcherManager = new decl_stmt Lucene.Net.Search.IndexSearcher = call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() call SearcherManager.Release() try call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() call SearcherManager.Acquire() catch try call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() catch call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() SearcherManager AtomicBoolean IndexWriter Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new new decl_stmt Lucene.Net.Support.AtomicBoolean = new decl_stmt Lucene.Net.Search.SearcherManager = new new call SearcherManager.AddListener() call SearcherManager.AddListener() call SearcherManager.AddListener() call SearcherManager.AddListener() call SearcherManager.AddListener() new call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) new call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call SearcherManager.MaybeRefreshBlocking() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call Lucene.Net.Support.AtomicBoolean.Get() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public public public public if IndexReader Random SearcherFactory RandomIndexWriter Directory public virtual public virtual decl_stmt System.Random = decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Lucene.Net.Search.SearcherFactory = new try new catch try new call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() catch call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public override public override return SearcherManager RandomIndexWriter Directory ThreadClass public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() decl_stmt Lucene.Net.Search.SearcherManager = new decl_stmt Lucene.Net.Support.ThreadClass = new call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Start() call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call Lucene.Net.Support.ThreadClass.Join(long,int) call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.MaybeRefresh() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call SearcherManager.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public override public override try catch throw new