Lucene.Net.Codecs.Compressing System using System.Collections.Generic using System.Diagnostics using System.Linq using Lucene.Net.Support using Lucene.Net.Util.ArrayUtil Lucene.Net.Index.AtomicReader Lucene.Net.Util.Bits Lucene.Net.Util.Packed.BlockPackedWriter Lucene.Net.Store.BufferedChecksumIndexInput Lucene.Net.Util.BytesRef Lucene.Net.Store.ChecksumIndexInput Lucene.Net.Store.DataInput Lucene.Net.Store.Directory Lucene.Net.Index.FieldInfo Lucene.Net.Index.FieldInfos Lucene.Net.Index.Fields Lucene.Net.Util.GrowableByteArrayDataOutput Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexInput Lucene.Net.Store.IndexOutput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Index.MergeState Lucene.Net.Util.Packed.PackedInts Lucene.Net.Index.SegmentInfo Lucene.Net.Index.SegmentReader Lucene.Net.Util.StringHelper class Lucene.Net.Codecs.Compressing.CompressingTermVectorsWriter super super TermVectorsWriter int int int FieldData BytesRef CompressionMode int IndexOutput BlockPackedWriter int Compressor string string GrowableByteArrayDataOutput string CompressingStoredFieldsIndexWriter decl LinkedList Directory int int string DocData int string decl int GrowableByteArrayDataOutput int int int string FieldData int FieldData int int internal virtual internal virtual decl_stmt FieldData if == = new else decl_stmt FieldData = decl_stmt int = + : decl_stmt int = + : decl_stmt int = + : = new return int FieldData int DocData int private private decl_stmt FieldData = foreach in call decl LinkedList.Reverse() call decl LinkedList.Reverse() call decl LinkedList.Reverse() call decl LinkedList.Reverse() call decl LinkedList.Reverse() if ! == = break decl_stmt DocData if == = new else decl_stmt int = + : decl_stmt int = + : decl_stmt int = + : = new call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() return internal virtual internal virtual = = = ++ int internal virtual internal virtual if if + == = + = if if + == decl_stmt int = + = = + = + = if if + == = + = ++ protected override protected override if try finally = = public override public override public override public override = public override public override = ++ if = public override public override = call DocData.AddField() call DocData.AddField() call DocData.AddField() call DocData.AddField() call DocData.AddField() = public override public override = int public override public override >= decl_stmt int = call FieldData.AddTerm() call FieldData.AddTerm() call FieldData.AddTerm() call FieldData.AddTerm() call FieldData.AddTerm() - + - if < = new = = public override public override != call FieldData.AddPosition() call FieldData.AddPosition() call FieldData.AddPosition() call FieldData.AddPosition() call FieldData.AddPosition() - == : if && != private private return >= || >= decl int int int int private private decl_stmt int = > call int.ToString() call int.ToString() call int.ToString() call int.ToString() call int.ToString() call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.WriteIndex(int,long) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.WriteIndex(int,long) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.WriteIndex(int,long) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.WriteIndex(int,long) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.WriteIndex(int,long) decl_stmt int = - call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() decl_stmt int = if > decl_stmt int = call Compressor.Compress() call Compressor.Compress() call Compressor.Compress() call Compressor.Compress() call Compressor.Compress() call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() = = = int int private private if == decl_stmt int = call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() return else decl_stmt int = foreach in += return decl Writer int decl int decl PackedInts int int decl SortedSet private private decl_stmt System.Collections.Generic.SortedSet < = new < foreach in foreach in call decl SortedSet.Add() call decl SortedSet.Add() call decl SortedSet.Add() call decl SortedSet.Add() call decl SortedSet.Add() decl_stmt int = > decl_stmt int = call decl SortedSet.Last() call decl SortedSet.Last() call decl SortedSet.Last() call decl SortedSet.Last() call decl SortedSet.Last() decl_stmt int = - << | call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() byte sbyte if - >= call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() - - decl_stmt Writer = foreach in call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() decl_stmt int = new decl_stmt int = foreach in ++ = return decl PackedInts decl Writer private private decl_stmt Writer = - foreach in foreach in decl_stmt int = >= call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() int bool decl Writer bool decl int private private decl_stmt bool = decl_stmt int = new - decl_stmt bool foreach in = foreach in decl_stmt int = >= if == - = else if != = = if break if call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() decl_stmt Writer = foreach in >= call decl Writer.Add() call decl Writer.Add() call decl Writer.Add() call decl Writer.Add() call decl Writer.Add() call decl Writer.Ord() call decl Writer.Ord() call decl Writer.Ord() call decl Writer.Ord() call decl Writer.Ord() == - call decl Writer.Finish() call decl Writer.Finish() call decl Writer.Finish() call decl Writer.Finish() call decl Writer.Finish() else call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() decl_stmt Writer = foreach in foreach in call decl Writer.Add() call decl Writer.Add() call decl Writer.Add() call decl Writer.Add() call decl Writer.Add() call decl Writer.Ord() call decl Writer.Ord() call decl Writer.Ord() call decl Writer.Ord() call decl Writer.Ord() == - call decl Writer.Finish() call decl Writer.Finish() call decl Writer.Finish() call decl Writer.Finish() call decl Writer.Finish() decl PackedInts int int private private decl_stmt int = foreach in foreach in |= decl_stmt int = call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() decl_stmt Writer = foreach in foreach in call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Add() call decl PackedInts.Ord() call decl PackedInts.Ord() call decl PackedInts.Ord() call decl PackedInts.Ord() call decl PackedInts.Ord() == - call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() call decl PackedInts.Finish() private private foreach in foreach in for = < ++ foreach in foreach in for = < ++ private private foreach in foreach in for = < ++ - int int int private private foreach in foreach in if decl_stmt int = for = < ++ decl_stmt int = for = < ++ decl_stmt int = + ++ - = == int int int int decl long bool int int float decl float decl long private private decl_stmt bool = decl_stmt long = new decl_stmt long = new foreach in foreach in |= if && decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = + decl_stmt int = + += - += - = = ++ == if ! return decl_stmt float = new for = < ++ = <= || <= : double / for = < ++ call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() foreach in foreach in if & != decl_stmt int = decl_stmt float = decl_stmt int = for = < ++ decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = + : decl_stmt int = + - - * - = = ++ foreach in foreach in if & != decl_stmt int = for = < ++ for = < ++ + ++ - - == private private foreach in foreach in if for = < ++ + public override public override if ! == if != throw new + + + call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.Finish(int,long) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.Finish(int,long) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.Finish(int,long) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.Finish(int,long) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.Finish(int,long) return int int int int int int int int public override public override == != == != if decl_stmt int = + if + > = + decl_stmt int = if decl_stmt int = + if + > = + for = < ++ decl_stmt int = if & != decl_stmt int = + = else + = += uint >> + = else for = < ++ += uint >> + = if decl_stmt int = + if + > decl_stmt int = + = = decl_stmt int = for = < ++ = + = + = + = + = - += CompressingStoredFieldsIndexReader long SegmentReader int int Bits int Fields int IndexInput long int TermVectorsReader ChecksumIndexInput long CompressingTermVectorsReader public override public override decl_stmt int = decl_stmt int = foreach in decl_stmt Lucene.Net.Index.SegmentReader = ++ decl_stmt Lucene.Net.Codecs.Compressing.CompressingTermVectorsReader = if != decl_stmt Lucene.Net.Index.TermVectorsReader = if != && is = decl_stmt int = decl_stmt Lucene.Net.Spatial.Util.Bits = if == || != || != || != || != for = < = + decl_stmt Lucene.Net.Index.Fields = ++ else decl_stmt Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader = decl_stmt Lucene.Net.Store.IndexInput = call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt Lucene.Net.Store.ChecksumIndexInput = new call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() for = < decl_stmt long = call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) if > call ChecksumIndexInput.Seek() call ChecksumIndexInput.Seek() call ChecksumIndexInput.Seek() call ChecksumIndexInput.Seek() call ChecksumIndexInput.Seek() if == && == || call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) - < decl_stmt int = call ChecksumIndexInput.ReadVInt() call ChecksumIndexInput.ReadVInt() call ChecksumIndexInput.ReadVInt() call ChecksumIndexInput.ReadVInt() call ChecksumIndexInput.ReadVInt() decl_stmt int = call ChecksumIndexInput.ReadVInt() call ChecksumIndexInput.ReadVInt() call ChecksumIndexInput.ReadVInt() call ChecksumIndexInput.ReadVInt() call ChecksumIndexInput.ReadVInt() + <= if + < && + == + decl_stmt long = call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.GetStartPointer(int) + decl_stmt long = - call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.WriteIndex(int,long) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.WriteIndex(int,long) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.WriteIndex(int,long) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.WriteIndex(int,long) call Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.WriteIndex(int,long) += += * = + else for < + = + decl_stmt Lucene.Net.Index.Fields = ++ else decl_stmt Lucene.Net.Index.Fields = ++ = + call ChecksumIndexInput.Seek() call ChecksumIndexInput.Seek() call ChecksumIndexInput.Seek() call ChecksumIndexInput.Seek() call ChecksumIndexInput.Seek() call ChecksumIndexInput.Length() call ChecksumIndexInput.Length() call ChecksumIndexInput.Length() call ChecksumIndexInput.Length() call ChecksumIndexInput.Length() - return private static private static if == return while < && ! ++ return private static private static if == return while < && ++ return