Lucene.Net.Index Lucene.Net.Analysis.Tokenattributes using System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Util.ByteBlockPool Lucene.Net.Util.BytesRef Lucene.Net.Util.BytesRefHash Lucene.Net.Util.Counter Lucene.Net.Util.IntBlockPool class Lucene.Net.Index.TermsHashPerField super super InvertedDocConsumerPerField int FieldInfo Counter bool int TermsHashPerField BytesRefHash ParallelPostingsArray decl int ByteBlockPool IntBlockPool decl DocState FieldInvertState ByteBlockPool bool decl DocumentsWriterPerThread TermsHash int BytesRef TermsHashConsumerPerField ITermToBytesRefAttribute internal internal call FieldInfo.Clear() call FieldInfo.Clear() call FieldInfo.Clear() call FieldInfo.Clear() call FieldInfo.Clear() public public call FieldInfo.Clear() call FieldInfo.Clear() call FieldInfo.Clear() call FieldInfo.Clear() call FieldInfo.Clear() if != call Lucene.Net.Index.TermsHashPerField.Reset() call Lucene.Net.Index.TermsHashPerField.Reset() call Lucene.Net.Index.TermsHashPerField.Reset() call Lucene.Net.Index.TermsHashPerField.Reset() call Lucene.Net.Index.TermsHashPerField.Reset() internal override internal override if != call TermsHashPerField.Abort() call TermsHashPerField.Abort() call TermsHashPerField.Abort() call TermsHashPerField.Abort() call TermsHashPerField.Abort() int int decl int public public < decl_stmt int = decl_stmt int = >> decl_stmt int = & + * + public public < return call FieldInfo.Sort() call FieldInfo.Sort() call FieldInfo.Sort() call FieldInfo.Sort() call FieldInfo.Sort() internal override internal override = call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() call decl DocState.AttributeSource_Renamed() < = call TermsHashConsumerPerField.Start() call TermsHashConsumerPerField.Start() call TermsHashConsumerPerField.Start() call TermsHashConsumerPerField.Start() call TermsHashConsumerPerField.Start() if != call Lucene.Net.Index.TermsHashPerField.Start(IndexableField,int) call Lucene.Net.Index.TermsHashPerField.Start(IndexableField,int) call Lucene.Net.Index.TermsHashPerField.Start(IndexableField,int) call Lucene.Net.Index.TermsHashPerField.Start(IndexableField,int) call Lucene.Net.Index.TermsHashPerField.Start(IndexableField,int) internal override internal override = call TermsHashConsumerPerField.Start() call TermsHashConsumerPerField.Start() call TermsHashConsumerPerField.Start() call TermsHashConsumerPerField.Start() call TermsHashConsumerPerField.Start() call FieldInfo.Reinit() call FieldInfo.Reinit() call FieldInfo.Reinit() call FieldInfo.Reinit() call FieldInfo.Reinit() if != = call Lucene.Net.Index.TermsHashPerField.Start(IndexableField,int) call Lucene.Net.Index.TermsHashPerField.Start(IndexableField,int) call Lucene.Net.Index.TermsHashPerField.Start(IndexableField,int) call Lucene.Net.Index.TermsHashPerField.Start(IndexableField,int) call Lucene.Net.Index.TermsHashPerField.Start(IndexableField,int) return || int int int public public decl_stmt int = call FieldInfo.AddByPoolOffset() call FieldInfo.AddByPoolOffset() call FieldInfo.AddByPoolOffset() call FieldInfo.AddByPoolOffset() call FieldInfo.AddByPoolOffset() if >= if + > call BytesRef.NextBuffer() call BytesRef.NextBuffer() call BytesRef.NextBuffer() call BytesRef.NextBuffer() call BytesRef.NextBuffer() if - < * call Lucene.Net.Index.IntBlockPool.NextBuffer() call Lucene.Net.Index.IntBlockPool.NextBuffer() call Lucene.Net.Index.IntBlockPool.NextBuffer() call Lucene.Net.Index.IntBlockPool.NextBuffer() call Lucene.Net.Index.IntBlockPool.NextBuffer() = = += = + for = < ++ decl_stmt int = call Lucene.Net.Index.IntBlockPool.NewSlice(int) call Lucene.Net.Index.IntBlockPool.NewSlice(int) call Lucene.Net.Index.IntBlockPool.NewSlice(int) call Lucene.Net.Index.IntBlockPool.NewSlice(int) call Lucene.Net.Index.IntBlockPool.NewSlice(int) + = + = call TermsHashConsumerPerField.NewTerm() call TermsHashConsumerPerField.NewTerm() call TermsHashConsumerPerField.NewTerm() call TermsHashConsumerPerField.NewTerm() call TermsHashConsumerPerField.NewTerm() else = - - decl_stmt int = = >> = & call TermsHashConsumerPerField.AddTerm() call TermsHashConsumerPerField.AddTerm() call TermsHashConsumerPerField.AddTerm() call TermsHashConsumerPerField.AddTerm() call TermsHashConsumerPerField.AddTerm() int int int int internal override internal override call FieldInvertState.FillBytesRef() call FieldInvertState.FillBytesRef() call FieldInvertState.FillBytesRef() call FieldInvertState.FillBytesRef() call FieldInvertState.FillBytesRef() decl_stmt int try = call FieldInfo.Add() call FieldInfo.Add() call FieldInfo.Add() call FieldInfo.Add() call FieldInfo.Add() catch if == decl_stmt int = try = = call ITermToBytesRefAttribute.ToString() call ITermToBytesRefAttribute.ToString() call ITermToBytesRefAttribute.ToString() call ITermToBytesRefAttribute.ToString() call ITermToBytesRefAttribute.ToString() finally = call TermsHashConsumerPerField.SkippingLongTerm() call TermsHashConsumerPerField.SkippingLongTerm() call TermsHashConsumerPerField.SkippingLongTerm() call TermsHashConsumerPerField.SkippingLongTerm() call TermsHashConsumerPerField.SkippingLongTerm() return if >= call FieldInfo.ByteStart() call FieldInfo.ByteStart() call FieldInfo.ByteStart() call FieldInfo.ByteStart() call FieldInfo.ByteStart() if + > call BytesRef.NextBuffer() call BytesRef.NextBuffer() call BytesRef.NextBuffer() call BytesRef.NextBuffer() call BytesRef.NextBuffer() if - < * call Lucene.Net.Index.IntBlockPool.NextBuffer() call Lucene.Net.Index.IntBlockPool.NextBuffer() call Lucene.Net.Index.IntBlockPool.NextBuffer() call Lucene.Net.Index.IntBlockPool.NextBuffer() call Lucene.Net.Index.IntBlockPool.NextBuffer() = = += = + for = < ++ decl_stmt int = call Lucene.Net.Index.IntBlockPool.NewSlice(int) call Lucene.Net.Index.IntBlockPool.NewSlice(int) call Lucene.Net.Index.IntBlockPool.NewSlice(int) call Lucene.Net.Index.IntBlockPool.NewSlice(int) call Lucene.Net.Index.IntBlockPool.NewSlice(int) + = + = call TermsHashConsumerPerField.NewTerm() call TermsHashConsumerPerField.NewTerm() call TermsHashConsumerPerField.NewTerm() call TermsHashConsumerPerField.NewTerm() call TermsHashConsumerPerField.NewTerm() else = - - decl_stmt int = = >> = & call TermsHashConsumerPerField.AddTerm() call TermsHashConsumerPerField.AddTerm() call TermsHashConsumerPerField.AddTerm() call TermsHashConsumerPerField.AddTerm() call TermsHashConsumerPerField.AddTerm() if call Lucene.Net.Index.TermsHashPerField.Add() call Lucene.Net.Index.TermsHashPerField.Add() call Lucene.Net.Index.TermsHashPerField.Add() call Lucene.Net.Index.TermsHashPerField.Add() call Lucene.Net.Index.TermsHashPerField.Add() internal internal byte int var int internal internal decl_stmt int = + decl_stmt var = >> != decl_stmt int = & if != = call Lucene.Net.Index.IntBlockPool.AllocSlice(int,int) call Lucene.Net.Index.IntBlockPool.AllocSlice(int,int) call Lucene.Net.Index.IntBlockPool.AllocSlice(int,int) call Lucene.Net.Index.IntBlockPool.AllocSlice(int,int) call Lucene.Net.Index.IntBlockPool.AllocSlice(int,int) = + = + = + ++ int public public decl_stmt int = + for = < ++ internal internal < while & ~ != unchecked & | = uint >> sbyte internal override internal override call TermsHashConsumerPerField.Finish() call TermsHashConsumerPerField.Finish() call TermsHashConsumerPerField.Finish() call TermsHashConsumerPerField.Finish() call TermsHashConsumerPerField.Finish() if != call Lucene.Net.Index.TermsHashPerField.Finish() call Lucene.Net.Index.TermsHashPerField.Finish() call Lucene.Net.Index.TermsHashPerField.Finish() call Lucene.Net.Index.TermsHashPerField.Finish() call Lucene.Net.Index.TermsHashPerField.Finish() public override public override if == = * return ParallelPostingsArray int public override public override decl_stmt Lucene.Net.Index.ParallelPostingsArray = decl_stmt int = = = call ParallelPostingsArray.Grow() call ParallelPostingsArray.Grow() call ParallelPostingsArray.Grow() call ParallelPostingsArray.Grow() call ParallelPostingsArray.Grow() call Lucene.Net.Index.ParallelPostingsArray.BytesPerPosting() call Lucene.Net.Index.ParallelPostingsArray.BytesPerPosting() call Lucene.Net.Index.ParallelPostingsArray.BytesPerPosting() call Lucene.Net.Index.ParallelPostingsArray.BytesPerPosting() call Lucene.Net.Index.ParallelPostingsArray.BytesPerPosting() * - return public override public override if != - * = return public override public override return