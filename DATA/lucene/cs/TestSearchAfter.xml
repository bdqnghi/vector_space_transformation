Lucene.Net.Search System using System.Collections.Generic using Lucene.Net.Attributes using Lucene.Net.Documents using Lucene.Net.Util using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using BinaryDocValuesField Lucene.Net.Util.BytesRef Lucene.Net.Codecs.Codec Lucene.Net.Store.Directory Documents.Document DoubleField Lucene.Net.Util.English Field FloatDocValuesField FloatField Lucene.Net.Index.IndexReader IntField LongField Lucene.Net.Util.LuceneTestCase NumericDocValuesField Lucene.Net.Index.RandomIndexWriter SortedDocValuesField StoredField Lucene.Net.Index.Term Lucene.Net.Util.TestUtil class attribute Lucene.Net.Search.TestSearchAfter super super LuceneTestCaseWithReducedFloatPrecision IndexSearcher decl IList int IndexReader bool Directory decl IList bool SortField RandomIndexWriter int int Document SortField public override public override = new < new new new new new new new new new new new new new new new new new if call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() new new new new new new new new new new new foreach in new for = < ++ decl_stmt bool = == decl_stmt Lucene.Net.Search.SortField = new = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = new = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt int = for = < ++ decl_stmt Lucene.Net.Search.SortField = if == decl_stmt Lucene.Net.Search.SortField = new = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() else if == decl_stmt Lucene.Net.Search.SortField = new = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() else if == decl_stmt Lucene.Net.Search.SortField = new = float call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() else if == decl_stmt Lucene.Net.Search.SortField = new = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt int = for = < ++ decl_stmt System.Collections.Generic.IList < = new < call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() == : call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() + sbyte call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() + short call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new float call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new if call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new float call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new new decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new + if + foreach in if != call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) if + call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) if == call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() = call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() = if + public override public override call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() Filter BooleanQuery int public virtual public virtual decl_stmt int = for = < ++ decl_stmt MS.Internal.Xml.XPath.Filter = new new new new new new new new new decl_stmt Lucene.Net.Search.BooleanQuery = new call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) new new call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) new new internal virtual internal virtual foreach in new new for = < ++ decl SortField decl_stmt Lucene.Net.Search.SortField = new for = < ++ = return new int TopDocs int int bool ScoreDoc int TopDocs bool internal virtual internal virtual decl_stmt int = decl_stmt Lucene.Net.Search.TopDocs decl_stmt int = * if + ++ + + + + + + + + decl_stmt bool = decl_stmt bool = if == = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) else if == = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) else = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) if + decl_stmt int = foreach in + ++ + + call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) + + decl_stmt int = decl_stmt Lucene.Net.Search.ScoreDoc = while < decl_stmt Lucene.Net.Search.TopDocs if == if + = call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) else if + if == = call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) else = call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) call Lucene.Net.Search.IndexSearcher.SearchAfter(ScoreDoc,Query,Filter,int) if + + if == break += = - ScoreDoc ScoreDoc internal virtual internal virtual for = < ++ decl_stmt Lucene.Net.Search.ScoreDoc = + decl_stmt Lucene.Net.Search.ScoreDoc = if + + + call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) + + + call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) call Lucene.Net.Search.IndexSearcher.Doc(int,StoredFieldVisitor) + + if is is