Lucene.Net.Codecs System.IO using System.Linq using System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Index.AtomicReader Lucene.Net.Index.BinaryDocValues Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Index.FieldInfo Lucene.Net.Index.FilteredTermsEnum Lucene.Net.Util.LongBitSet Lucene.Net.Index.MergeState Lucene.Net.Index.NumericDocValues Lucene.Net.Index.MultiDocValues.OrdinalMap Lucene.Net.Index.SortedDocValues Lucene.Net.Index.SortedSetDocValues Lucene.Net.Index.TermsEnum Lucene.Net.Util.ArrayUtil class Lucene.Net.Codecs.DocValuesConsumer super super IDisposable public virtual public virtual < < int Bits AtomicReader int NumericDocValues long Bits private < ? private < ? < < decl_stmt int = - decl_stmt int = decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt NumericDocValues = decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt Lucene.Net.Spatial.Util.Bits = while if == yield if == || == ++ if < = = = = = continue if == || call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() decl_stmt long ? if call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() = call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() call NumericDocValues.Get() else = ++ yield continue ++ public public < < int Bits AtomicReader int BinaryDocValues var Bits private < private < < < decl_stmt int = - decl_stmt int = decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt BinaryDocValues = decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt Lucene.Net.Spatial.Util.Bits = while if == yield if == || == ++ if < = = = = = continue if == || call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() decl_stmt var = new if call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() call BinaryDocValues.Get() else = ++ yield continue ++ var Bits decl AtomicReader var var AtomicReader SortedDocValues int decl SortedDocValues public virtual public virtual < decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.SortedDocValues = decl_stmt var = new for = < ++ decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.SortedDocValues = decl_stmt Lucene.Net.Spatial.Util.Bits = if == = call Lucene.Net.Index.SortedDocValues.TermsEnum() call Lucene.Net.Index.SortedDocValues.TermsEnum() call Lucene.Net.Index.SortedDocValues.TermsEnum() call Lucene.Net.Index.SortedDocValues.TermsEnum() call Lucene.Net.Index.SortedDocValues.TermsEnum() else decl_stmt var = new for = < ++ if call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() decl_stmt int = call SortedDocValues.GetOrd() call SortedDocValues.GetOrd() call SortedDocValues.GetOrd() call SortedDocValues.GetOrd() call SortedDocValues.GetOrd() if >= call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() = new call Lucene.Net.Index.SortedDocValues.TermsEnum() call Lucene.Net.Index.SortedDocValues.TermsEnum() call Lucene.Net.Index.SortedDocValues.TermsEnum() call Lucene.Net.Index.SortedDocValues.TermsEnum() call Lucene.Net.Index.SortedDocValues.TermsEnum() decl_stmt var = new var int var int private < private < decl_stmt int = while < decl_stmt var = new decl_stmt int = decl_stmt var = int ++ yield int int int Bits AtomicReader private < ? private < ? decl_stmt int = - decl_stmt int = decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Spatial.Util.Bits = while if == yield if == || == ++ if < = = = continue if == || call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() decl_stmt int = ++ yield == - - : continue ++ var var var var var var var long var public virtual public virtual < decl_stmt var = decl_stmt var = decl_stmt var = new for = < ++ decl_stmt var = decl_stmt var = decl_stmt var = if == = call var.TermsEnum() call var.TermsEnum() call var.TermsEnum() call var.TermsEnum() call var.TermsEnum() else decl_stmt var = new for = < ++ if call var.Get() call var.Get() call var.Get() call var.Get() call var.Get() = decl_stmt long while = call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() != call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() = new call var.TermsEnum() call var.TermsEnum() call var.TermsEnum() call var.TermsEnum() call var.TermsEnum() decl_stmt var = new int long long var private < private < decl_stmt long = while < decl_stmt int = decl_stmt long = decl_stmt var = new ++ yield int Bits long AtomicReader int SortedSetDocValues private < ? private < ? decl_stmt int = - decl_stmt int = decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Spatial.Util.Bits = while if == yield if == || == ++ if < = = = continue if == || call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() decl_stmt Lucene.Net.Index.SortedSetDocValues = = decl_stmt long = while call SortedSetDocValues.NextOrd() call SortedSetDocValues.NextOrd() call SortedSetDocValues.NextOrd() call SortedSetDocValues.NextOrd() call SortedSetDocValues.NextOrd() != ++ ++ yield continue ++ int Bits int var AtomicReader int int SortedSetDocValues long var private < ? private < ? decl_stmt int = - decl_stmt int = decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt var = new decl_stmt int = decl_stmt int = while if == yield if < decl_stmt var = ++ yield continue if == || == ++ if < = = = continue if == || call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() < decl_stmt Lucene.Net.Index.SortedSetDocValues = = = = decl_stmt long while = call SortedSetDocValues.NextOrd() call SortedSetDocValues.NextOrd() call SortedSetDocValues.NextOrd() call SortedSetDocValues.NextOrd() call SortedSetDocValues.NextOrd() != if == = + = ++ ++ continue ++ protected internal override protected internal override return : public public