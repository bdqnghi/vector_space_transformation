Lucene.Net.Facet.SortedSet System using System.Collections.Generic using System.Linq using System.Threading using Lucene.Net.Facet using FacetsCollector.MatchingDocs Lucene.Net.Facet.SortedSet.SortedSetDocValuesReaderState.OrdRange Lucene.Net.Index.AtomicReader Lucene.Net.Index.IndexReader Lucene.Net.Index.MultiDocValues Lucene.Net.Index.MultiDocValues.MultiSortedSetDocValues Lucene.Net.Index.ReaderUtil Lucene.Net.Index.SortedSetDocValues Lucene.Net.Search.DocIdSetIterator Lucene.Net.Util.BytesRef Lucene.Net.Util.LongValues class Lucene.Net.Facet.SortedSet.SortedSetDocValuesFacetCounts super super Facets SortedSetDocValues string SortedSetDocValuesReaderState decl int OrdRange public override public override params params params if <= throw new + + if > throw new decl_stmt OrdRange = call SortedSetDocValuesReaderState.GetOrdRange() call SortedSetDocValuesReaderState.GetOrdRange() call SortedSetDocValuesReaderState.GetOrdRange() call SortedSetDocValuesReaderState.GetOrdRange() call SortedSetDocValuesReaderState.GetOrdRange() if == throw new + + return decl TopOrdAndIntQueue decl TopOrdAndIntQueue int int TopOrdAndIntQueue decl OrdAndValue decl OrdAndValue decl LabelAndValue int private private decl_stmt Lucene.Net.Facet.TopOrdAndIntQueue = decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt OrdAndValue = for = <= ++ if > += ++ if > if == = new = = if == = new = call TopOrdAndIntQueue.InsertWithOverflow() call TopOrdAndIntQueue.InsertWithOverflow() call TopOrdAndIntQueue.InsertWithOverflow() call TopOrdAndIntQueue.InsertWithOverflow() call TopOrdAndIntQueue.InsertWithOverflow() if call TopOrdAndIntQueue.Size() call TopOrdAndIntQueue.Size() call TopOrdAndIntQueue.Size() call TopOrdAndIntQueue.Size() call TopOrdAndIntQueue.Size() == = call TopOrdAndIntQueue.Top() call TopOrdAndIntQueue.Top() call TopOrdAndIntQueue.Top() call TopOrdAndIntQueue.Top() call TopOrdAndIntQueue.Top() if == return decl_stmt Lucene.Net.Facet.LabelAndValue = new call TopOrdAndIntQueue.Size() call TopOrdAndIntQueue.Size() call TopOrdAndIntQueue.Size() call TopOrdAndIntQueue.Size() call TopOrdAndIntQueue.Size() for = - >= -- decl_stmt OrdAndValue = call TopOrdAndIntQueue.Pop() call TopOrdAndIntQueue.Pop() call TopOrdAndIntQueue.Pop() call TopOrdAndIntQueue.Pop() call TopOrdAndIntQueue.Pop() decl_stmt var = new call SortedSetDocValues.LookupOrd() call SortedSetDocValues.LookupOrd() call SortedSetDocValues.LookupOrd() call SortedSetDocValues.LookupOrd() call SortedSetDocValues.LookupOrd() decl_stmt string = call decl TopOrdAndIntQueue.Utf8ToString() call decl TopOrdAndIntQueue.Utf8ToString() call decl TopOrdAndIntQueue.Utf8ToString() call decl TopOrdAndIntQueue.Utf8ToString() call decl TopOrdAndIntQueue.Utf8ToString() = new return new new int decl MultiDocValues int SortedSetDocValues int DocIdSetIterator int decl OrdinalMap int IndexReader var private private < decl_stmt Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap if is && > = else = decl_stmt Lucene.Net.Index.IndexReader = foreach in decl_stmt var = if ! throw new decl_stmt Lucene.Net.Index.SortedSetDocValues = call IndexReader.GetSortedSetDocValues() call IndexReader.GetSortedSetDocValues() call IndexReader.GetSortedSetDocValues() call IndexReader.GetSortedSetDocValues() call IndexReader.GetSortedSetDocValues() if == continue decl_stmt Lucene.Net.Search.DocIdSetIterator = if != decl_stmt int = decl_stmt int = int if < / decl_stmt int while = call SortedSetDocValues.NextDoc() call SortedSetDocValues.NextDoc() call SortedSetDocValues.NextDoc() call SortedSetDocValues.NextDoc() call SortedSetDocValues.NextDoc() != = decl_stmt int = int call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() while != int call decl MultiDocValues.GetGlobalOrd() call decl MultiDocValues.GetGlobalOrd() call decl MultiDocValues.GetGlobalOrd() call decl MultiDocValues.GetGlobalOrd() call decl MultiDocValues.GetGlobalOrd() ++ = int call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() else decl_stmt int = new decl_stmt int while = call SortedSetDocValues.NextDoc() call SortedSetDocValues.NextDoc() call SortedSetDocValues.NextDoc() call SortedSetDocValues.NextDoc() call SortedSetDocValues.NextDoc() != = decl_stmt int = int call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() while != ++ = int call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() for = < ++ decl_stmt int = if != int call decl MultiDocValues.GetGlobalOrd() call decl MultiDocValues.GetGlobalOrd() call decl MultiDocValues.GetGlobalOrd() call decl MultiDocValues.GetGlobalOrd() call decl MultiDocValues.GetGlobalOrd() += else decl_stmt int while = call SortedSetDocValues.NextDoc() call SortedSetDocValues.NextDoc() call SortedSetDocValues.NextDoc() call SortedSetDocValues.NextDoc() call SortedSetDocValues.NextDoc() != = decl_stmt int = int call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() while != ++ = int call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() call var.NextOrd() int public override public override params params params if != throw new decl_stmt int = int call Lucene.Net.Index.SortedSetDocValues.LookupTerm(BytesRef) call Lucene.Net.Index.SortedSetDocValues.LookupTerm(BytesRef) call Lucene.Net.Index.SortedSetDocValues.LookupTerm(BytesRef) call Lucene.Net.Index.SortedSetDocValues.LookupTerm(BytesRef) call Lucene.Net.Index.SortedSetDocValues.LookupTerm(BytesRef) new if < return - return FacetResult decl IList var public override < public override < decl_stmt System.Collections.Generic.IList < = new < foreach < in decl_stmt Lucene.Net.Facet.FacetResult = if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt var = call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() new return public virtual public virtual if int > int return - else if int > int return else return