Lucene.Net.Search.Spans System using System.Collections.Generic using System.Linq using System.Text using Lucene.Net.Support using Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.Bits Lucene.Net.Index.IndexReader Lucene.Net.Index.Term Lucene.Net.Index.TermContext Lucene.Net.Util.ToStringUtils class Lucene.Net.Search.Spans.SpanOrQuery super super SpanQuery super ICloneable decl IList string public public if == = else if != && ! throw new return call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() return public override public override < foreach in SpanOrQuery int decl SpanQuery public override public override decl_stmt int = decl_stmt Lucene.Net.Search.Spans.SpanQuery = new for = < ++ = decl_stmt Lucene.Net.Search.Spans.SpanOrQuery = new = return SpanQuery SpanOrQuery SpanQuery public override public override decl_stmt Lucene.Net.Search.Spans.SpanOrQuery = for = < ++ decl_stmt Lucene.Net.Search.Spans.SpanQuery = decl_stmt Lucene.Net.Search.Spans.SpanQuery = call SpanQuery.Rewrite() call SpanQuery.Rewrite() call SpanQuery.Rewrite() call SpanQuery.Rewrite() call SpanQuery.Rewrite() if != if == = = if != return else return StringBuilder decl IEnumerator SpanQuery public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt System.Collections.Generic.IEnumerator < = call decl IList.GetEnumerator() call decl IList.GetEnumerator() call decl IList.GetEnumerator() call decl IList.GetEnumerator() call decl IList.GetEnumerator() while call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt Lucene.Net.Search.Spans.SpanQuery = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call SpanQuery.ToString() call SpanQuery.ToString() call SpanQuery.ToString() call SpanQuery.ToString() call SpanQuery.ToString() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if > call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) call System.Text.StringBuilder.Remove(int,int,StringBuilder,int) - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) SpanOrQuery public override public override if == return if == || != return decl_stmt Lucene.Net.Search.Spans.SpanOrQuery = if ! call decl IList.SequenceEqual() call decl IList.SequenceEqual() call decl IList.SequenceEqual() call decl IList.SequenceEqual() call decl IList.SequenceEqual() return return == int public override public override decl_stmt int = == : call decl IList.First() call decl IList.First() call decl IList.First() call decl IList.First() call decl IList.First() call decl IList.Last() call decl IList.Last() call decl IList.Last() call decl IList.Last() call decl IList.Last() ^= << | uint >> ^= return public override public override if == if == return < else return < else return < public override public override < if == return return new decl IEnumerator Spans private private = new decl_stmt System.Collections.Generic.IEnumerator < = while call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt Spans = call decl IEnumerator.Current() call decl IEnumerator.Current() call decl IEnumerator.Current() call decl IEnumerator.Current() call decl IEnumerator.Current() call decl IEnumerator.Current() call decl IEnumerator.Current() call decl IEnumerator.Current() call decl IEnumerator.Current() += call Spans.Cost() call Spans.Cost() call Spans.Cost() call Spans.Cost() call Spans.Cost() if == - && call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() || != - && call Spans.SkipTo() call Spans.SkipTo() call Spans.SkipTo() call Spans.SkipTo() call Spans.SkipTo() return != public override public override if == return - if == return if return return != private private return bool public override public override if == return decl_stmt bool = while != && < if else = if return != return public override public override return public override public override return public override public override return Spans decl List decl_stmt System.Collections.Generic.List < = decl_stmt Spans = if != && = new < return Spans decl_stmt Spans = return != && public override public override return + + + == : > + + + + : public override public override return