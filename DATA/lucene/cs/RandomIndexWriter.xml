Lucene.Net.Index Lucene.Net.Randomized.Generators using System using System.Collections.Generic using System.Diagnostics using System.Threading using Lucene.Net.Util using Lucene.Net.Analysis.Analyzer Lucene.Net.Util.BytesRef Lucene.Net.Codecs.Codec Lucene.Net.Store.Directory Lucene.Net.Util.InfoStream Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Util.NullInfoStream Lucene.Net.Search.Query Lucene.Net.Util.TestUtil class Lucene.Net.Index.RandomIndexWriter super super IDisposable bool IndexWriter double Codec bool Random bool int int Random public static public static decl_stmt System.Random = new call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) return new public virtual public virtual if == public static public static = new return new public virtual public virtual < public virtual public virtual < if call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) == call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) new < else call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) public < < public < < return new return public public if return = = return return return public public throw new public public private private if ++ == if + call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) += * * if < *= public virtual public virtual < < call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocuments(IEnumerable,Analyzer) public virtual public virtual < < call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) public virtual public virtual < if call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) == call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) call Lucene.Net.Index.IndexWriter.UpdateDocuments(Term,IEnumerable) new else call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) public < < public < < return new return public public if return = = return return return public virtual public virtual throw new public public public virtual public virtual params params params call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) public virtual public virtual params params params call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) call Lucene.Net.Index.IndexWriter.AddIndexes(IndexReader) public virtual public virtual ? call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.IndexWriter.UpdateNumericDocValue(Term,string,long) public virtual public virtual call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.IndexWriter.UpdateBinaryDocValue(Term,string,BytesRef) public virtual public virtual call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) public virtual public virtual call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) call Lucene.Net.Index.IndexWriter.DeleteDocuments(Term) public virtual public virtual call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) public virtual public virtual return call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.NumDocs() public virtual public virtual return public virtual public virtual call Lucene.Net.Index.IndexWriter.DeleteAll() call Lucene.Net.Index.IndexWriter.DeleteAll() call Lucene.Net.Index.IndexWriter.DeleteAll() call Lucene.Net.Index.IndexWriter.DeleteAll() call Lucene.Net.Index.IndexWriter.DeleteAll() return public virtual public virtual call Lucene.Net.Index.IndexWriter.ForceMergeDeletes() call Lucene.Net.Index.IndexWriter.ForceMergeDeletes() call Lucene.Net.Index.IndexWriter.ForceMergeDeletes() call Lucene.Net.Index.IndexWriter.ForceMergeDeletes() call Lucene.Net.Index.IndexWriter.ForceMergeDeletes() public virtual public virtual call Lucene.Net.Index.IndexWriter.ForceMergeDeletes() call Lucene.Net.Index.IndexWriter.ForceMergeDeletes() call Lucene.Net.Index.IndexWriter.ForceMergeDeletes() call Lucene.Net.Index.IndexWriter.ForceMergeDeletes() call Lucene.Net.Index.IndexWriter.ForceMergeDeletes() = = int int private private if decl_stmt int = if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() || == if call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) else decl_stmt int = if + + call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) ! || <= + + + public virtual public virtual = if call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) == if ! || ! call Codec.Name() call Codec.Name() call Codec.Name() call Codec.Name() call Codec.Name() call Codec.Name() call Codec.Name() call Codec.Name() call Codec.Name() && call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() if if call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) == call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) return call Lucene.Net.Index.IndexWriter.GetReader(bool) call Lucene.Net.Index.IndexWriter.GetReader(bool) call Lucene.Net.Index.IndexWriter.GetReader(bool) call Lucene.Net.Index.IndexWriter.GetReader(bool) call Lucene.Net.Index.IndexWriter.GetReader(bool) else if call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) if call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() return else return call Lucene.Net.Index.IndexWriter.GetReader(bool) call Lucene.Net.Index.IndexWriter.GetReader(bool) call Lucene.Net.Index.IndexWriter.GetReader(bool) call Lucene.Net.Index.IndexWriter.GetReader(bool) call Lucene.Net.Index.IndexWriter.GetReader(bool) public public if == && call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) == call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) public virtual public virtual call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) public override public override public override public override if if public override public override return ||