Lucene.Net.Search System using Lucene.Net.Documents using NUnit.Framework using Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.Bits Lucene.Net.Store.Directory Lucene.Net.Index.DirectoryReader Documents.Document Field Lucene.Net.Util.FixedBitSet Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexWriter Lucene.Net.Util.LuceneTestCase Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Index.IndexWriterConfig.OpenMode_e Lucene.Net.Index.Term class attribute Lucene.Net.Search.TestFilteredSearch super super LuceneTestCase string Directory bool IndexWriter decl int SimpleDocIdSetFilter public virtual public virtual decl_stmt bool = decl_stmt Lucene.Net.Store.Directory = decl_stmt int = new decl_stmt SimpleDocIdSetFilter = new decl_stmt Lucene.Net.Index.IndexWriter = new new = call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) = new new call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() IndexSearcher Document decl ScoreDoc BooleanQuery IndexReader public virtual public virtual for = < ++ decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) if decl_stmt Lucene.Net.Search.BooleanQuery = new call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) new new decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Lucene.Net.Search.IndexSearcher = decl_stmt Lucene.Net.Search.ScoreDoc = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() int FixedBitSet int int public override public override decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new decl_stmt int = decl_stmt int = + for = < ++ decl_stmt int = if >= && < call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) - return call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() call Lucene.Net.Spatial.Util.FixedBitSet.Cardinality() == :