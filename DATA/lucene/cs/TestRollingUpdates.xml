Lucene.Net.Index System using Lucene.Net.Documents using Lucene.Net.Randomized.Generators using Lucene.Net.Store using Lucene.Net.Support using Lucene.Net.Util using NUnit.Framework using Lucene.Net.Codecs.Codec Lucene.Net.Search.IndexSearcher Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Search.TermQuery Lucene.Net.Search.TopDocs class attribute Lucene.Net.Index.TestRollingUpdates super super LuceneTestCase int long bool string int LineFileDocs Random SegmentInfos MockAnalyzer TopDocs Term IndexSearcher IndexReader IndexWriter decl Documents decl Document bool int BaseDirectoryWrapper int public virtual public virtual decl_stmt System.Random = new decl_stmt Lucene.Net.Store.BaseDirectoryWrapper = decl_stmt Lucene.Net.Util.LineFileDocs = new decl_stmt Lucene.Net.Analysis.MockAnalyzer = new = decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt int = decl_stmt int = decl_stmt Lucene.Net.Index.IndexReader = decl_stmt Lucene.Net.Search.IndexSearcher = decl_stmt int = * + * : * if + decl_stmt int = for = < ++ decl_stmt Lucene.Net.Documents.Document = call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() call Lucene.Net.Util.LineFileDocs.NextDoc() decl_stmt string = + if == - = else ++ if + + + call decl Documents.GetField() call decl Documents.GetField() call decl Documents.GetField() call decl Documents.GetField() call decl Documents.GetField() = decl_stmt Lucene.Net.Index.Term = new decl_stmt bool if != && < decl_stmt Lucene.Net.Search.TopDocs = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new = ! call Lucene.Net.Index.IndexWriter.TryDeleteDocument(IndexReader,int) call Lucene.Net.Index.IndexWriter.TryDeleteDocument(IndexReader,int) call Lucene.Net.Index.IndexWriter.TryDeleteDocument(IndexReader,int) call Lucene.Net.Index.IndexWriter.TryDeleteDocument(IndexReader,int) call Lucene.Net.Index.IndexWriter.TryDeleteDocument(IndexReader,int) if if else else = if ++ if call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.UpdateDocument(Term,IEnumerable,Analyzer) else call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) if >= && == if != call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() decl_stmt bool = if + = call Lucene.Net.Index.IndexWriter.GetReader(bool) call Lucene.Net.Index.IndexWriter.GetReader(bool) call Lucene.Net.Index.IndexWriter.GetReader(bool) call Lucene.Net.Index.IndexWriter.GetReader(bool) call Lucene.Net.Index.IndexWriter.GetReader(bool) if = else = ! || == + + + + + = if != call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.NumDocs() call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() decl_stmt Lucene.Net.Index.SegmentInfos = new call bool.Read() call bool.Read() call bool.Read() call bool.Read() call bool.Read() decl_stmt long = foreach in += decl_stmt long = foreach in call BaseDirectoryWrapper.ListAll() call BaseDirectoryWrapper.ListAll() call BaseDirectoryWrapper.ListAll() call BaseDirectoryWrapper.ListAll() call BaseDirectoryWrapper.ListAll() if ! += call BaseDirectoryWrapper.FileLength() call BaseDirectoryWrapper.FileLength() call BaseDirectoryWrapper.FileLength() call BaseDirectoryWrapper.FileLength() call BaseDirectoryWrapper.FileLength() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() int LineFileDocs decl IndexingThread IndexWriter int IndexReader Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Util.LineFileDocs = new for = < ++ decl_stmt Lucene.Net.Index.IndexWriter = new new decl_stmt int = decl_stmt int = decl_stmt IndexingThread = new for = < ++ = new for = < ++ call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt Lucene.Net.Index.IndexReader = call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Util.LineFileDocs.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() decl Documents DirectoryReader decl Document public override public override try decl_stmt Lucene.Net.Index.DirectoryReader = for = < ++ decl_stmt Lucene.Net.Documents.Document = new call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() new if == if == = decl_stmt Lucene.Net.Index.DirectoryReader = if != call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() = + + + + + + + if != call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() call DirectoryReader.Dispose() catch throw new