Lucene.Net.Search.Spell System using System.Collections.Generic using System.IO using System.Linq using Lucene.Net.Index using Lucene.Net.Util using Lucene.Net.Util.Automaton using class Lucene.Net.Search.Spell.DirectSpellChecker int int StringDistance decl IComparer StringDistance float int bool int float float return if < || || throw new = return = return = return = return if >= && != int throw new = return = return if >= && != int throw new = return = return = return = public virtual public virtual return public virtual public virtual return var decl ICollection int int string var decl SuggestWord CharsRef SuggestWord int int public virtual public virtual decl_stmt Lucene.Net.Util.CharsRef = new decl_stmt string = if > && call string.CodePointCount() call string.CodePointCount() call string.CodePointCount() call string.CodePointCount() call string.CodePointCount() < return new if = new call string.ToLower() call string.ToLower() call string.ToLower() call string.ToLower() call string.ToLower() decl_stmt int = if == && > return new decl_stmt int = if >= && > return new else if > int * float return new if != = if >= = int else if > = * float - decl_stmt System.Collections.Generic.ICollection < = decl_stmt int = * = if > && < decl_stmt var = new < call var.AddAll() call var.AddAll() call var.AddAll() call var.AddAll() call var.AddAll() call var.AddAll() call var.AddAll() call var.AddAll() call var.AddAll() call var.AddAll() = decl_stmt var = new decl_stmt int = - foreach in decl_stmt SpellChecker.Net.Search.Spell.SuggestWord = new if == = call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() = = = -- = if < decl_stmt SpellChecker.Net.Search.Spell.SuggestWord = new = return BoostAttribute Terms float BytesRef string MaxNonCompetitiveBoostAttribute int BytesRef var ScoreTerm float var FuzzyTermsEnum protected internal virtual < protected internal virtual < decl_stmt var = new decl_stmt Lucene.Net.Search.MaxNonCompetitiveBoostAttribute = < decl_stmt Lucene.Net.Index.Terms = if == return < decl_stmt Lucene.Net.Search.FuzzyTermsEnum = new - decl_stmt var = new < decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt Lucene.Net.Util.BytesRef decl_stmt ScoreTerm = new decl_stmt Lucene.Net.Search.BoostAttribute = call FuzzyTermsEnum.Attributes() call FuzzyTermsEnum.Attributes() call FuzzyTermsEnum.Attributes() call FuzzyTermsEnum.Attributes() call FuzzyTermsEnum.Attributes() < while = call Lucene.Net.Search.FuzzyTermsEnum.Next() call Lucene.Net.Search.FuzzyTermsEnum.Next() call Lucene.Net.Search.FuzzyTermsEnum.Next() call Lucene.Net.Search.FuzzyTermsEnum.Next() call Lucene.Net.Search.FuzzyTermsEnum.Next() != decl_stmt float = if call var.Size() call var.Size() call var.Size() call var.Size() call var.Size() >= && <= call var.Peek() call var.Peek() call var.Peek() call var.Peek() call var.Peek() continue if call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) call Lucene.Net.Util.BytesRef.BytesEquals(BytesRef) continue decl_stmt int = call Lucene.Net.Search.FuzzyTermsEnum.DocFreq() call Lucene.Net.Search.FuzzyTermsEnum.DocFreq() call Lucene.Net.Search.FuzzyTermsEnum.DocFreq() call Lucene.Net.Search.FuzzyTermsEnum.DocFreq() call Lucene.Net.Search.FuzzyTermsEnum.DocFreq() if <= continue decl_stmt float decl_stmt string if == = = / + else = = call StringDistance.GetDistance() call StringDistance.GetDistance() call StringDistance.GetDistance() call StringDistance.GetDistance() call StringDistance.GetDistance() if < continue = = = = = call var.Offer() call var.Offer() call var.Offer() call var.Offer() call var.Offer() = call var.Size() call var.Size() call var.Size() call var.Size() call var.Size() > call var.Poll() call var.Poll() call var.Poll() call var.Poll() call var.Poll() : new = call var.Size() call var.Size() call var.Size() call var.Size() call var.Size() >= call var.Peek() call var.Peek() call var.Peek() call var.Peek() call var.Peek() : return public virtual public virtual if return if == return else return int int public override public override decl_stmt int const const = decl_stmt int = = * + == : return ScoreTerm public override public override if == return if == return if != return decl_stmt ScoreTerm = if == if != return else if ! return return