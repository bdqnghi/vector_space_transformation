Lucene.Net.Index System using System.Collections.Generic using Lucene.Net.Documents using Lucene.Net.Analysis using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Search using Lucene.Net.Store using Lucene.Net.Support using Lucene.Net.Util using NUnit.Framework using System.Runtime.CompilerServices using Lucene.Net.Codecs.Codec class attribute attribute Lucene.Net.Index.Test2BTerms super super LuceneTestCase BytesRef int int public override public override if >= return decl_stmt int = for = < ++ = unchecked >> & -= ++ ++ if -- == + = return public override public override = public public return public override public override public override public override return == public override public override return public override public override public override public override throw new var public override public override public override < decl_stmt var = typeof if == typeof return new if call var.IsSubclassOf() call var.IsSubclassOf() call var.IsSubclassOf() call var.IsSubclassOf() call var.IsSubclassOf() typeof throw new return < decl IList decl IList MyTokenStream IndexReader decl Documents int decl Document int long FieldType long MergePolicy IndexWriter Field decl CheckIndex BaseDirectoryWrapper int public virtual public virtual if throw new decl_stmt long = long + decl_stmt int = decl_stmt System.Collections.Generic.IList < = decl_stmt Lucene.Net.Store.BaseDirectoryWrapper = if is = = if decl_stmt Lucene.Net.Index.IndexWriter = new new new new decl_stmt Lucene.Net.Index.MergePolicy = if is = * * decl_stmt Lucene.Net.Documents.Document = new decl_stmt MyTokenStream = new decl_stmt Lucene.Net.Documents.FieldType = new = = decl_stmt Lucene.Net.Documents.Field = new call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() call decl Documents.Add() decl_stmt int = / + + for = < ++ decl_stmt long = call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) + + + + - + = call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt Lucene.Net.Index.IndexReader = if == = decl_stmt int = decl_stmt System.Collections.Generic.IList < = new < call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() - call long.Dispose() call long.Dispose() call long.Dispose() call long.Dispose() call long.Dispose() decl_stmt System.IdentityModel.Protocols.WSTrust.Status = decl_stmt long = > + + + call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() decl IList BytesRef int TermsEnum private < private < decl_stmt Lucene.Net.Index.TermsEnum = decl_stmt System.Collections.Generic.IList < = new < decl_stmt int = decl_stmt Lucene.Net.Util.BytesRef while = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() != if -- == call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() + = return int BytesRef TermsEnum long long bool IndexSearcher decl TermsEnum private private < + + + decl_stmt Lucene.Net.Search.IndexSearcher = = decl_stmt Lucene.Net.Index.TermsEnum = decl_stmt bool = for = < * ++ decl_stmt Lucene.Net.Util.BytesRef = + decl_stmt long = decl_stmt int = call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) call Lucene.Net.Search.IndexSearcher.Search(IList,Weight,Collector) new new if <= + = decl_stmt long = + - + decl_stmt SeekStatus = call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) if != if == else + call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() =