Lucene.Net.Store System using System.Threading using Lucene.Net.Support using System.IO using System.Net using System.Net.Sockets using Lucene.Net.Util.IOUtils class Lucene.Net.Store.LockVerifyServer private static private static return + / - / + decl int object IPEndPoint CountdownEvent int int Socket decl ThreadClass IPAddress IPHostEntry public static public static if != decl_stmt int = decl_stmt System.Net.IPHostEntry = ++ decl_stmt System.Net.IPAddress = decl_stmt System.Net.IPEndPoint = new decl_stmt int = ++ using = new + + decl_stmt object = new decl_stmt int = new = - decl_stmt System.Threading.CountdownEvent = new decl_stmt Lucene.Net.Support.ThreadClass = new for = < ++ decl_stmt System.Net.Sockets.Socket = = new call System.Threading.CountdownEvent.Signal() call System.Threading.CountdownEvent.Signal() call System.Threading.CountdownEvent.Signal() call System.Threading.CountdownEvent.Signal() call System.Threading.CountdownEvent.Signal() foreach in int BinaryWriter int int BinaryReader public override public override using = new = new decl_stmt System.IO.BinaryReader = new decl_stmt System.IO.BinaryWriter = new try decl_stmt int = call System.IO.BinaryReader.ReadInt32() call System.IO.BinaryReader.ReadInt32() call System.IO.BinaryReader.ReadInt32() call System.IO.BinaryReader.ReadInt32() call System.IO.BinaryReader.ReadInt32() if < throw new call System.IO.BinaryWriter.Write(int) call System.IO.BinaryWriter.Write(int) call System.IO.BinaryWriter.Write(int) call System.IO.BinaryWriter.Write(int) call System.IO.BinaryWriter.Write(int) while decl_stmt int = call System.IO.BinaryReader.ReadInt32() call System.IO.BinaryReader.ReadInt32() call System.IO.BinaryReader.ReadInt32() call System.IO.BinaryReader.ReadInt32() call System.IO.BinaryReader.ReadInt32() if < return lock decl_stmt int = if == - return switch case if != - = - throw new + + + + = break case if != = - throw new + + + + = - break default: throw new + call System.IO.BinaryWriter.Write(int) call System.IO.BinaryWriter.Write(int) call System.IO.BinaryWriter.Write(int) call System.IO.BinaryWriter.Write(int) call System.IO.BinaryWriter.Write(int) catch throw finally