Lucene.Net.Facet.Taxonomy System using System.Diagnostics using System.Collections.Generic using Lucene.Net.Facet.FacetsConfig.DimConfig class Lucene.Net.Facet.Taxonomy.FloatTaxonomyFacets super super TaxonomyFacets decl float string decl FacetsConfig decl DimConfig protected virtual protected virtual foreach < in decl_stmt string = decl_stmt DimConfig = if && == decl_stmt int = new > += float float private private decl_stmt float = while != decl_stmt float = + = += = return decl FacetsConfig decl DimConfig public override public override params params params decl_stmt DimConfig = if == if && == else if && else throw new decl_stmt int = new if < return - return int int decl FacetsConfig TopOrdAndFloatQueue decl LabelAndValue int decl TopOrdAndFloatQueue FacetLabel float decl DimConfig decl OrdAndValue float public override public override params params params if <= throw new + + decl_stmt DimConfig = decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = new decl_stmt int = if == - return decl_stmt Lucene.Net.Facet.TopOrdAndFloatQueue = new decl_stmt float = decl_stmt int = decl_stmt float = decl_stmt int = decl_stmt OrdAndValue = while != if > += ++ if > if == = new = = = call int.InsertWithOverflow() call int.InsertWithOverflow() call int.InsertWithOverflow() call int.InsertWithOverflow() call int.InsertWithOverflow() if call int.Size() call int.Size() call int.Size() call int.Size() call int.Size() == = call int.Top() call int.Top() call int.Top() call int.Top() call int.Top() = if == return if if = else = - else decl_stmt Lucene.Net.Facet.LabelAndValue = new call int.Size() call int.Size() call int.Size() call int.Size() call int.Size() for = - >= -- decl_stmt OrdAndValue = call int.Pop() call int.Pop() call int.Pop() call int.Pop() call int.Pop() decl_stmt Lucene.Net.Facet.Taxonomy.FacetLabel = = new return new