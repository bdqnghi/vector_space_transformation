Lucene.Net.Codecs.Lucene40 System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Util.ArrayUtil Lucene.Net.Index.AtomicReader Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Store.DataInput Lucene.Net.Store.Directory Lucene.Net.Index.FieldInfo Lucene.Net.Index.FieldInfos Lucene.Net.Index.Fields Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexOutput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Index.MergeState Lucene.Net.Index.SegmentReader Lucene.Net.Util.StringHelper class Lucene.Net.Codecs.Lucene40.Lucene40TermVectorsWriter super super TermVectorsWriter int bool IndexOutput int bool string BytesRef BytesRef decl int decl int int BytesRef int int Directory decl long int string int bool int public override public override = = call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call decl long.WriteVInt() call decl long.WriteVInt() call decl long.WriteVInt() call decl long.WriteVInt() call decl long.WriteVInt() = = sbyte public override public override == || > + + + = = = = = = - ++ = call decl long.WriteVInt() call decl long.WriteVInt() call decl long.WriteVInt() call decl long.WriteVInt() call decl long.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() decl_stmt sbyte = if |= if |= if |= call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() call int.WriteByte() byte public override public override == for = < ++ call decl long.WriteVLong() call decl long.WriteVLong() call decl long.WriteVLong() call decl long.WriteVLong() call decl long.WriteVLong() - - int int public override public override decl_stmt int = decl_stmt int = - call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteBytes() call int.WriteBytes() call int.WriteBytes() call int.WriteBytes() call int.WriteBytes() + call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call decl int.CopyBytes() call decl int.CopyBytes() call decl int.CopyBytes() call decl int.CopyBytes() call decl int.CopyBytes() = = if && = = = = = int int public override public override if for = < ++ decl_stmt int = if & == decl_stmt int = = uint >> else uint >> call int.WriteBytes() call int.WriteBytes() call int.WriteBytes() call int.WriteBytes() call int.WriteBytes() else if != for = < ++ call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() uint >> if != for = < ++ call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() public override public override if && || - = if = = ++ else if - = else if call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() - call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() - = public override public override if > && || == if call int.WriteBytes() call int.WriteBytes() call int.WriteBytes() call int.WriteBytes() call int.WriteBytes() if for = < ++ call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() - call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() - = int private private if decl_stmt int = == : if != = call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() << | call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() else call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() << if > if + < throw new call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() else call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() call int.WriteVInt() public override public override try catch long long long long private private decl_stmt long = decl_stmt long = decl_stmt long = decl_stmt long = for = < ++ call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() += call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() += call decl long.CopyBytes() call decl long.CopyBytes() call decl long.CopyBytes() call decl long.CopyBytes() call decl long.CopyBytes() - call int.CopyBytes() call int.CopyBytes() call int.CopyBytes() call int.CopyBytes() call int.CopyBytes() - == == SegmentReader int AtomicReader TermVectorsReader decl int decl int int Lucene40TermVectorsReader public override public override decl_stmt int = new decl_stmt int = new decl_stmt int = decl_stmt int = for = < ++ decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Index.SegmentReader = ++ decl_stmt Lucene.Net.Codecs.Lucene40.Lucene40TermVectorsReader = if != decl_stmt Lucene.Net.Index.TermVectorsReader = if != && is = if != += else += return int Fields int int Bits private private decl_stmt int = decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt int = if != for = < if ! call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() ++ continue decl_stmt int = = do ++ ++ if >= break if ! call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() ++ break < += * else for = < ++ if ! call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() call Bits.Get() continue decl_stmt Lucene.Net.Index.Fields = ++ return Fields int int int private private decl_stmt int = if != decl_stmt int = while < decl_stmt int = - += * else for = < ++ decl_stmt Lucene.Net.Index.Fields = return public override public override if + long * != throw new + + + + + call IndexOutput.ToString() call IndexOutput.ToString() call IndexOutput.ToString() call IndexOutput.ToString() call IndexOutput.ToString() + protected override protected override if = = = return