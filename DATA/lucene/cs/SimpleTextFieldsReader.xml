Lucene.Net.Codecs.SimpleText System using System.Diagnostics using System.Collections.Generic using System.Linq using Support using Util.Fst using Index.DocsAndPositionsEnum Index.DocsEnum Index.FieldInfo Index.FieldInfo.IndexOptions Index.FieldInfos Index.SegmentReadState Index.Terms Index.TermsEnum Store.BufferedChecksumIndexInput Store.ChecksumIndexInput Store.IndexInput Util.ArrayUtil Util.Bits Util.BytesRef Util.CharsRef Util.FixedBitSet Util.IOUtils Util.IntsRef Util.StringHelper Util.UnicodeUtil Util.Fst.BytesRefFSTEnum<<<Util.Fst.<Util.Fst.PairOutputs<<long<<longlong.Pair Util.Fst.FST Util.Fst.PairOutputs<<long<<longlong Util.Fst.PositiveIntOutputs Util.Fst.Util class Lucene.Net.Codecs.SimpleText.SimpleTextFieldsReader super super FieldsProducer int decl SortedDictionary FieldInfos decl IDictionary IndexInput ChecksumIndexInput var var var private < ? private < ? decl_stmt Lucene.Net.Store.ChecksumIndexInput = new decl_stmt var = new decl_stmt var = new < ? while if call var.Equals() call var.Equals() call var.Equals() call var.Equals() call var.Equals() return if decl_stmt var = call var.Bytes() call var.Bytes() call var.Bytes() call var.Bytes() call var.Bytes() call var.Bytes() call var.Bytes() call var.Bytes() call var.Bytes() + - = var var var public override public override decl_stmt var = if == return decl_stmt var = decl_stmt var = = = int = return var var var public override public override decl_stmt var = if == return decl_stmt var = decl_stmt var = = = int = return call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() : var var var public override public override decl_stmt var = if == return decl_stmt var = decl_stmt var = = = int = return public override public override return public override public override throw new public override public override throw new public override public override return public override public override return == - : SimpleTextDocsEnum public override public override decl_stmt SimpleTextDocsEnum if is && = else = new return call SimpleTextDocsEnum.Reset() call SimpleTextDocsEnum.Reset() call SimpleTextDocsEnum.Reset() call SimpleTextDocsEnum.Reset() call SimpleTextDocsEnum.Reset() == SimpleTextDocsAndPositionsEnum public override public override if < return decl_stmt SimpleTextDocsAndPositionsEnum if is && = else = new return call SimpleTextDocsAndPositionsEnum.Reset() call SimpleTextDocsAndPositionsEnum.Reset() call SimpleTextDocsAndPositionsEnum.Reset() call SimpleTextDocsAndPositionsEnum.Reset() call SimpleTextDocsAndPositionsEnum.Reset() return public public return == public public = = = - = = return public override public override return public override public override return long int bool public override public override if == return decl_stmt bool = decl_stmt int = while decl_stmt long = if if ! && == || if ! = return + - = = = else if + - = else if else if else if else if else || || + if ! && == || if ! = return return = public override public override return public override public override return public public return == public public = = = - = >= = >= if ! = - = - = return public override public override return public override public override return long long bool public override public override decl_stmt bool = decl_stmt long = while decl_stmt long = if if ! && == || = return + - = = = else if + - = = else if else if else if else if else || || if ! && == || = return return = public override public override return long int int public override public override decl_stmt int if + + - = else = - if + + - = + + - = decl_stmt long = if decl_stmt int = - if < = = else = return public override public override return public override public override return return public override public override return var var var int var var var var long long int int var private private decl_stmt var = decl_stmt var = new < ? ? decl_stmt var = new < ? < ? ? < ? ? decl_stmt var = new < < ? < ? ? < ? ? < ? < ? ? < ? ? decl_stmt var = call var.Seek() call var.Seek() call var.Seek() call var.Seek() call var.Seek() decl_stmt var = new decl_stmt long = - decl_stmt int = decl_stmt long = decl_stmt var = new decl_stmt var = new while if || if != - call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() += break if ++ ++ + - decl_stmt int = call var.Set() call var.Set() call var.Set() call var.Set() call var.Set() else if + - += else if if != - call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() call var.NewPair() = decl_stmt int = - if > call var.Grow() call var.Grow() call var.Grow() call var.Grow() call var.Grow() = = += = ++ = call var.Cardinality() call var.Cardinality() call var.Cardinality() call var.Cardinality() call var.Cardinality() = call var.Finish() call var.Finish() call var.Finish() call var.Finish() call var.Finish() public public return != : public override public override return != && new : return public override public override return return == - : return return public override public override return >= public override public override return >= public override public override return >= public override public override return public override < public override < return call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() var Terms public override public override lock decl_stmt Lucene.Net.Index.Terms = if != return decl_stmt var = if == return = new = return return - public override public override call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() public override public override return call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() != : public override public override