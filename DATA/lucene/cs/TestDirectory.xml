Lucene.Net.Store Lucene.Net.Attributes using Lucene.Net.Randomized.Generators using Lucene.Net.Support using Lucene.Net.Util using NUnit.Framework using System using System.IO using Lucene.Net.Util.LuceneTestCase Lucene.Net.Util.TestUtil Lucene.Net.Store.MockDirectoryWrapper.Throttling_e class attribute Lucene.Net.Store.TestDirectory super super LuceneTestCase DirectoryInfo decl Directory public virtual public virtual decl_stmt System.IO.DirectoryInfo = new decl_stmt Lucene.Net.Store.Directory = new new new new foreach in try catch TheThread TheThread2 BaseDirectoryWrapper public virtual public virtual decl_stmt Lucene.Net.Store.BaseDirectoryWrapper = = if is = if decl_stmt TheThread = new decl_stmt TheThread2 = new call TheThread.Start() call TheThread.Start() call TheThread.Start() call TheThread.Start() call TheThread.Start() call TheThread2.Start() call TheThread2.Start() call TheThread2.Start() call TheThread2.Start() call TheThread2.Start() call TheThread.Join() call TheThread.Join() call TheThread.Join() call TheThread.Join() call TheThread.Join() call TheThread2.Join() call TheThread2.Join() call TheThread2.Join() call TheThread2.Join() call TheThread2.Join() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() string public override public override for = < ++ decl_stmt string = + try using = catch throw new decl string public override public override for = < ++ try decl_stmt string = foreach in try using = catch catch if ! throw new if break catch throw new FSDirectory IndexOutput FSDirectory decl byte Lock FSDirectory string FSDirectory FSDirectory DirectoryInfo var string public virtual public virtual decl_stmt System.IO.DirectoryInfo = decl_stmt byte = new * = new for = < ++ = byte decl_stmt var = new new new new for = < ++ decl_stmt Lucene.Net.Store.FSDirectory = call string.EnsureOpen() call string.EnsureOpen() call string.EnsureOpen() call string.EnsureOpen() call string.EnsureOpen() decl_stmt string = + decl_stmt string = + + decl_stmt IndexOutput = call string.CreateOutput() call string.CreateOutput() call string.CreateOutput() call string.CreateOutput() call string.CreateOutput() call FSDirectory.WriteByte() call FSDirectory.WriteByte() call FSDirectory.WriteByte() call FSDirectory.WriteByte() call FSDirectory.WriteByte() byte sbyte call FSDirectory.WriteBytes() call FSDirectory.WriteBytes() call FSDirectory.WriteBytes() call FSDirectory.WriteBytes() call FSDirectory.WriteBytes() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() for = < ++ decl_stmt Lucene.Net.Store.FSDirectory = call Lock.EnsureOpen() call Lock.EnsureOpen() call Lock.EnsureOpen() call Lock.EnsureOpen() call Lock.EnsureOpen() + call Lock.FileLength() call Lock.FileLength() call Lock.FileLength() call Lock.FileLength() call Lock.FileLength() if is && ! continue decl_stmt Lucene.Net.Store.IndexInput = call Lock.OpenInput() call Lock.OpenInput() call Lock.OpenInput() call Lock.OpenInput() call Lock.OpenInput() byte call FSDirectory.ReadByte() call FSDirectory.ReadByte() call FSDirectory.ReadByte() call FSDirectory.ReadByte() call FSDirectory.ReadByte() byte call FSDirectory.ReadBytes() call FSDirectory.ReadBytes() call FSDirectory.ReadBytes() call FSDirectory.ReadBytes() call FSDirectory.ReadBytes() call Lucene.Net.Store.FSDirectory.Seek(long) call Lucene.Net.Store.FSDirectory.Seek(long) call Lucene.Net.Store.FSDirectory.Seek(long) call Lucene.Net.Store.FSDirectory.Seek(long) call Lucene.Net.Store.FSDirectory.Seek(long) byte call FSDirectory.ReadBytes() call FSDirectory.ReadBytes() call FSDirectory.ReadBytes() call FSDirectory.ReadBytes() call FSDirectory.ReadBytes() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() + for = < ++ decl_stmt Lucene.Net.Store.FSDirectory = decl_stmt Lucene.Net.Store.Lock = call string.MakeLock() call string.MakeLock() call string.MakeLock() call string.MakeLock() call string.MakeLock() call FSDirectory.Obtain() call FSDirectory.Obtain() call FSDirectory.Obtain() call FSDirectory.Obtain() call FSDirectory.Obtain() for = < ++ decl_stmt Lucene.Net.Store.FSDirectory = decl_stmt Lucene.Net.Store.Lock = call Lock.MakeLock() call Lock.MakeLock() call Lock.MakeLock() call Lock.MakeLock() call Lock.MakeLock() try call FSDirectory.Obtain() call FSDirectory.Obtain() call FSDirectory.Obtain() call FSDirectory.Obtain() call FSDirectory.Obtain() catch call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() = + call FSDirectory.Obtain() call FSDirectory.Obtain() call FSDirectory.Obtain() call FSDirectory.Obtain() call FSDirectory.Obtain() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() call Lucene.Net.Store.FSDirectory.Dispose() for = < ++ decl_stmt Lucene.Net.Store.FSDirectory = call string.EnsureOpen() call string.EnsureOpen() call string.EnsureOpen() call string.EnsureOpen() call string.EnsureOpen() call string.Dispose() call string.Dispose() call string.Dispose() call string.Dispose() call string.Dispose() var var Directory public virtual public virtual decl_stmt var = decl_stmt var = new try ! decl_stmt Lucene.Net.Store.Directory = new ! call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() finally if public virtual public virtual new public virtual public virtual string private private decl_stmt string = try finally var Directory public virtual public virtual decl_stmt var = new try new decl_stmt Lucene.Net.Store.Directory = new new finally IndexOutput DirectoryInfo Directory var public virtual public virtual decl_stmt System.IO.DirectoryInfo = new decl_stmt Lucene.Net.Store.Directory = new try decl_stmt IndexOutput = call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() try decl_stmt var = new new catch finally call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() var public virtual public virtual decl_stmt var = using = new using = try catch try + catch