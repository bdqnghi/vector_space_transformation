Lucene.Net.Util System.Collections using System.Collections.Generic using System.Diagnostics using System using class super decl TermMergeQueue bool int T public public if call decl TermMergeQueue.Size() call decl TermMergeQueue.Size() call decl TermMergeQueue.Size() call decl TermMergeQueue.Size() call decl TermMergeQueue.Size() > else return return return return public public throw new public public private private == ++ = call decl TermMergeQueue.Pop() call decl TermMergeQueue.Pop() call decl TermMergeQueue.Pop() call decl TermMergeQueue.Pop() call decl TermMergeQueue.Pop() if while call decl TermMergeQueue.Size() call decl TermMergeQueue.Size() call decl TermMergeQueue.Size() call decl TermMergeQueue.Size() call decl TermMergeQueue.Size() != && call decl TermMergeQueue.Top() call decl TermMergeQueue.Top() call decl TermMergeQueue.Top() call decl TermMergeQueue.Top() call decl TermMergeQueue.Top() ++ = call decl TermMergeQueue.Pop() call decl TermMergeQueue.Pop() call decl TermMergeQueue.Pop() call decl TermMergeQueue.Pop() call decl TermMergeQueue.Pop() = private private for = < ++ if = call decl TermMergeQueue.Add() call decl TermMergeQueue.Add() call decl TermMergeQueue.Add() call decl TermMergeQueue.Add() call decl TermMergeQueue.Add() else = default = int public override public override < < decl_stmt int = if != return < else return <