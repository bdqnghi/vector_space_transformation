Lucene.Net.Index Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Documents using Lucene.Net.Analysis using Lucene.Net.Support using NUnit.Framework using System.IO using Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Documents.Document Field Lucene.Net.Store.IndexInput Lucene.Net.Store.IOContext Lucene.Net.Codecs.Lucene41.Lucene41PostingsFormat Lucene.Net.Util.LuceneTestCase Lucene.Net.Store.MockDirectoryWrapper Lucene.Net.Store.RAMDirectory Lucene.Net.Util.TestUtil class attribute Lucene.Net.Index.TestMultiLevelSkipList super super LuceneTestCase int IndexInput public override public override decl_stmt Lucene.Net.Store.IndexInput = if = new return public override public override = Term IndexWriter DocsAndPositionsEnum AtomicReader Directory Document public virtual public virtual decl_stmt Lucene.Net.Store.Directory = new new decl_stmt Lucene.Net.Index.IndexWriter = new new new decl_stmt Lucene.Net.Index.Term = new for = < ++ decl_stmt Lucene.Net.Documents.Document = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.Commit(SegmentInfos) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.ForceMerge(int,bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) decl_stmt Lucene.Net.Index.AtomicReader = for = < ++ = decl_stmt DocsAndPositionsEnum = call Lucene.Net.Index.AtomicReader.TermPositionsEnum(Term) call Lucene.Net.Index.AtomicReader.TermPositionsEnum(Term) call Lucene.Net.Index.AtomicReader.TermPositionsEnum(Term) call Lucene.Net.Index.AtomicReader.TermPositionsEnum(Term) call Lucene.Net.Index.AtomicReader.TermPositionsEnum(Term) BytesRef public virtual public virtual if < + + + + + + + decl_stmt Lucene.Net.Util.BytesRef = sbyte sbyte + + + sbyte Tokenizer public override public override decl_stmt Lucene.Net.Analysis.Tokenizer = new return new new bool public sealed override public sealed override decl_stmt bool = if = new new byte return public override public override ++ return public override public override += public override public override return public override public override public override public override return public override public override return new