Lucene.Net.Index System using System.Collections.Generic using Lucene.Net.Store.IndexOutput Lucene.Net.Store.RAMOutputStream Lucene.Net.Util.ArrayUtil class Lucene.Net.Index.TermVectorsTermsWriter super super TermsHashConsumer IndexOutput decl PerDoc int int DocumentsWriter int IndexOutput TermVectorsWriter IndexOutput private private = new public override public override return new int internal override internal override decl_stmt int = + for = < ++ = new TermVectorsTermsWriterPerField TermVectorsTermsWriterPerThread public override public override < < lock if != if > - call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() call IndexOutput.Flush() foreach in foreach in decl_stmt Lucene.Net.Index.TermVectorsTermsWriterPerField = call TermVectorsTermsWriterPerField.termsHashPerField() call TermVectorsTermsWriterPerField.termsHashPerField() call TermVectorsTermsWriterPerField.termsHashPerField() call TermVectorsTermsWriterPerField.termsHashPerField() call TermVectorsTermsWriterPerField.termsHashPerField() call TermVectorsTermsWriterPerField.termsHashPerField() call TermVectorsTermsWriterPerField.termsHashPerField() call TermVectorsTermsWriterPerField.termsHashPerField() call TermVectorsTermsWriterPerField.termsHashPerField() call Lucene.Net.Index.TermVectorsTermsWriterPerField.ShrinkHash() call Lucene.Net.Index.TermVectorsTermsWriterPerField.ShrinkHash() call Lucene.Net.Index.TermVectorsTermsWriterPerField.ShrinkHash() call Lucene.Net.Index.TermVectorsTermsWriterPerField.ShrinkHash() call Lucene.Net.Index.TermVectorsTermsWriterPerField.ShrinkHash() decl_stmt Lucene.Net.Index.TermVectorsTermsWriterPerThread = call TermVectorsTermsWriterPerThread.termsHashPerThread() call TermVectorsTermsWriterPerThread.termsHashPerThread() call TermVectorsTermsWriterPerThread.termsHashPerThread() call TermVectorsTermsWriterPerThread.termsHashPerThread() call TermVectorsTermsWriterPerThread.termsHashPerThread() call TermVectorsTermsWriterPerThread.termsHashPerThread() call TermVectorsTermsWriterPerThread.termsHashPerThread() call TermVectorsTermsWriterPerThread.termsHashPerThread() call TermVectorsTermsWriterPerThread.termsHashPerThread() decl System internal override internal override lock if != - call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() = != decl_stmt System.String = + + if + long * != throw new + + + + + + + + + + + + + call DocumentsWriter.RemoveOpenFile() call DocumentsWriter.RemoveOpenFile() call DocumentsWriter.RemoveOpenFile() call DocumentsWriter.RemoveOpenFile() call DocumentsWriter.RemoveOpenFile() + + call DocumentsWriter.RemoveOpenFile() call DocumentsWriter.RemoveOpenFile() call DocumentsWriter.RemoveOpenFile() call DocumentsWriter.RemoveOpenFile() call DocumentsWriter.RemoveOpenFile() + + call DocumentsWriter.RemoveOpenFile() call DocumentsWriter.RemoveOpenFile() call DocumentsWriter.RemoveOpenFile() call DocumentsWriter.RemoveOpenFile() call DocumentsWriter.RemoveOpenFile() + + = internal internal lock if == ++ if > == + = new return new else return -- int int long internal internal decl_stmt int = decl_stmt int = + if < decl_stmt long = while < call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() ++ decl System internal internal lock if == decl_stmt System.String = if == return != = call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() + + = call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() + + = call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() call DocumentsWriter.directory() + + call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call IndexOutput.WriteInt() call DocumentsWriter.AddOpenFile() call DocumentsWriter.AddOpenFile() call DocumentsWriter.AddOpenFile() call DocumentsWriter.AddOpenFile() call DocumentsWriter.AddOpenFile() + + call DocumentsWriter.AddOpenFile() call DocumentsWriter.AddOpenFile() call DocumentsWriter.AddOpenFile() call DocumentsWriter.AddOpenFile() call DocumentsWriter.AddOpenFile() + + call DocumentsWriter.AddOpenFile() call DocumentsWriter.AddOpenFile() call DocumentsWriter.AddOpenFile() call DocumentsWriter.AddOpenFile() call DocumentsWriter.AddOpenFile() + + = long long internal internal lock call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() if > for = < ++ call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() == decl_stmt long = for = < ++ decl_stmt long = call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() call IndexOutput.WriteVLong() - = = == + ++ call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() call DocumentsWriter.writer() public public return public override public override if != try call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() catch = if != try call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() catch = if != try call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() call IndexOutput.Close() catch = = internal internal lock < ++ = private private = = = new return internal internal = public override public override internal internal if == = = = = ++ public override public override return public override public override internal override internal override return + *