Lucene.Net.Index System.Collections using System.Collections.Generic using System.Diagnostics using Lucene.Net.Support using System using Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef class Lucene.Net.Index.MultiTermsEnum super super TermsEnum decl MultiDocsAndPositionsEnum int decl TermsEnumWithSlice decl EnumWithSlice decl TermsEnumWithSlice decl TermsEnumWithSlice TermMergeQueue int BytesRef BytesRef decl MultiDocsEnum decl EnumWithSlice bool return return public override public override return return TermsEnumWithSlice BytesRef TermsEnumIndex decl IComparer public public <= = = = call TermMergeQueue.Clear() call TermMergeQueue.Clear() call TermMergeQueue.Clear() call TermMergeQueue.Clear() call TermMergeQueue.Clear() for = < ++ decl_stmt TermsEnumIndex = != if == = = else decl_stmt System.Collections.Generic.IComparer < = if != && ! call decl IComparer.Equals() call decl IComparer.Equals() call decl IComparer.Equals() call decl IComparer.Equals() call decl IComparer.Equals() throw new + + + + decl_stmt Lucene.Net.Util.BytesRef = call TermsEnumIndex.TermsEnum() call TermsEnumIndex.TermsEnum() call TermsEnumIndex.TermsEnum() call TermsEnumIndex.TermsEnum() call TermsEnumIndex.TermsEnum() call TermsEnumIndex.TermsEnum() call TermsEnumIndex.TermsEnum() call TermsEnumIndex.TermsEnum() call TermsEnumIndex.TermsEnum() if != decl_stmt TermsEnumWithSlice = call TermsEnumWithSlice.Reset() call TermsEnumWithSlice.Reset() call TermsEnumWithSlice.Reset() call TermsEnumWithSlice.Reset() call TermsEnumWithSlice.Reset() call TermMergeQueue.Add() call TermMergeQueue.Add() call TermMergeQueue.Add() call TermMergeQueue.Add() call TermMergeQueue.Add() ++ = else if call TermMergeQueue.Size() call TermMergeQueue.Size() call TermMergeQueue.Size() call TermMergeQueue.Size() call TermMergeQueue.Size() == return else return bool int bool BytesRef public override public override call TermMergeQueue.Clear() call TermMergeQueue.Clear() call TermMergeQueue.Clear() call TermMergeQueue.Clear() call TermMergeQueue.Clear() = decl_stmt bool = if != && call int.Compare() call int.Compare() call int.Compare() call int.Compare() call int.Compare() <= = = = for = < ++ decl_stmt bool if decl_stmt Lucene.Net.Util.BytesRef = if != decl_stmt int = call int.Compare() call int.Compare() call int.Compare() call int.Compare() call int.Compare() if == = else if < = else = else = else = if ++ = = = return > SeekStatus int bool BytesRef public override public override call TermMergeQueue.Clear() call TermMergeQueue.Clear() call TermMergeQueue.Clear() call TermMergeQueue.Clear() call TermMergeQueue.Clear() = = decl_stmt bool = if != && call int.Compare() call int.Compare() call int.Compare() call int.Compare() call int.Compare() <= = call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) call Lucene.Net.Util.BytesRef.CopyBytes(BytesRef) = for = < ++ decl_stmt SeekStatus if decl_stmt Lucene.Net.Util.BytesRef = if != decl_stmt int = call int.Compare() call int.Compare() call int.Compare() call int.Compare() call int.Compare() if == = else if < = else = else = else = if == ++ = = = else if == = != call TermMergeQueue.Add() call TermMergeQueue.Add() call TermMergeQueue.Add() call TermMergeQueue.Add() call TermMergeQueue.Add() else = if > return else if call TermMergeQueue.Size() call TermMergeQueue.Size() call TermMergeQueue.Size() call TermMergeQueue.Size() call TermMergeQueue.Size() > return else return public override public override throw new public override public override throw new private private == while ++ = call TermMergeQueue.Pop() call TermMergeQueue.Pop() call TermMergeQueue.Pop() call TermMergeQueue.Pop() call TermMergeQueue.Pop() if call TermMergeQueue.Size() call TermMergeQueue.Size() call TermMergeQueue.Size() call TermMergeQueue.Size() call TermMergeQueue.Size() == || ! call TermMergeQueue.Top() call TermMergeQueue.Top() call TermMergeQueue.Top() call TermMergeQueue.Top() call TermMergeQueue.Top() call int.BytesEquals() call int.BytesEquals() call int.BytesEquals() call int.BytesEquals() call int.BytesEquals() break = private private for = < ++ = if != call TermMergeQueue.Add() call TermMergeQueue.Add() call TermMergeQueue.Add() call TermMergeQueue.Add() call TermMergeQueue.Add() else = SeekStatus public override public override if decl_stmt SeekStatus = == = = if call TermMergeQueue.Size() call TermMergeQueue.Size() call TermMergeQueue.Size() call TermMergeQueue.Size() call TermMergeQueue.Size() > else = return int public override public override decl_stmt int = for = < ++ += return long long public override public override decl_stmt long = for = < ++ decl_stmt long = if == - return += return int MultiDocsEnum Bits decl MultiBits decl SubResult MultiBits TermsEnumWithSlice public override public override decl_stmt Lucene.Net.Index.MultiDocsEnum if != && is = if ! call Lucene.Net.Index.MultiDocsEnum.CanReuse(MultiTermsEnum) call Lucene.Net.Index.MultiDocsEnum.CanReuse(MultiTermsEnum) call Lucene.Net.Index.MultiDocsEnum.CanReuse(MultiTermsEnum) call Lucene.Net.Index.MultiDocsEnum.CanReuse(MultiTermsEnum) call Lucene.Net.Index.MultiDocsEnum.CanReuse(MultiTermsEnum) = new else = new decl_stmt Lucene.Net.Index.MultiBits if is = else = decl_stmt int = for = < ++ decl_stmt TermsEnumWithSlice = decl_stmt Lucene.Net.Spatial.Util.Bits if != decl_stmt SubResult = call Lucene.Net.Index.MultiBits.GetMatchingSub(ReaderSlice) call Lucene.Net.Index.MultiBits.GetMatchingSub(ReaderSlice) call Lucene.Net.Index.MultiBits.GetMatchingSub(ReaderSlice) call Lucene.Net.Index.MultiBits.GetMatchingSub(ReaderSlice) call Lucene.Net.Index.MultiBits.GetMatchingSub(ReaderSlice) if = else = new else if != = new else = < + + + + decl_stmt Lucene.Net.Index.DocsEnum = call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() if != = = = ++ else if == return else return call Lucene.Net.Index.MultiDocsEnum.Reset(EnumWithSlice,int) call Lucene.Net.Index.MultiDocsEnum.Reset(EnumWithSlice,int) call Lucene.Net.Index.MultiDocsEnum.Reset(EnumWithSlice,int) call Lucene.Net.Index.MultiDocsEnum.Reset(EnumWithSlice,int) call Lucene.Net.Index.MultiDocsEnum.Reset(EnumWithSlice,int) int Bits decl MultiBits MultiDocsAndPositionsEnum decl SubResult MultiBits TermsEnumWithSlice public override public override decl_stmt Lucene.Net.Index.MultiDocsAndPositionsEnum if != && is = if ! call Lucene.Net.Index.MultiDocsAndPositionsEnum.CanReuse(MultiTermsEnum) call Lucene.Net.Index.MultiDocsAndPositionsEnum.CanReuse(MultiTermsEnum) call Lucene.Net.Index.MultiDocsAndPositionsEnum.CanReuse(MultiTermsEnum) call Lucene.Net.Index.MultiDocsAndPositionsEnum.CanReuse(MultiTermsEnum) call Lucene.Net.Index.MultiDocsAndPositionsEnum.CanReuse(MultiTermsEnum) = new else = new decl_stmt Lucene.Net.Index.MultiBits if is = else = decl_stmt int = for = < ++ decl_stmt TermsEnumWithSlice = decl_stmt Lucene.Net.Spatial.Util.Bits if != decl_stmt SubResult = call Lucene.Net.Index.MultiBits.GetMatchingSub(ReaderSlice) call Lucene.Net.Index.MultiBits.GetMatchingSub(ReaderSlice) call Lucene.Net.Index.MultiBits.GetMatchingSub(ReaderSlice) call Lucene.Net.Index.MultiBits.GetMatchingSub(ReaderSlice) call Lucene.Net.Index.MultiBits.GetMatchingSub(ReaderSlice) if = else = new else if != = new else = < + + + + decl_stmt DocsAndPositionsEnum = call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() if != = = = ++ else if call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() call TermsEnumWithSlice.Terms() != return if == return else return call Lucene.Net.Index.MultiDocsAndPositionsEnum.Reset(EnumWithSlice,int) call Lucene.Net.Index.MultiDocsAndPositionsEnum.Reset(EnumWithSlice,int) call Lucene.Net.Index.MultiDocsAndPositionsEnum.Reset(EnumWithSlice,int) call Lucene.Net.Index.MultiDocsAndPositionsEnum.Reset(EnumWithSlice,int) call Lucene.Net.Index.MultiDocsAndPositionsEnum.Reset(EnumWithSlice,int) public public = = public override public override return + + int public override public override decl_stmt int = call int.Compare() call int.Compare() call int.Compare() call int.Compare() call int.Compare() if != return < else return < public override public override return + +