Lucene.Net.Facet.Taxonomy System using System.Diagnostics using System.Collections.Generic using System.Threading using Lucene.Net.Support using Lucene.Net.Store.AlreadyClosedException class Lucene.Net.Facet.Taxonomy.TaxonomyReader AtomicInteger int int bool int public virtual public virtual decl_stmt int = if != = return T public static public static public static < where where decl_stmt T = != return protected protected if <= throw new public virtual public virtual if lock if ! = bool int public public decl_stmt int = call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() if == decl_stmt bool = try = = finally if ! call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() else if < throw new + + ParallelTaxonomyArrays int public virtual public virtual decl_stmt ParallelTaxonomyArrays = decl_stmt int = >= call ParallelTaxonomyArrays.Children() call ParallelTaxonomyArrays.Children() call ParallelTaxonomyArrays.Children() call ParallelTaxonomyArrays.Children() call ParallelTaxonomyArrays.Children() : return new call ParallelTaxonomyArrays.Siblings() call ParallelTaxonomyArrays.Siblings() call ParallelTaxonomyArrays.Siblings() call ParallelTaxonomyArrays.Siblings() call ParallelTaxonomyArrays.Siblings() decl string public virtual public virtual decl_stmt string = new + = return new return call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() public public call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() int public public decl_stmt int while = call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() > if call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) + return return