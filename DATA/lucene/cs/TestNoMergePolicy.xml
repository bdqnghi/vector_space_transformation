Lucene.Net.Index System.Reflection using NUnit.Framework using Lucene.Net.Util.LuceneTestCase class attribute Lucene.Net.Index.TestNoMergePolicy super super LuceneTestCase MergePolicy public virtual public virtual decl_stmt Lucene.Net.Index.MergePolicy = call MergePolicy.FindMerges() call MergePolicy.FindMerges() call MergePolicy.FindMerges() call MergePolicy.FindMerges() call MergePolicy.FindMerges() call MergePolicy.FindForcedMerges() call MergePolicy.FindForcedMerges() call MergePolicy.FindForcedMerges() call MergePolicy.FindForcedMerges() call MergePolicy.FindForcedMerges() call MergePolicy.FindForcedDeletesMerges() call MergePolicy.FindForcedDeletesMerges() call MergePolicy.FindForcedDeletesMerges() call MergePolicy.FindForcedDeletesMerges() call MergePolicy.FindForcedDeletesMerges() call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call MergePolicy.Dispose() call MergePolicy.Dispose() call MergePolicy.Dispose() call MergePolicy.Dispose() call MergePolicy.Dispose() public virtual public virtual public virtual public virtual foreach in typeof if continue if != typeof object && ! == typeof + +