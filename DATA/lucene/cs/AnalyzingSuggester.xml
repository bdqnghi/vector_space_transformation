Lucene.Net.Search.Suggest.Analyzing System using System.Collections.Generic using System.Diagnostics using System.IO using System.Linq using Lucene.Net.Analysis using Lucene.Net.Store using Lucene.Net.Util using Lucene.Net.Util.Automaton using Lucene.Net.Util.Fst using class Lucene.Net.Search.Suggest.Analyzing.AnalyzingSuggester super super Lookup long bool int int bool int Analyzer int int bool decl FST int bool int int Analyzer decl IComparer public override public override return == : call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() private private < if from = foreach in decl State decl IList State private private decl_stmt Lucene.Net.Util.Automaton.State = for = - >= -- decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt System.Collections.Generic.IList < = new < foreach in == if == if call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new else = else if == = else call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() protected virtual protected virtual return return new = long long int public public = = = = = = decl_stmt int = if != return decl_stmt long = decl_stmt long = >= >= if < return - else if > return if = = = = else = = = - = - return var decl ByteSequencesReader var BytesRef BytesRef string short int BytesRef var var var long decl OfflineSorter IntsRef int bool BytesRef var var short int var var BytesRef TokenStreamToAutomaton var var decl sbyte public override public override if throw new decl_stmt string = decl_stmt var = decl_stmt var = decl_stmt var = = decl_stmt var = new decl_stmt ByteSequencesReader = decl_stmt var = new decl_stmt Lucene.Net.Analysis.TokenStreamToAutomaton = decl_stmt bool = = decl_stmt sbyte = new try decl_stmt var = new decl_stmt Lucene.Net.Util.BytesRef while = != decl_stmt System.Collections.Generic.HashSet < = = foreach in if > - throw new + - + + + decl_stmt short = short decl_stmt int = + + + decl_stmt Lucene.Net.Util.BytesRef if if > - throw new + - + + + = += + else = = call decl sbyte.Reset() call decl sbyte.Reset() call decl sbyte.Reset() call decl sbyte.Reset() call decl sbyte.Reset() call decl sbyte.WriteShort() call decl sbyte.WriteShort() call decl sbyte.WriteShort() call decl sbyte.WriteShort() call decl sbyte.WriteShort() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteInt() call decl sbyte.WriteInt() call decl sbyte.WriteInt() call decl sbyte.WriteInt() call decl sbyte.WriteInt() if for = < ++ if == throw new call decl sbyte.WriteShort() call decl sbyte.WriteShort() call decl sbyte.WriteShort() call decl sbyte.WriteShort() call decl sbyte.WriteShort() short call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() else call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() call decl sbyte.WriteBytes() == + + call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() ++ call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() new new call var.Delete() call var.Delete() call var.Delete() call var.Delete() call var.Delete() = new decl_stmt var = new < ? decl_stmt var = new < < ? < ? decl_stmt Lucene.Net.Util.BytesRef = decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt Lucene.Net.Util.IntsRef = new decl_stmt var = new decl_stmt var = new < decl_stmt var = while call decl OfflineSorter.Read() call decl OfflineSorter.Read() call decl OfflineSorter.Read() call decl OfflineSorter.Read() call decl OfflineSorter.Read() call IntsRef.Reset() call IntsRef.Reset() call IntsRef.Reset() call IntsRef.Reset() call IntsRef.Reset() decl_stmt short = call IntsRef.ReadShort() call IntsRef.ReadShort() call IntsRef.ReadShort() call IntsRef.ReadShort() call IntsRef.ReadShort() call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) + call IntsRef.ReadBytes() call IntsRef.ReadBytes() call IntsRef.ReadBytes() call IntsRef.ReadBytes() call IntsRef.ReadBytes() = decl_stmt long = call IntsRef.ReadInt() call IntsRef.ReadInt() call IntsRef.ReadInt() call IntsRef.ReadInt() call IntsRef.ReadInt() = if = call IntsRef.ReadShort() call IntsRef.ReadShort() call IntsRef.ReadShort() call IntsRef.ReadShort() call IntsRef.ReadShort() = else = = - if == = new call var.CopyBytes() call var.CopyBytes() call var.CopyBytes() call var.CopyBytes() call var.CopyBytes() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() else if call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) call Lucene.Net.Util.BytesRef.Equals(object) ++ if >= continue if call var.Contains() call var.Contains() call var.Contains() call var.Contains() call var.Contains() continue call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() else = call var.CopyBytes() call var.CopyBytes() call var.CopyBytes() call var.CopyBytes() call var.CopyBytes() call var.Clear() call var.Clear() call var.Clear() call var.Clear() call var.Clear() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() + = + + = sbyte += if ! call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call BytesRef.NewPair() call BytesRef.NewPair() call BytesRef.NewPair() call BytesRef.NewPair() call BytesRef.NewPair() else decl_stmt int = + decl_stmt int = - decl_stmt Lucene.Net.Util.BytesRef = new + + = + = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call BytesRef.NewPair() call BytesRef.NewPair() call BytesRef.NewPair() call BytesRef.NewPair() call BytesRef.NewPair() = call var.Finish() call var.Finish() call var.Finish() call var.Finish() call var.Finish() = finally if else call var.Delete() call var.Delete() call var.Delete() call var.Delete() call var.Delete() call var.Delete() call var.Delete() call var.Delete() call var.Delete() call var.Delete() public override public override if == return call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() : return public override public override = = new < < ? < ? new < ? = = == return int BytesRef LookupResult int private private ? decl_stmt LookupResult if decl_stmt int = - for = < ++ if + == = break != - decl_stmt int = - - decl_stmt Lucene.Net.Util.BytesRef = new + = = new else = new return private private if if >= return for = < ++ if + != + return return + == else return decl IList decl Util Automaton var decl Fst var decl BytesReader decl IList var BytesRef decl FST var public override < public override < < > if throw new if != throw new if == return < for = < ++ if == throw new if == throw new decl_stmt var = new try decl_stmt Lucene.Net.Util.Automaton.Automaton = decl_stmt var = new decl_stmt BytesReader = decl_stmt var = new < < ? < ? decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < < < ? < ? = if decl_stmt int = foreach < < ? < ? in if call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() != ++ decl_stmt Lucene.Net.Util.Fst.Util < < ? < ? = new < < ? < ? * * foreach in if call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() != call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() decl_stmt var = call decl Util.Search() call decl Util.Search() call decl Util.Search() call decl Util.Search() call decl Util.Search() foreach in decl_stmt Lucene.Net.Util.BytesRef = if call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() break if == return decl_stmt Lucene.Net.Util.Fst.Util < < ? < ? = new - * = foreach < < ? < ? in call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl Util.AddStartPaths() call decl Util.AddStartPaths() decl_stmt var = call decl Util.Search() call decl Util.Search() call decl Util.Search() call decl Util.Search() call decl Util.Search() foreach < < ? < ? in decl_stmt LookupResult = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if == break return catch throw protected override protected override < ? < ? if return if ! return else if == return else return return protected internal virtual < < < ? < ? protected internal virtual < < < ? < ? < < < ? < ? < < ? < ? return Automaton TokenStream internal < internal < decl_stmt Lucene.Net.Util.Automaton.Automaton = decl_stmt Lucene.Net.Analysis.TokenStream = call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) try = finally = return Automaton TokenStream internal internal decl_stmt Lucene.Net.Util.Automaton.Automaton = decl_stmt Lucene.Net.Analysis.TokenStream = call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) try = finally return public virtual public virtual throw new private static private static return - private static private static if < || || throw new + return - int public public < ? < ? < ? < ? return