Lucene.Net.Search.Spans Lucene.Net.Support using System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Util.ArrayUtil Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.Bits Lucene.Net.Util.InPlaceMergeSorter Lucene.Net.Index.Term Lucene.Net.Index.TermContext class Lucene.Net.Search.Spans.NearSpansOrdered super super Spans int bool int decl Spans InPlaceMergeSorter bool bool decl List SpanNearQuery int int decl Spans bool protected override protected override protected override protected override return - public override public override return public override public override return public override public override return return return return == == long public override public override decl_stmt long = for = < ++ = return public override public override if = for = < ++ if ! = return = if call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() return public override public override if = for = < ++ if ! = return = else if && < if = else = return if call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() return private private while && || if && return return int int private private call Lucene.Net.Util.InPlaceMergeSorter.Sort(int,int) call Lucene.Net.Util.InPlaceMergeSorter.Sort(int,int) call Lucene.Net.Util.InPlaceMergeSorter.Sort(int,int) call Lucene.Net.Util.InPlaceMergeSorter.Sort(int,int) call Lucene.Net.Util.InPlaceMergeSorter.Sort(int,int) decl_stmt int = decl_stmt int = - while != if ! = = return = if ++ == = for = < ++ == + + + + + = return int int internal static internal static == + + + decl_stmt int = decl_stmt int = return == < : < private static private static return == < : < private private = for = && < ++ while ! - if ! = = break else if != = break return var int int var decl IList int int int Spans int int bool private private = - = - decl_stmt var = new < if - call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() - decl_stmt System.Collections.Generic.IList < = decl_stmt int = decl_stmt int = decl_stmt int = for = - >= -- decl_stmt Spans = if && decl_stmt var = = new < call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() decl_stmt int = call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() decl_stmt int = call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() while if ! call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() = = break else if != call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() = break else decl_stmt int = call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() decl_stmt int = call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() if ! break else = = if && decl_stmt var = = new < call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() if && != call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() <= if > += - = = = decl_stmt bool = <= if && && > call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() return public override public override return + + call Lucene.Net.Search.Spans.SpanNearQuery.ToString(string) call Lucene.Net.Search.Spans.SpanNearQuery.ToString(string) call Lucene.Net.Search.Spans.SpanNearQuery.ToString(string) call Lucene.Net.Search.Spans.SpanNearQuery.ToString(string) call Lucene.Net.Search.Spans.SpanNearQuery.ToString(string) + + : + + + + :