Lucene.Net.Codecs.ramonly System using System.Collections.Generic using System.Diagnostics using System.Linq using Lucene.Net.Support using Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Index.DocsAndPositionsEnum Lucene.Net.Index.DocsEnum Lucene.Net.Index.FieldInfo Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexInput Lucene.Net.Store.IndexOutput Lucene.Net.Util.IOUtils Lucene.Net.Util.RamUsageEstimator Lucene.Net.Index.SegmentReadState Lucene.Net.Index.SegmentWriteState Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum class Lucene.Net.Codecs.ramonly.RAMOnlyPostingsFormat super super PostingsFormat int string decl IComparer int decl IDictionary string AtomicLong var int var int int int int public virtual public virtual decl_stmt var = decl_stmt var = decl_stmt int decl_stmt int = decl_stmt int = if < = + else = + while < decl_stmt int = ++ & decl_stmt int = ++ & if != return - return - public override public override return == public override public override return return public override < public override < return public override public override long public override public override decl_stmt long = foreach in += return public override public override long public virtual public virtual decl_stmt long = foreach in += return public override public override return return return return public override public override return new return public override public override return >= public override public override return >= public override public override return >= public override public override return long public virtual public virtual decl_stmt long = foreach in += return long public virtual public virtual decl_stmt long = += != : if != foreach in += != : return RAMField public override public override if >= throw new decl_stmt RAMField = new = return public override public override internal virtual internal virtual = string public override public override decl_stmt string = = new return return public override public override > == = = public override public override = = = public virtual public virtual = public override public override = new = var public override public override == - == - = if != && > if == = new decl_stmt var = = new ++ public override public override == return public override public override if == if == = else = >= if = return new else return public override public override = = if return else if > return else return public override public override throw new public override public override throw new public override public override return new public override public override return public override public override return public override public override return new public override public override return new public override public override return public override public override while ++ if < = if == || = return else return public override public override return public override public override return public override public override return public override public override return public override public override while ++ if < = if == || = return else return public override public override return public override public override return public override public override return ++ public override public override return - public override public override return - if != && - != return new - else return public override public override return bool string RAMPostings IndexOutput RAMFieldsConsumer int public override public override decl_stmt int = int call Lucene.Net.Support.AtomicLong.IncrementAndGet() call Lucene.Net.Support.AtomicLong.IncrementAndGet() call Lucene.Net.Support.AtomicLong.IncrementAndGet() call Lucene.Net.Support.AtomicLong.IncrementAndGet() call Lucene.Net.Support.AtomicLong.IncrementAndGet() decl_stmt string = decl_stmt IndexOutput = decl_stmt bool = try call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() = finally if ! else decl_stmt RAMPostings = new decl_stmt RAMFieldsConsumer = new lock = return string bool IndexInput int public override public override decl_stmt string = decl_stmt Lucene.Net.Store.IndexInput = decl_stmt bool = decl_stmt int try = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() = finally if ! else lock return