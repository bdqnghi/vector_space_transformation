Lucene.Net.Facet System using System.Diagnostics using System.Collections.Generic using System.Linq using Lucene.Net.Support using Lucene.Net.Index.IndexReader Lucene.Net.Index.Term Lucene.Net.Search.BooleanClause.Occur Lucene.Net.Search.BooleanClause Lucene.Net.Search.BooleanQuery Lucene.Net.Search.ConstantScoreQuery Lucene.Net.Search.Filter Lucene.Net.Search.FilteredQuery Lucene.Net.Search.MatchAllDocsQuery Lucene.Net.Search.Query Lucene.Net.Search.TermQuery class Lucene.Net.Facet.DrillDownQuery super super Query BooleanQuery decl IDictionary FacetsConfig public static public static params params params return new ConstantScoreQuery int BooleanQuery int string private private decl_stmt int = decl_stmt int ? if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out && = if == + ++ decl_stmt Lucene.Net.Search.ConstantScoreQuery = if is == throw new decl_stmt string = call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) decl_stmt Lucene.Net.Search.BooleanQuery = call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) new string BooleanQuery public public params params params if call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() return decl_stmt string = call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) call Lucene.Net.Facet.FacetsConfig.GetDimConfig(string) decl_stmt Lucene.Net.Search.BooleanQuery = new call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) new ConstantScoreQuery public public if call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() throw new + + decl_stmt Lucene.Net.Search.ConstantScoreQuery = new = call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) = ConstantScoreQuery public public if call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() throw new + + decl_stmt Lucene.Net.Search.ConstantScoreQuery = new = call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) = var Filter ConstantScoreQuery internal static internal static decl_stmt var = as if != decl_stmt Lucene.Net.Search.ConstantScoreQuery = decl_stmt MS.Internal.Xml.XPath.Filter = if != return else return else return public override public override return new int int public override public override decl_stmt int const const = decl_stmt int = return * + call Lucene.Net.Search.BooleanQuery.GetHashCode() call Lucene.Net.Search.BooleanQuery.GetHashCode() call Lucene.Net.Search.BooleanQuery.GetHashCode() call Lucene.Net.Search.BooleanQuery.GetHashCode() call Lucene.Net.Search.BooleanQuery.GetHashCode() DrillDownQuery public override public override if ! is return decl_stmt Lucene.Net.Facet.DrillDownQuery = return call Lucene.Net.Search.BooleanQuery.Equals(object) call Lucene.Net.Search.BooleanQuery.Equals(object) call Lucene.Net.Search.BooleanQuery.Equals(object) call Lucene.Net.Search.BooleanQuery.Equals(object) call Lucene.Net.Search.BooleanQuery.Equals(object) && BooleanQuery Query BooleanClause Filter Query int decl IList decl IList Query decl IList public override public override if ! call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() return new decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = decl_stmt Lucene.Net.Search.Query decl_stmt int if == call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() call BooleanQuery.Clauses() = new = else = = for = < ++ decl_stmt Lucene.Net.Search.BooleanClause = decl_stmt Lucene.Net.Search.Query = decl_stmt MS.Internal.Xml.XPath.Filter = if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() else call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if == return else decl_stmt Lucene.Net.Search.Query if == = else decl_stmt Lucene.Net.Search.BooleanQuery = new if is == call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) foreach in call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) call Lucene.Net.Search.BooleanQuery.Add(Query,BooleanClause,Occur) = foreach in = new return public override public override return call Lucene.Net.Search.BooleanQuery.ToString(string) call Lucene.Net.Search.BooleanQuery.ToString(string) call Lucene.Net.Search.BooleanQuery.ToString(string) call Lucene.Net.Search.BooleanQuery.ToString(string) call Lucene.Net.Search.BooleanQuery.ToString(string) return return