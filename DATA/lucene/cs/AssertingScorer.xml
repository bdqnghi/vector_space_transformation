Lucene.Net.Search Lucene.Net.Support using System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Index.AssertingAtomicReader class Lucene.Net.Search.AssertingScorer super super Scorer decl IDictionary decl AssertingAtomicReader Random Scorer AssertingScorer public static public static if == || is return decl_stmt Lucene.Net.Search.AssertingScorer = new = new return AssertingScorer WeakReference internal static internal static if == || is return decl_stmt System.WeakReference = decl_stmt Lucene.Net.Search.AssertingScorer = == : if == return new else return return internal virtual internal virtual switch case - case return default: return float public override public override decl_stmt float = call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() call Scorer.Score() ! ! return return new < new public override public override return call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() public override public override return call Scorer.DocID() call Scorer.DocID() call Scorer.DocID() call Scorer.DocID() call Scorer.DocID() public override public override return call decl AssertingAtomicReader.NextDoc() call decl AssertingAtomicReader.NextDoc() call decl AssertingAtomicReader.NextDoc() call decl AssertingAtomicReader.NextDoc() call decl AssertingAtomicReader.NextDoc() public override public override return call decl AssertingAtomicReader.Advance() call decl AssertingAtomicReader.Advance() call decl AssertingAtomicReader.Advance() call decl AssertingAtomicReader.Advance() call decl AssertingAtomicReader.Advance() public override public override return call Scorer.Cost() call Scorer.Cost() call Scorer.Cost() call Scorer.Cost() call Scorer.Cost() public override public override return + +