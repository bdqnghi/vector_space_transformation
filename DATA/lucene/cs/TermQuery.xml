Lucene.Net.Search System.Diagnostics using System.Text using Lucene.Net.Support using System.Collections.Generic using Lucene.Net.Index.AtomicReader Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.Bits Lucene.Net.Index.DocsEnum Lucene.Net.Index.IndexReaderContext Lucene.Net.Index.ReaderUtil Lucene.Net.Search.Similarities.Similarity Lucene.Net.Search.Similarities.Similarity.SimScorer Lucene.Net.Index.Term Lucene.Net.Index.TermContext Lucene.Net.Index.TermsEnum Lucene.Net.Index.TermState Lucene.Net.Util.ToStringUtils class Lucene.Net.Search.TermQuery super super Query Term TermContext int public override public override return + + return return public override public override DocsEnum TermsEnum public override public override == + + + decl_stmt Lucene.Net.Index.TermsEnum = if == return decl_stmt Lucene.Net.Index.DocsEnum = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) != return new TermState TermsEnum internal internal decl_stmt Lucene.Net.Index.TermState = if == + return decl_stmt Lucene.Net.Index.TermsEnum = call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) return internal internal return == Scorer SimScorer ComplexExplanation int float Explanation public override public override decl_stmt Lucene.Net.Search.Scorer = if != decl_stmt int = call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() if == decl_stmt float = call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() decl_stmt SimScorer = decl_stmt Lucene.Net.Search.ComplexExplanation = new = + + + + + + decl_stmt Lucene.Net.Search.Explanation = call SimScorer.Explain() call SimScorer.Explain() call SimScorer.Explain() call SimScorer.Explain() call SimScorer.Explain() new + call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() = = return return new return TermContext IndexReaderContext public override public override decl_stmt IndexReaderContext = decl_stmt Lucene.Net.Index.TermContext if == || != = else = if != - = return new public override public override < StringBuilder public override public override decl_stmt System.Text.StringBuilder = new if ! call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) TermQuery public override public override if ! is return decl_stmt Lucene.Net.Search.TermQuery = return == && public override public override return ^ call Lucene.Net.Index.Term.GetHashCode() call Lucene.Net.Index.Term.GetHashCode() call Lucene.Net.Index.Term.GetHashCode() call Lucene.Net.Index.Term.GetHashCode() call Lucene.Net.Index.Term.GetHashCode()