Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Threading using Lucene.Net.Support using System.Collections.Concurrent using Lucene.Net.Store.AlreadyClosedException Lucene.Net.Analysis.Analyzer Lucene.Net.Index.DocValuesUpdate.BinaryDocValuesUpdate Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Lucene.Net.Index.IndexWriter.Event Lucene.Net.Index.DocumentsWriterPerThread.FlushedSegment Lucene.Net.Util.InfoStream Lucene.Net.Index.DocValuesUpdate.NumericDocValuesUpdate Lucene.Net.Search.Query Lucene.Net.Index.DocumentsWriterFlushQueue.SegmentFlushTicket Lucene.Net.Index.DocumentsWriterPerThreadPool.ThreadState class Lucene.Net.Index.DocumentsWriter super super IDisposable AtomicInteger DocumentsWriterPerThreadPool LiveIndexWriterConfig bool DocumentsWriterDeleteQueue IndexWriter DocumentsWriterFlushQueue FlushPolicy DocumentsWriterDeleteQueue InfoStream Directory bool decl ConcurrentQueue DocumentsWriterFlushControl DocumentsWriterDeleteQueue internal internal params params params lock decl_stmt Lucene.Net.Index.DocumentsWriterDeleteQueue = call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddDelete(Term) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddDelete(Term) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddDelete(Term) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddDelete(Term) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddDelete(Term) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() return DocumentsWriterDeleteQueue internal internal params params params lock decl_stmt Lucene.Net.Index.DocumentsWriterDeleteQueue = call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddDelete(Term) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddDelete(Term) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddDelete(Term) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddDelete(Term) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddDelete(Term) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() return DocumentsWriterDeleteQueue internal internal ? lock decl_stmt Lucene.Net.Index.DocumentsWriterDeleteQueue = call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddNumericUpdate(NumericDocValuesUpdate) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddNumericUpdate(NumericDocValuesUpdate) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddNumericUpdate(NumericDocValuesUpdate) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddNumericUpdate(NumericDocValuesUpdate) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddNumericUpdate(NumericDocValuesUpdate) new call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() return DocumentsWriterDeleteQueue internal internal lock decl_stmt Lucene.Net.Index.DocumentsWriterDeleteQueue = call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddBinaryUpdate(BinaryDocValuesUpdate) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddBinaryUpdate(BinaryDocValuesUpdate) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddBinaryUpdate(BinaryDocValuesUpdate) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddBinaryUpdate(BinaryDocValuesUpdate) call Lucene.Net.Index.DocumentsWriterDeleteQueue.AddBinaryUpdate(BinaryDocValuesUpdate) new call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnDelete() return internal internal return private private if if != && ! call Lucene.Net.Index.DocumentsWriterFlushQueue.AddDeletes(DocumentsWriterDeleteQueue) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddDeletes(DocumentsWriterDeleteQueue) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddDeletes(DocumentsWriterDeleteQueue) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddDeletes(DocumentsWriterDeleteQueue) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddDeletes(DocumentsWriterDeleteQueue) return return internal internal if return call DocumentsWriterFlushQueue.ForcePurge() call DocumentsWriterFlushQueue.ForcePurge() call DocumentsWriterFlushQueue.ForcePurge() call DocumentsWriterFlushQueue.ForcePurge() call DocumentsWriterFlushQueue.ForcePurge() else return call Lucene.Net.Index.DocumentsWriterFlushQueue.TryPurge(IndexWriter) call Lucene.Net.Index.DocumentsWriterFlushQueue.TryPurge(IndexWriter) call Lucene.Net.Index.DocumentsWriterFlushQueue.TryPurge(IndexWriter) call Lucene.Net.Index.DocumentsWriterFlushQueue.TryPurge(IndexWriter) call Lucene.Net.Index.DocumentsWriterFlushQueue.TryPurge(IndexWriter) return call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() private private if throw new ThreadState int decl HashSet bool internal internal lock decl_stmt bool = decl_stmt System.Collections.Generic.HashSet < = new < try call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) decl_stmt int = for = < ++ decl_stmt ThreadState = call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() try finally call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call Lucene.Net.Index.DocumentsWriterFlushControl.AbortPendingFlushes(ISet) call Lucene.Net.Index.DocumentsWriterFlushControl.AbortPendingFlushes(ISet) call Lucene.Net.Index.DocumentsWriterFlushControl.AbortPendingFlushes(ISet) call Lucene.Net.Index.DocumentsWriterFlushControl.AbortPendingFlushes(ISet) call Lucene.Net.Index.DocumentsWriterFlushControl.AbortPendingFlushes(ISet) new call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() = finally if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + ThreadState int decl HashSet bool internal internal lock if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) decl_stmt bool = try call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() decl_stmt int = decl_stmt System.Collections.Generic.HashSet < = new < for = < ++ decl_stmt ThreadState = call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Clear() call Lucene.Net.Index.DocumentsWriterFlushControl.AbortPendingFlushes(ISet) call Lucene.Net.Index.DocumentsWriterFlushControl.AbortPendingFlushes(ISet) call Lucene.Net.Index.DocumentsWriterFlushControl.AbortPendingFlushes(ISet) call Lucene.Net.Index.DocumentsWriterFlushControl.AbortPendingFlushes(ISet) call Lucene.Net.Index.DocumentsWriterFlushControl.AbortPendingFlushes(ISet) new call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() = finally if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + if ! private private < if if try finally call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) else call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) else ThreadState int internal internal lock if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) decl_stmt int = for = < ++ try decl_stmt ThreadState = call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() catch if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + internal internal if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() + + + + call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() + + return call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() != || || call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() || return return call Lucene.Net.Index.DocumentsWriterDeleteQueue.NumGlobalTermDeletes() call Lucene.Net.Index.DocumentsWriterDeleteQueue.NumGlobalTermDeletes() call Lucene.Net.Index.DocumentsWriterDeleteQueue.NumGlobalTermDeletes() call Lucene.Net.Index.DocumentsWriterDeleteQueue.NumGlobalTermDeletes() call Lucene.Net.Index.DocumentsWriterDeleteQueue.NumGlobalTermDeletes() public public return call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() public public = call Lucene.Net.Index.DocumentsWriterFlushControl.SetClosed() call Lucene.Net.Index.DocumentsWriterFlushControl.SetClosed() call Lucene.Net.Index.DocumentsWriterFlushControl.SetClosed() call Lucene.Net.Index.DocumentsWriterFlushControl.SetClosed() call Lucene.Net.Index.DocumentsWriterFlushControl.SetClosed() bool DocumentsWriterPerThread private private decl_stmt bool = if call Lucene.Net.Index.DocumentsWriterFlushControl.AnyStalledThreads() call Lucene.Net.Index.DocumentsWriterFlushControl.AnyStalledThreads() call Lucene.Net.Index.DocumentsWriterFlushControl.AnyStalledThreads() call Lucene.Net.Index.DocumentsWriterFlushControl.AnyStalledThreads() call Lucene.Net.Index.DocumentsWriterFlushControl.AnyStalledThreads() || call Lucene.Net.Index.DocumentsWriterFlushControl.NumQueuedFlushes() call Lucene.Net.Index.DocumentsWriterFlushControl.NumQueuedFlushes() call Lucene.Net.Index.DocumentsWriterFlushControl.NumQueuedFlushes() call Lucene.Net.Index.DocumentsWriterFlushControl.NumQueuedFlushes() call Lucene.Net.Index.DocumentsWriterFlushControl.NumQueuedFlushes() > if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) do decl_stmt Lucene.Net.Index.DocumentsWriterPerThread while = call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() != |= if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) if call Lucene.Net.Index.DocumentsWriterFlushControl.AnyStalledThreads() call Lucene.Net.Index.DocumentsWriterFlushControl.AnyStalledThreads() call Lucene.Net.Index.DocumentsWriterFlushControl.AnyStalledThreads() call Lucene.Net.Index.DocumentsWriterFlushControl.AnyStalledThreads() call Lucene.Net.Index.DocumentsWriterFlushControl.AnyStalledThreads() call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Index.DocumentsWriterFlushControl.WaitIfStalled() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitIfStalled() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitIfStalled() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitIfStalled() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitIfStalled() call Lucene.Net.Index.DocumentsWriterFlushControl.NumQueuedFlushes() call Lucene.Net.Index.DocumentsWriterFlushControl.NumQueuedFlushes() call Lucene.Net.Index.DocumentsWriterFlushControl.NumQueuedFlushes() call Lucene.Net.Index.DocumentsWriterFlushControl.NumQueuedFlushes() call Lucene.Net.Index.DocumentsWriterFlushControl.NumQueuedFlushes() != if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) return DocumentsWriterPerThread private private |= if != |= else decl_stmt Lucene.Net.Index.DocumentsWriterPerThread = call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() if != |= return decl FieldInfos private private if && == decl_stmt Lucene.Net.Util.Fst.Builder = new = new call Lucene.Net.Index.IndexWriter.NewSegmentName() call Lucene.Net.Index.IndexWriter.NewSegmentName() call Lucene.Net.Index.IndexWriter.NewSegmentName() call Lucene.Net.Index.IndexWriter.NewSegmentName() call Lucene.Net.Index.IndexWriter.NewSegmentName() bool int DocumentsWriterPerThread ThreadState int bool DocumentsWriterPerThread internal internal < < decl_stmt bool = decl_stmt ThreadState = call Lucene.Net.Index.DocumentsWriterFlushControl.ObtainAndLock() call Lucene.Net.Index.DocumentsWriterFlushControl.ObtainAndLock() call Lucene.Net.Index.DocumentsWriterFlushControl.ObtainAndLock() call Lucene.Net.Index.DocumentsWriterFlushControl.ObtainAndLock() call Lucene.Net.Index.DocumentsWriterFlushControl.ObtainAndLock() decl_stmt Lucene.Net.Index.DocumentsWriterPerThread try if ! decl_stmt Lucene.Net.Index.DocumentsWriterPerThread = decl_stmt int = try decl_stmt int = call Lucene.Net.Index.DocumentsWriterPerThread.UpdateDocuments(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriterPerThread.UpdateDocuments(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriterPerThread.UpdateDocuments(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriterPerThread.UpdateDocuments(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriterPerThread.UpdateDocuments(IEnumerable,Analyzer,Term) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) finally if call Lucene.Net.Index.DocumentsWriterPerThread.CheckAndResetHasAborted() call Lucene.Net.Index.DocumentsWriterPerThread.CheckAndResetHasAborted() call Lucene.Net.Index.DocumentsWriterPerThread.CheckAndResetHasAborted() call Lucene.Net.Index.DocumentsWriterPerThread.CheckAndResetHasAborted() call Lucene.Net.Index.DocumentsWriterPerThread.CheckAndResetHasAborted() if call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() > new call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) decl_stmt bool = != = call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterDocument(ThreadState,bool) call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterDocument(ThreadState,bool) call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterDocument(ThreadState,bool) call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterDocument(ThreadState,bool) call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterDocument(ThreadState,bool) finally call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() return bool int DocumentsWriterPerThread ThreadState bool DocumentsWriterPerThread internal internal < decl_stmt bool = decl_stmt ThreadState = call Lucene.Net.Index.DocumentsWriterFlushControl.ObtainAndLock() call Lucene.Net.Index.DocumentsWriterFlushControl.ObtainAndLock() call Lucene.Net.Index.DocumentsWriterFlushControl.ObtainAndLock() call Lucene.Net.Index.DocumentsWriterFlushControl.ObtainAndLock() call Lucene.Net.Index.DocumentsWriterFlushControl.ObtainAndLock() decl_stmt Lucene.Net.Index.DocumentsWriterPerThread try if ! decl_stmt Lucene.Net.Index.DocumentsWriterPerThread = decl_stmt int = try call Lucene.Net.Index.DocumentsWriterPerThread.UpdateDocument(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriterPerThread.UpdateDocument(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriterPerThread.UpdateDocument(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriterPerThread.UpdateDocument(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriterPerThread.UpdateDocument(IEnumerable,Analyzer,Term) call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() finally if call Lucene.Net.Index.DocumentsWriterPerThread.CheckAndResetHasAborted() call Lucene.Net.Index.DocumentsWriterPerThread.CheckAndResetHasAborted() call Lucene.Net.Index.DocumentsWriterPerThread.CheckAndResetHasAborted() call Lucene.Net.Index.DocumentsWriterPerThread.CheckAndResetHasAborted() call Lucene.Net.Index.DocumentsWriterPerThread.CheckAndResetHasAborted() if call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() > new call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterPerThread.PendingFilesToDelete() call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) call Lucene.Net.Index.DocumentsWriterFlushControl.DoOnAbort(ThreadState) decl_stmt bool = != = call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterDocument(ThreadState,bool) call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterDocument(ThreadState,bool) call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterDocument(ThreadState,bool) call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterDocument(ThreadState,bool) call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterDocument(ThreadState,bool) finally call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() return int bool FlushedSegment bool bool SegmentFlushTicket double private private decl_stmt bool = while != = decl_stmt bool = decl_stmt SegmentFlushTicket = try == || == + + + + + try = call Lucene.Net.Index.DocumentsWriterFlushQueue.AddFlushTicket(DocumentsWriterPerThread) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddFlushTicket(DocumentsWriterPerThread) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddFlushTicket(DocumentsWriterPerThread) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddFlushTicket(DocumentsWriterPerThread) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddFlushTicket(DocumentsWriterPerThread) decl_stmt int = decl_stmt bool = try decl_stmt FlushedSegment = call Lucene.Net.Index.DocumentsWriterFlushQueue.AddSegment(SegmentFlushTicket,FlushedSegment) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddSegment(SegmentFlushTicket,FlushedSegment) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddSegment(SegmentFlushTicket,FlushedSegment) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddSegment(SegmentFlushTicket,FlushedSegment) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddSegment(SegmentFlushTicket,FlushedSegment) = finally if > new = if ! new = = finally if ! && != call Lucene.Net.Index.DocumentsWriterFlushQueue.MarkTicketFailed(SegmentFlushTicket) call Lucene.Net.Index.DocumentsWriterFlushQueue.MarkTicketFailed(SegmentFlushTicket) call Lucene.Net.Index.DocumentsWriterFlushQueue.MarkTicketFailed(SegmentFlushTicket) call Lucene.Net.Index.DocumentsWriterFlushQueue.MarkTicketFailed(SegmentFlushTicket) call Lucene.Net.Index.DocumentsWriterFlushQueue.MarkTicketFailed(SegmentFlushTicket) if >= break finally call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterFlush(DocumentsWriterPerThread) call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterFlush(DocumentsWriterPerThread) call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterFlush(DocumentsWriterPerThread) call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterFlush(DocumentsWriterPerThread) call Lucene.Net.Index.DocumentsWriterFlushControl.DoAfterFlush(DocumentsWriterPerThread) = call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() if decl_stmt double = if != && > * * / if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + * * = if ! return int internal internal decl_stmt int = call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() while ! call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) - = call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() private private lock = return bool DocumentsWriterDeleteQueue DocumentsWriterPerThread internal internal decl_stmt Lucene.Net.Index.DocumentsWriterDeleteQueue if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) lock = = call Lucene.Net.Index.DocumentsWriterFlushControl.MarkForFullFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.MarkForFullFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.MarkForFullFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.MarkForFullFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.MarkForFullFlush() != != decl_stmt bool = try decl_stmt Lucene.Net.Index.DocumentsWriterPerThread while = call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.NextPendingFlush() != |= call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.WaitForFlush() if ! && call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + call Lucene.Net.Index.DocumentsWriterFlushQueue.AddDeletes(DocumentsWriterDeleteQueue) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddDeletes(DocumentsWriterDeleteQueue) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddDeletes(DocumentsWriterDeleteQueue) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddDeletes(DocumentsWriterDeleteQueue) call Lucene.Net.Index.DocumentsWriterFlushQueue.AddDeletes(DocumentsWriterDeleteQueue) call DocumentsWriterFlushQueue.ForcePurge() call DocumentsWriterFlushQueue.ForcePurge() call DocumentsWriterFlushQueue.ForcePurge() call DocumentsWriterFlushQueue.ForcePurge() call DocumentsWriterFlushQueue.ForcePurge() ! call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() call Lucene.Net.Index.DocumentsWriterDeleteQueue.AnyChanges() && ! call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() call Lucene.Net.Index.DocumentsWriterFlushQueue.HasTickets() finally == return decl HashSet internal internal try if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + if call Lucene.Net.Index.DocumentsWriterFlushControl.FinishFullFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.FinishFullFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.FinishFullFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.FinishFullFlush() call Lucene.Net.Index.DocumentsWriterFlushControl.FinishFullFlush() else decl_stmt System.Collections.Generic.HashSet < = new < call Lucene.Net.Index.DocumentsWriterFlushControl.AbortFullFlushes(ISet) call Lucene.Net.Index.DocumentsWriterFlushControl.AbortFullFlushes(ISet) call Lucene.Net.Index.DocumentsWriterFlushControl.AbortFullFlushes(ISet) call Lucene.Net.Index.DocumentsWriterFlushControl.AbortFullFlushes(ISet) call Lucene.Net.Index.DocumentsWriterFlushControl.AbortFullFlushes(ISet) new finally = return private private call decl ConcurrentQueue.Enqueue() call decl ConcurrentQueue.Enqueue() call decl ConcurrentQueue.Enqueue() call decl ConcurrentQueue.Enqueue() call decl ConcurrentQueue.Enqueue() public public public public public public public public public public public < public < return