Lucene.Net.Util.Automaton Lucene.Net.Support using System.Collections using System.Collections.Generic using class Lucene.Net.Util.Automaton.MinimizationOperations public static public static if ! decl StateListNode decl List decl State int State int int decl LinkedList decl int IntPair var int State BitArray int decl StateList int int decl State decl HashSet StateListNode Transition decl HashSet decl int BitArray State public static public static if == decl_stmt Lucene.Net.Util.Automaton.Transition = if == && == && == return decl_stmt int = decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt int = = if == decl_stmt Lucene.Net.Util.Automaton.Transition = if == && == && == return decl_stmt int = decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt int = = if == decl_stmt Lucene.Net.Util.Automaton.Transition = if == && == && == return decl_stmt int = decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt int = = if == decl_stmt Lucene.Net.Util.Automaton.Transition = if == && == && == return decl_stmt int = decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt int = = if == decl_stmt Lucene.Net.Util.Automaton.Transition = if == && == && == return decl_stmt int = decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt int = = if == decl_stmt Lucene.Net.Util.Automaton.Transition = if == && == && == return decl_stmt int = decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt int = = if == decl_stmt Lucene.Net.Util.Automaton.Transition = if == && == && == return decl_stmt int = decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt int = = if == decl_stmt Lucene.Net.Util.Automaton.Transition = if == && == && == return decl_stmt int = decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt int = = decl_stmt int = new decl_stmt StateList , = new decl_stmt StateListNode , = new decl_stmt System.Collections.Generic.LinkedList < = new < decl_stmt System.Collections.System.Collections.Generic.BitArray = new * decl_stmt System.Collections.System.Collections.Generic.BitArray = new = new = new for = < ++ = new < = new < for = < ++ = new for = < ++ decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt int = : = for = < ++ decl_stmt var = call int.Step() call int.Step() call int.Step() call int.Step() call int.Step() if == = new < for = <= ++ for = < ++ foreach in if != = for = < ++ decl_stmt int = <= : call int.AddLast() call int.AddLast() call int.AddLast() call int.AddLast() call int.AddLast() new call var.SafeSet() call var.SafeSet() call var.SafeSet() call var.SafeSet() call var.SafeSet() * + decl_stmt int = while > decl_stmt IntPair = call int.RemoveFirst() call int.RemoveFirst() call int.RemoveFirst() call int.RemoveFirst() call int.RemoveFirst() decl_stmt int = decl_stmt int = call var.SafeSet() call var.SafeSet() call var.SafeSet() call var.SafeSet() call var.SafeSet() * + for = != = decl_stmt System.Collections.Generic.List < = if != foreach in decl_stmt int = if ! call int.SafeGet() call int.SafeGet() call int.SafeGet() call int.SafeGet() call int.SafeGet() call int.SafeSet() call int.SafeSet() call int.SafeSet() call int.SafeSet() call int.SafeSet() decl_stmt int = if ! call IntPair.SafeGet() call IntPair.SafeGet() call IntPair.SafeGet() call IntPair.SafeGet() call IntPair.SafeGet() call IntPair.SafeSet() call IntPair.SafeSet() call IntPair.SafeSet() call IntPair.SafeSet() call IntPair.SafeSet() call int.SafeSet() call int.SafeSet() call int.SafeSet() call int.SafeSet() call int.SafeSet() for = >= = + decl_stmt System.Collections.Generic.List < = if < decl_stmt System.Collections.Generic.HashSet < = decl_stmt System.Collections.Generic.HashSet < = foreach in call State.Remove() call State.Remove() call State.Remove() call State.Remove() call State.Remove() = for = < ++ decl_stmt StateListNode = if != && == = for = < ++ decl_stmt int = = = * if ! call var.SafeGet() call var.SafeGet() call var.SafeGet() call var.SafeGet() call var.SafeGet() + && < && <= call var.SafeSet() call var.SafeSet() call var.SafeSet() call var.SafeSet() call var.SafeSet() + call int.AddLast() call int.AddLast() call int.AddLast() call int.AddLast() call int.AddLast() new else call var.SafeSet() call var.SafeSet() call var.SafeSet() call var.SafeSet() call var.SafeSet() + call int.AddLast() call int.AddLast() call int.AddLast() call int.AddLast() call int.AddLast() new ++ call IntPair.SafeSet() call IntPair.SafeSet() call IntPair.SafeSet() call IntPair.SafeSet() call IntPair.SafeSet() foreach in call int.SafeSet() call int.SafeSet() call int.SafeSet() call int.SafeSet() call int.SafeSet() call State.Clear() call State.Clear() call State.Clear() call State.Clear() call State.Clear() call int.SetAll() call int.SetAll() call int.SetAll() call int.SetAll() call int.SetAll() decl_stmt Lucene.Net.Util.Automaton.State = new for = < ++ decl_stmt Lucene.Net.Util.Automaton.State = new = foreach in if == = = = = for = < ++ decl_stmt Lucene.Net.Util.Automaton.State = = foreach in new internal internal return new internal internal -- if == = else = if == = else =