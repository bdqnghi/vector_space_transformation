Lucene.Net.Search System.Collections.Generic using System using Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.RamUsageEstimator class Lucene.Net.Search.CachingCollector super super Collector int int int decl int decl int int Collector int int decl IList decl IList AtomicReaderContext public override public override return public override public override throw new public override public override return public override public override throw new public override public override throw new public override public override return int public override public override if == = = call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() return if == += decl_stmt int = * if > = if + > = - if <= = = call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() = = call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() return = new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = new = = = = ++ = call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() int int int public override public override decl_stmt int = decl_stmt int = decl_stmt int = = foreach in = = while + < if == += = = ++ = = = ++ = = public override public override if return + + + else return int public override public override if == call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() return if == += decl_stmt int = * if > = if + > = - if <= = call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() return = new call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = = ++ call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() call Collector.Collect() int int int public override public override decl_stmt int = decl_stmt int = decl_stmt int = = foreach in = while + < if == += = ++ = ++ = public override public override if return + + + else return Collector public static public static decl_stmt Collector = new return public override public override return public override public override public static public static return new : new public static public static return new : new public override public override return call Collector.AcceptsDocsOutOfOrder() call Collector.AcceptsDocsOutOfOrder() call Collector.AcceptsDocsOutOfOrder() call Collector.AcceptsDocsOutOfOrder() call Collector.AcceptsDocsOutOfOrder() return != = if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new + = internal virtual internal virtual if ! throw new if ! && throw new + + if != call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new + =