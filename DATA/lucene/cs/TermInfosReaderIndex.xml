Lucene.Net.Codecs.Lucene3x System using System.Collections.Generic using System.IO using Lucene.Net.Support using Lucene.Net.Util.BytesRef Lucene.Net.Util.Packed.GrowableWriter Lucene.Net.Util.MathUtil Lucene.Net.Util.Packed.PackedInts Lucene.Net.Util.PagedBytes Lucene.Net.Util.PagedBytes.PagedBytesDataInput Lucene.Net.Util.PagedBytes.PagedBytesDataOutput Lucene.Net.Util.RamUsageEstimator Lucene.Net.Index.Term class attribute Lucene.Net.Codecs.Lucene3x.TermInfosReaderIndex decl IComparer decl Term int PagedBytesDataInput int int int decl Reader decl PackedInts private static private static return - Term int Term var PagedBytesDataInput long public virtual public virtual decl_stmt PagedBytesDataInput = call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() = call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() decl_stmt int = call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() decl_stmt Lucene.Net.Index.Term = decl_stmt Lucene.Net.Index.Term = new call PagedBytesDataInput.ReadString() call PagedBytesDataInput.ReadString() call PagedBytesDataInput.ReadString() call PagedBytesDataInput.ReadString() call PagedBytesDataInput.ReadString() decl_stmt var = new = call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() if >= = call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() else = = call PagedBytesDataInput.ReadVLong() call PagedBytesDataInput.ReadVLong() call PagedBytesDataInput.ReadVLong() call PagedBytesDataInput.ReadVLong() call PagedBytesDataInput.ReadVLong() = call PagedBytesDataInput.ReadVLong() call PagedBytesDataInput.ReadVLong() call PagedBytesDataInput.ReadVLong() call PagedBytesDataInput.ReadVLong() call PagedBytesDataInput.ReadVLong() decl_stmt long = call PagedBytesDataInput.ReadVLong() call PagedBytesDataInput.ReadVLong() call PagedBytesDataInput.ReadVLong() call PagedBytesDataInput.ReadVLong() call PagedBytesDataInput.ReadVLong() long * - int int int BytesRef int PagedBytesDataInput internal virtual internal virtual decl_stmt int = decl_stmt int = - decl_stmt PagedBytesDataInput = call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() decl_stmt Lucene.Net.Util.BytesRef = new while >= decl_stmt int = + >> decl_stmt int = if < = - else if > = + else return return PagedBytesDataInput int Term public virtual public virtual decl_stmt PagedBytesDataInput = call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() = call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() decl_stmt int = call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() call PagedBytesDataInput.ReadVInt() decl_stmt Lucene.Net.Index.Term = return new call PagedBytesDataInput.ReadString() call PagedBytesDataInput.ReadString() call PagedBytesDataInput.ReadString() call PagedBytesDataInput.ReadString() call PagedBytesDataInput.ReadString() public virtual public virtual return public virtual public virtual return call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() call PagedBytesDataInput.Clone() new int private private decl_stmt int = if == = return call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() return private private = call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() call decl PackedInts.Get() return internal virtual internal virtual return