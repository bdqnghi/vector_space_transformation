Lucene.Net.Index Lucene.Net.Documents using Lucene.Net.Randomized.Generators using Lucene.Net.Support using System using System.Collections.Generic using System.Diagnostics using System.IO using System.Linq using NUnit.Framework using Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Codecs.Codec Lucene.Net.Util.Constants Lucene.Net.Store.Directory Documents.Document Lucene.Net.Index.FieldInfo.DocValuesType_e Field Lucene.Net.Codecs.FieldsConsumer Lucene.Net.Codecs.FieldsProducer FieldType Lucene.Net.Util.FixedBitSet Lucene.Net.Store.FlushInfo Lucene.Net.Store.IOContext Lucene.Net.Codecs.PostingsConsumer Lucene.Net.Codecs.TermsConsumer Lucene.Net.Codecs.TermStats Lucene.Net.Util.TestUtil class attribute Lucene.Net.Index.BasePostingsFormatTestCase super super BaseIndexFileFormatTestCase FixedBitSet long int FieldInfos decl IList FieldInfos long public override public override while if == || == || return internal virtual internal virtual while < if < if == && else if == ++ else += if == = else if == = else = = = = = ++ return else return = public override public override return public override public override return int public override public override if ! = return < if == && else if == ++ else += if != if = else decl_stmt int = if != = else = else = = + = + = ++ return public override public override return public override public override return return == : public override public override return public override public override return int private static private static decl_stmt int if = * = * else if = * = * else if = = * else = = return new : decl FieldInfo string int long DocsEnum int string double int int decl HashSet int decl SortedDictionary public static public static = = = new < < decl_stmt int = if + + = decl_stmt Lucene.Net.Index.FieldInfo = new decl_stmt int = while < decl_stmt string = if continue = new ++ decl_stmt System.Collections.Generic.SortedDictionary < = new < = decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt int if == = else = for = < ++ decl_stmt string = if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() continue call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() if && == && == = + else if == && == = + else if = + else = + decl_stmt long = new = decl_stmt Lucene.Net.Index.DocsEnum = decl_stmt int decl_stmt int = while = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != = = = new ++ = new decl_stmt double = for = < ++ if <= call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) = new < foreach < < in decl_stmt string = foreach < in call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new if + + + call Lucene.Net.Index.FieldInfos.Size() call Lucene.Net.Index.FieldInfos.Size() call Lucene.Net.Index.FieldInfos.Size() call Lucene.Net.Index.FieldInfos.Size() call Lucene.Net.Index.FieldInfos.Size() + public static public static = = = = bool FieldInfos FieldInfo bool long decl IndexOptions bool int int BytesRef FieldsConsumer Codec string SegmentWriteState FieldInfo bool FixedBitSet string int int SegmentInfo decl IDictionary long long decl FieldInfo var long int PostingsConsumer SeedPostings bool int TermsConsumer private private decl_stmt Lucene.Net.Codecs.Codec = decl_stmt Lucene.Net.Index.SegmentInfo = new decl_stmt int = typeof < if decl_stmt int = typeof < decl_stmt var = new for = < ++ decl_stmt Lucene.Net.Index.FieldInfo = call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) decl_stmt string = decl_stmt int if = else = decl_stmt IndexOptions = typeof < : + decl_stmt bool = call FieldInfo.CompareTo() call FieldInfo.CompareTo() call FieldInfo.CompareTo() call FieldInfo.CompareTo() call FieldInfo.CompareTo() >= && = new decl_stmt Lucene.Net.Index.FieldInfos = new decl_stmt long = * + decl_stmt SegmentWriteState = new new new decl_stmt Lucene.Net.Codecs.FieldsConsumer = call Codec.PostingsFormat() call Codec.PostingsFormat() call Codec.PostingsFormat() call Codec.PostingsFormat() call Codec.PostingsFormat() foreach < < in decl_stmt string = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = decl_stmt Lucene.Net.Index.FieldInfo = call bool.FieldInfo() call bool.FieldInfo() call bool.FieldInfo() call bool.FieldInfo() call bool.FieldInfo() decl_stmt IndexOptions ? = if + + + decl_stmt bool = >= decl_stmt bool = >= decl_stmt bool = >= && decl_stmt bool = >= decl_stmt Lucene.Net.Codecs.TermsConsumer = call SegmentWriteState.AddField() call SegmentWriteState.AddField() call SegmentWriteState.AddField() call SegmentWriteState.AddField() call SegmentWriteState.AddField() decl_stmt long = decl_stmt long = decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new foreach < in decl_stmt Lucene.Net.Util.BytesRef = decl_stmt SeedPostings = call long.Utf8ToString() call long.Utf8ToString() call long.Utf8ToString() call long.Utf8ToString() call long.Utf8ToString() if + + + call long.Utf8ToString() call long.Utf8ToString() call long.Utf8ToString() call long.Utf8ToString() call long.Utf8ToString() + + + + decl_stmt Lucene.Net.Codecs.PostingsConsumer = call bool.StartTerm() call bool.StartTerm() call bool.StartTerm() call bool.StartTerm() call bool.StartTerm() decl_stmt long = decl_stmt int = while = call Lucene.Net.Spatial.Util.FixedBitSet.NextDoc() call Lucene.Net.Spatial.Util.FixedBitSet.NextDoc() call Lucene.Net.Spatial.Util.FixedBitSet.NextDoc() call Lucene.Net.Spatial.Util.FixedBitSet.NextDoc() call Lucene.Net.Spatial.Util.FixedBitSet.NextDoc() != decl_stmt int = call FixedBitSet.Freq() call FixedBitSet.Freq() call FixedBitSet.Freq() call FixedBitSet.Freq() call FixedBitSet.Freq() if + + + + + call BytesRef.StartDoc() call BytesRef.StartDoc() call BytesRef.StartDoc() call BytesRef.StartDoc() call BytesRef.StartDoc() : - call long.Set() call long.Set() call long.Set() call long.Set() call long.Set() if += for = < ++ decl_stmt int = call FixedBitSet.NextPosition() call FixedBitSet.NextPosition() call FixedBitSet.NextPosition() call FixedBitSet.NextPosition() call FixedBitSet.NextPosition() decl_stmt Lucene.Net.Util.BytesRef = if if + + + == : + else + call BytesRef.AddPosition() call BytesRef.AddPosition() call BytesRef.AddPosition() call BytesRef.AddPosition() call BytesRef.AddPosition() : call FixedBitSet.StartOffset() call FixedBitSet.StartOffset() call FixedBitSet.StartOffset() call FixedBitSet.StartOffset() call FixedBitSet.StartOffset() : - call FixedBitSet.EndOffset() call FixedBitSet.EndOffset() call FixedBitSet.EndOffset() call FixedBitSet.EndOffset() call FixedBitSet.EndOffset() : - else if += else ++ call BytesRef.FinishDoc() call BytesRef.FinishDoc() call BytesRef.FinishDoc() call BytesRef.FinishDoc() call BytesRef.FinishDoc() call bool.FinishTerm() call bool.FinishTerm() call bool.FinishTerm() call bool.FinishTerm() call bool.FinishTerm() new : - += += call bool.Finish() call bool.Finish() call bool.Finish() call bool.Finish() call bool.Finish() : - call long.Cardinality() call long.Cardinality() call long.Cardinality() call long.Cardinality() call long.Cardinality() call SegmentWriteState.Dispose() call SegmentWriteState.Dispose() call SegmentWriteState.Dispose() call SegmentWriteState.Dispose() call SegmentWriteState.Dispose() if foreach in + + + + = decl_stmt SegmentReadState = new return call Codec.PostingsFormat() call Codec.PostingsFormat() call Codec.PostingsFormat() call Codec.PostingsFormat() call Codec.PostingsFormat() BytesRef int bool int BytesRef int double bool double SeedPostings double int bool DocsEnum int int bool int DocsAndPositionsEnum int DocsEnum bool FieldInfo int bool int int Bits bool bool bool int int int double private private < if + + + decl_stmt bool = && decl_stmt Lucene.Net.Spatial.Util.Bits if = if else = if decl_stmt Lucene.Net.Index.FieldInfo = call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) call Lucene.Net.Index.FieldInfos.FieldInfo(int) decl_stmt SeedPostings = decl_stmt bool = >= && >= decl_stmt bool = && || <= decl_stmt bool = >= && >= decl_stmt bool = && || <= decl_stmt bool = >= && >= decl_stmt bool = && || <= decl_stmt bool = && && call FieldInfo.HasPayloads() call FieldInfo.HasPayloads() call FieldInfo.HasPayloads() call FieldInfo.HasPayloads() call FieldInfo.HasPayloads() && || <= decl_stmt Lucene.Net.Index.DocsEnum = decl_stmt Lucene.Net.Index.DocsEnum decl_stmt DocsAndPositionsEnum if ! if && == if && < = decl_stmt int = if || |= if || |= if + = = = else if if && < = = : = = else if && < = decl_stmt int = if || || == |= if || || == |= if + = = = decl_stmt int = call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() - + if if == + else if == + else + + + + decl_stmt int if ! && && > && == = - if + + + + else = if decl_stmt double = : decl_stmt int = < : / decl_stmt int = / decl_stmt int = / decl_stmt bool = && == decl_stmt double = : decl_stmt double = : decl_stmt double = : if if + + + else if + if + if + while <= if == if == call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() break if && || <= decl_stmt int = - if < && decl_stmt int = for = < ++ if call SeedPostings.NextDoc() call SeedPostings.NextDoc() call SeedPostings.NextDoc() call SeedPostings.NextDoc() call SeedPostings.NextDoc() == break else decl_stmt int = if > = call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() + call SeedPostings.Advance() call SeedPostings.Advance() call SeedPostings.Advance() call SeedPostings.Advance() call SeedPostings.Advance() if >= decl_stmt int = : if + + call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() break else if if != - + + + + + + + call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() else + call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() + + + + + + call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() decl_stmt int = call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() call DocsEnum.Advance() != - : call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() else call SeedPostings.NextDoc() call SeedPostings.NextDoc() call SeedPostings.NextDoc() call SeedPostings.NextDoc() call SeedPostings.NextDoc() if + call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() + + + + + decl_stmt int = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() call SeedPostings.DocID() if == break if && <= if + call SeedPostings.Freq() call SeedPostings.Freq() call SeedPostings.Freq() call SeedPostings.Freq() call SeedPostings.Freq() decl_stmt int = call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call SeedPostings.Freq() call SeedPostings.Freq() call SeedPostings.Freq() call SeedPostings.Freq() call SeedPostings.Freq() if decl_stmt int = call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() decl_stmt int if ! && && == = else = for = < ++ decl_stmt int = call SeedPostings.NextPosition() call SeedPostings.NextPosition() call SeedPostings.NextPosition() call SeedPostings.NextPosition() call SeedPostings.NextPosition() if + call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() if decl_stmt Lucene.Net.Util.BytesRef = if <= if + == : if == || == else decl_stmt Lucene.Net.Util.BytesRef = for = < ++ + + = else if + == : if if <= if + call SeedPostings.StartOffset() call SeedPostings.StartOffset() call SeedPostings.StartOffset() call SeedPostings.StartOffset() call SeedPostings.StartOffset() + + call SeedPostings.EndOffset() call SeedPostings.EndOffset() call SeedPostings.EndOffset() call SeedPostings.EndOffset() call SeedPostings.EndOffset() call SeedPostings.StartOffset() call SeedPostings.StartOffset() call SeedPostings.StartOffset() call SeedPostings.StartOffset() call SeedPostings.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call SeedPostings.EndOffset() call SeedPostings.EndOffset() call SeedPostings.EndOffset() call SeedPostings.EndOffset() call SeedPostings.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() else if else if < if - call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() - call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() public override public override try try catch throw new finally = = int decl ThreadClass private private < if decl_stmt int = decl_stmt Lucene.Net.Support.ThreadClass = new for = < ++ = new for = < ++ else decl IList int TermState int TermsEnum FieldAndTerm bool Terms bool ThreadState decl IList private private < decl_stmt ThreadState = new decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < = decl_stmt int = while < decl_stmt bool = != && == decl_stmt FieldAndTerm decl_stmt Lucene.Net.Index.TermsEnum decl_stmt Lucene.Net.Index.TermState = if ! = ++ if + + + call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() else decl_stmt int = = if + + + call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() call FieldAndTerm.Term() = decl_stmt Lucene.Net.Index.Terms = = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() if ! call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) else call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) decl_stmt bool = if && ! && == call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = if && ! && ! && == call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = if || == if var decl IEnumerator private private decl_stmt System.Collections.Generic.IEnumerator < = while call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt var = call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl ISet var var int var DirectoryInfo decl ISet private private decl_stmt System.IO.DirectoryInfo = using = decl_stmt var = decl_stmt var = typeof decl_stmt int = for = <= ++ decl_stmt System.Collections.Generic.ISet < = new < typeof < if decl_stmt System.Collections.Generic.ISet < = new < decl_stmt var = new < call decl ISet.Except() call decl ISet.Except() call decl ISet.Except() call decl ISet.Except() call decl ISet.Except() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() public virtual public virtual public virtual public virtual public virtual public virtual public virtual public virtual public virtual public virtual public virtual public virtual int DirectoryInfo FieldsProducer bool Directory public virtual public virtual decl_stmt int = for = < ++ decl_stmt System.IO.DirectoryInfo = decl_stmt Lucene.Net.Store.Directory = decl_stmt bool = decl_stmt FieldsProducer = new < typeof < call FieldsProducer.Dispose() call FieldsProducer.Dispose() call FieldsProducer.Dispose() call FieldsProducer.Dispose() call FieldsProducer.Dispose() = call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() string var string int protected internal override protected internal override foreach in typeof decl_stmt string = + decl_stmt string = if == && continue decl_stmt var = new = = = call var.Freeze() call var.Freeze() call var.Freeze() call var.Freeze() call var.Freeze() decl_stmt int = for = < ++ new +