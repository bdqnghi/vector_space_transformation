Lucene.Net.Index Apache.NMS.Util using Lucene.Net.Analysis.Tokenattributes using System using System.Collections.Generic using System.Linq using System.Threading using Lucene.Net.Attributes using Lucene.Net.Codecs using Lucene.Net.Documents using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Util.Attribute Lucene.Net.Util.BytesRef Lucene.Net.Analysis.Tokenattributes.CharTermAttribute Lucene.Net.Codecs.Codec Lucene.Net.Store.Directory Documents.Document Field FieldType Lucene.Net.Util.FixedBitSet Lucene.Net.Search.IndexSearcher Lucene.Net.Analysis.Tokenattributes.OffsetAttribute Lucene.Net.Analysis.Tokenattributes.PayloadAttribute Lucene.Net.Analysis.Tokenattributes.PositionIncrementAttribute Lucene.Net.Index.TermsEnum.SeekStatus StringField Lucene.Net.Search.TermQuery Lucene.Net.Util.TestUtil TextField Lucene.Net.Analysis.TokenStream class Lucene.Net.Index.BaseTermVectorsFormatTestCase super super BaseIndexFileFormatTestCase decl ThreadLocal decl ThreadLocal private private = = = public static < public static < return typeof < public static < public static < foreach in typeof if >= && <= yield public public return public public return public public = = public override public override = = PermissiveOffsetAttributeImpl public override public override if == return if is decl_stmt PermissiveOffsetAttributeImpl = return == && == return public override public override return + * OffsetAttribute public override public override decl_stmt Lucene.Net.Analysis.Tokenattributes.OffsetAttribute = call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.SetOffset(int,int) public virtual public virtual foreach in if != && > return return public sealed override public sealed override if < = = ++ return else return Document public virtual public virtual decl_stmt Lucene.Net.Documents.Document = new for = < ++ call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new return public virtual public virtual return new bool DocsEnum DocsAndPositionsEnum TermsEnum decl BytesRef decl ISet bool BytesRef decl HashSet int int FixedBitSet int bool protected internal virtual protected internal virtual decl_stmt int = new < && decl_stmt System.Collections.Generic.HashSet < = new < foreach in call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() new decl_stmt Lucene.Net.Util.BytesRef = call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() decl_stmt Lucene.Net.Index.TermsEnum = : = for = < ++ decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new decl_stmt Lucene.Net.Index.DocsEnum = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) : call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) : : call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call DocsEnum.DocID() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() int call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.Freq() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() = call Lucene.Net.Spatial.Util.FixedBitSet.Clear(int,int) call Lucene.Net.Spatial.Util.FixedBitSet.Clear(int,int) call Lucene.Net.Spatial.Util.FixedBitSet.Clear(int,int) call Lucene.Net.Spatial.Util.FixedBitSet.Clear(int,int) call Lucene.Net.Spatial.Util.FixedBitSet.Clear(int,int) decl_stmt DocsAndPositionsEnum = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) : || != if != call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) call Lucene.Net.Spatial.Util.FixedBitSet.Set(int) = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) : : || != if || call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() decl_stmt int = call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call DocsAndPositionsEnum.Freq() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() int if != for = < ++ decl_stmt int = call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() decl_stmt System.Collections.Generic.ISet < ? if = else = call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() if decl_stmt bool = foreach in if call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() && == = break if decl_stmt bool = foreach in if call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() && == call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() call DocsAndPositionsEnum.StartOffset() && == call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() call DocsAndPositionsEnum.EndOffset() = break if decl_stmt bool = foreach in if call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() && = break try call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() call DocsAndPositionsEnum.NextPosition() catch call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() call DocsAndPositionsEnum.NextDoc() = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() for = < ++ if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) else call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) protected internal virtual protected internal virtual new return protected internal virtual protected internal virtual return new new new int Fields RandomDocument RandomIndexWriter int Fields IndexReader int RandomDocumentFactory Document int Directory public virtual public virtual decl_stmt RandomDocumentFactory = new foreach in decl_stmt int = decl_stmt int = decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt RandomDocument = call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() for = < ++ if == call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() else call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) decl_stmt Lucene.Net.Index.IndexReader = decl_stmt int = for = < ++ decl_stmt int = decl_stmt Lucene.Net.Index.Fields = call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() if == else decl_stmt Lucene.Net.Index.Fields = call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() RandomDocument RandomDocumentFactory public virtual public virtual decl_stmt RandomDocumentFactory = new foreach in if == continue using = using = new decl_stmt RandomDocument = call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() using = RandomDocument RandomDocumentFactory RandomIndexWriter Directory IndexReader public virtual public virtual decl_stmt RandomDocumentFactory = new foreach in decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt RandomDocument = call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() decl_stmt Lucene.Net.Index.IndexReader = call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() int RandomDocument RandomDocument int int var public virtual public virtual decl_stmt int = decl_stmt var = new foreach in foreach in if == continue using = using = new decl_stmt RandomDocument = call var.NewDocument() call var.NewDocument() call var.NewDocument() call var.NewDocument() call var.NewDocument() decl_stmt RandomDocument = call var.NewDocument() call var.NewDocument() call var.NewDocument() call var.NewDocument() call var.NewDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() call RandomDocument.ToDocument() using = decl_stmt int = decl_stmt int = int decl RandomDocument RandomIndexWriter IndexReader RandomDocumentFactory int Directory public virtual public virtual decl_stmt RandomDocumentFactory = new decl_stmt int = decl_stmt RandomDocument = new for = < ++ = call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new for = < ++ call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) + decl_stmt Lucene.Net.Index.IndexReader = for = < ++ decl_stmt int = + call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() int int decl RandomDocument RandomIndexWriter IndexReader RandomDocumentFactory int Directory decl HashSet public virtual public virtual decl_stmt RandomDocumentFactory = new decl_stmt int = decl_stmt int = decl_stmt System.Collections.Generic.HashSet < ? = new < ? while < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() foreach in decl_stmt RandomDocument = new for = < ++ = call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new for = < ++ call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) + if call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() call Lucene.Net.Index.RandomIndexWriter.Commit() foreach in call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) call Lucene.Net.Index.RandomIndexWriter.DeleteDocuments(Query) new + call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) decl_stmt Lucene.Net.Index.IndexReader = for = < ++ if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() decl_stmt int = + call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() decl AtomicReference int decl RandomDocument RandomIndexWriter decl ThreadClass IndexReader RandomDocumentFactory int Directory public virtual public virtual decl_stmt RandomDocumentFactory = new decl_stmt int = foreach in decl_stmt RandomDocument = new for = < ++ = call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() call RandomDocumentFactory.NewDocument() decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.RandomIndexWriter = new for = < ++ call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) call Lucene.Net.Index.RandomIndexWriter.AddDocument(IEnumerable) + decl_stmt Lucene.Net.Index.IndexReader = for = < ++ decl_stmt int = + call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() call IndexReader.GetTermVectors() decl_stmt AtomicReference < = new < decl_stmt Lucene.Net.Support.ThreadClass = new for = < ++ = new foreach in foreach in call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.IndexReader.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() int int public override public override try for = < ++ decl_stmt int = decl_stmt int = + catch =