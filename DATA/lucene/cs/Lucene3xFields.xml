Lucene.Net.Codecs.Lucene3x System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Store.Directory Lucene.Net.Index.DocsAndPositionsEnum Lucene.Net.Index.DocsEnum Lucene.Net.Index.FieldInfo Lucene.Net.Index.FieldInfos Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexInput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Index.SegmentInfo Lucene.Net.Index.Term Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum Lucene.Net.Util.UnicodeUtil class attribute Lucene.Net.Codecs.Lucene3x.Lucene3xFields super super FieldsProducer bool decl IDictionary decl SortedDictionary FieldInfos TermInfosReader IndexInput SegmentInfo Directory IOContext TermInfosReader IndexInput Directory protected internal virtual protected internal virtual return public override < public override < return call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() call decl SortedDictionary.Keys() Terms public override public override decl_stmt Lucene.Net.Index.Terms call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out return == return return lock if != return else return public override public override var public override public override decl_stmt var = new call var.Reset() call var.Reset() call var.Reset() call var.Reset() call var.Reset() return if return else return public override public override return - return - return - return - public override public override return >= public override public override < return public override public override return >= public override public override return private static private static return sbyte & == private static private static return sbyte & == bool int Term BytesRef internal virtual internal virtual decl_stmt int = == if < + + = sbyte = sbyte + = sbyte + = unchecked byte + = unchecked byte + = unchecked byte + = unchecked byte = + if + new decl_stmt Lucene.Net.Index.Term = if == || != return if + call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() decl_stmt Lucene.Net.Util.BytesRef = == decl_stmt bool if >= && = for = < ++ if != = break else = = = byte + = byte + = byte return bool int int internal virtual internal virtual if decl_stmt int = - decl_stmt bool = decl_stmt int = - while > if if + + + if = = if break else if if & == || & == = -- return Term BytesRef internal virtual internal virtual if <= < || == if > && && = unchecked byte = + if + + + new decl_stmt Lucene.Net.Index.Term = if != && == if + call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() + + decl_stmt Lucene.Net.Util.BytesRef = == return else if != || != if = = return return internal virtual internal virtual if ! return if == || != = else if + + + + == == while if break else if ! break if int bool int Term BytesRef internal virtual internal virtual decl_stmt int = if + + + while < if && > || >= || ! && ! >= + decl_stmt int = = sbyte = sbyte + = sbyte + = byte + = unchecked byte + = unchecked byte = + if + + + + + + + new = byte + = byte + = byte = decl_stmt Lucene.Net.Index.Term = if if == else + call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() + + == : decl_stmt bool if != && == decl_stmt Lucene.Net.Util.BytesRef = == if >= + && = for = < ++ if != = break else = else = if if += else ++ else ++ Term Term internal virtual internal virtual = = decl_stmt Lucene.Net.Index.Term = new if == = = else = = decl_stmt Lucene.Net.Index.Term = if != && == = = if return else return public override public override throw new public override public override throw new BytesRef Term Term Term TermInfosReader public override public override if + = decl_stmt Lucene.Net.Codecs.Lucene3x.TermInfosReader = decl_stmt Lucene.Net.Index.Term = new != call Lucene.Net.Codecs.Lucene3x.TermInfosReader.SeekEnum(SegmentTermEnum,int) call Lucene.Net.Codecs.Lucene3x.TermInfosReader.SeekEnum(SegmentTermEnum,int) call Lucene.Net.Codecs.Lucene3x.TermInfosReader.SeekEnum(SegmentTermEnum,int) call Lucene.Net.Codecs.Lucene3x.TermInfosReader.SeekEnum(SegmentTermEnum,int) call Lucene.Net.Codecs.Lucene3x.TermInfosReader.SeekEnum(SegmentTermEnum,int) decl_stmt Lucene.Net.Index.Term = if != && == && if = return else if == || != if == for = - >= -- if if + + if = + = return if = return else if + call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() decl_stmt Lucene.Net.Util.BytesRef = == decl_stmt Lucene.Net.Index.Term = if == || != == || ! call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() = return else = ! || < + + + return int int internal virtual internal virtual decl_stmt int = decl_stmt int = for = < ++ if + & == || + & == = if + != + = if + return = if + Term public override public override if if if = if == return else if != return else return = if && == = if + decl_stmt Lucene.Net.Index.Term = if == || != == || ! call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() = else = return else if = decl_stmt Lucene.Net.Index.Term = if == || != == || ! call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() call Term.Field() return else = return public override public override return public override public override return public override public override return - PreDocsEnum public override public override decl_stmt PreDocsEnum if == || ! is = new else = if != = new return call PreDocsEnum.Reset() call PreDocsEnum.Reset() call PreDocsEnum.Reset() call PreDocsEnum.Reset() call PreDocsEnum.Reset() PreDocsAndPositionsEnum public override public override decl_stmt PreDocsAndPositionsEnum if != return else if == || ! is = new else = if != = new return call PreDocsAndPositionsEnum.Reset() call PreDocsAndPositionsEnum.Reset() call PreDocsAndPositionsEnum.Reset() call PreDocsAndPositionsEnum.Reset() call PreDocsAndPositionsEnum.Reset() return public public = = = - return public override public override if return = else return = public override public override if return = else return = public override public override return public override public override return public override public override return return public public = = - return public override public override if return = else return = public override public override if return = else return = public override public override return public override public override return public override public override != return public override public override return - public override public override return - return public override public override return public override public override if != return call Lucene.Net.Codecs.Lucene3x.TermInfosReader.RamBytesUsed() call Lucene.Net.Codecs.Lucene3x.TermInfosReader.RamBytesUsed() call Lucene.Net.Codecs.Lucene3x.TermInfosReader.RamBytesUsed() call Lucene.Net.Codecs.Lucene3x.TermInfosReader.RamBytesUsed() call Lucene.Net.Codecs.Lucene3x.TermInfosReader.RamBytesUsed() else return public override public override