Lucene.Net.Index.Memory System using System.Collections.Generic using System.IO using System.Linq using System.Text using Lucene.Net.Analysis using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Documents using Lucene.Net.Search using Lucene.Net.Support using class attribute Lucene.Net.Index.Memory.MemoryIndex long decl HashMap int float Term bool TokenStream public public if == throw new if == throw new if == throw new decl_stmt Lucene.Net.Analysis.TokenStream = new public public public < < if == throw new return new < public public var String var ArrayIntList int int int var int var public public try if == throw new if == throw new if <= throw new if != throw new decl_stmt var = new < decl_stmt int = decl_stmt int = decl_stmt int = - decl_stmt var = < decl_stmt var = < decl_stmt var = < while decl_stmt System.String = if == continue ++ decl_stmt int = if == ++ += decl_stmt ArrayIntList = if == = new = if == call ArrayIntList.Add() call ArrayIntList.Add() call ArrayIntList.Add() call ArrayIntList.Add() call ArrayIntList.Add() else call ArrayIntList.Add() call ArrayIntList.Add() call ArrayIntList.Add() call ArrayIntList.Add() call ArrayIntList.Add() if > = * = new = catch throw new finally try if != catch throw new IndexSearcher MemoryIndexReader public public decl_stmt MemoryIndexReader = new decl_stmt Lucene.Net.Search.IndexSearcher = new call MemoryIndexReader.SetSearcher() call MemoryIndexReader.SetSearcher() call MemoryIndexReader.SetSearcher() call MemoryIndexReader.SetSearcher() call MemoryIndexReader.SetSearcher() return Searcher float decl float public public if == throw new decl_stmt Lucene.Net.Search.Searcher = try decl_stmt float = new call Lucene.Net.Search.Searcher.Search(Query,Collector) call Lucene.Net.Search.Searcher.Search(Query,Collector) call Lucene.Net.Search.Searcher.Search(Query,Collector) call Lucene.Net.Search.Searcher.Search(Query,Collector) call Lucene.Net.Search.Searcher.Search(Query,Collector) new decl_stmt float = return catch throw new finally Info decl KeyValuePair int var int ArrayIntList int int public public decl_stmt int = decl_stmt int = decl_stmt int = += * + if != += += foreach in decl_stmt Info = += * + * if != += decl_stmt int = += decl_stmt var = call Info.Terms() call Info.Terms() call Info.Terms() call Info.Terms() call Info.Terms() call Info.Terms() call Info.Terms() call Info.Terms() call Info.Terms() while -- >= call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() decl_stmt KeyValuePair < = += + * decl_stmt ArrayIntList = += call ArrayIntList.Size() call ArrayIntList.Size() call ArrayIntList.Size() call ArrayIntList.Size() call ArrayIntList.Size() return private private return / private private if == = var int private static < private static < private static < < < where where class < decl_stmt int = decl_stmt var = if > return Info int decl KeyValuePair int ArrayIntList int String String StringBuilder int int decl KeyValuePair public override public override decl_stmt System.Text.StringBuilder = new decl_stmt int = decl_stmt int = decl_stmt int = for = < ++ decl_stmt KeyValuePair < = decl_stmt System.String = decl_stmt Info = call Info.SortTerms() call Info.SortTerms() call Info.SortTerms() call Info.SortTerms() call Info.SortTerms() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + decl_stmt int = decl_stmt int = for = < ++ decl_stmt KeyValuePair < = decl_stmt System.String = decl_stmt ArrayIntList = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + + + + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call ArrayIntList.ToString() call ArrayIntList.ToString() call ArrayIntList.ToString() call ArrayIntList.ToString() call ArrayIntList.ToString() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) += += call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + / call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) += += += call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + / return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) return return return = return return public public if == = public public return public public return public public if == + ++ = public public if + > + = + = + = += public public if >= return public public return decl int public public decl_stmt int = new / if == else for = = < ++ , += = return int decl int private private decl_stmt int = * / + decl_stmt int = new = private private throw new + + + int StringBuilder int public public decl_stmt int = / decl_stmt int = decl_stmt System.Text.StringBuilder = new * call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) for = < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) * if < - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) private private return private private return Info int public override public override decl_stmt Info = decl_stmt int = if != = call Info.GetPositions() call Info.GetPositions() call Info.GetPositions() call Info.GetPositions() call Info.GetPositions() != : if + + + return public override public override if return int Info int int int public override public override if + decl_stmt int decl_stmt int if == && == = else = new < if < = - - = if < else decl_stmt Info = call Info.SortTerms() call Info.SortTerms() call Info.SortTerms() call Info.SortTerms() call Info.SortTerms() = new < if < = - - if >= ++ = if < decl_stmt int = decl_stmt int = return new public override public override if return new public override public override if return public override public override if return public override public override if foreach in Info int var ArrayIntList int int public override public override if decl_stmt Info = if == return call Info.SortTerms() call Info.SortTerms() call Info.SortTerms() call Info.SortTerms() call Info.SortTerms() != for = -- >= decl_stmt ArrayIntList = decl_stmt int = call ArrayIntList.Size() call ArrayIntList.Size() call ArrayIntList.Size() call ArrayIntList.Size() call ArrayIntList.Size() decl_stmt var = new / for = = < ++ , += decl_stmt int = call ArrayIntList.Get() call ArrayIntList.Get() call ArrayIntList.Get() call ArrayIntList.Get() call ArrayIntList.Get() decl_stmt int = call ArrayIntList.Get() call ArrayIntList.Get() call ArrayIntList.Get() call ArrayIntList.Get() call ArrayIntList.Get() + = new Info public override public override if decl_stmt Info = if == return call Info.SortTerms() call Info.SortTerms() call Info.SortTerms() call Info.SortTerms() call Info.SortTerms() return new private private if != return return internal internal = Info FieldInvertState int int byte decl byte float float Similarity public override public override decl_stmt byte = decl_stmt Lucene.Net.Search.Similarity = if != || != decl_stmt Info = decl_stmt int = != : decl_stmt int = != : decl_stmt float = != : decl_stmt Lucene.Net.Index.FieldInvertState = new decl_stmt float = call Lucene.Net.Search.Similarity.ComputeNorm(System,String,FieldInvertState) call Lucene.Net.Search.Similarity.ComputeNorm(System,String,FieldInvertState) call Lucene.Net.Search.Similarity.ComputeNorm(System,String,FieldInvertState) call Lucene.Net.Search.Similarity.ComputeNorm(System,String,FieldInvertState) call Lucene.Net.Search.Similarity.ComputeNorm(System,String,FieldInvertState) decl_stmt byte = = new = = = if + + + + + + + return decl byte public override public override if + decl_stmt byte = protected override protected override throw new public override public override if return > : if return public override public override if return new public override public override if return new public override public override if return if return protected override protected override throw new protected override protected override throw new protected override protected override < if protected override protected override if public override < public override < if if == return < < if == return < < if == && == return < < if == && == return < < return private static private static return - >> + << public static public static return + public static public static return + * public static public static return + * public static public static return + * public static public static return * + + public static public static return * + * + + * * + public static public static return + * + public static public static return + + private static private static return == private static private static return