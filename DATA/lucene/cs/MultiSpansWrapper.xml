Lucene.Net.Search.Spans System.Collections.Generic using System.Diagnostics using Lucene.Net.Index using Lucene.Net.Index.AtomicReaderContext Lucene.Net.Index.IndexReaderContext Lucene.Net.Index.ReaderUtil Lucene.Net.Index.Term Lucene.Net.Index.TermContext class Lucene.Net.Search.Spans.MultiSpansWrapper super super Spans comment decl IDictionary decl IList Spans int SpanQuery int AtomicReaderContext decl IDictionary decl SortedSet decl IList public static public static decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < decl_stmt System.Collections.Generic.SortedSet < = new < foreach in = decl_stmt System.Collections.Generic.IList < = if == decl_stmt Lucene.Net.Index.AtomicReaderContext = return return new AtomicReaderContext public override public override if >= return if == decl_stmt Lucene.Net.Index.AtomicReaderContext = = call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() while if call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() return if ++ < decl_stmt Lucene.Net.Index.AtomicReaderContext = = call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() else = break return int AtomicReaderContext public override public override if >= return decl_stmt int = >= if != decl_stmt Lucene.Net.Index.AtomicReaderContext = = call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() = else if == decl_stmt Lucene.Net.Index.AtomicReaderContext = = call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() while if < if call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() call Spans.Next() return else if call Spans.SkipTo() call Spans.SkipTo() call Spans.SkipTo() call Spans.SkipTo() call Spans.SkipTo() - return if ++ < decl_stmt Lucene.Net.Index.AtomicReaderContext = = call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() call SpanQuery.GetSpans() else = break return public override public override if == return return call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() call Spans.Doc() + public override public override if == return return call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() call Spans.Start() public override public override if == return return call Spans.End() call Spans.End() call Spans.End() call Spans.End() call Spans.End() if == return new < return if == return return public override public override return