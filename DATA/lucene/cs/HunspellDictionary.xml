Lucene.Net.Analysis.Hunspell System using System.Collections.Generic using System.Globalization using System.IO using System.Text using System.Text.RegularExpressions using class Lucene.Net.Analysis.Hunspell.HunspellDictionary decl Dictionary String String String FlagParsingStrategy String decl Dictionary String HunspellWord decl Dictionary decl Dictionary String String String String decl List public < public < if == throw new decl_stmt System.Collections.Generic.List < if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out return return decl List var public < public < if == throw new decl_stmt var = new decl_stmt System.Collections.Generic.List < if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out return return decl List var public < public < if == throw new decl_stmt var = new decl_stmt System.Collections.Generic.List < if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out return return String private private if == throw new if == throw new using = new decl_stmt System.String while = != if call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) else if call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) else if call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) = else if call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) call System.String.StartsWith(String,StringComparison) var var var var private private if == throw new decl_stmt var = decl_stmt var = for = < ++ = decl_stmt var = if != throw new + decl_stmt var = call FlagParsingStrategy.ParseFlags() call FlagParsingStrategy.ParseFlags() call FlagParsingStrategy.ParseFlags() call FlagParsingStrategy.ParseFlags() call FlagParsingStrategy.ParseFlags() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() + var var var var var var var decl List var var var var var private private < < if == throw new if == throw new if == throw new if == throw new decl_stmt var = decl_stmt var = decl_stmt var = decl_stmt var = > for = < ++ decl_stmt var = decl_stmt var = decl_stmt var = new = call FlagParsingStrategy.ParseFlag() call FlagParsingStrategy.ParseFlag() call FlagParsingStrategy.ParseFlag() call FlagParsingStrategy.ParseFlag() call FlagParsingStrategy.ParseFlag() = == : decl_stmt var = decl_stmt var = call var.LastIndexOf() call var.LastIndexOf() call var.LastIndexOf() call var.LastIndexOf() call var.LastIndexOf() if != - decl_stmt var = call var.Substring() call var.Substring() call var.Substring() call var.Substring() call var.Substring() + decl_stmt var = : call FlagParsingStrategy.ParseFlags() call FlagParsingStrategy.ParseFlags() call FlagParsingStrategy.ParseFlags() call FlagParsingStrategy.ParseFlags() call FlagParsingStrategy.ParseFlags() = = call var.Substring() call var.Substring() call var.Substring() call var.Substring() call var.Substring() else = decl_stmt var = call var.SetCondition() call var.SetCondition() call var.SetCondition() call var.SetCondition() call var.SetCondition() = decl_stmt System.Collections.Generic.List < if ! out = new < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() var int private static private static if == throw new decl_stmt var = new for = decl_stmt int while = >= if == break if != call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() char if == || == || call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() == if < throw new continue if call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() return call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() - throw new + + + var private static private static if == throw new decl_stmt var = if call System.String.Equals(String,StringComparison) call System.String.Equals(String,StringComparison) call System.String.Equals(String,StringComparison) call System.String.Equals(String,StringComparison) call System.String.Equals(String,StringComparison) return new if call System.String.Equals(String,StringComparison) call System.String.Equals(String,StringComparison) call System.String.Equals(String,StringComparison) call System.String.Equals(String,StringComparison) call System.String.Equals(String,StringComparison) return new if call System.String.Equals(String,StringComparison) call System.String.Equals(String,StringComparison) call System.String.Equals(String,StringComparison) call System.String.Equals(String,StringComparison) call System.String.Equals(String,StringComparison) return new throw new + var var decl List var var var String var var HunspellWord private private if == throw new if == throw new decl_stmt var = new decl_stmt var = call var.ReadLine() call var.ReadLine() call var.ReadLine() call var.ReadLine() call var.ReadLine() decl_stmt var = decl_stmt var = > while = call var.ReadLine() call var.ReadLine() call var.ReadLine() call var.ReadLine() call var.ReadLine() != decl_stmt System.String decl_stmt Lucene.Net.Analysis.Hunspell.HunspellWord decl_stmt var = call var.LastIndexOf() call var.LastIndexOf() call var.LastIndexOf() call var.LastIndexOf() call var.LastIndexOf() if == - = = else decl_stmt var = call var.IndexOf() call var.IndexOf() call var.IndexOf() call var.IndexOf() call var.IndexOf() decl_stmt var = == - call var.Substring() call var.Substring() call var.Substring() call var.Substring() call var.Substring() + : call var.Substring() call var.Substring() call var.Substring() call var.Substring() call var.Substring() + - - = new : call FlagParsingStrategy.ParseFlags() call FlagParsingStrategy.ParseFlags() call FlagParsingStrategy.ParseFlags() call FlagParsingStrategy.ParseFlags() call FlagParsingStrategy.ParseFlags() = call var.Substring() call var.Substring() call var.Substring() call var.Substring() call var.Substring() decl_stmt System.Collections.Generic.List < if ! call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() = new < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() var var public override public override if == return new decl_stmt var = new for = < += decl_stmt var = + + call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() public public if == throw new return var var var public override public override decl_stmt var = decl_stmt var = new for = < ++ decl_stmt var = = return public override public override return