Lucene.Net.Util.Automaton Lucene.Net.Support using System using System.Collections.Generic using System.Diagnostics using class Lucene.Net.Util.Automaton.DaciukMihovAutomatonBuilder CharsRef State decl IComparer decl Dictionary int internal internal decl_stmt int = return >= : State public override public override decl_stmt Lucene.Net.Util.Automaton.State = return == && && int public override public override decl_stmt int = : ^= * + foreach in ^= * + foreach in ^= return internal internal return > internal internal < + = + = + - = return - = new internal internal return - int State internal internal decl_stmt int = - decl_stmt Lucene.Net.Util.Automaton.State = if >= && == = == return internal internal - = internal static internal static if != return for = < ++ if != return return State int public public != == || call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() <= + + + decl_stmt int = = decl_stmt Lucene.Net.Util.Automaton.State = while < && = != = += if public public if == throw new if call State.HasChildren() call State.HasChildren() call State.HasChildren() call State.HasChildren() call State.HasChildren() = return decl Automaton decl State decl Util private static private static < decl_stmt Lucene.Net.Util.Automaton.State = if != return = new = = decl_stmt int = decl_stmt int = foreach in call decl Util.AddTransition() call decl Util.AddTransition() call decl Util.AddTransition() call decl Util.AddTransition() call decl Util.AddTransition() new ++ return Automaton CharsRef DaciukMihovAutomatonBuilder public static public static < decl_stmt Lucene.Net.Util.Automaton.DaciukMihovAutomatonBuilder = new decl_stmt Lucene.Net.Util.CharsRef = new foreach in call Lucene.Net.Util.Automaton.DaciukMihovAutomatonBuilder.Add(CharsRef) call Lucene.Net.Util.Automaton.DaciukMihovAutomatonBuilder.Add(CharsRef) call Lucene.Net.Util.Automaton.DaciukMihovAutomatonBuilder.Add(CharsRef) call Lucene.Net.Util.Automaton.DaciukMihovAutomatonBuilder.Add(CharsRef) call Lucene.Net.Util.Automaton.DaciukMihovAutomatonBuilder.Add(CharsRef) decl_stmt Lucene.Net.Util.Automaton.Automaton = new = call Lucene.Net.Util.Automaton.DaciukMihovAutomatonBuilder.Complete() call Lucene.Net.Util.Automaton.DaciukMihovAutomatonBuilder.Complete() call Lucene.Net.Util.Automaton.DaciukMihovAutomatonBuilder.Complete() call Lucene.Net.Util.Automaton.DaciukMihovAutomatonBuilder.Complete() call Lucene.Net.Util.Automaton.DaciukMihovAutomatonBuilder.Complete() new < = return private private = return State State private private decl_stmt Lucene.Net.Util.Automaton.State = if call State.HasChildren() call State.HasChildren() call State.HasChildren() call State.HasChildren() call State.HasChildren() decl_stmt Lucene.Net.Util.Automaton.State if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out else = int int private private decl_stmt int = while < decl_stmt int = = += =