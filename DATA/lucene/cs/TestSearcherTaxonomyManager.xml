Lucene.Net.Facet.Taxonomy System using System.Collections.Generic using System.IO using System.Threading using Apache.NMS using Lucene.Net.Support using NUnit.Framework using Lucene.Net.Analysis.MockAnalyzer Lucene.Net.Documents.Document Lucene.Net.Facet.Taxonomy.SearcherTaxonomyManager.SearcherAndTaxonomy Lucene.Net.Facet.Taxonomy.Directory.DirectoryTaxonomyWriter Lucene.Net.Index.IndexWriter Lucene.Net.Index.IndexWriterConfig Lucene.Net.Index.TieredMergePolicy Lucene.Net.Search.MatchAllDocsQuery Lucene.Net.Search using Lucene.Net.Store.Directory Lucene.Net.Util.IOUtils Lucene.Net.Util.TestUtil class attribute Lucene.Net.Facet.Taxonomy.TestSearcherTaxonomyManager super super FacetTestCase var string Document int decl IList public override public override try decl_stmt var = new < decl_stmt System.Collections.Generic.IList < = new < while decl_stmt Lucene.Net.Documents.Document = new decl_stmt int = for = < ++ decl_stmt string if > && != = else = while = if != && ! call var.Contains() call var.Contains() call var.Contains() call var.Contains() call var.Contains() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() break call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) new try if != && < catch throw new if + + + if >= break finally decl Directory decl Store TieredMergePolicy SearcherAndTaxonomy var AtomicBoolean var int var FacetsCollector IndexWriterConfig decl Directory FacetsConfig IndexWriter var decl Store public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriterConfig = new call decl Store.SetMaxBufferedDocs() call decl Store.SetMaxBufferedDocs() call decl Store.SetMaxBufferedDocs() call decl Store.SetMaxBufferedDocs() call decl Store.SetMaxBufferedDocs() decl_stmt Lucene.Net.Index.TieredMergePolicy = new = call decl Store.SetMergePolicy() call decl Store.SetMergePolicy() call decl Store.SetMergePolicy() call decl Store.SetMergePolicy() call decl Store.SetMergePolicy() decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt var = new decl_stmt Lucene.Net.Facet.FacetsConfig = new call IndexWriter.SetMultiValued() call IndexWriter.SetMultiValued() call IndexWriter.SetMultiValued() call IndexWriter.SetMultiValued() call IndexWriter.SetMultiValued() decl_stmt Lucene.Net.Support.AtomicBoolean = new decl_stmt int = : decl_stmt var = new decl_stmt var = new decl_stmt var = new = call var.Start() call var.Start() call var.Start() call var.Start() call var.Start() = call AtomicBoolean.Start() call AtomicBoolean.Start() call AtomicBoolean.Start() call AtomicBoolean.Start() call AtomicBoolean.Start() try while ! call var.Get() call var.Get() call var.Get() call var.Get() call var.Get() decl_stmt SearcherAndTaxonomy = call int.Acquire() call int.Acquire() call int.Acquire() call int.Acquire() call int.Acquire() try decl_stmt Lucene.Net.Facet.FacetsCollector = new call var.searcher() call var.searcher() call var.searcher() call var.searcher() call var.searcher() call var.searcher() call var.searcher() call var.searcher() call var.searcher() new decl_stmt Facets = decl_stmt Lucene.Net.Facet.FacetResult = call SearcherAndTaxonomy.GetTopChildren() call SearcherAndTaxonomy.GetTopChildren() call SearcherAndTaxonomy.GetTopChildren() call SearcherAndTaxonomy.GetTopChildren() call SearcherAndTaxonomy.GetTopChildren() if > > > finally call int.Release() call int.Release() call int.Release() call int.Release() call int.Release() finally call AtomicBoolean.Join() call AtomicBoolean.Join() call AtomicBoolean.Join() call AtomicBoolean.Join() call AtomicBoolean.Join() call var.Join() call var.Join() call var.Join() call var.Join() call var.Join() if public override public override while ! try if if catch throw new decl Store SearcherAndTaxonomy var AtomicBoolean IndexWriter int FacetsCollector decl Store decl Directory decl Directory FacetsConfig var var public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new new decl_stmt var = new call decl Store.Commit() call decl Store.Commit() call decl Store.Commit() call decl Store.Commit() call decl Store.Commit() call decl Directory.Commit() call decl Directory.Commit() call decl Directory.Commit() call decl Directory.Commit() call decl Directory.Commit() decl_stmt var = new decl_stmt Lucene.Net.Facet.FacetsConfig = new call var.SetMultiValued() call var.SetMultiValued() call var.SetMultiValued() call var.SetMultiValued() call var.SetMultiValued() decl_stmt Lucene.Net.Support.AtomicBoolean = new decl_stmt int = : decl_stmt var = new call AtomicBoolean.Start() call AtomicBoolean.Start() call AtomicBoolean.Start() call AtomicBoolean.Start() call AtomicBoolean.Start() try while ! call var.Get() call var.Get() call var.Get() call var.Get() call var.Get() decl_stmt SearcherAndTaxonomy = call IndexWriter.Acquire() call IndexWriter.Acquire() call IndexWriter.Acquire() call IndexWriter.Acquire() call IndexWriter.Acquire() try decl_stmt Lucene.Net.Facet.FacetsCollector = new call int.searcher() call int.searcher() call int.searcher() call int.searcher() call int.searcher() call int.searcher() call int.searcher() call int.searcher() call int.searcher() new decl_stmt Facets = decl_stmt Lucene.Net.Facet.FacetResult = call SearcherAndTaxonomy.GetTopChildren() call SearcherAndTaxonomy.GetTopChildren() call SearcherAndTaxonomy.GetTopChildren() call SearcherAndTaxonomy.GetTopChildren() call SearcherAndTaxonomy.GetTopChildren() if > > > finally call Lucene.Net.Index.IndexWriter.Release(ReadersAndUpdates,bool) call Lucene.Net.Index.IndexWriter.Release(ReadersAndUpdates,bool) call Lucene.Net.Index.IndexWriter.Release(ReadersAndUpdates,bool) call Lucene.Net.Index.IndexWriter.Release(ReadersAndUpdates,bool) call Lucene.Net.Index.IndexWriter.Release(ReadersAndUpdates,bool) finally call AtomicBoolean.Join() call AtomicBoolean.Join() call AtomicBoolean.Join() call AtomicBoolean.Join() call AtomicBoolean.Join() if IndexWriter decl Directory var decl Store decl Store decl Directory decl Store public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new new decl_stmt var = new decl_stmt Lucene.Net.Store.Directory = decl_stmt var = new call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() decl_stmt var = new call decl Store.AddDocument() call decl Store.AddDocument() call decl Store.AddDocument() call decl Store.AddDocument() call decl Store.AddDocument() new call decl Directory.ReplaceTaxonomy() call decl Directory.ReplaceTaxonomy() call decl Directory.ReplaceTaxonomy() call decl Directory.ReplaceTaxonomy() call decl Directory.ReplaceTaxonomy() call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) try call decl Store.MaybeRefresh() call decl Store.MaybeRefresh() call decl Store.MaybeRefresh() call decl Store.MaybeRefresh() call decl Store.MaybeRefresh() catch IndexWriter decl Store var decl Store decl Directory decl Store decl Directory decl Directory public virtual public virtual decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriter = new new decl_stmt var = new call decl Store.Commit() call decl Store.Commit() call decl Store.Commit() call decl Store.Commit() call decl Store.Commit() call decl Directory.Commit() call decl Directory.Commit() call decl Directory.Commit() call decl Directory.Commit() call decl Directory.Commit() decl_stmt Lucene.Net.Store.Directory = decl_stmt var = new call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() call var.AddCategory() new call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() decl_stmt var = new decl_stmt SearcherAndTaxonomy = call decl Store.Acquire() call decl Store.Acquire() call decl Store.Acquire() call decl Store.Acquire() call decl Store.Acquire() try finally call decl Store.Release() call decl Store.Release() call decl Store.Release() call decl Store.Release() call decl Store.Release() call decl Store.AddDocument() call decl Store.AddDocument() call decl Store.AddDocument() call decl Store.AddDocument() call decl Store.AddDocument() new call decl Directory.ReplaceTaxonomy() call decl Directory.ReplaceTaxonomy() call decl Directory.ReplaceTaxonomy() call decl Directory.ReplaceTaxonomy() call decl Directory.ReplaceTaxonomy() call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call Lucene.Net.Index.IndexWriter.Dispose(bool) call decl Store.Commit() call decl Store.Commit() call decl Store.Commit() call decl Store.Commit() call decl Store.Commit() call decl Directory.Commit() call decl Directory.Commit() call decl Directory.Commit() call decl Directory.Commit() call decl Directory.Commit() call decl Store.MaybeRefresh() call decl Store.MaybeRefresh() call decl Store.MaybeRefresh() call decl Store.MaybeRefresh() call decl Store.MaybeRefresh() = call decl Store.Acquire() call decl Store.Acquire() call decl Store.Acquire() call decl Store.Acquire() call decl Store.Acquire() try finally call decl Store.Release() call decl Store.Release() call decl Store.Release() call decl Store.Release() call decl Store.Release()