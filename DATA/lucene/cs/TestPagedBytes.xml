Lucene.Net.Util Lucene.Net.Attributes using Lucene.Net.Randomized.Generators using Lucene.Net.Support using NUnit.Framework using System using Lucene.Net.Store.BaseDirectoryWrapper Lucene.Net.Store.DataInput Lucene.Net.Store.DataOutput Lucene.Net.Store.IndexInput Lucene.Net.Store.IndexOutput Lucene.Net.Store.IOContext Lucene.Net.Store.MockDirectoryWrapper class attribute Lucene.Net.Util.TestPagedBytes super super LuceneTestCase decl Reader decl byte DataInput int decl byte int int Random BytesRef int PagedBytes int int int decl PagedBytes IndexOutput IndexInput BaseDirectoryWrapper public virtual public virtual decl_stmt System.Random = for = < * ++ decl_stmt Lucene.Net.Store.BaseDirectoryWrapper = if is = decl_stmt int = decl_stmt int = << decl_stmt Lucene.Net.Util.PagedBytes = new decl_stmt IndexOutput = call BaseDirectoryWrapper.CreateOutput() call BaseDirectoryWrapper.CreateOutput() call BaseDirectoryWrapper.CreateOutput() call BaseDirectoryWrapper.CreateOutput() call BaseDirectoryWrapper.CreateOutput() decl_stmt int = decl_stmt byte = new decl_stmt int = while < if == call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() ++ else decl_stmt int = - call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() call IndexOutput.WriteBytes() += call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call BaseDirectoryWrapper.OpenInput() call BaseDirectoryWrapper.OpenInput() call BaseDirectoryWrapper.OpenInput() call BaseDirectoryWrapper.OpenInput() call BaseDirectoryWrapper.OpenInput() decl_stmt Lucene.Net.Store.DataInput = call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call IndexInput.Clone() call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call Lucene.Net.Util.PagedBytes.Copy(IndexInput,long) call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() decl_stmt Reader = call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() decl_stmt byte = new decl_stmt int = while < if == ++ = call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() call DataInput.ReadByte() else decl_stmt int = - call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) call Lucene.Net.Store.DataInput.ReadBytes(byte,int,int,bool) += decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) - decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) + - call decl PagedBytes.FillSlice() call decl PagedBytes.FillSlice() call decl PagedBytes.FillSlice() call decl PagedBytes.FillSlice() call decl PagedBytes.FillSlice() for = < ++ + byte + call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() DataInput decl byte decl Reader PagedBytes decl byte int int Random BytesRef int int int int int decl PagedBytes DataOutput public virtual public virtual decl_stmt System.Random = for = < * ++ decl_stmt int = decl_stmt int = << decl_stmt Lucene.Net.Util.PagedBytes = new decl_stmt Lucene.Net.Store.DataOutput = decl_stmt int = decl_stmt byte = new decl_stmt int = while < if == call DataOutput.WriteByte() call DataOutput.WriteByte() call DataOutput.WriteByte() call DataOutput.WriteByte() call DataOutput.WriteByte() ++ else decl_stmt int = - call Lucene.Net.Store.DataOutput.WriteBytes(byte,int) call Lucene.Net.Store.DataOutput.WriteBytes(byte,int) call Lucene.Net.Store.DataOutput.WriteBytes(byte,int) call Lucene.Net.Store.DataOutput.WriteBytes(byte,int) call Lucene.Net.Store.DataOutput.WriteBytes(byte,int) += decl_stmt Reader = call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Lucene.Net.Util.PagedBytes.Freeze(bool) call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() call Random.NextBoolean() decl_stmt Lucene.Net.Store.DataInput = decl_stmt byte = new decl_stmt int = while < if == ++ = call decl Reader.ReadByte() call decl Reader.ReadByte() call decl Reader.ReadByte() call decl Reader.ReadByte() call decl Reader.ReadByte() else decl_stmt int = - call decl Reader.ReadBytes() call decl Reader.ReadBytes() call decl Reader.ReadBytes() call decl Reader.ReadBytes() call decl Reader.ReadBytes() += decl_stmt Lucene.Net.Util.BytesRef = new for = < ++ decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) - decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) + - call decl PagedBytes.FillSlice() call decl PagedBytes.FillSlice() call decl PagedBytes.FillSlice() call decl PagedBytes.FillSlice() call decl PagedBytes.FillSlice() for = < ++ + byte + var decl Reader IndexInput long int int var int decl PagedBytes var BaseDirectoryWrapper public virtual public virtual decl_stmt Lucene.Net.Store.BaseDirectoryWrapper = if is = decl_stmt int = decl_stmt int = << decl_stmt var = new / * for = < ++ = byte sbyte decl_stmt long = << + * decl_stmt var = new decl_stmt var = call BaseDirectoryWrapper.CreateOutput() call BaseDirectoryWrapper.CreateOutput() call BaseDirectoryWrapper.CreateOutput() call BaseDirectoryWrapper.CreateOutput() call BaseDirectoryWrapper.CreateOutput() for = < decl_stmt int = int - call var.WriteBytes() call var.WriteBytes() call var.WriteBytes() call var.WriteBytes() call var.WriteBytes() += call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() call var.Dispose() decl_stmt Lucene.Net.Store.IndexInput = call BaseDirectoryWrapper.OpenInput() call BaseDirectoryWrapper.OpenInput() call BaseDirectoryWrapper.OpenInput() call BaseDirectoryWrapper.OpenInput() call BaseDirectoryWrapper.OpenInput() call var.Copy() call var.Copy() call var.Copy() call var.Copy() call var.Copy() decl_stmt Reader = call var.Freeze() call var.Freeze() call var.Freeze() call var.Freeze() call var.Freeze() foreach in new - - decl_stmt Lucene.Net.Util.BytesRef = new call decl PagedBytes.FillSlice() call decl PagedBytes.FillSlice() call decl PagedBytes.FillSlice() call decl PagedBytes.FillSlice() call decl PagedBytes.FillSlice() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose() call Lucene.Net.Store.BaseDirectoryWrapper.Dispose()