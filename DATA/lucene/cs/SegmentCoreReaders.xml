Lucene.Net.Index Lucene.Net.Codecs using System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Util using Lucene.Net.Store.AlreadyClosedException Lucene.Net.Codecs.Codec Lucene.Net.Store.CompoundFileDirectory Lucene.Net.Index.SegmentReader.CoreClosedListener Lucene.Net.Store.Directory Lucene.Net.Codecs.DocValuesProducer Lucene.Net.Codecs.FieldsProducer Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Codecs.PostingsFormat Lucene.Net.Codecs.StoredFieldsReader Lucene.Net.Codecs.TermVectorsReader class Lucene.Net.Index.SegmentCoreReaders decl ISet decl IDisposableThreadLocal decl IDisposableThreadLocal FieldsProducer TermVectorsReader DocValuesProducer decl IDisposableThreadLocal StoredFieldsReader int AtomicInteger CompoundFileDirectory protected internal override protected internal override return protected internal override protected internal override return == : protected internal override < protected internal override < return new < return call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() int internal internal decl_stmt int while = call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() > if call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) call Lucene.Net.Support.AtomicInteger.CompareAndSet(int,int) + return throw new var decl IDictionary object internal internal != decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = call decl IDisposableThreadLocal.Get() call decl IDisposableThreadLocal.Get() call decl IDisposableThreadLocal.Get() call decl IDisposableThreadLocal.Get() call decl IDisposableThreadLocal.Get() decl_stmt object call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out decl_stmt var = as if == = call DocValuesProducer.GetNumeric() call DocValuesProducer.GetNumeric() call DocValuesProducer.GetNumeric() call DocValuesProducer.GetNumeric() call DocValuesProducer.GetNumeric() = return Exception internal internal if call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() call Lucene.Net.Support.AtomicInteger.DecrementAndGet() == decl_stmt System.Exception = try catch = finally private private lock foreach in try catch internal internal call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() internal internal call decl ISet.Remove() call decl ISet.Remove() call decl ISet.Remove() call decl ISet.Remove() call decl ISet.Remove() public public return != call DocValuesProducer.RamBytesUsed() call DocValuesProducer.RamBytesUsed() call DocValuesProducer.RamBytesUsed() call DocValuesProducer.RamBytesUsed() call DocValuesProducer.RamBytesUsed() : + != call FieldsProducer.RamBytesUsed() call FieldsProducer.RamBytesUsed() call FieldsProducer.RamBytesUsed() call FieldsProducer.RamBytesUsed() call FieldsProducer.RamBytesUsed() : + != call StoredFieldsReader.RamBytesUsed() call StoredFieldsReader.RamBytesUsed() call StoredFieldsReader.RamBytesUsed() call StoredFieldsReader.RamBytesUsed() call StoredFieldsReader.RamBytesUsed() : + != call TermVectorsReader.RamBytesUsed() call TermVectorsReader.RamBytesUsed() call TermVectorsReader.RamBytesUsed() call TermVectorsReader.RamBytesUsed() call TermVectorsReader.RamBytesUsed() :