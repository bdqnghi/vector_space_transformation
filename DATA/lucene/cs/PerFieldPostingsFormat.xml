Lucene.Net.Codecs.Perfield System using System.Collections.Generic using System.Diagnostics using System.Linq using Lucene.Net.Index.FieldInfo Lucene.Net.Util.IOUtils Lucene.Net.Util.RamUsageEstimator Lucene.Net.Index.SegmentReadState Lucene.Net.Index.SegmentWriteState Lucene.Net.Index.Terms class Lucene.Net.Codecs.Perfield.PerFieldPostingsFormat super super PostingsFormat string string string public override sealed public override sealed return new public public string int PostingsFormat string FieldsConsumerAndSuffix string public override public override decl_stmt Lucene.Net.Codecs.PostingsFormat = if == throw new + + decl_stmt string = decl_stmt string = decl_stmt int decl_stmt FieldsConsumerAndSuffix out if == if ! out = else = + = decl_stmt string = = new = call PostingsFormat.FieldsConsumer() call PostingsFormat.FieldsConsumer() call PostingsFormat.FieldsConsumer() call PostingsFormat.FieldsConsumer() call PostingsFormat.FieldsConsumer() new = = else = = return call FieldsConsumerAndSuffix.Consumer() call FieldsConsumerAndSuffix.Consumer() call FieldsConsumerAndSuffix.Consumer() call FieldsConsumerAndSuffix.Consumer() call FieldsConsumerAndSuffix.Consumer() call FieldsConsumerAndSuffix.Consumer() call FieldsConsumerAndSuffix.Consumer() call FieldsConsumerAndSuffix.Consumer() call FieldsConsumerAndSuffix.Consumer() public override public override internal static internal static return + + internal static internal static if == return else throw new + + public override < public override < return FieldsProducer public override public override decl_stmt FieldsProducer out return == : call FieldsProducer.Terms() call FieldsProducer.Terms() call FieldsProducer.Terms() call FieldsProducer.Terms() call FieldsProducer.Terms() return public override public override long public override public override decl_stmt long = foreach < in += * += return public override public override foreach in public override sealed public override sealed return new