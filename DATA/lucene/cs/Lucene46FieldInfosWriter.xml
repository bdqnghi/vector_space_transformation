Lucene.Net.Codecs.Lucene46 System.Diagnostics using System using Lucene.Net.Store.Directory Lucene.Net.Index.FieldInfo.DocValuesType_e Lucene.Net.Index.FieldInfo Lucene.Net.Index.FieldInfos Lucene.Net.Index.IndexFileNames Lucene.Net.Store.IndexOutput Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils class Lucene.Net.Codecs.Lucene46.Lucene46FieldInfosWriter super super FieldInfosWriter var bool string var sbyte IndexOutput decl FieldInfo decl IndexOptions public override public override decl_stmt string = decl_stmt IndexOutput = decl_stmt bool = try call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() foreach in decl_stmt IndexOptions ? = decl_stmt sbyte = if |= if |= if |= if |= >= || ! if == |= else if == |= else if == |= call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteString() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteVInt() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() byte decl_stmt var = decl_stmt var = & ~ == && & ~ == decl_stmt var = unchecked & << | call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() call IndexOutput.WriteByte() byte call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteLong() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() call IndexOutput.WriteStringStringMap() = finally if call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() call IndexOutput.Dispose() else private static private static ? if == return else if == return else if == return else if == return else if == return else throw new