Lucene.Net.Util.Packed System using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Store.DataInput class Lucene.Net.Util.Packed.Packed64 super decl long int int int long int long int long public override public override decl_stmt long = long * decl_stmt int = ulong >> decl_stmt long = & + if <= return ulong >> int - & return << int | ulong + >> - & int int decl Decoder int decl PackedInts int public override public override > + + >= && < = - + <= decl_stmt int = decl_stmt Lucene.Net.Util.Packed.Decoder = decl_stmt int = call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() if != for = < && && ++ ++ = ++ -- if == return - call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() == decl_stmt int = long * >> long * & == decl_stmt int = / call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.Decode() call decl PackedInts.Decode() call decl PackedInts.Decode() call decl PackedInts.Decode() call decl PackedInts.Decode() decl_stmt int = * call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() += -= >= if > return - else == return long int long public override public override decl_stmt long = long * decl_stmt int = ulong >> decl_stmt long = & + if <= = & ~ << int - | << int - return = & ~ ulong >> int | ulong >> int + = + & unchecked ulong ~ >> int | << - int decl Encoder decl PackedInts int int int public override public override > + + >= && < = - + <= decl_stmt int = decl_stmt System.Text.Encoder = decl_stmt int = call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() if != for = < && && ++ ++ ++ -- if == return - call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() == decl_stmt int = long * >> long * & == decl_stmt int = / call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() call decl PackedInts.Encode() decl_stmt int = * call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() call decl PackedInts.LongValueCount() += -= >= if > return - else == return public override public override return + + + + + + public override public override return + * + + + long int int int int Packed64 decl long int int public override public override <= <= decl_stmt int = / decl_stmt int = - if <= * return decl_stmt int = if != for = < ++ ++ == decl_stmt int = * >> decl_stmt long decl_stmt Lucene.Net.Util.Packed.Packed64 = new for = < ++ call Lucene.Net.Util.Packed.Packed64.Set(int,long) call Lucene.Net.Util.Packed.Packed64.Set(int,long) call Lucene.Net.Util.Packed.Packed64.Set(int,long) call Lucene.Net.Util.Packed.Packed64.Set(int,long) call Lucene.Net.Util.Packed.Packed64.Set(int,long) = <= decl_stmt int = long * >> decl_stmt int = long * >> for = < ++ decl_stmt long = = for = long << / < ++ private static private static if < return else if == return else return public override public override