org.apache.lucene.analysis.pt System using System.Diagnostics using System.Collections.Generic using org.apache.lucene.analysis.util.CharArraySet org.apache.lucene.util.Version org.apache.lucene.analysis.util using class org.apache.lucene.analysis.pt.RSLPStemmerBase Pattern Pattern Pattern Pattern public virtual public virtual return - >= && public virtual public virtual if > - return - + public override public override return && ! public override public override if ! return for = < ++ if return return bool public virtual public virtual if < return if != decl_stmt bool = for = < ++ if = break if ! return for = < ++ if return return Step LineNumberReader InputStream decl IDictionary string protected internal static < protected internal static < try decl_stmt InputStream = decl_stmt LineNumberReader = new new decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < decl_stmt string while = != decl_stmt Step = = call LineNumberReader.close() call LineNumberReader.close() call LineNumberReader.close() call LineNumberReader.close() call LineNumberReader.close() return catch throw new string int decl Rule Matcher int decl string private static private static decl_stmt Matcher = call Pattern.matcher() call Pattern.matcher() call Pattern.matcher() call Pattern.matcher() call Pattern.matcher() if ! call Matcher.find() call Matcher.find() call Matcher.find() call Matcher.find() call Matcher.find() throw new + call Matcher.groupCount() call Matcher.groupCount() call Matcher.groupCount() call Matcher.groupCount() call Matcher.groupCount() == decl_stmt string = call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() decl_stmt int = call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() decl_stmt int = call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() decl_stmt string = call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() decl_stmt System.Workflow.Activities.Rules.Rule = return new decl IList Matcher string private static private static decl_stmt System.Collections.Generic.IList < = new < decl_stmt string while = != decl_stmt Matcher = call Pattern.matcher() call Pattern.matcher() call Pattern.matcher() call Pattern.matcher() call Pattern.matcher() if call Matcher.matches() call Matcher.matches() call Matcher.matches() call Matcher.matches() call Matcher.matches() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() else = call Pattern.matcher() call Pattern.matcher() call Pattern.matcher() call Pattern.matcher() call Pattern.matcher() if call Matcher.matches() call Matcher.matches() call Matcher.matches() call Matcher.matches() call Matcher.matches() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() else = call Pattern.matcher() call Pattern.matcher() call Pattern.matcher() call Pattern.matcher() call Pattern.matcher() if call Matcher.matches() call Matcher.matches() call Matcher.matches() call Matcher.matches() call Matcher.matches() if == call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() else call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() call Matcher.group() else throw new + if call string.EndsWith() call string.EndsWith() call string.EndsWith() call string.EndsWith() call string.EndsWith() return call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() call decl IList.ToArray() return decl string private static private static if == return decl_stmt string = for = < ++ = return private static private static return - - string private static private static decl_stmt string = while = != = call string.Trim() call string.Trim() call string.Trim() call string.Trim() call string.Trim() if > && != return return