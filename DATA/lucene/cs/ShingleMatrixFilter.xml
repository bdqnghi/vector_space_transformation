Lucene.Net.Analysis.Shingle System using System.Collections.Generic using System.Linq using System.Text using Lucene.Net.Analysis.Miscellaneous using Lucene.Net.Analysis.Shingle.Codec using Lucene.Net.Analysis.Shingle.Matrix using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Support using class Lucene.Net.Analysis.Shingle.ShingleMatrixFilter super super TokenStream IOffsetAttribute Token IPositionIncrementAttribute int Token TokenStream IOffsetAttribute IPositionIncrementAttribute MatrixPermutationIterator decl List Char ITermAttribute decl List ITypeAttribute IPayloadAttribute ITypeAttribute ITermAttribute IPayloadAttribute int TokenSettingsCodec IFlagsAttribute Token decl HashSet TokenSettingsCodec IFlagsAttribute bool public override public override = call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() protected override protected override Token public override sealed public override sealed if == = new while < && decl_stmt Lucene.Net.Analysis.Token do = == if == return call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.SetTermBuffer(System,String,int,int) call Token.TermBuffer() call Token.TermBuffer() call Token.TermBuffer() call Token.TermBuffer() call Token.TermBuffer() call Token.TermLength() call Token.TermLength() call Token.TermLength() call Token.TermLength() call Token.TermLength() = = call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) = = return private private if ! call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() return call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() = = = = return private private if ! return call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermBuffer() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() call Lucene.Net.Analysis.Tokenattributes.ITermAttribute.TermLength() = = = = return var var var var var var private private if != ++ if + <= && <= if && == && || return decl_stmt var = decl_stmt var = new < for = < ++ decl_stmt var = + += call var.TermLength() call var.TermLength() call var.TermLength() call var.TermLength() call var.TermLength() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if != += - if ! call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return decl_stmt var = new + foreach in if != && > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.TermBuffer() call var.TermBuffer() call var.TermBuffer() call var.TermBuffer() call var.TermBuffer() call var.TermLength() call var.TermLength() call var.TermLength() call var.TermLength() call var.TermLength() call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() return if < - ++ = - return if == return if ! call MatrixPermutationIterator.HasNext() call MatrixPermutationIterator.HasNext() call MatrixPermutationIterator.HasNext() call MatrixPermutationIterator.HasNext() call MatrixPermutationIterator.HasNext() if != decl_stmt var = decl_stmt var = call var.Rows() call var.Rows() call var.Rows() call var.Rows() call var.Rows() call var.Rows() call var.Rows() call var.Rows() call var.Rows() call decl HashSet.RemoveWhere() call decl HashSet.RemoveWhere() call decl HashSet.RemoveWhere() call decl HashSet.RemoveWhere() call decl HashSet.RemoveWhere() call var.Find() call var.Find() call var.Find() call var.Find() call var.Find() != default if < return = return if == = if ! call MatrixPermutationIterator.HasNext() call MatrixPermutationIterator.HasNext() call MatrixPermutationIterator.HasNext() call MatrixPermutationIterator.HasNext() call MatrixPermutationIterator.HasNext() return return var var var private private decl_stmt var = call Lucene.Net.Analysis.Shingle.Matrix.MatrixPermutationIterator.Next() call Lucene.Net.Analysis.Shingle.Matrix.MatrixPermutationIterator.Next() call Lucene.Net.Analysis.Shingle.Matrix.MatrixPermutationIterator.Next() call Lucene.Net.Analysis.Shingle.Matrix.MatrixPermutationIterator.Next() call Lucene.Net.Analysis.Shingle.Matrix.MatrixPermutationIterator.Next() decl_stmt var = new < decl_stmt var = new < foreach in foreach in call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() = = = = - public public < < < = typeof = = = = - call TokenSettingsCodec.SetWeight() call TokenSettingsCodec.SetWeight() call TokenSettingsCodec.SetWeight() call TokenSettingsCodec.SetWeight() call TokenSettingsCodec.SetWeight() double double double var double double public public < < < decl_stmt var = new decl_stmt double = decl_stmt double = for = < ++ = call TokenSettingsCodec.GetWeight() call TokenSettingsCodec.GetWeight() call TokenSettingsCodec.GetWeight() call TokenSettingsCodec.GetWeight() call TokenSettingsCodec.GetWeight() decl_stmt double = if > = += decl_stmt double = / decl_stmt double = call var.Sum() call var.Sum() call var.Sum() call var.Sum() call var.Sum() * return float TokenPositioner Token var var private private decl_stmt Lucene.Net.Analysis.Token if != = = else = new if == return decl_stmt var = new decl_stmt var = new call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() decl_stmt TokenPositioner while = new != && = call TokenSettingsCodec.GetTokenPositioner() call TokenSettingsCodec.GetTokenPositioner() call TokenSettingsCodec.GetTokenPositioner() call TokenSettingsCodec.GetTokenPositioner() call TokenSettingsCodec.GetTokenPositioner() != if == call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() else = new call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() call var.Tokens() = if == = new if == = return