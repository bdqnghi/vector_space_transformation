Lucene.Net.Index Lucene.Net.Support using System using System.Collections.Generic using System.Diagnostics using System.Globalization using System.Text using class Lucene.Net.Index.LogMergePolicy super super MergePolicy int long int long int int double double bool long IndexWriter protected internal virtual protected internal virtual decl_stmt Lucene.Net.Index.IndexWriter = return != && call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() call IndexWriter.infoStream() protected internal virtual protected internal virtual if return if < throw new = = return public override public override int protected internal virtual protected internal virtual if decl_stmt int = <= return - long else return protected internal virtual protected internal virtual if return return SegmentCommitInfo bool bool SegmentCommitInfo int int protected internal virtual protected internal virtual < ? decl_stmt int = decl_stmt int = decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt bool = for = < && <= ++ decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt bool ? out if != = ++ = return <= && != || ! || SegmentCommitInfo int decl IList MergeSpecification private private decl_stmt MergeSpecification = new decl_stmt System.Collections.Generic.IList < = decl_stmt int = - while >= decl_stmt Lucene.Net.Index.SegmentCommitInfo = if > || > if + + + + + + if - - > || != - && ! + call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() new call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() + = else if - == call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() new call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() = -- if > && ++ + < || ! call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() new call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() return == : int var long int long var private private decl_stmt var = new decl_stmt var = while - + >= call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new call var.SubList() call var.SubList() call var.SubList() call var.SubList() call var.SubList() - -= if == if == if > || ! call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new call var.SubList() call var.SubList() call var.SubList() call var.SubList() call var.SubList() else if > decl_stmt int = - + decl_stmt long = decl_stmt int = for = < - + ++ decl_stmt long = for = < ++ += + if == || < * - && < = = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new call var.SubList() call var.SubList() call var.SubList() call var.SubList() call var.SubList() + return == : SegmentCommitInfo int bool public override public override < ? > if + + + if if return decl_stmt int = while > decl_stmt Lucene.Net.Index.SegmentCommitInfo = -- if ++ break if == if return if == && == && if return decl_stmt bool = for = < ++ decl_stmt Lucene.Net.Index.SegmentCommitInfo = if > || > = break if return else return SegmentCommitInfo int var int IndexWriter int var public override public override decl_stmt var = decl_stmt int = if + + decl_stmt var = new decl_stmt int = - decl_stmt Lucene.Net.Index.IndexWriter = != for = < ++ decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt int = call Lucene.Net.Index.IndexWriter.NumDeletedDocs(SegmentCommitInfo) call Lucene.Net.Index.IndexWriter.NumDeletedDocs(SegmentCommitInfo) call Lucene.Net.Index.IndexWriter.NumDeletedDocs(SegmentCommitInfo) call Lucene.Net.Index.IndexWriter.NumDeletedDocs(SegmentCommitInfo) call Lucene.Net.Index.IndexWriter.NumDeletedDocs(SegmentCommitInfo) if > if + + if == - = else if - == if + + + - + call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new call var.SubList() call var.SubList() call var.SubList() call var.SubList() call var.SubList() = else if != - if + + + - + call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new call var.SubList() call var.SubList() call var.SubList() call var.SubList() call var.SubList() = - if != - if + + + - + call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() new call var.SubList() call var.SubList() call var.SubList() call var.SubList() call var.SubList() return public virtual public virtual return SegmentCommitInfo int int string float int float bool SegmentInfoAndLevel int float decl IList float bool decl IList long int decl ICollection MergeSpecification var long public override public override ? decl_stmt int = if + + decl_stmt System.Collections.Generic.IList < = new < decl_stmt var = float decl_stmt System.Collections.Generic.ICollection < = for = < ++ decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt long = if < = decl_stmt SegmentInfoAndLevel = new float / call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if decl_stmt long = decl_stmt string = call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() : if >= += + + + + + / / + decl_stmt float if <= = float else = / decl_stmt MergeSpecification = decl_stmt int = decl_stmt int = while < decl_stmt float = for = + < ++ decl_stmt float = if > = decl_stmt float if <= = - else = - if < && >= = decl_stmt int = - while >= if >= break -- if + + + + + + - + decl_stmt int = + while <= + decl_stmt bool = decl_stmt bool = for = < ++ decl_stmt Lucene.Net.Index.SegmentCommitInfo = |= >= || >= if call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() = break if else if ! if == = new decl_stmt System.Collections.Generic.IList < = new < for = < ++ call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if + + + + + call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() call MergeSpecification.Add() new else if + + + + = = + = + return = return StringBuilder public override public override decl_stmt System.Text.StringBuilder = new + + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int)