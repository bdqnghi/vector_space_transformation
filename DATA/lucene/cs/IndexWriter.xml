Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Linq using System.Text using System.Threading using Lucene.Net.Support using System.Collections.Concurrent using System.Globalization using System.IO using Lucene.Net.Store.AlreadyClosedException Lucene.Net.Analysis.Analyzer Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Index.MergeState.CheckAbort Lucene.Net.Codecs.Codec Lucene.Net.Store.CompoundFileDirectory Lucene.Net.Util.Constants Lucene.Net.Store.Directory Lucene.Net.Index.FieldInfo.DocValuesType_e Lucene.Net.Index.FieldInfos.FieldNumbers Lucene.Net.Util.InfoStream Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils Lucene.Net.Store.Lock Lucene.Net.Store.LockObtainFailedException Lucene.Net.Codecs.Lucene3x.Lucene3xCodec Lucene.Net.Codecs.Lucene3x.Lucene3xSegmentInfoFormat Lucene.Net.Store.MergeInfo Lucene.Net.Index.IndexWriterConfig.OpenMode_e Lucene.Net.Search.Query Lucene.Net.Store.TrackingDirectoryWrapper class Lucene.Net.Index.IndexWriter super super IDisposable super TwoPhaseCommit object InfoStream long bool decl ICollection DocumentsWriter LiveIndexWriterConfig string bool FieldNumbers SegmentInfos decl HashSet long long decl IList decl HashSet BufferedUpdatesStream SegmentInfos MergePolicy string int bool MergeScheduler IndexFileDeleter string bool string bool AtomicInteger decl IDictionary Analyzer int decl ConcurrentQueue bool object string Lock int bool decl IList ReaderPool Codec decl LinkedList Directory long AtomicInteger private private = new return return call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() public public return call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() bool DirectoryReader bool long bool public virtual public virtual decl_stmt long = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) = decl_stmt Lucene.Net.Index.DirectoryReader = decl_stmt bool = decl_stmt bool = try lock decl_stmt bool = try = call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) if ! call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() = lock = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + catch return finally if ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) if if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + - + = finally if ! return int public virtual public virtual lock decl_stmt int = != - + + == + + return ReadersAndUpdates public virtual public virtual lock decl_stmt Lucene.Net.Index.ReadersAndUpdates out if != == call Lucene.Net.Index.ReadersAndUpdates.DropReaders() call Lucene.Net.Index.ReadersAndUpdates.DropReaders() call Lucene.Net.Index.ReadersAndUpdates.DropReaders() call Lucene.Net.Index.ReadersAndUpdates.DropReaders() call Lucene.Net.Index.ReadersAndUpdates.DropReaders() public virtual public virtual lock foreach in if != return return public virtual public virtual lock public virtual public virtual lock >= if ! && == if == || public public ReadersAndUpdates decl IEnumerator Exception internal virtual internal virtual lock decl_stmt System.Exception = decl_stmt System.Collections.Generic.IEnumerator < < = try while call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() call decl IEnumerator.MoveNext() decl_stmt Lucene.Net.Index.ReadersAndUpdates = try if && call Lucene.Net.Index.ReadersAndUpdates.WriteLiveDocs(Directory) call Lucene.Net.Index.ReadersAndUpdates.WriteLiveDocs(Directory) call Lucene.Net.Index.ReadersAndUpdates.WriteLiveDocs(Directory) call Lucene.Net.Index.ReadersAndUpdates.WriteLiveDocs(Directory) call Lucene.Net.Index.ReadersAndUpdates.WriteLiveDocs(Directory) catch if else if == = try call Lucene.Net.Index.ReadersAndUpdates.DropReaders() call Lucene.Net.Index.ReadersAndUpdates.DropReaders() call Lucene.Net.Index.ReadersAndUpdates.DropReaders() call Lucene.Net.Index.ReadersAndUpdates.DropReaders() call Lucene.Net.Index.ReadersAndUpdates.DropReaders() catch if else if == = catch finally == ReadersAndUpdates public virtual public virtual lock foreach in decl_stmt Lucene.Net.Index.ReadersAndUpdates if out == if call Lucene.Net.Index.ReadersAndUpdates.WriteLiveDocs(Directory) call Lucene.Net.Index.ReadersAndUpdates.WriteLiveDocs(Directory) call Lucene.Net.Index.ReadersAndUpdates.WriteLiveDocs(Directory) call Lucene.Net.Index.ReadersAndUpdates.WriteLiveDocs(Directory) call Lucene.Net.Index.ReadersAndUpdates.WriteLiveDocs(Directory) ReadersAndUpdates public virtual public virtual lock == + + + decl_stmt Lucene.Net.Index.ReadersAndUpdates out if == if ! return = new = else == if call Lucene.Net.Index.ReadersAndUpdates.IncRef() call Lucene.Net.Index.ReadersAndUpdates.IncRef() call Lucene.Net.Index.ReadersAndUpdates.IncRef() call Lucene.Net.Index.ReadersAndUpdates.IncRef() call Lucene.Net.Index.ReadersAndUpdates.IncRef() return decl HashSet internal virtual internal virtual decl_stmt System.Collections.Generic.HashSet < = new < foreach in ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return ReadersAndUpdates int public virtual public virtual decl_stmt int = decl_stmt Lucene.Net.Index.ReadersAndUpdates = call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() if != += return protected internal protected internal if || && throw new protected internal protected internal FieldNumbers decl_stmt FieldNumbers = new foreach in foreach in call FieldNumbers.AddOrGet() call FieldNumbers.AddOrGet() call FieldNumbers.AddOrGet() call FieldNumbers.AddOrGet() call FieldNumbers.AddOrGet() return return private private if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + + + + + + call Lucene.Net.Index.LiveIndexWriterConfig.ToString() call Lucene.Net.Index.LiveIndexWriterConfig.ToString() call Lucene.Net.Index.LiveIndexWriterConfig.ToString() call Lucene.Net.Index.LiveIndexWriterConfig.ToString() call Lucene.Net.Index.LiveIndexWriterConfig.ToString() public public public virtual public virtual lock if if else private private if == return foreach in is return private private lock while if ! if ! = return else else return bool private private decl_stmt bool = try if != throw new if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + call Lucene.Net.Index.DocumentsWriter.Dispose() call Lucene.Net.Index.DocumentsWriter.Dispose() call Lucene.Net.Index.DocumentsWriter.Dispose() call Lucene.Net.Index.DocumentsWriter.Dispose() call Lucene.Net.Index.DocumentsWriter.Dispose() try if else call Lucene.Net.Index.DocumentsWriter.Abort(IndexWriter) call Lucene.Net.Index.DocumentsWriter.Abort(IndexWriter) call Lucene.Net.Index.DocumentsWriter.Abort(IndexWriter) call Lucene.Net.Index.DocumentsWriter.Abort(IndexWriter) call Lucene.Net.Index.DocumentsWriter.Abort(IndexWriter) finally try = if try call MergeScheduler.Merge() call MergeScheduler.Merge() call MergeScheduler.Merge() call MergeScheduler.Merge() call MergeScheduler.Merge() catch = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) lock for try && ! break catch = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) = finally if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) if lock call ReaderPool.DropAll() call ReaderPool.DropAll() call ReaderPool.DropAll() call ReaderPool.DropAll() call ReaderPool.DropAll() call Lucene.Net.Index.IndexFileDeleter.Dispose() call Lucene.Net.Index.IndexFileDeleter.Dispose() call Lucene.Net.Index.IndexFileDeleter.Dispose() call Lucene.Net.Index.IndexFileDeleter.Dispose() call Lucene.Net.Index.IndexFileDeleter.Dispose() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + if != call Lock.Release() call Lock.Release() call Lock.Release() call Lock.Release() call Lock.Release() call Lucene.Net.Store.Lock.Dispose() call Lucene.Net.Store.Lock.Dispose() call Lucene.Net.Store.Lock.Dispose() call Lucene.Net.Store.Lock.Dispose() call Lucene.Net.Store.Lock.Dispose() = lock = call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() == + call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() + + catch finally lock = if ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) if return return lock return + call Lucene.Net.Index.SegmentInfos.TotalDocCount() call Lucene.Net.Index.SegmentInfos.TotalDocCount() call Lucene.Net.Index.SegmentInfos.TotalDocCount() call Lucene.Net.Index.SegmentInfos.TotalDocCount() call Lucene.Net.Index.SegmentInfos.TotalDocCount() public virtual public virtual lock return + call SegmentInfos.Segments() call SegmentInfos.Segments() call SegmentInfos.Segments() call SegmentInfos.Segments() call SegmentInfos.Segments() call SegmentInfos.Segments() call SegmentInfos.Segments() call SegmentInfos.Segments() call SegmentInfos.Segments() - public virtual public virtual lock if call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() return if call Lucene.Net.Index.DocumentsWriter.AnyDeletions() call Lucene.Net.Index.DocumentsWriter.AnyDeletions() call Lucene.Net.Index.DocumentsWriter.AnyDeletions() call Lucene.Net.Index.DocumentsWriter.AnyDeletions() call Lucene.Net.Index.DocumentsWriter.AnyDeletions() return if call ReaderPool.AnyPendingDeletes() call ReaderPool.AnyPendingDeletes() call ReaderPool.AnyPendingDeletes() call ReaderPool.AnyPendingDeletes() call ReaderPool.AnyPendingDeletes() return foreach in if return return public virtual public virtual < public virtual public virtual < public virtual public virtual < < public virtual public virtual < < public virtual public virtual < < bool public virtual public virtual < < try decl_stmt bool = try if call Lucene.Net.Index.DocumentsWriter.UpdateDocuments(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriter.UpdateDocuments(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriter.UpdateDocuments(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriter.UpdateDocuments(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriter.UpdateDocuments(IEnumerable,Analyzer,Term) = finally if ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) catch public virtual public virtual try if call Lucene.Net.Index.DocumentsWriter.DeleteTerms(Term) call Lucene.Net.Index.DocumentsWriter.DeleteTerms(Term) call Lucene.Net.Index.DocumentsWriter.DeleteTerms(Term) call Lucene.Net.Index.DocumentsWriter.DeleteTerms(Term) call Lucene.Net.Index.DocumentsWriter.DeleteTerms(Term) catch SegmentCommitInfo int ReadersAndUpdates decl IList AtomicReader int public virtual public virtual lock decl_stmt Lucene.Net.Index.AtomicReader if is = else decl_stmt System.Collections.Generic.IList < = decl_stmt int = = -= >= < if ! is throw new decl_stmt Lucene.Net.Index.SegmentCommitInfo = if call Lucene.Net.Index.SegmentInfos.IndexOf(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.IndexOf(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.IndexOf(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.IndexOf(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.IndexOf(SegmentCommitInfo) != - decl_stmt Lucene.Net.Index.ReadersAndUpdates = call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() if != lock call Lucene.Net.Index.ReadersAndUpdates.InitWritableLiveDocs() call Lucene.Net.Index.ReadersAndUpdates.InitWritableLiveDocs() call Lucene.Net.Index.ReadersAndUpdates.InitWritableLiveDocs() call Lucene.Net.Index.ReadersAndUpdates.InitWritableLiveDocs() call Lucene.Net.Index.ReadersAndUpdates.InitWritableLiveDocs() if call Lucene.Net.Index.ReadersAndUpdates.Delete(int) call Lucene.Net.Index.ReadersAndUpdates.Delete(int) call Lucene.Net.Index.ReadersAndUpdates.Delete(int) call Lucene.Net.Index.ReadersAndUpdates.Delete(int) call Lucene.Net.Index.ReadersAndUpdates.Delete(int) decl_stmt int = + if == if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call Lucene.Net.Index.SegmentInfos.Remove(int) call Lucene.Net.Index.SegmentInfos.Remove(int) call Lucene.Net.Index.SegmentInfos.Remove(int) call Lucene.Net.Index.SegmentInfos.Remove(int) call Lucene.Net.Index.SegmentInfos.Remove(int) call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() return else else return public virtual public virtual params params params try if call Lucene.Net.Index.DocumentsWriter.DeleteTerms(Term) call Lucene.Net.Index.DocumentsWriter.DeleteTerms(Term) call Lucene.Net.Index.DocumentsWriter.DeleteTerms(Term) call Lucene.Net.Index.DocumentsWriter.DeleteTerms(Term) call Lucene.Net.Index.DocumentsWriter.DeleteTerms(Term) catch public virtual public virtual try if call Lucene.Net.Index.DocumentsWriter.DeleteQueries(Query) call Lucene.Net.Index.DocumentsWriter.DeleteQueries(Query) call Lucene.Net.Index.DocumentsWriter.DeleteQueries(Query) call Lucene.Net.Index.DocumentsWriter.DeleteQueries(Query) call Lucene.Net.Index.DocumentsWriter.DeleteQueries(Query) catch public virtual public virtual params params params try if call Lucene.Net.Index.DocumentsWriter.DeleteQueries(Query) call Lucene.Net.Index.DocumentsWriter.DeleteQueries(Query) call Lucene.Net.Index.DocumentsWriter.DeleteQueries(Query) call Lucene.Net.Index.DocumentsWriter.DeleteQueries(Query) call Lucene.Net.Index.DocumentsWriter.DeleteQueries(Query) catch public virtual public virtual < bool public virtual public virtual < try decl_stmt bool = try if call Lucene.Net.Index.DocumentsWriter.UpdateDocument(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriter.UpdateDocument(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriter.UpdateDocument(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriter.UpdateDocument(IEnumerable,Analyzer,Term) call Lucene.Net.Index.DocumentsWriter.UpdateDocument(IEnumerable,Analyzer,Term) = finally if ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) catch public virtual public virtual ? if ! call FieldNumbers.Contains() call FieldNumbers.Contains() call FieldNumbers.Contains() call FieldNumbers.Contains() call FieldNumbers.Contains() throw new try if call Lucene.Net.Index.DocumentsWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.DocumentsWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.DocumentsWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.DocumentsWriter.UpdateNumericDocValue(Term,string,long) call Lucene.Net.Index.DocumentsWriter.UpdateNumericDocValue(Term,string,long) catch public virtual public virtual if ! call FieldNumbers.Contains() call FieldNumbers.Contains() call FieldNumbers.Contains() call FieldNumbers.Contains() call FieldNumbers.Contains() throw new try if call Lucene.Net.Index.DocumentsWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.DocumentsWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.DocumentsWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.DocumentsWriter.UpdateBinaryDocValue(Term,string,BytesRef) call Lucene.Net.Index.DocumentsWriter.UpdateBinaryDocValue(Term,string,BytesRef) catch lock return call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() lock return lock return call Lucene.Net.Index.SegmentInfos.Files(Directory,bool) call Lucene.Net.Index.SegmentInfos.Files(Directory,bool) call Lucene.Net.Index.SegmentInfos.Files(Directory,bool) call Lucene.Net.Index.SegmentInfos.Files(Directory,bool) call Lucene.Net.Index.SegmentInfos.Files(Directory,bool) public public lock if >= && < call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() return call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Info(int) else return - return call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() return call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() internal internal lock ++ call Lucene.Net.Index.SegmentInfos.Changed() call Lucene.Net.Index.SegmentInfos.Changed() call Lucene.Net.Index.SegmentInfos.Changed() call Lucene.Net.Index.SegmentInfos.Changed() call Lucene.Net.Index.SegmentInfos.Changed() return + ++ public virtual public virtual decl MergePolicy int public virtual public virtual if < throw new + if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) lock call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() call decl IDictionary.Clear() foreach in if != = = foreach in = if != = foreach in = if != = if lock while if throw new if > decl_stmt int = for = < ++ decl_stmt OneMerge = if != - throw new + call decl MergePolicy.SegString() call decl MergePolicy.SegString() call decl MergePolicy.SegString() call decl MergePolicy.SegString() call decl MergePolicy.SegString() ?? new if else break private private lock foreach in if != - return foreach in if != - return return decl MergeSpecification bool int decl MergePolicy int decl MergePolicy public virtual public virtual if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + decl_stmt MergeSpecification decl_stmt bool = lock = call MergePolicy.FindForcedDeletesMerges() call MergePolicy.FindForcedDeletesMerges() call MergePolicy.FindForcedDeletesMerges() call MergePolicy.FindForcedDeletesMerges() call MergePolicy.FindForcedDeletesMerges() = != if decl_stmt int = for = < ++ call MergeScheduler.Merge() call MergeScheduler.Merge() call MergeScheduler.Merge() call MergeScheduler.Merge() call MergeScheduler.Merge() if != && decl_stmt int = lock decl_stmt bool = while if throw new = for = < ++ decl_stmt OneMerge = if call decl LinkedList.Contains() call decl LinkedList.Contains() call decl LinkedList.Contains() call decl LinkedList.Contains() call decl LinkedList.Contains() || call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() = decl_stmt System.Exception = if != throw new + call bool.SegString() call bool.SegString() call bool.SegString() call bool.SegString() call bool.SegString() if public virtual public virtual public public bool private private decl_stmt bool = call MergeScheduler.Merge() call MergeScheduler.Merge() call MergeScheduler.Merge() call MergeScheduler.Merge() call MergeScheduler.Merge() int bool decl MergePolicy decl MergePolicy private private lock == - || > != if return if return decl_stmt bool = decl_stmt MergeSpecification if != == || == + = call MergePolicy.FindForcedMerges() call MergePolicy.FindForcedMerges() call MergePolicy.FindForcedMerges() call MergePolicy.FindForcedMerges() call MergePolicy.FindForcedMerges() = != if decl_stmt int = for = < ++ decl_stmt OneMerge = = else = call MergePolicy.FindMerges() call MergePolicy.FindMerges() call MergePolicy.FindMerges() call MergePolicy.FindMerges() call MergePolicy.FindMerges() = != if decl_stmt int = for = < ++ return lock return decl MergePolicy lock if == return else decl_stmt OneMerge = call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl LinkedList.RemoveFirst() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return public virtual public virtual lock return != public public lock if bool var private private decl_stmt bool = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) try lock = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call MergePolicy.Dispose() call MergePolicy.Dispose() call MergePolicy.Dispose() call MergePolicy.Dispose() call MergePolicy.Dispose() call MergeScheduler.Dispose() call MergeScheduler.Dispose() call MergeScheduler.Dispose() call MergeScheduler.Dispose() call MergeScheduler.Dispose() call Lucene.Net.Index.BufferedUpdatesStream.Clear() call Lucene.Net.Index.BufferedUpdatesStream.Clear() call Lucene.Net.Index.BufferedUpdatesStream.Clear() call Lucene.Net.Index.BufferedUpdatesStream.Clear() call Lucene.Net.Index.BufferedUpdatesStream.Clear() call Lucene.Net.Index.DocumentsWriter.Dispose() call Lucene.Net.Index.DocumentsWriter.Dispose() call Lucene.Net.Index.DocumentsWriter.Dispose() call Lucene.Net.Index.DocumentsWriter.Dispose() call Lucene.Net.Index.DocumentsWriter.Dispose() call Lucene.Net.Index.DocumentsWriter.Abort(IndexWriter) call Lucene.Net.Index.DocumentsWriter.Abort(IndexWriter) call Lucene.Net.Index.DocumentsWriter.Abort(IndexWriter) call Lucene.Net.Index.DocumentsWriter.Abort(IndexWriter) call Lucene.Net.Index.DocumentsWriter.Abort(IndexWriter) lock if != call Lucene.Net.Index.SegmentInfos.RollbackCommit(Directory) call Lucene.Net.Index.SegmentInfos.RollbackCommit(Directory) call Lucene.Net.Index.SegmentInfos.RollbackCommit(Directory) call Lucene.Net.Index.SegmentInfos.RollbackCommit(Directory) call Lucene.Net.Index.SegmentInfos.RollbackCommit(Directory) call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() = call ReaderPool.DropAll() call ReaderPool.DropAll() call ReaderPool.DropAll() call ReaderPool.DropAll() call ReaderPool.DropAll() call Lucene.Net.Index.SegmentInfos.RollbackSegmentInfos(IList) call Lucene.Net.Index.SegmentInfos.RollbackSegmentInfos(IList) call Lucene.Net.Index.SegmentInfos.RollbackSegmentInfos(IList) call Lucene.Net.Index.SegmentInfos.RollbackSegmentInfos(IList) call Lucene.Net.Index.SegmentInfos.RollbackSegmentInfos(IList) if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + decl_stmt var = call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() = call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Dispose() call Lucene.Net.Index.IndexFileDeleter.Dispose() call Lucene.Net.Index.IndexFileDeleter.Dispose() call Lucene.Net.Index.IndexFileDeleter.Dispose() call Lucene.Net.Index.IndexFileDeleter.Dispose() call Lock.Release() call Lock.Release() call Lock.Release() call Lock.Release() call Lock.Release() = call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() == + call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() call DocumentsWriter.PerThreadPool() + + = catch finally if ! lock if ! if != try call Lucene.Net.Index.SegmentInfos.RollbackCommit(Directory) call Lucene.Net.Index.SegmentInfos.RollbackCommit(Directory) call Lucene.Net.Index.SegmentInfos.RollbackCommit(Directory) call Lucene.Net.Index.SegmentInfos.RollbackCommit(Directory) call Lucene.Net.Index.SegmentInfos.RollbackCommit(Directory) call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() catch if != call Lock.Release() call Lock.Release() call Lock.Release() call Lock.Release() call Lock.Release() = = = bool public virtual public virtual decl_stmt bool = lock try call DocumentsWriter.LockAndAbortAll() call DocumentsWriter.LockAndAbortAll() call DocumentsWriter.LockAndAbortAll() call DocumentsWriter.LockAndAbortAll() call DocumentsWriter.LockAndAbortAll() lock try call Lucene.Net.Index.SegmentInfos.Clear() call Lucene.Net.Index.SegmentInfos.Clear() call Lucene.Net.Index.SegmentInfos.Clear() call Lucene.Net.Index.SegmentInfos.Clear() call Lucene.Net.Index.SegmentInfos.Clear() call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call ReaderPool.DropAll() call ReaderPool.DropAll() call ReaderPool.DropAll() call ReaderPool.DropAll() call ReaderPool.DropAll() ++ call Lucene.Net.Index.SegmentInfos.Changed() call Lucene.Net.Index.SegmentInfos.Changed() call Lucene.Net.Index.SegmentInfos.Changed() call Lucene.Net.Index.SegmentInfos.Changed() call Lucene.Net.Index.SegmentInfos.Changed() call FieldNumbers.Clear() call FieldNumbers.Clear() call FieldNumbers.Clear() call FieldNumbers.Clear() call FieldNumbers.Clear() = catch finally if ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) finally call Lucene.Net.Index.DocumentsWriter.UnlockAllAfterAbortAll(IndexWriter) call Lucene.Net.Index.DocumentsWriter.UnlockAllAfterAbortAll(IndexWriter) call Lucene.Net.Index.DocumentsWriter.UnlockAllAfterAbortAll(IndexWriter) call Lucene.Net.Index.DocumentsWriter.UnlockAllAfterAbortAll(IndexWriter) call Lucene.Net.Index.DocumentsWriter.UnlockAllAfterAbortAll(IndexWriter) private private lock if ! = foreach in if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() foreach in if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + while > if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + = == if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) else public virtual public virtual lock if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) while > || > == if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) internal virtual internal virtual lock call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) internal virtual internal virtual lock ++ call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) internal internal lock ++ call Lucene.Net.Index.SegmentInfos.Changed() call Lucene.Net.Index.SegmentInfos.Changed() call Lucene.Net.Index.SegmentInfos.Changed() call Lucene.Net.Index.SegmentInfos.Changed() call Lucene.Net.Index.SegmentInfos.Changed() internal virtual internal virtual lock != && lock call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) long internal virtual internal virtual try lock lock if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) if != && call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) decl_stmt long if != && = call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) call Lucene.Net.Index.BufferedUpdatesStream.Push(FrozenBufferedUpdates) else = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + = call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) finally call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() private private lock = new < ++ decl HashSet private private params params params decl_stmt System.Collections.Generic.HashSet < = new < for = < ++ if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() throw new + + if == throw new call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() Lock decl IList bool private < private < params params params decl_stmt System.Collections.Generic.IList < = new < for = < ++ decl_stmt bool = try decl_stmt Lucene.Net.Store.Lock = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call Lock.Obtain() call Lock.Obtain() call Lock.Obtain() call Lock.Obtain() call Lock.Obtain() = finally if ! return SegmentInfos string bool bool decl HashSet decl IDictionary decl IEnumerable IOContext decl IList decl HashSet public virtual public virtual params params params decl_stmt System.Collections.Generic.IEnumerable < = decl_stmt bool = try if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) decl_stmt System.Collections.Generic.IList < = new < decl_stmt bool = try foreach in if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + decl_stmt Lucene.Net.Index.SegmentInfos = new call Lucene.Net.Index.SegmentInfos.Read(Directory) call Lucene.Net.Index.SegmentInfos.Read(Directory) call Lucene.Net.Index.SegmentInfos.Read(Directory) call Lucene.Net.Index.SegmentInfos.Read(Directory) call Lucene.Net.Index.SegmentInfos.Read(Directory) decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < decl_stmt System.Collections.Generic.HashSet < = new < foreach in ! call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() + + + decl_stmt string = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + + decl_stmt Lucene.Net.Store.IOContext = new new - foreach in call FieldNumbers.AddOrGet() call FieldNumbers.AddOrGet() call FieldNumbers.AddOrGet() call FieldNumbers.AddOrGet() call FieldNumbers.AddOrGet() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = finally if ! foreach in foreach in try call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() catch lock = try = finally if ! foreach in foreach in try call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() catch call Lucene.Net.Index.SegmentInfos.AddAll(IEnumerable) call Lucene.Net.Index.SegmentInfos.AddAll(IEnumerable) call Lucene.Net.Index.SegmentInfos.AddAll(IEnumerable) call Lucene.Net.Index.SegmentInfos.AddAll(IEnumerable) call Lucene.Net.Index.SegmentInfos.AddAll(IEnumerable) = catch finally if != foreach in if else SegmentInfo bool MergeState decl IList decl ICollection TrackingDirectoryWrapper SegmentMerger bool string IOContext SegmentCommitInfo int public virtual public virtual params params params decl_stmt int = try if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) decl_stmt string = decl_stmt System.Collections.Generic.IList < = new < foreach in += foreach in call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt Lucene.Net.Store.IOContext = new new - - decl_stmt Lucene.Net.Store.TrackingDirectoryWrapper = new decl_stmt Lucene.Net.Index.SegmentInfo = new - decl_stmt Lucene.Net.Index.SegmentMerger = new if ! call Lucene.Net.Index.SegmentMerger.ShouldMerge() call Lucene.Net.Index.SegmentMerger.ShouldMerge() call Lucene.Net.Index.SegmentMerger.ShouldMerge() call Lucene.Net.Index.SegmentMerger.ShouldMerge() call Lucene.Net.Index.SegmentMerger.ShouldMerge() return decl_stmt Lucene.Net.Index.MergeState decl_stmt bool = try = call Lucene.Net.Index.SegmentMerger.Merge() call Lucene.Net.Index.SegmentMerger.Merge() call Lucene.Net.Index.SegmentMerger.Merge() call Lucene.Net.Index.SegmentMerger.Merge() call Lucene.Net.Index.SegmentMerger.Merge() = finally if ! lock call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() decl_stmt Lucene.Net.Index.SegmentCommitInfo = new - - = new < call TrackingDirectoryWrapper.CreatedFiles() call TrackingDirectoryWrapper.CreatedFiles() call TrackingDirectoryWrapper.CreatedFiles() call TrackingDirectoryWrapper.CreatedFiles() call TrackingDirectoryWrapper.CreatedFiles() call TrackingDirectoryWrapper.CreatedFiles() call TrackingDirectoryWrapper.CreatedFiles() call TrackingDirectoryWrapper.CreatedFiles() call TrackingDirectoryWrapper.CreatedFiles() decl_stmt bool lock if call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.SegmentCommitInfo.Files() call Lucene.Net.Index.SegmentCommitInfo.Files() call Lucene.Net.Index.SegmentCommitInfo.Files() call Lucene.Net.Index.SegmentCommitInfo.Files() call Lucene.Net.Index.SegmentCommitInfo.Files() return = call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) if decl_stmt System.Collections.Generic.ICollection < = call Lucene.Net.Index.SegmentCommitInfo.Files() call Lucene.Net.Index.SegmentCommitInfo.Files() call Lucene.Net.Index.SegmentCommitInfo.Files() call Lucene.Net.Index.SegmentCommitInfo.Files() call Lucene.Net.Index.SegmentCommitInfo.Files() try finally lock call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) = = try call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() = finally if ! lock call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.SegmentInfo.AddFiles(ICollection) call Lucene.Net.Index.SegmentInfo.AddFiles(ICollection) call Lucene.Net.Index.SegmentInfo.AddFiles(ICollection) call Lucene.Net.Index.SegmentInfo.AddFiles(ICollection) call Lucene.Net.Index.SegmentInfo.AddFiles(ICollection) lock if call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) return call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) catch FieldInfos decl ICollection decl HashSet string bool SegmentCommitInfo TrackingDirectoryWrapper string SegmentInfo decl ISet string decl IDictionary Codec private private < < < decl_stmt string = != decl_stmt string if = else = = decl_stmt Lucene.Net.Index.FieldInfos = decl_stmt System.Collections.Generic.ISet < = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < if == = new < else = new < if != = decl_stmt Lucene.Net.Index.SegmentInfo = new decl_stmt Lucene.Net.Index.SegmentCommitInfo = new decl_stmt System.Collections.Generic.HashSet < = new < foreach in decl_stmt string if != && call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() = + else = + call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() = decl_stmt Lucene.Net.Store.TrackingDirectoryWrapper = new decl_stmt Lucene.Net.Codecs.Codec = try call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() catch if is else throw decl_stmt System.Collections.Generic.ICollection < = decl_stmt bool = try foreach in decl_stmt string if != && call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() = + if continue else = + if call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() continue ! + + + ! + + = finally if ! foreach in try call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() catch return protected internal virtual protected internal virtual protected internal virtual protected internal virtual public public bool bool SegmentInfos var bool bool private private lock if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + if throw new if != throw new decl_stmt var = decl_stmt Lucene.Net.Index.SegmentInfos = decl_stmt bool = try lock decl_stmt bool = decl_stmt bool = try = call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) if ! call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() = lock call ReaderPool.Commit() call ReaderPool.Commit() call ReaderPool.Commit() call ReaderPool.Commit() call ReaderPool.Commit() = call Lucene.Net.Index.SegmentInfos.Clone() call Lucene.Net.Index.SegmentInfos.Clone() call Lucene.Net.Index.SegmentInfos.Clone() call Lucene.Net.Index.SegmentInfos.Clone() call Lucene.Net.Index.SegmentInfos.Clone() = = call Lucene.Net.Index.SegmentInfos.Files(Directory,bool) call Lucene.Net.Index.SegmentInfos.Files(Directory,bool) call Lucene.Net.Index.SegmentInfos.Files(Directory,bool) call Lucene.Net.Index.SegmentInfos.Files(Directory,bool) call Lucene.Net.Index.SegmentInfos.Files(Directory,bool) call Lucene.Net.Index.IndexFileDeleter.IncRef() call Lucene.Net.Index.IndexFileDeleter.IncRef() call Lucene.Net.Index.IndexFileDeleter.IncRef() call Lucene.Net.Index.IndexFileDeleter.IncRef() call Lucene.Net.Index.IndexFileDeleter.IncRef() = finally if ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) catch decl_stmt bool = try if = finally if ! lock if != call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() = lock = new < ++ lock return public public public public return != || call Lucene.Net.Index.DocumentsWriter.AnyChanges() call Lucene.Net.Index.DocumentsWriter.AnyChanges() call Lucene.Net.Index.DocumentsWriter.AnyChanges() call Lucene.Net.Index.DocumentsWriter.AnyChanges() call Lucene.Net.Index.DocumentsWriter.AnyChanges() || call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() private private if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) lock if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) if == if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) else if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) private private lock if != try if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Index.SegmentInfos.FinishCommit(Directory) call Lucene.Net.Index.SegmentInfos.FinishCommit(Directory) call Lucene.Net.Index.SegmentInfos.FinishCommit(Directory) call Lucene.Net.Index.SegmentInfos.FinishCommit(Directory) call Lucene.Net.Index.SegmentInfos.FinishCommit(Directory) if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + call Lucene.Net.Index.SegmentInfos.UpdateGeneration(SegmentInfos) call Lucene.Net.Index.SegmentInfos.UpdateGeneration(SegmentInfos) call Lucene.Net.Index.SegmentInfos.UpdateGeneration(SegmentInfos) call Lucene.Net.Index.SegmentInfos.UpdateGeneration(SegmentInfos) call Lucene.Net.Index.SegmentInfos.UpdateGeneration(SegmentInfos) = = call Lucene.Net.Index.SegmentInfos.CreateBackupSegmentInfos() call Lucene.Net.Index.SegmentInfos.CreateBackupSegmentInfos() call Lucene.Net.Index.SegmentInfos.CreateBackupSegmentInfos() call Lucene.Net.Index.SegmentInfos.CreateBackupSegmentInfos() call Lucene.Net.Index.SegmentInfos.CreateBackupSegmentInfos() call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) call Lucene.Net.Index.IndexFileDeleter.Checkpoint(SegmentInfos,bool) finally call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() = = else if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) public public if && bool bool bool var private private if throw new decl_stmt var = decl_stmt bool = try if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + decl_stmt bool lock decl_stmt bool = try = call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) call Lucene.Net.Index.DocumentsWriter.FlushAllThreads(IndexWriter) = finally call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) call Lucene.Net.Index.DocumentsWriter.FinishFullFlush(bool) lock if ! call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() = return catch return finally if ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) internal internal lock if if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) else if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + call Lucene.Net.Index.BufferedUpdatesStream.NumTerms() call Lucene.Net.Index.BufferedUpdatesStream.NumTerms() call Lucene.Net.Index.BufferedUpdatesStream.NumTerms() call Lucene.Net.Index.BufferedUpdatesStream.NumTerms() call Lucene.Net.Index.BufferedUpdatesStream.NumTerms() + + call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() decl BufferedUpdatesStream internal internal lock call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() decl_stmt ApplyDeletesResult = call Lucene.Net.Index.BufferedUpdatesStream.ApplyDeletesAndUpdates(IndexWriter,ReaderPool,IList) call Lucene.Net.Index.BufferedUpdatesStream.ApplyDeletesAndUpdates(IndexWriter,ReaderPool,IList) call Lucene.Net.Index.BufferedUpdatesStream.ApplyDeletesAndUpdates(IndexWriter,ReaderPool,IList) call Lucene.Net.Index.BufferedUpdatesStream.ApplyDeletesAndUpdates(IndexWriter,ReaderPool,IList) call Lucene.Net.Index.BufferedUpdatesStream.ApplyDeletesAndUpdates(IndexWriter,ReaderPool,IList) call Lucene.Net.Index.SegmentInfos.AsList() call Lucene.Net.Index.SegmentInfos.AsList() call Lucene.Net.Index.SegmentInfos.AsList() call Lucene.Net.Index.SegmentInfos.AsList() call Lucene.Net.Index.SegmentInfos.AsList() if if ! && != if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + foreach in if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call Lucene.Net.Index.SegmentInfos.Remove(int) call Lucene.Net.Index.SegmentInfos.Remove(int) call Lucene.Net.Index.SegmentInfos.Remove(int) call Lucene.Net.Index.SegmentInfos.Remove(int) call Lucene.Net.Index.SegmentInfos.Remove(int) call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call Lucene.Net.Index.BufferedUpdatesStream.Prune(SegmentInfos) call Lucene.Net.Index.BufferedUpdatesStream.Prune(SegmentInfos) call Lucene.Net.Index.BufferedUpdatesStream.Prune(SegmentInfos) call Lucene.Net.Index.BufferedUpdatesStream.Prune(SegmentInfos) call Lucene.Net.Index.BufferedUpdatesStream.Prune(SegmentInfos) public public return call DocumentsWriter.FlushControl() call DocumentsWriter.FlushControl() call DocumentsWriter.FlushControl() call DocumentsWriter.FlushControl() call DocumentsWriter.FlushControl() call DocumentsWriter.FlushControl() call DocumentsWriter.FlushControl() call DocumentsWriter.FlushControl() call DocumentsWriter.FlushControl() + call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() bool decl_stmt bool = = return : public public lock return private private lock foreach in if ! call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) throw new + + + private private foreach in if == > + + + internal internal if == = call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() = if && ! = decl DocValuesFieldUpdates decl Iterator int private private decl_stmt int = - for = < ++ decl_stmt System.IO.Iterator = if call decl DocValuesFieldUpdates.Doc() call decl DocValuesFieldUpdates.Doc() call decl DocValuesFieldUpdates.Doc() call decl DocValuesFieldUpdates.Doc() call decl DocValuesFieldUpdates.Doc() == if == if == - = decl_stmt Lucene.Net.Index.DocValuesFieldUpdates = call decl Iterator.Add() call decl Iterator.Add() call decl Iterator.Add() call decl Iterator.Add() call decl Iterator.Add() call decl DocValuesFieldUpdates.Value() call decl DocValuesFieldUpdates.Value() call decl DocValuesFieldUpdates.Value() call decl DocValuesFieldUpdates.Value() call decl DocValuesFieldUpdates.Value() call decl DocValuesFieldUpdates.NextDoc() call decl DocValuesFieldUpdates.NextDoc() call decl DocValuesFieldUpdates.NextDoc() call decl DocValuesFieldUpdates.NextDoc() call decl DocValuesFieldUpdates.NextDoc() else call decl DocValuesFieldUpdates.Doc() call decl DocValuesFieldUpdates.Doc() call decl DocValuesFieldUpdates.Doc() call decl DocValuesFieldUpdates.Doc() call decl DocValuesFieldUpdates.Doc() > + + + call decl DocValuesFieldUpdates.Doc() call decl DocValuesFieldUpdates.Doc() call decl DocValuesFieldUpdates.Doc() call decl DocValuesFieldUpdates.Doc() call decl DocValuesFieldUpdates.Doc() + + decl Container Bits decl DocValuesFieldUpdates long decl DocValuesFieldUpdates decl DocValuesFieldUpdates ReadersAndUpdates Bits SegmentCommitInfo int string decl Iterator int var DocValuesFieldUpdates decl IList MergedDeletesAndUpdates int decl string decl IDictionary private private lock decl_stmt var = decl_stmt System.Collections.Generic.IList < = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + decl_stmt int = decl_stmt long = decl_stmt MergedDeletesAndUpdates = new decl_stmt System.ComponentModel.Container = new for = < ++ decl_stmt Lucene.Net.Index.SegmentCommitInfo = = decl_stmt int = decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt Lucene.Net.Index.ReadersAndUpdates = call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() != + decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = decl_stmt string decl_stmt Lucene.Net.Index.DocValuesFieldUpdates decl_stmt System.IO.Iterator if == = = = else = new = new = new decl_stmt int = foreach < in decl_stmt string = decl_stmt Lucene.Net.Index.DocValuesFieldUpdates = = = call decl DocValuesFieldUpdates.GetUpdates() call decl DocValuesFieldUpdates.GetUpdates() call decl DocValuesFieldUpdates.GetUpdates() call decl DocValuesFieldUpdates.GetUpdates() call decl DocValuesFieldUpdates.GetUpdates() if == = call decl DocValuesFieldUpdates.NewUpdates() call decl DocValuesFieldUpdates.NewUpdates() call decl DocValuesFieldUpdates.NewUpdates() call decl DocValuesFieldUpdates.NewUpdates() call decl DocValuesFieldUpdates.NewUpdates() = call int.GetIterator() call int.GetIterator() call int.GetIterator() call int.GetIterator() call int.GetIterator() ++ if != != call int.Length() call int.Length() call int.Length() call int.Length() call int.Length() == call ReadersAndUpdates.Length() call ReadersAndUpdates.Length() call ReadersAndUpdates.Length() call ReadersAndUpdates.Length() call ReadersAndUpdates.Length() == if != for = < ++ if ! call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() ! call ReadersAndUpdates.Get() call ReadersAndUpdates.Get() call ReadersAndUpdates.Get() call ReadersAndUpdates.Get() call ReadersAndUpdates.Get() else if ! call ReadersAndUpdates.Get() call ReadersAndUpdates.Get() call ReadersAndUpdates.Get() call ReadersAndUpdates.Get() call ReadersAndUpdates.Get() if == || ! call MergedDeletesAndUpdates.Init() call MergedDeletesAndUpdates.Init() call MergedDeletesAndUpdates.Init() call MergedDeletesAndUpdates.Init() call MergedDeletesAndUpdates.Init() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() if != else if != ++ else if != for = < ++ if call int.Get() call int.Get() call int.Get() call int.Get() call int.Get() ++ else else += - - else if != call ReadersAndUpdates.Length() call ReadersAndUpdates.Length() call ReadersAndUpdates.Length() call ReadersAndUpdates.Length() call ReadersAndUpdates.Length() == for = < ++ if ! call ReadersAndUpdates.Get() call ReadersAndUpdates.Get() call ReadersAndUpdates.Get() call ReadersAndUpdates.Get() call ReadersAndUpdates.Get() if == || ! call MergedDeletesAndUpdates.Init() call MergedDeletesAndUpdates.Init() call MergedDeletesAndUpdates.Init() call MergedDeletesAndUpdates.Init() call MergedDeletesAndUpdates.Init() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() call MergedDeletesAndUpdates.DocMap() if != else if != ++ else if != for = < ++ ++ else += == if call decl DocValuesFieldUpdates.Any() call decl DocValuesFieldUpdates.Any() call decl DocValuesFieldUpdates.Any() call decl DocValuesFieldUpdates.Any() call decl DocValuesFieldUpdates.Any() decl_stmt bool = try call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() = finally if ! call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call MergedDeletesAndUpdates.MergedDeletesAndUpdates_Renamed() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) if == call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) else decl_stmt string = + if call decl DocValuesFieldUpdates.Any() call decl DocValuesFieldUpdates.Any() call decl DocValuesFieldUpdates.Any() call decl DocValuesFieldUpdates.Any() call decl DocValuesFieldUpdates.Any() += + call decl DocValuesFieldUpdates.Size() call decl DocValuesFieldUpdates.Size() call decl DocValuesFieldUpdates.Size() call decl DocValuesFieldUpdates.Size() call decl DocValuesFieldUpdates.Size() + += call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) = return bool bool var bool ReadersAndUpdates bool private private lock decl_stmt var = if throw new if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + if if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) return decl_stmt Lucene.Net.Index.ReadersAndUpdates = == : ! call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) decl_stmt bool = == || == || != && == if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) if call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + : decl_stmt bool = && ! > || != || || if != decl_stmt bool = try if call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call ReaderPool.Release() call ReaderPool.Release() call ReaderPool.Release() call ReaderPool.Release() call ReaderPool.Release() = finally if ! call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call Lucene.Net.Index.SegmentInfos.ApplyMergeChanges(MergePolicy,OneMerge,bool) call Lucene.Net.Index.SegmentInfos.ApplyMergeChanges(MergePolicy,OneMerge,bool) call Lucene.Net.Index.SegmentInfos.ApplyMergeChanges(MergePolicy,OneMerge,bool) call Lucene.Net.Index.SegmentInfos.ApplyMergeChanges(MergePolicy,OneMerge,bool) call Lucene.Net.Index.SegmentInfos.ApplyMergeChanges(MergePolicy,OneMerge,bool) if ! call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) decl_stmt bool = try = finally if else try catch call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + if != - && ! if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() = return private private if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + = if as != if throw else long bool public virtual public virtual decl_stmt bool = decl_stmt long = try try try if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + = catch finally lock if ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) if != && ! call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() if && ! && != - || ! && ! catch if != && ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + - + + + internal virtual internal virtual double StringBuilder int bool internal internal lock if return > if throw new + decl_stmt bool = foreach in if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + return if ! call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Contains(SegmentCommitInfo) if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + return if != = if call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() = call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + = = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) decl_stmt System.Text.StringBuilder = new foreach in call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) foreach in if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() == == foreach in if > decl_stmt int = <= decl_stmt double = double / += * - += = return bool internal internal lock decl_stmt bool = try = finally if ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) string decl ApplyDeletesResult decl BufferedUpdatesStream var SegmentInfo private private lock decl_stmt var = == - || > if throw new if != return if return decl_stmt ApplyDeletesResult = call Lucene.Net.Index.BufferedUpdatesStream.ApplyDeletesAndUpdates(IndexWriter,ReaderPool,IList) call Lucene.Net.Index.BufferedUpdatesStream.ApplyDeletesAndUpdates(IndexWriter,ReaderPool,IList) call Lucene.Net.Index.BufferedUpdatesStream.ApplyDeletesAndUpdates(IndexWriter,ReaderPool,IList) call Lucene.Net.Index.BufferedUpdatesStream.ApplyDeletesAndUpdates(IndexWriter,ReaderPool,IList) call Lucene.Net.Index.BufferedUpdatesStream.ApplyDeletesAndUpdates(IndexWriter,ReaderPool,IList) if if ! && != if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + foreach in call Lucene.Net.Index.SegmentInfos.Remove(int) call Lucene.Net.Index.SegmentInfos.Remove(int) call Lucene.Net.Index.SegmentInfos.Remove(int) call Lucene.Net.Index.SegmentInfos.Remove(int) call Lucene.Net.Index.SegmentInfos.Remove(int) if call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() decl_stmt string = decl_stmt Lucene.Net.Index.SegmentInfo = new - decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < = + = = new - - call Lucene.Net.Index.BufferedUpdatesStream.Prune(SegmentInfos) call Lucene.Net.Index.BufferedUpdatesStream.Prune(SegmentInfos) call Lucene.Net.Index.BufferedUpdatesStream.Prune(SegmentInfos) call Lucene.Net.Index.BufferedUpdatesStream.Prune(SegmentInfos) call Lucene.Net.Index.BufferedUpdatesStream.Prune(SegmentInfos) if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + internal static internal static decl IDictionary private static private static < decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < = = = = = = = = if != call decl IDictionary.PutAll() call decl IDictionary.PutAll() call decl IDictionary.PutAll() call decl IDictionary.PutAll() call decl IDictionary.PutAll() = decl IList public public lock if decl_stmt System.Collections.Generic.IList < = foreach in call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() = call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() int ReadersAndUpdates bool Exception SegmentReader private private lock decl_stmt int = decl_stmt System.Exception = decl_stmt bool = ! for = < ++ decl_stmt Lucene.Net.Index.SegmentReader = if != try decl_stmt Lucene.Net.Index.ReadersAndUpdates = call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() != if call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call Lucene.Net.Index.ReadersAndUpdates.DropChanges() call Lucene.Net.Index.ReadersAndUpdates.DropChanges() else call Lucene.Net.Index.ReadersAndUpdates.DropMergingUpdates() call Lucene.Net.Index.ReadersAndUpdates.DropMergingUpdates() call Lucene.Net.Index.ReadersAndUpdates.DropMergingUpdates() call Lucene.Net.Index.ReadersAndUpdates.DropMergingUpdates() call Lucene.Net.Index.ReadersAndUpdates.DropMergingUpdates() call Lucene.Net.Index.ReadersAndUpdates.Release(SegmentReader) call Lucene.Net.Index.ReadersAndUpdates.Release(SegmentReader) call Lucene.Net.Index.ReadersAndUpdates.Release(SegmentReader) call Lucene.Net.Index.ReadersAndUpdates.Release(SegmentReader) call Lucene.Net.Index.ReadersAndUpdates.Release(SegmentReader) call ReaderPool.Release() call ReaderPool.Release() call ReaderPool.Release() call ReaderPool.Release() call ReaderPool.Release() if call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() call ReaderPool.Drop() catch if == = = if ! int decl MergeState bool string bool SegmentMerger ReadersAndUpdates decl CheckAbort IndexReaderWarmer SegmentReader bool MergeState decl ICollection bool int Bits TrackingDirectoryWrapper SegmentReader ReadersAndUpdates IOContext bool decl IList private private decl_stmt string = decl_stmt System.Collections.Generic.IList < = decl_stmt Lucene.Net.Store.IOContext = new decl_stmt CheckAbort = new decl_stmt Lucene.Net.Store.TrackingDirectoryWrapper = new if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + = new < decl_stmt bool = try decl_stmt int = while < decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt Lucene.Net.Index.ReadersAndUpdates = call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() decl_stmt Lucene.Net.Index.SegmentReader decl_stmt Lucene.Net.Spatial.Util.Bits decl_stmt int lock = call IndexReaderWarmer.GetReaderForMerge() call IndexReaderWarmer.GetReaderForMerge() call IndexReaderWarmer.GetReaderForMerge() call IndexReaderWarmer.GetReaderForMerge() call IndexReaderWarmer.GetReaderForMerge() = = + != call IndexReaderWarmer.VerifyDocCounts() call IndexReaderWarmer.VerifyDocCounts() call IndexReaderWarmer.VerifyDocCounts() call IndexReaderWarmer.VerifyDocCounts() call IndexReaderWarmer.VerifyDocCounts() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) if != call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + + else if != call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + else call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + if != > decl_stmt Lucene.Net.Index.SegmentReader = new - decl_stmt bool = try call IndexReaderWarmer.Release() call IndexReaderWarmer.Release() call IndexReaderWarmer.Release() call IndexReaderWarmer.Release() call IndexReaderWarmer.Release() = finally if ! call int.DecRef() call int.DecRef() call int.DecRef() call int.DecRef() call int.DecRef() = <= + + + + + + + ++ decl_stmt Lucene.Net.Index.SegmentMerger = new decl_stmt Lucene.Net.Index.MergeState decl_stmt bool = try if ! call bool.ShouldMerge() call bool.ShouldMerge() call bool.ShouldMerge() call bool.ShouldMerge() call bool.ShouldMerge() = new new < else = call bool.Merge() call bool.Merge() call bool.Merge() call bool.Merge() call bool.Merge() = finally if ! lock call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() == = new < if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) if == call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) else call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + + call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() : + + call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() : + + call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() : + + call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() : + + call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() call SegmentMerger.FieldInfos() : decl_stmt bool lock = call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) call Lucene.Net.Index.MergePolicy.UseCompoundFile(SegmentInfos,SegmentCommitInfo) if = decl_stmt System.Collections.Generic.ICollection < = try = = catch lock if else catch finally if ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) lock call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) = lock call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) if if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) call Lucene.Net.Index.IndexFileDeleter.DeleteFile(string) return = else = decl_stmt bool = try call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() = finally if ! lock call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) / / / / decl_stmt IndexReaderWarmer = if && != && != decl_stmt Lucene.Net.Index.ReadersAndUpdates = call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() call ReaderPool.Get() decl_stmt Lucene.Net.Index.SegmentReader = call IndexReaderWarmer.GetReader() call IndexReaderWarmer.GetReader() call IndexReaderWarmer.GetReader() call IndexReaderWarmer.GetReader() call IndexReaderWarmer.GetReader() try call bool.Warm() call bool.Warm() call bool.Warm() call bool.Warm() call bool.Warm() finally lock call IndexReaderWarmer.Release() call IndexReaderWarmer.Release() call IndexReaderWarmer.Release() call IndexReaderWarmer.Release() call IndexReaderWarmer.Release() call ReaderPool.Release() call ReaderPool.Release() call ReaderPool.Release() call ReaderPool.Release() call ReaderPool.Release() if ! return = finally if ! return internal virtual internal virtual lock != if ! call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() && == call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return return public virtual public virtual lock return call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() > call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Info(int) call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() call Lucene.Net.Index.SegmentInfos.Size() - : public virtual public virtual lock return StringBuilder public virtual public virtual < lock decl_stmt System.Text.StringBuilder = new foreach in if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public virtual public virtual lock return - private private lock try catch throw new = return decl ICollection private private decl_stmt System.Collections.Generic.ICollection < = foreach in + + + call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Lucene.Net.Index.IndexFileDeleter.Exists(string) call Lucene.Net.Index.IndexFileDeleter.Exists(string) call Lucene.Net.Index.IndexFileDeleter.Exists(string) call Lucene.Net.Index.IndexFileDeleter.Exists(string) call Lucene.Net.Index.IndexFileDeleter.Exists(string) + return decl IDictionary SegmentCommitInfo SegmentCommitInfo SegmentInfos internal virtual internal virtual lock decl_stmt Lucene.Net.Index.SegmentInfos = new decl_stmt SpellChecker.Net.Search.Spell.IDictionary < = new < foreach in = foreach in decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt Lucene.Net.Index.SegmentCommitInfo if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) call Lucene.Net.Index.SegmentInfos.Add(SegmentCommitInfo) return decl ICollection bool bool var private private decl_stmt var = == if throw new try if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) lock <= + + + if == if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() = return if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + = decl_stmt bool = try = lock == == = = decl_stmt bool = decl_stmt System.Collections.Generic.ICollection < try = call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() = finally if ! = = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + = finally lock call Lucene.Net.Index.SegmentInfos.UpdateGeneration(SegmentInfos) call Lucene.Net.Index.SegmentInfos.UpdateGeneration(SegmentInfos) call Lucene.Net.Index.SegmentInfos.UpdateGeneration(SegmentInfos) call Lucene.Net.Index.SegmentInfos.UpdateGeneration(SegmentInfos) call Lucene.Net.Index.SegmentInfos.UpdateGeneration(SegmentInfos) if ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() = catch = public static public static return call Directory.MakeLock() call Directory.MakeLock() call Directory.MakeLock() call Directory.MakeLock() call Directory.MakeLock() public static public static call Directory.MakeLock() call Directory.MakeLock() call Directory.MakeLock() call Directory.MakeLock() call Directory.MakeLock() private private if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + = throw private private if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) return internal virtual internal virtual lock if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + == + + call Lucene.Net.Index.DocumentsWriter.AnyChanges() call Lucene.Net.Index.DocumentsWriter.AnyChanges() call Lucene.Net.Index.DocumentsWriter.AnyChanges() call Lucene.Net.Index.DocumentsWriter.AnyChanges() call Lucene.Net.Index.DocumentsWriter.AnyChanges() + + call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() return == && ! call Lucene.Net.Index.DocumentsWriter.AnyChanges() call Lucene.Net.Index.DocumentsWriter.AnyChanges() call Lucene.Net.Index.DocumentsWriter.AnyChanges() call Lucene.Net.Index.DocumentsWriter.AnyChanges() call Lucene.Net.Index.DocumentsWriter.AnyChanges() && ! call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() call BufferedUpdatesStream.Any() lock return public virtual public virtual lock call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.RevisitPolicy() call Lucene.Net.Index.IndexFileDeleter.RevisitPolicy() call Lucene.Net.Index.IndexFileDeleter.RevisitPolicy() call Lucene.Net.Index.IndexFileDeleter.RevisitPolicy() call Lucene.Net.Index.IndexFileDeleter.RevisitPolicy() private private lock call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() call Lucene.Net.Index.IndexFileDeleter.DeletePendingFiles() decl ICollection bool CompoundFileDirectory string IOException decl HashSet public static < public static < decl_stmt string = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + == - decl_stmt System.Collections.Generic.ICollection < = decl_stmt Lucene.Net.Store.CompoundFileDirectory = new decl_stmt IOException = try foreach in call Lucene.Net.Store.Directory.Copy(Directory,string,string,IOContext) call Lucene.Net.Store.Directory.Copy(Directory,string,string,IOContext) call Lucene.Net.Store.Directory.Copy(Directory,string,string,IOContext) call Lucene.Net.Store.Directory.Copy(Directory,string,string,IOContext) call Lucene.Net.Store.Directory.Copy(Directory,string,string,IOContext) call Directory.FileLength() call Directory.FileLength() call Directory.FileLength() call Directory.FileLength() call Directory.FileLength() catch = finally decl_stmt bool = try = finally if ! try call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() catch try call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() catch decl_stmt System.Collections.Generic.HashSet < = new < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() = return internal internal < lock call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) call Lucene.Net.Index.IndexFileDeleter.DeleteNewFiles(ICollection) internal internal lock call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() call Lucene.Net.Index.IndexFileDeleter.Refresh() internal internal return call Lucene.Net.Index.DocumentsWriter.PurgeBuffer(IndexWriter,bool) call Lucene.Net.Index.DocumentsWriter.PurgeBuffer(IndexWriter,bool) call Lucene.Net.Index.DocumentsWriter.PurgeBuffer(IndexWriter,bool) call Lucene.Net.Index.DocumentsWriter.PurgeBuffer(IndexWriter,bool) call Lucene.Net.Index.DocumentsWriter.PurgeBuffer(IndexWriter,bool) internal internal try finally call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() call AtomicInteger.IncrementAndGet() internal internal try finally if internal virtual internal virtual lock call Lucene.Net.Index.IndexFileDeleter.IncRef() call Lucene.Net.Index.IndexFileDeleter.IncRef() call Lucene.Net.Index.IndexFileDeleter.IncRef() call Lucene.Net.Index.IndexFileDeleter.IncRef() call Lucene.Net.Index.IndexFileDeleter.IncRef() internal virtual internal virtual lock call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() call Lucene.Net.Index.IndexFileDeleter.DecRef() private private return bool Event private private < decl_stmt Lucene.Net.Index.Event decl_stmt bool = while out = call Event.Process() call Event.Process() call Event.Process() call Event.Process() call Event.Process() return private static private static return