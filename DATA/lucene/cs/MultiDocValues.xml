Lucene.Net.Index System.Collections.Generic using System.Diagnostics using Lucene.Net.Util.Packed.AppendingPackedLongBuffer Lucene.Net.Util.Bits Lucene.Net.Util.BytesRef Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer Lucene.Net.Util.Packed.PackedInts Lucene.Net.Index.MultiTermsEnum.TermsEnumIndex Lucene.Net.Index.MultiTermsEnum.TermsEnumWithSlice class Lucene.Net.Index.MultiDocValues decl int decl IList NumericDocValues decl NumericDocValues AtomicReaderContext bool FieldInfo int public static public static decl_stmt System.Collections.Generic.IList < = decl_stmt int = if == return else if == return decl_stmt Lucene.Net.Index.FieldInfo = if == || call FieldInfo.HasNorms() call FieldInfo.HasNorms() call FieldInfo.HasNorms() call FieldInfo.HasNorms() call FieldInfo.HasNorms() == return decl_stmt bool = decl_stmt NumericDocValues = new decl_stmt int = new + for = < ++ decl_stmt Lucene.Net.Index.AtomicReaderContext = decl_stmt NumericDocValues = call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() if == = else = = = = return new int public override public override decl_stmt int = return - bool decl IList NumericDocValues decl NumericDocValues AtomicReaderContext decl int int public static public static decl_stmt System.Collections.Generic.IList < = decl_stmt int = if == return else if == return decl_stmt bool = decl_stmt NumericDocValues = new decl_stmt int = new + for = < ++ decl_stmt Lucene.Net.Index.AtomicReaderContext = decl_stmt NumericDocValues = call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() if == = else = = = = if ! return else return new int public override public override decl_stmt int = return - bool bool decl IList Bits decl Bits AtomicReaderContext decl int int public static public static decl_stmt System.Collections.Generic.IList < = decl_stmt int = if == return else if == return decl_stmt bool = decl_stmt bool = decl_stmt Lucene.Net.Spatial.Util.Bits = new decl_stmt int = new + for = < ++ decl_stmt Lucene.Net.Index.AtomicReaderContext = decl_stmt Lucene.Net.Spatial.Util.Bits = call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() if == = new = else = if is == = = = = if ! return else if ! return new else return new bool decl IList BinaryDocValues decl BinaryDocValues AtomicReaderContext decl int int public static public static decl_stmt System.Collections.Generic.IList < = decl_stmt int = if == return else if == return decl_stmt bool = decl_stmt BinaryDocValues = new decl_stmt int = new + for = < ++ decl_stmt Lucene.Net.Index.AtomicReaderContext = decl_stmt BinaryDocValues = call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() if == = else = = = = if ! return else return new int public override public override decl_stmt int = - bool decl IList SortedDocValues OrdinalMap var AtomicReaderContext decl int decl TermsEnum int public static public static decl_stmt System.Collections.Generic.IList < = decl_stmt int = if == return else if == return decl_stmt bool = decl_stmt var = new decl_stmt int = new + for = < ++ decl_stmt Lucene.Net.Index.AtomicReaderContext = decl_stmt Lucene.Net.Index.SortedDocValues = call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() if == = else = = = = if ! return else decl_stmt Lucene.Net.Index.TermsEnum = new for = < ++ = decl_stmt Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap = new return new bool decl IList SortedSetDocValues OrdinalMap decl SortedSetDocValues AtomicReaderContext decl int decl TermsEnum int public static public static decl_stmt System.Collections.Generic.IList < = decl_stmt int = if == return else if == return decl_stmt bool = decl_stmt Lucene.Net.Index.SortedSetDocValues = new decl_stmt int = new + for = < ++ decl_stmt Lucene.Net.Index.AtomicReaderContext = decl_stmt Lucene.Net.Index.SortedSetDocValues = call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() call AtomicReaderContext.AtomicReader() if == = else = = = = if ! return else decl_stmt Lucene.Net.Index.TermsEnum = new for = < ++ = decl_stmt Lucene.Net.Facet.Taxonomy.Directory.OrdinalMap = new return new public virtual public virtual return + public virtual public virtual return - public virtual public virtual return int return long public virtual public virtual decl_stmt long = + for = < ++ += return int int public override public override decl_stmt int = decl_stmt int = - return == - : int int int public override public override decl_stmt int = decl_stmt int = int return int long public override public override decl_stmt long = if == return else return = = - int long public override public override decl_stmt int = decl_stmt long = return