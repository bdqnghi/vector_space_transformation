Lucene.Net.Queries System using System.Collections.Generic using System.Diagnostics using System.Linq using System.Text using Lucene.Net.Index using Lucene.Net.Search using Lucene.Net.Search.Similarities using Lucene.Net.Support using Lucene.Net.Util using class Lucene.Net.Queries.CommonTermsQuery super super Query bool decl IList decl BooleanClause decl BooleanClause decl Occur decl Occur float public virtual public virtual if == throw new var var var int Query public override public override if == return new else if == decl_stmt Lucene.Net.Search.Query = = return decl_stmt var = decl_stmt int = decl_stmt var = new decl_stmt var = return protected internal virtual protected internal virtual return protected internal virtual protected internal virtual return private private if >= || == return int return int * int var var int TermContext var int protected internal virtual protected internal virtual decl_stmt var = new decl_stmt var = new = = decl_stmt var = new for = < ++ decl_stmt Lucene.Net.Index.TermContext = if == call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() else if >= && > || > int * float call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() else call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() decl_stmt int = decl_stmt int = if == && > decl_stmt int = = if == && > decl_stmt int = = if == if == && != foreach in = = return else if == = return else call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() = return Fields Term TermContext Terms TermsEnum public virtual public virtual < decl_stmt Lucene.Net.Index.TermsEnum = foreach in decl_stmt Lucene.Net.Index.Fields = if == continue for = < ++ decl_stmt Lucene.Net.Index.Term = decl_stmt Lucene.Net.Index.TermContext = decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() if == continue = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() != if == continue if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) if == = new call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() else call Lucene.Net.Index.TermContext.Register(TermState,int,int,long) call Lucene.Net.Index.TermContext.Register(TermState,int,int,long) call Lucene.Net.Index.TermContext.Register(TermState,int,int,long) call Lucene.Net.Index.TermContext.Register(TermState,int,int,long) call Lucene.Net.Index.TermContext.Register(TermState,int,int,long) call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() return public override public override < call decl IList.AddAll() call decl IList.AddAll() call decl IList.AddAll() call decl IList.AddAll() call decl IList.AddAll() var bool Term public override public override decl_stmt var = new decl_stmt bool = != || > if call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() for = < ++ decl_stmt Lucene.Net.Index.Term = call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() if != - call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() if call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() if > || > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() if != call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() return call var.ToString() call var.ToString() call var.ToString() call var.ToString() call var.ToString() int int public override public override decl_stmt int const const = decl_stmt int = = * + : = * + = * + == : call decl Occur.GetHashCode() call decl Occur.GetHashCode() call decl Occur.GetHashCode() call decl Occur.GetHashCode() call decl Occur.GetHashCode() = * + = * + == : call decl BooleanClause.GetHashCode() call decl BooleanClause.GetHashCode() call decl BooleanClause.GetHashCode() call decl BooleanClause.GetHashCode() call decl BooleanClause.GetHashCode() = * + = * + = * + = * + == : call decl IList.GetHashCode() call decl IList.GetHashCode() call decl IList.GetHashCode() call decl IList.GetHashCode() call decl IList.GetHashCode() return var public override public override if == return if ! return if != return decl_stmt var = if != return if != return if != return if != return if != return if != return if != return if != return if == if != return else if ! call decl IList.SequenceEqual() call decl IList.SequenceEqual() call decl IList.SequenceEqual() call decl IList.SequenceEqual() call decl IList.SequenceEqual() return return protected virtual protected virtual return == new : new