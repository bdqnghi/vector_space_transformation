Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Threading using Lucene.Net.Support using Lucene.Net.Util using System.Globalization using Lucene.Net.Util.ByteBlockPool.Allocator Lucene.Net.Analysis.Analyzer Lucene.Net.Codecs.Codec Lucene.Net.Util.Constants Lucene.Net.Util.Counter Lucene.Net.Index.DocumentsWriterDeleteQueue.DeleteSlice Lucene.Net.Store.Directory Lucene.Net.Util.ByteBlockPool.DirectTrackingAllocator Lucene.Net.Store.FlushInfo Lucene.Net.Util.InfoStream Lucene.Net.Util.IntBlockPool Lucene.Net.Store.IOContext Lucene.Net.Util.MutableBits Lucene.Net.Util.RamUsageEstimator Lucene.Net.Search.Similarities.Similarity Lucene.Net.Store.TrackingDirectoryWrapper class Lucene.Net.Index.DocumentsWriterPerThread InfoStream bool Counter decl Allocator decl IntBlockPool DeleteSlice Codec BufferedUpdates SegmentWriteState IndexingChain decl FieldInfos bool LiveIndexWriterConfig decl Builder DocState bool Allocator TrackingDirectoryWrapper NumberFormatInfo Directory DocConsumer DocumentsWriterDeleteQueue decl HashSet int SegmentInfo return TermsHashConsumer NormsConsumer DocInverter InvertedDocConsumer TermsHashConsumer StoredFieldsConsumer public override public override decl_stmt TermsHashConsumer = new decl_stmt TermsHashConsumer = new decl_stmt InvertedDocConsumer = new new decl_stmt Lucene.Net.Index.NormsConsumer = new decl_stmt Lucene.Net.Index.DocInverter = new decl_stmt StoredFieldsConsumer = new new new return new public virtual public virtual return public virtual public virtual = = internal virtual internal virtual < = = try if call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() try call DocConsumer.Abort() call DocConsumer.Abort() call DocConsumer.Abort() call DocConsumer.Abort() call DocConsumer.Abort() catch call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() finally = if call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() internal virtual internal virtual = bool internal virtual internal virtual decl_stmt bool = = return internal internal if call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() return bool public virtual public virtual < != = = = if && call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() + + + + + + decl_stmt bool = try try call DocConsumer.ProcessDocument() call DocConsumer.ProcessDocument() call DocConsumer.ProcessDocument() call DocConsumer.ProcessDocument() call DocConsumer.ProcessDocument() finally call DocState.Clear() call DocState.Clear() call DocState.Clear() call DocState.Clear() call DocState.Clear() = finally if ! if ! ++ else = try call DocConsumer.FinishDocument() call DocConsumer.FinishDocument() call DocConsumer.FinishDocument() call DocConsumer.FinishDocument() call DocConsumer.FinishDocument() = finally if ! int int bool bool int public virtual public virtual < < != = if && call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() + + + + + + decl_stmt int = decl_stmt bool = try foreach < in = = ++ decl_stmt bool = try call DocConsumer.ProcessDocument() call DocConsumer.ProcessDocument() call DocConsumer.ProcessDocument() call DocConsumer.ProcessDocument() call DocConsumer.ProcessDocument() = finally if ! if ! ++ else = try call DocConsumer.FinishDocument() call DocConsumer.FinishDocument() call DocConsumer.FinishDocument() call DocConsumer.FinishDocument() call DocConsumer.FinishDocument() = finally if ! = if != call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() call Lucene.Net.Index.DocumentsWriterDeleteQueue.IsTailItem(object) call Lucene.Net.Index.DocumentsWriterDeleteQueue.IsTailItem(object) call Lucene.Net.Index.DocumentsWriterDeleteQueue.IsTailItem(object) call Lucene.Net.Index.DocumentsWriterDeleteQueue.IsTailItem(object) call Lucene.Net.Index.DocumentsWriterDeleteQueue.IsTailItem(object) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) - finally if ! && ! decl_stmt int = - decl_stmt int = - while > -- call DocState.Clear() call DocState.Clear() call DocState.Clear() call DocState.Clear() call DocState.Clear() return bool private private decl_stmt bool = != if != call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() call Lucene.Net.Index.DocumentsWriterDeleteQueue.IsTailItem(object) call Lucene.Net.Index.DocumentsWriterDeleteQueue.IsTailItem(object) call Lucene.Net.Index.DocumentsWriterDeleteQueue.IsTailItem(object) call Lucene.Net.Index.DocumentsWriterDeleteQueue.IsTailItem(object) call Lucene.Net.Index.DocumentsWriterDeleteQueue.IsTailItem(object) else &= call int.UpdateSlice() call int.UpdateSlice() call int.UpdateSlice() call int.UpdateSlice() call int.UpdateSlice() if call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) else call Lucene.Net.Index.DocumentsWriterDeleteQueue.Reset() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Reset() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Reset() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Reset() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Reset() ++ internal virtual internal virtual call Lucene.Net.Index.BufferedUpdates.AddDocID(int) call Lucene.Net.Index.BufferedUpdates.AddDocID(int) call Lucene.Net.Index.BufferedUpdates.AddDocID(int) call Lucene.Net.Index.BufferedUpdates.AddDocID(int) call Lucene.Net.Index.BufferedUpdates.AddDocID(int) public virtual public virtual return call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() call BufferedUpdates.NumTermDeletes() return FrozenBufferedUpdates internal virtual internal virtual > decl_stmt Lucene.Net.Index.FrozenBufferedUpdates = call int.FreezeGlobalBuffer() call int.FreezeGlobalBuffer() call int.FreezeGlobalBuffer() call int.FreezeGlobalBuffer() call int.FreezeGlobalBuffer() if != call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Apply(BufferedUpdates,int) call Lucene.Net.Index.DocumentsWriterDeleteQueue.Reset() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Reset() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Reset() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Reset() call Lucene.Net.Index.DocumentsWriterDeleteQueue.Reset() return SegmentWriteState double bool BufferedUpdates FlushedSegment SegmentCommitInfo double internal virtual internal virtual > = decl_stmt SegmentWriteState = new call decl FieldInfos.Finish() call decl FieldInfos.Finish() call decl FieldInfos.Finish() call decl FieldInfos.Finish() call decl FieldInfos.Finish() new new decl_stmt double = / / if > = call Codec.LiveDocsFormat() call Codec.LiveDocsFormat() call Codec.LiveDocsFormat() call Codec.LiveDocsFormat() call Codec.LiveDocsFormat() foreach in call SegmentWriteState.LiveDocs() call SegmentWriteState.LiveDocs() call SegmentWriteState.LiveDocs() call SegmentWriteState.LiveDocs() call SegmentWriteState.LiveDocs() call SegmentWriteState.LiveDocs() call SegmentWriteState.LiveDocs() call SegmentWriteState.LiveDocs() call SegmentWriteState.LiveDocs() = call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() - * call BufferedUpdates.DocIDs() call BufferedUpdates.DocIDs() call BufferedUpdates.DocIDs() call BufferedUpdates.DocIDs() call BufferedUpdates.DocIDs() call BufferedUpdates.DocIDs() call BufferedUpdates.DocIDs() call BufferedUpdates.DocIDs() call BufferedUpdates.DocIDs() if if call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() return if call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() + + + decl_stmt bool = try call DocConsumer.Flush() call DocConsumer.Flush() call DocConsumer.Flush() call DocConsumer.Flush() call DocConsumer.Flush() call BufferedUpdates.Terms() call BufferedUpdates.Terms() call BufferedUpdates.Terms() call BufferedUpdates.Terms() call BufferedUpdates.Terms() call BufferedUpdates.Terms() call BufferedUpdates.Terms() call BufferedUpdates.Terms() call BufferedUpdates.Terms() = new < decl_stmt Lucene.Net.Index.SegmentCommitInfo = new - - if call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() + == : - + call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() + call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() : + + call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() : + + call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() : + + call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() : + + call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() call SegmentWriteState.FieldInfos() : call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() + call Lucene.Net.Index.SegmentCommitInfo.Files() call Lucene.Net.Index.SegmentCommitInfo.Files() call Lucene.Net.Index.SegmentCommitInfo.Files() call Lucene.Net.Index.SegmentCommitInfo.Files() call Lucene.Net.Index.SegmentCommitInfo.Files() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() + decl_stmt Lucene.Net.Index.BufferedUpdates if == && == && == call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() call Lucene.Net.Index.BufferedUpdates.Clear() = else = if call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() decl_stmt double = call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() / / call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() + + + call double.ToString() call double.ToString() call double.ToString() call double.ToString() call double.ToString() + + + call double.ToString() call double.ToString() call double.ToString() call double.ToString() call double.ToString() + + + / != decl_stmt FlushedSegment = new = return finally if ! public virtual < public virtual < return SegmentCommitInfo int bool SegmentCommitInfo Codec IOContext internal virtual internal virtual != decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt Lucene.Net.Store.IOContext = new new call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() call Lucene.Net.Index.SegmentCommitInfo.SizeInBytes() decl_stmt bool = try if = call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() call Codec.SegmentInfoFormat() if != decl_stmt int = > if call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() + + + decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt Lucene.Net.Codecs.Codec = call Codec.LiveDocsFormat() call Codec.LiveDocsFormat() call Codec.LiveDocsFormat() call Codec.LiveDocsFormat() call Codec.LiveDocsFormat() = call Lucene.Net.Index.SegmentCommitInfo.AdvanceDelGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceDelGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceDelGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceDelGen() call Lucene.Net.Index.SegmentCommitInfo.AdvanceDelGen() = finally if ! if call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.IsEnabled() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() call decl Builder.Message() + return public virtual public virtual return call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() call Lucene.Net.Util.Counter.Get() + call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() call BufferedUpdates.BytesUsed() decl int decl_stmt int = new * return public override public override - * * public override public override return + + + != : + + + + + + +