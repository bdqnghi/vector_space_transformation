Lucene.Net.Analysis.Util System using System.Diagnostics using System.IO using ICU4NET using Lucene.Net.Analysis.Tokenattributes using System.IO.TextReader Lucene.Net.Util.LuceneVersion class Lucene.Net.Analysis.Util.SegmentingTokenizerBase super super Tokenizer BreakIterator decl char int int CharArrayIterator int int IOffsetAttribute public override public override if == || ! while ! if <= return return public override public override call Lucene.Net.Analysis.Util.CharArrayIterator.SetText(char,int,int) call Lucene.Net.Analysis.Util.CharArrayIterator.SetText(char,int,int) call Lucene.Net.Analysis.Util.CharArrayIterator.SetText(char,int,int) call Lucene.Net.Analysis.Util.CharArrayIterator.SetText(char,int,int) call Lucene.Net.Analysis.Util.CharArrayIterator.SetText(char,int,int) call BreakIterator.SetText() call BreakIterator.SetText() call BreakIterator.SetText() call BreakIterator.SetText() call BreakIterator.SetText() new = = = int public override public override decl_stmt int = < : + call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) call Lucene.Net.Analysis.Tokenattributes.IOffsetAttribute.SetOffset(int,int) private private for = - >= -- if return + return - protected internal virtual protected internal virtual switch int case case case case case return default: return int int int private private += decl_stmt int = - decl_stmt int = - decl_stmt int = = < : + if < = else = if < = call Lucene.Net.Analysis.Util.CharArrayIterator.SetText(char,int,int) call Lucene.Net.Analysis.Util.CharArrayIterator.SetText(char,int,int) call Lucene.Net.Analysis.Util.CharArrayIterator.SetText(char,int,int) call Lucene.Net.Analysis.Util.CharArrayIterator.SetText(char,int,int) call Lucene.Net.Analysis.Util.CharArrayIterator.SetText(char,int,int) call BreakIterator.SetText() call BreakIterator.SetText() call BreakIterator.SetText() call BreakIterator.SetText() call BreakIterator.SetText() new int int int private static private static >= + decl_stmt int = while > decl_stmt int = - decl_stmt int = + if <= break -= return - int int private private if == return while decl_stmt int = call BreakIterator.Current() call BreakIterator.Current() call BreakIterator.Current() call BreakIterator.Current() call BreakIterator.Current() if == return decl_stmt int = call BreakIterator.Next() call BreakIterator.Next() call BreakIterator.Next() call BreakIterator.Next() call BreakIterator.Next() if == return if return