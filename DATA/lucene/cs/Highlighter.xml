Lucene.Net.Search.Highlight System using System.Collections.Generic using System.IO using System.Linq using System.Text using Lucene.Net.Analysis using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Util using class Lucene.Net.Search.Highlight.Highlighter IEncoder int int IFragmenter IScorer IFormatter TokenStream public public decl_stmt Lucene.Net.Analysis.TokenStream = new return decl String public public decl_stmt System.String = if > return return TokenStream public public decl_stmt Lucene.Net.Analysis.TokenStream = new return decl TextFragment var public public = decl_stmt Lucene.Net.Search.Highlight.TextFragment = decl_stmt var = new < for = < ++ if != && > call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() return call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() var int var int var var var var String int var var var var public public decl_stmt var = new < decl_stmt var = new decl_stmt var = < decl_stmt var = < < decl_stmt var = new decl_stmt var = call Lucene.Net.Search.Highlight.IScorer.Init(TokenStream) call Lucene.Net.Search.Highlight.IScorer.Init(TokenStream) call Lucene.Net.Search.Highlight.IScorer.Init(TokenStream) call Lucene.Net.Search.Highlight.IScorer.Init(TokenStream) call Lucene.Net.Search.Highlight.IScorer.Init(TokenStream) if != = call IScorer.StartFragment() call IScorer.StartFragment() call IScorer.StartFragment() call IScorer.StartFragment() call IScorer.StartFragment() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() decl_stmt var = new try decl_stmt System.String decl_stmt int decl_stmt int decl_stmt int = call IFragmenter.Start() call IFragmenter.Start() call IFragmenter.Start() call IFragmenter.Start() call IFragmenter.Start() decl_stmt var = new for = && < = if > || > throw new + + + if > && call var.IsDistinct() call var.IsDistinct() call var.IsDistinct() call var.IsDistinct() call var.IsDistinct() = = = - decl_stmt System.String = call IFormatter.HighlightTerm() call IFormatter.HighlightTerm() call IFormatter.HighlightTerm() call IFormatter.HighlightTerm() call IFormatter.HighlightTerm() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() - call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() = call var.Clear() call var.Clear() call var.Clear() call var.Clear() call var.Clear() if call Lucene.Net.Search.Highlight.IFragmenter.IsNewFragment() call Lucene.Net.Search.Highlight.IFragmenter.IsNewFragment() call Lucene.Net.Search.Highlight.IFragmenter.IsNewFragment() call Lucene.Net.Search.Highlight.IFragmenter.IsNewFragment() call Lucene.Net.Search.Highlight.IFragmenter.IsNewFragment() = = = new call IScorer.StartFragment() call IScorer.StartFragment() call IScorer.StartFragment() call IScorer.StartFragment() call IScorer.StartFragment() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.AddToken() call var.AddToken() call var.AddToken() call var.AddToken() call var.AddToken() call Lucene.Net.Search.Highlight.IScorer.GetTokenScore() call Lucene.Net.Search.Highlight.IScorer.GetTokenScore() call Lucene.Net.Search.Highlight.IScorer.GetTokenScore() call Lucene.Net.Search.Highlight.IScorer.GetTokenScore() call Lucene.Net.Search.Highlight.IScorer.GetTokenScore() = if > = = = - decl_stmt var = call IFormatter.HighlightTerm() call IFormatter.HighlightTerm() call IFormatter.HighlightTerm() call IFormatter.HighlightTerm() call IFormatter.HighlightTerm() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() if > call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() - call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() = if < && <= call var.Append() call var.Append() call var.Append() call var.Append() call var.Append() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() call IEncoder.EncodeText() = foreach in = call var.InsertWithOverflow() call var.InsertWithOverflow() call var.InsertWithOverflow() call var.InsertWithOverflow() call var.InsertWithOverflow() decl_stmt var = new call var.Size() call var.Size() call var.Size() call var.Size() call var.Size() for = - >= -- = call var.Pop() call var.Pop() call var.Pop() call var.Pop() call var.Pop() if = call var.Where() call var.Where() call var.Where() call var.Where() call var.Where() != && > return finally if != try catch int int bool TextFragment TextFragment int int private private decl_stmt bool if > do = for = < ++ if == continue for = < ++ if == continue if == break decl_stmt Lucene.Net.Search.Highlight.TextFragment = decl_stmt Lucene.Net.Search.Highlight.TextFragment = decl_stmt int = decl_stmt int = decl_stmt int decl_stmt int if = = = = else if = = = = if != if > = = else = = call Lucene.Net.Search.Highlight.TextFragment.Merge(TextFragment) call Lucene.Net.Search.Highlight.TextFragment.Merge(TextFragment) call Lucene.Net.Search.Highlight.TextFragment.Merge(TextFragment) call Lucene.Net.Search.Highlight.TextFragment.Merge(TextFragment) call Lucene.Net.Search.Highlight.TextFragment.Merge(TextFragment) = = = decl string StringBuilder public public decl_stmt string = decl_stmt System.Text.StringBuilder = new for = < ++ if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) return = return = return = return =