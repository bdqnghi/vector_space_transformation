Lucene.Net.Expressions.JS System using Antlr.Runtime using Antlr.Runtime.Tree using class Lucene.Net.Expressions.JS.JavascriptParser super super Parser BitSet int int BitSet int int BitSet int int BitSet BitSet BitSet BitSet int int BitSet BitSet int BitSet int BitSet int BitSet int int BitSet BitSet BitSet BitSet BitSet BitSet int int BitSet BitSet int BitSet BitSet BitSet int BitSet BitSet BitSet BitSet int BitSet BitSet BitSet BitSet int BitSet BitSet int int int int BitSet BitSet BitSet int BitSet int BitSet int int BitSet BitSet int BitSet BitSet decl string int ITreeAdaptor int int BitSet int int BitSet BitSet BitSet BitSet BitSet BitSet BitSet BitSet int int BitSet BitSet int BitSet BitSet BitSet BitSet int int BitSet int int int public virtual public virtual return new return = return return string public override public override decl_stmt string if == = else if is = + + + + else if is = + + + + else if is switch case = break default: = + + + + break else = + + + + throw new public static public static if == return switch case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return case return + + case return + + case return + + case return + + case return default: return + + break CommonTree IToken var decl AstParserRuleReturnScope CommonTree public < public < decl_stmt var = new < = decl_stmt CommonTree = decl_stmt IToken = decl_stmt AstParserRuleReturnScope < decl_stmt CommonTree = try = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() = = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return CommonTree decl AstParserRuleReturnScope CommonTree CommonTree IToken decl AstParserRuleReturnScope IToken decl AstParserRuleReturnScope var int int public < public < decl_stmt var = new < = decl_stmt CommonTree decl_stmt IToken decl_stmt IToken = decl_stmt AstParserRuleReturnScope < decl_stmt AstParserRuleReturnScope < decl_stmt AstParserRuleReturnScope < decl_stmt CommonTree decl_stmt CommonTree = try = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() decl_stmt int = decl_stmt int = if == = switch case = = call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() = = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return decl AstParserRuleReturnScope IToken int CommonTree CommonTree decl AstParserRuleReturnScope var int public < public < decl_stmt var = new < = decl_stmt CommonTree decl_stmt IToken decl_stmt AstParserRuleReturnScope < decl_stmt AstParserRuleReturnScope < decl_stmt CommonTree try = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() while decl_stmt int = decl_stmt int = if == = switch case = = call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break default: goto goto break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return IToken decl AstParserRuleReturnScope int int CommonTree var CommonTree decl AstParserRuleReturnScope public < public < decl_stmt var = new < = decl_stmt CommonTree decl_stmt IToken decl_stmt AstParserRuleReturnScope < decl_stmt AstParserRuleReturnScope < decl_stmt CommonTree = try = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() while decl_stmt int = decl_stmt int = if == = switch case = = call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break default: goto goto break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return IToken var decl AstParserRuleReturnScope decl AstParserRuleReturnScope int CommonTree CommonTree int public < public < decl_stmt var = new < = try decl_stmt CommonTree = = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() while decl_stmt int = decl_stmt int = if == = switch case decl_stmt IToken = decl_stmt CommonTree = call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break default: goto goto break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return CommonTree IToken int var decl AstParserRuleReturnScope int CommonTree decl AstParserRuleReturnScope public < public < decl_stmt var = new < = try decl_stmt CommonTree = = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() while decl_stmt int = decl_stmt int = if == = switch case decl_stmt IToken = decl_stmt CommonTree = call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break default: goto goto break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return var CommonTree IToken int decl AstParserRuleReturnScope int decl AstParserRuleReturnScope CommonTree public < public < decl_stmt var = new < = try decl_stmt CommonTree = = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() while decl_stmt int = decl_stmt int = if == = switch case decl_stmt IToken = decl_stmt CommonTree = call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break default: goto goto break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return IToken var int decl AstParserRuleReturnScope CommonTree int MismatchedSetException CommonTree decl AstParserRuleReturnScope public < public < decl_stmt var = new < = decl_stmt CommonTree = try decl_stmt CommonTree = = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() while decl_stmt int = decl_stmt int = if == || == = switch case decl_stmt IToken = = if == || == = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = else decl_stmt MismatchedSetException = new throw decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break default: goto goto break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return IToken var decl AstParserRuleReturnScope CommonTree int MismatchedSetException int CommonTree decl AstParserRuleReturnScope public < public < decl_stmt var = new < = decl_stmt CommonTree = try decl_stmt CommonTree = = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() while decl_stmt int = decl_stmt int = if >= && <= = switch case decl_stmt IToken = = if >= && <= = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = else decl_stmt MismatchedSetException = new throw decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break default: goto goto break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return int var IToken CommonTree decl AstParserRuleReturnScope int MismatchedSetException CommonTree decl AstParserRuleReturnScope public < public < decl_stmt var = new < = decl_stmt CommonTree = try decl_stmt CommonTree = = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() while decl_stmt int = decl_stmt int = if >= && <= = switch case decl_stmt IToken = = if >= && <= = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = else decl_stmt MismatchedSetException = new throw decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break default: goto goto break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return IToken var CommonTree decl AstParserRuleReturnScope int decl AstParserRuleReturnScope MismatchedSetException int CommonTree public < public < decl_stmt var = new < = decl_stmt CommonTree = try decl_stmt CommonTree = = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() while decl_stmt int = decl_stmt int = if == || == = switch case decl_stmt IToken = = if == || == = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = else decl_stmt MismatchedSetException = new throw decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break default: goto goto break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return CommonTree CommonTree IToken int decl AstParserRuleReturnScope decl AstParserRuleReturnScope int var MismatchedSetException public < public < decl_stmt var = new < = decl_stmt CommonTree = try decl_stmt CommonTree = = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() while decl_stmt int = decl_stmt int = if == || >= && <= = switch case decl_stmt IToken = = if == || >= && <= = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = else decl_stmt MismatchedSetException = new throw decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break default: goto goto break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return CommonTree var decl AstParserRuleReturnScope decl AstParserRuleReturnScope decl AstParserRuleReturnScope decl AstParserRuleReturnScope int IToken CommonTree NoViableAltException public < public < decl_stmt var = new < = decl_stmt CommonTree = decl_stmt CommonTree = try decl_stmt int = switch case case case case case = break case = break case case case = break default: decl_stmt NoViableAltException = new throw switch case = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break case = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt IToken = decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break case = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt AstParserRuleReturnScope < = -- = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return CommonTree RewriteRuleTokenStream IToken RewriteRuleSubtreeStream CommonTree var IToken CommonTree IToken int CommonTree NoViableAltException public < public < decl_stmt var = new < = decl_stmt CommonTree = decl_stmt CommonTree = decl_stmt RewriteRuleTokenStream = new try decl_stmt int = switch case = break case = break case = break default: decl_stmt NoViableAltException = new throw switch case decl_stmt IToken = call RewriteRuleTokenStream.Add() call RewriteRuleTokenStream.Add() call RewriteRuleTokenStream.Add() call RewriteRuleTokenStream.Add() call RewriteRuleTokenStream.Add() = decl_stmt RewriteRuleSubtreeStream = new != : = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = break case = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt IToken = decl_stmt CommonTree = call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break case = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt IToken = decl_stmt CommonTree = call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return decl AstParserRuleReturnScope decl AstParserRuleReturnScope RewriteRuleSubtreeStream var int var CommonTree CommonTree IToken var int CommonTree int NoViableAltException int public < public < decl_stmt var = new < = decl_stmt CommonTree = decl_stmt CommonTree = decl_stmt var = new decl_stmt var = new try decl_stmt int = decl_stmt int = if == decl_stmt int = if == || >= && <= || >= && <= || == || >= && <= || >= && <= || >= && <= = else if == = else decl_stmt int = try decl_stmt NoViableAltException = new throw finally else if == || == || == || == = else decl_stmt NoViableAltException = new throw switch case = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break case decl_stmt IToken = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() decl_stmt AstParserRuleReturnScope < = -- call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() = decl_stmt RewriteRuleSubtreeStream = new != : = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt CommonTree = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() = call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.BecomeRoot() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call var.NextNode() call var.NextNode() call var.NextNode() call var.NextNode() call var.NextNode() if call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call var.NextTree() call var.NextTree() call var.NextTree() call var.NextTree() call var.NextTree() call var.Reset() call var.Reset() call var.Reset() call var.Reset() call var.Reset() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() = break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return decl AstParserRuleReturnScope CommonTree CommonTree var IToken IToken IToken int decl AstParserRuleReturnScope CommonTree CommonTree NoViableAltException public < public < decl_stmt var = new < = decl_stmt CommonTree = decl_stmt IToken = decl_stmt IToken = decl_stmt CommonTree = decl_stmt CommonTree = decl_stmt CommonTree = try decl_stmt int = switch case = break case case case = break case = break default: decl_stmt NoViableAltException = new throw switch case = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt IToken = = call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break case = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break case = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() = decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() = break = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return CommonTree CommonTree CommonTree decl AstParserRuleReturnScope IToken int IToken int int IToken CommonTree var int decl AstParserRuleReturnScope public < public < decl_stmt var = new < = decl_stmt CommonTree = decl_stmt IToken = decl_stmt IToken = decl_stmt IToken = decl_stmt CommonTree = decl_stmt CommonTree = decl_stmt CommonTree = try = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() = decl_stmt int = decl_stmt int = if == || == || == || == || >= && <= || == || >= && <= = switch case decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() while decl_stmt int = decl_stmt int = if == = switch case = decl_stmt AstParserRuleReturnScope < = -- call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() break default: goto goto break break = = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return CommonTree IToken CommonTree var MismatchedSetException public < public < decl_stmt var = new < = decl_stmt CommonTree = try decl_stmt CommonTree = = call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() call ITreeAdaptor.Nil() decl_stmt IToken = if == || == || == call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.AddChild() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() call ITreeAdaptor.Create() = else decl_stmt MismatchedSetException = new throw = - = call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.RulePostProcessing() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() call ITreeAdaptor.SetTokenBoundaries() catch = call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() call ITreeAdaptor.ErrorNode() - return