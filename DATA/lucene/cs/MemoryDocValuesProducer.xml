Lucene.Net.Codecs.Memory System using System.Collections.Generic using System.Diagnostics using System.IO using Lucene.Net.Codecs.Sep using Lucene.Net.Index using Lucene.Net.Store using Lucene.Net.Support using Lucene.Net.Util using Lucene.Net.Util.Fst using Lucene.Net.Util.Packed using Lucene.Net.Util.Fst.Util class Lucene.Net.Codecs.Memory.MemoryDocValuesProducer super super DocValuesProducer int int byte byte byte byte decl IDictionary decl IDictionary decl IDictionary int AtomicLong decl IDictionary int byte byte decl IDictionary byte int IndexInput int decl IDictionary int decl IDictionary var int int private private decl_stmt int = while != - decl_stmt int = if == decl_stmt var = new = = if != - = else = = switch case case case case break default: throw new + + + if != = = else if == decl_stmt var = new = = = if != - = else = = = if != = = = else if == decl_stmt var = new = = = else throw new + + + = NumericDocValues public override public override lock decl_stmt NumericDocValues = if == = = return public override public override return call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() public override public override if >= int var long int var var var int var int NumericEntry long int private private decl_stmt NumericEntry = call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() + switch case decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() if > throw new + decl_stmt var = new for = < ++ = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt var = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() + call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() return new case decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt var = new call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() return case decl_stmt var = new call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call IndexInput.ReadBytes() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() return new case decl_stmt long = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() decl_stmt long = call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() call IndexInput.ReadLong() decl_stmt int = call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() call IndexInput.ReadVInt() decl_stmt var = new call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() return new default: throw new public override public override return int public override public override return public override public override return + * BinaryDocValues public override public override lock decl_stmt BinaryDocValues = if == = = return BinaryEntry var var int var private private decl_stmt BinaryEntry = call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() decl_stmt var = new call var.Copy() call var.Copy() call var.Copy() call var.Copy() call var.Copy() decl_stmt var = call var.Freeze() call var.Freeze() call var.Freeze() call var.Freeze() call var.Freeze() if == decl_stmt int = call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() return new else call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() + decl_stmt var = new call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() + call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() call var.RamBytesUsed() return new public override public override * long var var public override public override decl_stmt var = == : - decl_stmt var = - var var decl FST var var var FSTEntry var var public override public override decl_stmt FSTEntry = if == return decl_stmt Lucene.Net.Util.Fst.FST < ? lock = if == call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() = new < ? call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() = decl_stmt var = decl_stmt var = decl_stmt var = decl_stmt var = new < ? decl_stmt var = new < ? decl_stmt var = new decl_stmt var = new < ? return new public override public override return int IntsRef public override public override try = decl_stmt Lucene.Net.Util.IntsRef = = new = = catch throw new var public override public override try decl_stmt var = if == return - - else if call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() return int else return int - - catch throw new return int public override public override return new var var var decl FST var var var var var var var public override public override decl_stmt var = if == return decl_stmt Lucene.Net.Util.Fst.FST < ? lock = if == call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() call IndexInput.Seek() = new < ? call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() = decl_stmt var = decl_stmt var = decl_stmt var = decl_stmt var = new < ? decl_stmt var = new < ? decl_stmt var = new decl_stmt var = new < ? decl_stmt var = new decl_stmt var = new return new public override public override if return else += return = IntsRef public override public override try = decl_stmt Lucene.Net.Util.IntsRef = = new = = catch throw new var public override public override try decl_stmt var = if == return - - else if call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() call var.Input() return else return - - catch throw new return public override public override return new Bits var var private private if == - return new else decl_stmt Lucene.Net.Spatial.Util.Bits lock = if == decl_stmt var = call var.Seek() call var.Seek() call var.Seek() call var.Seek() call var.Seek() == decl_stmt var = new int >> for = < ++ = call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() call var.ReadLong() = new = return var var public override public override switch case return case return case decl_stmt var = return case decl_stmt var = return default: throw new protected override protected override call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() call IndexInput.Dispose() var public override public override decl_stmt var = return == : return public override public override if == return else if return else return public override public override return != IntsRef public override public override = decl_stmt Lucene.Net.Util.IntsRef = = new = = public override public override return public override public override return public override public override throw new public override public override throw new public override public override throw new public override public override throw new