Lucene.Net.Search System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Index using Lucene.Net.Support using System.Threading.Tasks using Lucene.Net.Index.AtomicReaderContext Lucene.Net.Search.Similarities.DefaultSimilarity Documents.Document Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexReaderContext Lucene.Net.Index.MultiFields Lucene.Net.Store.NIOFSDirectory Lucene.Net.Index.ReaderUtil Lucene.Net.Search.Similarities.Similarity Lucene.Net.Index.StoredFieldVisitor Lucene.Net.Index.Term Lucene.Net.Index.TermContext Lucene.Net.Index.Terms class Lucene.Net.Search.IndexSearcher IndexReader IndexReaderContext Similarity Similarity decl LeafSlice decl IList TaskScheduler return decl LeafSlice protected internal virtual protected internal virtual < decl_stmt LeafSlice = new for = < ++ = new return return public virtual public virtual return call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) public virtual public virtual call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) public virtual public virtual < return call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) call Lucene.Net.Index.IndexReader.Document(int) public public < return = return protected internal virtual protected internal virtual return == : new public virtual public virtual return public virtual public virtual return public virtual public virtual return public virtual public virtual return public virtual public virtual public virtual public virtual public virtual public virtual return public virtual public virtual return public virtual public virtual if != && ! is throw new + return public virtual public virtual return public virtual public virtual if != && ! is throw new + return public virtual public virtual if != && ! is throw new + return int var ReentrantLock HitQueue decl ExecutionHelper int float protected internal virtual protected internal virtual decl_stmt int = if == = if != && >= throw new + + + = if == return else decl_stmt Lucene.Net.Search.HitQueue = new decl_stmt Lucene.Net.Support.ReentrantLock = new decl_stmt ExecutionHelper < = new < for = < ++ call decl ExecutionHelper.Submit() call decl ExecutionHelper.Submit() call decl ExecutionHelper.Submit() call decl ExecutionHelper.Submit() call decl ExecutionHelper.Submit() new decl_stmt int = decl_stmt float = foreach in if != += = decl_stmt var = new call HitQueue.Size() call HitQueue.Size() call HitQueue.Size() call HitQueue.Size() call HitQueue.Size() for = call HitQueue.Size() call HitQueue.Size() call HitQueue.Size() call HitQueue.Size() call HitQueue.Size() - >= -- = call HitQueue.Pop() call HitQueue.Pop() call HitQueue.Pop() call HitQueue.Pop() call HitQueue.Pop() return new TopScoreDocCollector int protected internal virtual protected internal virtual < decl_stmt int = if == = = decl_stmt Lucene.Net.Search.TopScoreDocCollector = ! return call TopScoreDocCollector.TopDocs() call TopScoreDocCollector.TopDocs() call TopScoreDocCollector.TopDocs() call TopScoreDocCollector.TopDocs() call TopScoreDocCollector.TopDocs() protected internal virtual protected internal virtual return int TopFieldCollector ReentrantLock TopFieldDocs decl ExecutionHelper int float protected internal virtual protected internal virtual if == throw new decl_stmt int = if == = = if == return else decl_stmt Lucene.Net.Search.TopFieldCollector = decl_stmt Lucene.Net.Support.ReentrantLock = new decl_stmt ExecutionHelper < = new < for = < ++ call decl ExecutionHelper.Submit() call decl ExecutionHelper.Submit() call decl ExecutionHelper.Submit() call decl ExecutionHelper.Submit() call decl ExecutionHelper.Submit() new decl_stmt int = decl_stmt float = foreach in if != += = decl_stmt TopFieldDocs = call TopFieldCollector.TopDocs() call TopFieldCollector.TopDocs() call TopFieldCollector.TopDocs() call TopFieldCollector.TopDocs() call TopFieldCollector.TopDocs() return new TopFieldCollector int protected internal virtual protected internal virtual < decl_stmt int = if == = = decl_stmt Lucene.Net.Search.TopFieldCollector = ! return call TopFieldCollector.TopDocs() call TopFieldCollector.TopDocs() call TopFieldCollector.TopDocs() call TopFieldCollector.TopDocs() call TopFieldCollector.TopDocs() BulkScorer protected internal virtual protected internal virtual < foreach in try = catch continue decl_stmt Lucene.Net.Search.BulkScorer = ! if != try call BulkScorer.Score() call BulkScorer.Score() call BulkScorer.Score() call BulkScorer.Score() call BulkScorer.Score() catch Query public virtual public virtual decl_stmt Lucene.Net.Search.Query = for = call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) != = call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) = return public virtual public virtual return int AtomicReaderContext int protected internal virtual protected internal virtual decl_stmt int = decl_stmt Lucene.Net.Index.AtomicReaderContext = decl_stmt int = - return float Weight float public virtual public virtual = decl_stmt Lucene.Net.Search.Weight = decl_stmt float = decl_stmt float = if || = call Weight.Normalize() call Weight.Normalize() call Weight.Normalize() call Weight.Normalize() call Weight.Normalize() return return TopDocs ScoreDoc decl ScoreDoc public public decl_stmt Lucene.Net.Search.TopDocs = decl_stmt Lucene.Net.Search.ScoreDoc = try for = < ++ decl_stmt Lucene.Net.Search.ScoreDoc = if == break finally return TopFieldDocs int AtomicReaderContext public public == decl_stmt TopFieldDocs = || try decl_stmt Lucene.Net.Index.AtomicReaderContext = decl_stmt int = = = foreach in = - = - if && > = finally return return return public public public public < ++ public public throw new public public if > try = finally -- return public < public < return return public override public override return + + + + public virtual public virtual return new long long Terms int public virtual public virtual decl_stmt int decl_stmt long decl_stmt long != decl_stmt Lucene.Net.Index.Terms = if == = = = else = = = return new