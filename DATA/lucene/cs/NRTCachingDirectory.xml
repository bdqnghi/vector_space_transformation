Lucene.Net.Store System using System.Collections.Generic using System.Linq using Lucene.Net.Index.IndexFileNames Lucene.Net.Util.IOUtils class Lucene.Net.Store.NRTCachingDirectory super super Directory bool RAMDirectory long Directory object long return return = return public override public override return call Directory.MakeLock() call Directory.MakeLock() call Directory.MakeLock() call Directory.MakeLock() call Directory.MakeLock() public override public override call Directory.ClearLock() call Directory.ClearLock() call Directory.ClearLock() call Directory.ClearLock() call Directory.ClearLock() public override public override return + + + / / + + / / + decl ISet public override public override lock decl_stmt System.Collections.Generic.ISet < = new < foreach in call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.ListAll() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() try foreach in call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() catch if == throw return call decl ISet.ToArray() call decl ISet.ToArray() call decl ISet.ToArray() call decl ISet.ToArray() call decl ISet.ToArray() public virtual public virtual return call Lucene.Net.Store.RAMDirectory.SizeInBytes() call Lucene.Net.Store.RAMDirectory.SizeInBytes() call Lucene.Net.Store.RAMDirectory.SizeInBytes() call Lucene.Net.Store.RAMDirectory.SizeInBytes() call Lucene.Net.Store.RAMDirectory.SizeInBytes() public override public override lock return call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) || call Directory.FileExists() call Directory.FileExists() call Directory.FileExists() call Directory.FileExists() call Directory.FileExists() public override public override lock if + if call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) else call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() public override public override lock if call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) return call RAMDirectory.FileLength() call RAMDirectory.FileLength() call RAMDirectory.FileLength() call RAMDirectory.FileLength() call RAMDirectory.FileLength() else return call Directory.FileLength() call Directory.FileLength() call Directory.FileLength() call Directory.FileLength() call Directory.FileLength() public virtual public virtual return call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.ListAll() public override public override if + if if try call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() call Directory.DeleteFile() catch return call Lucene.Net.Store.RAMDirectory.CreateOutput(string,IOContext) call Lucene.Net.Store.RAMDirectory.CreateOutput(string,IOContext) call Lucene.Net.Store.RAMDirectory.CreateOutput(string,IOContext) call Lucene.Net.Store.RAMDirectory.CreateOutput(string,IOContext) call Lucene.Net.Store.RAMDirectory.CreateOutput(string,IOContext) else try call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) catch return call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() public override public override < if + foreach in call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() public override public override lock if + if call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) if return call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) else return call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() call Directory.OpenInput() public override public override lock if + if call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) if return call RAMDirectory.CreateSlicer() call RAMDirectory.CreateSlicer() call RAMDirectory.CreateSlicer() call RAMDirectory.CreateSlicer() call RAMDirectory.CreateSlicer() else return call Lucene.Net.Store.Directory.CreateSlicer(string,IOContext) call Lucene.Net.Store.Directory.CreateSlicer(string,IOContext) call Lucene.Net.Store.Directory.CreateSlicer(string,IOContext) call Lucene.Net.Store.Directory.CreateSlicer(string,IOContext) call Lucene.Net.Store.Directory.CreateSlicer(string,IOContext) public override public override foreach in call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.ListAll() call Lucene.Net.Store.RAMDirectory.Dispose() call Lucene.Net.Store.RAMDirectory.Dispose() call Lucene.Net.Store.RAMDirectory.Dispose() call Lucene.Net.Store.RAMDirectory.Dispose() call Lucene.Net.Store.RAMDirectory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() long protected internal virtual protected internal virtual decl_stmt long = if != = else if != = return ! && <= && + call Lucene.Net.Store.RAMDirectory.SizeInBytes() call Lucene.Net.Store.RAMDirectory.SizeInBytes() call Lucene.Net.Store.RAMDirectory.SizeInBytes() call Lucene.Net.Store.RAMDirectory.SizeInBytes() call Lucene.Net.Store.RAMDirectory.SizeInBytes() <= IndexOutput IndexInput IOContext private private lock if + if ! call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) call Lucene.Net.Store.RAMDirectory.FileExists(string) return decl_stmt Lucene.Net.Store.IOContext = decl_stmt IndexOutput = call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() call Directory.CreateOutput() decl_stmt Lucene.Net.Store.IndexInput = try = call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call Lucene.Net.Store.RAMDirectory.OpenInput(string,IOContext) call IndexOutput.CopyBytes() call IndexOutput.CopyBytes() call IndexOutput.CopyBytes() call IndexOutput.CopyBytes() call IndexOutput.CopyBytes() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() call IndexInput.Length() finally lock call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string) call Lucene.Net.Store.RAMDirectory.DeleteFile(string)