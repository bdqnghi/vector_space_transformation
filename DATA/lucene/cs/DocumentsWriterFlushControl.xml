Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Threading using Lucene.Net.Support using Lucene.Net.Util.InfoStream Lucene.Net.Index.DocumentsWriterPerThreadPool.ThreadState class Lucene.Net.Index.DocumentsWriterFlushControl DocumentsWriterPerThreadPool int decl Queue long decl IdentityHashMap long bool InfoStream LiveIndexWriterConfig AtomicBoolean DocumentsWriterStallControl BufferedUpdatesStream long decl IList long int long FlushPolicy DocumentsWriter long double long bool decl LinkedList public public lock return public public lock return public public lock return + double private private decl_stmt double = return != * * * : long double long long private private decl_stmt double = if != = decl_stmt long = + decl_stmt long = * * decl_stmt long = * + + + * + * if < >> <= + + + + + + + + + + + + + + + + return long private private decl_stmt long = - += if += else += private private = = = = return DocumentsWriterPerThread bool internal internal lock try if ! if call Lucene.Net.Index.FlushPolicy.OnUpdate(DocumentsWriterFlushControl,ThreadState) call Lucene.Net.Index.FlushPolicy.OnUpdate(DocumentsWriterFlushControl,ThreadState) call Lucene.Net.Index.FlushPolicy.OnUpdate(DocumentsWriterFlushControl,ThreadState) call Lucene.Net.Index.FlushPolicy.OnUpdate(DocumentsWriterFlushControl,ThreadState) call Lucene.Net.Index.FlushPolicy.OnUpdate(DocumentsWriterFlushControl,ThreadState) else call FlushPolicy.OnInsert() call FlushPolicy.OnInsert() call FlushPolicy.OnInsert() call FlushPolicy.OnInsert() call FlushPolicy.OnInsert() if ! && > = decl_stmt Lucene.Net.Index.DocumentsWriterPerThread if if = else = else = return finally decl_stmt bool = && private private if ++ else = return long internal internal lock call decl IdentityHashMap.ContainsKey() call decl IdentityHashMap.ContainsKey() call decl IdentityHashMap.ContainsKey() call decl IdentityHashMap.ContainsKey() call decl IdentityHashMap.ContainsKey() try decl_stmt long ? = call decl IdentityHashMap.Remove() call decl IdentityHashMap.Remove() call decl IdentityHashMap.Remove() call decl IdentityHashMap.Remove() call decl IdentityHashMap.Remove() -= long call Lucene.Net.Index.DocumentsWriterPerThreadPool.Recycle(DocumentsWriterPerThread) call Lucene.Net.Index.DocumentsWriterPerThreadPool.Recycle(DocumentsWriterPerThread) call Lucene.Net.Index.DocumentsWriterPerThreadPool.Recycle(DocumentsWriterPerThread) call Lucene.Net.Index.DocumentsWriterPerThreadPool.Recycle(DocumentsWriterPerThread) call Lucene.Net.Index.DocumentsWriterPerThreadPool.Recycle(DocumentsWriterPerThread) finally try finally bool long private private decl_stmt long = decl_stmt bool = + > && < && ! call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) call Lucene.Net.Index.DocumentsWriterStallControl.UpdateStalled(bool) return public public lock while != try catch throw new long lock ! if > = decl_stmt long = += -= ++ internal internal lock try if -= else -= call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() finally internal internal lock return : DocumentsWriterPerThread long private private try decl_stmt Lucene.Net.Index.DocumentsWriterPerThread decl_stmt long = = call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() -- call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() call decl LinkedList.AddLast() new finally DocumentsWriterPerThread long private private try if try if decl_stmt Lucene.Net.Index.DocumentsWriterPerThread decl_stmt long = = call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() ! call decl IdentityHashMap.ContainsKey() call decl IdentityHashMap.ContainsKey() call decl IdentityHashMap.ContainsKey() call decl IdentityHashMap.ContainsKey() call decl IdentityHashMap.ContainsKey() = -- return finally return finally public override public override return + + + + int bool ThreadState DocumentsWriterPerThread int DocumentsWriterPerThread internal internal decl_stmt int decl_stmt bool lock decl_stmt Lucene.Net.Index.DocumentsWriterPerThread if > && = call decl Queue.Dequeue() call decl Queue.Dequeue() call decl Queue.Dequeue() call decl Queue.Dequeue() call decl Queue.Dequeue() != return = = if > && ! decl_stmt int = for = < && && ++ decl_stmt ThreadState = call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) if decl_stmt Lucene.Net.Index.DocumentsWriterPerThread = if != return return internal internal lock if ! = call DocumentsWriterPerThreadPool.DeactivateUnreleasedStates() call DocumentsWriterPerThreadPool.DeactivateUnreleasedStates() call DocumentsWriterPerThreadPool.DeactivateUnreleasedStates() call DocumentsWriterPerThreadPool.DeactivateUnreleasedStates() call DocumentsWriterPerThreadPool.DeactivateUnreleasedStates() public < public < return private < private < return new return public public return public public if < = ++ return return public public throw new internal internal lock call FlushPolicy.OnDelete() call FlushPolicy.OnDelete() call FlushPolicy.OnDelete() call FlushPolicy.OnDelete() call FlushPolicy.OnDelete() return call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() + call Lucene.Net.Index.BufferedUpdatesStream.NumTerms() call Lucene.Net.Index.BufferedUpdatesStream.NumTerms() call Lucene.Net.Index.BufferedUpdatesStream.NumTerms() call Lucene.Net.Index.BufferedUpdatesStream.NumTerms() call Lucene.Net.Index.BufferedUpdatesStream.NumTerms() return call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() call DocumentsWriter.DeleteQueue() + call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() call Lucene.Net.Index.BufferedUpdatesStream.BytesUsed() internal internal lock return return call AtomicBoolean.GetAndSet() call AtomicBoolean.GetAndSet() call AtomicBoolean.GetAndSet() call AtomicBoolean.GetAndSet() call AtomicBoolean.GetAndSet() public public call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) call Lucene.Net.Support.AtomicBoolean.Set(bool) internal internal return ThreadState bool internal internal decl_stmt ThreadState = call DocumentsWriterPerThreadPool.GetAndLock() call DocumentsWriterPerThreadPool.GetAndLock() call DocumentsWriterPerThreadPool.GetAndLock() call DocumentsWriterPerThreadPool.GetAndLock() call DocumentsWriterPerThreadPool.GetAndLock() decl_stmt bool = try if && != = return finally if ! call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() DocumentsWriterDeleteQueue DocumentsWriterDeleteQueue int ThreadState internal internal decl_stmt Lucene.Net.Index.DocumentsWriterDeleteQueue lock ! == + = = decl_stmt Lucene.Net.Index.DocumentsWriterDeleteQueue = new + = decl_stmt int = for = < ++ decl_stmt ThreadState = call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() try if ! if && call Lucene.Net.Index.DocumentsWriterPerThreadPool.DeactivateThreadState(ThreadState) call Lucene.Net.Index.DocumentsWriterPerThreadPool.DeactivateThreadState(ThreadState) call Lucene.Net.Index.DocumentsWriterPerThreadPool.DeactivateThreadState(ThreadState) call Lucene.Net.Index.DocumentsWriterPerThreadPool.DeactivateThreadState(ThreadState) call Lucene.Net.Index.DocumentsWriterPerThreadPool.DeactivateThreadState(ThreadState) continue == || == + + + + + + + if != continue finally call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() lock foreach in call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() int ThreadState private private decl_stmt int = for = < ++ decl_stmt ThreadState = call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call Lucene.Net.Index.DocumentsWriterPerThreadPool.GetThreadState(int) call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() call ThreadState.Lock() try ! || == + + + : finally call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() call ThreadState.Unlock() return DocumentsWriterPerThread DocumentsWriterPerThread internal internal if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + decl_stmt Lucene.Net.Index.DocumentsWriterPerThread = != if > lock if ! = decl_stmt Lucene.Net.Index.DocumentsWriterPerThread = != == call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() else call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() call Lucene.Net.Index.DocumentsWriterPerThreadPool.Reset() var var BlockedFlush private private decl_stmt var = while != decl_stmt var = decl_stmt BlockedFlush = if == call decl LinkedList.Remove() call decl LinkedList.Remove() call decl LinkedList.Remove() call decl LinkedList.Remove() call decl LinkedList.Remove() ! call decl IdentityHashMap.ContainsKey() call decl IdentityHashMap.ContainsKey() call decl IdentityHashMap.ContainsKey() call decl IdentityHashMap.ContainsKey() call decl IdentityHashMap.ContainsKey() = call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() = internal internal lock == == try if > == finally = internal internal foreach in == return internal internal < lock try finally = internal internal < lock try foreach in try call Lucene.Net.Index.DocumentsWriter.SubtractFlushedNumDocs(int) call Lucene.Net.Index.DocumentsWriter.SubtractFlushedNumDocs(int) call Lucene.Net.Index.DocumentsWriter.SubtractFlushedNumDocs(int) call Lucene.Net.Index.DocumentsWriter.SubtractFlushedNumDocs(int) call Lucene.Net.Index.DocumentsWriter.SubtractFlushedNumDocs(int) catch finally foreach in try = call Lucene.Net.Index.DocumentsWriter.SubtractFlushedNumDocs(int) call Lucene.Net.Index.DocumentsWriter.SubtractFlushedNumDocs(int) call Lucene.Net.Index.DocumentsWriter.SubtractFlushedNumDocs(int) call Lucene.Net.Index.DocumentsWriter.SubtractFlushedNumDocs(int) call Lucene.Net.Index.DocumentsWriter.SubtractFlushedNumDocs(int) catch finally finally call decl Queue.Clear() call decl Queue.Clear() call decl Queue.Clear() call decl Queue.Clear() call decl Queue.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() call decl LinkedList.Clear() lock return internal internal lock return internal internal lock return internal internal if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + + + + call Lucene.Net.Index.DocumentsWriterStallControl.WaitIfStalled() call Lucene.Net.Index.DocumentsWriterStallControl.WaitIfStalled() call Lucene.Net.Index.DocumentsWriterStallControl.WaitIfStalled() call Lucene.Net.Index.DocumentsWriterStallControl.WaitIfStalled() call Lucene.Net.Index.DocumentsWriterStallControl.WaitIfStalled() internal internal return call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() call DocumentsWriterStallControl.AnyStalledThreads() return