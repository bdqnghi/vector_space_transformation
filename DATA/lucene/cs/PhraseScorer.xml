Lucene.Net.Search System using Lucene.Net.Index.TermPositions class Lucene.Net.Search.PhraseScorer super super Scorer PhraseQueue bool Weight decl byte float PhrasePositions float bool public override public override return public override public override if = else if = call float.Next() call float.Next() call float.Next() call float.Next() call float.Next() if ! = return private private while while && < = call Lucene.Net.Search.PhrasePositions.SkipTo(int) call Lucene.Net.Search.PhrasePositions.SkipTo(int) call Lucene.Net.Search.PhrasePositions.SkipTo(int) call Lucene.Net.Search.PhrasePositions.SkipTo(int) call Lucene.Net.Search.PhrasePositions.SkipTo(int) if = if == = call float.Next() call float.Next() call float.Next() call float.Next() call float.Next() else return return float public override public override decl_stmt float = * return == : * public override public override = for = && != = = if if ! = return public public return private private for = && != = = if private private call PhraseQueue.Clear() call PhraseQueue.Clear() call PhraseQueue.Clear() call PhraseQueue.Clear() call PhraseQueue.Clear() for = != = call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() call PhraseQueue.Add() PhrasePositions protected internal protected internal = = while call PhraseQueue.Top() call PhraseQueue.Top() call PhraseQueue.Top() call PhraseQueue.Top() call PhraseQueue.Top() != decl_stmt Lucene.Net.Search.PhrasePositions = call PhraseQueue.Pop() call PhraseQueue.Pop() call PhraseQueue.Pop() call PhraseQueue.Pop() call PhraseQueue.Pop() if != = else = = = protected internal protected internal = = = = public override public override return + +