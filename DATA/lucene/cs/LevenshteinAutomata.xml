Lucene.Net.Util.Automaton Lucene.Net.Support using System using System.Collections.Generic using System.Diagnostics using class Lucene.Net.Util.Automaton.LevenshteinAutomata decl int decl int decl int int int int decl int decl ParametricDescription int decl int private static private static decl_stmt int = decl_stmt int = new for = = = < += ++ = = return Automaton int int int ParametricDescription int int decl State int int public virtual public virtual if == return if >= return decl_stmt int = * + decl_stmt ParametricDescription = decl_stmt Lucene.Net.Util.Automaton.State = new call ParametricDescription.Size() call ParametricDescription.Size() call ParametricDescription.Size() call ParametricDescription.Size() call ParametricDescription.Size() for = < ++ = new = = call ParametricDescription.IsAccept() call ParametricDescription.IsAccept() call ParametricDescription.IsAccept() call ParametricDescription.IsAccept() call ParametricDescription.IsAccept() for = < ++ decl_stmt int = call ParametricDescription.GetPosition() call ParametricDescription.GetPosition() call ParametricDescription.GetPosition() call ParametricDescription.GetPosition() call ParametricDescription.GetPosition() if < continue decl_stmt int = + - for = < ++ decl_stmt int = decl_stmt int = decl_stmt int = call ParametricDescription.Transition() call ParametricDescription.Transition() call ParametricDescription.Transition() call ParametricDescription.Transition() call ParametricDescription.Transition() if >= new decl_stmt int = call ParametricDescription.Transition() call ParametricDescription.Transition() call ParametricDescription.Transition() call ParametricDescription.Transition() call ParametricDescription.Transition() if >= for = < ++ new decl_stmt Lucene.Net.Util.Automaton.Automaton = new = call Lucene.Net.Util.Automaton.Automaton.Reduce() call Lucene.Net.Util.Automaton.Automaton.Reduce() call Lucene.Net.Util.Automaton.Automaton.Reduce() call Lucene.Net.Util.Automaton.Automaton.Reduce() call Lucene.Net.Util.Automaton.Automaton.Reduce() return int internal virtual internal virtual decl_stmt int = for = < ++ <<= if == |= return internal virtual internal virtual return * + int int internal virtual internal virtual decl_stmt int = / + decl_stmt int = + >= return - + <= internal virtual internal virtual return + int long int int protected internal virtual protected internal virtual decl_stmt long = * decl_stmt int = >> decl_stmt int = & if + <= return >> & - else decl_stmt int = - return >> & - + + & - - <<