Lucene.Net.Search.Suggest.Analyzing System using System.Collections.Generic using System.Diagnostics using System.IO using Lucene.Net.Analysis using Lucene.Net.Analysis.Tokenattributes using Lucene.Net.Codecs using Lucene.Net.Documents using Lucene.Net.Index using Lucene.Net.Store using Lucene.Net.Support using Lucene.Net.Util using Lucene.Net.Util.Fst using Lucene.Net.Store.Directory Lucene.Net.Util.Version Lucene.Net.Util.Fst.Util class Lucene.Net.Search.Suggest.Analyzing.FreeTextSuggester super super Lookup long int int long Analyzer sbyte decl FST sbyte string Analyzer double decl IComparer int int public override public override if == return return call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() call decl FST.SizeInBytes() int public virtual public virtual = = = = = = decl_stmt int = if != return = - if != return = = - = = - return private private if == return else return new protected override protected override return ShingleFilter protected override protected override decl_stmt Lucene.Net.Analysis.Shingle.ShingleFilter = new = char return new public override public override Terms BytesRef IndexWriter IndexWriterConfig int bool TermsEnum BytesRef Document decl Builder Random decl Outputs Field string File IndexReader var var File IntsRef Directory public virtual public virtual if throw new if throw new decl_stmt string = decl_stmt var = decl_stmt System.IO.File = decl_stmt System.Random = new while = new + + call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) if call File.mkdir() call File.mkdir() call File.mkdir() call File.mkdir() call File.mkdir() break decl_stmt Lucene.Net.Store.Directory = decl_stmt Lucene.Net.Index.IndexWriterConfig = new = = decl_stmt Lucene.Net.Index.IndexWriter = new decl_stmt var = new = = call var.Freeze() call var.Freeze() call var.Freeze() call var.Freeze() call var.Freeze() decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.Field = new call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) = decl_stmt Lucene.Net.Index.IndexReader = decl_stmt bool = = try while decl_stmt Lucene.Net.Util.BytesRef = if == break = call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call BytesRef.Utf8ToString() call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) call Lucene.Net.Index.IndexWriter.AddDocument(IEnumerable,Analyzer) ++ = decl_stmt Lucene.Net.Index.Terms = if == throw new decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() decl_stmt Lucene.Net.Util.Fst.Outputs < ? = decl_stmt Lucene.Net.Util.Fst.Builder < ? = new < ? decl_stmt Lucene.Net.Util.IntsRef = new while decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() if == break decl_stmt int = if > throw new + + + + + if == += call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call decl Builder.Add() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() = call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() call decl Builder.Finish() if == throw new = finally try if else finally foreach in call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() decl_stmt System.IO.File = new if call System.IO.File.Delete(String) call System.IO.File.Delete(String) call System.IO.File.Delete(String) call System.IO.File.Delete(String) call System.IO.File.Delete(String) == throw new + if call System.IO.File.Delete(String) call System.IO.File.Delete(String) call System.IO.File.Delete(String) call System.IO.File.Delete(String) call System.IO.File.Delete(String) == throw new + call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() public override public override call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() call decl FST.Save() return int var public override public override = decl_stmt var = sbyte if != throw new + + + decl_stmt int = if != throw new + + + = = new < ? return public override < public override < return public virtual < public virtual < return public override < public override < < return return int private private decl_stmt int = for = < ++ if + == ++ return int decl Util BytesRef decl IList double var decl Util var OffsetAttribute PositionLengthAttribute TermToBytesRefAttribute decl Util decl Util long TokenStream BytesRef int bool BytesRef CharsRef bool var decl Fst PositionIncrementAttribute BytesRef BytesRef var long long decl Fst int public virtual < public virtual < < if != throw new decl_stmt Lucene.Net.Analysis.TokenStream = call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) call Lucene.Net.Analysis.Analyzer.TokenStream(string,TextReader) try decl_stmt Lucene.Net.Analysis.Tokenattributes.TermToBytesRefAttribute = < decl_stmt Lucene.Net.Analysis.Tokenattributes.OffsetAttribute = < decl_stmt Lucene.Net.Analysis.Tokenattributes.PositionLengthAttribute = < decl_stmt Lucene.Net.Analysis.Tokenattributes.PositionIncrementAttribute = < call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() call Lucene.Net.Analysis.TokenStream.Reset() decl_stmt var = new decl_stmt Lucene.Net.Util.BytesRef = decl_stmt int = - decl_stmt bool = while call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TokenStream.IncrementToken() call TermToBytesRefAttribute.FillBytesRef() call TermToBytesRefAttribute.FillBytesRef() call TermToBytesRefAttribute.FillBytesRef() call TermToBytesRefAttribute.FillBytesRef() call TermToBytesRefAttribute.FillBytesRef() |= > decl_stmt int = <= if != throw new + + + + + = call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.EndOffset() - = call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() call Lucene.Net.Analysis.TokenStream.End() if ! throw new decl_stmt int = decl_stmt bool = call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.EndOffset() call Lucene.Net.Analysis.Tokenattributes.OffsetAttribute.EndOffset() > || > if for = - > -- decl_stmt Lucene.Net.Util.BytesRef = - if == continue call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) call Lucene.Net.Util.BytesRef.Grow(int) + = ++ = = new decl_stmt var = new < ? decl_stmt var = decl_stmt double = decl_stmt System.Collections.Generic.IList < = new < decl_stmt var = new < for = - >= -- decl_stmt Lucene.Net.Util.BytesRef = if == || == && > continue if > && <= break decl_stmt long ? = = if == *= continue decl_stmt long = decl_stmt Lucene.Net.Util.BytesRef = for = - >= -- if + == decl_stmt Lucene.Net.Util.BytesRef = new decl_stmt long ? = new != = = new + + - - break decl_stmt Lucene.Net.Util.BytesRef if == = else = == decl_stmt Lucene.Net.Util.CharsRef = new decl_stmt Lucene.Net.Util.Fst.Util < ? = try decl_stmt Lucene.Net.Util.Fst.Util < ? = new + call decl Fst.AddStartPaths() call decl Fst.AddStartPaths() call decl Fst.AddStartPaths() call decl Fst.AddStartPaths() call decl Fst.AddStartPaths() new = call decl Fst.Search() call decl Fst.Search() call decl Fst.Search() call decl Fst.Search() call decl Fst.Search() catch throw new decl_stmt int = decl_stmt Lucene.Net.Util.BytesRef = new foreach < ? in = call Lucene.Net.Util.BytesRef.Append(BytesRef) call Lucene.Net.Util.BytesRef.Append(BytesRef) call Lucene.Net.Util.BytesRef.Append(BytesRef) call Lucene.Net.Util.BytesRef.Append(BytesRef) call Lucene.Net.Util.BytesRef.Append(BytesRef) decl_stmt Lucene.Net.Util.BytesRef = for = - >= -- if + == - - > = new + + - - break if call var.Contains() call var.Contains() call var.Contains() call var.Contains() call var.Contains() goto goto call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call Lucene.Net.Util.CharsRef.Grow(int) call Lucene.Net.Util.CharsRef.Grow(int) call Lucene.Net.Util.CharsRef.Grow(int) call Lucene.Net.Util.CharsRef.Grow(int) call Lucene.Net.Util.CharsRef.Grow(int) decl_stmt LookupResult = new call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() call Lucene.Net.Util.CharsRef.ToString() * * double / call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() == *= call decl IList.Sort() call decl IList.Sort() call decl IList.Sort() call decl IList.Sort() call decl IList.Sort() new if > call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() return finally protected override protected override < ? if != else bool int protected override protected override ? + decl_stmt int = decl_stmt bool = == = return public public if > return - else if < return else return string string private private return - private static private static ? != return - long var var var private ? private ? < ? < ? decl_stmt long ? = call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() call decl FST.GetFirstArc() decl_stmt var = decl_stmt var = decl_stmt var = + while < if call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() call decl FST.FindTargetArc() ++ & == return else = call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() call decl FST.Outputs() return public public ? ? return public virtual public virtual throw new