Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using System.Globalization using System.Linq using Lucene.Net.Support using Lucene.Net.Util using Lucene.Net.Store.Directory Lucene.Net.Codecs.DocValuesFormat Lucene.Net.Codecs.DocValuesProducer Lucene.Net.Store.IOContext Lucene.Net.Util.IOUtils class Lucene.Net.Index.SegmentDocValues decl IDictionary SegmentReadState Directory string private < private < ? < decl_stmt Lucene.Net.Store.Directory = decl_stmt string = if long != - = = long decl_stmt SegmentReadState = new new return new protected internal override protected internal override lock decl RefCount internal internal ? < lock decl_stmt Lucene.Net.Util.RefCount < if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = != = else call decl RefCount.IncRef() call decl RefCount.IncRef() call decl RefCount.IncRef() call decl RefCount.IncRef() call decl RefCount.IncRef() return call decl RefCount.Get() call decl RefCount.Get() call decl RefCount.Get() call decl RefCount.Get() call decl RefCount.Get() Exception decl RefCount internal internal < ? lock decl_stmt System.Exception = foreach ? in decl_stmt Lucene.Net.Util.RefCount < = != + try call decl RefCount.DecRef() call decl RefCount.DecRef() call decl RefCount.DecRef() call decl RefCount.DecRef() call decl RefCount.DecRef() catch if != = if != internal internal