Lucene.Net.Util.Automaton Lucene.Net.Support using System using System.Collections.Generic using System.Diagnostics using System.Text using class Lucene.Net.Util.Automaton.UTF32ToUTF8 decl int int decl State decl int UTF8Sequence UTF8Sequence UTF8Sequence UTF8Sequence decl int public virtual public virtual return public virtual public virtual return internal virtual internal virtual if < = = = else if < = << | >> = = else if < = << | >> = = else = << | >> = = internal virtual internal virtual for = < ++ - = | & - = = >> StringBuilder public override public override decl_stmt System.Text.StringBuilder = new for = < ++ if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) internal internal call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() int int State private private if == if == - && == - new return else > + > + decl_stmt Lucene.Net.Util.Automaton.State = new + else if == if == - new else if - > + - - - else decl_stmt int = + - decl_stmt int = - while < call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() - call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() call UTF8Sequence.Set() - call UTF8Sequence.ByteAt() call UTF8Sequence.ByteAt() call UTF8Sequence.ByteAt() call UTF8Sequence.ByteAt() call UTF8Sequence.ByteAt() call UTF8Sequence.ByteAt() call UTF8Sequence.ByteAt() call UTF8Sequence.ByteAt() call UTF8Sequence.ByteAt() call UTF8Sequence.ByteAt() - ++ int State private private if == - new | - else decl_stmt Lucene.Net.Util.Automaton.State = new + decl_stmt int = | - if && != + - - int State private private if == - new & ~ - else decl_stmt int if == = else = & ~ - if && != - - - decl_stmt Lucene.Net.Util.Automaton.State = new + State State private private if == new else decl_stmt Lucene.Net.Util.Automaton.State = new while > decl_stmt Lucene.Net.Util.Automaton.State = call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new -- = call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) call Lucene.Net.Util.Automaton.State.AddTransition(Transition) new decl State State Automaton State Transition State State decl List public public if = decl_stmt Lucene.Net.Util.Automaton.State = new decl_stmt System.Collections.Generic.List < = new < decl_stmt Lucene.Net.Util.Automaton.State = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() decl_stmt Lucene.Net.Util.Automaton.Automaton = new = decl_stmt Lucene.Net.Util.Automaton.State = = new = = = ++ = = while != = - call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() - = for = < ++ decl_stmt Lucene.Net.Util.Automaton.Transition = decl_stmt Lucene.Net.Util.Automaton.State = decl_stmt Lucene.Net.Util.Automaton.State = if == = = = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call Lucene.Net.Util.Automaton.Automaton.SetNumberedStates(State,int) call Lucene.Net.Util.Automaton.Automaton.SetNumberedStates(State,int) call Lucene.Net.Util.Automaton.Automaton.SetNumberedStates(State,int) call Lucene.Net.Util.Automaton.Automaton.SetNumberedStates(State,int) call Lucene.Net.Util.Automaton.Automaton.SetNumberedStates(State,int) return State decl State private private decl_stmt Lucene.Net.Util.Automaton.State = new if == decl_stmt Lucene.Net.Util.Automaton.State = new + = = = ++ return