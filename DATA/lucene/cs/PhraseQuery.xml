Lucene.Net.Search System using System.Collections.Generic using System.Diagnostics using System.Linq using System.Text using Lucene.Net.Support using Lucene.Net.Util.ArrayUtil Lucene.Net.Index.AtomicReader Lucene.Net.Index.AtomicReaderContext Lucene.Net.Util.Bits Lucene.Net.Index.DocsAndPositionsEnum Lucene.Net.Index.DocsEnum Lucene.Net.Index.IndexReader Lucene.Net.Index.IndexReaderContext Lucene.Net.Search.Similarities.Similarity Lucene.Net.Search.Similarities.Similarity.SimScorer Lucene.Net.Index.Term Lucene.Net.Index.TermContext Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum Lucene.Net.Index.TermState Lucene.Net.Util.ToStringUtils class Lucene.Net.Search.PhraseQuery super super Query int string int decl List decl List if < throw new = return int public virtual public virtual decl_stmt int = if > = int - + public virtual public virtual if == = else if ! throw new + call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if > = return call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() decl int decl_stmt int = new for = < ++ = int return BooleanQuery TermQuery public override public override if == decl_stmt Lucene.Net.Search.BooleanQuery = new = return else if == decl_stmt Lucene.Net.Search.TermQuery = new = return else return int public virtual public virtual if != return - if != return - if != return - if == return for = < ++ decl_stmt int = if != return return int int public override public override decl_stmt int const const = decl_stmt int = = * + = * + for = < ++ = * + return PostingsAndFreq public override public override if == return if == return if != return decl_stmt PostingsAndFreq = if != return if != return if == return == return public override public override return + + return return public override public override Bits ExactPhraseScorer decl PostingsAndFreq TermState Term AtomicReader TermsEnum DocsAndPositionsEnum Terms public override public override > decl_stmt Lucene.Net.Index.AtomicReader = decl_stmt Lucene.Net.Spatial.Util.Bits = decl_stmt PostingsAndFreq = new decl_stmt Lucene.Net.Index.Terms = call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) call Lucene.Net.Index.AtomicReader.Terms(string) if == return decl_stmt Lucene.Net.Index.TermsEnum = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() for = < ++ decl_stmt Lucene.Net.Index.Term = decl_stmt Lucene.Net.Index.TermState = if == return call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) decl_stmt DocsAndPositionsEnum = call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) if == call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) throw new + + + call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() call Lucene.Net.Index.Term.Text() + = new call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() int if == if == decl_stmt Lucene.Net.Search.ExactPhraseScorer = new if return else return else return new internal virtual internal virtual return == Scorer SimScorer ComplexExplanation int float Explanation public override public override decl_stmt Lucene.Net.Search.Scorer = if != decl_stmt int = call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() call Scorer.Advance() if == decl_stmt float = == call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() call Scorer.Freq() : decl_stmt SimScorer = decl_stmt Lucene.Net.Search.ComplexExplanation = new = + + + + + + decl_stmt Lucene.Net.Search.Explanation = call SimScorer.Explain() call SimScorer.Explain() call SimScorer.Explain() call SimScorer.Explain() call SimScorer.Explain() new + call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() call ComplexExplanation.AddDetail() = = return return new public override public override return new public override public override < StringBuilder string int decl string public override public override decl_stmt System.Text.StringBuilder = new if != && ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt string = new + for = < ++ decl_stmt int = int decl_stmt string = if == = else = + + = for = < ++ if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt string = if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) PhraseQuery public override public override if ! is return decl_stmt Lucene.Net.Search.PhraseQuery = return == && == && && public override public override return ^ ^ call decl List.GetHashCode() call decl List.GetHashCode() call decl List.GetHashCode() call decl List.GetHashCode() call decl List.GetHashCode() ^ call decl List.GetHashCode() call decl List.GetHashCode() call decl List.GetHashCode() call decl List.GetHashCode() call decl List.GetHashCode()