Lucene.Net.Search System using System.Collections.Generic using System.Diagnostics using System.IO using System.Linq using Lucene.Net.Support using Lucene.Net.Util using Lucene.Net.Util.Attribute Lucene.Net.Util.AttributeSource Lucene.Net.Util.Automaton.Automaton Lucene.Net.Util.Automaton.BasicAutomata Lucene.Net.Util.Automaton.BasicOperations Lucene.Net.Util.Bits Lucene.Net.Util.Automaton.ByteRunAutomaton Lucene.Net.Util.BytesRef Lucene.Net.Util.Automaton.CompiledAutomaton Lucene.Net.Index.DocsAndPositionsEnum Lucene.Net.Index.DocsEnum Lucene.Net.Index.FilteredTermsEnum Lucene.Net.Util.Automaton.LevenshteinAutomata Lucene.Net.Index.Term Lucene.Net.Index.Terms Lucene.Net.Index.TermsEnum Lucene.Net.Index.TermState Lucene.Net.Util.UnicodeUtil class Lucene.Net.Search.FuzzyTermsEnum super super TermsEnum Term IBoostAttribute decl int float bool bool TermsEnum int float int ILevenshteinAutomataAttribute Terms IMaxNonCompetitiveBoostAttribute BytesRef IBoostAttribute bool decl IComparer int BytesRef float private private = < CompiledAutomaton decl IList protected internal virtual protected internal virtual decl_stmt System.Collections.Generic.IList < = if < decl_stmt Lucene.Net.Util.Automaton.CompiledAutomaton = return new call Lucene.Net.Index.Terms.Intersect(CompiledAutomaton,BytesRef) call Lucene.Net.Index.Terms.Intersect(CompiledAutomaton,BytesRef) call Lucene.Net.Index.Terms.Intersect(CompiledAutomaton,BytesRef) call Lucene.Net.Index.Terms.Intersect(CompiledAutomaton,BytesRef) call Lucene.Net.Index.Terms.Intersect(CompiledAutomaton,BytesRef) == : call Lucene.Net.Util.Automaton.CompiledAutomaton.Floor(BytesRef,BytesRef) call Lucene.Net.Util.Automaton.CompiledAutomaton.Floor(BytesRef,BytesRef) call Lucene.Net.Util.Automaton.CompiledAutomaton.Floor(BytesRef,BytesRef) call Lucene.Net.Util.Automaton.CompiledAutomaton.Floor(BytesRef,BytesRef) call Lucene.Net.Util.Automaton.CompiledAutomaton.Floor(BytesRef,BytesRef) new call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() + else return Automaton LevenshteinAutomata Automaton decl IList private < private < decl_stmt System.Collections.Generic.IList < = call ILevenshteinAutomataAttribute.Automata() call ILevenshteinAutomataAttribute.Automata() call ILevenshteinAutomataAttribute.Automata() call ILevenshteinAutomataAttribute.Automata() call ILevenshteinAutomataAttribute.Automata() if <= && <= decl_stmt Lucene.Net.Util.Automaton.LevenshteinAutomata = new - for = <= ++ decl_stmt Lucene.Net.Util.Automaton.Automaton = call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) call Lucene.Net.Util.Automaton.LevenshteinAutomata.ToAutomaton(int) if > decl_stmt Lucene.Net.Util.Automaton.Automaton = = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new return = = < bool int private private decl_stmt int = decl_stmt bool = == || != && call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() call decl IComparer.Compare() >= while > && >= : > -- if != || TermsEnum protected internal virtual protected internal virtual decl_stmt Lucene.Net.Index.TermsEnum = if == > throw new = private private return - * float private private decl_stmt float = - float / return - * BytesRef BytesRef float public override public override if != = decl_stmt Lucene.Net.Util.BytesRef = call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() call Lucene.Net.Index.TermsEnum.Next() = decl_stmt float = decl_stmt Lucene.Net.Util.BytesRef = if != && != || != = = = return public override public override return call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() call Lucene.Net.Index.TermsEnum.DocFreq() public override public override return call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() call Lucene.Net.Index.TermsEnum.TotalTermFreq() public override public override return call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) public override public override return call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) call Lucene.Net.Index.TermsEnum.DocsAndPositions(Bits,DocsAndPositionsEnum,int) public override public override call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) public override public override return call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() call Lucene.Net.Index.TermsEnum.TermState() return public override public override return call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() call Lucene.Net.Index.TermsEnum.Ord() public override public override return call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) public override public override return call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) call Lucene.Net.Index.TermsEnum.SeekCeil(BytesRef) public override public override call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) public override public override return call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() call Lucene.Net.Index.TermsEnum.Term() internal virtual internal virtual = < int int float protected internal override protected internal override decl_stmt int = - while > if - -- else break if == = return else decl_stmt int = decl_stmt float = - float / if > = - * return else return internal internal return == : return return public < public < return public override public override public override public override return public override public override if == return if ! is return return decl IList public override public override decl_stmt System.Collections.Generic.IList < = call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange() call decl IList.AddRange()