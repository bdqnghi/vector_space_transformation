Lucene.Net.Util System using System.Diagnostics using System.Text using class Lucene.Net.Util.LongsRef super super ICloneable decl long int decl long int public public return new int long int public override public override decl_stmt int const const = decl_stmt int = decl_stmt long = + for = < ++ = * + ^ ulong >> return public override public override if == return if is return return decl long long int public public if == decl_stmt int = decl_stmt long = decl_stmt long = + for = < ++ , ++ if != return return else return long decl long int int long decl long long public public if == return decl_stmt long = decl_stmt int = decl_stmt long = decl_stmt int = decl_stmt long = + while < decl_stmt long = ++ decl_stmt long = ++ if > return else if < return - return - public public if - < = new = = public public == if < = StringBuilder long public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt long = + for = < ++ if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) LongsRef public static public static decl_stmt Lucene.Net.Util.LongsRef = new call Lucene.Net.Util.LongsRef.CopyLongs(LongsRef) call Lucene.Net.Util.LongsRef.CopyLongs(LongsRef) call Lucene.Net.Util.LongsRef.CopyLongs(LongsRef) call Lucene.Net.Util.LongsRef.CopyLongs(LongsRef) call Lucene.Net.Util.LongsRef.CopyLongs(LongsRef) return if == throw new if < throw new + if > throw new + + + if < throw new + if > throw new + + + if + < throw new + + + if + > throw new + + + + + return