Lucene.Net.Store System.Collections.Generic using System.Linq using class Lucene.Net.Store.FileSwitchDirectory super super BaseDirectory bool Directory decl ISet Directory return return public override public override if try call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() finally call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() = decl ISet NoSuchDirectoryException public override public override decl_stmt System.Collections.Generic.ISet < = new < decl_stmt NoSuchDirectoryException = try foreach in call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() catch = try foreach in call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call Directory.ListAll() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() call decl ISet.Add() catch if != throw if == throw if != && == throw return call decl ISet.ToArray() call decl ISet.ToArray() call decl ISet.ToArray() call decl ISet.ToArray() call decl ISet.ToArray() int public static public static decl_stmt int = if == - return return + - + string private private decl_stmt string = if call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() return else return public override public override return public override public override public override public override return public override public override return decl IList decl IList public override public override < decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = new < foreach in if call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl ISet.Contains() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() else call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() call Directory.Sync() public override public override return public override public override return