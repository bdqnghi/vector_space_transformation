Lucene.Net.Util NUnit.Framework using System using class attribute Lucene.Net.Util.TestRollingBuffer super super LuceneTestCase public public = - decl RollingBuffer Random int int int int FixedBitSet Position int int public virtual public virtual decl_stmt RollingBuffer < = new for = < * ++ decl_stmt int = decl_stmt int = decl_stmt Lucene.Net.Spatial.Util.FixedBitSet = new + decl_stmt int = decl_stmt System.Random = while < if call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) == decl_stmt int = : decl_stmt int = call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) decl_stmt int = + = if + + + decl_stmt Position = call decl RollingBuffer.Get() call decl RollingBuffer.Get() call decl RollingBuffer.Get() call decl RollingBuffer.Get() call decl RollingBuffer.Get() if ! call Lucene.Net.Spatial.Util.FixedBitSet.GetAndSet(int) call Lucene.Net.Spatial.Util.FixedBitSet.GetAndSet(int) call Lucene.Net.Spatial.Util.FixedBitSet.GetAndSet(int) call Lucene.Net.Spatial.Util.FixedBitSet.GetAndSet(int) call Lucene.Net.Spatial.Util.FixedBitSet.GetAndSet(int) - = else else if > += call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) call System.Random.Next(int,int) - if + call decl RollingBuffer.FreeBefore() call decl RollingBuffer.FreeBefore() call decl RollingBuffer.FreeBefore() call decl RollingBuffer.FreeBefore() call decl RollingBuffer.FreeBefore() call decl RollingBuffer.Reset() call decl RollingBuffer.Reset() call decl RollingBuffer.Reset() call decl RollingBuffer.Reset() call decl RollingBuffer.Reset() Position public static public static decl_stmt Position = new = - return Position protected override protected override decl_stmt Position = new = - return