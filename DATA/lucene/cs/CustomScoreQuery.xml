Lucene.Net.Queries System.Collections.Generic using System.Text using Lucene.Net.Index using Lucene.Net.Queries.Function using Lucene.Net.Search using Lucene.Net.Support using Lucene.Net.Util using class Lucene.Net.Queries.CustomScoreQuery super super Query bool Query decl Query CustomScoreQuery Query Query public override public override decl_stmt Lucene.Net.Search.Function.CustomScoreQuery = decl_stmt Lucene.Net.Search.Query = call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) call Lucene.Net.Search.Query.Rewrite(IndexReader) if != = = for = < ++ decl_stmt Lucene.Net.Search.Query = if != if == = = return ?? public override public override < call Lucene.Net.Search.Query.ExtractTerms(ISet) call Lucene.Net.Search.Query.ExtractTerms(ISet) call Lucene.Net.Search.Query.ExtractTerms(ISet) call Lucene.Net.Search.Query.ExtractTerms(ISet) call Lucene.Net.Search.Query.ExtractTerms(ISet) foreach in var public override public override decl_stmt var = = call Lucene.Net.Search.Query.Clone() call Lucene.Net.Search.Query.Clone() call Lucene.Net.Search.Query.Clone() call Lucene.Net.Search.Query.Clone() call Lucene.Net.Search.Query.Clone() = new for = < ++ = return StringBuilder public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call Query.ToString() call Query.ToString() call Query.ToString() call Query.ToString() call Query.ToString() foreach in call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) : return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) + var public override public override if == return if ! return if != return decl_stmt var = if != || ! || != || != return return public override public override return + call Lucene.Net.Search.Query.GetHashCode() call Lucene.Net.Search.Query.GetHashCode() call Lucene.Net.Search.Query.GetHashCode() call Lucene.Net.Search.Query.GetHashCode() call Lucene.Net.Search.Query.GetHashCode() + ^ ^ : protected internal virtual protected internal virtual return new return float var decl_stmt float = foreach in if decl_stmt var = else += return public override public override foreach in if else = * Scorer var public override public override decl_stmt Lucene.Net.Search.Scorer = if == return decl_stmt var = new for = < ++ = return new Explanation public override public override decl_stmt Lucene.Net.Search.Explanation = return ?? new float var var Explanation Explanation internal virtual internal virtual decl_stmt var = if ! return decl_stmt var = new for = < ++ = decl_stmt Lucene.Net.Search.Explanation = decl_stmt float = * decl_stmt Lucene.Net.Search.Explanation = new + call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() call Explanation.AddDetail() new return public override public override return int public override public override decl_stmt int = if != foreach in return public override public override return public override public override for = < ++ = return * public override public override return return new int public override public override decl_stmt int = if != foreach in return public override public override return public override public override return new return return return