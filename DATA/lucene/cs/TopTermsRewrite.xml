Lucene.Net.Search System using System.Collections.Generic using System.Diagnostics using System.Linq using Lucene.Net.Util using Lucene.Net.Util.ArrayUtil Lucene.Net.Util.BytesRef Lucene.Net.Index.IndexReader Lucene.Net.Index.Term Lucene.Net.Index.TermContext Lucene.Net.Index.TermsEnum Lucene.Net.Index.TermState class super super ITopTermsRewrite where decl IComparer int return var decl ScoreTerm int Term decl PriorityQueue public override public override decl_stmt int = decl_stmt Lucene.Net.Support.PriorityQueue < = new new decl_stmt var = decl_stmt ScoreTerm = call decl PriorityQueue.ToArray() call decl PriorityQueue.ToArray() call decl PriorityQueue.ToArray() call decl PriorityQueue.ToArray() call decl PriorityQueue.ToArray() foreach in decl_stmt Lucene.Net.Index.Term = new == + + + + + * return = = if == = new new = < private private if == && != = else if == = else < + + + return ScoreTerm TermState float ScoreTerm public override public override decl_stmt float = if == decl_stmt ScoreTerm = if < return if == && > return decl_stmt ScoreTerm decl_stmt Lucene.Net.Index.TermState = != if out == call ScoreTerm.TermState() call ScoreTerm.TermState() call ScoreTerm.TermState() call ScoreTerm.TermState() call ScoreTerm.TermState() call ScoreTerm.TermState() call ScoreTerm.TermState() call ScoreTerm.TermState() call ScoreTerm.TermState() else = = == if > = else = new new <= if == = = = return public override public override return * var public override public override if == return if == return if != return decl_stmt var = < if != return return public virtual public virtual == return public public if == return else return public override public override return < :