Lucene.Net.Tests.Queries.Function System using Lucene.Net.Analysis using Lucene.Net.Documents using Lucene.Net.Index using Lucene.Net.Queries.Function using Lucene.Net.Queries.Function.ValueSources using Lucene.Net.Store using Lucene.Net.Util using NUnit.Framework using class Lucene.Net.Tests.Queries.Function.FunctionTestSetup super super LuceneTestCase string string Analyzer decl string float ValueSource ValueSource string ValueSource Directory string ValueSource ValueSource int public override public override call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() call Lucene.Net.Store.Directory.Dispose() = = int decl bool IndexWriterConfig int RandomIndexWriter protected internal static protected internal static if = = new decl_stmt Lucene.Net.Index.IndexWriterConfig = if call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) call Lucene.Net.Index.IndexWriterConfig.SetMaxBufferedDocs(int) decl_stmt Lucene.Net.Index.RandomIndexWriter = new decl_stmt int = decl_stmt bool = new decl_stmt int = while > if throw new + + = = + -- if ! if call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.ForceMerge(int) call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() call Lucene.Net.Index.RandomIndexWriter.Dispose() if int FieldType FieldType Document Field private static private static decl_stmt Lucene.Net.Documents.Document = new decl_stmt Lucene.Net.Documents.Field decl_stmt int = + decl_stmt Lucene.Net.Documents.FieldType = new = = = call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) decl_stmt Lucene.Net.Documents.FieldType = new = = + + call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) = + call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) = + call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) call Lucene.Net.Documents.Document.Add(IndexableField) + string int int protected internal static protected internal static decl_stmt string = + decl_stmt int = + + decl_stmt int = - return + call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() private static private static return protected internal static protected internal static return protected internal static protected internal static if