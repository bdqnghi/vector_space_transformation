Lucene.Net.Index System using System.Collections.Generic using System.Diagnostics using Lucene.Net.Support using Lucene.Net.Util.BytesRef Lucene.Net.Search.DocIdSet Lucene.Net.Search.DocIdSetIterator Lucene.Net.Util.InfoStream Lucene.Net.Store.IOContext Lucene.Net.Search.Query Lucene.Net.Search.QueryWrapperFilter class Lucene.Net.Index.BufferedUpdatesStream AtomicLong Term decl IList InfoStream decl IComparer AtomicInteger long public virtual public virtual lock = ++ < == || - < call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + + + + call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() return public virtual public virtual lock call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() = call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicInteger.Set(int) call Lucene.Net.Support.AtomicLong.Set(int) call Lucene.Net.Support.AtomicLong.Set(int) call Lucene.Net.Support.AtomicLong.Set(int) call Lucene.Net.Support.AtomicLong.Set(int) call Lucene.Net.Support.AtomicLong.Set(int) public virtual public virtual return call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() != public virtual public virtual return call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() public virtual public virtual return call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() long public virtual public virtual decl_stmt long = - if > return else if < return - else return SegmentCommitInfo FrozenBufferedUpdates SegmentReader long decl DocValuesFieldUpdates decl List ReadersAndUpdates bool long bool int decl IList int int long int CoalescedUpdates public virtual public virtual < lock decl_stmt long = if == return new ++ if ! if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) return new ++ if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + decl_stmt long = ++ decl_stmt System.Collections.Generic.List < = new < call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() decl_stmt Lucene.Net.Index.CoalescedUpdates = decl_stmt bool = decl_stmt int = - decl_stmt int = - decl_stmt System.Collections.Generic.IList < = while >= decl_stmt Lucene.Net.Index.FrozenBufferedUpdates = >= : decl_stmt Lucene.Net.Index.SegmentCommitInfo = decl_stmt long = if != && < if == = new if ! call Lucene.Net.Index.CoalescedUpdates.Update(FrozenBufferedUpdates) call Lucene.Net.Index.CoalescedUpdates.Update(FrozenBufferedUpdates) call Lucene.Net.Index.CoalescedUpdates.Update(FrozenBufferedUpdates) call Lucene.Net.Index.CoalescedUpdates.Update(FrozenBufferedUpdates) call Lucene.Net.Index.CoalescedUpdates.Update(FrozenBufferedUpdates) -- else if != && == + decl_stmt Lucene.Net.Index.ReadersAndUpdates = decl_stmt Lucene.Net.Index.SegmentReader = call int.GetReader() call int.GetReader() call int.GetReader() call int.GetReader() call int.GetReader() decl_stmt int = decl_stmt bool try decl_stmt System.ComponentModel.Container = new if != += int call Lucene.Net.Index.CoalescedUpdates.TermsIterable() call Lucene.Net.Index.CoalescedUpdates.TermsIterable() call Lucene.Net.Index.CoalescedUpdates.TermsIterable() call Lucene.Net.Index.CoalescedUpdates.TermsIterable() call Lucene.Net.Index.CoalescedUpdates.TermsIterable() += int call Lucene.Net.Index.CoalescedUpdates.QueriesIterable() call Lucene.Net.Index.CoalescedUpdates.QueriesIterable() call Lucene.Net.Index.CoalescedUpdates.QueriesIterable() call Lucene.Net.Index.CoalescedUpdates.QueriesIterable() call Lucene.Net.Index.CoalescedUpdates.QueriesIterable() += int call Lucene.Net.Index.FrozenBufferedUpdates.QueriesIterable() call Lucene.Net.Index.FrozenBufferedUpdates.QueriesIterable() call Lucene.Net.Index.FrozenBufferedUpdates.QueriesIterable() call Lucene.Net.Index.FrozenBufferedUpdates.QueriesIterable() call Lucene.Net.Index.FrozenBufferedUpdates.QueriesIterable() if call bool.Any() call bool.Any() call bool.Any() call bool.Any() call bool.Any() call int.WriteFieldUpdates() call int.WriteFieldUpdates() call int.WriteFieldUpdates() call int.WriteFieldUpdates() call int.WriteFieldUpdates() decl_stmt int = + <= = == finally call int.Release() call int.Release() call int.Release() call int.Release() call int.Release() |= > if if == = new < call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + + + + == : call Lucene.Net.Index.CoalescedUpdates.ToString() call Lucene.Net.Index.CoalescedUpdates.ToString() call Lucene.Net.Index.CoalescedUpdates.ToString() call Lucene.Net.Index.CoalescedUpdates.ToString() call Lucene.Net.Index.CoalescedUpdates.ToString() + + + : if == = new -- -- = else if != decl_stmt Lucene.Net.Index.ReadersAndUpdates = decl_stmt Lucene.Net.Index.SegmentReader = call int.GetReader() call int.GetReader() call int.GetReader() call int.GetReader() call int.GetReader() decl_stmt int = decl_stmt bool try += int call Lucene.Net.Index.CoalescedUpdates.TermsIterable() call Lucene.Net.Index.CoalescedUpdates.TermsIterable() call Lucene.Net.Index.CoalescedUpdates.TermsIterable() call Lucene.Net.Index.CoalescedUpdates.TermsIterable() call Lucene.Net.Index.CoalescedUpdates.TermsIterable() += int call Lucene.Net.Index.CoalescedUpdates.QueriesIterable() call Lucene.Net.Index.CoalescedUpdates.QueriesIterable() call Lucene.Net.Index.CoalescedUpdates.QueriesIterable() call Lucene.Net.Index.CoalescedUpdates.QueriesIterable() call Lucene.Net.Index.CoalescedUpdates.QueriesIterable() decl_stmt System.ComponentModel.Container = new if call bool.Any() call bool.Any() call bool.Any() call bool.Any() call bool.Any() call int.WriteFieldUpdates() call int.WriteFieldUpdates() call int.WriteFieldUpdates() call int.WriteFieldUpdates() call int.WriteFieldUpdates() decl_stmt int = + <= = == finally call int.Release() call int.Release() call int.Release() call int.Release() call int.Release() |= > if if == = new < call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + + + + + : = -- if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + - + return new lock return ++ int long public virtual public virtual lock decl_stmt long = foreach in = if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + + + decl_stmt int = for = < ++ if >= return ! FrozenBufferedUpdates private private lock if > if call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.IsEnabled(string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) call Lucene.Net.Util.InfoStream.Message(string,string) + + + - + for = < ++ decl_stmt Lucene.Net.Index.FrozenBufferedUpdates = call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) call Lucene.Net.Support.AtomicInteger.AddAndGet(int) - call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() >= call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() call AtomicLong.AddAndGet() - call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() >= call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() call decl IList.SubList() string DocsEnum long TermsEnum Fields int DocsEnum Terms bool private private < lock decl_stmt long = decl_stmt Lucene.Net.Index.Fields = if == return decl_stmt Lucene.Net.Index.TermsEnum = decl_stmt string = decl_stmt Lucene.Net.Index.DocsEnum = decl_stmt bool = foreach in if ! == || call string.CompareTo() call string.CompareTo() call string.CompareTo() call string.CompareTo() call string.CompareTo() < = decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() if != = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() else = if == continue if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) decl_stmt Lucene.Net.Index.DocsEnum = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) if != while decl_stmt int = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() if == break if ! = if ++ return string Term Terms TermsEnum Fields DocsEnum DocValuesFieldUpdates int int DocsEnum private private private < < where where lock decl_stmt Lucene.Net.Index.Fields = if == return decl_stmt string = decl_stmt Lucene.Net.Index.TermsEnum = decl_stmt Lucene.Net.Index.DocsEnum = foreach in decl_stmt Lucene.Net.Index.Term = decl_stmt int = if ! = decl_stmt Lucene.Net.Index.Terms = call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() call Fields.Terms() if != = call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() call Terms.Iterator() else = continue if == continue if call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) call Lucene.Net.Index.TermsEnum.SeekExact(long) decl_stmt Lucene.Net.Index.DocsEnum = call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) call Lucene.Net.Index.TermsEnum.Docs(Bits,DocsEnum) decl_stmt Lucene.Net.Index.DocValuesFieldUpdates = if == = decl_stmt int while = call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() call DocsEnum.NextDoc() != if >= break call DocValuesFieldUpdates.Add() call DocValuesFieldUpdates.Add() call DocValuesFieldUpdates.Add() call DocValuesFieldUpdates.Add() call DocValuesFieldUpdates.Add() AtomicReaderContext long DocIdSet DocIdSetIterator int int Query bool private static private static < decl_stmt long = decl_stmt Lucene.Net.Index.AtomicReaderContext = decl_stmt bool = foreach in decl_stmt Lucene.Net.Search.Query = decl_stmt int ? = decl_stmt Lucene.Net.Search.DocIdSet = new if != decl_stmt Lucene.Net.Search.DocIdSetIterator = call DocIdSet.GetIterator() call DocIdSet.GetIterator() call DocIdSet.GetIterator() call DocIdSet.GetIterator() call DocIdSet.GetIterator() if != while decl_stmt int = call Lucene.Net.Search.DocIdSetIterator.NextDoc() call Lucene.Net.Search.DocIdSetIterator.NextDoc() call Lucene.Net.Search.DocIdSetIterator.NextDoc() call Lucene.Net.Search.DocIdSetIterator.NextDoc() call Lucene.Net.Search.DocIdSetIterator.NextDoc() if >= break if ! = if ++ return private private if != == || > + + + = == : new return int long private private decl_stmt int = decl_stmt long = foreach in += += == call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() + + + call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() call Lucene.Net.Support.AtomicInteger.Get() == call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() call Lucene.Net.Support.AtomicLong.Get() + + + return