Antlr3.Tool System.Collections.Generic using System.Linq using Antlr3.Grammars using Antlr3.Misc using Antlr3.Analysis.Label Antlr3.Analysis.NFAState Antlr.Runtime.RecognitionException class Antlr3.Tool.CompositeGrammar decl List decl HashSet bool int decl List CompositeGrammarTree decl List decl Dictionary decl List decl HashSet int int int decl Dictionary protected virtual protected virtual call decl List.Resize() call decl List.Resize() call decl List.Resize() call decl List.Resize() call decl List.Resize() + - + = + = + = + = + = + = + - = + - = + - = = = = = = = = = = return if == return return return return = return return return return return return return = return = public virtual public virtual = new = public virtual public virtual return call Antlr3.Tool.CompositeGrammarTree.GetRule(string) call Antlr3.Tool.CompositeGrammarTree.GetRule(string) call Antlr3.Tool.CompositeGrammarTree.GetRule(string) call Antlr3.Tool.CompositeGrammarTree.GetRule(string) call Antlr3.Tool.CompositeGrammarTree.GetRule(string) public virtual public virtual return call Antlr3.Tool.CompositeGrammarTree.GetOption(string) call Antlr3.Tool.CompositeGrammarTree.GetOption(string) call Antlr3.Tool.CompositeGrammarTree.GetOption(string) call Antlr3.Tool.CompositeGrammarTree.GetOption(string) call Antlr3.Tool.CompositeGrammarTree.GetOption(string) public public if == = new new = public virtual public virtual throw new CompositeGrammarTree public virtual public virtual decl_stmt Antlr3.Tool.CompositeGrammarTree = call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) if == return if != return return decl IList CompositeGrammarTree public virtual < public virtual < decl_stmt Antlr3.Tool.CompositeGrammarTree = call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) if == return decl_stmt System.Collections.Generic.IList < = call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() - return decl IList CompositeGrammarTree CompositeGrammarTree decl IList public virtual < public virtual < decl_stmt Antlr3.Tool.CompositeGrammarTree = call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) decl_stmt System.Collections.Generic.IList < = if == return decl_stmt System.Collections.Generic.IList < = new < for = != && < ++ decl_stmt Antlr3.Tool.CompositeGrammarTree = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return public virtual < public virtual < return ?? < CompositeGrammarTree decl List CompositeGrammarTree public virtual < public virtual < if == return decl_stmt System.Collections.Generic.List < = new < decl_stmt Antlr3.Tool.CompositeGrammarTree = call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) decl_stmt Antlr3.Tool.CompositeGrammarTree = while != call decl List.Insert() call decl List.Insert() call decl List.Insert() call decl List.Insert() call decl List.Insert() = return decl HashSet Rule public virtual < public virtual < if != return decl_stmt System.Collections.Generic.HashSet < = foreach in call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() call decl HashSet.ToArray() decl_stmt Antlr3.Tool.Rule = if != || call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() return decl HashSet decl IList CompositeGrammarTree decl HashSet public virtual < public virtual < decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt Antlr3.Tool.CompositeGrammarTree = call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) decl_stmt System.Collections.Generic.IList < = call Antlr3.Tool.CompositeGrammarTree.GetPreOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPreOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPreOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPreOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPreOrderedGrammarList() foreach in foreach in if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return CompositeGrammarTree public virtual public virtual decl_stmt Antlr3.Tool.CompositeGrammarTree = call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) call Antlr3.Tool.CompositeGrammarTree.FindNode(string) if != return return public virtual public virtual return ++ public virtual public virtual call decl List.Resize() call decl List.Resize() call decl List.Resize() call decl List.Resize() call decl List.Resize() + = public virtual public virtual return AssignTokenTypesWalker decl IList Grammar public virtual public virtual decl_stmt System.Collections.Generic.IList < = call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() decl_stmt Antlr3.Grammars.AssignTokenTypesWalker = new for = != && < ++ decl_stmt Antlr3.Tool.Grammar = call AssignTokenTypesWalker.SetTreeNodeStream() call AssignTokenTypesWalker.SetTreeNodeStream() call AssignTokenTypesWalker.SetTreeNodeStream() call AssignTokenTypesWalker.SetTreeNodeStream() call AssignTokenTypesWalker.SetTreeNodeStream() new try call AssignTokenTypesWalker.grammar_() call AssignTokenTypesWalker.grammar_() call AssignTokenTypesWalker.grammar_() call AssignTokenTypesWalker.grammar_() call AssignTokenTypesWalker.grammar_() catch call Antlr3.Grammars.AssignTokenTypesWalker.DefineTokens(Grammar) call Antlr3.Grammars.AssignTokenTypesWalker.DefineTokens(Grammar) call Antlr3.Grammars.AssignTokenTypesWalker.DefineTokens(Grammar) call Antlr3.Grammars.AssignTokenTypesWalker.DefineTokens(Grammar) call Antlr3.Grammars.AssignTokenTypesWalker.DefineTokens(Grammar) decl IList Grammar public virtual public virtual decl_stmt System.Collections.Generic.IList < = call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() for = != && < ++ decl_stmt Antlr3.Tool.Grammar = if ! == || == continue foreach in call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() if == call Antlr3.Tool.Grammar.TranslateLeftRecursiveRule(GrammarAST) call Antlr3.Tool.Grammar.TranslateLeftRecursiveRule(GrammarAST) call Antlr3.Tool.Grammar.TranslateLeftRecursiveRule(GrammarAST) call Antlr3.Tool.Grammar.TranslateLeftRecursiveRule(GrammarAST) call Antlr3.Tool.Grammar.TranslateLeftRecursiveRule(GrammarAST) decl IList Grammar public virtual public virtual call Antlr3.Tool.CompositeGrammarTree.TrimLexerImportsIntoCombined() call Antlr3.Tool.CompositeGrammarTree.TrimLexerImportsIntoCombined() call Antlr3.Tool.CompositeGrammarTree.TrimLexerImportsIntoCombined() call Antlr3.Tool.CompositeGrammarTree.TrimLexerImportsIntoCombined() call Antlr3.Tool.CompositeGrammarTree.TrimLexerImportsIntoCombined() decl_stmt System.Collections.Generic.IList < = call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() for = != && < ++ decl_stmt Antlr3.Tool.Grammar = call Antlr3.Tool.Grammar.DefineGrammarSymbols() call Antlr3.Tool.Grammar.DefineGrammarSymbols() call Antlr3.Tool.Grammar.DefineGrammarSymbols() call Antlr3.Tool.Grammar.DefineGrammarSymbols() call Antlr3.Tool.Grammar.DefineGrammarSymbols() for = != && < ++ decl_stmt Antlr3.Tool.Grammar = call Antlr3.Tool.Grammar.CheckNameSpaceAndActions() call Antlr3.Tool.Grammar.CheckNameSpaceAndActions() call Antlr3.Tool.Grammar.CheckNameSpaceAndActions() call Antlr3.Tool.Grammar.CheckNameSpaceAndActions() call Antlr3.Tool.Grammar.CheckNameSpaceAndActions() decl IList Grammar public virtual public virtual if return decl_stmt System.Collections.Generic.IList < = call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() call Antlr3.Tool.CompositeGrammarTree.GetPostOrderedGrammarList() for = != && < ++ decl_stmt Antlr3.Tool.Grammar = call Antlr3.Tool.Grammar.CreateRuleStartAndStopNFAStates() call Antlr3.Tool.Grammar.CreateRuleStartAndStopNFAStates() call Antlr3.Tool.Grammar.CreateRuleStartAndStopNFAStates() call Antlr3.Tool.Grammar.CreateRuleStartAndStopNFAStates() call Antlr3.Tool.Grammar.CreateRuleStartAndStopNFAStates() for = != && < ++ decl_stmt Antlr3.Tool.Grammar = call Antlr3.Tool.Grammar.BuildNFA() call Antlr3.Tool.Grammar.BuildNFA() call Antlr3.Tool.Grammar.BuildNFA() call Antlr3.Tool.Grammar.BuildNFA() call Antlr3.Tool.Grammar.BuildNFA() decl HashSet public public decl_stmt System.Collections.Generic.HashSet < = new < decl HashSet decl HashSet protected virtual protected virtual < decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt System.Collections.Generic.HashSet < = new < foreach in if ! call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() else if ! call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() = if != foreach in var public virtual public virtual decl_stmt var = + var var public virtual < public virtual < decl_stmt var = new < foreach in + + + + + + + call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if != foreach in decl_stmt var = call var.addAll() call var.addAll() call var.addAll() call var.addAll() call var.addAll() return string var var public virtual public virtual decl_stmt var = new < decl_stmt var = new < foreach in decl_stmt string = call var.add() call var.add() call var.add() call var.add() call var.add() + var decl HashSet public virtual public virtual < < decl_stmt var = new < foreach in if ! call var.add() call var.add() call var.add() call var.add() call var.add() + + + decl_stmt System.Collections.Generic.HashSet < = new < foreach in if call var.contains() call var.contains() call var.contains() call var.contains() call var.contains() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() foreach in if call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() if != foreach in decl HashSet public virtual public virtual decl_stmt System.Collections.Generic.HashSet < = if == = new < = call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() public virtual < < public virtual < < return public < public < return