Antlr3.Analysis System using System.Collections.Generic using System.Linq using Antlr3.Misc using Antlr3.Tool.Grammar Antlr3.Tool.GrammarType System.Text.StringBuilder class Antlr3.Analysis.DFAState super super State Reachable bool int bool decl IList bool decl OrderedHashSet decl OrderedHashSet int decl IList decl HashSet int DFA bool int int return return = return call decl OrderedHashSet.Select() call decl OrderedHashSet.Select() call decl OrderedHashSet.Select() call decl OrderedHashSet.Select() call decl OrderedHashSet.Select() return return call decl OrderedHashSet.Where() call decl OrderedHashSet.Where() call decl OrderedHashSet.Where() call decl OrderedHashSet.Where() call decl OrderedHashSet.Where() return = return = return = return = if > = return return = return = return return return = public virtual public virtual = = = return public override public override call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() public virtual public virtual call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() new return - public override public override return public virtual public virtual call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() Label public virtual public virtual if call decl OrderedHashSet.Contains() call decl OrderedHashSet.Contains() call decl OrderedHashSet.Contains() call decl OrderedHashSet.Contains() call decl OrderedHashSet.Contains() return call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() if < = if != = += + if != decl_stmt Antlr3.Analysis.Label = if ! || call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if == = NFAConfiguration public virtual public virtual decl_stmt Antlr3.Analysis.NFAConfiguration = new return Label int IIntSet IIntSet Label IIntSet IIntSet IIntSet protected virtual protected virtual if == = new < if call decl OrderedHashSet.Contains() call decl OrderedHashSet.Contains() call decl OrderedHashSet.Contains() call decl OrderedHashSet.Contains() call decl OrderedHashSet.Contains() return decl_stmt Antlr3.Misc.IIntSet = decl_stmt Antlr3.Misc.IIntSet = decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.Label = if ! continue decl_stmt Antlr3.Misc.IIntSet = decl_stmt Antlr3.Misc.IIntSet = call Antlr3.Misc.IIntSet.And(IIntSet) call Antlr3.Misc.IIntSet.And(IIntSet) call Antlr3.Misc.IIntSet.And(IIntSet) call Antlr3.Misc.IIntSet.And(IIntSet) call Antlr3.Misc.IIntSet.And(IIntSet) = new decl_stmt Antlr3.Misc.IIntSet = call Antlr3.Misc.IIntSet.Subtract(IIntSet) call Antlr3.Misc.IIntSet.Subtract(IIntSet) call Antlr3.Misc.IIntSet.Subtract(IIntSet) call Antlr3.Misc.IIntSet.Subtract(IIntSet) call Antlr3.Misc.IIntSet.Subtract(IIntSet) if ! decl_stmt Antlr3.Analysis.Label = new call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() = call Antlr3.Misc.IIntSet.Subtract(IIntSet) call Antlr3.Misc.IIntSet.Subtract(IIntSet) call Antlr3.Misc.IIntSet.Subtract(IIntSet) call Antlr3.Misc.IIntSet.Subtract(IIntSet) call Antlr3.Misc.IIntSet.Subtract(IIntSet) if break = if ! decl_stmt Antlr3.Analysis.Label = new call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() public override public override if == return return DFAState public override public override decl_stmt Antlr3.Analysis.DFAState = as if == return if return if return if call decl OrderedHashSet.SequenceEqual() call decl OrderedHashSet.SequenceEqual() call decl OrderedHashSet.SequenceEqual() call decl OrderedHashSet.SequenceEqual() call decl OrderedHashSet.SequenceEqual() return return int NFAConfiguration int public virtual public virtual if return decl_stmt int = decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = if continue if == = else if != return = return int NFAConfiguration int public virtual public virtual decl_stmt int = decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = if == = else if != return return int protected internal virtual < protected internal virtual < decl_stmt int = if > && == return new < else if || return new < else return int decl HashSet int NFAConfiguration int decl MultiMap decl IList int decl ICollection NFAConfiguration NFAConfiguration bool NFAConfiguration int protected virtual < protected virtual < decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt int = if <= return decl_stmt Antlr4.StringTemplate.Misc.MultiMap < = new < for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = decl_stmt int = call decl MultiMap.Map() call decl MultiMap.Map() call decl MultiMap.Map() call decl MultiMap.Map() call decl MultiMap.Map() decl_stmt System.Collections.Generic.ICollection < = call decl MultiMap.Keys() call decl MultiMap.Keys() call decl MultiMap.Keys() call decl MultiMap.Keys() call decl MultiMap.Keys() call decl MultiMap.Keys() call decl MultiMap.Keys() call decl MultiMap.Keys() call decl MultiMap.Keys() decl_stmt int = foreach in decl_stmt bool = decl_stmt System.Collections.Generic.IList < call decl MultiMap.TryGetValue() call decl MultiMap.TryGetValue() call decl MultiMap.TryGetValue() call decl MultiMap.TryGetValue() call decl MultiMap.TryGetValue() out decl_stmt int = decl_stmt int = for = < && && ++ decl_stmt Antlr3.Analysis.NFAConfiguration = if == = else if != if != || ! call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() ++ = if ! = if == return foreach in decl_stmt System.Collections.Generic.IList < call decl MultiMap.TryGetValue() call decl MultiMap.TryGetValue() call decl MultiMap.TryGetValue() call decl MultiMap.TryGetValue() call decl MultiMap.TryGetValue() out decl_stmt int = if != = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = for = + < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = if != && call NFAConfiguration.Context() call NFAConfiguration.Context() call NFAConfiguration.Context() call NFAConfiguration.Context() call NFAConfiguration.Context() call NFAConfiguration.Context() call NFAConfiguration.Context() call NFAConfiguration.Context() call NFAConfiguration.Context() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() if == return return SemanticContext NFAConfiguration decl HashSet int public virtual < public virtual < decl_stmt int = decl_stmt System.Collections.Generic.HashSet < = new < for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = decl_stmt Antlr3.Analysis.SemanticContext = if != && call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() if == return return SemanticContext NFAConfiguration SemanticContext int public virtual public virtual decl_stmt Antlr3.Analysis.SemanticContext = decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = decl_stmt Antlr3.Analysis.SemanticContext = if == return else if || ! if == = else = if is return return NFAConfiguration StringBuilder public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int)