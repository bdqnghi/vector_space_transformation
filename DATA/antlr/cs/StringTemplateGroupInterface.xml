Antlr3.ST System using System.Collections.Generic using System.Linq using Antlr3.ST.Extensions using Antlr3.ST.Language using System.Diagnostics.DebuggerDisplayAttribute System.Text.StringBuilder System.IO.TextReader class attribute Antlr3.ST.StringTemplateGroupInterface StringTemplateGroupInterface IStringTemplateErrorListener IStringTemplateErrorListener string string decl Dictionary public public if != public public return = return = InterfaceLexer InterfaceParser string protected virtual protected virtual try decl_stmt InterfaceLexer = new new decl_stmt Antlr3.ST.Language.InterfaceParser = new new call InterfaceParser.groupInterface() call InterfaceParser.groupInterface() call InterfaceParser.groupInterface() call InterfaceParser.groupInterface() call InterfaceParser.groupInterface() catch decl_stmt string = if != = + + + TemplateDefinition public virtual public virtual < decl_stmt TemplateDefinition = new = decl string public virtual < public virtual < decl_stmt string = template=>!templateoptional&&!groupIsDefinedtemplatename template=>templatename return == : var bool FormalArgument decl List StringTemplate public virtual < public virtual < decl_stmt System.Collections.Generic.List < = new < foreach in if group decl_stmt Antlr3.ST.StringTemplate = group decl_stmt var = decl_stmt bool = if != && == || == && != || != = if ! foreach in decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument if ! out || == = break if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if == = return public virtual public virtual public virtual public virtual if != call Antlr3.ST.IStringTemplateErrorListener.Error(string,Exception) call Antlr3.ST.IStringTemplateErrorListener.Error(string,Exception) call Antlr3.ST.IStringTemplateErrorListener.Error(string,Exception) call Antlr3.ST.IStringTemplateErrorListener.Error(string,Exception) call Antlr3.ST.IStringTemplateErrorListener.Error(string,Exception) else + if != StringBuilder public override public override decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + foreach in call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) int StringBuilder StringBuilder protected virtual protected virtual decl_stmt System.Text.StringBuilder = new if call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt int = foreach in if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int)