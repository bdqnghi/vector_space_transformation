Antlr.Runtime System.Diagnostics.ConditionalAttribute class Antlr.Runtime.Lexer super super BaseRecognizer super ITokenSource ICharStream if != return return call Antlr.Runtime.ICharStream.Substring(int,int) call Antlr.Runtime.ICharStream.Substring(int,int) call Antlr.Runtime.ICharStream.Substring(int,int) call Antlr.Runtime.ICharStream.Substring(int,int) call Antlr.Runtime.ICharStream.Substring(int,int) - = return = return = public override public override if != call ICharStream.Seek() call ICharStream.Seek() call ICharStream.Seek() call ICharStream.Seek() call ICharStream.Seek() if == return = = = = - = - = - = IToken public virtual public virtual for = = = = = = if call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() == decl_stmt Antlr.Runtime.IToken = new = = return try if == else if == continue return catch catch public virtual public virtual = return = = return public virtual public virtual = IToken public virtual public virtual decl_stmt Antlr.Runtime.IToken = new - = = = return int MismatchedTokenException public virtual public virtual decl_stmt int = while < if call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() != if > = return decl_stmt Antlr.Runtime.MismatchedTokenException = new throw ++ call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() = public virtual public virtual call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() MismatchedTokenException public virtual public virtual if call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() != if > = return decl_stmt Antlr.Runtime.MismatchedTokenException = new throw call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() = MismatchedRangeException public virtual public virtual if call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() < || call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() > if > = return decl_stmt Antlr.Runtime.MismatchedRangeException = new throw call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() = return public override public override EarlyExitException string MismatchedRangeException MismatchedSetException NoViableAltException MismatchedTokenException public override public override decl_stmt string = if is decl_stmt Antlr.Runtime.MismatchedTokenException = = + + + else if is decl_stmt Antlr.Runtime.NoViableAltException = = + else if is decl_stmt Antlr.Runtime.EarlyExitException = = + else if is decl_stmt Antlr.Runtime.MismatchedNotSetException = = + + + else if is decl_stmt Antlr.Runtime.MismatchedSetException = = + + + else if is decl_stmt Antlr.Runtime.MismatchedRangeException = = + + + + + else = return string public virtual public virtual decl_stmt string = char switch case = break case = break case = break case = break return + + public virtual public virtual call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() string public virtual public virtual decl_stmt string = char call Antlr.Runtime.ICharStream.LT(int) call Antlr.Runtime.ICharStream.LT(int) call Antlr.Runtime.ICharStream.LT(int) call Antlr.Runtime.ICharStream.LT(int) call Antlr.Runtime.ICharStream.LT(int) + + + + string public virtual public virtual decl_stmt string = char call Antlr.Runtime.ICharStream.LT(int) call Antlr.Runtime.ICharStream.LT(int) call Antlr.Runtime.ICharStream.LT(int) call Antlr.Runtime.ICharStream.LT(int) call Antlr.Runtime.ICharStream.LT(int) + + + +