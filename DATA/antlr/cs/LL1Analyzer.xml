Antlr3.Analysis System.Collections.Generic using Antlr3.Grammars.ANTLRParser System.Console Antlr3.Tool.Grammar Antlr3.Tool.GrammarType Antlr3.Misc.IIntSet Antlr3.Misc.IntervalSet Antlr3.Tool.Rule class Antlr3.Analysis.LL1Analyzer int Grammar int decl HashSet int decl IDictionary decl IDictionary LookaheadSet Rule public virtual public virtual if == for = decl_stmt Antlr3.Tool.Rule = if continue decl_stmt Antlr3.Analysis.LookaheadSet = + + + decl HashSet Rule Rule Grammar public < public < decl_stmt System.Collections.Generic.HashSet < = new < for = decl_stmt Antlr3.Tool.Rule = for = < ++ decl_stmt Antlr3.Tool.Grammar = decl_stmt Antlr3.Tool.Rule = call Grammar.getRule() call Grammar.getRule() call Grammar.getRule() call Grammar.getRule() call Grammar.getRule() if != if ! call Rule.FIRST() call Rule.FIRST() call Rule.FIRST() call Rule.FIRST() call Rule.FIRST() call Rule.FIRST() call Rule.FIRST() call Rule.FIRST() call Rule.FIRST() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() return decl Set decl Set String Grammar decl Set public < public < decl_stmt System.Data.Common.Utils.Set < = decl_stmt System.Data.Common.Utils.Set < = new for = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() decl_stmt System.String = for = < ++ decl_stmt Antlr3.Tool.Grammar = decl_stmt System.Data.Common.Utils.Set < = call Grammar.ruleSensitivity() call Grammar.ruleSensitivity() call Grammar.ruleSensitivity() call Grammar.ruleSensitivity() call Grammar.ruleSensitivity() call Grammar.ruleSensitivity() call Grammar.ruleSensitivity() call Grammar.ruleSensitivity() call Grammar.ruleSensitivity() if != call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() return public public if == = return LookaheadSet public public call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() decl_stmt Antlr3.Analysis.LookaheadSet = return LookaheadSet public public decl_stmt Antlr3.Analysis.LookaheadSet call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if != return = = return LookaheadSet LookaheadSet public public if + + call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() decl_stmt Antlr3.Analysis.LookaheadSet = if != && call Antlr3.Analysis.LookaheadSet.Member(int) call Antlr3.Analysis.LookaheadSet.Member(int) call Antlr3.Analysis.LookaheadSet.Member(int) call Antlr3.Analysis.LookaheadSet.Member(int) call Antlr3.Analysis.LookaheadSet.Member(int) decl_stmt Antlr3.Analysis.LookaheadSet = call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call LookaheadSet.Remove() call LookaheadSet.Remove() call LookaheadSet.Remove() call LookaheadSet.Remove() call LookaheadSet.Remove() = else if == && call Antlr3.Analysis.LookaheadSet.Member(int) call Antlr3.Analysis.LookaheadSet.Member(int) call Antlr3.Analysis.LookaheadSet.Member(int) call Antlr3.Analysis.LookaheadSet.Member(int) call Antlr3.Analysis.LookaheadSet.Member(int) = new if + + + call Antlr3.Analysis.LookaheadSet.ToString(Grammar) call Antlr3.Analysis.LookaheadSet.ToString(Grammar) call Antlr3.Analysis.LookaheadSet.ToString(Grammar) call Antlr3.Analysis.LookaheadSet.ToString(Grammar) call Antlr3.Analysis.LookaheadSet.ToString(Grammar) return LookaheadSet LookaheadSet LookaheadSet RuleClosureTransition int LookaheadSet NFAState IIntSet Transition Transition protected virtual protected virtual if ! && if == return new return new if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() return new call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() decl_stmt Antlr3.Analysis.Transition = if == return if decl_stmt int = return new if decl_stmt Antlr3.Misc.IIntSet = return new decl_stmt Antlr3.Analysis.LookaheadSet = if ! && is call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if == = if ! && is = decl_stmt Antlr3.Analysis.LookaheadSet = if != && call Antlr3.Analysis.LookaheadSet.Member(int) call Antlr3.Analysis.LookaheadSet.Member(int) call Antlr3.Analysis.LookaheadSet.Member(int) call Antlr3.Analysis.LookaheadSet.Member(int) call Antlr3.Analysis.LookaheadSet.Member(int) if is decl_stmt Antlr3.Analysis.RuleClosureTransition = decl_stmt Antlr3.Analysis.NFAState = decl_stmt Antlr3.Analysis.LookaheadSet = call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call LookaheadSet.Remove() call LookaheadSet.Remove() call LookaheadSet.Remove() call LookaheadSet.Remove() call LookaheadSet.Remove() = decl_stmt Antlr3.Analysis.Transition = if != decl_stmt Antlr3.Analysis.LookaheadSet = call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) call Antlr3.Analysis.LookaheadSet.OrInPlace(LookaheadSet) = return == new : Rule public public call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() decl_stmt Antlr3.Tool.Rule = return == RuleClosureTransition Transition int SemanticContext decl SemanticContext NFAState decl Predicate Transition int protected virtual protected virtual if ! && if == return return if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() return call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() decl_stmt Antlr3.Analysis.Transition = if == return if ! || return if decl_stmt Antlr3.Analysis.SemanticContext = decl_stmt System.Data.Query.PlanCompiler.Predicate = if != return decl_stmt int = if == return if == if is decl_stmt Antlr3.Analysis.RuleClosureTransition = decl_stmt Antlr3.Analysis.NFAState = decl_stmt int = if == return decl_stmt Antlr3.Analysis.Transition = if != decl_stmt int = if == return return public public call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() return Transition SemanticContext SemanticContext SemanticContext Transition protected virtual protected virtual if return if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() return call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() decl_stmt Antlr3.Analysis.Transition = if == return if ! || return decl_stmt Antlr3.Analysis.SemanticContext = decl_stmt Antlr3.Analysis.SemanticContext = decl_stmt Antlr3.Analysis.SemanticContext = if = if == && == = = decl_stmt Antlr3.Analysis.Transition = if != = return