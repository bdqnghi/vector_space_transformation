Antlr3.Misc System.Collections.Generic using System.Linq using System.ArgumentException Antlr3.Tool.Grammar Antlr3.Analysis.Label System.Math System.NotImplementedException System.Text.StringBuilder class Antlr3.Misc.IntervalSet super super IIntSet Interval decl IList IntervalSet return call decl IList.Sum() call decl IList.Sum() call decl IList.Sum() call decl IList.Sum() call decl IList.Sum() - + return return return return public static public static return public static public static return IntervalSet public static public static decl_stmt Antlr3.Misc.IntervalSet = new new < return public virtual public virtual public virtual public virtual Interval Interval Interval protected virtual protected virtual if < return for = < ++ decl_stmt Antlr4.StringTemplate.Misc.Interval = if return if || ! decl_stmt Antlr4.StringTemplate.Misc.Interval = = while < - ++ decl_stmt Antlr4.StringTemplate.Misc.Interval = if ! call Interval.Adjacent() call Interval.Adjacent() call Interval.Adjacent() call Interval.Adjacent() call Interval.Adjacent() && call Interval.Disjoint() call Interval.Disjoint() call Interval.Disjoint() call Interval.Disjoint() call Interval.Disjoint() break call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() -- = call Interval.Union() call Interval.Union() call Interval.Union() call Interval.Union() call Interval.Union() return if call decl IList.Insert() call decl IList.Insert() call decl IList.Insert() call decl IList.Insert() call decl IList.Insert() return call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() Interval Interval Interval int protected virtual protected virtual if < return decl_stmt int = for = < ++ decl_stmt Antlr4.StringTemplate.Misc.Interval = if return if || ! decl_stmt Antlr4.StringTemplate.Misc.Interval = = if + < ++ decl_stmt Antlr4.StringTemplate.Misc.Interval = if call Interval.adjacent() call Interval.adjacent() call Interval.adjacent() call Interval.adjacent() call Interval.adjacent() || ! call Interval.disjoint() call Interval.disjoint() call Interval.disjoint() call Interval.disjoint() call Interval.disjoint() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() call decl IList.RemoveAt() -- = call Interval.union() call Interval.union() call Interval.union() call Interval.union() call Interval.union() return if call decl IList.Insert() call decl IList.Insert() call decl IList.Insert() call decl IList.Insert() call decl IList.Insert() return call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() Interval IntervalSet int public virtual public virtual if == return if ! is throw new + + decl_stmt Antlr3.Misc.IntervalSet = decl_stmt int = for = < ++ decl_stmt Antlr4.StringTemplate.Misc.Interval = public virtual public virtual return Interval Interval IntervalSet int public virtual public virtual if < || || || || || return decl_stmt int = if == return decl_stmt Antlr3.Misc.IntervalSet = new decl_stmt Antlr4.StringTemplate.Misc.Interval = if > call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() - for = < ++ if - >= break if <= continue if - == - continue call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() - + - decl_stmt Antlr4.StringTemplate.Misc.Interval = - if < call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() + return public virtual public virtual return Interval bool Interval Interval var var IntervalSet public public if == || ! is return decl_stmt Antlr3.Misc.IntervalSet = new decl_stmt var = decl_stmt var = call decl IList.GetEnumerator() call decl IList.GetEnumerator() call decl IList.GetEnumerator() call decl IList.GetEnumerator() call decl IList.GetEnumerator() decl_stmt Antlr4.StringTemplate.Misc.Interval = decl_stmt Antlr4.StringTemplate.Misc.Interval = if call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() = if call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() = while != if == || call Interval.disjoint() call Interval.disjoint() call Interval.disjoint() call Interval.disjoint() call Interval.disjoint() if == call IntervalSet.add() call IntervalSet.add() call IntervalSet.add() call IntervalSet.add() call IntervalSet.add() = if call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() = else if call Interval.startsBeforeDisjoint() call Interval.startsBeforeDisjoint() call Interval.startsBeforeDisjoint() call Interval.startsBeforeDisjoint() call Interval.startsBeforeDisjoint() call IntervalSet.add() call IntervalSet.add() call IntervalSet.add() call IntervalSet.add() call IntervalSet.add() = if call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() = else = if call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() = else if call Interval.properlyContains() call Interval.properlyContains() call Interval.properlyContains() call Interval.properlyContains() call Interval.properlyContains() call IntervalSet.add() call IntervalSet.add() call IntervalSet.add() call IntervalSet.add() call IntervalSet.add() - decl_stmt Antlr4.StringTemplate.Misc.Interval = new + = = if call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() = else if call Interval.properlyContains() call Interval.properlyContains() call Interval.properlyContains() call Interval.properlyContains() call Interval.properlyContains() = if call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() = else call IntervalSet.add() call IntervalSet.add() call IntervalSet.add() call IntervalSet.add() call IntervalSet.add() call Interval.differenceNotProperlyContained() call Interval.differenceNotProperlyContained() call Interval.differenceNotProperlyContained() call Interval.differenceNotProperlyContained() call Interval.differenceNotProperlyContained() decl_stmt bool = if call Interval.startsBeforeNonDisjoint() call Interval.startsBeforeNonDisjoint() call Interval.startsBeforeNonDisjoint() call Interval.startsBeforeNonDisjoint() call Interval.startsBeforeNonDisjoint() || > = = if call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() = if = if call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() call var.MoveNext() = return IntervalSet public public decl_stmt Antlr3.Misc.IntervalSet = new call Antlr3.Misc.IntervalSet.AddAll(IIntSet) call Antlr3.Misc.IntervalSet.AddAll(IIntSet) call Antlr3.Misc.IntervalSet.AddAll(IIntSet) call Antlr3.Misc.IntervalSet.AddAll(IIntSet) call Antlr3.Misc.IntervalSet.AddAll(IIntSet) call Antlr3.Misc.IntervalSet.AddAll(IIntSet) call Antlr3.Misc.IntervalSet.AddAll(IIntSet) call Antlr3.Misc.IntervalSet.AddAll(IIntSet) call Antlr3.Misc.IntervalSet.AddAll(IIntSet) call Antlr3.Misc.IntervalSet.AddAll(IIntSet) return var int int int Interval var Interval int IntervalSet public public if == return decl_stmt var = decl_stmt var = decl_stmt Antlr3.Misc.IntervalSet = new decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = while < && < decl_stmt Antlr4.StringTemplate.Misc.Interval = decl_stmt Antlr4.StringTemplate.Misc.Interval = if call Interval.StartsBeforeDisjoint() call Interval.StartsBeforeDisjoint() call Interval.StartsBeforeDisjoint() call Interval.StartsBeforeDisjoint() call Interval.StartsBeforeDisjoint() ++ else if call Interval.StartsBeforeDisjoint() call Interval.StartsBeforeDisjoint() call Interval.StartsBeforeDisjoint() call Interval.StartsBeforeDisjoint() call Interval.StartsBeforeDisjoint() ++ else if call Interval.ProperlyContains() call Interval.ProperlyContains() call Interval.ProperlyContains() call Interval.ProperlyContains() call Interval.ProperlyContains() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() ++ else if call Interval.ProperlyContains() call Interval.ProperlyContains() call Interval.ProperlyContains() call Interval.ProperlyContains() call Interval.ProperlyContains() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() call IntervalSet.Intervals() ++ else if ! call Interval.Disjoint() call Interval.Disjoint() call Interval.Disjoint() call Interval.Disjoint() call Interval.Disjoint() call Antlr3.Misc.IntervalSet.Add(int) call Antlr3.Misc.IntervalSet.Add(int) call Antlr3.Misc.IntervalSet.Add(int) call Antlr3.Misc.IntervalSet.Add(int) call Antlr3.Misc.IntervalSet.Add(int) call Interval.Intersection() call Interval.Intersection() call Interval.Intersection() call Interval.Intersection() call Interval.Intersection() if call Interval.StartsAfterNonDisjoint() call Interval.StartsAfterNonDisjoint() call Interval.StartsAfterNonDisjoint() call Interval.StartsAfterNonDisjoint() call Interval.StartsAfterNonDisjoint() ++ else if call Interval.StartsAfterNonDisjoint() call Interval.StartsAfterNonDisjoint() call Interval.StartsAfterNonDisjoint() call Interval.StartsAfterNonDisjoint() call Interval.StartsAfterNonDisjoint() ++ return Interval int int int public virtual public virtual decl_stmt int = for = < ++ decl_stmt Antlr4.StringTemplate.Misc.Interval = decl_stmt int = decl_stmt int = if < break if >= && <= return return return == || == Interval public virtual public virtual if != && == decl_stmt Antlr4.StringTemplate.Misc.Interval = if == return return Interval public virtual public virtual if return decl_stmt Antlr4.StringTemplate.Misc.Interval = - return Interval int int int public virtual public virtual if return decl_stmt int = for = < ++ decl_stmt Antlr4.StringTemplate.Misc.Interval = decl_stmt int = decl_stmt int = for = <= ++ if >= return return IntervalSet public override public override decl_stmt Antlr3.Misc.IntervalSet = as if == return return call decl IList.SequenceEqual() call decl IList.SequenceEqual() call decl IList.SequenceEqual() call decl IList.SequenceEqual() call decl IList.SequenceEqual() public override public override return call decl IList.GetHashCode() call decl IList.GetHashCode() call decl IList.GetHashCode() call decl IList.GetHashCode() call decl IList.GetHashCode() public override public override return int int StringBuilder public virtual public virtual if == || == return decl_stmt System.Text.StringBuilder = new if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) foreach in if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt int = decl_stmt int = if == if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + + else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + + if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) int decl List public < public < decl_stmt int = decl_stmt System.Collections.Generic.List < = new < foreach in for = <= ++ call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return Interval int int int int public virtual public virtual decl_stmt int = decl_stmt int = for = < ++ decl_stmt Antlr4.StringTemplate.Misc.Interval = decl_stmt int = decl_stmt int = for = <= ++ if == return ++ return - int int Interval int int decl int public public decl_stmt int = new decl_stmt int = decl_stmt int = for = < ++ decl_stmt Antlr4.StringTemplate.Misc.Interval = decl_stmt int = decl_stmt int = for = <= ++ = ++ return decl BitSet int decl Antlr Interval decl Runtime public public decl_stmt Antlr3.Misc.BitSet = new + decl_stmt int = for = < ++ decl_stmt Antlr4.StringTemplate.Misc.Interval = decl_stmt int = decl_stmt int = for = <= ++ call decl Antlr.Add() call decl Antlr.Add() call decl Antlr.Add() call decl Antlr.Add() call decl Antlr.Add() return public virtual public virtual throw new < < < < call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() call decl IList.Clear() < < return < < throw new return < < return public < public < return call decl IList.SelectMany() call decl IList.SelectMany() call decl IList.SelectMany() call decl IList.SelectMany() call decl IList.SelectMany() - + return