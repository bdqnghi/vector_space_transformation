Antlr3.Tool System.Collections.Generic using Antlr3.Grammars.ANTLRParser Antlr3.Analysis.NFAState Antlr3.Analysis.RuleClosureTransition Antlr3.Analysis.Transition class Antlr3.Tool.GrammarSanity decl HashSet Grammar decl HashSet Rule decl List public virtual < < public virtual < < call Antlr3.Tool.Grammar.BuildNFA() call Antlr3.Tool.Grammar.BuildNFA() call Antlr3.Tool.Grammar.BuildNFA() call Antlr3.Tool.Grammar.BuildNFA() call Antlr3.Tool.Grammar.BuildNFA() = new < decl_stmt System.Collections.Generic.List < < = new < < for = < ++ decl_stmt Antlr3.Tool.Rule = if != = new < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() decl_stmt System.Collections.Generic.HashSet < = new < if > return NFAState bool Rule Transition Transition bool RuleClosureTransition protected virtual protected virtual < < < if return if return decl_stmt bool = decl_stmt Antlr3.Analysis.Transition = if is decl_stmt Antlr3.Analysis.RuleClosureTransition = decl_stmt Antlr3.Tool.Rule = if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() else call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() decl_stmt bool = new < call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() if decl_stmt Antlr3.Analysis.NFAState = |= else if || |= decl_stmt Antlr3.Analysis.Transition = if != |= return decl HashSet bool decl HashSet protected virtual protected virtual < < decl_stmt bool = for = < ++ decl_stmt System.Collections.Generic.HashSet < = if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() = if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() = if ! decl_stmt System.Collections.Generic.HashSet < = new < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) if == if != if != && == else if != && != else if == if != if != return if != if != && == else if != && != GrammarAST public virtual public virtual if decl_stmt Antlr3.Tool.GrammarAST = + if ! return switch case case if return break case case case case case + return protected virtual protected virtual switch case case case case case return default: return protected virtual protected virtual while == || == = + if == return return