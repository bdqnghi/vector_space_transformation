Antlr.Runtime.Tree System.Collections.Generic using System.Text.StringBuilder class Antlr.Runtime.Tree.DotTreeGenerator int string string decl Dictionary decl string string StringBuilder var var public virtual public virtual decl_stmt System.Text.StringBuilder = new foreach in call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) = decl_stmt var = = decl_stmt var = foreach in call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) foreach in call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public virtual public virtual return new object int protected virtual < protected virtual < if == yield decl_stmt int = if == yield yield for = < ++ decl_stmt object = yield foreach in yield string string string int string object protected virtual < protected virtual < if == yield decl_stmt int = if == yield decl_stmt string = + decl_stmt string = for = < ++ decl_stmt object = decl_stmt string = decl_stmt string = + yield foreach in yield string string protected virtual protected virtual decl_stmt string = decl_stmt string = + return int protected virtual protected virtual decl_stmt int if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out return else = ++ return - protected virtual protected virtual if != = = = = if > = + + - return