Antlr3.Targets System.Collections.Generic using Antlr3.Extensions using Antlr3.Codegen.CodeGenerator Antlr3.Tool.Grammar Antlr3.Tool.GrammarType System.Text.StringBuilder Antlr4.StringTemplate.Template Antlr3.Codegen.Target class Antlr3.Targets.CTarget super super Target decl List string protected override protected override decl_stmt string = string protected override protected override decl_stmt string = = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() - + public override public override switch case switch case case case case case return break case switch case case case case case return break case switch case case case case case case return break case switch case case case case case return break return int public override public override if = + else decl_stmt int = if < || || = + call int.ToString() call int.ToString() call int.ToString() call int.ToString() call int.ToString() return StringBuilder int string string public override public override decl_stmt int decl_stmt string decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) for = < - ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == ++ switch case case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + = + break case case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break default: call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) int break else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) int call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) = call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() if == - call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() = call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() call decl List.IndexOf() decl_stmt string = + + return protected override protected override if == = if == = if == =