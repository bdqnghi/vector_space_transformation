Antlr4.StringTemplate System.Collections.Generic using System.Linq using System.Runtime.CompilerServices using System.Text.RegularExpressions using Antlr4.StringTemplate.Compiler using Antlr4.StringTemplate.Debug using Antlr4.StringTemplate.Misc using System.ArgumentException System.ArgumentNullException System.Array System.Console System.Globalization.CultureInfo System.Collections.IList System.IO.StringWriter System.IO.TextWriter class Antlr4.StringTemplate.Template object string TemplateGroup CompiledTemplate TemplateDebugState decl object return = return if == throw new = public virtual public virtual return new object AttributeList IList FormalArgument public virtual public virtual if == throw new if >= throw new if if == = new call TemplateDebugState.AddAttributeEvents() call TemplateDebugState.AddAttributeEvents() call TemplateDebugState.AddAttributeEvents() call TemplateDebugState.AddAttributeEvents() call TemplateDebugState.AddAttributeEvents() call TemplateDebugState.AddAttributeEvents() call TemplateDebugState.AddAttributeEvents() call TemplateDebugState.AddAttributeEvents() call TemplateDebugState.AddAttributeEvents() new decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = if = call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) if == throw new + else = call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) if == = new call Antlr4.StringTemplate.Compiler.CompiledTemplate.AddArgument(FormalArgument) call Antlr4.StringTemplate.Compiler.CompiledTemplate.AddArgument(FormalArgument) call Antlr4.StringTemplate.Compiler.CompiledTemplate.AddArgument(FormalArgument) call Antlr4.StringTemplate.Compiler.CompiledTemplate.AddArgument(FormalArgument) call Antlr4.StringTemplate.Compiler.CompiledTemplate.AddArgument(FormalArgument) if == = new else ref = decl_stmt object = if == = return decl_stmt AttributeList = = decl_stmt System.Collections.Generic.IList = as if != call AttributeList.AddRange() call AttributeList.AddRange() call AttributeList.AddRange() call AttributeList.AddRange() call AttributeList.AddRange() < else call AttributeList.Add() call AttributeList.Add() call AttributeList.Add() call AttributeList.Add() call AttributeList.Add() return decl string int int string string Aggregate object int public public params params params if == throw new if == throw new if == throw new decl_stmt int = decl_stmt int = if < || < throw new decl_stmt string = decl_stmt string = + - - = call string.Trim() call string.Trim() call string.Trim() call string.Trim() call string.Trim() decl_stmt string = call string.Split() call string.Split() call string.Split() call string.Split() call string.Split() if == || == throw new if != throw new decl_stmt int = decl_stmt Antlr4.StringTemplate.Misc.Aggregate = new foreach in decl_stmt object = ++ = return FormalArgument public virtual public virtual if == if throw new + return decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) if == throw new + = FormalArgument protected internal virtual protected internal virtual if == throw new + decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) if == throw new + = FormalArgument object public virtual public virtual decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) call Antlr4.StringTemplate.Compiler.CompiledTemplate.TryGetFormalArgument(string) if != decl_stmt object = if == = return return decl IDictionary object public virtual < public virtual < if == return decl_stmt System.Collections.Generic.IDictionary < = new < foreach in decl_stmt object = if == = = return IList AttributeList protected static protected static decl_stmt AttributeList if == = new call AttributeList.Add() call AttributeList.Add() call AttributeList.Add() call AttributeList.Add() call AttributeList.Add() else if == typeof = else if is decl_stmt System.Collections.Generic.IList = = new call AttributeList.AddRange() call AttributeList.AddRange() call AttributeList.AddRange() call AttributeList.AddRange() call AttributeList.AddRange() < else = new call AttributeList.Add() call AttributeList.Add() call AttributeList.Add() call AttributeList.Add() call AttributeList.Add() return return return TemplateFrame Interpreter public virtual public virtual decl_stmt Antlr4.StringTemplate.Interpreter = new decl_stmt Antlr4.StringTemplate.TemplateFrame = new return call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) TemplateFrame Interpreter public virtual public virtual decl_stmt Antlr4.StringTemplate.Interpreter = new decl_stmt Antlr4.StringTemplate.TemplateFrame = new return call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) TemplateFrame Interpreter public virtual public virtual decl_stmt Antlr4.StringTemplate.Interpreter = new new decl_stmt Antlr4.StringTemplate.TemplateFrame = new return call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) TemplateFrame Interpreter public virtual public virtual decl_stmt Antlr4.StringTemplate.Interpreter = new new decl_stmt Antlr4.StringTemplate.TemplateFrame = new return call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) public virtual public virtual return public virtual public virtual return ITemplateWriter public virtual public virtual decl_stmt Antlr4.StringTemplate.ITemplateWriter = new = return public virtual public virtual return public virtual public virtual return public virtual public virtual return StringWriter ITemplateWriter public virtual public virtual decl_stmt System.IO.StringWriter = new decl_stmt Antlr4.StringTemplate.ITemplateWriter = new = return call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() public virtual < public virtual < return public virtual < public virtual < return public virtual < public virtual < return public virtual < public virtual < return StringWriter ITemplateWriter public virtual < public virtual < decl_stmt System.IO.StringWriter = new decl_stmt Antlr4.StringTemplate.ITemplateWriter = new = return TemplateFrame Interpreter public virtual < public virtual < decl_stmt Antlr4.StringTemplate.Interpreter = new decl_stmt Antlr4.StringTemplate.TemplateFrame = new call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) call Antlr4.StringTemplate.Interpreter.Execute(ITemplateWriter,TemplateFrame) return call Interpreter.GetEvents() call Interpreter.GetEvents() call Interpreter.GetEvents() call Interpreter.GetEvents() call Interpreter.GetEvents() string string public override public override if == return decl_stmt string = if != = call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() decl_stmt string = if = + return public static public static template params params params return AutoIndentWriterNoWrap template attributes int Template public static public static template params params params template= , , decl_stmt Antlr4.StringTemplate.Template = new template decl_stmt int = foreach in call Antlr4.StringTemplate.Template.Add(string,object) call Antlr4.StringTemplate.Template.Add(string,object) call Antlr4.StringTemplate.Template.Add(string,object) call Antlr4.StringTemplate.Template.Add(string,object) call Antlr4.StringTemplate.Template.Add(string,object) + ++ return call Antlr4.StringTemplate.Template.Render(CultureInfo) call Antlr4.StringTemplate.Template.Render(CultureInfo) call Antlr4.StringTemplate.Template.Render(CultureInfo) call Antlr4.StringTemplate.Template.Render(CultureInfo) call Antlr4.StringTemplate.Template.Render(CultureInfo)