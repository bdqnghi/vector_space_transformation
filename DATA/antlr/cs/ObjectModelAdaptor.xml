Antlr4.StringTemplate.Misc System.Collections.Generic using System.Linq using System.Linq.Expressions using System.ArgumentNullException System.Reflection.FieldInfo System.Reflection.MethodInfo System.Reflection.PropertyInfo System.Type class Antlr4.StringTemplate.Misc.ObjectModelAdaptor super super IModelAdaptor decl Dictionary Type var object public virtual public virtual if == throw new decl_stmt System.Type = if == throw new ?? decl_stmt object = decl_stmt var = if != = else throw new return FieldInfo bool decl System PropertyInfo decl Dictionary var string MethodInfo private static < private static < if == throw new if == throw new lock decl_stmt System.Collections.Generic.Dictionary < < decl_stmt System < = if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out return else = new < < = decl_stmt string = + decl_stmt bool = ! decl_stmt System.Reflection.MethodInfo = if == decl_stmt System.Reflection.PropertyInfo = if == && = if != = call System.Reflection.PropertyInfo.GetGetMethod() call System.Reflection.PropertyInfo.GetGetMethod() call System.Reflection.PropertyInfo.GetGetMethod() call System.Reflection.PropertyInfo.GetGetMethod() call System.Reflection.PropertyInfo.GetGetMethod() if == = + if == && = + if == = + if == && = + if != = else = new typeof string if == decl_stmt var = if != = call var.GetGetMethod() call var.GetGetMethod() call var.GetGetMethod() call var.GetGetMethod() call var.GetGetMethod() if != = else decl_stmt System.Reflection.FieldInfo = if == = + if != = = return var private static private static if == throw new decl_stmt var = return != && > && == typeof string UnaryExpression ParameterExpression decl Expression private static < private static < decl_stmt Microsoft.Scripting.Ast.ParameterExpression = typeof object decl_stmt Microsoft.Scripting.Ast.UnaryExpression = ! : decl_stmt Microsoft.Scripting.Ast.Expression < < = < < typeof object return call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() UnaryExpression ParameterExpression decl Expression private static < private static < decl_stmt Microsoft.Scripting.Ast.ParameterExpression = typeof object decl_stmt Microsoft.Scripting.Ast.UnaryExpression = ! : decl_stmt Microsoft.Scripting.Ast.Expression < < = < < typeof object return call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() UnaryExpression ParameterExpression decl Expression private static < private static < decl_stmt Microsoft.Scripting.Ast.ParameterExpression = typeof object decl_stmt Microsoft.Scripting.Ast.UnaryExpression = ! : decl_stmt Microsoft.Scripting.Ast.Expression < < = < < typeof object return call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile()