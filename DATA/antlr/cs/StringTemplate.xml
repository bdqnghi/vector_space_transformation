Antlr3.ST System using System.Collections.Generic using System.Linq using Antlr.Runtime.JavaExtensions using Antlr3.ST.Extensions using Antlr3.ST.Language using Antlr.Runtime.CommonToken Antlr.Runtime.CommonTokenStream Antlr.Runtime.Tree.CommonTree System.Diagnostics.DebuggerDisplayAttribute System.Collections.ICollection System.Collections.IDictionary System.Collections.IList System.IO.IOException Antlr.Runtime.Tree.ITree Antlr.Runtime.Lexer Antlr.Runtime.RecognitionException System.Text.StringBuilder System.IO.StringReader System.IO.StringWriter System.Reflection.TargetInvocationException class attribute Antlr3.ST.StringTemplate decl Dictionary decl TypeRegistry StringTemplateAST string int string string int StringTemplateGroup decl List decl HashSet bool StringTemplateGroup bool StringTemplate int IStringTemplateErrorListener bool decl IDictionary RegionType string StringTemplateGroup int decl List string decl IList public public = object public public decl_stmt object if out return return public override public override return static static return ref public static public static = return = return = return = return return if == throw new + + = if == return return = return = if != return return = return private private = return = return = return = return = if != return return if != return return return = return = return return protected virtual protected virtual = from = from = from = from = from = from = from = from = from = from = from = from StringTemplate public virtual public virtual decl_stmt Antlr3.ST.StringTemplate = if != = call StringTemplateGroup.CreateStringTemplate() call StringTemplateGroup.CreateStringTemplate() call StringTemplateGroup.CreateStringTemplate() call StringTemplateGroup.CreateStringTemplate() call StringTemplateGroup.CreateStringTemplate() else = call StringTemplateGroup.CreateStringTemplate() call StringTemplateGroup.CreateStringTemplate() call StringTemplateGroup.CreateStringTemplate() call StringTemplateGroup.CreateStringTemplate() call StringTemplateGroup.CreateStringTemplate() return public virtual public virtual = new < public virtual public virtual if ! return public virtual public virtual if != call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() IList object STAttributeList public virtual public virtual if == || == return if >= throw new if == = new < if is = else if is < = < else = decl_stmt object out if == return decl_stmt STAttributeList = if call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() == typeof = else if is decl_stmt System.Collections.Generic.IList = = new call STAttributeList.AddRange() call STAttributeList.AddRange() call STAttributeList.AddRange() call STAttributeList.AddRange() call STAttributeList.AddRange() < else = new call STAttributeList.Add() call STAttributeList.Add() call STAttributeList.Add() call STAttributeList.Add() call STAttributeList.Add() if is if != call STAttributeList.AddRange() call STAttributeList.AddRange() call STAttributeList.AddRange() call STAttributeList.AddRange() call STAttributeList.AddRange() < else call STAttributeList.Add() call STAttributeList.Add() call STAttributeList.Add() call STAttributeList.Add() call STAttributeList.Add() public virtual public virtual new public virtual public virtual new public virtual public virtual new public virtual public virtual new object decl List string Aggregate protected virtual protected virtual params params params if < throw new decl_stmt System.Collections.Generic.List < = new < decl_stmt string = if == || == throw new + + if != throw new + + decl_stmt Antlr4.StringTemplate.Misc.Aggregate = new for = < ++ decl_stmt object = if is = else = call Aggregate.Put() call Aggregate.Put() call Aggregate.Put() call Aggregate.Put() call Aggregate.Put() string string int protected virtual protected virtual < decl_stmt int = if <= throw new + decl_stmt string = decl_stmt string = + if ! call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() || ! call string.EndsWith() call string.EndsWith() call string.EndsWith() call string.EndsWith() call string.EndsWith() throw new call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() - return protected virtual protected virtual < if != && == throw new + + + if == return = public virtual public virtual < if != && == throw new + + + + + if == return = object public virtual public virtual decl_stmt object = if == return Expr bool int int int public virtual public virtual if call StringTemplateGroup.EmitTemplateStartDebugString() call StringTemplateGroup.EmitTemplateStartDebugString() call StringTemplateGroup.EmitTemplateStartDebugString() call StringTemplateGroup.EmitTemplateStartDebugString() call StringTemplateGroup.EmitTemplateStartDebugString() decl_stmt int = decl_stmt bool = decl_stmt int = != : for = != && < ++ decl_stmt Antlr3.ST.Language.Expr = decl_stmt int = call Expr.Write() call Expr.Write() call Expr.Write() call Expr.Write() call Expr.Write() if <= && == && + < && + is ++ continue if <= && - >= && - is && + < && + is ++ if != += = if call StringTemplateGroup.EmitTemplateStopDebugString() call StringTemplateGroup.EmitTemplateStopDebugString() call StringTemplateGroup.EmitTemplateStopDebugString() call StringTemplateGroup.EmitTemplateStopDebugString() call StringTemplateGroup.EmitTemplateStopDebugString() if if && != && > return return object object decl IDictionary public virtual public virtual if == return if decl_stmt object = if != out if == decl_stmt System.Collections.Generic.IDictionary < = if != call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if == && ! && != return if == && != decl_stmt object = = else if == && == = return TemplateParser string Lexer string protected virtual protected virtual if == return try decl_stmt Antlr.Runtime.Lexer = call StringTemplateGroup.CreateLexer() call StringTemplateGroup.CreateLexer() call StringTemplateGroup.CreateLexer() call StringTemplateGroup.CreateLexer() call StringTemplateGroup.CreateLexer() new decl_stmt Antlr4.StringTemplate.Compiler.TemplateParser = new new template catch decl_stmt string = decl_stmt string = if != = if != && ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() = + + + + ASTExpr ActionParser ActionLexer ITree var decl IDictionary public virtual public virtual decl_stmt ActionLexer = new new decl_stmt Antlr3.ST.Language.ActionParser = new decl_stmt Antlr3.ST.Language.ASTExpr = try decl_stmt var = call ActionParser.action() call ActionParser.action() call ActionParser.action() call ActionParser.action() call ActionParser.action() decl_stmt System.Collections.Generic.IDictionary < = decl_stmt Antlr.Runtime.Tree.ITree = if != if == = new else = new catch + return public virtual public virtual if == = new < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() object ASTExpr object int object string public virtual public virtual if == return if == = new < if != foreach in decl_stmt string = if != decl_stmt object = if == decl_stmt object = decl_stmt int = if != = if == decl_stmt object = decl_stmt Antlr3.ST.Language.ASTExpr = as if != if == = call Antlr3.ST.Language.ASTExpr.EvaluateExpression(StringTemplate,object) call Antlr3.ST.Language.ASTExpr.EvaluateExpression(StringTemplate,object) call Antlr3.ST.Language.ASTExpr.EvaluateExpression(StringTemplate,object) call Antlr3.ST.Language.ASTExpr.EvaluateExpression(StringTemplate,object) call Antlr3.ST.Language.ASTExpr.EvaluateExpression(StringTemplate,object) = FormalArgument public virtual public virtual decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = if == && != = call Antlr3.ST.StringTemplate.LookupFormalArgument(string) call Antlr3.ST.StringTemplate.LookupFormalArgument(string) call Antlr3.ST.StringTemplate.LookupFormalArgument(string) call Antlr3.ST.StringTemplate.LookupFormalArgument(string) call Antlr3.ST.StringTemplate.LookupFormalArgument(string) return public virtual public virtual foreach in if == return return public virtual public virtual = new < public virtual public virtual public virtual public virtual < if == return foreach in FormalArgument public virtual public virtual if != ++ decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = new if == = new < call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() public virtual public virtual = public virtual public virtual if == throw new if == = new < = IAttributeRenderer public virtual public virtual if == throw new decl_stmt Antlr4.StringTemplate.IAttributeRenderer if != && call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() out return if != return call Antlr3.ST.StringTemplate.GetAttributeRenderer(Type) call Antlr3.ST.StringTemplate.GetAttributeRenderer(Type) call Antlr3.ST.StringTemplate.GetAttributeRenderer(Type) call Antlr3.ST.StringTemplate.GetAttributeRenderer(Type) call Antlr3.ST.StringTemplate.GetAttributeRenderer(Type) return call StringTemplateGroup.GetAttributeRenderer() call StringTemplateGroup.GetAttributeRenderer() call StringTemplateGroup.GetAttributeRenderer() call StringTemplateGroup.GetAttributeRenderer() call StringTemplateGroup.GetAttributeRenderer() public virtual public virtual public virtual public virtual if != else + public virtual public virtual if != else if != + + + if is = ?? else + protected virtual protected virtual if == = new < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() StringTemplate public static public static if == return decl_stmt Antlr3.ST.StringTemplate = if == return while != if == return = return int IList object StringTemplate StringTemplate decl HashSet object int StringBuilder public virtual public virtual decl_stmt System.Text.StringBuilder = new decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt Antlr3.ST.StringTemplate = while != if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call Antlr3.ST.StringTemplate.GetTemplateDeclaratorString() call Antlr3.ST.StringTemplate.GetTemplateDeclaratorString() call Antlr3.ST.StringTemplate.GetTemplateDeclaratorString() call Antlr3.ST.StringTemplate.GetTemplateDeclaratorString() call Antlr3.ST.StringTemplate.GetTemplateDeclaratorString() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call Antlr3.ST.StringTemplate.GetTemplateDeclaratorString() call Antlr3.ST.StringTemplate.GetTemplateDeclaratorString() call Antlr3.ST.StringTemplate.GetTemplateDeclaratorString() call Antlr3.ST.StringTemplate.GetTemplateDeclaratorString() call Antlr3.ST.StringTemplate.GetTemplateDeclaratorString() if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt int = foreach in if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt object = if is decl_stmt Antlr3.ST.StringTemplate = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if is call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt System.Collections.Generic.IList = decl_stmt int = for = < ++ decl_stmt object = if is if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) ++ decl_stmt Antlr3.ST.StringTemplate = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call StringTemplate.TemplateID() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call StringTemplate._referencedAttributes() call StringTemplate._referencedAttributes() call StringTemplate._referencedAttributes() call StringTemplate._referencedAttributes() call StringTemplate._referencedAttributes() call StringTemplate._referencedAttributes() call StringTemplate._referencedAttributes() call StringTemplate._referencedAttributes() call StringTemplate._referencedAttributes() + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + = return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) StringBuilder public virtual public virtual decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call decl IList.Select() call decl IList.Select() call decl IList.Select() call decl IList.Select() call decl IList.Select() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) StringBuilder protected virtual protected virtual if decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() call decl IDictionary.Keys() < + return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) return Expr ITree int ICollection string var ITree decl Dictionary FormalArgument StringTemplate ASTExpr var var string IDictionary string object IList int IDictionary string decl HashSet StringTemplateGroup string ICollection object object StringTemplate decl Collections decl System protected protected decl_stmt var = protected virtual protected virtual if == if != return decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = if == throw new + + + protected virtual protected virtual if == return foreach in if != && ! call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() + + public virtual public virtual decl_stmt Generic < = new < decl_stmt Antlr3.ST.StringTemplate = while != decl_stmt string = call decl System.Insert() call decl System.Insert() call decl System.Insert() call decl System.Insert() call decl System.Insert() + : = return + call decl System.ToArray() call decl System.ToArray() call decl System.ToArray() call decl System.ToArray() call decl System.ToArray() + public virtual public virtual if == = new < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() public virtual public virtual if == return return call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() public virtual public virtual decl_stmt System.Text.StringBuilder = new call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() + + call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() if != call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call decl List.ToString() call decl List.ToString() call decl List.ToString() call decl List.ToString() call decl List.ToString() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() if != decl_stmt int = foreach in if > call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() + decl_stmt object call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if is call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() else call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() ++ call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() return call int.ToString() call int.ToString() call int.ToString() call int.ToString() call int.ToString() public virtual public virtual return public virtual public virtual decl_stmt System.Text.StringBuilder = new for = <= ++ call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() + if != foreach in decl_stmt string = decl_stmt object = if is call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() + else if is decl_stmt System.Collections.Generic.IList = for = < ++ decl_stmt object = object if is call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() + else if is decl_stmt System.Collections.Generic.IDictionary = decl_stmt System.Collections.Generic.ICollection = foreach in if is call int.Append() call int.Append() call int.Append() call int.Append() call int.Append() + return call int.ToString() call int.ToString() call int.ToString() call int.ToString() call int.ToString() public virtual public virtual decl_stmt string = + + + + + + + + + decl_stmt Antlr3.ST.StringTemplate = new decl_stmt System.Collections.Generic.Dictionary < < = new < < decl_stmt var = foreach in decl_stmt var = foreach in call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() call ICollection.SetAttribute() return public virtual public virtual < < decl_stmt string = if != foreach in decl_stmt string = decl_stmt object = if is decl_stmt string = else if is decl_stmt System.Collections.Generic.IList = for = < ++ decl_stmt object = object if is decl_stmt string = else if is decl_stmt System.Collections.Generic.IDictionary = decl_stmt System.Collections.Generic.ICollection = foreach in if is decl_stmt string = for = != && < ++ decl_stmt Antlr3.ST.Language.Expr = if is decl_stmt Antlr3.ST.Language.ASTExpr = decl_stmt Antlr.Runtime.Tree.ITree = decl_stmt Antlr.Runtime.Tree.ITree = new new decl_stmt var = call Expr.findAllPartial() call Expr.findAllPartial() call Expr.findAllPartial() call Expr.findAllPartial() call Expr.findAllPartial() foreach in decl_stmt string = + decl_stmt Antlr3.ST.StringTemplateGroup = if group != decl_stmt Antlr3.ST.StringTemplate = group call string.GetDependencyGraph() call string.GetDependencyGraph() call string.GetDependencyGraph() call string.GetDependencyGraph() call string.GetDependencyGraph() protected virtual protected virtual < < decl_stmt System.Collections.Generic.HashSet < = if == = new < = call StringTemplateGroup.Add() call StringTemplateGroup.Add() call StringTemplateGroup.Add() call StringTemplateGroup.Add() call StringTemplateGroup.Add() public virtual public virtual + + call decl List.ToString() call decl List.ToString() call decl List.ToString() call decl List.ToString() call decl List.ToString() if == return decl_stmt int = foreach in if > decl_stmt string = decl_stmt object = if is + else decl_stmt System.Collections.Generic.IList = as if != for = < ++ decl_stmt object = + + + + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() + template= if template!=null template else else + ++ + public override public override return public virtual public virtual decl_stmt System.IO.StringWriter = new decl_stmt Antlr3.ST.IStringTemplateWriter = call StringTemplateGroup.GetStringTemplateWriter() call StringTemplateGroup.GetStringTemplateWriter() call StringTemplateGroup.GetStringTemplateWriter() call StringTemplateGroup.GetStringTemplateWriter() call StringTemplateGroup.GetStringTemplateWriter() call object.SetLineWidth() call object.SetLineWidth() call object.SetLineWidth() call object.SetLineWidth() call object.SetLineWidth() try catch + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.SetLineWidth() call object.SetLineWidth() call object.SetLineWidth() call object.SetLineWidth() call object.SetLineWidth() return call IList.ToString() call IList.ToString() call IList.ToString() call IList.ToString() call IList.ToString() endregion FormalArgument protected virtual protected virtual if == if != return decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = if == throw new + + + protected virtual protected virtual if == return foreach in if != && ! call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() call decl List.Contains() + + decl Collections decl System decl Generic public virtual public virtual decl_stmt Generic < = new < decl_stmt Antlr3.ST.StringTemplate = while != decl_stmt string = call decl System.Insert() call decl System.Insert() call decl System.Insert() call decl System.Insert() call decl System.Insert() + : = return + call decl System.ToArray() call decl System.ToArray() call decl System.ToArray() call decl System.ToArray() call decl System.ToArray() + public virtual public virtual if == = new < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() public virtual public virtual if == return return call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() StringBuilder object int public virtual public virtual decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call decl List.ToString() call decl List.ToString() call decl List.ToString() call decl List.ToString() call decl List.ToString() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != decl_stmt int = foreach in if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + decl_stmt object call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if is call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public virtual public virtual return string ICollection IDictionary IList object object StringBuilder public virtual public virtual decl_stmt System.Text.StringBuilder = new for = <= ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + if != foreach in decl_stmt string = decl_stmt object = if is call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + else if is decl_stmt System.Collections.Generic.IList = for = < ++ decl_stmt object = object if is call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + else if is decl_stmt System.Collections.Generic.IDictionary = decl_stmt System.Collections.Generic.ICollection = foreach in if is call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) var decl Dictionary StringTemplate string var public virtual public virtual decl_stmt string = + + + + + + + + + decl_stmt Antlr3.ST.StringTemplate = new decl_stmt System.Collections.Generic.Dictionary < < = new < < decl_stmt var = foreach in decl_stmt var = foreach in call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) return string ASTExpr string string ICollection IDictionary IList ITree object var string object Expr StringTemplateGroup ITree StringTemplate public virtual public virtual < < decl_stmt string = if != foreach in decl_stmt string = decl_stmt object = if is decl_stmt string = else if is decl_stmt System.Collections.Generic.IList = for = < ++ decl_stmt object = object if is decl_stmt string = else if is decl_stmt System.Collections.Generic.IDictionary = decl_stmt System.Collections.Generic.ICollection = foreach in if is decl_stmt string = for = != && < ++ decl_stmt Antlr3.ST.Language.Expr = if is decl_stmt Antlr3.ST.Language.ASTExpr = decl_stmt Antlr.Runtime.Tree.ITree = decl_stmt Antlr.Runtime.Tree.ITree = new new decl_stmt var = call ITree.findAllPartial() call ITree.findAllPartial() call ITree.findAllPartial() call ITree.findAllPartial() call ITree.findAllPartial() foreach in decl_stmt string = + decl_stmt Antlr3.ST.StringTemplateGroup = if group != decl_stmt Antlr3.ST.StringTemplate = group call Antlr3.ST.StringTemplate.GetDependencyGraph(IDictionary,bool) call Antlr3.ST.StringTemplate.GetDependencyGraph(IDictionary,bool) call Antlr3.ST.StringTemplate.GetDependencyGraph(IDictionary,bool) call Antlr3.ST.StringTemplate.GetDependencyGraph(IDictionary,bool) call Antlr3.ST.StringTemplate.GetDependencyGraph(IDictionary,bool) decl HashSet protected virtual protected virtual < < decl_stmt System.Collections.Generic.HashSet < = if == = new < = call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() object IList string object int public virtual public virtual + + call decl List.ToString() call decl List.ToString() call decl List.ToString() call decl List.ToString() call decl List.ToString() if == return decl_stmt int = foreach in if > decl_stmt string = decl_stmt object = if is + else decl_stmt System.Collections.Generic.IList = as if != for = < ++ decl_stmt object = + + + + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() + template= if template!=null template else else + ++ + public override public override return StringWriter IStringTemplateWriter public virtual public virtual decl_stmt System.IO.StringWriter = new decl_stmt Antlr3.ST.IStringTemplateWriter = call StringTemplateGroup.GetStringTemplateWriter() call StringTemplateGroup.GetStringTemplateWriter() call StringTemplateGroup.GetStringTemplateWriter() call StringTemplateGroup.GetStringTemplateWriter() call StringTemplateGroup.GetStringTemplateWriter() call IStringTemplateWriter.SetLineWidth() call IStringTemplateWriter.SetLineWidth() call IStringTemplateWriter.SetLineWidth() call IStringTemplateWriter.SetLineWidth() call IStringTemplateWriter.SetLineWidth() try catch + call IStringTemplateWriter.GetType() call IStringTemplateWriter.GetType() call IStringTemplateWriter.GetType() call IStringTemplateWriter.GetType() call IStringTemplateWriter.GetType() call IStringTemplateWriter.SetLineWidth() call IStringTemplateWriter.SetLineWidth() call IStringTemplateWriter.SetLineWidth() call IStringTemplateWriter.SetLineWidth() call IStringTemplateWriter.SetLineWidth() return call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString()