Antlr.Runtime.Tree System.Collections.Generic using System.Collections.IList System.Collections.IDictionary class Antlr.Runtime.Tree.TreeWizard ITreeAdaptor decl HashSet decl IDictionary decl IDictionary decl HashSet public virtual public virtual < public override public override public override public override if != return + + else return public override public override return new decl IDictionary string public virtual < public virtual < decl_stmt System.Collections.Generic.IDictionary < = new < if == return for = < ++ decl_stmt string = = return int public virtual public virtual if == return decl_stmt int if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out return return decl IDictionary public < public < decl_stmt System.Collections.Generic.IDictionary < = new < return int object IList int protected virtual protected virtual < if == return decl_stmt int = call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) decl_stmt System.Collections.Generic.IList if ! out || == = new < = call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) decl_stmt int = call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) for = < ++ decl_stmt object = call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) public override public override public public < if IList public virtual public virtual decl_stmt System.Collections.Generic.IList = new < new return int TreePattern TreePatternParser IList TreePatternLexer public virtual public virtual decl_stmt System.Collections.Generic.IList = new < decl_stmt Antlr.Runtime.Tree.TreePatternLexer = new decl_stmt Antlr.Runtime.Tree.TreePatternParser = new new decl_stmt TreePattern = call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() if == || || call TreePattern.GetType() call TreePattern.GetType() call TreePattern.GetType() call TreePattern.GetType() call TreePattern.GetType() == typeof return decl_stmt int = new return public virtual public virtual return public virtual public virtual return public public public public < new object int protected virtual protected virtual if == return if call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) == decl_stmt int = call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) for = < ++ decl_stmt object = call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) public public < if decl IDictionary TreePattern TreePatternParser int TreePatternLexer public public decl_stmt Antlr.Runtime.Tree.TreePatternLexer = new decl_stmt Antlr.Runtime.Tree.TreePatternParser = new new decl_stmt TreePattern = call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() if == || || call TreePattern.GetType() call TreePattern.GetType() call TreePattern.GetType() call TreePattern.GetType() call TreePattern.GetType() == typeof return decl_stmt System.Collections.Generic.IDictionary < = new < decl_stmt int = new TreePattern TreePatternParser TreePatternLexer bool public public < decl_stmt Antlr.Runtime.Tree.TreePatternLexer = new decl_stmt Antlr.Runtime.Tree.TreePatternParser = new new decl_stmt TreePattern = call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() decl_stmt bool = return public public return int int TreePattern object protected virtual protected virtual < if == || == return if != typeof if call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) != return if && ! call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) return if != && != = decl_stmt int = call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) decl_stmt int = if != return for = < ++ decl_stmt object = call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) decl_stmt TreePattern = if ! return return TreePatternParser object TreePatternLexer public virtual public virtual decl_stmt Antlr.Runtime.Tree.TreePatternLexer = new decl_stmt Antlr.Runtime.Tree.TreePatternParser = new decl_stmt object = call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() call Antlr.Runtime.Tree.TreePatternParser.Pattern() return public static public static return public new public new return int int object object protected static protected static if == || == return if call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) != call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) return if ! call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) return decl_stmt int = call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) decl_stmt int = call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) if != return for = < ++ decl_stmt object = call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) decl_stmt object = call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) if ! return return int decl IList protected protected if == return if == = new < < decl_stmt int = call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() if ! == || call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() return decl_stmt System.Collections.Generic.IList < if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out || == = new < call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() = else if ! call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() public public if == = new < else if == return call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() call decl HashSet.add() public public < = object int int decl IList public public if == return decl_stmt int = call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() decl_stmt System.Collections.Generic.IList < if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out || == return for = < call decl IList.size() call decl IList.size() call decl IList.size() call decl IList.size() call decl IList.size() ++ decl_stmt int = decl_stmt object = if == return return -