Antlr.Runtime System.Collections.Generic using System.ArgumentOutOfRangeException System.InvalidOperationException System.Text.StringBuilder class attribute Antlr.Runtime.LegacyCommonTokenStream super super ITokenStream decl Dictionary bool int decl List ITokenSource decl IDictionary int int return public virtual public virtual = call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() = - = int int IToken bool public virtual public virtual if != - return decl_stmt int = decl_stmt Antlr.Runtime.IToken = call ITokenSource.NextToken() call ITokenSource.NextToken() call ITokenSource.NextToken() call ITokenSource.NextToken() call ITokenSource.NextToken() while != && != decl_stmt bool = decl_stmt int if != && call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = if != && call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() = else if && != = if ! = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() ++ = call ITokenSource.NextToken() call ITokenSource.NextToken() call ITokenSource.NextToken() call ITokenSource.NextToken() call ITokenSource.NextToken() = = public virtual public virtual if < ++ = int protected virtual protected virtual decl_stmt int = while < && != ++ return protected virtual protected virtual while >= && != -- return public virtual public virtual if == = new < = public virtual public virtual if == = new < call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() public virtual public virtual = public virtual < public virtual < if == - return public virtual < public virtual < return decl IList IToken public virtual < public virtual < if == - if >= = - if < = if > return decl_stmt System.Collections.Generic.IList < = new < for = <= ++ decl_stmt Antlr.Runtime.IToken = if == || call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if == = return public virtual < public virtual < < return new public virtual < public virtual < return int int public virtual public virtual if == - if == return if < return - if + - >= return - decl_stmt int = decl_stmt int = while < = + ++ if >= return - if > = return int int protected virtual protected virtual if == - if == return if - < return decl_stmt int = decl_stmt int = while <= = - ++ if < return return public virtual public virtual return public virtual < public virtual < if < throw new if < throw new if == - return new < call decl List.Skip() call decl List.Skip() call decl List.Skip() call decl List.Skip() call decl List.Skip() public virtual public virtual return public virtual public virtual if == - = return public virtual public virtual return public virtual public virtual public virtual public virtual public virtual public virtual = = public virtual public virtual = return return public override public override if == - throw new return - StringBuilder IToken public virtual public virtual if < || < return if == - throw new if >= = - decl_stmt System.Text.StringBuilder = new for = <= ++ decl_stmt Antlr.Runtime.IToken = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public virtual public virtual if != && != return return