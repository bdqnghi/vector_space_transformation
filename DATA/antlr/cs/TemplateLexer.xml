Antlr4.StringTemplate.Compiler System.Collections.Generic using Antlr.Runtime using Antlr4.StringTemplate.Misc using System.CLSCompliantAttribute System.Globalization.NumberStyles System.Text.StringBuilder class Antlr4.StringTemplate.Compiler.TemplateLexer super super ITokenSource int int char int int int int int int int int int int int int char int ErrorManager int IToken int IToken int int int int decl Queue int int int int int int int int int char char int ICharStream bool int int int int int int int return return public virtual public virtual if > return call decl Queue.Dequeue() call decl Queue.Dequeue() call decl Queue.Dequeue() call decl Queue.Dequeue() call decl Queue.Dequeue() return NoViableAltException public virtual public virtual if != decl_stmt Antlr.Runtime.NoViableAltException = new call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) protected virtual protected virtual call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() call ICharStream.Consume() = char call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() public virtual public virtual call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() IToken public virtual public virtual while = = = if == return decl_stmt Antlr.Runtime.IToken if = else = if != return protected virtual protected virtual if == && == || == while == || == if != return return if == if == return if == return = return if == return if == return if == && > = -- return return RecognitionException IToken protected virtual protected virtual while switch case case case case return case if call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() == && call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() == return return case return case return case return case return case return case return case return case return case return case if == && call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() == && call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() == return return case return case return case return case return default: if == = return if decl_stmt Antlr.Runtime.IToken = switch ?? case return case return case return case return case return case return case return default: return decl_stmt Antlr.Runtime.RecognitionException = new = = call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) if == return break IToken int decl List int int int private private ++ decl_stmt int = call ICharStream.Mark() call ICharStream.Mark() call ICharStream.Mark() call ICharStream.Mark() call ICharStream.Mark() decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt System.Collections.Generic.List < = new < decl_stmt Antlr.Runtime.IToken = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() while == call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if == call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if foreach in call ICharStream.Release() call ICharStream.Release() call ICharStream.Release() call ICharStream.Release() call ICharStream.Release() = = = = return call ICharStream.Rewind() call ICharStream.Rewind() call ICharStream.Rewind() call ICharStream.Rewind() call ICharStream.Rewind() = = = = return string NoViableAltException IToken private private = = if == return decl_stmt string = switch case return case = break case = break case = break default: decl_stmt Antlr.Runtime.NoViableAltException = new call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) return decl_stmt Antlr.Runtime.IToken = - return decl char NoViableAltException IToken char private private decl_stmt char = new if ! decl_stmt Antlr.Runtime.NoViableAltException = new call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) = if ! decl_stmt Antlr.Runtime.NoViableAltException = new call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) = if ! decl_stmt Antlr.Runtime.NoViableAltException = new call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) = if ! decl_stmt Antlr.Runtime.NoViableAltException = new call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) = decl_stmt char = char new decl_stmt Antlr.Runtime.IToken = call char.ToString() call char.ToString() call char.ToString() call char.ToString() call char.ToString() - return StringBuilder bool private private decl_stmt bool = decl_stmt System.Text.StringBuilder = new while != && != if == || == break if == && > break if == if call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = continue if call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() == || call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() == = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) continue call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) else return private private = = = while return RecognitionException bool StringBuilder private private decl_stmt bool = decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) while != if == = switch case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break case call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break default: call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) break continue call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == decl_stmt Antlr.Runtime.RecognitionException = new int = = call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) break call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) else return private private while == || == || == || == RecognitionException string private private while ! == && call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() call ICharStream.LA() == if == decl_stmt Antlr.Runtime.RecognitionException = new int = = decl_stmt string = call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) break return RecognitionException private private while == || == if == decl_stmt Antlr.Runtime.RecognitionException = new = = call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) call Antlr4.StringTemplate.Misc.ErrorManager.LexerError(string,string,IToken,RecognitionException) return if == while == || == public static public static return public static public static return >= && <= || >= && <= || >= && <= || == || == public static public static return == || == || == || == public static public static return >= && <= || >= && <= || >= && <= TemplateToken public virtual public virtual decl_stmt TemplateToken = new - = = return TemplateToken public virtual public virtual decl_stmt TemplateToken = new - - = = - return TemplateToken public virtual public virtual decl_stmt TemplateToken = new = = - = = return TemplateToken public virtual public virtual decl_stmt TemplateToken = new = = - = = return private static private static return == : call char.ToString() call char.ToString() call char.ToString() call char.ToString() call char.ToString() string string string public override public override decl_stmt string = if > = + decl_stmt string = if != = else = decl_stmt string = if == = else = return