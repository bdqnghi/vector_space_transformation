Antlr3.Grammars System using System.Collections.Generic using System.Linq using Antlr.Runtime.Tree using Antlr3.Tool using class Antlr3.Grammars.DefineGrammarItemsWalker Grammar String int GrammarAST int GrammarAST GrammarAST CommonTree public public decl_stmt Antlr.Runtime.Tree.CommonTree = if == || == return return call CommonTree.Children() call CommonTree.Children() call CommonTree.Children() call CommonTree.Children() call CommonTree.Children() call CommonTree.Children() call CommonTree.Children() call CommonTree.Children() call CommonTree.Children() == protected protected GrammarAST string protected protected if != return decl_stmt Antlr3.Tool.GrammarAST = while ! call GrammarAST.Text() call GrammarAST.Text() call GrammarAST.Text() call GrammarAST.Text() call GrammarAST.Text() call GrammarAST.Text() call GrammarAST.Text() call GrammarAST.Text() call GrammarAST.Text() = call GrammarAST.Parent() call GrammarAST.Parent() call GrammarAST.Parent() call GrammarAST.Parent() call GrammarAST.Parent() call GrammarAST.Parent() call GrammarAST.Parent() call GrammarAST.Parent() call GrammarAST.Parent() + for = < ++ if call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() != continue decl_stmt string = call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() if == call GrammarAST.DeleteChild() call GrammarAST.DeleteChild() call GrammarAST.DeleteChild() call GrammarAST.DeleteChild() call GrammarAST.DeleteChild() -- Rule protected protected decl_stmt Antlr3.Tool.Rule = call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) if != call Antlr3.Tool.Rule.TrackInlineAction(GrammarAST) call Antlr3.Tool.Rule.TrackInlineAction(GrammarAST) call Antlr3.Tool.Rule.TrackInlineAction(GrammarAST) call Antlr3.Tool.Rule.TrackInlineAction(GrammarAST) call Antlr3.Tool.Rule.TrackInlineAction(GrammarAST) AttributeScope private private < decl_stmt Antlr3.Tool.AttributeScope = call Antlr3.Tool.Grammar.DefineGlobalScope(string,IToken) call Antlr3.Tool.Grammar.DefineGlobalScope(string,IToken) call Antlr3.Tool.Grammar.DefineGlobalScope(string,IToken) call Antlr3.Tool.Grammar.DefineGlobalScope(string,IToken) call Antlr3.Tool.Grammar.DefineGlobalScope(string,IToken) = call Antlr3.Tool.AttributeScope.AddAttributes(string,int) call Antlr3.Tool.AttributeScope.AddAttributes(string,int) call Antlr3.Tool.AttributeScope.AddAttributes(string,int) call Antlr3.Tool.AttributeScope.AddAttributes(string,int) call Antlr3.Tool.AttributeScope.AddAttributes(string,int) foreach in call Antlr3.Tool.AttributeScope.DefineNamedAction(GrammarAST,GrammarAST) call Antlr3.Tool.AttributeScope.DefineNamedAction(GrammarAST,GrammarAST) call Antlr3.Tool.AttributeScope.DefineNamedAction(GrammarAST,GrammarAST) call Antlr3.Tool.AttributeScope.DefineNamedAction(GrammarAST,GrammarAST) call Antlr3.Tool.AttributeScope.DefineNamedAction(GrammarAST,GrammarAST) private private < private private call Antlr3.Tool.Grammar.DefineNamedAction(GrammarAST,string,GrammarAST,GrammarAST) call Antlr3.Tool.Grammar.DefineNamedAction(GrammarAST,string,GrammarAST,GrammarAST) call Antlr3.Tool.Grammar.DefineNamedAction(GrammarAST,string,GrammarAST,GrammarAST) call Antlr3.Tool.Grammar.DefineNamedAction(GrammarAST,string,GrammarAST,GrammarAST) call Antlr3.Tool.Grammar.DefineNamedAction(GrammarAST,string,GrammarAST,GrammarAST) int private private ref ref ref ref < < = = if == && == call Antlr3.Tool.Grammar.DefineLexerRuleFoundInParser(IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineLexerRuleFoundInParser(IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineLexerRuleFoundInParser(IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineLexerRuleFoundInParser(IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineLexerRuleFoundInParser(IToken,GrammarAST) else decl_stmt int = call Antlr3.Tool.Grammar.DefineRule(IToken,string,IDictionary,GrammarAST,GrammarAST,int) call Antlr3.Tool.Grammar.DefineRule(IToken,string,IDictionary,GrammarAST,GrammarAST,int) call Antlr3.Tool.Grammar.DefineRule(IToken,string,IDictionary,GrammarAST,GrammarAST,int) call Antlr3.Tool.Grammar.DefineRule(IToken,string,IDictionary,GrammarAST,GrammarAST,int) call Antlr3.Tool.Grammar.DefineRule(IToken,string,IDictionary,GrammarAST,GrammarAST,int) = call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) if != = call Antlr3.Tool.Grammar.CreateParameterScope(string,IToken) call Antlr3.Tool.Grammar.CreateParameterScope(string,IToken) call Antlr3.Tool.Grammar.CreateParameterScope(string,IToken) call Antlr3.Tool.Grammar.CreateParameterScope(string,IToken) call Antlr3.Tool.Grammar.CreateParameterScope(string,IToken) if != = call Antlr3.Tool.Grammar.CreateReturnScope(string,IToken) call Antlr3.Tool.Grammar.CreateReturnScope(string,IToken) call Antlr3.Tool.Grammar.CreateReturnScope(string,IToken) call Antlr3.Tool.Grammar.CreateReturnScope(string,IToken) call Antlr3.Tool.Grammar.CreateReturnScope(string,IToken) if != foreach in private private = private private < = private private if != private private < = call Antlr3.Tool.Grammar.CreateRuleScope(string,IToken) call Antlr3.Tool.Grammar.CreateRuleScope(string,IToken) call Antlr3.Tool.Grammar.CreateRuleScope(string,IToken) call Antlr3.Tool.Grammar.CreateRuleScope(string,IToken) call Antlr3.Tool.Grammar.CreateRuleScope(string,IToken) = foreach in private private if call Antlr3.Tool.Grammar.GetGlobalScope(string) call Antlr3.Tool.Grammar.GetGlobalScope(string) call Antlr3.Tool.Grammar.GetGlobalScope(string) call Antlr3.Tool.Grammar.GetGlobalScope(string) call Antlr3.Tool.Grammar.GetGlobalScope(string) == else if == = new < private private if == || == = if == call Antlr3.Tool.Grammar.DefineRuleRefLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineRuleRefLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineRuleRefLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineRuleRefLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineRuleRefLabel(string,IToken,GrammarAST) else if == && == call Antlr3.Tool.Grammar.DefineWildcardTreeLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineWildcardTreeLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineWildcardTreeLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineWildcardTreeLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineWildcardTreeLabel(string,IToken,GrammarAST) else call Antlr3.Tool.Grammar.DefineTokenRefLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineTokenRefLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineTokenRefLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineTokenRefLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineTokenRefLabel(string,IToken,GrammarAST) private private if == || == = if == call Antlr3.Tool.Grammar.DefineRuleListLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineRuleListLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineRuleListLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineRuleListLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineRuleListLabel(string,IToken,GrammarAST) else if == && == call Antlr3.Tool.Grammar.DefineWildcardTreeListLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineWildcardTreeListLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineWildcardTreeListLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineWildcardTreeListLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineWildcardTreeListLabel(string,IToken,GrammarAST) else call Antlr3.Tool.Grammar.DefineTokenListLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineTokenListLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineTokenListLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineTokenListLabel(string,IToken,GrammarAST) call Antlr3.Tool.Grammar.DefineTokenListLabel(string,IToken,GrammarAST) private private = decl IDictionary GrammarAST private private decl_stmt Antlr3.Tool.GrammarAST = decl_stmt System.Collections.Generic.IDictionary < = new < = if != = call Antlr3.Tool.GrammarAST.SetOptions(Grammar,IDictionary) call Antlr3.Tool.GrammarAST.SetOptions(Grammar,IDictionary) call Antlr3.Tool.GrammarAST.SetOptions(Grammar,IDictionary) call Antlr3.Tool.GrammarAST.SetOptions(Grammar,IDictionary) call Antlr3.Tool.GrammarAST.SetOptions(Grammar,IDictionary) private private call Antlr3.Tool.Grammar.AltReferencesRule(string,GrammarAST,GrammarAST,int) call Antlr3.Tool.Grammar.AltReferencesRule(string,GrammarAST,GrammarAST,int) call Antlr3.Tool.Grammar.AltReferencesRule(string,GrammarAST,GrammarAST,int) call Antlr3.Tool.Grammar.AltReferencesRule(string,GrammarAST,GrammarAST,int) call Antlr3.Tool.Grammar.AltReferencesRule(string,GrammarAST,GrammarAST,int) if != = private private if != = if == call Antlr3.Tool.Grammar.AltReferencesRule(string,GrammarAST,GrammarAST,int) call Antlr3.Tool.Grammar.AltReferencesRule(string,GrammarAST,GrammarAST,int) call Antlr3.Tool.Grammar.AltReferencesRule(string,GrammarAST,GrammarAST,int) call Antlr3.Tool.Grammar.AltReferencesRule(string,GrammarAST,GrammarAST,int) call Antlr3.Tool.Grammar.AltReferencesRule(string,GrammarAST,GrammarAST,int) else call Antlr3.Tool.Grammar.AltReferencesTokenID(string,GrammarAST,int) call Antlr3.Tool.Grammar.AltReferencesTokenID(string,GrammarAST,int) call Antlr3.Tool.Grammar.AltReferencesTokenID(string,GrammarAST,int) call Antlr3.Tool.Grammar.AltReferencesTokenID(string,GrammarAST,int) call Antlr3.Tool.Grammar.AltReferencesTokenID(string,GrammarAST,int) Rule private private if != decl_stmt Antlr3.Tool.Rule = call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) if != call Antlr3.Tool.Rule.TrackTokenReferenceInAlt(GrammarAST,int) call Antlr3.Tool.Rule.TrackTokenReferenceInAlt(GrammarAST,int) call Antlr3.Tool.Rule.TrackTokenReferenceInAlt(GrammarAST,int) call Antlr3.Tool.Rule.TrackTokenReferenceInAlt(GrammarAST,int) call Antlr3.Tool.Rule.TrackTokenReferenceInAlt(GrammarAST,int) bool Rule var private private decl_stmt Antlr3.Tool.Rule = call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) call Antlr3.Tool.Grammar.GetRule(string,string) decl_stmt var = call Antlr3.Tool.Rule.GetTokenRefsInAlt(int) call Antlr3.Tool.Rule.GetTokenRefsInAlt(int) call Antlr3.Tool.Rule.GetTokenRefsInAlt(int) call Antlr3.Tool.Rule.GetTokenRefsInAlt(int) call Antlr3.Tool.Rule.GetTokenRefsInAlt(int) decl_stmt bool = == && ! call var.Contains() call var.Contains() call var.Contains() call var.Contains() call var.Contains() if ! && switch case case case case case if != call GrammarAST.rewriteRefsShallow() call GrammarAST.rewriteRefsShallow() call GrammarAST.rewriteRefsShallow() call GrammarAST.rewriteRefsShallow() call GrammarAST.rewriteRefsShallow() call GrammarAST.rewriteRefsShallow() call GrammarAST.rewriteRefsShallow() call GrammarAST.rewriteRefsShallow() call GrammarAST.rewriteRefsShallow() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() call GrammarAST.rewriteRefsDeep() break default: break