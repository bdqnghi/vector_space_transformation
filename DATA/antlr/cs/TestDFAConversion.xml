AntlrUnitTests System.Collections.Generic using System.Linq using Antlr.Runtime.JavaExtensions using Antlr3.Tool using Microsoft.VisualStudio.TestTools.UnitTesting using Antlr3.AntlrTool Antlr3.Misc.BitSet Antlr3.Codegen.CodeGenerator System.Console Antlr3.Analysis.DecisionProbe Antlr3.Analysis.DFA System.Collections.ICollection System.Collections.IList System.Text.StringBuilder class attribute AntlrUnitTests.TestDFAConversion super super BaseTest string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + + + Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + decl_stmt int = new decl_stmt int = new decl_stmt string = decl_stmt int = new decl_stmt int = decl IList Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt System.Collections.Generic.IList < = new int Grammar IList public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt System.Collections.Generic.IList = new < new decl_stmt int = int Grammar IList public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt System.Collections.Generic.IList = new < new decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + + + + + + + + + + + + + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + + + + + + + + + + + + + + + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = decl IList Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + decl_stmt System.Collections.Generic.IList < = new Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + decl_stmt string = + + + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + decl_stmt string = + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + decl_stmt string = + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + decl_stmt string = + + + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + + decl_stmt string = + + + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + + decl_stmt string = + + + + + + + + + + + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + + + + + + + + decl_stmt string = + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + + + + + + + + + decl_stmt string = + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + + + + + + + + + decl_stmt string = + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + decl_stmt string = + + + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + + decl_stmt string = + + + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + decl_stmt string = + + + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + + + decl_stmt int = decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = decl HashSet Grammar ErrorQueue var var ICollection Message LeftRecursionCyclesMessage public public decl_stmt Antlr3.Tool.Grammar = new + + + = decl_stmt AntlrUnitTests.ErrorQueue = new decl_stmt System.Collections.Generic.HashSet < = call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() decl_stmt var = new < call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() decl_stmt Antlr3.Tool.Message = is + call Message.GetType() call Message.GetType() call Message.GetType() call Message.GetType() call Message.GetType() decl_stmt Antlr3.Tool.LeftRecursionCyclesMessage = decl_stmt System.Collections.Generic.ICollection = decl_stmt var = new < call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() var Grammar ErrorQueue var var ICollection Message LeftRecursionCyclesMessage public public decl_stmt Antlr3.Tool.Grammar = new + + + + = decl_stmt AntlrUnitTests.ErrorQueue = new decl_stmt var = call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() decl_stmt var = new < call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() decl_stmt Antlr3.Tool.Message = is + call Message.GetType() call Message.GetType() call Message.GetType() call Message.GetType() call Message.GetType() decl_stmt Antlr3.Tool.LeftRecursionCyclesMessage = decl_stmt System.Collections.Generic.ICollection = decl_stmt var = new < call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() var Grammar ErrorQueue var var ICollection Message LeftRecursionCyclesMessage public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + = decl_stmt AntlrUnitTests.ErrorQueue = new decl_stmt var = call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() decl_stmt var = new < call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() decl_stmt Antlr3.Tool.Message = is + call Message.GetType() call Message.GetType() call Message.GetType() call Message.GetType() call Message.GetType() decl_stmt Antlr3.Tool.LeftRecursionCyclesMessage = decl_stmt System.Collections.Generic.ICollection = decl_stmt var = new < call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + decl_stmt int = decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = = + + + Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + decl_stmt string = + + + decl_stmt int = decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + decl_stmt string = + + + + + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + decl_stmt string = + + + + + + + + + + + = + + + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + + + Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = AntlrTool Message ErrorQueue CodeGenerator Grammar public public decl_stmt AntlrUnitTests.ErrorQueue = new decl_stmt Antlr3.Tool.Grammar = new + decl_stmt Antlr3.AntlrTool = call AntlrTool.SetOutputDirectory() call AntlrTool.SetOutputDirectory() call AntlrTool.SetOutputDirectory() call AntlrTool.SetOutputDirectory() call AntlrTool.SetOutputDirectory() decl_stmt Antlr4.StringTemplate.Compiler.CodeGenerator = new = call Antlr4.StringTemplate.Compiler.CodeGenerator.GenRecognizer() call Antlr4.StringTemplate.Compiler.CodeGenerator.GenRecognizer() call Antlr4.StringTemplate.Compiler.CodeGenerator.GenRecognizer() call Antlr4.StringTemplate.Compiler.CodeGenerator.GenRecognizer() call Antlr4.StringTemplate.Compiler.CodeGenerator.GenRecognizer() decl_stmt Antlr3.Tool.Message = is + call Message.GetType() call Message.GetType() call Message.GetType() call Message.GetType() call Message.GetType() Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = var var Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt var = call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() decl_stmt var = new < call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() var var Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + + + decl_stmt var = call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() decl_stmt var = new < call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() var var Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + decl_stmt var = call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() decl_stmt var = new < call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() var var Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt var = call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() call Antlr3.Tool.Grammar.GetLeftRecursiveRules() decl_stmt var = new < call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() call var.SequenceEqual() string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + decl_stmt int = new decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + decl_stmt int = new decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + = + + + = + + + + + + + + + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + = + + + = + + + + + + + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + = + + + = + + + + + + + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + + + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + + + + + Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + decl_stmt int = new decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + decl_stmt int = new decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + + + + + decl_stmt int = new decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + decl_stmt string = + + + decl_stmt int = decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() call Grammar.Tree() string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + decl_stmt string = + + + decl_stmt int = new decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + decl_stmt string = + + + decl_stmt int = new decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + decl_stmt string = + + + + + decl_stmt int = decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + + + decl_stmt string = + + + + + Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + + decl_stmt string = + + + + + + + + + decl_stmt int = decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + + decl_stmt string = + + + + + + + + + decl_stmt int = decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = var Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + decl_stmt var = new Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int decl HashSet decl HashSet string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + decl_stmt string = + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = decl_stmt System.Collections.Generic.HashSet < = decl_stmt System.Collections.Generic.HashSet < = new < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.SequenceEqual() call decl HashSet.SequenceEqual() call decl HashSet.SequenceEqual() call decl HashSet.SequenceEqual() call decl HashSet.SequenceEqual() Grammar decl int decl HashSet decl HashSet string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + decl_stmt string = + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = decl_stmt System.Collections.Generic.HashSet < = decl_stmt System.Collections.Generic.HashSet < = new < call decl HashSet.SetEquals() call decl HashSet.SetEquals() call decl HashSet.SetEquals() call decl HashSet.SetEquals() call decl HashSet.SetEquals() Grammar decl int decl HashSet decl HashSet string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + + decl_stmt string = + + + + + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = decl_stmt System.Collections.Generic.HashSet < = decl_stmt System.Collections.Generic.HashSet < = new < call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.SequenceEqual() call decl HashSet.SequenceEqual() call decl HashSet.SequenceEqual() call decl HashSet.SequenceEqual() call decl HashSet.SequenceEqual() Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt string = + + + decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = = + + + decl IList Grammar public public decl_stmt Antlr3.Tool.Grammar = new + + + + + + + + decl_stmt System.Collections.Generic.IList < = new int Grammar IList public public decl_stmt Antlr3.Tool.Grammar = new + + decl_stmt System.Collections.Generic.IList = new decl_stmt int = string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + string Grammar public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = NonRegularDecisionMessage decl List ErrorQueue protected protected < = decl_stmt AntlrUnitTests.ErrorQueue = new if == decl_stmt Antlr3.Tool.NonRegularDecisionMessage = decl_stmt System.Collections.Generic.List < = new < call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() RecursionOverflowMessage ErrorQueue protected protected = decl_stmt AntlrUnitTests.ErrorQueue = new if == decl_stmt Antlr3.Tool.RecursionOverflowMessage = + call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + + + decl_stmt int = decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = Grammar decl int string int decl int decl int string public public decl_stmt Antlr3.Tool.Grammar = new + decl_stmt string = + + + + + + + + + + + + + + + decl_stmt int = decl_stmt int = new decl_stmt string = decl_stmt int = decl_stmt int = ErrorQueue decl IList CodeGenerator BitSet var RecursionOverflowMessage var BitSet GrammarNonDeterminismMessage string Message string DFA FASerializer protected protected = decl_stmt AntlrUnitTests.ErrorQueue = new if == decl_stmt Antlr4.StringTemplate.Compiler.CodeGenerator = new = if call AntlrUnitTests.ErrorQueue.size() call AntlrUnitTests.ErrorQueue.size() call AntlrUnitTests.ErrorQueue.size() call AntlrUnitTests.ErrorQueue.size() call AntlrUnitTests.ErrorQueue.size() != + call AntlrUnitTests.ErrorQueue.size() call AntlrUnitTests.ErrorQueue.size() call AntlrUnitTests.ErrorQueue.size() call AntlrUnitTests.ErrorQueue.size() call AntlrUnitTests.ErrorQueue.size() decl_stmt Antlr3.Analysis.DFA = + decl_stmt Antlr3.Tool.FASerializer = new decl_stmt string = call Antlr3.Tool.FASerializer.Serialize(State) call Antlr3.Tool.FASerializer.Serialize(State) call Antlr3.Tool.FASerializer.Serialize(State) call Antlr3.Tool.FASerializer.Serialize(State) call Antlr3.Tool.FASerializer.Serialize(State) decl_stmt var = if != decl_stmt Antlr3.Misc.BitSet = new call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) decl_stmt Antlr3.Misc.BitSet = new call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) else != : if != decl_stmt Antlr3.Tool.Message = is + call Message.GetType() call Message.GetType() call Message.GetType() call Message.GetType() call Message.GetType() decl_stmt Antlr3.Tool.GrammarNonDeterminismMessage = decl_stmt var = call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() decl_stmt string = call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() if != decl_stmt Antlr3.Tool.RecursionOverflowMessage = decl_stmt Antlr3.Tool.GrammarNonDeterminismMessage = decl_stmt System.Collections.Generic.IList < = if != = call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() else = if != decl_stmt Antlr3.Misc.BitSet = new call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) decl_stmt Antlr3.Misc.BitSet = new call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) call Antlr3.Misc.BitSet.AddAll(IIntSet) != || != + else decl_stmt Antlr3.Tool.GrammarNonDeterminismMessage = Message protected protected for = < ++ decl_stmt Antlr3.Tool.Message = if is return return Message protected protected for = < ++ decl_stmt Antlr3.Tool.Message = if is return return Message protected protected for = < ++ decl_stmt Antlr3.Tool.Message = if is return return Message protected protected for = < ++ decl_stmt Antlr3.Tool.Message = if is return return Message protected protected for = < ++ decl_stmt Antlr3.Tool.Message = if is return return StringBuilder int protected protected decl_stmt System.Text.StringBuilder = new for = < ++ if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt int = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) decl HashSet protected < protected < decl_stmt System.Collections.Generic.HashSet < = new < foreach in call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return decl HashSet protected < protected < decl_stmt System.Collections.Generic.HashSet < = new < foreach in call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() call decl HashSet.addAll() return