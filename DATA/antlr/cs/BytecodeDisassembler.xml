Antlr4.StringTemplate.Compiler System.Collections.Generic using Antlr4.StringTemplate.Misc using System.ArgumentException System.BitConverter System.Text.StringBuilder class Antlr4.StringTemplate.Compiler.BytecodeDisassembler CompiledTemplate Instruction int StringBuilder int public virtual public virtual decl_stmt System.Text.StringBuilder = new decl_stmt int = while < if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt int = decl_stmt System.Linq.Expressions.Interpreter.Instruction = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) ++ for = < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) += return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) int StringBuilder public virtual public virtual decl_stmt System.Text.StringBuilder = new decl_stmt int = while < = call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) decl List Instruction int string int string public virtual public virtual decl_stmt int = if >= throw new + decl_stmt System.Linq.Expressions.Interpreter.Instruction = if == throw new + + + decl_stmt string = ++ if == return decl_stmt System.Collections.Generic.List < = new < for = < ++ decl_stmt int = += switch case call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() break case case call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call int.ToString() call int.ToString() call int.ToString() call int.ToString() call int.ToString() break default: call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call int.ToString() call int.ToString() call int.ToString() call int.ToString() call int.ToString() break for = < ++ decl_stmt string = if > return string StringBuilder private private decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt string = if < if == = else = if is string = = + + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) internal static internal static return string StringBuilder int public virtual public virtual decl_stmt System.Text.StringBuilder = new decl_stmt int = if != foreach in if is string decl_stmt string = string = call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) else call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) ++ return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) string StringBuilder int public virtual public virtual decl_stmt System.Text.StringBuilder = new decl_stmt int = foreach in if != decl_stmt string = call CompiledTemplate.Template() call CompiledTemplate.Template() call CompiledTemplate.Template() call CompiledTemplate.Template() call CompiledTemplate.Template() call CompiledTemplate.Template() call CompiledTemplate.Template() call CompiledTemplate.Template() call CompiledTemplate.Template() call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) ++ return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int)