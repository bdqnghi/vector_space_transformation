Antlr.Runtime.Tree System.Collections.Generic using System.Exception System.Collections.IDictionary System.NotSupportedException class Antlr.Runtime.Tree.BaseTreeAdaptor super super ITreeAdaptor int decl IDictionary public virtual public virtual return CommonErrorNode public virtual public virtual decl_stmt Antlr.Runtime.Tree.CommonErrorNode = new return public virtual public virtual return public virtual public virtual return object object object int public virtual public virtual if == return decl_stmt object = decl_stmt int = for = < ++ decl_stmt object = decl_stmt object = return public virtual public virtual if != && != ITree int ITree public virtual public virtual decl_stmt Antlr.Runtime.Tree.ITree = decl_stmt Antlr.Runtime.Tree.ITree = if == return if decl_stmt int = if == = call Antlr.Runtime.Tree.ITree.GetChild(int) call Antlr.Runtime.Tree.ITree.GetChild(int) call Antlr.Runtime.Tree.ITree.GetChild(int) call Antlr.Runtime.Tree.ITree.GetChild(int) call Antlr.Runtime.Tree.ITree.GetChild(int) else if > throw new call Antlr.Runtime.Tree.ITree.AddChild(ITree) call Antlr.Runtime.Tree.ITree.AddChild(ITree) call Antlr.Runtime.Tree.ITree.AddChild(ITree) call Antlr.Runtime.Tree.ITree.AddChild(ITree) call Antlr.Runtime.Tree.ITree.AddChild(ITree) return ITree public virtual public virtual decl_stmt Antlr.Runtime.Tree.ITree = if != && if == = else if == = call Antlr.Runtime.Tree.ITree.GetChild(int) call Antlr.Runtime.Tree.ITree.GetChild(int) call Antlr.Runtime.Tree.ITree.GetChild(int) call Antlr.Runtime.Tree.ITree.GetChild(int) call Antlr.Runtime.Tree.ITree.GetChild(int) = = - return public virtual public virtual return ITree public virtual public virtual = = decl_stmt Antlr.Runtime.Tree.ITree = return ITree public virtual public virtual if == return = = = decl_stmt Antlr.Runtime.Tree.ITree = return ITree IToken public virtual public virtual decl_stmt Antlr.Runtime.IToken = decl_stmt Antlr.Runtime.Tree.ITree = return public virtual public virtual return public virtual public virtual throw new public virtual public virtual return public virtual public virtual throw new public virtual public virtual return public virtual public virtual public virtual public virtual return public virtual public virtual return int public virtual public virtual if == = new < decl_stmt int if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out return = = ++ return