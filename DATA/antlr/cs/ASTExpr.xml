Antlr3.ST.Language System using System.Collections.Generic using System.Linq using System.Linq.Expressions using Antlr.Runtime.JavaExtensions using System.Reflection.FieldInfo System.Collections.ICollection System.Collections.IDictionary System.Collections.IEnumerable System.Collections.IEnumerator System.Collections.IList System.InvalidOperationException System.IO.IOException Antlr.Runtime.Tree.ITree System.Reflection.MethodInfo System.Reflection.PropertyInfo Antlr.Runtime.RecognitionException System.IO.StringWriter System.Reflection.Emit.DynamicMethod System.Reflection.Emit.OpCodes System.Reflection.ParameterAttributes class Antlr3.ST.Language.ASTExpr super super Expr string string int string decl System string int ITree decl IDictionary decl HashSet decl Dictionary decl HashSet bool string string string string string string decl IDictionary bool decl Dictionary string decl Dictionary StringTemplate internal internal template return chunk template writer return var var ActionEvaluator var ActionEvaluator ActionEvaluator decl Type HoldsActionFuncAndChunk DynamicMethod private static < private static < if try decl_stmt System.Reflection.Emit.DynamicMethod = if if ! call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out endif decl_stmt System.Type = typeof typeof typeof = new + typeof int typeof call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) ++ decl_stmt var = call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) decl_stmt Antlr3.ST.Language.ActionEvaluator = new call ActionEvaluator.actionCompiled() call ActionEvaluator.actionCompiled() call ActionEvaluator.actionCompiled() call ActionEvaluator.actionCompiled() call ActionEvaluator.actionCompiled() call var.Emit() call var.Emit() call var.Emit() call var.Emit() call var.Emit() if = endif decl_stmt var = < call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) typeof < return catch if try decl_stmt Antlr3.ST.Language.ActionEvaluator = new decl_stmt var = call ActionEvaluator.actionFunctional() call ActionEvaluator.actionFunctional() call ActionEvaluator.actionFunctional() call ActionEvaluator.actionFunctional() call ActionEvaluator.actionFunctional() decl_stmt HoldsActionFuncAndChunk = new = = return catch return decl_stmt Antlr3.ST.Language.ActionEvaluator = new return call ActionEvaluator.action() call ActionEvaluator.action() call ActionEvaluator.action() call ActionEvaluator.action() call ActionEvaluator.action() bool int bool StringTemplateAST ActionEvaluator decl System public override public override if == || == || == return decl_stmt Antlr3.ST.Language.StringTemplateAST = if != decl_stmt Antlr3.ST.Language.ActionEvaluator = if decl_stmt bool = != && decl_stmt bool = && decl_stmt System < = if if ! || == ++ = if = else ++ else endif = new decl_stmt int = try if if = else endif = call ActionEvaluator.action() call ActionEvaluator.action() call ActionEvaluator.action() call ActionEvaluator.action() call ActionEvaluator.action() catch + call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() if != return StringTemplateAST StringTemplateAST StringTemplateAST StringTemplateAST protected virtual protected virtual = decl_stmt Antlr3.ST.Language.StringTemplateAST = if != = decl_stmt Antlr3.ST.Language.StringTemplateAST = if != = decl_stmt Antlr3.ST.Language.StringTemplateAST = if != = decl_stmt Antlr3.ST.Language.StringTemplateAST = if != = if != foreach in if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() + decl string int StringTemplate int decl string decl Dictionary int var var object IEnumerator string int object string public virtual public virtual if == || == || == return decl_stmt System.Collections.Generic.Dictionary < = decl_stmt var = new for = < ++ decl_stmt object = if != = = decl_stmt int = decl_stmt var = if == || == + + return decl_stmt string = call var.Select() call var.Select() call var.Select() call var.Select() call var.Select() if != decl_stmt string = call var.Select() call var.Select() call var.Select() call var.Select() call var.Select() + + + + decl_stmt int = = decl_stmt string = new = decl_stmt int = for = new < decl_stmt int = for = < ++ decl_stmt System.Collections.Generic.IEnumerator = as if != && call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() decl_stmt string = decl_stmt object = = else ++ if == break = + = decl_stmt Antlr3.ST.StringTemplate = = = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() ++ return object StringTemplate int int StringTemplateAST decl Dictionary IEnumerator var bool var public virtual public virtual < if == || == || == return decl_stmt Antlr3.ST.StringTemplate = decl_stmt System.Collections.Generic.Dictionary < = = = decl_stmt System.Collections.Generic.IEnumerator = as if != decl_stmt var = new decl_stmt int = while call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() decl_stmt object = if == if == continue = decl_stmt int = = decl_stmt Antlr3.ST.Language.StringTemplateAST = = call Antlr3.ST.StringTemplate.GetInstanceOf() call Antlr3.ST.StringTemplate.GetInstanceOf() call Antlr3.ST.StringTemplate.GetInstanceOf() call Antlr3.ST.StringTemplate.GetInstanceOf() call Antlr3.ST.StringTemplate.GetInstanceOf() = = = new < decl_stmt var = decl_stmt bool = == if ! && != && > = = = + = = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() ++ if == = return else = = new < decl_stmt var = decl_stmt Antlr3.ST.Language.StringTemplateAST = decl_stmt bool = == if ! && != && > = = = = = return var var bool string protected virtual protected virtual decl_stmt var = if != decl_stmt string = decl_stmt bool = == if == || && > if && > + decl_stmt var = call var.Select() call var.Select() call var.Select() call var.Select() call var.Select() = call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() = object IDictionary ITypeProxyFactory public virtual public virtual if == return decl_stmt Antlr4.StringTemplate.ITypeProxyFactory = if != = call ITypeProxyFactory.CreateProxy() call ITypeProxyFactory.CreateProxy() call ITypeProxyFactory.CreateProxy() call ITypeProxyFactory.CreateProxy() call ITypeProxyFactory.CreateProxy() if == decl_stmt System.Collections.Generic.IDictionary = as if != && call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) = else return decl_stmt object = = return decl PropertyInfo MethodInfo decl System decl Dictionary decl Reflection string decl Func private static < private static < if == throw new if == throw new lock decl_stmt System.Collections.Generic.Dictionary < < decl_stmt Func < = if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out if call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out return else = new < < = decl_stmt string = + decl_stmt System.Reflection.MethodInfo = if == decl_stmt System.Reflection.PropertyInfo = if != = call decl System.GetGetMethod() call decl System.GetGetMethod() call decl System.GetGetMethod() call decl System.GetGetMethod() call decl System.GetGetMethod() if == = + if == = + if != = else = new typeof string if == decl_stmt var = if != = call decl Reflection.GetGetMethod() call decl Reflection.GetGetMethod() call decl Reflection.GetGetMethod() call decl Reflection.GetGetMethod() call decl Reflection.GetGetMethod() if != = else decl_stmt System.Reflection.FieldInfo = if == = + if != = = return var private static private static if == throw new decl_stmt var = return != && > && == typeof string decl Expression ParameterExpression private static < private static < decl_stmt Microsoft.Scripting.Ast.ParameterExpression = typeof object decl_stmt Microsoft.Scripting.Ast.Expression < < = < < typeof object return call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() decl Expression ParameterExpression private static < private static < decl_stmt Microsoft.Scripting.Ast.ParameterExpression = typeof object decl_stmt Microsoft.Scripting.Ast.Expression < < = < < typeof object return call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() decl Expression ParameterExpression private static < private static < decl_stmt Microsoft.Scripting.Ast.ParameterExpression = typeof object decl_stmt Microsoft.Scripting.Ast.Expression < < = < < typeof object return call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() call decl Expression.Compile() string string IDictionary var object decl StringTemplate string Type protected virtual protected virtual decl_stmt object = decl_stmt Antlr4.StringTemplate.Misc.Aggregate = as if != decl_stmt string = string = call decl StringTemplate.Get() call decl StringTemplate.Get() call decl StringTemplate.Get() call decl StringTemplate.Get() call decl StringTemplate.Get() return template= if template!=null decl_stmt var = template decl_stmt string = string call string.TryGetValue() call string.TryGetValue() call string.TryGetValue() call string.TryGetValue() call string.TryGetValue() out return decl_stmt System.Collections.Generic.IDictionary = as if != if = else if = else if call string.Contains() call string.Contains() call string.Contains() call string.Contains() call string.Contains() = else if call string.Contains() call string.Contains() call string.Contains() call string.Contains() call string.Contains() = else if call string.Contains() call string.Contains() call string.Contains() call string.Contains() call string.Contains() = if == = return decl_stmt string = string decl_stmt System.Type = decl_stmt var = if != try = catch + + + + + + else + + + + + return IDictionary IEnumerable ICollection string public virtual public virtual if == return if is bool return bool decl_stmt string = as string if != return decl_stmt System.Collections.Generic.ICollection = as if != return > decl_stmt System.Collections.Generic.IDictionary = as if != return > decl_stmt System.Collections.Generic.IEnumerable = as if != return < return public virtual public virtual if == return else if == return return + StringTemplateGroup StringTemplate public virtual public virtual decl_stmt Antlr3.ST.StringTemplateGroup = decl_stmt Antlr3.ST.StringTemplate = group if == + + + return = return public virtual public virtual return IEnumerator StringTemplate ITypeProxyFactory protected virtual protected virtual if == if == return = if != decl_stmt Antlr4.StringTemplate.ITypeProxyFactory = if != = call ITypeProxyFactory.CreateProxy() call ITypeProxyFactory.CreateProxy() call ITypeProxyFactory.CreateProxy() call ITypeProxyFactory.CreateProxy() call ITypeProxyFactory.CreateProxy() try decl_stmt Antlr3.ST.StringTemplate = as if != return = decl_stmt System.Collections.Generic.IEnumerator = as if != return return catch + return string IAttributeRenderer int protected virtual protected virtual decl_stmt int = decl_stmt Antlr4.StringTemplate.IAttributeRenderer = decl_stmt string = if != if != = call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) else = call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) else = if != = else = return IStringTemplateWriter StringWriter IAttributeRenderer int protected virtual protected virtual decl_stmt int = = if && throw new + + + + + + else if != = if != decl_stmt Antlr4.StringTemplate.IAttributeRenderer = typeof string if != decl_stmt System.IO.StringWriter = new decl_stmt Antlr3.ST.IStringTemplateWriter = = call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call Antlr4.StringTemplate.IAttributeRenderer.ToString(object) call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() return = return Expr bool bool IStringTemplateWriter int object StringTemplate int int StringWriter int protected virtual protected virtual decl_stmt int = decl_stmt bool = while decl_stmt object = ?? if != if == decl_stmt int = if != += continue decl_stmt Antlr3.ST.StringTemplate = as if != decl_stmt int = != : decl_stmt bool = for = < ++ decl_stmt Antlr3.ST.Language.Expr = if ! is = if ! if && != += decl_stmt int = += = continue else if ! is if && != += decl_stmt int = = += continue decl_stmt System.IO.StringWriter = new decl_stmt Antlr3.ST.IStringTemplateWriter = decl_stmt int = if != if && != += decl_stmt int = += = return bool bool IStringTemplateWriter decl System StringTemplateAST ActionEvaluator StringWriter public virtual public virtual if == return decl_stmt Antlr3.ST.Language.StringTemplateAST = as if != if decl_stmt System < = decl_stmt bool = != && decl_stmt bool = && if if if ! || ! call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out endif = if ++ if = endif if else ++ endif endif decl_stmt System.IO.StringWriter = new decl_stmt Antlr3.ST.IStringTemplateWriter = try if if else endif decl_stmt Antlr3.ST.Language.ActionEvaluator = new call ActionEvaluator.action() call ActionEvaluator.action() call ActionEvaluator.action() call ActionEvaluator.action() call ActionEvaluator.action() catch + call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() return call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() call System.IO.StringWriter.ToString() else return StringTemplate decl Dictionary StringTemplateAST ActionEvaluator StringTemplate protected virtual protected virtual decl_stmt Antlr3.ST.Language.StringTemplateAST = if == || call StringTemplateAST.GetChild() call StringTemplateAST.GetChild() call StringTemplateAST.GetChild() call StringTemplateAST.GetChild() call StringTemplateAST.GetChild() == return decl_stmt Antlr3.ST.StringTemplate = decl_stmt Antlr3.ST.StringTemplate = new = + + = = decl_stmt Antlr3.ST.Language.ActionEvaluator = new try decl_stmt System.Collections.Generic.Dictionary < = call ActionEvaluator.argList() call ActionEvaluator.argList() call ActionEvaluator.argList() call ActionEvaluator.argList() call ActionEvaluator.argList() = catch + call StringTemplateAST.ToStringTree() call StringTemplateAST.ToStringTree() call StringTemplateAST.ToStringTree() call StringTemplateAST.ToStringTree() call StringTemplateAST.ToStringTree() public static public static return ICollection IEnumerable IDictionary string protected internal static protected internal static if == return decl_stmt string = as string if != return decl_stmt System.Collections.Generic.IDictionary = as if != return call IDictionary.Values() call IDictionary.Values() call IDictionary.Values() call IDictionary.Values() call IDictionary.Values() call IDictionary.Values() call IDictionary.Values() call IDictionary.Values() call IDictionary.Values() decl_stmt System.Collections.Generic.ICollection = as if != return call ICollection.GetEnumerator() call ICollection.GetEnumerator() call ICollection.GetEnumerator() call ICollection.GetEnumerator() call ICollection.GetEnumerator() decl_stmt System.Collections.Generic.IEnumerable = as if != return < return var IEnumerator protected static protected static = decl_stmt System.Collections.Generic.IEnumerator = as if != return decl_stmt var = new call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() return call var.GetEnumerator() call var.GetEnumerator() call var.GetEnumerator() call var.GetEnumerator() call var.GetEnumerator() IEnumerator object public virtual public virtual if == return decl_stmt object = = decl_stmt System.Collections.Generic.IEnumerator = as if != if call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() = return object var IEnumerator object public virtual public virtual if == return decl_stmt object = = decl_stmt System.Collections.Generic.IEnumerator = as if != decl_stmt var = new < if ! call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() return while call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() decl_stmt object = if != call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() return else = return object IEnumerator public virtual public virtual if == return decl_stmt object = = decl_stmt System.Collections.Generic.IEnumerator = as if != while call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() = return var IEnumerator object public virtual public virtual if == return = decl_stmt System.Collections.Generic.IEnumerator = as if != decl_stmt var = new < while call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() decl_stmt object = if != call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() return return var IEnumerator object public virtual public virtual if == return = decl_stmt System.Collections.Generic.IEnumerator = as if != decl_stmt var = new < while call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() decl_stmt object = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() if > call var.RemoveAt() call var.RemoveAt() call var.RemoveAt() call var.RemoveAt() call var.RemoveAt() - return return IEnumerator IDictionary int ICollection string IEnumerable public virtual public virtual if == return decl_stmt string = as string if != return decl_stmt System.Collections.Generic.ICollection = as if != return decl_stmt System.Collections.Generic.IDictionary = as if != return decl_stmt System.Collections.Generic.IEnumerable = as if != return < decl_stmt System.Collections.Generic.IEnumerator = as if != decl_stmt int = while call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() call System.Collections.Generic.IEnumerator.MoveNext() ++ return return string object StringTemplateAST public public decl_stmt object = if != if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out decl_stmt string = as string if == decl_stmt Antlr3.ST.Language.StringTemplateAST if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out return return return public override public override return call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree()