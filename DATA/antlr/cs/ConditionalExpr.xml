Antlr3.ST.Language System.Collections.Generic using Antlr.Runtime.JavaExtensions using Antlr.Runtime.Tree.ITree Antlr.Runtime.RecognitionException System.Reflection.Emit.DynamicMethod System.Reflection.Emit.OpCodes System.Reflection.ParameterAttributes System.Type class Antlr3.ST.Language.ConditionalExpr super super ASTExpr decl List StringTemplate int StringTemplate decl Dictionary decl System return = return = public static public static return var var ActionEvaluator var ActionEvaluator ActionEvaluator decl Type HoldsConditionFuncAndChunk DynamicMethod static < static < if try decl_stmt System.Reflection.Emit.DynamicMethod = if if ! call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out endif decl_stmt System.Type = typeof typeof typeof = new + typeof bool typeof call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) call System.Reflection.Emit.DynamicMethod.DefineParameter(int,ParameterAttributes,String) ++ decl_stmt var = call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) call System.Reflection.Emit.DynamicMethod.GetILGenerator(int) decl_stmt Antlr3.ST.Language.ActionEvaluator = new call ActionEvaluator.ifConditionCompiled() call ActionEvaluator.ifConditionCompiled() call ActionEvaluator.ifConditionCompiled() call ActionEvaluator.ifConditionCompiled() call ActionEvaluator.ifConditionCompiled() call var.Emit() call var.Emit() call var.Emit() call var.Emit() call var.Emit() if = endif decl_stmt var = < call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) call System.Reflection.Emit.DynamicMethod.CreateDelegate(System,Type) typeof < return catch if try decl_stmt Antlr3.ST.Language.ActionEvaluator = new decl_stmt var = call ActionEvaluator.ifConditionFunctional() call ActionEvaluator.ifConditionFunctional() call ActionEvaluator.ifConditionFunctional() call ActionEvaluator.ifConditionFunctional() call ActionEvaluator.ifConditionFunctional() decl_stmt HoldsConditionFuncAndChunk = new = = return < typeof < typeof catch return new < decl_stmt Antlr3.ST.Language.ActionEvaluator = new return call ActionEvaluator.ifCondition() call ActionEvaluator.ifCondition() call ActionEvaluator.ifCondition() call ActionEvaluator.ifCondition() call ActionEvaluator.ifCondition() ElseIfClauseData public virtual public virtual if == = new < decl_stmt ElseIfClauseData = new = = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() bool bool int ElseIfClauseData StringTemplate ITree ActionEvaluator public override public override if == || == || == return if ! decl_stmt Antlr3.ST.Language.ActionEvaluator = endif decl_stmt int = try decl_stmt bool = if if == = decl_stmt bool = else decl_stmt Antlr.Runtime.Tree.ITree = = new decl_stmt bool = call ActionEvaluator.ifCondition() call ActionEvaluator.ifCondition() call ActionEvaluator.ifCondition() call ActionEvaluator.ifCondition() call ActionEvaluator.ifCondition() endif if = = else if != && > for = < ++ decl_stmt ElseIfClauseData = if if == = = call ElseIfClauseData.EvaluateCondition() call ElseIfClauseData.EvaluateCondition() call ElseIfClauseData.EvaluateCondition() call ElseIfClauseData.EvaluateCondition() call ElseIfClauseData.EvaluateCondition() else = new = call ActionEvaluator.ifCondition() call ActionEvaluator.ifCondition() call ActionEvaluator.ifCondition() call ActionEvaluator.ifCondition() call ActionEvaluator.ifCondition() endif if = break if ! && != decl_stmt Antlr3.ST.StringTemplate = call Antlr3.ST.StringTemplate.GetInstanceOf() call Antlr3.ST.StringTemplate.GetInstanceOf() call Antlr3.ST.StringTemplate.GetInstanceOf() call Antlr3.ST.StringTemplate.GetInstanceOf() call Antlr3.ST.StringTemplate.GetInstanceOf() = = = = call Antlr3.ST.StringTemplate.Write(IStringTemplateWriter) call Antlr3.ST.StringTemplate.Write(IStringTemplateWriter) call Antlr3.ST.StringTemplate.Write(IStringTemplateWriter) call Antlr3.ST.StringTemplate.Write(IStringTemplateWriter) call Antlr3.ST.StringTemplate.Write(IStringTemplateWriter) if ! && == = catch + return StringTemplate protected virtual protected virtual decl_stmt Antlr3.ST.StringTemplate = = = = return call Antlr3.ST.StringTemplate.Write(IStringTemplateWriter) call Antlr3.ST.StringTemplate.Write(IStringTemplateWriter) call Antlr3.ST.StringTemplate.Write(IStringTemplateWriter) call Antlr3.ST.StringTemplate.Write(IStringTemplateWriter) call Antlr3.ST.StringTemplate.Write(IStringTemplateWriter)