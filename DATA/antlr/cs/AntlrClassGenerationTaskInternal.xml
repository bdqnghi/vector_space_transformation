Antlr3.Build.Tasks System using System.Collections.Generic using System.Diagnostics using System.IO using System.Linq using System.Reflection using System.Text using class Antlr3.Build.Tasks.AntlrClassGenerationTaskInternal super super MarshalByRefObject decl IList decl List decl List return return = return Assembly decl Func Action object decl List Type Type TimeSpan decl Action decl Func decl Action int public public try decl_stmt System.Reflection.Assembly = decl_stmt System.Type = call System.Reflection.Assembly.GetType(String) call System.Reflection.Assembly.GetType(String) call System.Reflection.Assembly.GetType(String) call System.Reflection.Assembly.GetType(String) call System.Reflection.Assembly.GetType(String) decl_stmt System.Type = call System.Reflection.Assembly.GetType(String) call System.Reflection.Assembly.GetType(String) call System.Reflection.Assembly.GetType(String) call System.Reflection.Assembly.GetType(String) call System.Reflection.Assembly.GetType(String) decl_stmt object = call System.Reflection.Assembly.GetType(String) call System.Reflection.Assembly.GetType(String) call System.Reflection.Assembly.GetType(String) call System.Reflection.Assembly.GetType(String) call System.Reflection.Assembly.GetType(String) new decl_stmt System.Xml.Xsl.XsltOld.Action = typeof call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) decl_stmt System.Xml.Xsl.XsltOld.Action < = < typeof < call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) decl_stmt Func < < = < < typeof < < call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) decl_stmt Func < = < typeof < call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) call System.Type.GetMethod(String,BindingFlags) decl_stmt System.Xml.Xsl.XsltOld.Action < = < typeof < call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) call System.Type.GetProperty(String,BindingFlags) decl_stmt TimeSpan = decl_stmt System.Collections.Generic.List < = new < int if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if ! call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() using = new call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.ToArray() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() decl_stmt int = return == catch if is && != = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new throw protected override protected override if public override public override public override public override if > call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new = if !