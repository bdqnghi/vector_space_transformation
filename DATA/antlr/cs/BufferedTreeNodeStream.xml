Antlr.Runtime.Tree System.Collections.Generic using System.Console System.Collections.IList System.InvalidOperationException System.Text.StringBuilder class Antlr.Runtime.Tree.BufferedTreeNodeStream super super ITreeNodeStream super ITokenStreamInformation ITokenStream object int int ITreeAdaptor object object int int bool decl Stack IList object if < return return public public public public if < ++ return < public public = - if == - throw new return return return return = return = return = return int IToken decl_stmt int = decl_stmt Antlr.Runtime.IToken do ++ = != && <= return return protected virtual protected virtual = object bool int public virtual public virtual decl_stmt bool = call Antlr.Runtime.Tree.ITreeAdaptor.IsNil(object) call Antlr.Runtime.Tree.ITreeAdaptor.IsNil(object) call Antlr.Runtime.Tree.ITreeAdaptor.IsNil(object) call Antlr.Runtime.Tree.ITreeAdaptor.IsNil(object) call Antlr.Runtime.Tree.ITreeAdaptor.IsNil(object) if ! call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) decl_stmt int = call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetChildCount(object) if ! && > for = < ++ decl_stmt object = call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) call Antlr.Runtime.Tree.ITreeAdaptor.GetChild(object,int) if ! && > object protected virtual protected virtual if == - for = < ++ decl_stmt object = if == return return - object protected virtual protected virtual decl_stmt object = if == if = call Antlr.Runtime.Tree.ITreeAdaptor.Create(int,IToken,string) call Antlr.Runtime.Tree.ITreeAdaptor.Create(int,IToken,string) call Antlr.Runtime.Tree.ITreeAdaptor.Create(int,IToken,string) call Antlr.Runtime.Tree.ITreeAdaptor.Create(int,IToken,string) call Antlr.Runtime.Tree.ITreeAdaptor.Create(int,IToken,string) else = else if = call Antlr.Runtime.Tree.ITreeAdaptor.Create(int,IToken,string) call Antlr.Runtime.Tree.ITreeAdaptor.Create(int,IToken,string) call Antlr.Runtime.Tree.ITreeAdaptor.Create(int,IToken,string) call Antlr.Runtime.Tree.ITreeAdaptor.Create(int,IToken,string) call Antlr.Runtime.Tree.ITreeAdaptor.Create(int,IToken,string) else = call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) if == - throw new return public virtual public virtual if == - if == return if < return - if + - >= return return + - public virtual public virtual return int public virtual public virtual decl_stmt int = if >= -- + + + while >= && call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() == || call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() == || call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() call ITreeAdaptor.getType() == -- + + + return protected virtual protected virtual if == return if - < return return - public virtual public virtual if == - ++ public virtual public virtual return call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) public virtual public virtual if == - = return public virtual public virtual return public virtual public virtual public virtual public virtual public virtual public virtual if == - = public virtual public virtual if == = new < call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() int public virtual public virtual decl_stmt int = call decl Stack.Pop() call decl Stack.Pop() call decl Stack.Pop() call decl Stack.Pop() call decl Stack.Pop() return public virtual public virtual = = if != call decl Stack.Clear() call decl Stack.Clear() call decl Stack.Clear() call decl Stack.Clear() call decl Stack.Clear() public virtual < public virtual < if == - return new public virtual public virtual if != call Antlr.Runtime.Tree.ITreeAdaptor.ReplaceChildren(object,int,int,object) call Antlr.Runtime.Tree.ITreeAdaptor.ReplaceChildren(object,int,int,object) call Antlr.Runtime.Tree.ITreeAdaptor.ReplaceChildren(object,int,int,object) call Antlr.Runtime.Tree.ITreeAdaptor.ReplaceChildren(object,int,int,object) call Antlr.Runtime.Tree.ITreeAdaptor.ReplaceChildren(object,int,int,object) StringBuilder object public virtual public virtual if == - decl_stmt System.Text.StringBuilder = new for = < ++ decl_stmt object = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) StringBuilder object public virtual public virtual if == - decl_stmt System.Text.StringBuilder = new for = < && <= ++ decl_stmt object = call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call Antlr.Runtime.Tree.ITreeAdaptor.GetToken(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetToken(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetToken(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetToken(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetToken(object) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) int string int int string object StringBuilder public virtual public virtual if == || == return if == - throw new if is + + else if is else if != decl_stmt int = call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStartIndex(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStartIndex(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStartIndex(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStartIndex(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStartIndex(object) decl_stmt int = call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStopIndex(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStopIndex(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStopIndex(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStopIndex(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStopIndex(object) if call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) == = call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStopIndex(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStopIndex(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStopIndex(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStopIndex(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetTokenStopIndex(object) else if call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) == = - return call Antlr.Runtime.ITokenStream.ToString(IToken,IToken) call Antlr.Runtime.ITokenStream.ToString(IToken,IToken) call Antlr.Runtime.ITokenStream.ToString(IToken,IToken) call Antlr.Runtime.ITokenStream.ToString(IToken,IToken) call Antlr.Runtime.ITokenStream.ToString(IToken,IToken) decl_stmt object = decl_stmt int = for < ++ = if == break decl_stmt System.Text.StringBuilder = new = while != decl_stmt string = call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) if == = + call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) ++ = decl_stmt string = call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetText(object) if == = + call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call Antlr.Runtime.Tree.ITreeAdaptor.GetType(object) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int)