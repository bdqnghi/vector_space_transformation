Antlr.Runtime.Tree System using System.Collections.Generic using System.Text.StringBuilder class attribute Antlr.Runtime.Tree.BaseTree super super ITree decl List return if == return return return return return public virtual public virtual if < throw new if == || >= return return public virtual public virtual foreach in if == return return ITree int BaseTree public virtual public virtual if == return if decl_stmt Antlr.Runtime.Tree.BaseTree = as if != && != && == throw new if > if != || == if == = decl_stmt int = for = < ++ decl_stmt Antlr.Runtime.Tree.ITree = = = - else = else if == = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() = = - public virtual public virtual < if == throw new foreach in public virtual public virtual if < throw new if == return if throw new if == = = = = ITree public virtual public virtual if < throw new if >= throw new if == return decl_stmt Antlr.Runtime.Tree.ITree = call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() return int int ITree int int int int int ITree int decl List BaseTree public virtual public virtual if < throw new if < throw new if == throw new if < throw new if == throw new decl_stmt int = - + decl_stmt int decl_stmt Antlr.Runtime.Tree.ITree = decl_stmt System.Collections.Generic.List < = if decl_stmt Antlr.Runtime.Tree.BaseTree = as if != && != = else = decl_stmt int = for = < ++ call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call Antlr.Runtime.Tree.ITree.GetChild(int) call Antlr.Runtime.Tree.ITree.GetChild(int) call Antlr.Runtime.Tree.ITree.GetChild(int) call Antlr.Runtime.Tree.ITree.GetChild(int) call Antlr.Runtime.Tree.ITree.GetChild(int) else = new < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() = decl_stmt int = decl_stmt int = - if == decl_stmt int = for = <= ++ decl_stmt Antlr.Runtime.Tree.ITree = = = = ++ else if > for = < ++ + = decl_stmt int = + for = <= ++ call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() else for = < ++ + = decl_stmt int = - for = < ++ call decl List.Insert() call decl List.Insert() call decl List.Insert() call decl List.Insert() call decl List.Insert() + protected virtual < protected virtual < return new < public virtual public virtual ITree int public virtual public virtual decl_stmt int = for = < ++ decl_stmt Antlr.Runtime.Tree.ITree = = = public virtual public virtual - BaseTree int public virtual public virtual if != throw new + + + if != throw new + + + decl_stmt int = for = < ++ decl_stmt Antlr.Runtime.Tree.BaseTree = call Antlr.Runtime.Tree.BaseTree.SanityCheckParentAndChildIndexes(ITree,int) call Antlr.Runtime.Tree.BaseTree.SanityCheckParentAndChildIndexes(ITree,int) call Antlr.Runtime.Tree.BaseTree.SanityCheckParentAndChildIndexes(ITree,int) call Antlr.Runtime.Tree.BaseTree.SanityCheckParentAndChildIndexes(ITree,int) call Antlr.Runtime.Tree.BaseTree.SanityCheckParentAndChildIndexes(ITree,int) public virtual public virtual return != ITree public virtual public virtual decl_stmt Antlr.Runtime.Tree.ITree = = while != if == return = return decl List ITree public virtual < public virtual < if == return decl_stmt System.Collections.Generic.List < = new < decl_stmt Antlr.Runtime.Tree.ITree = = while != call decl List.Insert() call decl List.Insert() call decl List.Insert() call decl List.Insert() call decl List.Insert() = return StringBuilder ITree public virtual public virtual if == || == return decl_stmt System.Text.StringBuilder = new if ! call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) for = != && < ++ decl_stmt Antlr.Runtime.Tree.ITree = if > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() call Antlr.Runtime.Tree.ITree.ToStringTree() if ! call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int)