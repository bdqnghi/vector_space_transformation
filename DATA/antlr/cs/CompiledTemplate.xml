Antlr4.StringTemplate.Compiler System.Collections.Generic using System.Collections.ObjectModel using System.Linq using Antlr.Runtime using Antlr.Runtime.Tree using Antlr4.StringTemplate.Misc using System.ArgumentException System.ArgumentNullException System.Console System.Math System.NotSupportedException System.IO.StringWriter class Antlr4.StringTemplate.Compiler.CompiledTemplate decl byte decl string TemplateGroup CommonTree decl RegionType bool decl List string string int IToken decl ReadOnlyCollection decl List string decl Template int bool ITokenStream bool return = return if == throw new if ! throw new = return = return = return = return = return = = != call decl List.Count() call decl List.Count() call decl List.Count() call decl List.Count() call decl List.Count() != : return = if == return return call decl List.AsReadOnly() call decl List.AsReadOnly() call decl List.AsReadOnly() call decl List.AsReadOnly() call decl List.AsReadOnly() return = return = return = return = Interval decl_stmt Antlr4.StringTemplate.Misc.Interval = return - int int if decl_stmt int = decl_stmt int = foreach in if == continue = = if <= + return new return new return public virtual public virtual if == throw new if == return return == public virtual public virtual = if != = + if == = new < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() string string TemplateCompiler public virtual public virtual if == return foreach in if != switch case decl_stmt string = + decl_stmt Antlr4.StringTemplate.Compiler.TemplateCompiler = new decl_stmt string = = call Antlr4.StringTemplate.Compiler.TemplateCompiler.Compile(string,string,List,string,IToken) call Antlr4.StringTemplate.Compiler.TemplateCompiler.Compile(string,string,List,string,IToken) call Antlr4.StringTemplate.Compiler.TemplateCompiler.Compile(string,string,List,string,IToken) call Antlr4.StringTemplate.Compiler.TemplateCompiler.Compile(string,string,List,string,IToken) call Antlr4.StringTemplate.Compiler.TemplateCompiler.Compile(string,string,List,string,IToken) group = break case = break case = new break case case = == break default: throw new public virtual public virtual < = if == = else foreach in public virtual public virtual if == = new < = if != ++ public virtual public virtual if != foreach in group BytecodeDisassembler public virtual public virtual decl_stmt Antlr4.StringTemplate.Compiler.BytecodeDisassembler = new return call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.GetInstructions() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.GetInstructions() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.GetInstructions() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.GetInstructions() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.GetInstructions() public virtual public virtual BytecodeDisassembler public virtual public virtual decl_stmt Antlr4.StringTemplate.Compiler.BytecodeDisassembler = new using = new call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.Disassemble() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.Disassemble() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.Disassemble() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.Disassemble() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.Disassemble() call BytecodeDisassembler.GetStrings() call BytecodeDisassembler.GetStrings() call BytecodeDisassembler.GetStrings() call BytecodeDisassembler.GetStrings() call BytecodeDisassembler.GetStrings() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.GetSourceMap() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.GetSourceMap() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.GetSourceMap() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.GetSourceMap() call Antlr4.StringTemplate.Compiler.BytecodeDisassembler.GetSourceMap() return