Antlr3.Tool System.Collections.Generic using System.Collections.ObjectModel using System.Linq using Antlr3.Analysis using Antlr3.Extensions using Antlr3.Grammars using Antlr3.Misc using System.CLSCompliantAttribute Antlr3.Codegen.CodeGenerator Antlr.Runtime.CommonToken System.Console System.DateTime System.Exception System.IO.File System.IO.IOException Antlr.Runtime.IToken System.Math System.IO.Path Antlr.Runtime.RecognitionException System.Text.RegularExpressions.Regex System.Text.RegularExpressions.RegexOptions System.Text.StringBuilder System.StringComparer System.StringComparison System.IO.StringReader Antlr4.StringTemplate.Template Antlr3.Codegen.Target Antlr4.StringTemplate.TemplateGroup Antlr4.StringTemplate.TemplateGroupString System.IO.TextReader System.IO.TextWriter System.TimeSpan Antlr3.AntlrTool class Antlr3.Tool.Grammar decl HashSet string decl IDictionary decl string int decl Runtime NameSpaceChecker decl IDictionary bool GrammarType Interval decl HashSet string bool int bool decl CommonTokenStream decl List string decl MultiMap decl HashSet string Tool decl HashSet GrammarAST decl HashSet bool decl HashSet decl IDictionary decl Dictionary decl List decl string decl SortedList CompositeGrammarTree string decl Dictionary decl HashSet decl HashSet string decl HashSet decl string decl string string decl HashSet string LL1Analyzer NFA int decl HashSet decl HashSet string decl IDictionary StringTemplate decl HashSet string decl HashSet int decl HashSet string string decl List decl HashSet decl IList int string int decl int CodeGenerator string CompositeGrammar int bool decl HashSet decl Antlr NFAFactory decl HashSet decl HashSet TimeSpan decl IDictionary bool string public public return public override public override return return return if != return return return string decl_stmt string = string if != return call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return string decl_stmt string = string if != return call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return return = return call decl IDictionary.AsReadOnly() call decl IDictionary.AsReadOnly() call decl IDictionary.AsReadOnly() call decl IDictionary.AsReadOnly() call decl IDictionary.AsReadOnly() return = return return return call NFA.GetDelegator() call NFA.GetDelegator() call NFA.GetDelegator() call NFA.GetDelegator() call NFA.GetDelegator() return return return = return return int return return + + return return return == return return if != return call GrammarAST.Target() call GrammarAST.Target() call GrammarAST.Target() call GrammarAST.Target() call GrammarAST.Target() call GrammarAST.Target() call GrammarAST.Target() call GrammarAST.Target() call GrammarAST.Target() else return return return return return string decl_stmt string = string if != return call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return return return return return if == return return return = return string string public virtual public virtual if == return if ! decl_stmt string = decl_stmt string = if == = + else if ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() = StringReader public virtual public virtual decl_stmt System.IO.StringReader = new call NFA.AssignTokenTypes() call NFA.AssignTokenTypes() call NFA.AssignTokenTypes() call NFA.AssignTokenTypes() call NFA.AssignTokenTypes() call NFA.DefineGrammarSymbols() call NFA.DefineGrammarSymbols() call NFA.DefineGrammarSymbols() call NFA.DefineGrammarSymbols() call NFA.DefineGrammarSymbols() public virtual public virtual using = public virtual public virtual params params params = IToken public public decl_stmt Antlr.Runtime.IToken = while != && = return return return ANTLRLexer ANTLRParser decl Antlr decl Runtime public virtual public virtual decl_stmt Antlr3.Grammars.ANTLRLexer = new new = = new decl_stmt Antlr3.Grammars.ANTLRParser = new = decl_stmt Runtime < = try = call ANTLRParser.grammar_() call ANTLRParser.grammar_() call ANTLRParser.grammar_() call ANTLRParser.grammar_() call ANTLRParser.grammar_() catch + if && ! decl_stmt object = if == else = if != && + call decl IList.ToStringTree() call decl IList.ToStringTree() call decl IList.ToStringTree() call decl IList.ToStringTree() call decl IList.ToStringTree() call decl IList.SetUnknownTokenBoundaries() call decl IList.SetUnknownTokenBoundaries() call decl IList.SetUnknownTokenBoundaries() call decl IList.SetUnknownTokenBoundaries() call decl IList.SetUnknownTokenBoundaries() = if call decl IList.FindFirstType() call decl IList.FindFirstType() call decl IList.FindFirstType() call decl IList.FindFirstType() call decl IList.FindFirstType() == object object object object protected virtual protected virtual decl_stmt object = string if == && != && call object.ToString() call object.ToString() call object.ToString() call object.ToString() call object.ToString() decl_stmt object = string decl_stmt object = decl_stmt object = if != && ! call object.ToString() call object.ToString() call object.ToString() call object.ToString() call object.ToString() if != && ! call object.ToString() call object.ToString() call object.ToString() call object.ToString() call object.ToString() if != && ! call object.ToString() call object.ToString() call object.ToString() call object.ToString() call object.ToString() if != && call object.ToString() call object.ToString() call object.ToString() call object.ToString() call object.ToString() decl List var LeftRecursiveRuleAnalyzer GrammarAST bool public public decl_stmt var = new decl_stmt Antlr3.Tool.LeftRecursiveRuleAnalyzer = new decl_stmt bool = try = call LeftRecursiveRuleAnalyzer.rec_rule() call LeftRecursiveRuleAnalyzer.rec_rule() call LeftRecursiveRuleAnalyzer.rec_rule() call LeftRecursiveRuleAnalyzer.rec_rule() call LeftRecursiveRuleAnalyzer.rec_rule() catch if ! return decl_stmt System.Collections.Generic.List < = new < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call Antlr3.Tool.LeftRecursiveRuleAnalyzer.GetArtificialPrecStartRule() call Antlr3.Tool.LeftRecursiveRuleAnalyzer.GetArtificialPrecStartRule() call Antlr3.Tool.LeftRecursiveRuleAnalyzer.GetArtificialPrecStartRule() call Antlr3.Tool.LeftRecursiveRuleAnalyzer.GetArtificialPrecStartRule() call Antlr3.Tool.LeftRecursiveRuleAnalyzer.GetArtificialPrecStartRule() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call LeftRecursiveRuleAnalyzer.GetArtificialOpPrecRule() call LeftRecursiveRuleAnalyzer.GetArtificialOpPrecRule() call LeftRecursiveRuleAnalyzer.GetArtificialOpPrecRule() call LeftRecursiveRuleAnalyzer.GetArtificialOpPrecRule() call LeftRecursiveRuleAnalyzer.GetArtificialOpPrecRule() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call Antlr3.Tool.LeftRecursiveRuleAnalyzer.GetArtificialPrimaryRule() call Antlr3.Tool.LeftRecursiveRuleAnalyzer.GetArtificialPrimaryRule() call Antlr3.Tool.LeftRecursiveRuleAnalyzer.GetArtificialPrimaryRule() call Antlr3.Tool.LeftRecursiveRuleAnalyzer.GetArtificialPrimaryRule() call Antlr3.Tool.LeftRecursiveRuleAnalyzer.GetArtificialPrimaryRule() foreach in decl_stmt Antlr3.Tool.GrammarAST = DefineGrammarItemsWalker public virtual public virtual if call decl IList.ToStringTree() call decl IList.ToStringTree() call decl IList.ToStringTree() call decl IList.ToStringTree() call decl IList.ToStringTree() decl_stmt Antlr3.Grammars.DefineGrammarItemsWalker = new new try call DefineGrammarItemsWalker.grammar_() call DefineGrammarItemsWalker.grammar_() call DefineGrammarItemsWalker.grammar_() call DefineGrammarItemsWalker.grammar_() call DefineGrammarItemsWalker.grammar_() catch public virtual public virtual call decl List.CheckConflicts() call decl List.CheckConflicts() call decl List.CheckConflicts() call decl List.CheckConflicts() call decl List.CheckConflicts() decl IList public virtual public virtual decl_stmt System.Collections.Generic.IList < call decl MultiMap.TryGetValue() call decl MultiMap.TryGetValue() call decl MultiMap.TryGetValue() call decl MultiMap.TryGetValue() call decl MultiMap.TryGetValue() out return != && call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() string object decl IDictionary public virtual public virtual if == && == return decl_stmt System.Collections.Generic.IDictionary < out if != if != foreach in decl_stmt string = if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() decl_stmt object = return string decl IList StringBuilder string public virtual public virtual decl_stmt string = decl_stmt System.Collections.Generic.IList < = call NFA.GetDelegators() call NFA.GetDelegators() call NFA.GetDelegators() call NFA.GetDelegators() call NFA.GetDelegators() decl_stmt string = if != decl_stmt System.Text.StringBuilder = new foreach in call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) if == || == && = int return + string string GrammarAST StringTemplate public public < < decl_stmt Antlr3.ST.StringTemplate = if = new + else = new + for = < ++ decl_stmt string = string call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) for = < ++ decl_stmt string = string call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) + decl_stmt Antlr3.Tool.GrammarAST = call StringTemplate.Render() call StringTemplate.Render() call StringTemplate.Render() call StringTemplate.Render() call StringTemplate.Render() return ANTLRLexer ANTLRParser decl Antlr TokenStreamRewriteEngine public public decl_stmt Antlr3.Grammars.ANTLRLexer = new new decl_stmt TokenStreamRewriteEngine = new call TokenStreamRewriteEngine.Discard() call TokenStreamRewriteEngine.Discard() call TokenStreamRewriteEngine.Discard() call TokenStreamRewriteEngine.Discard() call TokenStreamRewriteEngine.Discard() decl_stmt Antlr3.Grammars.ANTLRParser = new new = = try decl_stmt Runtime < = call ANTLRParser.rule() call ANTLRParser.rule() call ANTLRParser.rule() call ANTLRParser.rule() call ANTLRParser.rule() return catch return GrammarAST public public decl_stmt Antlr3.Tool.GrammarAST = for = < ++ = call decl IList.GetChild() call decl IList.GetChild() call decl IList.GetChild() call decl IList.GetChild() call decl IList.GetChild() if == || == || == break if != call decl IList.AddChild() call decl IList.AddChild() call decl IList.AddChild() call decl IList.AddChild() call decl IList.AddChild() decl IList bool GrammarAST GrammarAST string protected virtual < protected virtual < < < decl_stmt System.Collections.Generic.IList < = new < if == return decl_stmt bool = == foreach in decl_stmt string = decl_stmt Antlr3.Tool.GrammarAST = decl_stmt Antlr3.Tool.GrammarAST = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return GrammarAST decl IList public public decl_stmt System.Collections.Generic.IList < = for = < ++ decl_stmt Antlr3.Tool.GrammarAST = call decl IList.AddChild() call decl IList.AddChild() call decl IList.AddChild() call decl IList.AddChild() call decl IList.AddChild() string object protected virtual protected virtual foreach in decl_stmt string = decl_stmt object = if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() NFAState NFAState string public virtual public virtual if != return = new = new foreach in decl_stmt string = decl_stmt Antlr3.Analysis.NFAState = call decl Dictionary.NewState() call decl Dictionary.NewState() call decl Dictionary.NewState() call decl Dictionary.NewState() call decl Dictionary.NewState() = + + = = decl_stmt Antlr3.Analysis.NFAState = call decl Dictionary.NewState() call decl Dictionary.NewState() call decl Dictionary.NewState() call decl Dictionary.NewState() call decl Dictionary.NewState() = + + = = = decl Runtime decl Antlr public virtual public virtual if == if return if == return decl_stmt Antlr.Runtime.Tree.ITreeNodeStream = new decl_stmt Antlr3.Grammars.TreeToNFAConverter = new try call decl Runtime.grammar_() call decl Runtime.grammar_() call decl Runtime.grammar_() call decl Runtime.grammar_() call decl Runtime.grammar_() catch = public virtual public virtual Barrier int NFAState int NFAConversionThread DateTime DateTime Rule string NFAConversionThread DFA FASerializer public virtual public virtual if == decl_stmt DateTime = decl_stmt int = if for = <= ++ decl_stmt Antlr3.Analysis.NFAState = if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() if + + + continue if ! && > decl_stmt Antlr3.Tool.Rule = if && ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() continue decl_stmt Antlr3.Analysis.DFA = if == || == = if == if + + = if == if + decl_stmt Antlr3.Tool.FASerializer = new decl_stmt string = call Antlr3.Tool.FASerializer.Serialize(State) call Antlr3.Tool.FASerializer.Serialize(State) call Antlr3.Tool.FASerializer.Serialize(State) call Antlr3.Tool.FASerializer.Serialize(State) call Antlr3.Tool.FASerializer.Serialize(State) else decl_stmt Antlr3.Misc.Barrier = new decl_stmt int = / decl_stmt Antlr3.Analysis.NFAConversionThread = new new if == / ++ decl_stmt Antlr3.Analysis.NFAConversionThread = new new try call Barrier.WaitForRelease() call Barrier.WaitForRelease() call Barrier.WaitForRelease() call Barrier.WaitForRelease() call Barrier.WaitForRelease() catch throw new decl_stmt DateTime = = - = bool DFA DFA Decision bool NFAState string NFAState LookaheadSet decl IList decl LookaheadSet LookaheadSet NFAState Rule int decl IList int decl MultiMap IntervalSet LookaheadSet public virtual public virtual decl_stmt Decision = decl_stmt string = decl_stmt Antlr3.Tool.Rule = decl_stmt Antlr3.Analysis.NFAState = if + + + if && ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() return decl_stmt int = decl_stmt Antlr3.Analysis.LookaheadSet = new + for = <= ++ decl_stmt int = call Antlr3.Analysis.NFAState.TranslateDisplayAltToWalkAlt(int) call Antlr3.Analysis.NFAState.TranslateDisplayAltToWalkAlt(int) call Antlr3.Analysis.NFAState.TranslateDisplayAltToWalkAlt(int) call Antlr3.Analysis.NFAState.TranslateDisplayAltToWalkAlt(int) call Antlr3.Analysis.NFAState.TranslateDisplayAltToWalkAlt(int) decl_stmt Antlr3.Analysis.NFAState = decl_stmt Antlr3.Analysis.NFAState = = call CodeGenerator.Look() call CodeGenerator.Look() call CodeGenerator.Look() call CodeGenerator.Look() call CodeGenerator.Look() decl_stmt bool = for = <= ++ for = + <= ++ decl_stmt Antlr3.Analysis.LookaheadSet = if ! = goto goto decl_stmt bool = call CodeGenerator.DetectConfoundingPredicates() call CodeGenerator.DetectConfoundingPredicates() call CodeGenerator.DetectConfoundingPredicates() call CodeGenerator.DetectConfoundingPredicates() call CodeGenerator.DetectConfoundingPredicates() if && ! if + + decl_stmt Antlr3.Analysis.DFA = new return if != || ! || return decl_stmt System.Collections.Generic.IList < = new < for = < ++ decl_stmt Antlr3.Analysis.LookaheadSet = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() decl_stmt System.Collections.Generic.IList < = decl_stmt Antlr4.StringTemplate.Misc.MultiMap < = new < for = < ++ decl_stmt Antlr3.Misc.IntervalSet = for = < ++ decl_stmt Antlr3.Analysis.LookaheadSet = if ! call Antlr3.Misc.IntervalSet.And(IIntSet) call Antlr3.Misc.IntervalSet.And(IIntSet) call Antlr3.Misc.IntervalSet.And(IIntSet) call Antlr3.Misc.IntervalSet.And(IIntSet) call Antlr3.Misc.IntervalSet.And(IIntSet) call decl MultiMap.Map() call decl MultiMap.Map() call decl MultiMap.Map() call decl MultiMap.Map() call decl MultiMap.Map() decl_stmt Antlr3.Analysis.DFA = new return int GrammarAST int private private decl_stmt Antlr3.Tool.GrammarAST = call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() decl_stmt int = decl_stmt int = + + = int decl OrderedHashSet IntervalSet IntervalSet int IIntSet IntervalSet IntervalSet protected virtual < protected virtual < < decl_stmt Antlr3.Misc.OrderedHashSet < = new < decl_stmt int = for = < ++ decl_stmt Antlr3.Misc.IntervalSet = if call decl OrderedHashSet.Contains() call decl OrderedHashSet.Contains() call decl OrderedHashSet.Contains() call decl OrderedHashSet.Contains() call decl OrderedHashSet.Contains() continue decl_stmt Antlr3.Misc.IntervalSet = decl_stmt int = for = < ++ decl_stmt Antlr3.Misc.IntervalSet = if call Antlr3.Misc.IntervalSet.And(IIntSet) call Antlr3.Misc.IntervalSet.And(IIntSet) call Antlr3.Misc.IntervalSet.And(IIntSet) call Antlr3.Misc.IntervalSet.And(IIntSet) call Antlr3.Misc.IntervalSet.And(IIntSet) continue decl_stmt Antlr3.Misc.IntervalSet = call Antlr3.Misc.IntervalSet.And(IIntSet) call Antlr3.Misc.IntervalSet.And(IIntSet) call Antlr3.Misc.IntervalSet.And(IIntSet) call Antlr3.Misc.IntervalSet.And(IIntSet) call Antlr3.Misc.IntervalSet.And(IIntSet) = decl_stmt Antlr3.Misc.IIntSet = call Antlr3.Misc.IntervalSet.Subtract(IIntSet) call Antlr3.Misc.IntervalSet.Subtract(IIntSet) call Antlr3.Misc.IntervalSet.Subtract(IIntSet) call Antlr3.Misc.IntervalSet.Subtract(IIntSet) call Antlr3.Misc.IntervalSet.Subtract(IIntSet) if != && ! call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() = call Antlr3.Misc.IntervalSet.Subtract(IIntSet) call Antlr3.Misc.IntervalSet.Subtract(IIntSet) call Antlr3.Misc.IntervalSet.Subtract(IIntSet) call Antlr3.Misc.IntervalSet.Subtract(IIntSet) call Antlr3.Misc.IntervalSet.Subtract(IIntSet) if break = if ! call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() return call decl OrderedHashSet.GetElements() call decl OrderedHashSet.GetElements() call decl OrderedHashSet.GetElements() call decl OrderedHashSet.GetElements() call decl OrderedHashSet.GetElements() DateTime Decision string NFAState DateTime bool Rule DFA public virtual public virtual decl_stmt Decision = decl_stmt string = decl_stmt Antlr3.Tool.Rule = decl_stmt Antlr3.Analysis.NFAState = decl_stmt DateTime = decl_stmt DateTime = if + + + = decl_stmt Antlr3.Analysis.DFA = decl_stmt bool = || if && call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call decl HashSet.Remove() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() if + + + = = if foreach in if = + + + - + return public virtual public virtual = public virtual public virtual return public virtual public virtual ++ return int string public virtual public virtual if call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() return if == = if >= call NFA.TypeToStringLiteralList() call NFA.TypeToStringLiteralList() call NFA.TypeToStringLiteralList() call NFA.TypeToStringLiteralList() call NFA.TypeToStringLiteralList() call NFA.TypeToStringLiteralList() call NFA.TypeToStringLiteralList() call NFA.TypeToStringLiteralList() call NFA.TypeToStringLiteralList() + = else = decl_stmt int = + - = if >= call NFA.TypeToTokenList() call NFA.TypeToTokenList() call NFA.TypeToTokenList() call NFA.TypeToTokenList() call NFA.TypeToTokenList() call NFA.TypeToTokenList() call NFA.TypeToTokenList() call NFA.TypeToTokenList() call NFA.TypeToTokenList() + decl_stmt string = string if == || == = Rule string public virtual public virtual < decl_stmt string = if != return if == || == && == return decl_stmt Antlr3.Tool.Rule = new = ?? = call Antlr3.Tool.Rule.SetOptions(IDictionary,IToken) call Antlr3.Tool.Rule.SetOptions(IDictionary,IToken) call Antlr3.Tool.Rule.SetOptions(IDictionary,IToken) call Antlr3.Tool.Rule.SetOptions(IDictionary,IToken) call Antlr3.Tool.Rule.SetOptions(IDictionary,IToken) = call NFA.RuleIndexToRuleList() call NFA.RuleIndexToRuleList() call NFA.RuleIndexToRuleList() call NFA.RuleIndexToRuleList() call NFA.RuleIndexToRuleList() call NFA.RuleIndexToRuleList() call NFA.RuleIndexToRuleList() call NFA.RuleIndexToRuleList() call NFA.RuleIndexToRuleList() + = ++ if call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() = string public virtual public virtual if == = new < < decl_stmt string = + + + + call bool.Add() call bool.Add() call bool.Add() call bool.Add() call bool.Add() new < return decl KeyValuePair public virtual public virtual if == return decl_stmt KeyValuePair < = call bool.FirstOrDefault() call bool.FirstOrDefault() call bool.FirstOrDefault() call bool.FirstOrDefault() call bool.FirstOrDefault() return public virtual public virtual call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() GrammarAST string decl IList object decl IDictionary public virtual public virtual if == = decl_stmt string = decl_stmt System.Collections.Generic.IDictionary < out if == = new < = decl_stmt object call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out decl_stmt Antlr3.Tool.GrammarAST = as if != else = if == && call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() decl_stmt System.Collections.Generic.IList < = call NFA.RootGrammar() call NFA.RootGrammar() call NFA.RootGrammar() call NFA.RootGrammar() call NFA.RootGrammar() call NFA.RootGrammar() call NFA.RootGrammar() call NFA.RootGrammar() call NFA.RootGrammar() foreach in if call bool.IsValidActionScope() call bool.IsValidActionScope() call bool.IsValidActionScope() call bool.IsValidActionScope() call bool.IsValidActionScope() string decl IDictionary public virtual public virtual decl_stmt string = decl_stmt System.Collections.Generic.IDictionary < out if == || ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() if == = new < = = public virtual public virtual switch case return case case return case return return StringBuilder CommonToken string public virtual public virtual decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) for = <= && < ++ decl_stmt Antlr.Runtime.CommonToken = call decl Antlr.Get() call decl Antlr.Get() call decl Antlr.Get() call decl Antlr.Get() call decl Antlr.Get() if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if == || == || == || == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else if == call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) decl_stmt string = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) if call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() public virtual public virtual if call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() call NFA.LexerRules() string public virtual public virtual decl_stmt string = if Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule if call bool.TryGetValue() call bool.TryGetValue() call bool.TryGetValue() call bool.TryGetValue() call bool.TryGetValue() ?? out return return Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = call NFA.GetRule() call NFA.GetRule() call NFA.GetRule() call NFA.GetRule() call NFA.GetRule() return Grammar public virtual public virtual if != decl_stmt Antlr3.Tool.Grammar = call NFA.GetGrammar() call NFA.GetGrammar() call NFA.GetGrammar() call NFA.GetGrammar() call NFA.GetGrammar() if == return return call Antlr3.Tool.Grammar.GetLocallyDefinedRule(string) call Antlr3.Tool.Grammar.GetLocallyDefinedRule(string) call Antlr3.Tool.Grammar.GetLocallyDefinedRule(string) call Antlr3.Tool.Grammar.GetLocallyDefinedRule(string) call Antlr3.Tool.Grammar.GetLocallyDefinedRule(string) return Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != return return public virtual public virtual return Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != return return Rule public virtual public virtual if return if call string.Contains() call string.Contains() call string.Contains() call string.Contains() call string.Contains() return decl_stmt Antlr3.Tool.Rule = return ! || && call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() AttributeScope public virtual public virtual decl_stmt Antlr3.Tool.AttributeScope = new = return AttributeScope public virtual public virtual decl_stmt Antlr3.Tool.AttributeScope = new = return AttributeScope public virtual public virtual decl_stmt Antlr3.Tool.AttributeScope = new = return AttributeScope public virtual public virtual decl_stmt Antlr3.Tool.AttributeScope = new = return AttributeScope public virtual public virtual decl_stmt Antlr3.Tool.AttributeScope call decl HashSet.TryGetValue() call decl HashSet.TryGetValue() call decl HashSet.TryGetValue() call decl HashSet.TryGetValue() call decl HashSet.TryGetValue() out return bool protected virtual protected virtual decl_stmt bool = call decl List.CheckForLabelTypeMismatch() call decl List.CheckForLabelTypeMismatch() call decl List.CheckForLabelTypeMismatch() call decl List.CheckForLabelTypeMismatch() call decl List.CheckForLabelTypeMismatch() if return Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != if == && == || == || == || == || == else Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != if == && == || == || == || == || == else Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != if ! LabelElementPair Rule decl HashSet string public virtual < public virtual < < decl_stmt System.Collections.Generic.HashSet < = new < foreach in if == decl_stmt string = decl_stmt Antlr3.Tool.Rule = if == continue decl_stmt LabelElementPair = call Antlr3.Tool.Rule.GetLabel(string) call Antlr3.Tool.Rule.GetLabel(string) call Antlr3.Tool.Rule.GetLabel(string) call Antlr3.Tool.Rule.GetLabel(string) call Antlr3.Tool.Rule.GetLabel(string) if != && == && ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return decl IEnumerable ActionAnalysisLexer var protected virtual protected virtual foreach in decl_stmt var = foreach in decl_stmt Antlr3.Grammars.ActionAnalysisLexer = new call Antlr3.Grammars.ActionAnalysisLexer.Analyze() call Antlr3.Grammars.ActionAnalysisLexer.Analyze() call Antlr3.Grammars.ActionAnalysisLexer.Analyze() call Antlr3.Grammars.ActionAnalysisLexer.Analyze() call Antlr3.Grammars.ActionAnalysisLexer.Analyze() decl_stmt System.Collections.Generic.IEnumerable < = < foreach in decl_stmt Antlr3.Grammars.ActionAnalysisLexer = new call Antlr3.Grammars.ActionAnalysisLexer.Analyze() call Antlr3.Grammars.ActionAnalysisLexer.Analyze() call Antlr3.Grammars.ActionAnalysisLexer.Analyze() call Antlr3.Grammars.ActionAnalysisLexer.Analyze() call Antlr3.Grammars.ActionAnalysisLexer.Analyze() Rule public virtual public virtual if == return foreach in decl_stmt Antlr3.Tool.Rule = var protected virtual protected virtual < if == return decl_stmt var = from in let = where != && ! && ! select foreach in call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() Rule IToken public virtual public virtual decl_stmt Antlr3.Tool.Rule = if == return call Antlr3.Tool.Rule.TrackRuleReferenceInAlt(GrammarAST,int) call Antlr3.Tool.Rule.TrackRuleReferenceInAlt(GrammarAST,int) call Antlr3.Tool.Rule.TrackRuleReferenceInAlt(GrammarAST,int) call Antlr3.Tool.Rule.TrackRuleReferenceInAlt(GrammarAST,int) call Antlr3.Tool.Rule.TrackRuleReferenceInAlt(GrammarAST,int) decl_stmt Antlr.Runtime.IToken = if ! call decl Dictionary.Contains() call decl Dictionary.Contains() call decl Dictionary.Contains() call decl Dictionary.Contains() call decl Dictionary.Contains() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if == return call Antlr3.Tool.Rule.TrackTokenReferenceInAlt(GrammarAST,int) call Antlr3.Tool.Rule.TrackTokenReferenceInAlt(GrammarAST,int) call Antlr3.Tool.Rule.TrackTokenReferenceInAlt(GrammarAST,int) call Antlr3.Tool.Rule.TrackTokenReferenceInAlt(GrammarAST,int) call Antlr3.Tool.Rule.TrackTokenReferenceInAlt(GrammarAST,int) if ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != && != = public virtual < < public virtual < < return call bool.CheckAllRulesForLeftRecursion() call bool.CheckAllRulesForLeftRecursion() call bool.CheckAllRulesForLeftRecursion() call bool.CheckAllRulesForLeftRecursion() call bool.CheckAllRulesForLeftRecursion() public virtual < public virtual < if == if != return call bool.CheckAllRulesForLeftRecursion() call bool.CheckAllRulesForLeftRecursion() call bool.CheckAllRulesForLeftRecursion() call bool.CheckAllRulesForLeftRecursion() call bool.CheckAllRulesForLeftRecursion() return public virtual public virtual call bool.CheckRuleReference() call bool.CheckRuleReference() call bool.CheckRuleReference() call bool.CheckRuleReference() call bool.CheckRuleReference() BitSet public virtual public virtual decl_stmt Antlr3.Misc.BitSet = new call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) call Antlr3.Misc.BitSet.Add(int) return == GrammarAST decl List protected virtual protected virtual decl_stmt System.Collections.Generic.List < = new < call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() while > decl_stmt Antlr3.Tool.GrammarAST = - call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() call decl List.RemoveAt() - if == continue if >= && return call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call Antlr3.Tool.GrammarAST.GetChildrenAsArray() call Antlr3.Tool.GrammarAST.GetChildrenAsArray() call Antlr3.Tool.GrammarAST.GetChildrenAsArray() call Antlr3.Tool.GrammarAST.GetChildrenAsArray() call Antlr3.Tool.GrammarAST.GetChildrenAsArray() return public virtual public virtual return == || == || == || == || == || != && == int public virtual public virtual decl_stmt int if == if call NFA.StringLiteralToTypeMap() call NFA.StringLiteralToTypeMap() call NFA.StringLiteralToTypeMap() call NFA.StringLiteralToTypeMap() call NFA.StringLiteralToTypeMap() call NFA.StringLiteralToTypeMap() call NFA.StringLiteralToTypeMap() call NFA.StringLiteralToTypeMap() call NFA.StringLiteralToTypeMap() out return else if call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() call NFA.TokenIDToTypeMap() out return return string decl IList public virtual < public virtual < decl_stmt System.Collections.Generic.IList < = new < for = <= ++ decl_stmt string = if == call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return decl HashSet public virtual < public virtual < decl_stmt System.Collections.Generic.HashSet < = new < for = <= ++ call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return int string int public static public static switch case return case if + return - decl_stmt int = decl_stmt int = if == return return case decl_stmt string = - - return default: + return - string int char StringBuilder int public static public static decl_stmt System.Text.StringBuilder = new decl_stmt int = - for = < ++ decl_stmt char = if == ++ = if == ++ decl_stmt string = decl_stmt int = += - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) char else if + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + char else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) char else call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return int var public virtual public virtual decl_stmt var = foreach in decl_stmt int = = if >= return string Grammar string TextReader string public virtual public virtual decl_stmt string = decl_stmt string = + decl_stmt System.IO.TextReader = try decl_stmt string = if ! = + = = new decl_stmt Antlr3.Tool.Grammar = = new = call Antlr3.Tool.Grammar.ParseAndBuildAST(TextReader) call Antlr3.Tool.Grammar.ParseAndBuildAST(TextReader) call Antlr3.Tool.Grammar.ParseAndBuildAST(TextReader) call Antlr3.Tool.Grammar.ParseAndBuildAST(TextReader) call Antlr3.Tool.Grammar.ParseAndBuildAST(TextReader) call Antlr3.Tool.Grammar.AddRulesForSyntacticPredicates() call Antlr3.Tool.Grammar.AddRulesForSyntacticPredicates() call Antlr3.Tool.Grammar.AddRulesForSyntacticPredicates() call Antlr3.Tool.Grammar.AddRulesForSyntacticPredicates() call Antlr3.Tool.Grammar.AddRulesForSyntacticPredicates() if ! return if == && call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() + int || call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() + int return if != if == && == catch finally if != try call System.IO.TextReader.Close() call System.IO.TextReader.Close() call System.IO.TextReader.Close() call System.IO.TextReader.Close() call System.IO.TextReader.Close() catch CompositeGrammarTree protected virtual protected virtual decl_stmt Antlr3.Tool.CompositeGrammarTree = call NFA.DelegateGrammarTreeRoot() call NFA.DelegateGrammarTreeRoot() call NFA.DelegateGrammarTreeRoot() call NFA.DelegateGrammarTreeRoot() call NFA.DelegateGrammarTreeRoot() call NFA.DelegateGrammarTreeRoot() call NFA.DelegateGrammarTreeRoot() call NFA.DelegateGrammarTreeRoot() call NFA.DelegateGrammarTreeRoot() call Antlr3.Tool.CompositeGrammarTree.AddChild(CompositeGrammarTree) call Antlr3.Tool.CompositeGrammarTree.AddChild(CompositeGrammarTree) call Antlr3.Tool.CompositeGrammarTree.AddChild(CompositeGrammarTree) call Antlr3.Tool.CompositeGrammarTree.AddChild(CompositeGrammarTree) call Antlr3.Tool.CompositeGrammarTree.AddChild(CompositeGrammarTree) new = Regex decl string string int string var public virtual public virtual if ! return decl_stmt System.Text.RegularExpressions.Regex = new decl_stmt string = if try decl_stmt string = for = < ++ decl_stmt string = decl_stmt int = call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() if >= = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() decl_stmt var = call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) call System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions) if ! + continue catch catch else return int string public virtual public virtual decl_stmt string = decl_stmt int = if == && >= && <= return else if < = string + else = - += if < = string if != && call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() call string.StartsWith() = else = return object int public virtual public virtual if >= return decl_stmt object = if == = else if is int decl_stmt int = int = else if call object.Equals() call object.Equals() call object.Equals() call object.Equals() call object.Equals() = return public virtual public virtual if return if ! return if == && == = if == = new < = return public virtual public virtual switch case return ! call GrammarType.Contains() call GrammarType.Contains() call GrammarType.Contains() call GrammarType.Contains() call GrammarType.Contains() case return ! call decl IDictionary.Contains() call decl IDictionary.Contains() call decl IDictionary.Contains() call decl IDictionary.Contains() call decl IDictionary.Contains() case return ! call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() default: return ! call decl IDictionary.Contains() call decl IDictionary.Contains() call decl IDictionary.Contains() call decl IDictionary.Contains() call decl IDictionary.Contains() object string string public virtual public virtual < if == = return foreach in call string.ToArray() call string.ToArray() call string.ToArray() call string.ToArray() call string.ToArray() decl_stmt string = decl_stmt object = decl_stmt string = if == call string.Remove() call string.Remove() call string.Remove() call string.Remove() call string.Remove() public virtual public virtual return call NFA.GetOption() call NFA.GetOption() call NFA.GetOption() call NFA.GetOption() call NFA.GetOption() object public virtual public virtual decl_stmt object = if != call string.TryGetValue() call string.TryGetValue() call string.TryGetValue() call string.TryGetValue() call string.TryGetValue() out if == call decl HashSet.TryGetValue() call decl HashSet.TryGetValue() call decl HashSet.TryGetValue() call decl HashSet.TryGetValue() call decl HashSet.TryGetValue() out return object string public virtual public virtual decl_stmt string = string if != return decl_stmt object if == call decl HashSet.TryGetValue() call decl HashSet.TryGetValue() call decl HashSet.TryGetValue() call decl HashSet.TryGetValue() call decl HashSet.TryGetValue() out else call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out return int int object GrammarAST public virtual public virtual decl_stmt int = decl_stmt Antlr3.Tool.GrammarAST = call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() decl_stmt object = call Antlr3.Tool.GrammarAST.GetBlockOption(string) call Antlr3.Tool.GrammarAST.GetBlockOption(string) call Antlr3.Tool.GrammarAST.GetBlockOption(string) call Antlr3.Tool.GrammarAST.GetBlockOption(string) call Antlr3.Tool.GrammarAST.GetBlockOption(string) if == = return if is int decl_stmt int = int = else if call object.Equals() call object.Equals() call object.Equals() call object.Equals() call object.Equals() = return string NFAState public virtual public virtual decl_stmt Antlr3.Analysis.NFAState = decl_stmt string = string if == = string call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() call int.Grammar() return != && call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() public virtual public virtual return public virtual < public virtual < return call NFA.GetDelegatedRules() call NFA.GetDelegatedRules() call NFA.GetDelegatedRules() call NFA.GetDelegatedRules() call NFA.GetDelegatedRules() public virtual < public virtual < return call NFA.GetAllImportedRules() call NFA.GetAllImportedRules() call NFA.GetAllImportedRules() call NFA.GetAllImportedRules() call NFA.GetAllImportedRules() public virtual < public virtual < return call NFA.GetDelegates() call NFA.GetDelegates() call NFA.GetDelegates() call NFA.GetDelegates() call NFA.GetDelegates() decl IList decl IList public virtual < public virtual < decl_stmt System.Collections.Generic.IList < = new < decl_stmt System.Collections.Generic.IList < = call NFA.GetDelegates() call NFA.GetDelegates() call NFA.GetDelegates() call NFA.GetDelegates() call NFA.GetDelegates() if != foreach in call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return public virtual < public virtual < return call NFA.GetDirectDelegates() call NFA.GetDirectDelegates() call NFA.GetDirectDelegates() call NFA.GetDirectDelegates() call NFA.GetDirectDelegates() public virtual < public virtual < return call NFA.GetIndirectDelegates() call NFA.GetIndirectDelegates() call NFA.GetIndirectDelegates() call NFA.GetIndirectDelegates() call NFA.GetIndirectDelegates() public virtual < public virtual < return call NFA.GetDelegators() call NFA.GetDelegators() call NFA.GetDelegators() call NFA.GetDelegators() call NFA.GetDelegators() public virtual < public virtual < return Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != = = public virtual public virtual return Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != return return Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != return return Rule public virtual public virtual decl_stmt Antlr3.Tool.Rule = if != return return public virtual public virtual ++ = return int Decision protected internal virtual protected internal virtual decl_stmt int = - if >= return decl_stmt Decision = return int Decision protected virtual protected virtual decl_stmt int = - if < return decl_stmt Decision = new = = call decl IDictionary.Resize() call decl IDictionary.Resize() call decl IDictionary.Resize() call decl IDictionary.Resize() call decl IDictionary.Resize() = return var Decision public virtual < public virtual < decl_stmt var = new < for = < ++ decl_stmt Decision = call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() return Decision public virtual public virtual decl_stmt Decision = if == return return Decision public virtual public virtual decl_stmt Decision = if == return return Decision public virtual public virtual decl_stmt Decision = if == return return string var public virtual < public virtual < decl_stmt string = + decl_stmt var = new < foreach in if call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() return DFA public virtual public virtual decl_stmt Antlr3.Analysis.DFA call string.TryGetValue() call string.TryGetValue() call string.TryGetValue() call string.TryGetValue() call string.TryGetValue() + + out return Decision public virtual public virtual decl_stmt Decision = = Decision public virtual public virtual decl_stmt Decision = if != if == = new < call Decision.options() call Decision.options() call Decision.options() call Decision.options() call Decision.options() call Decision.options() call Decision.options() call Decision.options() call Decision.options() Decision public virtual public virtual decl_stmt Decision = if == return return Decision int public virtual public virtual decl_stmt int = for = <= ++ decl_stmt Decision = if != && ++ return Decision GrammarAST public virtual public virtual decl_stmt Decision = = decl_stmt Antlr3.Tool.GrammarAST = = Decision public virtual public virtual decl_stmt Decision = = Decision public virtual public virtual decl_stmt Decision = = string string public static public static if < + return if < && != return + + if <= && ! char if == return if == return return + char + decl_stmt string = decl_stmt string = + + return IIntSet public virtual public virtual decl_stmt Antlr3.Misc.IIntSet = return public virtual public virtual return bool int public virtual public virtual decl_stmt bool = try decl_stmt int = = > catch = return Rule IIntSet public virtual public virtual decl_stmt Antlr3.Tool.Rule = if == return decl_stmt Antlr3.Misc.IIntSet = = return NFAState int public virtual public virtual if == return decl_stmt int = decl_stmt Antlr3.Analysis.NFAState = while != ++ = return NFAState Transition int public virtual public virtual if == || <= return decl_stmt int = decl_stmt Antlr3.Analysis.NFAState = while != if == return ++ decl_stmt Antlr3.Analysis.Transition = = if != = return LookaheadSet Rule public virtual public virtual if == for = decl_stmt Antlr3.Tool.Rule = if continue decl_stmt Antlr3.Analysis.LookaheadSet = call CodeGenerator.FOLLOW() call CodeGenerator.FOLLOW() call CodeGenerator.FOLLOW() call CodeGenerator.FOLLOW() call CodeGenerator.FOLLOW() + + + public virtual public virtual return call CodeGenerator.First() call CodeGenerator.First() call CodeGenerator.First() call CodeGenerator.First() call CodeGenerator.First() public virtual public virtual return call CodeGenerator.Look() call CodeGenerator.Look() call CodeGenerator.Look() call CodeGenerator.Look() call CodeGenerator.Look() public virtual public virtual return + public override public override return public virtual public virtual return string public virtual public virtual decl_stmt string = try = + + + + += new new catch = return ANTLRTreePrinter string public virtual public virtual decl_stmt Antlr3.Grammars.ANTLRTreePrinter = new new try decl_stmt string = call ANTLRTreePrinter.toString() call ANTLRTreePrinter.toString() call ANTLRTreePrinter.toString() call ANTLRTreePrinter.toString() call ANTLRTreePrinter.toString() catch