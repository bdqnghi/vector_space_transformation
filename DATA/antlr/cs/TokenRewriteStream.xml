Antlr.Runtime System.Collections.Generic using System.ArgumentException System.Diagnostics.DebuggerDisplayAttribute System.Exception System.Text.StringBuilder System.Type class attribute attribute Antlr.Runtime.TokenRewriteStream super super CommonTokenStream int int string decl IDictionary decl IDictionary public virtual public virtual return int string public override public override decl_stmt string = decl_stmt int = call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() call string.IndexOf() = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() + return + + + + + + public override public override if != return + public override public override if != return + public override public override return + + + + + + public override public override return + + + + protected protected = new < < = new < = new < public virtual public virtual decl IList decl List public virtual public virtual decl_stmt System.Collections.Generic.IList < if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out && != decl_stmt System.Collections.Generic.List < = new < for = <= ++ call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() = public virtual public virtual public virtual public virtual public virtual public virtual public virtual public virtual public virtual public virtual public virtual public virtual + public virtual public virtual public virtual public virtual public virtual public virtual decl IList RewriteOperation public virtual public virtual decl_stmt RewriteOperation = new decl_stmt System.Collections.Generic.IList < = = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() public virtual public virtual public virtual public virtual from public virtual public virtual public virtual public virtual from decl IList RewriteOperation public virtual public virtual if from > || from < || < || >= throw new + from + + + + + decl_stmt RewriteOperation = new from decl_stmt System.Collections.Generic.IList < = = call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() public virtual public virtual from public virtual public virtual public virtual public virtual from public virtual public virtual public virtual public virtual from public virtual public virtual from public virtual public virtual from public virtual public virtual return int protected virtual protected virtual decl_stmt int if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out return return - protected virtual protected virtual = decl IList protected virtual < protected virtual < decl_stmt System.Collections.Generic.IList < if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out || == = return decl IList private < private < decl_stmt System.Collections.Generic.IList < = new < = return public virtual public virtual return - StringBuilder public virtual public virtual decl_stmt System.Text.StringBuilder = new for = >= && <= && < ++ if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public override public override return - public virtual public virtual return - public override public override return bool int IToken decl IDictionary decl IList StringBuilder RewriteOperation public virtual public virtual decl_stmt System.Collections.Generic.IList < if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = if > - = - if < = if == || == return decl_stmt System.Text.StringBuilder = new decl_stmt System.Collections.Generic.IDictionary < = decl_stmt int = while <= && < decl_stmt RewriteOperation decl_stmt bool = call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() if ! || == decl_stmt Antlr.Runtime.IToken = if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) ++ else = call RewriteOperation.Execute() call RewriteOperation.Execute() call RewriteOperation.Execute() call RewriteOperation.Execute() call RewriteOperation.Execute() if == - foreach in if >= - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) var var decl IDictionary bool InsertBeforeOp ReplaceOp bool var InsertBeforeOp ReplaceOp RewriteOperation RewriteOperation protected virtual < protected virtual < < for = < ++ decl_stmt RewriteOperation = if == continue if ! is continue decl_stmt ReplaceOp = decl_stmt var = typeof for = < ++ decl_stmt InsertBeforeOp = if >= && <= = decl_stmt var = typeof for = < ++ decl_stmt ReplaceOp = if >= && <= = continue decl_stmt bool = < || || || || || decl_stmt bool = == && == if ! && ! throw new + + + for = < ++ decl_stmt RewriteOperation = if == continue if ! is continue decl_stmt InsertBeforeOp = decl_stmt var = typeof for = < ++ decl_stmt InsertBeforeOp = if == = = decl_stmt var = typeof for = < ++ decl_stmt ReplaceOp = if == = = continue if >= && <= throw new + + + decl_stmt System.Collections.Generic.IDictionary < = new < for = < ++ decl_stmt RewriteOperation = if == continue decl_stmt RewriteOperation if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out && != throw new = return protected virtual protected virtual return protected virtual < protected virtual < < return RewriteOperation decl IList protected virtual < protected virtual < < decl_stmt System.Collections.Generic.IList < = new < for = < && < ++ decl_stmt RewriteOperation = if == continue if call RewriteOperation.GetType() call RewriteOperation.GetType() call RewriteOperation.GetType() call RewriteOperation.GetType() call RewriteOperation.GetType() == call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return public virtual public virtual return - StringBuilder public virtual public virtual decl_stmt System.Text.StringBuilder = new for = >= && <= && < ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int)