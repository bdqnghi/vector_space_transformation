Antlr3.Analysis System.Collections.Generic using System.Linq using Antlr3.Misc using Antlr3.Grammars.ANTLRParser System.ArgumentNullException Antlr3.Tool.ErrorManager Antlr3.Tool.Grammar Antlr3.Tool.GrammarAST Antlr3.Tool.GrammarType Antlr.Runtime.IToken System.Text.StringBuilder class Antlr3.Analysis.DecisionProbe decl HashSet DFA decl IDictionary bool decl HashSet decl IDictionary decl Dictionary bool decl HashSet decl Dictionary decl ICollection decl Dictionary decl ICollection decl IDictionary decl MultiMap decl HashSet return return > return return return return > return if == && == && == return if > return call decl HashSet.Except() call decl HashSet.Except() call decl HashSet.Except() call decl HashSet.Except() call decl HashSet.Except() == return return return return return return return decl IEnumerable public virtual < public virtual < decl_stmt System.Collections.Generic.IEnumerable < = if == return return call decl IEnumerable.OrderBy() call decl IEnumerable.OrderBy() call decl IEnumerable.OrderBy() call decl IEnumerable.OrderBy() call decl IEnumerable.OrderBy() public virtual < public virtual < return public virtual public virtual call decl MultiMap.Remove() call decl MultiMap.Remove() call decl MultiMap.Remove() call decl MultiMap.Remove() call decl MultiMap.Remove() decl IList decl HashSet public virtual < public virtual < decl_stmt System.Collections.Generic.HashSet < = = new < decl_stmt System.Collections.Generic.IList < = new < if == || == return return StringBuilder Grammar public virtual public virtual < decl_stmt Antlr3.Tool.Grammar = decl_stmt System.Text.StringBuilder = new foreach in call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != = - return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) decl List NFAState NFAState NFAState NFAState public virtual < public virtual < < decl_stmt Antlr3.Analysis.NFAState = decl_stmt System.Collections.Generic.List < = new < for = <= ++ decl_stmt Antlr3.Analysis.NFAState = call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() decl_stmt Antlr3.Analysis.NFAState = call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() decl_stmt Antlr3.Analysis.NFAState = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() = new < return decl IDictionary SemanticContext public virtual public virtual decl_stmt System.Collections.Generic.IDictionary < call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out if == return decl_stmt Antlr3.Analysis.SemanticContext call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out return decl IDictionary public virtual < < public virtual < < decl_stmt System.Collections.Generic.IDictionary < < call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out return bool decl ICollection decl IDictionary GrammarAST decl List GrammarAST GrammarAST decl ICollection var bool decl ICollection string GrammarAST public virtual public virtual if && ! decl_stmt System.Collections.Generic.ICollection < = decl_stmt System.Collections.Generic.ICollection < = foreach in if call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() break decl_stmt System.Collections.Generic.IDictionary < < = if != && > if == || ! call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() decl_stmt System.Collections.Generic.List < = if > decl_stmt bool = decl_stmt Antlr3.Tool.GrammarAST = if != decl_stmt string = string call Antlr3.Tool.GrammarAST.GetBlockOption(string) call Antlr3.Tool.GrammarAST.GetBlockOption(string) call Antlr3.Tool.GrammarAST.GetBlockOption(string) call Antlr3.Tool.GrammarAST.GetBlockOption(string) call Antlr3.Tool.GrammarAST.GetBlockOption(string) if != && call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() = if ! decl_stmt System.Collections.Generic.ICollection < = if > foreach in if ! decl_stmt var = if != && > decl_stmt bool = if foreach in decl_stmt Antlr3.Tool.GrammarAST = decl_stmt Antlr3.Tool.GrammarAST = call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() - decl_stmt Antlr3.Tool.GrammarAST = call GrammarAST.GetFirstChildWithType() call GrammarAST.GetFirstChildWithType() call GrammarAST.GetFirstChildWithType() call GrammarAST.GetFirstChildWithType() call GrammarAST.GetFirstChildWithType() if != = call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() if else GrammarAST decl List GrammarAST int protected virtual protected virtual < decl_stmt System.Collections.Generic.List < = new < call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() decl_stmt int = int - decl_stmt Antlr3.Tool.GrammarAST = call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() decl_stmt Antlr3.Tool.GrammarAST = if call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() == = call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() else = call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() - if != && call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() == && call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() call GrammarAST.GetChild() == var decl IDictionary decl ICollection DFAState decl List decl IDictionary var var decl ICollection protected virtual protected virtual decl_stmt System.Collections.Generic.ICollection < = decl_stmt System.Collections.Generic.IDictionary < < < = new < < < decl_stmt var = new < decl_stmt System.Collections.Generic.ICollection < = decl_stmt System.Collections.Generic.List < = new < call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() foreach in decl_stmt System.Collections.Generic.IDictionary < < call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out decl_stmt var = decl_stmt var = decl_stmt Antlr3.Analysis.DFAState call var.TryGetValue() call var.TryGetValue() call var.TryGetValue() call var.TryGetValue() call var.TryGetValue() out NFAConfiguration int decl ICollection DFAState decl IDictionary string Transition DFAState NFAState decl IList RuleClosureTransition private private < < < < < < < foreach in decl_stmt System.Collections.Generic.IList < out for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = decl_stmt Antlr3.Analysis.NFAState = call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() decl_stmt Antlr3.Analysis.Transition = decl_stmt Antlr3.Analysis.RuleClosureTransition = decl_stmt string = decl_stmt int = decl_stmt System.Collections.Generic.IDictionary < < out if == = new < < = decl_stmt System.Collections.Generic.ICollection < call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if == = new < = call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() decl_stmt Antlr3.Analysis.DFAState if ! out || == decl_stmt Antlr3.Analysis.DFAState = call Antlr3.Analysis.DFA.GetState(int) call Antlr3.Analysis.DFA.GetState(int) call Antlr3.Analysis.DFA.GetState(int) call Antlr3.Analysis.DFA.GetState(int) call Antlr3.Analysis.DFA.GetState(int) = decl HashSet DFAState private < private < < decl_stmt System.Collections.Generic.HashSet < = new < foreach in decl_stmt Antlr3.Analysis.DFAState = call Antlr3.Analysis.DFA.GetState(int) call Antlr3.Analysis.DFA.GetState(int) call Antlr3.Analysis.DFA.GetState(int) call Antlr3.Analysis.DFA.GetState(int) call Antlr3.Analysis.DFA.GetState(int) call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return public virtual public virtual call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() public virtual public virtual = ++ call decl HashSet.UnionWith() call decl HashSet.UnionWith() call decl HashSet.UnionWith() call decl HashSet.UnionWith() call decl HashSet.UnionWith() int public virtual public virtual if > decl_stmt int = call decl MultiMap.Map() call decl MultiMap.Map() call decl MultiMap.Map() call decl MultiMap.Map() call decl MultiMap.Map() public virtual public virtual < call decl HashSet.UnionWith() call decl HashSet.UnionWith() call decl HashSet.UnionWith() call decl HashSet.UnionWith() call decl HashSet.UnionWith() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() public virtual public virtual < = public virtual public virtual if call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() decl IDictionary public virtual public virtual < decl_stmt System.Collections.Generic.IDictionary < = new < = public virtual public virtual < < = DFAState DFAState Transition Reachable protected virtual protected virtual < if == = return decl_stmt Antlr3.Analysis.DFAState = = for = < ++ decl_stmt Antlr3.Analysis.Transition = call Antlr3.Analysis.DFAState.GetTransition(int) call Antlr3.Analysis.DFAState.GetTransition(int) call Antlr3.Analysis.DFAState.GetTransition(int) call Antlr3.Analysis.DFAState.GetTransition(int) call Antlr3.Analysis.DFAState.GetTransition(int) decl_stmt Antlr3.Analysis.DFAState = decl_stmt Reachable if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if == continue if == = return if == continue if = return = return decl HashSet bool protected virtual < protected virtual < decl_stmt System.Collections.Generic.HashSet < = new < = new < if == || == return decl_stmt bool = return DFAState Transition protected virtual protected virtual < < call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() for = < ++ decl_stmt Antlr3.Analysis.Transition = decl_stmt Antlr3.Analysis.DFAState = if && ! call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() if != return new bool NFAState string Transition Label protected virtual protected virtual < < decl_stmt string = if call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() call decl ICollection.Contains() return call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() for = < ++ decl_stmt Antlr3.Analysis.Transition = decl_stmt Antlr3.Analysis.NFAState = decl_stmt Antlr3.Analysis.Label = if || decl_stmt bool = if call decl ICollection.Remove() call decl ICollection.Remove() call decl ICollection.Remove() call decl ICollection.Remove() call decl ICollection.Remove() return - continue if call Transition.Label() call Transition.Label() call Transition.Label() call Transition.Label() call Transition.Label() call Transition.Label() call Transition.Label() call Transition.Label() call Transition.Label() if == - call decl ICollection.Remove() call decl ICollection.Remove() call decl ICollection.Remove() call decl ICollection.Remove() call decl ICollection.Remove() return decl_stmt bool = + if call decl ICollection.Remove() call decl ICollection.Remove() call decl ICollection.Remove() call decl ICollection.Remove() call decl ICollection.Remove() return - continue call decl ICollection.Remove() call decl ICollection.Remove() call decl ICollection.Remove() call decl ICollection.Remove() call decl ICollection.Remove() return StringBuilder protected virtual protected virtual decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) NFAState NFAState NFAState NFAState RuleClosureTransition public virtual public virtual decl_stmt Antlr3.Analysis.NFAState = decl_stmt Antlr3.Analysis.NFAState = call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() decl_stmt Antlr3.Analysis.NFAState = decl_stmt Antlr3.Analysis.RuleClosureTransition = decl_stmt Antlr3.Analysis.NFAState = return public virtual public virtual call decl MultiMap.Clear() call decl MultiMap.Clear() call decl MultiMap.Clear() call decl MultiMap.Clear() call decl MultiMap.Clear()