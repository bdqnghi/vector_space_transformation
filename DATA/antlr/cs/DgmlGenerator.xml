Antlr3.Tool System using System.Collections.Generic using System.Linq using System.Xml.Linq using Antlr3.Analysis using System.Text.StringBuilder class Antlr3.Tool.DgmlGenerator super super IGraphGenerator decl List decl HashSet Grammar decl Dictionary decl HashSet decl Dictionary string string decl List return NFAState DFAState XDocument public public call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() call decl HashSet.Clear() decl_stmt Antlr3.Analysis.DFAState = as if if != = call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new new new call DFAState.StateNumber() call DFAState.StateNumber() call DFAState.StateNumber() call DFAState.StateNumber() call DFAState.StateNumber() call DFAState.StateNumber() call DFAState.StateNumber() call DFAState.StateNumber() call DFAState.StateNumber() new else decl_stmt Antlr3.Analysis.NFAState = = + call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new new new new if != else decl_stmt System.Xml.Linq.XDocument = new new new new new return call XDocument.ToString() call XDocument.ToString() call XDocument.ToString() call XDocument.ToString() call XDocument.ToString() string XElement DFAState Transition XElement string private private if ! call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return decl_stmt string if = else = decl_stmt System.Xml.Linq.XElement = new new + new new call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() + for = < ++ decl_stmt Antlr3.Analysis.Transition = if decl_stmt Antlr3.Analysis.DFAState = as if != && != continue decl_stmt string = decl_stmt System.Xml.Linq.XElement = new new + new + new new call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() new < private private return new new new new string XElement RuleClosureTransition NFAState Transition string string string XElement string private private if ! call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return decl_stmt Antlr3.Analysis.NFAState = as decl_stmt string if = else if != && = else = decl_stmt System.Xml.Linq.XElement = new new + new new if != && decl_stmt string = if += int decl_stmt string = call XElement.Add() call XElement.Add() call XElement.Add() call XElement.Add() call XElement.Add() new call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() + if return for = < ++ decl_stmt Antlr3.Analysis.Transition = decl_stmt Antlr3.Analysis.RuleClosureTransition = as if != decl_stmt string if != = else = decl_stmt System.Xml.Linq.XElement = new new + new + new new call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() new < else decl_stmt string if = else if = else if || = else = decl_stmt System.Xml.Linq.XElement = new new + new + new new call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() new < State decl List decl Dictionary decl Dictionary State State decl Stack XElement private private decl_stmt System.Collections.Generic.Dictionary < = call decl Dictionary.Where() call decl Dictionary.Where() call decl Dictionary.Where() call decl Dictionary.Where() call decl Dictionary.Where() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() foreach in new new decl_stmt System.Collections.Generic.Dictionary < < = new < < foreach in decl_stmt Antlr3.Analysis.State = decl_stmt Antlr3.Analysis.State = if ! call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() && call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() decl_stmt System.Collections.Generic.List < = new < decl_stmt System.Collections.Generic.Stack < = new < call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() while > decl_stmt Antlr3.Analysis.State = call decl Stack.Pop() call decl Stack.Pop() call decl Stack.Pop() call decl Stack.Pop() call decl Stack.Pop() if ! call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() if call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl Dictionary.ContainsKey() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() else for = < ++ call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call decl Stack.Push() call State.GetTransition() call State.GetTransition() call State.GetTransition() call State.GetTransition() call State.GetTransition() foreach in decl_stmt System.Xml.Linq.XElement = new call System.Xml.Linq.XElement.Attribute(XName) call System.Xml.Linq.XElement.Attribute(XName) call System.Xml.Linq.XElement.Attribute(XName) call System.Xml.Linq.XElement.Attribute(XName) call System.Xml.Linq.XElement.Attribute(XName) call XElement.Add() call XElement.Add() call XElement.Add() call XElement.Add() call XElement.Add() new + call XElement.Add() call XElement.Add() call XElement.Add() call XElement.Add() call XElement.Add() new new call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() NFAState private private < decl_stmt Antlr3.Analysis.NFAState = as if == return if == return if return if > return if != return if > return return private private return call decl Dictionary.Count() call decl Dictionary.Count() call decl Dictionary.Count() call decl Dictionary.Count() call decl Dictionary.Count() == Transition private static private static for = < ++ decl_stmt Antlr3.Analysis.Transition = if ! return return > string SemanticContext State string private private decl_stmt string = = call string.Split() call string.Split() call string.Split() call string.Split() call string.Split() default if call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() = decl_stmt Antlr3.Analysis.State = if ! && is decl_stmt Antlr3.Analysis.SemanticContext = if != decl_stmt string = = + call Antlr3.Analysis.SemanticContext.GenExpr(CodeGenerator,TemplateGroup,DFA) call Antlr3.Analysis.SemanticContext.GenExpr(CodeGenerator,TemplateGroup,DFA) call Antlr3.Analysis.SemanticContext.GenExpr(CodeGenerator,TemplateGroup,DFA) call Antlr3.Analysis.SemanticContext.GenExpr(CodeGenerator,TemplateGroup,DFA) call Antlr3.Analysis.SemanticContext.GenExpr(CodeGenerator,TemplateGroup,DFA) + += if > = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() + return DFAState string decl List NFAState decl List StringBuilder NFAConfiguration int int var decl ICollection private private if == return decl_stmt string = decl_stmt Antlr3.Analysis.DFAState = as decl_stmt Antlr3.Analysis.NFAState = as if != decl_stmt System.Text.StringBuilder = new call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if if call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) decl_stmt var = if != call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) decl_stmt System.Collections.Generic.List < = call var.OrderBy() call var.OrderBy() call var.OrderBy() call var.OrderBy() call var.OrderBy() decl_stmt System.Collections.Generic.ICollection < = for = < ++ decl_stmt int = if > call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendLine(string) call System.Text.StringBuilder.AppendFormat(String,Object,Object,Object) call System.Text.StringBuilder.AppendFormat(String,Object,Object,Object) call System.Text.StringBuilder.AppendFormat(String,Object,Object,Object) call System.Text.StringBuilder.AppendFormat(String,Object,Object,Object) call System.Text.StringBuilder.AppendFormat(String,Object,Object,Object) decl_stmt System.Collections.Generic.List < = new < foreach in if != continue call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = ++ call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call Antlr3.Analysis.NFAConfiguration.ToString(bool) call Antlr3.Analysis.NFAConfiguration.ToString(bool) call Antlr3.Analysis.NFAConfiguration.ToString(bool) call Antlr3.Analysis.NFAConfiguration.ToString(bool) call Antlr3.Analysis.NFAConfiguration.ToString(bool) if + < call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if == && - > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call Antlr3.Analysis.DFAState.GetUniquelyPredictedAlt() call Antlr3.Analysis.DFAState.GetUniquelyPredictedAlt() call Antlr3.Analysis.DFAState.GetUniquelyPredictedAlt() call Antlr3.Analysis.DFAState.GetUniquelyPredictedAlt() call Antlr3.Analysis.DFAState.GetUniquelyPredictedAlt() = call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) else if != if += + if != += + return private private return new call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() private private return new call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() private static private static return new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new private static private static return new new new new new new new new new new new new new new new new new new new new new new new new new new private static private static return new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new