Antlr3.Analysis System.Collections.Generic using System.Linq using Antlr3.Misc using Antlr3.Misc.BitSet System.Console Antlr3.Tool.ErrorManager Antlr.Runtime.IToken class Antlr3.Analysis.NFAToDFAConverter DFA decl Queue bool bool bool decl NFAContext int DFAState public virtual public virtual = while > && ! call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() decl_stmt Antlr3.Analysis.DFAState = call decl Queue.Peek() call decl Queue.Peek() call decl Queue.Peek() call decl Queue.Peek() call decl Queue.Peek() if + + + + decl_stmt int = if > && == if else = else call decl Queue.Dequeue() call decl Queue.Dequeue() call decl Queue.Dequeue() call decl Queue.Dequeue() call decl Queue.Dequeue() call Antlr3.Analysis.DFA.FindAllGatedSynPredsUsedInDFAAcceptStates() call Antlr3.Analysis.DFA.FindAllGatedSynPredsUsedInDFAAcceptStates() call Antlr3.Analysis.DFA.FindAllGatedSynPredsUsedInDFAAcceptStates() call Antlr3.Analysis.DFA.FindAllGatedSynPredsUsedInDFAAcceptStates() call Antlr3.Analysis.DFA.FindAllGatedSynPredsUsedInDFAAcceptStates() NFAContext int int int DFAState NFAState protected virtual protected virtual decl_stmt Antlr3.Analysis.NFAState = decl_stmt Antlr3.Analysis.DFAState = call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFA.NewState() = decl_stmt int = decl_stmt int = while != decl_stmt Antlr3.Analysis.NFAContext = if == && == decl_stmt int = call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() = = else ++ ++ if == break = call Antlr3.Analysis.DFA.AddState(DFAState) call Antlr3.Analysis.DFA.AddState(DFAState) call Antlr3.Analysis.DFA.AddState(DFAState) call Antlr3.Analysis.DFA.AddState(DFAState) call Antlr3.Analysis.DFA.AddState(DFAState) call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() = return string DFAState Label bool var Label var int int DFAState int bool protected virtual protected virtual decl_stmt var = decl_stmt Antlr3.Analysis.Label = new decl_stmt bool = != && call var.Contains() call var.Contains() call var.Contains() call var.Contains() call var.Contains() if ! && return if if == && decl_stmt string = string decl_stmt bool = != && call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() if && decl_stmt Antlr3.Analysis.DFAState = if call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() > return endif decl_stmt int = decl_stmt var = new < decl_stmt int = if != = for = < ++ decl_stmt Antlr3.Analysis.Label = call var.ElementAt() call var.ElementAt() call var.ElementAt() call var.ElementAt() call var.ElementAt() decl_stmt Antlr3.Analysis.DFAState = if + + + + + call Antlr3.Analysis.Label.ToString() call Antlr3.Analysis.Label.ToString() call Antlr3.Analysis.Label.ToString() call Antlr3.Analysis.Label.ToString() call Antlr3.Analysis.Label.ToString() + + if == continue if call Antlr3.Analysis.DFAState.GetUniqueAlt() call Antlr3.Analysis.DFAState.GetUniqueAlt() call Antlr3.Analysis.DFAState.GetUniqueAlt() call Antlr3.Analysis.DFAState.GetUniqueAlt() call Antlr3.Analysis.DFAState.GetUniqueAlt() == decl_stmt Antlr3.Analysis.DFAState = += = + if ! && == call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() decl_stmt int = = call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) if Transition Transition int int int protected static protected static < decl_stmt int = if decl_stmt int = decl_stmt Antlr3.Analysis.Transition out if != if == = new else if != call Transition.Label() call Transition.Label() call Transition.Label() call Transition.Label() call Transition.Label() call Transition.Label() call Transition.Label() call Transition.Label() call Transition.Label() else = = decl_stmt int = decl_stmt Antlr3.Analysis.Transition = = else = return decl List NFAConfiguration int public virtual public virtual if + + decl_stmt System.Collections.Generic.List < = new < call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() call decl List.AddRange() decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = if continue call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() = NFAState RuleClosureTransition SemanticContext Transition NFAState NFAState bool NFAState int NFAConfiguration SemanticContext int Transition NFAContext RuleClosureTransition public virtual public virtual if + + + + + + + + + decl_stmt Antlr3.Analysis.NFAConfiguration = new if if + + + + + + return decl_stmt Antlr3.Analysis.Transition = if is decl_stmt int = if == && == if > = throw new if >= = if + + return decl_stmt Antlr3.Analysis.RuleClosureTransition = decl_stmt Antlr3.Analysis.NFAContext = new decl_stmt Antlr3.Analysis.NFAState = else if && != decl_stmt Antlr3.Analysis.NFAState = decl_stmt Antlr3.Analysis.RuleClosureTransition = decl_stmt Antlr3.Analysis.NFAState = decl_stmt Antlr3.Analysis.NFAContext = else if != && decl_stmt bool = if && = else if != && if if = else = decl_stmt Antlr3.Analysis.SemanticContext = if decl_stmt Antlr3.Analysis.SemanticContext = decl_stmt int = call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() call DFA.NFADecisionStartState() decl_stmt Antlr3.Analysis.NFAState = call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() if ! || == = decl_stmt Antlr3.Analysis.Transition = if != && public static public static return NFAConfiguration Label int NFAConfiguration NFAState Transition DFAState decl IList public virtual public virtual decl_stmt Antlr3.Analysis.DFAState = call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFA.NewState() decl_stmt System.Collections.Generic.IList < = decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = if || continue decl_stmt Antlr3.Analysis.NFAState = call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() decl_stmt Antlr3.Analysis.Transition = if == || ! continue decl_stmt Antlr3.Analysis.Label = if != && == continue if decl_stmt Antlr3.Analysis.NFAConfiguration = call Antlr3.Analysis.DFAState.AddNFAConfiguration(NFAState,int,NFAContext,SemanticContext) call Antlr3.Analysis.DFAState.AddNFAConfiguration(NFAState,int,NFAContext,SemanticContext) call Antlr3.Analysis.DFAState.AddNFAConfiguration(NFAState,int,NFAContext,SemanticContext) call Antlr3.Analysis.DFAState.AddNFAConfiguration(NFAState,int,NFAContext,SemanticContext) call Antlr3.Analysis.DFAState.AddNFAConfiguration(NFAState,int,NFAContext,SemanticContext) if == call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) = return NFAConfiguration Label int NFAState Transition Label protected virtual protected virtual decl_stmt Antlr3.Analysis.Label = new decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = if || continue decl_stmt Antlr3.Analysis.NFAState = call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() decl_stmt Antlr3.Analysis.Transition = decl_stmt Antlr3.Analysis.Label = if call Antlr3.Analysis.Label.Equals(object) call Antlr3.Analysis.Label.Equals(object) call Antlr3.Analysis.Label.Equals(object) call Antlr3.Analysis.Label.Equals(object) call Antlr3.Analysis.Label.Equals(object) = return int DFAState protected virtual protected virtual decl_stmt Antlr3.Analysis.DFAState = call Antlr3.Analysis.DFA.AddState(DFAState) call Antlr3.Analysis.DFA.AddState(DFAState) call Antlr3.Analysis.DFA.AddState(DFAState) call Antlr3.Analysis.DFA.AddState(DFAState) call Antlr3.Analysis.DFA.AddState(DFAState) if != call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) return decl_stmt int = if != = else call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() call decl Queue.Enqueue() return DFAState SemanticContext SemanticContext protected virtual protected virtual if && == && ! && ! decl_stmt Antlr3.Analysis.DFAState = call Antlr3.Analysis.DFA.GetAcceptState(int) call Antlr3.Analysis.DFA.GetAcceptState(int) call Antlr3.Analysis.DFA.GetAcceptState(int) call Antlr3.Analysis.DFA.GetAcceptState(int) call Antlr3.Analysis.DFA.GetAcceptState(int) if != decl_stmt Antlr3.Analysis.SemanticContext = decl_stmt Antlr3.Analysis.SemanticContext = call Antlr3.Analysis.DFAState.GetGatedPredicatesInNFAConfigurations() call Antlr3.Analysis.DFAState.GetGatedPredicatesInNFAConfigurations() call Antlr3.Analysis.DFAState.GetGatedPredicatesInNFAConfigurations() call Antlr3.Analysis.DFAState.GetGatedPredicatesInNFAConfigurations() call Antlr3.Analysis.DFAState.GetGatedPredicatesInNFAConfigurations() if == && == || != && != && call Antlr3.Analysis.SemanticContext.Equals(SemanticContext) call Antlr3.Analysis.SemanticContext.Equals(SemanticContext) call Antlr3.Analysis.SemanticContext.Equals(SemanticContext) call Antlr3.Analysis.SemanticContext.Equals(SemanticContext) call Antlr3.Analysis.SemanticContext.Equals(SemanticContext) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.RemoveState(DFAState) call Antlr3.Analysis.DFA.RemoveState(DFAState) call Antlr3.Analysis.DFA.RemoveState(DFAState) call Antlr3.Analysis.DFA.RemoveState(DFAState) call Antlr3.Analysis.DFA.RemoveState(DFAState) = return = call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) return bool decl HashSet decl HashSet NFAConfiguration bool NFAState public virtual public virtual if + decl_stmt bool = decl_stmt System.Collections.Generic.HashSet < = if && != + decl_stmt Antlr3.Analysis.NFAConfiguration = decl_stmt Antlr3.Analysis.NFAState = call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() if decl_stmt System.Collections.Generic.HashSet < = new < if != && > = if call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() = if ! && == return if ! && ! call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() decl_stmt bool = if if + + = call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() return int int protected virtual protected virtual < decl_stmt int = if = else decl_stmt int = if = else = return int protected virtual protected virtual < decl_stmt int = if != = else = return int protected virtual protected virtual < decl_stmt int = return NFAConfiguration int protected static protected static < decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = if != if == || = int int protected static protected static < decl_stmt int = foreach in decl_stmt int = if < = return NFAConfiguration int SemanticContext SemanticContext int BitSet SemanticContext BitSet decl IDictionary protected virtual protected virtual < decl_stmt System.Collections.Generic.IDictionary < = if == return call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() if - > return if == - decl_stmt Antlr3.Misc.BitSet = decl_stmt Antlr3.Misc.BitSet = decl_stmt int = call Antlr3.Misc.BitSet.Subtract(IIntSet) call Antlr3.Misc.BitSet.Subtract(IIntSet) call Antlr3.Misc.BitSet.Subtract(IIntSet) call Antlr3.Misc.BitSet.Subtract(IIntSet) call Antlr3.Misc.BitSet.Subtract(IIntSet) decl_stmt Antlr3.Analysis.SemanticContext = if == = new else decl_stmt Antlr3.Analysis.SemanticContext = if = new else = = decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = if == = if == if decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = decl_stmt Antlr3.Analysis.SemanticContext call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if != = = call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() call decl IDictionary.Remove() if call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() else if = return return decl OrderedHashSet int int decl HashSet decl IList decl IDictionary decl ICollection decl IDictionary NFAState SemanticContext decl OrderedHashSet NFAConfiguration decl IDictionary protected virtual < protected virtual < < decl_stmt System.Collections.Generic.IDictionary < = new < decl_stmt System.Collections.Generic.IDictionary < < = new < < foreach in = new < decl_stmt System.Collections.Generic.IDictionary < < = new < < decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = decl_stmt int = if if != decl_stmt Antlr3.Misc.OrderedHashSet < call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() call decl OrderedHashSet.Add() else call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() decl_stmt System.Collections.Generic.IList < = new < foreach in decl_stmt Antlr3.Misc.OrderedHashSet < call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() call decl HashSet.Contains() if > call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() continue decl_stmt Antlr3.Analysis.SemanticContext = foreach in = = if > for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = decl_stmt int = if call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() && == decl_stmt Antlr3.Analysis.NFAState = call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() if != && != if == || == else decl_stmt System.Collections.Generic.ICollection < call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if == = new < = call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call decl ICollection.Add() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() call DFA.Probe() return SemanticContext protected static protected static < decl_stmt Antlr3.Analysis.SemanticContext = foreach in if == = else = return public virtual public virtual if < return - else if > return return decl IList NFAConfiguration int DFAState DFAState decl List protected virtual protected virtual decl_stmt System.Collections.Generic.List < = new < decl_stmt int = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() call decl List.Sort() new decl_stmt System.Collections.Generic.IList < = for = < ++ decl_stmt Antlr3.Analysis.NFAConfiguration = decl_stmt Antlr3.Analysis.DFAState = if == = call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFA.NewState() call Antlr3.Analysis.DFAState.AddNFAConfiguration(NFAState,int,NFAContext,SemanticContext) call Antlr3.Analysis.DFAState.AddNFAConfiguration(NFAState,int,NFAContext,SemanticContext) call Antlr3.Analysis.DFAState.AddNFAConfiguration(NFAState,int,NFAContext,SemanticContext) call Antlr3.Analysis.DFAState.AddNFAConfiguration(NFAState,int,NFAContext,SemanticContext) call Antlr3.Analysis.DFAState.AddNFAConfiguration(NFAState,int,NFAContext,SemanticContext) call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() call DFA.Nfa() = call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) call Antlr3.Analysis.DFA.SetAcceptState(int,DFAState) decl_stmt Antlr3.Analysis.DFAState = call Antlr3.Analysis.DFA.AddState(DFAState) call Antlr3.Analysis.DFA.AddState(DFAState) call Antlr3.Analysis.DFA.AddState(DFAState) call Antlr3.Analysis.DFA.AddState(DFAState) call Antlr3.Analysis.DFA.AddState(DFAState) if != call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) call Antlr3.Analysis.DFA.SetState(int,DFAState) = new int protected virtual protected virtual = new for = < ++ decl_stmt int = + = new public static public static < if == return if == return return