Antlr3.Analysis System.Collections.Generic using System.Linq using Antlr3.Extensions using Antlr3.Grammars.ANTLRParser System.ArgumentNullException System.CLSCompliantAttribute Antlr3.Codegen.CodeGenerator Antlr3.Tool.Grammar Antlr3.Tool.GrammarAST System.StringComparer Antlr4.StringTemplate.Template Antlr4.StringTemplate.TemplateGroup class Antlr3.Analysis.SemanticContext super SemanticContext SemanticContext public sealed override public sealed override decl_stmt Antlr3.Analysis.SemanticContext = as if == return return public virtual public virtual return if return return return != && == || == return != && == || == Predicate public override public override decl_stmt System.Data.Query.PlanCompiler.Predicate = as if == return if != return == else if != return return public override public override if != return if == return return StringTemplate string string public override public override decl_stmt Antlr3.ST.StringTemplate = if != if = else = decl_stmt string = if != call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) else = new call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) return if != decl_stmt string = call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) return public override public override if public override public override if == return return return public override public override if != return return new public override public override return return public override public override if != return return new public override public override return SemanticContext SemanticContext decl_stmt Antlr3.Analysis.SemanticContext = foreach in decl_stmt Antlr3.Analysis.SemanticContext = if != = return return return return public override public override foreach in NOT decl ICollection CommutativePredicate public override public override if return decl_stmt CommutativePredicate = as if != && == decl_stmt System.Collections.Generic.ICollection < = return decl_stmt NOT = as if != = as if != && call CommutativePredicate.GetType() call CommutativePredicate.GetType() call CommutativePredicate.GetType() call CommutativePredicate.GetType() call CommutativePredicate.GetType() != return call CommutativePredicate.Operands() call CommutativePredicate.Operands() call CommutativePredicate.Operands() call CommutativePredicate.Operands() call CommutativePredicate.Operands() call CommutativePredicate.Operands() call CommutativePredicate.Operands() call CommutativePredicate.Operands() call CommutativePredicate.Operands() return public override public override return public override public override return return StringTemplate public override public override decl_stmt Antlr3.ST.StringTemplate = defaultStringTemplate template,operand=>

iftemplate== return protected override protected override return protected override protected override return ^ return StringTemplate public override public override decl_stmt Antlr3.ST.StringTemplate = if != = else = new foreach in call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) return protected override protected override return protected override protected override return ^ ~ SemanticContext decl_stmt Antlr3.Analysis.SemanticContext = if == return return new return return StringTemplate public override public override decl_stmt Antlr3.ST.StringTemplate = if != = else = new call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) call Antlr3.ST.StringTemplate.SetAttribute(string,object) return public override public override NOT public override public override decl_stmt NOT = as if == return return public override public override return public override public override return + + SemanticContext AND bool public static public static if is || is return decl_stmt Antlr3.Analysis.SemanticContext = ref ref decl_stmt bool = != && != && ! is if return if is || is return if == || == return if == || == return if is return if is return decl_stmt AND = new if == return call AND.Operands() call AND.Operands() call AND.Operands() call AND.Operands() call AND.Operands() call AND.Operands() call AND.Operands() call AND.Operands() call AND.Operands() return NOT SemanticContext OR bool public static public static if is || is return decl_stmt Antlr3.Analysis.SemanticContext = ref ref decl_stmt bool = != && != && ! is if return if == || == || is return : if == || == || is return : if is || is || is return else if is return else if is return decl_stmt NOT = as if != if call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() return else = as if != && call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() return decl_stmt OR = new if == return call OR.Operands() call OR.Operands() call OR.Operands() call OR.Operands() call OR.Operands() call OR.Operands() call OR.Operands() call OR.Operands() call OR.Operands() return NOT public static public static decl_stmt NOT = as if != return if is return else if is return return new decl HashSet decl HashSet decl HashSet public static public static ref ref ref ref if == || == || is return if == || == || is return if is || is = = return decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt System.Collections.Generic.HashSet < = new < call decl HashSet.IntersectWith() call decl HashSet.IntersectWith() call decl HashSet.IntersectWith() call decl HashSet.IntersectWith() call decl HashSet.IntersectWith() if == return call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() if == = else if == = call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() else = new call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() if == = else if == = call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() else = new if == return call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() return new decl HashSet decl HashSet decl HashSet public static public static ref ref ref ref decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt System.Collections.Generic.HashSet < = new < decl_stmt System.Collections.Generic.HashSet < = new < call decl HashSet.IntersectWith() call decl HashSet.IntersectWith() call decl HashSet.IntersectWith() call decl HashSet.IntersectWith() call decl HashSet.IntersectWith() if == return call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() if == = else if == = call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() else = new call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() call decl HashSet.ExceptWith() if == = else if == = call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() else = new if == return call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() call decl HashSet.First() return new AND NOT public static < public static < decl_stmt AND = as if != return decl_stmt NOT = as if != return return new NOT OR public static < public static < decl_stmt OR = as if != return decl_stmt NOT = as if != return return new