Antlr4.StringTemplate System.Collections.Generic using System.Collections.ObjectModel using System.Linq using System.Runtime.CompilerServices using System.Text using Antlr.Runtime using Antlr4.StringTemplate.Compiler using Antlr4.StringTemplate.Extensions using Antlr4.StringTemplate.Misc using System.ArgumentException System.ArgumentNullException System.IO.BinaryReader System.IO.BinaryWriter System.Console System.DateTime System.DateTimeKind System.IO.Directory System.Environment System.Exception System.IO.File System.Collections.IDictionary System.IO.IOException System.IO.MemoryStream System.NotImplementedException System.NotSupportedException System.IO.Path System.IO.SeekOrigin System.IO.Stream System.Text.StringBuilder System.StringComparer Antlr4.StringTemplate.Compiler.TemplateLexer.TemplateToken System.Type System.TypeCode System.Uri System.UriFormatException class Antlr4.StringTemplate.TemplateGroup Encoding bool ErrorManager decl List decl TypeRegistry bool string decl List string TemplateGroup ErrorManager char string decl Dictionary CompiledTemplate decl TypeRegistry bool bool decl Dictionary decl TypeRegistry char string return return if == throw new = return return return return if == throw new = return if == throw new = return = return = return = return = return call decl List.AsReadOnly() call decl List.AsReadOnly() call decl List.AsReadOnly() call decl List.AsReadOnly() call decl List.AsReadOnly() CompiledTemplate public virtual public virtual if == return if ! = + if decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = if != return return string Template protected internal virtual protected internal virtual decl_stmt string = if ! = + if decl_stmt Antlr4.StringTemplate.Template = if == return new if = return string CompiledTemplate public virtual public virtual decl_stmt string template if == template= , else template= , decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = FileName template templateToken decl_stmt Antlr4.StringTemplate.Template = = = = call CompiledTemplate.impl() call CompiledTemplate.impl() call CompiledTemplate.impl() call CompiledTemplate.impl() call CompiledTemplate.impl() call CompiledTemplate.impl() call CompiledTemplate.impl() call CompiledTemplate.impl() call CompiledTemplate.impl() return public virtual public virtual return != CompiledTemplate public virtual public virtual if != = + if decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out if == if return if == = if == = if == if = if && != return public virtual public virtual call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() call decl Dictionary.Clear() foreach in foreach in call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Remove() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() call decl List.Clear() protected virtual protected virtual return public virtual public virtual CompiledTemplate protected internal virtual protected internal virtual if == return foreach in if decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = if != if return if return public virtual public virtual decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate template name outtemplate return template decl IDictionary public virtual < public virtual < decl_stmt System.Collections.Generic.IDictionary < call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out return public virtual public virtual return != CompiledTemplate public virtual public virtual template if != = + try decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = name newCommonTokenGroupParserID,name template return catch return decl List public virtual public virtual template if != = + decl_stmt System.Collections.Generic.List < = new < foreach in call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() new return name newCommonTokenGroupParserID,name a template CompiledTemplate public virtual public virtual < template if if == throw new if == throw new if >= throw new if != throw new template= template= decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = FileName fullyQualifiedTemplateName args template templateToken = call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineArgumentDefaultValueTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineArgumentDefaultValueTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineArgumentDefaultValueTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineArgumentDefaultValueTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineArgumentDefaultValueTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineImplicitlyDefinedTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineImplicitlyDefinedTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineImplicitlyDefinedTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineImplicitlyDefinedTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineImplicitlyDefinedTemplates(TemplateGroup) return string CompiledTemplate string public virtual public virtual decl_stmt string = decl_stmt string = decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = + if == return + return CompiledTemplate string string public virtual public virtual template decl_stmt string = template= template= decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = FileName enclosingTemplateName template templateToken decl_stmt string = if == return new = = = = call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineArgumentDefaultValueTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineArgumentDefaultValueTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineArgumentDefaultValueTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineArgumentDefaultValueTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineArgumentDefaultValueTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineImplicitlyDefinedTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineImplicitlyDefinedTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineImplicitlyDefinedTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineImplicitlyDefinedTemplates(TemplateGroup) call Antlr4.StringTemplate.Compiler.CompiledTemplate.DefineImplicitlyDefinedTemplates(TemplateGroup) return public virtual public virtual template < if != throw new try if != regionSurroundingTemplateName nameToken template templateToken else fullyQualifiedTemplateName nameToken args template templateToken catch CompiledTemplate public virtual public virtual decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() call decl Dictionary.TryGetValue() out if != if ! return if != && == if == else return else if == && == || == && == if == return else if == return = = = public virtual public virtual call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() call decl Dictionary.Remove() TemplateCompiler public virtual public virtual < template decl_stmt Antlr4.StringTemplate.Compiler.TemplateCompiler = new return srcName name args template templateToken public static public static if != = + return + + + string string public static public static decl_stmt string = - decl_stmt string = + - - return + + public virtual public virtual < = string string public virtual public virtual if == throw new if == throw new decl_stmt string = if != return decl_stmt string = if != return public virtual public virtual = = public virtual public virtual private private if group == return call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() CompiledTemplate Uri Uri TemplateGroup bool Stream string bool ANTLRInputStream bool Uri public virtual public virtual decl_stmt string = if if == || call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() return = decl_stmt bool = call string.EndsWith() call string.EndsWith() call string.EndsWith() call string.EndsWith() call string.EndsWith() decl_stmt bool = call string.EndsWith() call string.EndsWith() call string.EndsWith() call string.EndsWith() call string.EndsWith() decl_stmt bool = ! || decl_stmt Antlr4.StringTemplate.TemplateGroup = decl_stmt System.Uri = decl_stmt System.Uri = try = new + + catch return if = new = decl_stmt System.Uri = if = if != try decl_stmt System.IO.Stream = decl_stmt Antlr.Runtime.ANTLRInputStream = new = decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = call Antlr4.StringTemplate.TemplateGroup.LoadTemplateFile(string,string,ICharStream) call Antlr4.StringTemplate.TemplateGroup.LoadTemplateFile(string,string,ICharStream) call Antlr4.StringTemplate.TemplateGroup.LoadTemplateFile(string,string,ICharStream) call Antlr4.StringTemplate.TemplateGroup.LoadTemplateFile(string,string,ICharStream) call Antlr4.StringTemplate.TemplateGroup.LoadTemplateFile(string,string,ICharStream) if == = catch = else = else if if = new = else = new = else if if = new = else = new = if == else GroupParser Uri string GroupLexer var CommonTokenStream ANTLRReaderStream public virtual public virtual if decl_stmt Antlr4.StringTemplate.Compiler.GroupParser = try decl_stmt System.Uri = new decl_stmt Antlr.Runtime.ANTLRReaderStream = new new decl_stmt var = decl_stmt string = if && else decl_stmt Antlr4.StringTemplate.Compiler.GroupLexer = new = decl_stmt Antlr.Runtime.CommonTokenStream = new = new call GroupParser.group() call GroupParser.group() call GroupParser.group() call GroupParser.group() call GroupParser.group() if catch if throw string decl byte private private decl_stmt string = + uint + = if ! return try decl_stmt byte = return new catch return decl Dictionary long object int int decl IDictionary decl Dictionary int var int DateTime int char decl Dictionary object string var char decl List string private private decl_stmt var = decl_stmt var = new new decl_stmt DateTime = new call var.ReadInt64() call var.ReadInt64() call var.ReadInt64() call var.ReadInt64() call var.ReadInt64() if != return decl_stmt System.Collections.Generic.Dictionary < = new < call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() decl_stmt long = decl_stmt int = call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() for = < ++ decl_stmt int = call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() decl_stmt object = call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call decl Dictionary.Add() call var.BaseStream() call var.BaseStream() call var.BaseStream() call var.BaseStream() call var.BaseStream() call var.BaseStream() call var.BaseStream() call var.BaseStream() call var.BaseStream() + for = < ++ decl_stmt int = call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() decl_stmt System.Collections.Generic.List < = new < decl_stmt System.Collections.Generic.Dictionary < = new < decl_stmt System.Collections.Generic.Dictionary < < = new < < decl_stmt int = call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() for = < ++ call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() decl_stmt char = call var.ReadChar() call var.ReadChar() call var.ReadChar() call var.ReadChar() call var.ReadChar() decl_stmt char = call var.ReadChar() call var.ReadChar() call var.ReadChar() call var.ReadChar() call var.ReadChar() decl_stmt int = call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() for = < ++ decl_stmt string = call var.ReadString() call var.ReadString() call var.ReadString() call var.ReadString() call var.ReadString() decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() = decl_stmt int = call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() for = < ++ decl_stmt string = call var.ReadString() call var.ReadString() call var.ReadString() call var.ReadString() call var.ReadString() decl_stmt System.Collections.Generic.IDictionary < = new < = decl_stmt int = call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() for = < ++ decl_stmt string = call var.ReadString() call var.ReadString() call var.ReadString() call var.ReadString() call var.ReadString() decl_stmt object = call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() call var.ReadInt32() = = = foreach in = foreach in = return int string int string int int int bool int int int int TemplateGroup int int int int int var int int int IToken int int CompiledTemplate int int string int int int CommonToken FormalArgument private private < decl_stmt var = < < decl_stmt int = if == return decl_stmt string = string if == typeof bool return else if == typeof || == typeof decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = decl_stmt Antlr.Runtime.CommonToken = new = = = = = = return else if == typeof decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = new = = = decl_stmt int = = decl_stmt int = = = = decl_stmt int = if > for = < ++ decl_stmt int = decl_stmt int = if >= = new for = < ++ = decl_stmt int = if >= = = decl_stmt int = if >= = new for = < ++ decl_stmt int = decl_stmt int = if >= = new return else if == typeof decl_stmt string = decl_stmt int = decl_stmt Antlr.Runtime.IToken = decl_stmt int = decl_stmt int = decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = new = return else if == typeof decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = decl_stmt int = decl_stmt Antlr4.StringTemplate.TemplateGroup = template= new new return template else if == typeof decl_stmt bool = if ! return else throw new else if == typeof decl_stmt bool = if return else throw new else throw new int string decl Template string string int int int bool int int bool string int decl RegionType int decl List int int var int int int IToken int int bool int CompiledTemplate int int FormalArgument int int bool int int int int private private < decl_stmt var = < < decl_stmt int = if == return decl_stmt string = string if == typeof bool return else if == typeof || == typeof decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt int = decl_stmt string = decl_stmt int = decl_stmt int = return else if == typeof decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = decl_stmt string = decl_stmt string = template= decl_stmt int = decl_stmt bool = decl_stmt int = decl_stmt bool = decl_stmt RegionType = decl_stmt bool = = = decl_stmt int = if >= decl_stmt System.Collections.Generic.List < = new < for = < ++ decl_stmt int = call int.Add() call int.Add() call int.Add() call int.Add() call int.Add() = decl_stmt int = for = < ++ decl_stmt int = if >= decl_stmt int = decl_stmt int = for = < ++ decl_stmt int = decl_stmt int = return else if == typeof decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = decl_stmt string = decl_stmt int = decl_stmt Antlr.Runtime.IToken = decl_stmt int = decl_stmt int = = = else if == typeof template= decl_stmt int = template decl_stmt int = if >= template for = < ++ decl_stmt int = template decl_stmt int = template return else if == typeof decl_stmt bool = return else if == typeof decl_stmt bool = else throw new string MemoryStream var var var var decl List var private private decl_stmt var = decl_stmt var = new < decl_stmt var = < < decl_stmt var = new < < < call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() < call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() < call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() call var.UnionWith() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() call decl Dictionary.Values() < = call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() call var.ToArray() decl_stmt System.IO.MemoryStream = new decl_stmt var = new call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() decl_stmt System.Collections.Generic.List < = call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() foreach in call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() foreach in call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.GetHashCode() call var.GetHashCode() call var.GetHashCode() call var.GetHashCode() call var.GetHashCode() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() foreach template in templateKey comparerGetHashCodetemplateValue call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() foreach in call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() foreach in call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.Write() call var.GetHashCode() call var.GetHashCode() call var.GetHashCode() call var.GetHashCode() call var.GetHashCode() decl_stmt string = + uint + = call System.IO.MemoryStream.ToArray() call System.IO.MemoryStream.ToArray() call System.IO.MemoryStream.ToArray() call System.IO.MemoryStream.ToArray() call System.IO.MemoryStream.ToArray() decl HashSet decl List private < private < < decl_stmt System.Collections.Generic.List < = new < decl_stmt System.Collections.Generic.HashSet < = new < < < foreach in return FormalArgument private private < < if == || ! return if ! is && ! is string decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = as if != private private if == else < < < < GroupParser decl HashSet string ITypeProxyFactory var int Type ANTLRFileStream FormalArgument IModelAdaptor CommonTokenStream CompiledTemplate StringBuilder CompiledTemplate string var GroupLexer Template IToken string CompiledTemplate IAttributeRenderer private private decl_stmt var = < < call var.GetHashCode() call var.GetHashCode() call var.GetHashCode() call var.GetHashCode() call var.GetHashCode() decl_stmt string = as string if != return decl_stmt System.Type = as if != return if is bool bool return decl_stmt Antlr.Runtime.IToken = as if != return if == typeof decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = int if == - else foreach in if == - else foreach in if == - else if == - else foreach in if == - - else else if == typeof decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = else if == typeof template= writer templateimpl if template - else templatelocalsLength foreach in template writer templateGroup else if == typeof || == == else throw new private < private < < decl_stmt var = new < < < foreach in return private private < if == || ! call var.Add() call var.Add() call var.Add() call var.Add() call var.Add() return switch case case return case default: decl_stmt Antlr.Runtime.IToken = as if != return decl_stmt System.Type = as if != return if == typeof decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = if != foreach in if != foreach template in template reachableObjects else if == typeof decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = else if == typeof template= templateimpl reachableObjects if template foreach in template , templateGroup reachableObjects else if == typeof || == if != && != throw new return else throw new break public virtual public virtual decl_stmt Antlr.Runtime.ANTLRFileStream try = new = catch return return public virtual public virtual decl_stmt Antlr4.StringTemplate.Compiler.GroupLexer = new decl_stmt Antlr.Runtime.CommonTokenStream = new decl_stmt Antlr4.StringTemplate.Compiler.GroupParser = new = = try call GroupParser.templateDef() call GroupParser.templateDef() call GroupParser.templateDef() call GroupParser.templateDef() call GroupParser.templateDef() catch decl_stmt string = if ! = + decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = = return public virtual public virtual = public virtual public virtual decl_stmt Antlr4.StringTemplate.IModelAdaptor call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() out return public public public virtual public virtual = ?? new < = if foreach in group public virtual public virtual if == return decl_stmt Antlr4.StringTemplate.IAttributeRenderer call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() out return public virtual public virtual = ?? new < = public virtual public virtual if == return decl_stmt Antlr4.StringTemplate.ITypeProxyFactory call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() out return public virtual public virtual return new public virtual public virtual decl_stmt Antlr4.StringTemplate.Template = new = if != = new for = < ++ = return public public template= if && template template return template public public return new public virtual public virtual return public virtual public virtual return public virtual public virtual return public override public override return public virtual public virtual decl_stmt System.Text.StringBuilder = new if != && > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + foreach in decl_stmt string = decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = if || == continue decl_stmt int = call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() + - - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public virtual public virtual if == return return = new public virtual < public virtual < decl_stmt System.Collections.Generic.HashSet < = new < foreach < in if != call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return var private < private < < decl_stmt var = new < < < foreach in return CompiledTemplate ANTLRFileStream string string IModelAdaptor StringBuilder GroupLexer GroupParser ITypeProxyFactory Template CommonTokenStream IToken IAttributeRenderer FormalArgument int CompiledTemplate Type CompiledTemplate decl HashSet private private < if == || ! return switch case case return case default: decl_stmt Antlr.Runtime.IToken = as if != return decl_stmt System.Type = as if != return if == typeof decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = if != foreach in if != foreach template in template reachableObjects else if == typeof decl_stmt Antlr4.StringTemplate.Compiler.FormalArgument = else if == typeof template= templateimpl reachableObjects if template foreach in template , templateGroup reachableObjects else if == typeof || == if != && != throw new return else throw new break public virtual public virtual decl_stmt Antlr.Runtime.ANTLRFileStream try = new = catch return return public virtual public virtual decl_stmt Antlr4.StringTemplate.Compiler.GroupLexer = new decl_stmt Antlr.Runtime.CommonTokenStream = new decl_stmt Antlr4.StringTemplate.Compiler.GroupParser = new = = try call GroupParser.templateDef() call GroupParser.templateDef() call GroupParser.templateDef() call GroupParser.templateDef() call GroupParser.templateDef() catch decl_stmt string = if ! = + decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = = return public virtual public virtual = public virtual public virtual decl_stmt Antlr4.StringTemplate.IModelAdaptor call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() out return public public public virtual public virtual = ?? new < = if foreach in group public virtual public virtual if == return decl_stmt Antlr4.StringTemplate.IAttributeRenderer call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() out return public virtual public virtual = ?? new < = public virtual public virtual if == return decl_stmt Antlr4.StringTemplate.ITypeProxyFactory call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() out return public virtual public virtual return new public virtual public virtual decl_stmt Antlr4.StringTemplate.Template = new = if != = new for = < ++ = return public public template= if && template template return template public public return new public virtual public virtual return public virtual public virtual return public virtual public virtual return public override public override return public virtual public virtual decl_stmt System.Text.StringBuilder = new if != && > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + foreach in decl_stmt string = decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = if || == continue decl_stmt int = call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() + - - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) public virtual public virtual if == return return = new public virtual < public virtual < decl_stmt System.Collections.Generic.HashSet < = new < foreach < in if != call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return ANTLRFileStream public virtual public virtual decl_stmt Antlr.Runtime.ANTLRFileStream try = new = catch return return CommonTokenStream GroupLexer GroupParser CompiledTemplate string public virtual public virtual decl_stmt Antlr4.StringTemplate.Compiler.GroupLexer = new decl_stmt Antlr.Runtime.CommonTokenStream = new decl_stmt Antlr4.StringTemplate.Compiler.GroupParser = new = = try call GroupParser.templateDef() call GroupParser.templateDef() call GroupParser.templateDef() call GroupParser.templateDef() call GroupParser.templateDef() catch decl_stmt string = if ! = + decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = = return public virtual public virtual = IModelAdaptor public virtual public virtual decl_stmt Antlr4.StringTemplate.IModelAdaptor call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() out return public public public virtual public virtual = ?? new < = if foreach in group IAttributeRenderer public virtual public virtual if == return decl_stmt Antlr4.StringTemplate.IAttributeRenderer call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() out return public virtual public virtual = ?? new < = ITypeProxyFactory public virtual public virtual if == return decl_stmt Antlr4.StringTemplate.ITypeProxyFactory call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() call decl TypeRegistry.TryGetValue() out return public virtual public virtual return new Template public virtual public virtual decl_stmt Antlr4.StringTemplate.Template = new = if != = new for = < ++ = return public public template= if && template template return template public public return new return return return public override public override return CompiledTemplate StringBuilder string int public virtual public virtual decl_stmt System.Text.StringBuilder = new if != && > call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + foreach in decl_stmt string = decl_stmt Antlr4.StringTemplate.Compiler.CompiledTemplate = if || == continue decl_stmt int = call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() call string.LastIndexOf() = call string.Substring() call string.Substring() call string.Substring() call string.Substring() call string.Substring() + - - call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) if != call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call CompiledTemplate.FormalArguments() call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) call System.Text.StringBuilder.Append(byte) + return call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) call System.Text.StringBuilder.ToString(int,int) if == return return = new decl HashSet public virtual < public virtual < decl_stmt System.Collections.Generic.HashSet < = new < foreach < in if != call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() call decl HashSet.Add() return