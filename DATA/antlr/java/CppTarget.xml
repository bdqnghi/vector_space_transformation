org.antlr.codegen org.antlr.Tool import org.antlr.tool.Grammar import org.stringtemplate.v4.ST import org.stringtemplate.v4.misc.Aggregate import java.io.IOException import java.util.ArrayList import java.util.List import java.util.Map import class org.antlr.codegen.CppTarget super super extends decl ArrayList public public return String protected protected throws decl_stmt java.lang.String = decl List Object String Aggregate boolean protected protected throws decl_stmt java.util.List < = < for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt boolean = decl_stmt java.lang.Object = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if instanceof decl_stmt Aggregate = for < : call Aggregate.properties() call Aggregate.properties() call Aggregate.properties() call Aggregate.properties() call Aggregate.properties() call Aggregate.properties() call Aggregate.properties() call Aggregate.properties() call Aggregate.properties() if call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() = break if break decl_stmt java.lang.String = = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - + protected protected return public public switch case if return if return if return if return if return if return break case if return if return if return if return if return if return break case if return if return if return if return if return if return if return break case if return if return if return if return if return if return break return int public public if = + else decl_stmt int = if < || || = + return StringBuffer int String String public public decl_stmt int decl_stmt java.lang.String decl_stmt java.lang.StringBuffer = new call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) for = < - ++ call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) if == ++ switch case case call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) + + = + break case case call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) break case case call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) break case case call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) break case case call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) break case case call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) break default: call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) int break else call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) int call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) = call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() = call decl ArrayList.indexOf() call decl ArrayList.indexOf() call decl ArrayList.indexOf() call decl ArrayList.indexOf() call decl ArrayList.indexOf() if == - call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() = call decl ArrayList.indexOf() call decl ArrayList.indexOf() call decl ArrayList.indexOf() call decl ArrayList.indexOf() call decl ArrayList.indexOf() decl_stmt java.lang.String = + + return protected protected if == = if == = if == =