org.antlr.test org.antlr.analysis.DFA import org.antlr.analysis.DecisionProbe import org.antlr.analysis.Label import org.antlr.codegen.CodeGenerator import org.antlr.misc.BitSet import org.antlr.runtime.Token import org.antlr.tool.* import org.junit.Test import java.util.List import java.util.Map import java.util.Set import static static org.junit.Assert.* import class org.antlr.test.TestSemanticPredicates super super extends String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = new new String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = new new String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + decl_stmt java.lang.String = + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + + ErrorQueue Grammar CodeGenerator String Message DFA public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + = decl_stmt org.antlr.test.ErrorQueue = new decl_stmt org.antlr.codegen.CodeGenerator = new call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) if call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() == call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.tool.Grammar.createLookaheadDFAs() decl_stmt org.antlr.runtime.DFA = call org.antlr.tool.Grammar.getLookaheadDFA(int) call org.antlr.tool.Grammar.getLookaheadDFA(int) call org.antlr.tool.Grammar.getLookaheadDFA(int) call org.antlr.tool.Grammar.getLookaheadDFA(int) call org.antlr.tool.Grammar.getLookaheadDFA(int) call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() decl_stmt org.antlr.tool.Message = call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() instanceof String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + decl_stmt java.lang.String = + + + ErrorQueue String CodeGenerator Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + + + + = decl_stmt org.antlr.test.ErrorQueue = new decl_stmt org.antlr.codegen.CodeGenerator = new call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) if call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() == call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() ErrorQueue String CodeGenerator Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + decl_stmt java.lang.String = + + + + + + + + + = decl_stmt org.antlr.test.ErrorQueue = new decl_stmt org.antlr.codegen.CodeGenerator = new call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) if call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() == call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.tool.Grammar.createLookaheadDFAs() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + + + + + + String Grammar String public public throws decl_stmt org.antlr.tool.Grammar = new + + + decl_stmt java.lang.String = + + decl_stmt java.lang.String = + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + decl_stmt java.lang.String = + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + decl_stmt java.lang.String = + + + String ErrorQueue Grammar public public throws decl_stmt org.antlr.test.ErrorQueue = new decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = new new new String ErrorQueue Grammar public public throws decl_stmt org.antlr.test.ErrorQueue = new decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + new new new String ErrorQueue Grammar public public throws decl_stmt org.antlr.test.ErrorQueue = new decl_stmt org.antlr.tool.Grammar = new + + + decl_stmt java.lang.String = new new new String ErrorQueue Grammar public public throws decl_stmt org.antlr.test.ErrorQueue = new decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + new new String ErrorQueue Grammar public public throws decl_stmt org.antlr.test.ErrorQueue = new decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + new new String ErrorQueue Grammar public public throws decl_stmt org.antlr.test.ErrorQueue = new decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = new new new String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = new new Grammar decl int String int decl int decl int String decl int public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + decl_stmt java.lang.String = + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String decl int public public throws decl_stmt org.antlr.tool.Grammar = new + + + decl_stmt java.lang.String = + + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String decl int public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + + + + decl_stmt java.lang.String = + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = decl_stmt int = String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + decl_stmt java.lang.String = + + + Grammar decl int String int decl int decl int String decl int public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = decl_stmt int = decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = new decl_stmt int = decl_stmt int = decl Set ErrorQueue decl List CodeGenerator BitSet decl List decl Map decl List BitSet GrammarInsufficientPredicatesMessage String GrammarInsufficientPredicatesMessage Message String DFA FASerializer protected protected throws = decl_stmt org.antlr.test.ErrorQueue = new decl_stmt org.antlr.codegen.CodeGenerator = new if == if call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() != + call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() decl_stmt org.antlr.runtime.DFA = decl_stmt org.antlr.tool.FASerializer = new decl_stmt java.lang.String = call org.antlr.tool.FASerializer.serialize(State) call org.antlr.tool.FASerializer.serialize(State) call org.antlr.tool.FASerializer.serialize(State) call org.antlr.tool.FASerializer.serialize(State) call org.antlr.tool.FASerializer.serialize(State) decl_stmt java.util.List < = call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() if != decl_stmt org.antlr.runtime.BitSet = new call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) decl_stmt org.antlr.runtime.BitSet = new call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) else != call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() : if != decl_stmt org.antlr.tool.Message = + call Message.getClass() call Message.getClass() call Message.getClass() call Message.getClass() call Message.getClass() instanceof decl_stmt org.antlr.tool.GrammarNonDeterminismMessage = decl_stmt java.util.List < = call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() decl_stmt java.lang.String = call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() if != decl_stmt org.antlr.tool.GrammarNonDeterminismMessage = + decl_stmt java.util.List < = call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() call GrammarInsufficientPredicatesMessage.probe() decl_stmt org.antlr.runtime.BitSet = new call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) decl_stmt org.antlr.runtime.BitSet = new call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) else decl_stmt org.antlr.tool.GrammarNonDeterminismMessage = if != decl_stmt org.antlr.tool.GrammarInsufficientPredicatesMessage = + decl_stmt java.util.Map < < = decl_stmt java.util.Set < = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt org.antlr.runtime.BitSet = new call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) decl_stmt org.antlr.runtime.BitSet = new call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) else decl_stmt org.antlr.tool.GrammarInsufficientPredicatesMessage = if != Message protected protected < extends extends for = < ++ decl_stmt org.antlr.tool.Message = if instanceof return return Message protected protected < extends extends for = < ++ decl_stmt org.antlr.tool.Message = if instanceof return return StringBuilder int protected protected decl_stmt java.lang.StringBuilder = new for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()