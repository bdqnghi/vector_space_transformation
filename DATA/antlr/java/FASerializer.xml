org.antlr.tool org.antlr.analysis.* import org.antlr.misc.Utils import java.util.* import class org.antlr.tool.FASerializer decl Set Grammar int decl Map public public if == return return StringBuilder String String decl List public public = new < = if = new < decl_stmt java.util.List < = new < if > else decl_stmt java.lang.String = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + decl_stmt java.lang.StringBuilder = new for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() Transition protected protected if == return if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() != return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() ++ for = < ++ decl_stmt org.antlr.analysis.Transition = if instanceof Integer Integer SemanticContext int int String Transition String StringBuilder protected protected < if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt int = if != decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = decl_stmt java.lang.String = for = < ++ decl_stmt org.antlr.analysis.Transition = decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call org.antlr.analysis.Transition.isAction() call org.antlr.analysis.Transition.isAction() call org.antlr.analysis.Transition.isAction() call org.antlr.analysis.Transition.isAction() call org.antlr.analysis.Transition.isAction() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if call org.antlr.analysis.Transition.isSemanticPredicate() call org.antlr.analysis.Transition.isSemanticPredicate() call org.antlr.analysis.Transition.isSemanticPredicate() call org.antlr.analysis.Transition.isSemanticPredicate() call org.antlr.analysis.Transition.isSemanticPredicate() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() else decl_stmt java.lang.String = if instanceof decl_stmt org.antlr.analysis.SemanticContext = if != = + call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call Grammar.generator() call Grammar.generator() call Grammar.generator() call Grammar.generator() call Grammar.generator() call Grammar.generator() call Grammar.generator() call Grammar.generator() call Grammar.generator() + call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() decl_stmt int = if != decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if instanceof String private private decl_stmt java.lang.String = + if if instanceof = + + + else = + return