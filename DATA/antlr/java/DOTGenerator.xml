org.antlr.tool org.antlr.Tool import org.antlr.analysis.* import org.antlr.grammar.v3.ANTLRParser import org.antlr.misc.Utils import org.stringtemplate.v4.ST import org.stringtemplate.v4.STGroup import org.stringtemplate.v4.STGroupFile import java.util.* import class org.antlr.tool.DOTGenerator String Grammar boolean decl Set String STGroup ST public public if == return decl_stmt ST = new < if instanceof = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() else = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() return call ST.render() call ST.render() call ST.render() call ST.render() call ST.render() Transition ST protected protected if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt ST if = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() else = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() for = < ++ decl_stmt org.antlr.analysis.Transition = if if instanceof && != continue = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() RuleClosureTransition GrammarAST ST ST Transition ST NFAState protected protected if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt ST if = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() else = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() if return if decl_stmt org.antlr.tool.GrammarAST = if != && call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() != decl_stmt ST = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() decl_stmt org.antlr.analysis.NFAState = while != call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() if != = else = decl_stmt ST for = < ++ decl_stmt org.antlr.analysis.Transition = if instanceof decl_stmt RuleClosureTransition = = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() if != call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() + + + + else call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() + + call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() continue if call org.antlr.analysis.Transition.isAction() call org.antlr.analysis.Transition.isAction() call org.antlr.analysis.Transition.isAction() call org.antlr.analysis.Transition.isAction() call org.antlr.analysis.Transition.isAction() = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() else if call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() else = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() String SemanticContext State String protected protected decl_stmt java.lang.String = = = = = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = decl_stmt org.antlr.analysis.State = if ! && instanceof decl_stmt org.antlr.analysis.SemanticContext = if != decl_stmt java.lang.String = + call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call Grammar.generator() call Grammar.generator() call Grammar.generator() call Grammar.generator() call Grammar.generator() call Grammar.generator() call Grammar.generator() call Grammar.generator() call Grammar.generator() + += return NFAConfiguration String Integer decl List StringBuilder NFAState decl List int decl Set decl Set protected protected if == return decl_stmt java.lang.String = if instanceof decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if if instanceof if call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.util.Set < = if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.util.List < = new < call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() decl_stmt java.util.Set < = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt java.lang.Integer = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt int = if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.util.List < = new < for : if != continue call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt int = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.antlr.analysis.NFAConfiguration.toString(boolean) call org.antlr.analysis.NFAConfiguration.toString(boolean) call org.antlr.analysis.NFAConfiguration.toString(boolean) call org.antlr.analysis.NFAConfiguration.toString(boolean) call org.antlr.analysis.NFAConfiguration.toString(boolean) if + < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if == && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if instanceof && = + + if != += + else if instanceof && != decl_stmt org.antlr.analysis.NFAState = = + + else if instanceof && = + + return + + public public return public public = public public return public public =