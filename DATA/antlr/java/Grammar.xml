org.antlr.tool org.antlr.Tool import org.antlr.analysis.DFA import org.antlr.analysis.DFAState import org.antlr.analysis.LL1Analyzer import org.antlr.analysis.LL1DFA import org.antlr.analysis.Label import org.antlr.analysis.LookaheadSet import org.antlr.analysis.NFA import org.antlr.analysis.NFAConversionThread import org.antlr.analysis.NFAState import org.antlr.analysis.NFAToDFAConverter import org.antlr.analysis.SemanticContext import org.antlr.analysis.Transition import org.antlr.codegen.CodeGenerator import org.antlr.codegen.Target import org.antlr.grammar.v3.ANTLRLexer import org.antlr.grammar.v3.ANTLRParser import org.antlr.grammar.v3.ANTLRTreePrinter import org.antlr.grammar.v3.ActionAnalysis import org.antlr.grammar.v3.DefineGrammarItemsWalker import org.antlr.grammar.v3.TreeToNFAConverter import org.antlr.misc.Barrier import org.antlr.misc.IntSet import org.antlr.misc.IntervalSet import org.antlr.misc.MultiMap import org.antlr.misc.OrderedHashSet import org.antlr.misc.Utils import org.antlr.runtime.ANTLRReaderStream import org.antlr.runtime.ANTLRStringStream import org.antlr.runtime.CommonToken import org.antlr.runtime.CommonTokenStream import org.antlr.runtime.RecognitionException import org.antlr.runtime.Token import org.antlr.runtime.tree.CommonTreeNodeStream import org.stringtemplate.v4.ST import org.stringtemplate.v4.STGroup import org.stringtemplate.v4.STGroupString import java.io.BufferedReader import java.io.File import java.io.FileNotFoundException import java.io.FileReader import java.io.IOException import java.io.PrintStream import java.io.Reader import java.io.StreamTokenizer import java.io.StringReader import java.util.ArrayList import java.util.Arrays import java.util.BitSet import java.util.Collection import java.util.HashMap import java.util.HashSet import java.util.Iterator import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Set import java.util.Vector import class org.antlr.tool.Grammar decl String decl Map decl Set String String int int CodeGenerator int NameSpaceChecker decl Set decl Vector String boolean decl Set decl LinkedHashMap Target String NFA decl Map GrammarSanity LL1Analyzer decl List int decl Set decl Set int decl Set decl Set String NFAFactory decl MultiMap int int decl Map decl Set int int int String decl Set decl Map decl Set decl Set int decl Map String int int int ST int IntSet decl String String int int String decl Set Tool boolean boolean long CommonTokenStream String decl Set String decl Set GrammarAST decl List decl LinkedHashMap String boolean CompositeGrammar String CompositeGrammarTree decl Map decl String int boolean String decl Map decl Set decl Set decl Set decl Set int decl Set boolean public public return public public return public public = public public return String int String int String public public if == return decl_stmt java.lang.String = call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) call java.lang.String.replace(char,char) decl_stmt int = call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() if ! decl_stmt int = call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) call java.lang.String.lastIndexOf(String,int) decl_stmt java.lang.String if < = + else = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) if ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = StringReader public public throws decl_stmt java.io.StringReader = new call org.antlr.tool.CompositeGrammar.assignTokenTypes() call org.antlr.tool.CompositeGrammar.assignTokenTypes() call org.antlr.tool.CompositeGrammar.assignTokenTypes() call org.antlr.tool.CompositeGrammar.assignTokenTypes() call org.antlr.tool.CompositeGrammar.assignTokenTypes() call org.antlr.tool.CompositeGrammar.defineGrammarSymbols() call org.antlr.tool.CompositeGrammar.defineGrammarSymbols() call org.antlr.tool.CompositeGrammar.defineGrammarSymbols() call org.antlr.tool.CompositeGrammar.defineGrammarSymbols() call org.antlr.tool.CompositeGrammar.defineGrammarSymbols() FileReader BufferedReader public public throws decl_stmt FileReader decl_stmt java.io.BufferedReader = try = new = new call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() = finally if != call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() ANTLRLexer ANTLRParser decl ANTLRParser decl grammar__return public public decl_stmt ANTLRLexer try = new new catch + return call ANTLRLexer.setFileName() call ANTLRLexer.setFileName() call ANTLRLexer.setFileName() call ANTLRLexer.setFileName() call ANTLRLexer.setFileName() = new decl_stmt ANTLRParser = call ANTLRParser.setFileName() call ANTLRParser.setFileName() call ANTLRParser.setFileName() call ANTLRParser.setFileName() call ANTLRParser.setFileName() decl_stmt grammar__return = try = call ANTLRParser.grammar_() call ANTLRParser.grammar_() call ANTLRParser.grammar_() call ANTLRParser.grammar_() call ANTLRParser.grammar_() catch + if && ! decl_stmt java.lang.Object = if == else call decl ANTLRParser.getTree() call decl ANTLRParser.getTree() call decl ANTLRParser.getTree() call decl ANTLRParser.getTree() call decl ANTLRParser.getTree() call GrammarAST.setUnknownTokenBoundaries() call GrammarAST.setUnknownTokenBoundaries() call GrammarAST.setUnknownTokenBoundaries() call GrammarAST.setUnknownTokenBoundaries() call GrammarAST.setUnknownTokenBoundaries() call ANTLRLexer.getFileName() call ANTLRLexer.getFileName() call ANTLRLexer.getFileName() call ANTLRLexer.getFileName() call ANTLRLexer.getFileName() if call org.antlr.tool.GrammarAST.findFirstType(int) call org.antlr.tool.GrammarAST.findFirstType(int) call org.antlr.tool.GrammarAST.findFirstType(int) call org.antlr.tool.GrammarAST.findFirstType(int) call org.antlr.tool.GrammarAST.findFirstType(int) == Object Object Object Object protected protected decl_stmt java.lang.Object = if == && != && call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() decl_stmt java.lang.Object = decl_stmt java.lang.Object = decl_stmt java.lang.Object = if != && ! call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() if != && ! call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() if != && ! call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() if != && call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() decl List CommonTreeNodeStream LeftRecursiveRuleAnalyzer GrammarAST boolean public public decl_stmt org.antlr.runtime.tree.CommonTreeNodeStream = new decl_stmt org.antlr.tool.LeftRecursiveRuleAnalyzer = new decl_stmt boolean = try = call LeftRecursiveRuleAnalyzer.rec_rule() call LeftRecursiveRuleAnalyzer.rec_rule() call LeftRecursiveRuleAnalyzer.rec_rule() call LeftRecursiveRuleAnalyzer.rec_rule() call LeftRecursiveRuleAnalyzer.rec_rule() catch if ! return decl_stmt java.util.List < = new < call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialPrecStartRule() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialPrecStartRule() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialPrecStartRule() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialPrecStartRule() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialPrecStartRule() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialOpPrecRule() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialOpPrecRule() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialOpPrecRule() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialOpPrecRule() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialOpPrecRule() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialPrimaryRule() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialPrimaryRule() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialPrimaryRule() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialPrimaryRule() call org.antlr.tool.LeftRecursiveRuleAnalyzer.getArtificialPrimaryRule() for : decl_stmt org.antlr.tool.GrammarAST = DefineGrammarItemsWalker public public if call org.antlr.tool.GrammarAST.toStringList() call org.antlr.tool.GrammarAST.toStringList() call org.antlr.tool.GrammarAST.toStringList() call org.antlr.tool.GrammarAST.toStringList() call org.antlr.tool.GrammarAST.toStringList() decl_stmt DefineGrammarItemsWalker = new new try call DefineGrammarItemsWalker.grammar_() call DefineGrammarItemsWalker.grammar_() call DefineGrammarItemsWalker.grammar_() call DefineGrammarItemsWalker.grammar_() call DefineGrammarItemsWalker.grammar_() catch public public call org.antlr.tool.NameSpaceChecker.checkConflicts() call org.antlr.tool.NameSpaceChecker.checkConflicts() call org.antlr.tool.NameSpaceChecker.checkConflicts() call org.antlr.tool.NameSpaceChecker.checkConflicts() call org.antlr.tool.NameSpaceChecker.checkConflicts() decl List public public decl_stmt java.util.List < = call decl MultiMap.get() call decl MultiMap.get() call decl MultiMap.get() call decl MultiMap.get() call decl MultiMap.get() return != && call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() Object public public if call ST.getAttribute() call ST.getAttribute() call ST.getAttribute() call ST.getAttribute() call ST.getAttribute() == && call ST.getAttribute() call ST.getAttribute() call ST.getAttribute() call ST.getAttribute() call ST.getAttribute() == return call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() if != call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() if != for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() return call ST.render() call ST.render() call ST.render() call ST.render() call ST.render() public public return + + String decl List StringBuilder String public public decl_stmt java.lang.String = decl_stmt java.util.List < = call org.antlr.tool.CompositeGrammar.getDelegators(Grammar) call org.antlr.tool.CompositeGrammar.getDelegators(Grammar) call org.antlr.tool.CompositeGrammar.getDelegators(Grammar) call org.antlr.tool.CompositeGrammar.getDelegators(Grammar) call org.antlr.tool.CompositeGrammar.getDelegators(Grammar) decl_stmt java.lang.String = if != decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if == || == && = return + String String GrammarAST ST public public < < decl_stmt ST if = new + else = new + for = < ++ decl_stmt java.lang.String = call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() for = < ++ decl_stmt java.lang.String = call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() + decl_stmt org.antlr.tool.GrammarAST = call ST.render() call ST.render() call ST.render() call ST.render() call ST.render() return ANTLRLexer ANTLRParser decl ANTLRParser public public decl_stmt ANTLRLexer = new new decl_stmt ANTLRParser = new call ANTLRParser.setGrammar() call ANTLRParser.setGrammar() call ANTLRParser.setGrammar() call ANTLRParser.setGrammar() call ANTLRParser.setGrammar() call ANTLRParser.setGrammarType() call ANTLRParser.setGrammarType() call ANTLRParser.setGrammarType() call ANTLRParser.setGrammarType() call ANTLRParser.setGrammarType() try decl_stmt rule_return = call ANTLRParser.rule() call ANTLRParser.rule() call ANTLRParser.rule() call ANTLRParser.rule() call ANTLRParser.rule() return call decl ANTLRParser.getTree() call decl ANTLRParser.getTree() call decl ANTLRParser.getTree() call decl ANTLRParser.getTree() call decl ANTLRParser.getTree() catch return GrammarAST public public decl_stmt org.antlr.tool.GrammarAST = for = < call GrammarAST.getChildCount() call GrammarAST.getChildCount() call GrammarAST.getChildCount() call GrammarAST.getChildCount() call GrammarAST.getChildCount() ++ = call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() if == || call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() == || call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() == break if != call GrammarAST.addChild() call GrammarAST.addChild() call GrammarAST.addChild() call GrammarAST.addChild() call GrammarAST.addChild() decl List boolean GrammarAST GrammarAST String protected < extends extends protected < extends extends < decl_stmt java.util.List < = new < if == return decl_stmt boolean = call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() == for < : call decl LinkedHashMap.entrySet() call decl LinkedHashMap.entrySet() call decl LinkedHashMap.entrySet() call decl LinkedHashMap.entrySet() call decl LinkedHashMap.entrySet() decl_stmt java.lang.String = decl_stmt org.antlr.tool.GrammarAST = decl_stmt org.antlr.tool.GrammarAST = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return GrammarAST decl List public public decl_stmt java.util.List < extends extends = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.tool.GrammarAST = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call GrammarAST.addChild() call GrammarAST.addChild() call GrammarAST.addChild() call GrammarAST.addChild() call GrammarAST.addChild() decl Collection NFAState NFAState String public public if != return = new = new decl_stmt java.util.Collection < = for : decl_stmt java.lang.String = decl_stmt org.antlr.analysis.NFAState = call org.antlr.tool.NFAFactory.newState() call org.antlr.tool.NFAFactory.newState() call org.antlr.tool.NFAFactory.newState() call org.antlr.tool.NFAFactory.newState() call org.antlr.tool.NFAFactory.newState() call org.antlr.analysis.NFAState.setDescription(String) call org.antlr.analysis.NFAState.setDescription(String) call org.antlr.analysis.NFAState.setDescription(String) call org.antlr.analysis.NFAState.setDescription(String) call org.antlr.analysis.NFAState.setDescription(String) + + = = decl_stmt org.antlr.analysis.NFAState = call org.antlr.tool.NFAFactory.newState() call org.antlr.tool.NFAFactory.newState() call org.antlr.tool.NFAFactory.newState() call org.antlr.tool.NFAFactory.newState() call org.antlr.tool.NFAFactory.newState() call org.antlr.analysis.NFAState.setDescription(String) call org.antlr.analysis.NFAState.setDescription(String) call org.antlr.analysis.NFAState.setDescription(String) call org.antlr.analysis.NFAState.setDescription(String) call org.antlr.analysis.NFAState.setDescription(String) + + call NFAState.setAcceptState() call NFAState.setAcceptState() call NFAState.setAcceptState() call NFAState.setAcceptState() call NFAState.setAcceptState() = = TreeToNFAConverter CommonTreeNodeStream public public if == if return if return decl_stmt org.antlr.runtime.tree.CommonTreeNodeStream = new decl_stmt TreeToNFAConverter = new try call TreeToNFAConverter.grammar_() call TreeToNFAConverter.grammar_() call TreeToNFAConverter.grammar_() call TreeToNFAConverter.grammar_() call TreeToNFAConverter.grammar_() catch = public public Barrier int NFAState int NFAConversionThread long long Rule String NFAConversionThread DFA FASerializer public public if == decl_stmt long = decl_stmt int = if for = <= ++ decl_stmt org.antlr.analysis.NFAState = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() if + + + continue if ! && call org.antlr.analysis.NFAState.getNumberOfTransitions() call org.antlr.analysis.NFAState.getNumberOfTransitions() call org.antlr.analysis.NFAState.getNumberOfTransitions() call org.antlr.analysis.NFAState.getNumberOfTransitions() call org.antlr.analysis.NFAState.getNumberOfTransitions() > decl_stmt org.antlr.tool.Rule = if && ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() continue decl_stmt org.antlr.runtime.DFA = if == || == = if == if + + = if == if + decl_stmt org.antlr.tool.FASerializer = new decl_stmt java.lang.String = call org.antlr.tool.FASerializer.serialize(State) call org.antlr.tool.FASerializer.serialize(State) call org.antlr.tool.FASerializer.serialize(State) call org.antlr.tool.FASerializer.serialize(State) call org.antlr.tool.FASerializer.serialize(State) else decl_stmt org.antlr.misc.Barrier = new decl_stmt int = / decl_stmt org.antlr.analysis.NFAConversionThread = new new if == / ++ decl_stmt org.antlr.analysis.NFAConversionThread = new new try call Barrier.waitForRelease() call Barrier.waitForRelease() call Barrier.waitForRelease() call Barrier.waitForRelease() call Barrier.waitForRelease() catch decl_stmt long = = - = boolean DFA Decision boolean NFAState String NFAState LookaheadSet decl List decl LookaheadSet LookaheadSet NFAState Rule int decl List int decl MultiMap IntervalSet LookaheadSet public public decl_stmt Decision = decl_stmt java.lang.String = decl_stmt org.antlr.tool.Rule = decl_stmt org.antlr.analysis.NFAState = if + call org.antlr.analysis.NFAState.getDecisionNumber() call org.antlr.analysis.NFAState.getDecisionNumber() call org.antlr.analysis.NFAState.getDecisionNumber() call org.antlr.analysis.NFAState.getDecisionNumber() call org.antlr.analysis.NFAState.getDecisionNumber() + + call org.antlr.analysis.NFAState.getDescription() call org.antlr.analysis.NFAState.getDescription() call org.antlr.analysis.NFAState.getDescription() call org.antlr.analysis.NFAState.getDescription() call org.antlr.analysis.NFAState.getDescription() if && ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return decl_stmt int = decl_stmt org.antlr.analysis.LookaheadSet = new + for = <= ++ decl_stmt int = call org.antlr.analysis.NFAState.translateDisplayAltToWalkAlt(int) call org.antlr.analysis.NFAState.translateDisplayAltToWalkAlt(int) call org.antlr.analysis.NFAState.translateDisplayAltToWalkAlt(int) call org.antlr.analysis.NFAState.translateDisplayAltToWalkAlt(int) call org.antlr.analysis.NFAState.translateDisplayAltToWalkAlt(int) decl_stmt org.antlr.analysis.NFAState = decl_stmt org.antlr.analysis.NFAState = = call org.antlr.analysis.LL1Analyzer.LOOK(NFAState) call org.antlr.analysis.LL1Analyzer.LOOK(NFAState) call org.antlr.analysis.LL1Analyzer.LOOK(NFAState) call org.antlr.analysis.LL1Analyzer.LOOK(NFAState) call org.antlr.analysis.LL1Analyzer.LOOK(NFAState) decl_stmt boolean = for = <= ++ for = + <= ++ decl_stmt org.antlr.analysis.LookaheadSet = if ! call org.antlr.analysis.LookaheadSet.isNil() call org.antlr.analysis.LookaheadSet.isNil() call org.antlr.analysis.LookaheadSet.isNil() call org.antlr.analysis.LookaheadSet.isNil() call org.antlr.analysis.LookaheadSet.isNil() = break break decl_stmt boolean = call org.antlr.analysis.LL1Analyzer.detectConfoundingPredicates(NFAState) call org.antlr.analysis.LL1Analyzer.detectConfoundingPredicates(NFAState) call org.antlr.analysis.LL1Analyzer.detectConfoundingPredicates(NFAState) call org.antlr.analysis.LL1Analyzer.detectConfoundingPredicates(NFAState) call org.antlr.analysis.LL1Analyzer.detectConfoundingPredicates(NFAState) if && ! if + + decl_stmt org.antlr.runtime.DFA = new return if != || ! || return decl_stmt java.util.List < = new < for = < ++ decl_stmt org.antlr.analysis.LookaheadSet = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt java.util.List < = decl_stmt org.antlr.misc.MultiMap < = new < for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.misc.IntervalSet = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for = < ++ decl_stmt org.antlr.analysis.LookaheadSet = if ! call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call decl MultiMap.map() call decl MultiMap.map() call decl MultiMap.map() call decl MultiMap.map() call decl MultiMap.map() decl_stmt org.antlr.runtime.DFA = new return int GrammarAST int private private decl_stmt org.antlr.tool.GrammarAST = call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() decl_stmt int = call org.antlr.tool.GrammarAST.getLine() call org.antlr.tool.GrammarAST.getLine() call org.antlr.tool.GrammarAST.getLine() call org.antlr.tool.GrammarAST.getLine() call org.antlr.tool.GrammarAST.getLine() decl_stmt int = call org.antlr.tool.GrammarAST.getCharPositionInLine() call org.antlr.tool.GrammarAST.getCharPositionInLine() call org.antlr.tool.GrammarAST.getCharPositionInLine() call org.antlr.tool.GrammarAST.getCharPositionInLine() call org.antlr.tool.GrammarAST.getCharPositionInLine() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new int decl OrderedHashSet IntervalSet IntervalSet int IntervalSet IntervalSet IntervalSet protected < protected < < decl_stmt org.antlr.misc.OrderedHashSet < = new < decl_stmt int = for = < ++ decl_stmt org.antlr.misc.IntervalSet = if call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() continue decl_stmt org.antlr.misc.IntervalSet = decl_stmt int = call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() for = < ++ decl_stmt org.antlr.misc.IntervalSet = call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() if call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) continue decl_stmt org.antlr.misc.IntervalSet = call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call decl OrderedHashSet.set() call decl OrderedHashSet.set() call decl OrderedHashSet.set() call decl OrderedHashSet.set() call decl OrderedHashSet.set() decl_stmt org.antlr.misc.IntervalSet = call org.antlr.misc.IntervalSet.subtract(IntSet) call org.antlr.misc.IntervalSet.subtract(IntSet) call org.antlr.misc.IntervalSet.subtract(IntSet) call org.antlr.misc.IntervalSet.subtract(IntSet) call org.antlr.misc.IntervalSet.subtract(IntSet) if ! call org.antlr.misc.IntervalSet.isNil() call org.antlr.misc.IntervalSet.isNil() call org.antlr.misc.IntervalSet.isNil() call org.antlr.misc.IntervalSet.isNil() call org.antlr.misc.IntervalSet.isNil() call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() = call org.antlr.misc.IntervalSet.subtract(IntSet) call org.antlr.misc.IntervalSet.subtract(IntSet) call org.antlr.misc.IntervalSet.subtract(IntSet) call org.antlr.misc.IntervalSet.subtract(IntSet) call org.antlr.misc.IntervalSet.subtract(IntSet) if call org.antlr.misc.IntervalSet.isNil() call org.antlr.misc.IntervalSet.isNil() call org.antlr.misc.IntervalSet.isNil() call org.antlr.misc.IntervalSet.isNil() call org.antlr.misc.IntervalSet.isNil() break = if ! call org.antlr.misc.IntervalSet.isNil() call org.antlr.misc.IntervalSet.isNil() call org.antlr.misc.IntervalSet.isNil() call org.antlr.misc.IntervalSet.isNil() call org.antlr.misc.IntervalSet.isNil() call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() return call decl OrderedHashSet.elements() call decl OrderedHashSet.elements() call decl OrderedHashSet.elements() call decl OrderedHashSet.elements() call decl OrderedHashSet.elements() long Decision String NFAState DFA Rule boolean public public decl_stmt Decision = decl_stmt java.lang.String = decl_stmt org.antlr.tool.Rule = decl_stmt org.antlr.analysis.NFAState = decl_stmt long = if + call org.antlr.analysis.NFAState.getDecisionNumber() call org.antlr.analysis.NFAState.getDecisionNumber() call org.antlr.analysis.NFAState.getDecisionNumber() call org.antlr.analysis.NFAState.getDecisionNumber() call org.antlr.analysis.NFAState.getDecisionNumber() + + call org.antlr.analysis.NFAState.getDescription() call org.antlr.analysis.NFAState.getDescription() call org.antlr.analysis.NFAState.getDescription() call org.antlr.analysis.NFAState.getDescription() call org.antlr.analysis.NFAState.getDescription() = decl_stmt org.antlr.runtime.DFA = new decl_stmt boolean = call boolean.probe() call boolean.probe() call boolean.probe() call boolean.probe() call boolean.probe() call boolean.probe() call boolean.probe() call boolean.probe() call boolean.probe() || call boolean.probe() call boolean.probe() call boolean.probe() call boolean.probe() call boolean.probe() call boolean.probe() call boolean.probe() call boolean.probe() call boolean.probe() if && call boolean.okToRetryDFAWithK1() call boolean.okToRetryDFAWithK1() call boolean.okToRetryDFAWithK1() call boolean.okToRetryDFAWithK1() call boolean.okToRetryDFAWithK1() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() call Decision.blockAST() if + + + call boolean.getReasonForFailure() call boolean.getReasonForFailure() call boolean.getReasonForFailure() call boolean.getReasonForFailure() call boolean.getReasonForFailure() = = new if for : call boolean.getUniqueStates() call boolean.getUniqueStates() call boolean.getUniqueStates() call boolean.getUniqueStates() call boolean.getUniqueStates() if = + call boolean.getNumberOfStates() call boolean.getNumberOfStates() call boolean.getNumberOfStates() call boolean.getNumberOfStates() call boolean.getNumberOfStates() + + - + return public public = public public return public public ++ return int String public public if call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() != return if == call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() if >= call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() + call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() else call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() decl_stmt int = + - = if >= call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() + decl_stmt java.lang.String = call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() if == || call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() Rule String public public < decl_stmt java.lang.String = if != return if == || == && call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) return decl_stmt org.antlr.tool.Rule = new = call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call org.antlr.tool.Rule.setOptions(Map,Token) call org.antlr.tool.Rule.setOptions(Map,Token) call org.antlr.tool.Rule.setOptions(Map,Token) call org.antlr.tool.Rule.setOptions(Map,Token) call org.antlr.tool.Rule.setOptions(Map,Token) = call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() + call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() ++ if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = String public public if == = new < decl_stmt java.lang.String = + call decl LinkedHashMap.size() call decl LinkedHashMap.size() call decl LinkedHashMap.size() call decl LinkedHashMap.size() call decl LinkedHashMap.size() + + + call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() return public < public < return public public if == return return call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() public public call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() Object String decl List decl Map public public if == = decl_stmt java.lang.String = decl_stmt java.util.Map < = if == = new < decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != else call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if == call org.antlr.tool.CompositeGrammar.getRootGrammar() call org.antlr.tool.CompositeGrammar.getRootGrammar() call org.antlr.tool.CompositeGrammar.getRootGrammar() call org.antlr.tool.CompositeGrammar.getRootGrammar() call org.antlr.tool.CompositeGrammar.getRootGrammar() && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) decl_stmt java.util.List < = call org.antlr.tool.CompositeGrammar.getRootGrammar() call org.antlr.tool.CompositeGrammar.getRootGrammar() call org.antlr.tool.CompositeGrammar.getRootGrammar() call org.antlr.tool.CompositeGrammar.getRootGrammar() call org.antlr.tool.CompositeGrammar.getRootGrammar() for : if call org.antlr.codegen.Target.isValidActionScope(int,String) call org.antlr.codegen.Target.isValidActionScope(int,String) call org.antlr.codegen.Target.isValidActionScope(int,String) call org.antlr.codegen.Target.isValidActionScope(int,String) call org.antlr.codegen.Target.isValidActionScope(int,String) String decl Map public public decl_stmt java.lang.String = decl_stmt java.util.Map < = if == || ! call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() call decl Map.containsKey() if == = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public < < public < < return public public switch case return case case return case return return StringBuilder CommonToken String public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = <= && < call CommonTokenStream.size() call CommonTokenStream.size() call CommonTokenStream.size() call CommonTokenStream.size() call CommonTokenStream.size() ++ decl_stmt org.antlr.runtime.CommonToken = call CommonTokenStream.get() call CommonTokenStream.get() call CommonTokenStream.get() call CommonTokenStream.get() call CommonTokenStream.get() if call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() == || call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() == || call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() == || call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() call org.antlr.runtime.CommonToken.getType() == call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() call org.antlr.runtime.CommonToken.getText() decl_stmt java.lang.String = call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() if call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() public public if call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() call CompositeGrammar.lexerRules() String public public decl_stmt java.lang.String = if call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() Rule public public decl_stmt org.antlr.tool.Rule = call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() return Rule public public decl_stmt org.antlr.tool.Rule = call org.antlr.tool.CompositeGrammar.getRule(String) call org.antlr.tool.CompositeGrammar.getRule(String) call org.antlr.tool.CompositeGrammar.getRule(String) call org.antlr.tool.CompositeGrammar.getRule(String) call org.antlr.tool.CompositeGrammar.getRule(String) return Grammar public public if != decl_stmt org.antlr.tool.Grammar = call org.antlr.tool.CompositeGrammar.getGrammar(String) call org.antlr.tool.CompositeGrammar.getGrammar(String) call org.antlr.tool.CompositeGrammar.getGrammar(String) call org.antlr.tool.CompositeGrammar.getGrammar(String) call org.antlr.tool.CompositeGrammar.getGrammar(String) if == return return call org.antlr.tool.Grammar.getLocallyDefinedRule(String) call org.antlr.tool.Grammar.getLocallyDefinedRule(String) call org.antlr.tool.Grammar.getLocallyDefinedRule(String) call org.antlr.tool.Grammar.getLocallyDefinedRule(String) call org.antlr.tool.Grammar.getLocallyDefinedRule(String) return Rule public public decl_stmt org.antlr.tool.Rule = if != return return public public return Rule public public decl_stmt org.antlr.tool.Rule = call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() call CompositeGrammar.ruleIndexToRuleList() if != return return Rule public public if return if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return decl_stmt org.antlr.tool.Rule = return ! || && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() AttributeScope public public decl_stmt org.antlr.tool.AttributeScope = new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return AttributeScope public public decl_stmt org.antlr.tool.AttributeScope = new = return AttributeScope public public decl_stmt org.antlr.tool.AttributeScope = new = return AttributeScope public public decl_stmt org.antlr.tool.AttributeScope = new = return public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() public < public < return boolean protected protected decl_stmt boolean = call org.antlr.tool.NameSpaceChecker.checkForLabelTypeMismatch(Rule,Token,int) call org.antlr.tool.NameSpaceChecker.checkForLabelTypeMismatch(Rule,Token,int) call org.antlr.tool.NameSpaceChecker.checkForLabelTypeMismatch(Rule,Token,int) call org.antlr.tool.NameSpaceChecker.checkForLabelTypeMismatch(Rule,Token,int) call org.antlr.tool.NameSpaceChecker.checkForLabelTypeMismatch(Rule,Token,int) if return Rule public public decl_stmt org.antlr.tool.Rule = if != if == && == || == || == || == || == else Rule public public decl_stmt org.antlr.tool.Rule = if != Rule public public decl_stmt org.antlr.tool.Rule = if != Rule public public decl_stmt org.antlr.tool.Rule = if != Rule public public decl_stmt org.antlr.tool.Rule = if != Rule public public decl_stmt org.antlr.tool.Rule = if != if ! call org.antlr.tool.Rule.getHasMultipleReturnValues() call org.antlr.tool.Rule.getHasMultipleReturnValues() call org.antlr.tool.Rule.getHasMultipleReturnValues() call org.antlr.tool.Rule.getHasMultipleReturnValues() call org.antlr.tool.Rule.getHasMultipleReturnValues() call String.getText() call String.getText() call String.getText() call String.getText() call String.getText() LabelElementPair Rule decl Set String public < public < < decl_stmt java.util.Set < = new < for : if == decl_stmt java.lang.String = decl_stmt org.antlr.tool.Rule = if == continue decl_stmt LabelElementPair = call org.antlr.tool.Rule.getLabel(String) call org.antlr.tool.Rule.getLabel(String) call org.antlr.tool.Rule.getLabel(String) call org.antlr.tool.Rule.getLabel(String) call org.antlr.tool.Rule.getLabel(String) if != && == && ! call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return decl Collection decl Collection ActionAnalysis GrammarAST decl List protected protected decl_stmt java.util.Collection < = for : decl_stmt java.util.List < = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.tool.GrammarAST = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt ActionAnalysis = new call ActionAnalysis.analyze() call ActionAnalysis.analyze() call ActionAnalysis.analyze() call ActionAnalysis.analyze() call ActionAnalysis.analyze() decl_stmt java.util.Collection < extends extends = for : decl_stmt org.antlr.tool.GrammarAST = decl_stmt ActionAnalysis = new call ActionAnalysis.analyze() call ActionAnalysis.analyze() call ActionAnalysis.analyze() call ActionAnalysis.analyze() call ActionAnalysis.analyze() decl Set Rule public public if == return decl_stmt java.util.Set < = call decl LinkedHashMap.keySet() call decl LinkedHashMap.keySet() call decl LinkedHashMap.keySet() call decl LinkedHashMap.keySet() call decl LinkedHashMap.keySet() for : decl_stmt org.antlr.tool.Rule = call org.antlr.tool.Rule.getRuleLabels() call org.antlr.tool.Rule.getRuleLabels() call org.antlr.tool.Rule.getRuleLabels() call org.antlr.tool.Rule.getRuleLabels() call org.antlr.tool.Rule.getRuleLabels() call org.antlr.tool.Rule.getRuleListLabels() call org.antlr.tool.Rule.getRuleListLabels() call org.antlr.tool.Rule.getRuleListLabels() call org.antlr.tool.Rule.getRuleListLabels() call org.antlr.tool.Rule.getRuleListLabels() String decl Collection decl List Rule protected protected < if == return decl_stmt java.util.Collection < = decl_stmt java.util.List < = new < for : decl_stmt org.antlr.tool.Rule = if != && ! call Rule.getHasReturnValue() call Rule.getHasReturnValue() call Rule.getHasReturnValue() call Rule.getHasReturnValue() call Rule.getHasReturnValue() && ! call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt java.lang.String = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() Rule Token public public decl_stmt org.antlr.tool.Rule = if == return call org.antlr.tool.Rule.trackRuleReferenceInAlt(GrammarAST,int) call org.antlr.tool.Rule.trackRuleReferenceInAlt(GrammarAST,int) call org.antlr.tool.Rule.trackRuleReferenceInAlt(GrammarAST,int) call org.antlr.tool.Rule.trackRuleReferenceInAlt(GrammarAST,int) call org.antlr.tool.Rule.trackRuleReferenceInAlt(GrammarAST,int) decl_stmt org.antlr.runtime.Token = if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() Rule public public decl_stmt org.antlr.tool.Rule = if == return call org.antlr.tool.Rule.trackTokenReferenceInAlt(GrammarAST,int) call org.antlr.tool.Rule.trackTokenReferenceInAlt(GrammarAST,int) call org.antlr.tool.Rule.trackTokenReferenceInAlt(GrammarAST,int) call org.antlr.tool.Rule.trackTokenReferenceInAlt(GrammarAST,int) call org.antlr.tool.Rule.trackTokenReferenceInAlt(GrammarAST,int) if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() Rule public public decl_stmt org.antlr.tool.Rule = if != && != = public < extends extends extends < extends extends public < extends extends extends < extends extends return call org.antlr.tool.GrammarSanity.checkAllRulesForLeftRecursion() call org.antlr.tool.GrammarSanity.checkAllRulesForLeftRecursion() call org.antlr.tool.GrammarSanity.checkAllRulesForLeftRecursion() call org.antlr.tool.GrammarSanity.checkAllRulesForLeftRecursion() call org.antlr.tool.GrammarSanity.checkAllRulesForLeftRecursion() public < public < if == if != return call org.antlr.tool.GrammarSanity.checkAllRulesForLeftRecursion() call org.antlr.tool.GrammarSanity.checkAllRulesForLeftRecursion() call org.antlr.tool.GrammarSanity.checkAllRulesForLeftRecursion() call org.antlr.tool.GrammarSanity.checkAllRulesForLeftRecursion() call org.antlr.tool.GrammarSanity.checkAllRulesForLeftRecursion() return public public call org.antlr.tool.GrammarSanity.checkRuleReference(GrammarAST,GrammarAST,GrammarAST,String) call org.antlr.tool.GrammarSanity.checkRuleReference(GrammarAST,GrammarAST,GrammarAST,String) call org.antlr.tool.GrammarSanity.checkRuleReference(GrammarAST,GrammarAST,GrammarAST,String) call org.antlr.tool.GrammarSanity.checkRuleReference(GrammarAST,GrammarAST,GrammarAST,String) call org.antlr.tool.GrammarSanity.checkRuleReference(GrammarAST,GrammarAST,GrammarAST,String) BitSet public public decl_stmt org.antlr.runtime.BitSet = new call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) call java.util.BitSet.set(int,int,boolean) return == GrammarAST decl ArrayList protected protected decl_stmt java.util.ArrayList < = new < call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() while ! call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() decl_stmt org.antlr.tool.GrammarAST = call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.remove() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() - if call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() == continue if call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() >= && call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() return call decl ArrayList.addAll() call decl ArrayList.addAll() call decl ArrayList.addAll() call decl ArrayList.addAll() call decl ArrayList.addAll() call org.antlr.tool.GrammarAST.getChildrenAsArray() call org.antlr.tool.GrammarAST.getChildrenAsArray() call org.antlr.tool.GrammarAST.getChildrenAsArray() call org.antlr.tool.GrammarAST.getChildrenAsArray() call org.antlr.tool.GrammarAST.getChildrenAsArray() return public public return == || == || == || == || == || != && == Integer int public public decl_stmt java.lang.Integer if == = call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() else = call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() decl_stmt int = != : return public < public < return call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() call CompositeGrammar.tokenIDToTypeMap() String decl List public < public < decl_stmt java.util.List < = new < for = <= ++ decl_stmt java.lang.String = if call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl Set public < public < decl_stmt java.util.Set < = new < for = <= ++ call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return int String int public static public static switch case return case if + return - decl_stmt int = decl_stmt int = if == return return case decl_stmt java.lang.String = - return default: + return - String int char StringBuffer int public static public static decl_stmt java.lang.StringBuffer = new decl_stmt int = - for = < ++ decl_stmt char = if == ++ = if == ++ decl_stmt java.lang.String = + decl_stmt int = += - call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) char else if + call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) else call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) char else call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) return int decl Set public public decl_stmt java.util.Set < = for : decl_stmt int = = if >= return FileReader String BufferedReader Grammar String String public public decl_stmt java.lang.String = decl_stmt java.lang.String = + decl_stmt java.io.BufferedReader = try decl_stmt java.lang.String = call org.antlr.gunit.swingui.Tool.getLibraryFile(String) call org.antlr.gunit.swingui.Tool.getLibraryFile(String) call org.antlr.gunit.swingui.Tool.getLibraryFile(String) call org.antlr.gunit.swingui.Tool.getLibraryFile(String) call org.antlr.gunit.swingui.Tool.getLibraryFile(String) decl_stmt FileReader = new = new decl_stmt org.antlr.tool.Grammar = new = call org.antlr.tool.Grammar.parseAndBuildAST() call org.antlr.tool.Grammar.parseAndBuildAST() call org.antlr.tool.Grammar.parseAndBuildAST() call org.antlr.tool.Grammar.parseAndBuildAST() call org.antlr.tool.Grammar.parseAndBuildAST() call org.antlr.tool.Grammar.addRulesForSyntacticPredicates() call org.antlr.tool.Grammar.addRulesForSyntacticPredicates() call org.antlr.tool.Grammar.addRulesForSyntacticPredicates() call org.antlr.tool.Grammar.addRulesForSyntacticPredicates() call org.antlr.tool.Grammar.addRulesForSyntacticPredicates() if ! return if == && call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() + || call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() call Grammar.name() + return if != if == && == call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() catch finally if != try call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() catch CompositeGrammarTree protected protected decl_stmt org.antlr.tool.CompositeGrammarTree = call CompositeGrammar.delegateGrammarTreeRoot() call CompositeGrammar.delegateGrammarTreeRoot() call CompositeGrammar.delegateGrammarTreeRoot() call CompositeGrammar.delegateGrammarTreeRoot() call CompositeGrammar.delegateGrammarTreeRoot() call CompositeGrammar.delegateGrammarTreeRoot() call CompositeGrammar.delegateGrammarTreeRoot() call CompositeGrammar.delegateGrammarTreeRoot() call CompositeGrammar.delegateGrammarTreeRoot() call org.antlr.tool.CompositeGrammarTree.addChild(CompositeGrammarTree) call org.antlr.tool.CompositeGrammarTree.addChild(CompositeGrammarTree) call org.antlr.tool.CompositeGrammarTree.addChild(CompositeGrammarTree) call org.antlr.tool.CompositeGrammarTree.addChild(CompositeGrammarTree) call org.antlr.tool.CompositeGrammarTree.addChild(CompositeGrammarTree) new = FileReader int StreamTokenizer String int int BufferedReader File public public if ! return decl_stmt File = call org.antlr.gunit.swingui.Tool.getImportedVocabFile(String) call org.antlr.gunit.swingui.Tool.getImportedVocabFile(String) call org.antlr.gunit.swingui.Tool.getImportedVocabFile(String) call org.antlr.gunit.swingui.Tool.getImportedVocabFile(String) call org.antlr.gunit.swingui.Tool.getImportedVocabFile(String) try decl_stmt FileReader = new decl_stmt java.io.BufferedReader = new decl_stmt java.io.StreamTokenizer = new call java.io.StreamTokenizer.parseNumbers() call java.io.StreamTokenizer.parseNumbers() call java.io.StreamTokenizer.parseNumbers() call java.io.StreamTokenizer.parseNumbers() call java.io.StreamTokenizer.parseNumbers() call java.io.StreamTokenizer.wordChars(int,int) call java.io.StreamTokenizer.wordChars(int,int) call java.io.StreamTokenizer.wordChars(int,int) call java.io.StreamTokenizer.wordChars(int,int) call java.io.StreamTokenizer.wordChars(int,int) call java.io.StreamTokenizer.eolIsSignificant(boolean) call java.io.StreamTokenizer.eolIsSignificant(boolean) call java.io.StreamTokenizer.eolIsSignificant(boolean) call java.io.StreamTokenizer.eolIsSignificant(boolean) call java.io.StreamTokenizer.eolIsSignificant(boolean) call java.io.StreamTokenizer.slashSlashComments(boolean) call java.io.StreamTokenizer.slashSlashComments(boolean) call java.io.StreamTokenizer.slashSlashComments(boolean) call java.io.StreamTokenizer.slashSlashComments(boolean) call java.io.StreamTokenizer.slashSlashComments(boolean) call java.io.StreamTokenizer.slashStarComments(boolean) call java.io.StreamTokenizer.slashStarComments(boolean) call java.io.StreamTokenizer.slashStarComments(boolean) call java.io.StreamTokenizer.slashStarComments(boolean) call java.io.StreamTokenizer.slashStarComments(boolean) call java.io.StreamTokenizer.ordinaryChar(int) call java.io.StreamTokenizer.ordinaryChar(int) call java.io.StreamTokenizer.ordinaryChar(int) call java.io.StreamTokenizer.ordinaryChar(int) call java.io.StreamTokenizer.ordinaryChar(int) call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call StreamTokenizer.quoteChar() call java.io.StreamTokenizer.whitespaceChars(int,int) call java.io.StreamTokenizer.whitespaceChars(int,int) call java.io.StreamTokenizer.whitespaceChars(int,int) call java.io.StreamTokenizer.whitespaceChars(int,int) call java.io.StreamTokenizer.whitespaceChars(int,int) call java.io.StreamTokenizer.whitespaceChars(int,int) call java.io.StreamTokenizer.whitespaceChars(int,int) call java.io.StreamTokenizer.whitespaceChars(int,int) call java.io.StreamTokenizer.whitespaceChars(int,int) call java.io.StreamTokenizer.whitespaceChars(int,int) decl_stmt int = decl_stmt int = call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() while != decl_stmt java.lang.String if == = else if == = + + else + while call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() != = call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() continue = call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() if != + while call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() != = call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() continue = call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() if != + while call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() != = call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() continue decl_stmt int = int = call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() = ++ if != + while call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() != = call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() continue = call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call java.io.StreamTokenizer.nextToken() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() catch catch catch return int String public public decl_stmt java.lang.String decl_stmt int if == && >= && <= return else if < = call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() + else = - += if < call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() = call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() call CompositeGrammar.typeToTokenList() if != && call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() call CompositeGrammar.typeToStringLiteralList() else = return public < public < return call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() call CompositeGrammar.stringLiteralToTypeMap() public public return Object Integer public public if >= return decl_stmt java.lang.Object = if == = else if instanceof decl_stmt java.lang.Integer = = else if call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) = return public public if return if ! return if && call org.antlr.tool.CompositeGrammar.getRootGrammar() call org.antlr.tool.CompositeGrammar.getRootGrammar() call org.antlr.tool.CompositeGrammar.getRootGrammar() call org.antlr.tool.CompositeGrammar.getRootGrammar() call org.antlr.tool.CompositeGrammar.getRootGrammar() = if == = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return public public switch case return ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() case return ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() case return ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() default: return ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl Set Object String String public public < if == = return decl_stmt java.util.Set < = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() for < = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() decl_stmt java.lang.String = decl_stmt java.lang.Object = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.lang.String = if == public public return call CompositeGrammar.getOption() call CompositeGrammar.getOption() call CompositeGrammar.getOption() call CompositeGrammar.getOption() call CompositeGrammar.getOption() Object public public decl_stmt java.lang.Object = if != = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return String public public decl_stmt java.lang.String = if != return if == return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() Integer int Object GrammarAST public public decl_stmt int = decl_stmt org.antlr.tool.GrammarAST = call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() decl_stmt java.lang.Object = call org.antlr.tool.GrammarAST.getBlockOption(String) call org.antlr.tool.GrammarAST.getBlockOption(String) call org.antlr.tool.GrammarAST.getBlockOption(String) call org.antlr.tool.GrammarAST.getBlockOption(String) call org.antlr.tool.GrammarAST.getBlockOption(String) if == = call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() return if instanceof decl_stmt java.lang.Integer = = else if call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) call java.lang.Object.equals(Object) = return String NFAState public public decl_stmt org.antlr.analysis.NFAState = decl_stmt java.lang.String = if == = call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() return != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) public public return String public public decl_stmt java.lang.String = if != return call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() return Object public public decl_stmt java.lang.Object = if != return call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() call java.lang.Object.toString() return public public return String public public decl_stmt java.lang.String = if != return call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() call java.lang.String.toString() return public < public < return call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() public < extends extends public < extends extends return call org.antlr.tool.CompositeGrammar.getDelegatedRules(Grammar) call org.antlr.tool.CompositeGrammar.getDelegatedRules(Grammar) call org.antlr.tool.CompositeGrammar.getDelegatedRules(Grammar) call org.antlr.tool.CompositeGrammar.getDelegatedRules(Grammar) call org.antlr.tool.CompositeGrammar.getDelegatedRules(Grammar) public < extends extends public < extends extends return call org.antlr.tool.CompositeGrammar.getAllImportedRules(Grammar) call org.antlr.tool.CompositeGrammar.getAllImportedRules(Grammar) call org.antlr.tool.CompositeGrammar.getAllImportedRules(Grammar) call org.antlr.tool.CompositeGrammar.getAllImportedRules(Grammar) call org.antlr.tool.CompositeGrammar.getAllImportedRules(Grammar) public < public < return call org.antlr.tool.CompositeGrammar.getDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getDelegates(Grammar) public public return ! decl List decl List public < public < decl_stmt java.util.List < = new < decl_stmt java.util.List < = call org.antlr.tool.CompositeGrammar.getDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getDelegates(Grammar) if != for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public < public < return call org.antlr.tool.CompositeGrammar.getDirectDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getDirectDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getDirectDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getDirectDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getDirectDelegates(Grammar) public < public < return call org.antlr.tool.CompositeGrammar.getIndirectDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getIndirectDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getIndirectDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getIndirectDelegates(Grammar) call org.antlr.tool.CompositeGrammar.getIndirectDelegates(Grammar) public < public < return call org.antlr.tool.CompositeGrammar.getDelegators(Grammar) call org.antlr.tool.CompositeGrammar.getDelegators(Grammar) call org.antlr.tool.CompositeGrammar.getDelegators(Grammar) call org.antlr.tool.CompositeGrammar.getDelegators(Grammar) call org.antlr.tool.CompositeGrammar.getDelegators(Grammar) public public return call org.antlr.tool.CompositeGrammar.getDelegator(Grammar) call org.antlr.tool.CompositeGrammar.getDelegator(Grammar) call org.antlr.tool.CompositeGrammar.getDelegator(Grammar) call org.antlr.tool.CompositeGrammar.getDelegator(Grammar) call org.antlr.tool.CompositeGrammar.getDelegator(Grammar) public < public < return public public return == Rule public public decl_stmt org.antlr.tool.Rule = if != = = public public return Rule public public decl_stmt org.antlr.tool.Rule = if != return return Rule public public decl_stmt org.antlr.tool.Rule = if != return return Rule public public decl_stmt org.antlr.tool.Rule = if != return return public public ++ return int Decision protected protected decl_stmt int = - if >= call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() return decl_stmt Decision = call decl Vector.get() call decl Vector.get() call decl Vector.get() call decl Vector.get() call decl Vector.get() return public < public < return int Decision protected protected decl_stmt int = - if < call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() return decl_stmt Decision = new = = call decl Vector.setSize() call decl Vector.setSize() call decl Vector.setSize() call decl Vector.setSize() call decl Vector.setSize() call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() return decl List Decision public < public < decl_stmt java.util.List < = new < for = < call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() call decl Vector.size() ++ decl_stmt Decision = call decl Vector.get() call decl Vector.get() call decl Vector.get() call decl Vector.get() call decl Vector.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return Decision public public decl_stmt Decision = if == return return Decision public public decl_stmt Decision = if == return return Decision public public decl_stmt Decision = if == return return String decl List public < public < decl_stmt java.lang.String = + decl_stmt java.util.List < = new < for : call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() return public public return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() new public < public < return public public return Decision int public public decl_stmt int = for = <= ++ decl_stmt Decision = if != && call Decision.dfa() call Decision.dfa() call Decision.dfa() call Decision.dfa() call Decision.dfa() call Decision.dfa() call Decision.dfa() call Decision.dfa() call Decision.dfa() ++ return Decision GrammarAST public public decl_stmt Decision = = decl_stmt org.antlr.tool.GrammarAST = call org.antlr.tool.GrammarAST.setLookaheadDFA(DFA) call org.antlr.tool.GrammarAST.setLookaheadDFA(DFA) call org.antlr.tool.GrammarAST.setLookaheadDFA(DFA) call org.antlr.tool.GrammarAST.setLookaheadDFA(DFA) call org.antlr.tool.GrammarAST.setLookaheadDFA(DFA) Decision public public decl_stmt Decision = = Decision public public decl_stmt Decision = = public public return public public return public public if != return call CodeGenerator.target() call CodeGenerator.target() call CodeGenerator.target() call CodeGenerator.target() call CodeGenerator.target() call CodeGenerator.target() call CodeGenerator.target() call CodeGenerator.target() call CodeGenerator.target() else return public public if == return return IntSet public public if != return decl_stmt org.antlr.misc.IntSet = return String String public static public static if < + return if < && != return + + if char == && ! char if == return if == return return + char + decl_stmt java.lang.String = | decl_stmt java.lang.String = + + return IntSet public public decl_stmt org.antlr.misc.IntSet = return public public return boolean int public public decl_stmt boolean try decl_stmt int = = > catch = return Rule IntSet public public throws decl_stmt org.antlr.tool.Rule = if == return decl_stmt org.antlr.misc.IntSet = return NFAState int public public if == return decl_stmt int = decl_stmt org.antlr.analysis.NFAState = while != ++ = return NFAState Transition int public public if == || <= return decl_stmt int = decl_stmt org.antlr.analysis.NFAState = while != if == return ++ decl_stmt org.antlr.analysis.Transition = = if != = return public public return call org.antlr.analysis.LL1Analyzer.FIRST(NFAState) call org.antlr.analysis.LL1Analyzer.FIRST(NFAState) call org.antlr.analysis.LL1Analyzer.FIRST(NFAState) call org.antlr.analysis.LL1Analyzer.FIRST(NFAState) call org.antlr.analysis.LL1Analyzer.FIRST(NFAState) public public return call org.antlr.analysis.LL1Analyzer.LOOK(NFAState) call org.antlr.analysis.LL1Analyzer.LOOK(NFAState) call org.antlr.analysis.LL1Analyzer.LOOK(NFAState) call org.antlr.analysis.LL1Analyzer.LOOK(NFAState) call org.antlr.analysis.LL1Analyzer.LOOK(NFAState) public public = public public return public public return public public = public public return public public = public public return + public public return public public return String public public decl_stmt java.lang.String try = + + + + += new new catch = return ANTLRTreePrinter String public public decl_stmt ANTLRTreePrinter = new new try decl_stmt java.lang.String = call ANTLRTreePrinter.toString() call ANTLRTreePrinter.toString() call ANTLRTreePrinter.toString() call ANTLRTreePrinter.toString() call ANTLRTreePrinter.toString() catch