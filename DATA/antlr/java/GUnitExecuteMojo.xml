org.antlr.mojo.antlr3 java.util.List import java.util.Set import java.util.HashSet import java.util.ArrayList import java.util.Collections import java.io.File import java.io.IOException import java.io.Writer import java.io.FileWriter import java.io.BufferedWriter import java.net.URL import java.net.MalformedURLException import java.net.URLClassLoader import org.apache.maven.plugin.AbstractMojo import org.apache.maven.plugin.MojoExecutionException import org.apache.maven.plugin.MojoFailureException import org.apache.maven.project.MavenProject import org.apache.maven.artifact.Artifact import org.apache.maven.artifact.DependencyResolutionRequiredException import org.apache.maven.artifact.versioning.ArtifactVersion import org.apache.maven.artifact.versioning.DefaultArtifactVersion import org.apache.maven.artifact.versioning.OverConstrainedVersionException import org.codehaus.plexus.util.StringUtils import org.codehaus.plexus.util.FileUtils import org.codehaus.plexus.compiler.util.scan.mapping.SourceMapping import org.codehaus.plexus.compiler.util.scan.mapping.SuffixMapping import org.codehaus.plexus.compiler.util.scan.SourceInclusionScanner import org.codehaus.plexus.compiler.util.scan.SimpleSourceInclusionScanner import org.codehaus.plexus.compiler.util.scan.InclusionScanException import org.antlr.runtime.ANTLRFileStream import org.antlr.runtime.RecognitionException import org.antlr.gunit.GrammarInfo import org.antlr.gunit.gUnitExecutor import org.antlr.gunit.AbstractTest import org.antlr.gunit.Interp import class org.antlr.mojo.antlr3.GUnitExecuteMojo super super extends decl List decl Set String boolean String File decl Set MavenProject String File public < public < return == || call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() : public < public < return == > : Artifact public final public final throws if return decl_stmt Artifact = boolean private private throws for : decl_stmt boolean = call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if return throw new + + + + private private throws try return != new : catch throw new + + Artifact Artifact Artifact private private throws decl_stmt Artifact = decl_stmt Artifact = if call MavenProject.getCompileArtifacts() call MavenProject.getCompileArtifacts() call MavenProject.getCompileArtifacts() call MavenProject.getCompileArtifacts() call MavenProject.getCompileArtifacts() != for : call MavenProject.getCompileArtifacts() call MavenProject.getCompileArtifacts() call MavenProject.getCompileArtifacts() call MavenProject.getCompileArtifacts() call MavenProject.getCompileArtifacts() decl_stmt Artifact final final = if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call Artifact.getGroupId() call Artifact.getGroupId() call Artifact.getGroupId() call Artifact.getGroupId() call Artifact.getGroupId() if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call Artifact.getArtifactId() call Artifact.getArtifactId() call Artifact.getArtifactId() call Artifact.getArtifactId() call Artifact.getArtifactId() = break if call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call Artifact.getArtifactId() call Artifact.getArtifactId() call Artifact.getArtifactId() call Artifact.getArtifactId() call Artifact.getArtifactId() = ArtifactVersion = protected = protected throws if == return decl_stmt ArtifactVersion = if != + + + + + call ArtifactVersion.toString() call ArtifactVersion.toString() call ArtifactVersion.toString() call ArtifactVersion.toString() call ArtifactVersion.toString() + + + protected protected ArtifactVersion = protected = protected throws if == return decl_stmt ArtifactVersion = if != + + + + + call ArtifactVersion.toString() call ArtifactVersion.toString() call ArtifactVersion.toString() call ArtifactVersion.toString() call ArtifactVersion.toString() + + + decl ArrayList private private throws decl_stmt java.util.ArrayList < = new < + call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() for : try + call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() new catch throw new + + return new call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() call decl ArrayList.toArray() new call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() protected static protected static throws try return catch throw new + private < private < throws try return < call MavenProject.getTestClasspathElements() call MavenProject.getTestClasspathElements() call MavenProject.getTestClasspathElements() call MavenProject.getTestClasspathElements() call MavenProject.getTestClasspathElements() catch throw new GrammarInfo String decl ArrayList String gUnitExecutor ANTLRFileStream boolean String Result Result private private throws + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() if ! call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() decl_stmt boolean = call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() if ! decl_stmt javax.naming.spi.Result = new decl_stmt java.util.ArrayList < = new < for : decl_stmt java.lang.String final final = + try decl_stmt java.lang.String = decl_stmt org.antlr.runtime.ANTLRFileStream = new decl_stmt org.antlr.gunit.GrammarInfo = decl_stmt org.antlr.gunit.gUnitExecutor = new decl_stmt java.lang.String = call org.antlr.gunit.gUnitExecutor.execTest() call org.antlr.gunit.gUnitExecutor.execTest() call org.antlr.gunit.gUnitExecutor.execTest() call org.antlr.gunit.gUnitExecutor.execTest() call org.antlr.gunit.gUnitExecutor.execTest() new + decl_stmt javax.naming.spi.Result = new = = = call Result.render() call Result.render() call Result.render() call Result.render() call Result.render() call Result.add() call Result.add() call Result.add() call Result.add() call Result.add() for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() + + catch throw new catch throw new if ! call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() call decl ArrayList.isEmpty() + call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() call decl ArrayList.size() + for : + call Result.render() call Result.render() call Result.render() call Result.render() call Result.render() if > throw new if > throw new SourceMapping SourceInclusionScanner private < private < throws decl_stmt SourceMapping = new > decl_stmt SourceInclusionScanner = new call SourceInclusionScanner.addSourceMapping() call SourceInclusionScanner.addSourceMapping() call SourceInclusionScanner.addSourceMapping() call SourceInclusionScanner.addSourceMapping() call SourceInclusionScanner.addSourceMapping() try return call SourceInclusionScanner.getIncludedSources() call SourceInclusionScanner.getIncludedSources() call SourceInclusionScanner.getIncludedSources() call SourceInclusionScanner.getIncludedSources() call SourceInclusionScanner.getIncludedSources() catch throw new Writer private private try decl_stmt Writer = new = new try call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.write() call Writer.flush() call Writer.flush() call Writer.flush() call Writer.flush() call Writer.flush() finally try call Writer.close() call Writer.close() call Writer.close() call Writer.close() call Writer.close() catch catch public public return public public += += +=