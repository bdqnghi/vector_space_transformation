org.antlr.codegen org.antlr.Tool import org.antlr.tool.Grammar import org.stringtemplate.v4.AttributeRenderer import org.stringtemplate.v4.ST import java.io.IOException import java.util.HashMap import java.util.HashSet import java.util.Locale import java.util.Map import class org.antlr.codegen.CSharp3Target super super extends decl HashSet public public return public public return + public public return + Grammar String Object decl Map protected protected throws if ! decl_stmt org.antlr.tool.Grammar = decl_stmt java.lang.String = decl_stmt java.util.Map < = call org.antlr.tool.Grammar.getActions() call org.antlr.tool.Grammar.getActions() call org.antlr.tool.Grammar.getActions() call org.antlr.tool.Grammar.getActions() call org.antlr.tool.Grammar.getActions() decl_stmt java.lang.Object = != call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() : if != && != = if == = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new String public public decl_stmt java.lang.String = if == || == return if if call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() call decl HashSet.contains() return + return else if return call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) + call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) else if return else throw new + +