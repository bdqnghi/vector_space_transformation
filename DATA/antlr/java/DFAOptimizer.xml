org.antlr.analysis org.antlr.misc.Utils import org.antlr.tool.Grammar import java.util.HashSet import java.util.Set import class org.antlr.analysis.DFAOptimizer Grammar boolean boolean boolean boolean decl Set DFA public public for = <= call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() call org.antlr.tool.Grammar.getNumberOfDecisions() ++ decl_stmt org.antlr.runtime.DFA = call org.antlr.tool.Grammar.getLookaheadDFA(int) call org.antlr.tool.Grammar.getLookaheadDFA(int) call org.antlr.tool.Grammar.getLookaheadDFA(int) call org.antlr.tool.Grammar.getLookaheadDFA(int) call org.antlr.tool.Grammar.getLookaheadDFA(int) int protected protected if == return if && call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() decl_stmt int = if && == || == if && && > call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() call decl Set.clear() Integer Transition DFAState int protected protected decl_stmt java.lang.Integer = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt int = for = < ++ decl_stmt org.antlr.analysis.Transition = decl_stmt org.antlr.analysis.DFAState = if call DFAState.isAcceptState() call DFAState.isAcceptState() call DFAState.isAcceptState() call DFAState.isAcceptState() call DFAState.isAcceptState() && call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() == -- Integer Transition DFAState protected protected decl_stmt java.lang.Integer = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() for = < ++ decl_stmt org.antlr.analysis.Transition = decl_stmt org.antlr.analysis.DFAState = if && call DFAState.isAcceptState() call DFAState.isAcceptState() call DFAState.isAcceptState() call DFAState.isAcceptState() call DFAState.isAcceptState() && == && call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() && call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() == = call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() --