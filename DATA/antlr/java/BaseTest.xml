org.antlr.test org.antlr.Tool import org.antlr.analysis.Label import org.antlr.runtime.CommonTokenStream import org.antlr.runtime.Token import org.antlr.runtime.TokenSource import org.stringtemplate.v4.ST import org.stringtemplate.v4.STGroup import org.antlr.tool.ANTLRErrorListener import org.antlr.tool.ErrorManager import org.antlr.tool.GrammarSemanticsMessage import org.antlr.tool.Message import org.junit.Assert import org.junit.Before import org.junit.Rule import org.junit.rules.TestRule import org.junit.rules.TestWatcher import org.junit.runner.Description import javax.tools.* import java.io.* import java.lang.reflect.InvocationTargetException import java.lang.reflect.Method import java.net.MalformedURLException import java.net.URL import java.net.URLClassLoader import java.util.* import java.util.logging.Level import java.util.logging.Logger import static static org.junit.Assert.* import class org.antlr.test.BaseTest String String String String TestRule boolean Logger String String String protected protected public public throws = new + + + = new Tool protected protected decl_stmt org.antlr.gunit.swingui.Tool = new call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) return Tool protected protected decl_stmt org.antlr.gunit.swingui.Tool = new call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) return String decl JavaCompiler decl CompilationTask File decl String StandardJavaFileManager String decl Iterable decl Iterable JavaCompiler protected protected decl_stmt java.lang.String = decl_stmt java.lang.String = new + + + + decl_stmt java.lang.String = + + + + + + + + + + decl_stmt File = new decl_stmt JavaCompiler = decl_stmt StandardJavaFileManager = call JavaCompiler.getStandardFileManager() call JavaCompiler.getStandardFileManager() call JavaCompiler.getStandardFileManager() call JavaCompiler.getStandardFileManager() call JavaCompiler.getStandardFileManager() decl_stmt java.lang.Iterable < extends extends = call StandardJavaFileManager.getJavaFileObjectsFromFiles() call StandardJavaFileManager.getJavaFileObjectsFromFiles() call StandardJavaFileManager.getJavaFileObjectsFromFiles() call StandardJavaFileManager.getJavaFileObjectsFromFiles() call StandardJavaFileManager.getJavaFileObjectsFromFiles() decl_stmt java.lang.Iterable < = new + + decl_stmt CompilationTask = call JavaCompiler.getTask() call JavaCompiler.getTask() call JavaCompiler.getTask() call JavaCompiler.getTask() call JavaCompiler.getTask() decl_stmt boolean = call decl JavaCompiler.call() call decl JavaCompiler.call() call decl JavaCompiler.call() call decl JavaCompiler.call() call decl JavaCompiler.call() try call StandardJavaFileManager.close() call StandardJavaFileManager.close() call StandardJavaFileManager.close() call StandardJavaFileManager.close() call StandardJavaFileManager.close() catch return ErrorQueue decl String Tool ANTLRErrorListener Message boolean decl List protected protected decl_stmt boolean = try decl_stmt java.util.List final final final < = new < if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new decl_stmt java.lang.String final final final = new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() decl_stmt org.antlr.gunit.swingui.Tool = call org.antlr.gunit.swingui.Tool.process() call org.antlr.gunit.swingui.Tool.process() call org.antlr.gunit.swingui.Tool.process() call org.antlr.gunit.swingui.Tool.process() call org.antlr.gunit.swingui.Tool.process() decl_stmt org.antlr.tool.ANTLRErrorListener = if instanceof decl_stmt org.antlr.test.ErrorQueue = if call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() > = + for = < call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() ++ decl_stmt org.antlr.tool.Message = call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() catch = + return boolean protected protected decl_stmt boolean = return boolean boolean boolean protected protected decl_stmt boolean = decl_stmt boolean = >= || >= decl_stmt boolean = >= || >= return protected protected return boolean boolean boolean boolean protected protected decl_stmt boolean = = decl_stmt boolean = >= || >= decl_stmt boolean = >= || >= decl_stmt boolean = >= || >= return boolean boolean protected protected decl_stmt boolean = if ! return if != decl_stmt boolean if != = + if ! = = + if ! = else decl_stmt boolean = + if ! = return protected protected = return public public return PipedOutputStream Process decl String StreamVacuum PipedInputStream PipedOutputStream ClassLoader PrintStream Method PrintStream decl Class StreamVacuum PipedInputStream String String public public if try decl_stmt java.lang.ClassLoader = new new new decl_stmt java.lang.Class final final final < = < call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) call java.lang.ClassLoader.loadClass(String) decl_stmt com.sun.jdi.Method final final = call decl Class.getDeclaredMethod() call decl Class.getDeclaredMethod() call decl Class.getDeclaredMethod() call decl Class.getDeclaredMethod() call decl Class.getDeclaredMethod() decl_stmt java.io.PipedInputStream = new decl_stmt java.io.PipedInputStream = new decl_stmt PipedOutputStream = new decl_stmt PipedOutputStream = new decl_stmt java.lang.String = new decl_stmt StreamVacuum = new decl_stmt StreamVacuum = new decl_stmt java.io.PrintStream = new try decl_stmt java.io.PrintStream = try new call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) new finally finally call PipedOutputStream.close() call PipedOutputStream.close() call PipedOutputStream.close() call PipedOutputStream.close() call PipedOutputStream.close() call PipedOutputStream.close() call PipedOutputStream.close() call PipedOutputStream.close() call PipedOutputStream.close() call PipedOutputStream.close() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() decl_stmt java.lang.String = call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() if call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() > = call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() + return catch call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) catch call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) catch call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) catch call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) catch call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) catch call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) catch call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) catch call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) catch call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) call java.util.logging.Logger.log(Level,String,Object) try decl_stmt java.lang.String = new decl_stmt java.lang.String = new + + decl_stmt Process = new decl_stmt StreamVacuum = new call Process.getInputStream() call Process.getInputStream() call Process.getInputStream() call Process.getInputStream() call Process.getInputStream() decl_stmt StreamVacuum = new call Process.getErrorStream() call Process.getErrorStream() call Process.getErrorStream() call Process.getErrorStream() call Process.getErrorStream() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call StreamVacuum.start() call Process.waitFor() call Process.waitFor() call Process.waitFor() call Process.waitFor() call Process.waitFor() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() call StreamVacuum.join() decl_stmt java.lang.String = call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() if call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() > = call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() call StreamVacuum.toString() + return catch return public public if && else if else if else if == else Message Message protected protected throws decl_stmt org.antlr.tool.Message = for = < ++ decl_stmt org.antlr.tool.Message = if == = + + instanceof if != Message Message protected protected throws decl_stmt org.antlr.tool.Message = for = < ++ decl_stmt org.antlr.tool.Message = if == = + + instanceof Message Message protected protected throws decl_stmt org.antlr.tool.Message = for = < ++ decl_stmt org.antlr.tool.Message = if == = + + > + <= + public public = new String public public try decl_stmt java.lang.String = while != if call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) call java.lang.String.startsWith(String,int) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + = catch public public throws public public return protected protected if public public BufferedWriter FileWriter File protected protected try decl_stmt File = new decl_stmt FileWriter = new decl_stmt BufferedWriter = new call BufferedWriter.write() call BufferedWriter.write() call BufferedWriter.write() call BufferedWriter.write() call BufferedWriter.write() call BufferedWriter.close() call BufferedWriter.close() call BufferedWriter.close() call BufferedWriter.close() call BufferedWriter.close() call FileWriter.close() call FileWriter.close() call FileWriter.close() call FileWriter.close() call FileWriter.close() catch File protected protected decl_stmt File = new call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() call File.mkdirs() ST ST protected protected decl_stmt ST = new + + + + + + + + + + + + + + + decl_stmt ST = new + + if ! = new call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.render() call ST.render() call ST.render() call ST.render() call ST.render() ST protected protected decl_stmt ST = new + + + + + + + + + + + + + + call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.render() call ST.render() call ST.render() call ST.render() call ST.render() ST ST protected protected decl_stmt ST = new + + + + + + + + + + + + + + + + + + + + + + + + + + decl_stmt ST = new + + if ! = new call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.render() call ST.render() call ST.render() call ST.render() call ST.render() ST ST protected protected decl_stmt ST = new + + + + + + + + + + + + + + + + + + + + + + decl_stmt ST = new + + if ! = new call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.render() call ST.render() call ST.render() call ST.render() call ST.render() ST ST protected protected decl_stmt ST = new + + + + + + + + + + + + + + + + + + + + + + + + + + decl_stmt ST = new + + if ! = new call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.render() call ST.render() call ST.render() call ST.render() call ST.render() decl String File protected protected final final decl_stmt File = new decl_stmt java.lang.String = call File.list() call File.list() call File.list() call File.list() call File.list() for = != && < ++ if new + + decl String File protected protected decl_stmt File = new decl_stmt java.lang.String = call File.list() call File.list() call File.list() call File.list() call File.list() for = != && < ++ new + + File protected protected decl_stmt File = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() String decl String public public if == return decl_stmt java.lang.String = decl_stmt java.lang.String = return call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() T decl List public < < public < < < decl_stmt java.util.List < = new < for = + - < ++ decl_stmt T = if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return String decl List public < public < < decl_stmt java.util.List < = new < for < : decl_stmt java.lang.String = if >= call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() + + return decl List String StringBuilder public public decl_stmt java.lang.String = decl_stmt java.util.List < = decl_stmt java.lang.StringBuilder = new for : call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl TreeMap public < public < < + if == return decl_stmt java.util.TreeMap < = new < + call decl TreeMap.toString() call decl TreeMap.toString() call decl TreeMap.toString() call decl TreeMap.toString() call decl TreeMap.toString() return call decl TreeMap.toString() call decl TreeMap.toString() call decl TreeMap.toString() call decl TreeMap.toString() call decl TreeMap.toString()