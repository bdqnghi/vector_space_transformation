org.antlr.codegen org.antlr.Tool import org.antlr.analysis.DFA import org.antlr.analysis.* import org.antlr.grammar.v3.ANTLRLexer import org.antlr.grammar.v3.ANTLRParser import org.antlr.grammar.v3.ActionTranslator import org.antlr.grammar.v3.CodeGenTreeWalker import org.antlr.misc.BitSet import org.antlr.misc.* import org.antlr.runtime.* import org.antlr.runtime.tree.CommonTreeNodeStream import org.antlr.tool.* import org.stringtemplate.v4.* import java.io.IOException import java.io.Writer import java.util.* import class org.antlr.codegen.CodeGenerator ST boolean int int ST String int STGroup ACyclicDFACodeGenerator STGroup boolean Tool int String boolean boolean int Grammar Target String ST int boolean int int String decl Class String Target public static public static decl_stmt org.antlr.codegen.Target = decl_stmt java.lang.String = + + try decl_stmt java.lang.Class < extends extends = = call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() catch = new catch catch return STGroup STGroup String STGroup STGroup STGroup String STGroup public public decl_stmt java.lang.String = + + decl_stmt STGroup = new + + + = decl_stmt java.lang.String = call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) if != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if && != decl_stmt STGroup = new + call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() = decl_stmt STGroup = new + call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() decl_stmt STGroup if == = new + call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() else = new + call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() decl_stmt STGroup = new + call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() = = = = else decl_stmt STGroup = new + call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() decl_stmt STGroup if == = new + call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() else = new + call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() = = = else if != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) if && != decl_stmt STGroup = new + call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() = decl_stmt STGroup = new + call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() = = else decl_stmt STGroup = new + call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() = = else if && != decl_stmt STGroup = new + call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() call STGroup.importTemplates() = = = else = = DFAOptimizer boolean decl Map ST ST String boolean decl Set String CodeGenTreeWalker ST String public public if == return if return call org.antlr.codegen.Target.performGrammarAnalysis(CodeGenerator,Grammar) call org.antlr.codegen.Target.performGrammarAnalysis(CodeGenerator,Grammar) call org.antlr.codegen.Target.performGrammarAnalysis(CodeGenerator,Grammar) call org.antlr.codegen.Target.performGrammarAnalysis(CodeGenerator,Grammar) call org.antlr.codegen.Target.performGrammarAnalysis(CodeGenerator,Grammar) if return decl_stmt org.antlr.analysis.DFAOptimizer = new call org.antlr.analysis.DFAOptimizer.optimize() call org.antlr.analysis.DFAOptimizer.optimize() call org.antlr.analysis.DFAOptimizer.optimize() call org.antlr.analysis.DFAOptimizer.optimize() call org.antlr.analysis.DFAOptimizer.optimize() = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() if call STGroup.isDefined() call STGroup.isDefined() call STGroup.isDefined() call STGroup.isDefined() call STGroup.isDefined() = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() else = new call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() decl_stmt boolean = call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) != && call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) decl_stmt boolean = call org.antlr.tool.Grammar.getSyntacticPredicates() call org.antlr.tool.Grammar.getSyntacticPredicates() call org.antlr.tool.Grammar.getSyntacticPredicates() call org.antlr.tool.Grammar.getSyntacticPredicates() call org.antlr.tool.Grammar.getSyntacticPredicates() != || call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() || decl_stmt java.util.Map < < = call org.antlr.tool.Grammar.getActions() call org.antlr.tool.Grammar.getActions() call org.antlr.tool.Grammar.getActions() call org.antlr.tool.Grammar.getActions() call org.antlr.tool.Grammar.getActions() decl_stmt ST = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() if = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call org.antlr.tool.Grammar.setSynPredGateIfNotAlready(ST) call org.antlr.tool.Grammar.setSynPredGateIfNotAlready(ST) call org.antlr.tool.Grammar.setSynPredGateIfNotAlready(ST) call org.antlr.tool.Grammar.setSynPredGateIfNotAlready(ST) call org.antlr.tool.Grammar.setSynPredGateIfNotAlready(ST) call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call org.antlr.tool.Grammar.buildTemplate() call org.antlr.tool.Grammar.buildTemplate() call org.antlr.tool.Grammar.buildTemplate() call org.antlr.tool.Grammar.buildTemplate() call org.antlr.tool.Grammar.buildTemplate() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call org.antlr.tool.Grammar.buildTemplate() call org.antlr.tool.Grammar.buildTemplate() call org.antlr.tool.Grammar.buildTemplate() call org.antlr.tool.Grammar.buildTemplate() call org.antlr.tool.Grammar.buildTemplate() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call org.antlr.tool.Grammar.buildAST() call org.antlr.tool.Grammar.buildAST() call org.antlr.tool.Grammar.buildAST() call org.antlr.tool.Grammar.buildAST() call org.antlr.tool.Grammar.buildAST() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call org.antlr.tool.Grammar.buildAST() call org.antlr.tool.Grammar.buildAST() call org.antlr.tool.Grammar.buildAST() call org.antlr.tool.Grammar.buildAST() call org.antlr.tool.Grammar.buildAST() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call org.antlr.tool.Grammar.rewriteMode() call org.antlr.tool.Grammar.rewriteMode() call org.antlr.tool.Grammar.rewriteMode() call org.antlr.tool.Grammar.rewriteMode() call org.antlr.tool.Grammar.rewriteMode() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call org.antlr.tool.Grammar.rewriteMode() call org.antlr.tool.Grammar.rewriteMode() call org.antlr.tool.Grammar.rewriteMode() call org.antlr.tool.Grammar.rewriteMode() call org.antlr.tool.Grammar.rewriteMode() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() decl_stmt java.lang.String = call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call org.antlr.tool.Grammar.getOption(String) call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() || != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() || != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) && call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() if == = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() else if == || == = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() else = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call org.antlr.tool.Grammar.getDefaultActionScope(int) call org.antlr.tool.Grammar.getDefaultActionScope(int) call org.antlr.tool.Grammar.getDefaultActionScope(int) call org.antlr.tool.Grammar.getDefaultActionScope(int) call org.antlr.tool.Grammar.getDefaultActionScope(int) call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call org.antlr.tool.Grammar.getDefaultActionScope(int) call org.antlr.tool.Grammar.getDefaultActionScope(int) call org.antlr.tool.Grammar.getDefaultActionScope(int) call org.antlr.tool.Grammar.getDefaultActionScope(int) call org.antlr.tool.Grammar.getDefaultActionScope(int) decl_stmt java.lang.String = call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.tool.Grammar.getFileName() call org.antlr.tool.Grammar.getFileName() call org.antlr.tool.Grammar.getFileName() call org.antlr.tool.Grammar.getFileName() call org.antlr.tool.Grammar.getFileName() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() decl_stmt CodeGenTreeWalker = new new call org.antlr.tool.Grammar.getGrammarTree() call org.antlr.tool.Grammar.getGrammarTree() call org.antlr.tool.Grammar.getGrammarTree() call org.antlr.tool.Grammar.getGrammarTree() call org.antlr.tool.Grammar.getGrammarTree() try call CodeGenTreeWalker.grammar_() call CodeGenTreeWalker.grammar_() call CodeGenTreeWalker.grammar_() call CodeGenTreeWalker.grammar_() call CodeGenTreeWalker.grammar_() catch if != decl_stmt java.util.Set < = if call Grammar.synPredNamesUsedInDFA() call Grammar.synPredNamesUsedInDFA() call Grammar.synPredNamesUsedInDFA() call Grammar.synPredNamesUsedInDFA() call Grammar.synPredNamesUsedInDFA() call Grammar.synPredNamesUsedInDFA() call Grammar.synPredNamesUsedInDFA() call Grammar.synPredNamesUsedInDFA() call Grammar.synPredNamesUsedInDFA() > = call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() if > return if call ST.inspect() call ST.inspect() call ST.inspect() call ST.inspect() call ST.inspect() if call STGroup.isDefined() call STGroup.isDefined() call STGroup.isDefined() call STGroup.isDefined() call STGroup.isDefined() call ST.inspect() call ST.inspect() call ST.inspect() call ST.inspect() call ST.inspect() try call org.antlr.codegen.Target.genRecognizerFile(Tool,CodeGenerator,Grammar,ST) call org.antlr.codegen.Target.genRecognizerFile(Tool,CodeGenerator,Grammar,ST) call org.antlr.codegen.Target.genRecognizerFile(Tool,CodeGenerator,Grammar,ST) call org.antlr.codegen.Target.genRecognizerFile(Tool,CodeGenerator,Grammar,ST) call org.antlr.codegen.Target.genRecognizerFile(Tool,CodeGenerator,Grammar,ST) if call STGroup.isDefined() call STGroup.isDefined() call STGroup.isDefined() call STGroup.isDefined() call STGroup.isDefined() decl_stmt ST = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call org.antlr.codegen.Target.genRecognizerHeaderFile(Tool,CodeGenerator,Grammar,ST,String) call org.antlr.codegen.Target.genRecognizerHeaderFile(Tool,CodeGenerator,Grammar,ST,String) call org.antlr.codegen.Target.genRecognizerHeaderFile(Tool,CodeGenerator,Grammar,ST,String) call org.antlr.codegen.Target.genRecognizerHeaderFile(Tool,CodeGenerator,Grammar,ST,String) call org.antlr.codegen.Target.genRecognizerHeaderFile(Tool,CodeGenerator,Grammar,ST,String) call ST.render() call ST.render() call ST.render() call ST.render() call ST.render() decl_stmt ST = decl_stmt java.lang.String = if != catch return String GrammarAST decl Map protected protected < < for < < : decl_stmt java.lang.String = if ! call org.antlr.codegen.Target.isValidActionScope(int,String) call org.antlr.codegen.Target.isValidActionScope(int,String) call org.antlr.codegen.Target.isValidActionScope(int,String) call org.antlr.codegen.Target.isValidActionScope(int,String) call org.antlr.codegen.Target.isValidActionScope(int,String) decl_stmt java.util.Map < = decl_stmt org.antlr.tool.GrammarAST = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call GrammarAST.getToken() call GrammarAST.getToken() call GrammarAST.getToken() call GrammarAST.getToken() call GrammarAST.getToken() call org.antlr.tool.Grammar.getGrammarTypeString() call org.antlr.tool.Grammar.getGrammarTypeString() call org.antlr.tool.Grammar.getGrammarTypeString() call org.antlr.tool.Grammar.getGrammarTypeString() call org.antlr.tool.Grammar.getGrammarTypeString() decl Map protected protected < < for < < : decl_stmt java.util.Map < = decl List GrammarAST String String public public < decl_stmt java.lang.String = if != = for < : decl_stmt java.lang.String = decl_stmt org.antlr.tool.GrammarAST = decl_stmt java.util.List < = long decl String decl long NFAState LookaheadSet BitSet decl List public public decl_stmt org.antlr.analysis.NFAState = decl_stmt org.antlr.analysis.LookaheadSet = if != = call org.antlr.tool.Grammar.FIRST(NFAState) call org.antlr.tool.Grammar.FIRST(NFAState) call org.antlr.tool.Grammar.FIRST(NFAState) call org.antlr.tool.Grammar.FIRST(NFAState) call org.antlr.tool.Grammar.FIRST(NFAState) if == = new if call org.antlr.analysis.LookaheadSet.member(int) call org.antlr.analysis.LookaheadSet.member(int) call org.antlr.analysis.LookaheadSet.member(int) call org.antlr.analysis.LookaheadSet.member(int) call org.antlr.analysis.LookaheadSet.member(int) call org.antlr.analysis.LookaheadSet.remove(int) call org.antlr.analysis.LookaheadSet.remove(int) call org.antlr.analysis.LookaheadSet.remove(int) call org.antlr.analysis.LookaheadSet.remove(int) call org.antlr.analysis.LookaheadSet.remove(int) decl_stmt java.util.List < decl_stmt long if == = new = new < else decl_stmt org.antlr.runtime.BitSet = = call org.antlr.runtime.BitSet.toPackedArray() call org.antlr.runtime.BitSet.toPackedArray() call org.antlr.runtime.BitSet.toPackedArray() call org.antlr.runtime.BitSet.toPackedArray() call org.antlr.runtime.BitSet.toPackedArray() = call LookaheadSet.tokenTypeSet() call LookaheadSet.tokenTypeSet() call LookaheadSet.tokenTypeSet() call LookaheadSet.tokenTypeSet() call LookaheadSet.tokenTypeSet() call LookaheadSet.tokenTypeSet() call LookaheadSet.tokenTypeSet() call LookaheadSet.tokenTypeSet() call LookaheadSet.tokenTypeSet() decl_stmt java.lang.String = new for = < ++ decl_stmt long = = call org.antlr.codegen.Target.getTarget64BitStringFromValue(long) call org.antlr.codegen.Target.getTarget64BitStringFromValue(long) call org.antlr.codegen.Target.getTarget64BitStringFromValue(long) call org.antlr.codegen.Target.getTarget64BitStringFromValue(long) call org.antlr.codegen.Target.getTarget64BitStringFromValue(long) call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() ST String public public decl_stmt ST if = call ACyclicDFACodeGenerator.genFixedLookaheadDecision() call ACyclicDFACodeGenerator.genFixedLookaheadDecision() call ACyclicDFACodeGenerator.genFixedLookaheadDecision() call ACyclicDFACodeGenerator.genFixedLookaheadDecision() call ACyclicDFACodeGenerator.genFixedLookaheadDecision() else call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() decl_stmt java.lang.String = = call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) if != call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() return ST SemanticContext boolean ST ST ST Transition DFAState ST public public decl_stmt ST = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() decl_stmt boolean = decl_stmt ST = for = < ++ decl_stmt org.antlr.analysis.Transition = decl_stmt ST if call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() == = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.remove() call ST.remove() call ST.remove() call ST.remove() call ST.remove() = else = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() decl_stmt ST = call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() + call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() if ! call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() decl_stmt org.antlr.analysis.DFAState = decl_stmt org.antlr.analysis.SemanticContext = call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() if != = decl_stmt ST = call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.render() call ST.render() call ST.render() call ST.render() call ST.render() if call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() != call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() if call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() if != call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() return ST Label protected protected decl_stmt org.antlr.analysis.Label = if call org.antlr.analysis.Label.isSemanticPredicate() call org.antlr.analysis.Label.isSemanticPredicate() call org.antlr.analysis.Label.isSemanticPredicate() call org.antlr.analysis.Label.isSemanticPredicate() call org.antlr.analysis.Label.isSemanticPredicate() return if call org.antlr.analysis.Label.isSet() call org.antlr.analysis.Label.isSet() call org.antlr.analysis.Label.isSet() call org.antlr.analysis.Label.isSet() call org.antlr.analysis.Label.isSet() return call org.antlr.analysis.Label.getSet() call org.antlr.analysis.Label.getSet() call org.antlr.analysis.Label.getSet() call org.antlr.analysis.Label.getSet() call org.antlr.analysis.Label.getSet() decl_stmt ST = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call Label.getAtom() call Label.getAtom() call Label.getAtom() call Label.getAtom() call Label.getAtom() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call Label.getAtom() call Label.getAtom() call Label.getAtom() call Label.getAtom() call Label.getAtom() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() return SemanticContext DFA Label protected protected decl_stmt org.antlr.runtime.DFA = decl_stmt org.antlr.analysis.Label = decl_stmt org.antlr.analysis.SemanticContext = call org.antlr.analysis.Label.getSemanticContext() call org.antlr.analysis.Label.getSemanticContext() call org.antlr.analysis.Label.getSemanticContext() call org.antlr.analysis.Label.getSemanticContext() call org.antlr.analysis.Label.getSemanticContext() return call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) String int int IntervalSet ST ST String String Interval String ST decl Iterator ST int public public if ! instanceof throw new decl_stmt org.antlr.misc.IntervalSet = if call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() == || call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() decl_stmt ST = new = return decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = if ! = = = = decl_stmt ST = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() if call STGroup.isDefined() call STGroup.isDefined() call STGroup.isDefined() call STGroup.isDefined() call STGroup.isDefined() decl_stmt ST = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() decl_stmt java.util.Iterator < = call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() decl_stmt int = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.antlr.misc.Interval = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt int = decl_stmt int = if - < for = <= ++ call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() else decl_stmt ST = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() ++ call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() return decl_stmt java.util.Iterator < = call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() call org.antlr.misc.IntervalSet.getIntervals() decl_stmt int = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.antlr.misc.Interval = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt int = decl_stmt int = decl_stmt ST if == = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() else = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() ++ return int protected protected for : call org.antlr.tool.Grammar.getTokenIDs() call org.antlr.tool.Grammar.getTokenIDs() call org.antlr.tool.Grammar.getTokenIDs() call org.antlr.tool.Grammar.getTokenIDs() call org.antlr.tool.Grammar.getTokenIDs() decl_stmt int = call org.antlr.tool.Grammar.getTokenType(String) call org.antlr.tool.Grammar.getTokenType(String) call org.antlr.tool.Grammar.getTokenType(String) call org.antlr.tool.Grammar.getTokenType(String) call org.antlr.tool.Grammar.getTokenType(String) if == || >= String protected protected for = <= call org.antlr.tool.Grammar.getMaxTokenType() call org.antlr.tool.Grammar.getMaxTokenType() call org.antlr.tool.Grammar.getMaxTokenType() call org.antlr.tool.Grammar.getMaxTokenType() call org.antlr.tool.Grammar.getMaxTokenType() ++ decl_stmt java.lang.String = call org.antlr.tool.Grammar.getTokenDisplayName(int) call org.antlr.tool.Grammar.getTokenDisplayName(int) call org.antlr.tool.Grammar.getTokenDisplayName(int) call org.antlr.tool.Grammar.getTokenDisplayName(int) call org.antlr.tool.Grammar.getTokenDisplayName(int) if != = call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) call org.antlr.codegen.Target.getTargetStringLiteralFromString(String) String public public if == decl_stmt java.lang.String = call org.antlr.tool.Grammar.getTokenDisplayName(int) call org.antlr.tool.Grammar.getTokenDisplayName(int) call org.antlr.tool.Grammar.getTokenDisplayName(int) call org.antlr.tool.Grammar.getTokenDisplayName(int) call org.antlr.tool.Grammar.getTokenDisplayName(int) return call org.antlr.codegen.Target.getTargetCharLiteralFromANTLRCharLiteral(CodeGenerator,String) call org.antlr.codegen.Target.getTargetCharLiteralFromANTLRCharLiteral(CodeGenerator,String) call org.antlr.codegen.Target.getTargetCharLiteralFromANTLRCharLiteral(CodeGenerator,String) call org.antlr.codegen.Target.getTargetCharLiteralFromANTLRCharLiteral(CodeGenerator,String) call org.antlr.codegen.Target.getTargetCharLiteralFromANTLRCharLiteral(CodeGenerator,String) return call org.antlr.codegen.Target.getTokenTypeAsTargetLabel(CodeGenerator,int) call org.antlr.codegen.Target.getTokenTypeAsTargetLabel(CodeGenerator,int) call org.antlr.codegen.Target.getTokenTypeAsTargetLabel(CodeGenerator,int) call org.antlr.codegen.Target.getTokenTypeAsTargetLabel(CodeGenerator,int) call org.antlr.codegen.Target.getTokenTypeAsTargetLabel(CodeGenerator,int) ST int protected protected decl_stmt ST = new call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() = for : call org.antlr.tool.Grammar.getTokenIDs() call org.antlr.tool.Grammar.getTokenIDs() call org.antlr.tool.Grammar.getTokenIDs() call org.antlr.tool.Grammar.getTokenIDs() call org.antlr.tool.Grammar.getTokenIDs() decl_stmt int = call org.antlr.tool.Grammar.getTokenType(String) call org.antlr.tool.Grammar.getTokenType(String) call org.antlr.tool.Grammar.getTokenType(String) call org.antlr.tool.Grammar.getTokenType(String) call org.antlr.tool.Grammar.getTokenType(String) if >= call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() for : call org.antlr.tool.Grammar.getStringLiterals() call org.antlr.tool.Grammar.getStringLiterals() call org.antlr.tool.Grammar.getStringLiterals() call org.antlr.tool.Grammar.getStringLiterals() call org.antlr.tool.Grammar.getStringLiterals() decl_stmt int = call org.antlr.tool.Grammar.getTokenType(String) call org.antlr.tool.Grammar.getTokenType(String) call org.antlr.tool.Grammar.getTokenType(String) call org.antlr.tool.Grammar.getTokenType(String) call org.antlr.tool.Grammar.getTokenType(String) if >= call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() call ST.addAggr() return ActionTranslator decl List public < extends extends public < extends extends if == return decl_stmt ActionTranslator = new decl_stmt java.util.List < = call ActionTranslator.translateToChunks() call ActionTranslator.translateToChunks() call ActionTranslator.translateToChunks() call ActionTranslator.translateToChunks() call ActionTranslator.translateToChunks() = call org.antlr.codegen.Target.postProcessAction(List,Token) call org.antlr.codegen.Target.postProcessAction(List,Token) call org.antlr.codegen.Target.postProcessAction(List,Token) call org.antlr.codegen.Target.postProcessAction(List,Token) call org.antlr.codegen.Target.postProcessAction(List,Token) return String decl List ActionTranslator ST decl List decl List Token public < public < decl_stmt java.lang.String = decl_stmt java.util.List < = decl_stmt java.util.List < = new < for : if != decl_stmt org.antlr.runtime.Token = new decl_stmt ActionTranslator = new decl_stmt java.util.List < = call ActionTranslator.translateToChunks() call ActionTranslator.translateToChunks() call ActionTranslator.translateToChunks() call ActionTranslator.translateToChunks() call ActionTranslator.translateToChunks() = call org.antlr.codegen.Target.postProcessAction(List,Token) call org.antlr.codegen.Target.postProcessAction(List,Token) call org.antlr.codegen.Target.postProcessAction(List,Token) call org.antlr.codegen.Target.postProcessAction(List,Token) call org.antlr.codegen.Target.postProcessAction(List,Token) decl_stmt ST = new call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return return decl List public static < public static < decl_stmt java.util.List < = new < - return int int String int int public static public static < if == return - = decl_stmt int = decl_stmt int = decl_stmt int = while < && != decl_stmt int = switch case ++ while < && != if == && + < && + == ++ ++ ++ break case ++ while < && != if == && + < && + == ++ ++ ++ break case = + break case = + break case if + >= = + else ++ break case = + break default: if == && == - decl_stmt java.lang.String = call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() = + ++ break if == - && <= decl_stmt java.lang.String = if call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() > call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() call java.lang.String.trim() ++ return decl rewrite_template_return decl ANTLRParser ANTLRLexer ANTLRParser CodeGenTreeWalker GrammarAST public public decl_stmt ANTLRLexer = new new call ANTLRLexer.setFileName() call ANTLRLexer.setFileName() call ANTLRLexer.setFileName() call ANTLRLexer.setFileName() call ANTLRLexer.setFileName() call org.antlr.tool.Grammar.getFileName() call org.antlr.tool.Grammar.getFileName() call org.antlr.tool.Grammar.getFileName() call org.antlr.tool.Grammar.getFileName() call org.antlr.tool.Grammar.getFileName() decl_stmt ANTLRParser = new call ANTLRParser.setFileName() call ANTLRParser.setFileName() call ANTLRParser.setFileName() call ANTLRParser.setFileName() call ANTLRParser.setFileName() call org.antlr.tool.Grammar.getFileName() call org.antlr.tool.Grammar.getFileName() call org.antlr.tool.Grammar.getFileName() call org.antlr.tool.Grammar.getFileName() call org.antlr.tool.Grammar.getFileName() decl_stmt rewrite_template_return = try = call ANTLRParser.rewrite_template() call ANTLRParser.rewrite_template() call ANTLRParser.rewrite_template() call ANTLRParser.rewrite_template() call ANTLRParser.rewrite_template() catch catch decl_stmt org.antlr.tool.GrammarAST = call decl ANTLRParser.getTree() call decl ANTLRParser.getTree() call decl ANTLRParser.getTree() call decl ANTLRParser.getTree() call decl ANTLRParser.getTree() decl_stmt CodeGenTreeWalker = new new call GrammarAST.init() call GrammarAST.init() call GrammarAST.init() call GrammarAST.init() call GrammarAST.init() call GrammarAST.setCurrentRuleName() call GrammarAST.setCurrentRuleName() call GrammarAST.setCurrentRuleName() call GrammarAST.setCurrentRuleName() call GrammarAST.setCurrentRuleName() call GrammarAST.setOuterAltNum() call GrammarAST.setOuterAltNum() call GrammarAST.setOuterAltNum() call GrammarAST.setOuterAltNum() call GrammarAST.setOuterAltNum() decl_stmt ST = try = call GrammarAST.rewrite_template() call GrammarAST.rewrite_template() call GrammarAST.rewrite_template() call GrammarAST.rewrite_template() call GrammarAST.rewrite_template() catch return AttributeScope Rule public public decl_stmt org.antlr.tool.Rule = call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) decl_stmt org.antlr.tool.AttributeScope = call org.antlr.tool.Grammar.getGlobalScope(String) call org.antlr.tool.Grammar.getGlobalScope(String) call org.antlr.tool.Grammar.getGlobalScope(String) call org.antlr.tool.Grammar.getGlobalScope(String) call org.antlr.tool.Grammar.getGlobalScope(String) if == if != = if == else if call org.antlr.tool.AttributeScope.getAttribute(String) call org.antlr.tool.AttributeScope.getAttribute(String) call org.antlr.tool.AttributeScope.getAttribute(String) call org.antlr.tool.AttributeScope.getAttribute(String) call org.antlr.tool.AttributeScope.getAttribute(String) == Rule String decl LabelElementPair decl Grammar public public if == return decl_stmt LabelElementPair = if != || != decl_stmt java.lang.String = if != = decl_stmt org.antlr.tool.Rule = call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) decl_stmt org.antlr.tool.AttributeScope = call String.getAttributeScope() call String.getAttributeScope() call String.getAttributeScope() call String.getAttributeScope() call String.getAttributeScope() if == else if else if decl LabelElementPair decl Grammar public public if == return decl_stmt LabelElementPair = decl_stmt org.antlr.tool.AttributeScope = if != || != || else if != && else public public return public public return public public = public public = public public = if public public return ST String public public decl_stmt ST = call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() call STGroup.getInstanceOf() decl_stmt java.lang.String = call org.antlr.tool.Grammar.getRecognizerName() call org.antlr.tool.Grammar.getRecognizerName() call org.antlr.tool.Grammar.getRecognizerName() call org.antlr.tool.Grammar.getRecognizerName() call org.antlr.tool.Grammar.getRecognizerName() return + call ST.render() call ST.render() call ST.render() call ST.render() call ST.render() public public if call org.antlr.tool.Grammar.isBuiltFromString() call org.antlr.tool.Grammar.isBuiltFromString() call org.antlr.tool.Grammar.isBuiltFromString() call org.antlr.tool.Grammar.isBuiltFromString() call org.antlr.tool.Grammar.isBuiltFromString() return return + STWriter Writer public public throws decl_stmt Writer = call org.antlr.gunit.swingui.Tool.getOutputFile(Grammar,String) call org.antlr.gunit.swingui.Tool.getOutputFile(Grammar,String) call org.antlr.gunit.swingui.Tool.getOutputFile(Grammar,String) call org.antlr.gunit.swingui.Tool.getOutputFile(Grammar,String) call org.antlr.gunit.swingui.Tool.getOutputFile(Grammar,String) decl_stmt STWriter = new call STWriter.setLineWidth() call STWriter.setLineWidth() call STWriter.setLineWidth() call STWriter.setLineWidth() call STWriter.setLineWidth() call Writer.close() call Writer.close() call Writer.close() call Writer.close() call Writer.close() int Transition int protected protected if ! return decl_stmt int = for = < ++ decl_stmt org.antlr.analysis.Transition = if call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() return if call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() == decl_stmt int = if == return if != return += call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() if < || > return return public public return new ++