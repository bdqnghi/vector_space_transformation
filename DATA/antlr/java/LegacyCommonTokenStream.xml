org.antlr.runtime java.util.* import class org.antlr.runtime.LegacyCommonTokenStream super super implements TokenSource decl Set boolean decl List int int decl Map int int public public = call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() call decl List.clear() = - = int Integer Token boolean protected protected decl_stmt int = decl_stmt org.antlr.runtime.Token = call org.antlr.runtime.TokenSource.nextToken() call org.antlr.runtime.TokenSource.nextToken() call org.antlr.runtime.TokenSource.nextToken() call org.antlr.runtime.TokenSource.nextToken() call org.antlr.runtime.TokenSource.nextToken() while != && call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() != decl_stmt boolean = if != decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() if != call org.antlr.runtime.Token.setChannel(int) call org.antlr.runtime.Token.setChannel(int) call org.antlr.runtime.Token.setChannel(int) call org.antlr.runtime.Token.setChannel(int) call org.antlr.runtime.Token.setChannel(int) if != && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() new call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() = else if && call Token.getChannel() call Token.getChannel() call Token.getChannel() call Token.getChannel() call Token.getChannel() != = if ! call org.antlr.runtime.Token.setTokenIndex(int) call org.antlr.runtime.Token.setTokenIndex(int) call org.antlr.runtime.Token.setTokenIndex(int) call org.antlr.runtime.Token.setTokenIndex(int) call org.antlr.runtime.Token.setTokenIndex(int) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() ++ = call org.antlr.runtime.TokenSource.nextToken() call org.antlr.runtime.TokenSource.nextToken() call org.antlr.runtime.TokenSource.nextToken() call org.antlr.runtime.TokenSource.nextToken() call org.antlr.runtime.TokenSource.nextToken() = = public public if < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ = int protected protected decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() while < && call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() != ++ return protected protected while >= && call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() != -- return public public if == = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public if == = new < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() public public = public < extends extends public < extends extends if == - return public < extends extends public < extends extends return decl List Token public < extends extends public < extends extends if == - if >= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - if < = if > return decl_stmt java.util.List < = new < for = <= ++ decl_stmt org.antlr.runtime.Token = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if == || call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() = return public < extends extends public < extends extends < return new public < extends extends public < extends extends return int int public public if == - if == return if < return - if + - >= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - decl_stmt int = decl_stmt int = while < = + ++ if >= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - if > = return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() int int protected protected if == - if == return if - < return decl_stmt int = decl_stmt int = while <= = - ++ if < return return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() public public return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() public < extends extends public < extends extends if == - if < || < return return call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() public public return public public if == - = return public public public public return call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() public public return public public return public public public public public public = = public public = public public return public public return public public if == - return call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - StringBuilder Token public public if < || < return if == - if >= call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - decl_stmt java.lang.StringBuilder = new for = <= ++ decl_stmt org.antlr.runtime.Token = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.antlr.runtime.Token.getText() call org.antlr.runtime.Token.getText() call org.antlr.runtime.Token.getText() call org.antlr.runtime.Token.getText() call org.antlr.runtime.Token.getText() return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public if != && != return return