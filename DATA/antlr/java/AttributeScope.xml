org.antlr.tool org.antlr.codegen.CodeGenerator import org.antlr.runtime.Token import java.util.* import class org.antlr.tool.AttributeScope Grammar String boolean boolean decl LinkedHashMap AttributeScope boolean boolean boolean Token decl LinkedHashMap boolean public public if return + else if return + return decl List Attribute public public decl_stmt java.util.List < = new < - for : decl_stmt org.antlr.tool.Attribute = new if ! && != = call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() public public call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() new GrammarAST String public final public final decl_stmt java.lang.String = decl_stmt org.antlr.tool.GrammarAST = call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() if != else call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() call decl LinkedHashMap.put() public public return call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() call decl LinkedHashMap.get() decl List public < public < decl_stmt java.util.List < = new < call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() call decl LinkedHashMap.values() return decl Set decl Set public < public < if == || == || == return decl_stmt java.util.Set < = new < decl_stmt java.util.Set < = call decl LinkedHashMap.keySet() call decl LinkedHashMap.keySet() call decl LinkedHashMap.keySet() call decl LinkedHashMap.keySet() call decl LinkedHashMap.keySet() for : if != call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() return return public public return == : call decl LinkedHashMap.size() call decl LinkedHashMap.size() call decl LinkedHashMap.size() call decl LinkedHashMap.size() call decl LinkedHashMap.size() public public return : + + +