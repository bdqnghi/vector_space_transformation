org.antlr.analysis org.antlr.misc.OrderedHashSet import org.antlr.misc.Utils import org.antlr.runtime.Token import org.antlr.tool.ErrorManager import java.util.* import class org.antlr.analysis.NFAToDFAConverter decl NFAContext decl List boolean boolean DFA boolean int DFAState public public = while call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > && ! call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() decl_stmt org.antlr.analysis.DFAState = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if + + + call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() + decl_stmt int = call org.antlr.runtime.DFA.getUserMaxLookahead() call org.antlr.runtime.DFA.getUserMaxLookahead() call org.antlr.runtime.DFA.getUserMaxLookahead() call org.antlr.runtime.DFA.getUserMaxLookahead() call org.antlr.runtime.DFA.getUserMaxLookahead() if > && == call org.antlr.analysis.DFAState.getLookaheadDepth() call org.antlr.analysis.DFAState.getLookaheadDepth() call org.antlr.analysis.DFAState.getLookaheadDepth() call org.antlr.analysis.DFAState.getLookaheadDepth() call org.antlr.analysis.DFAState.getLookaheadDepth() if call org.antlr.analysis.DFAState.isResolvedWithPredicates() call org.antlr.analysis.DFAState.isResolvedWithPredicates() call org.antlr.analysis.DFAState.isResolvedWithPredicates() call org.antlr.analysis.DFAState.isResolvedWithPredicates() call org.antlr.analysis.DFAState.isResolvedWithPredicates() else call DFAState.setAcceptState() call DFAState.setAcceptState() call DFAState.setAcceptState() call DFAState.setAcceptState() call DFAState.setAcceptState() else call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call org.antlr.runtime.DFA.findAllGatedSynPredsUsedInDFAAcceptStates() call org.antlr.runtime.DFA.findAllGatedSynPredsUsedInDFAAcceptStates() call org.antlr.runtime.DFA.findAllGatedSynPredsUsedInDFAAcceptStates() call org.antlr.runtime.DFA.findAllGatedSynPredsUsedInDFAAcceptStates() call org.antlr.runtime.DFA.findAllGatedSynPredsUsedInDFAAcceptStates() NFAContext int int int DFAState NFAState protected protected decl_stmt org.antlr.analysis.NFAState = decl_stmt org.antlr.analysis.DFAState = call org.antlr.runtime.DFA.newState() call org.antlr.runtime.DFA.newState() call org.antlr.runtime.DFA.newState() call org.antlr.runtime.DFA.newState() call org.antlr.runtime.DFA.newState() = decl_stmt int = decl_stmt int = while != decl_stmt org.antlr.analysis.NFAContext = if == && call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() == decl_stmt int = call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() = = else ++ ++ if == break = call org.antlr.runtime.DFA.addState(DFAState) call org.antlr.runtime.DFA.addState(DFAState) call org.antlr.runtime.DFA.addState(DFAState) call org.antlr.runtime.DFA.addState(DFAState) call org.antlr.runtime.DFA.addState(DFAState) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = return DFAState Label decl OrderedHashSet Label decl Map int int DFAState int boolean protected protected decl_stmt org.antlr.misc.OrderedHashSet < = decl_stmt org.antlr.analysis.Label = new decl_stmt boolean = != && call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() if ! call DFA.isGreedy() call DFA.isGreedy() call DFA.isGreedy() call DFA.isGreedy() call DFA.isGreedy() && return decl_stmt int = decl_stmt java.util.Map < = new < decl_stmt int = if != = call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() for = < ++ decl_stmt org.antlr.analysis.Label = call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() decl_stmt org.antlr.analysis.DFAState = if + + + + + call org.antlr.analysis.Label.toString() call org.antlr.analysis.Label.toString() call org.antlr.analysis.Label.toString() call org.antlr.analysis.Label.toString() call org.antlr.analysis.Label.toString() + + if == continue if call org.antlr.analysis.DFAState.getUniqueAlt() call org.antlr.analysis.DFAState.getUniqueAlt() call org.antlr.analysis.DFAState.getUniqueAlt() call org.antlr.analysis.DFAState.getUniqueAlt() call org.antlr.analysis.DFAState.getUniqueAlt() == decl_stmt org.antlr.analysis.DFAState = += call org.antlr.analysis.DFAState.setLookaheadDepth(int) call org.antlr.analysis.DFAState.setLookaheadDepth(int) call org.antlr.analysis.DFAState.setLookaheadDepth(int) call org.antlr.analysis.DFAState.setLookaheadDepth(int) call org.antlr.analysis.DFAState.setLookaheadDepth(int) + if ! && == call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() decl_stmt int = call org.antlr.runtime.DFA.setAcceptState(int,DFAState) call org.antlr.runtime.DFA.setAcceptState(int,DFAState) call org.antlr.runtime.DFA.setAcceptState(int,DFAState) call org.antlr.runtime.DFA.setAcceptState(int,DFAState) call org.antlr.runtime.DFA.setAcceptState(int,DFAState) if Transition Transition Integer int int protected static protected static < decl_stmt int = if decl_stmt java.lang.Integer = decl_stmt org.antlr.analysis.Transition = if != if == = new else if call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() != call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() else = = decl_stmt int = decl_stmt org.antlr.analysis.Transition = else = return decl List NFAConfiguration int public public if + + decl_stmt java.util.List < = new < call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if continue call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() = RuleClosureTransition SemanticContext Transition NFAState NFAState boolean NFAState int NFAConfiguration SemanticContext int Transition NFAContext NFAState RuleClosureTransition public public if + + + + + + + + + decl_stmt org.antlr.analysis.NFAConfiguration = new if if + + + + + + return decl_stmt org.antlr.analysis.Transition = if instanceof decl_stmt int = if == && == if > = throw new if >= = if + + return decl_stmt RuleClosureTransition = decl_stmt org.antlr.analysis.NFAContext = new decl_stmt org.antlr.analysis.NFAState = else if && != decl_stmt org.antlr.analysis.NFAState = decl_stmt RuleClosureTransition = decl_stmt org.antlr.analysis.NFAState = decl_stmt org.antlr.analysis.NFAContext = else if != && call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() decl_stmt boolean = if call org.antlr.analysis.Transition.isAction() call org.antlr.analysis.Transition.isAction() call org.antlr.analysis.Transition.isAction() call org.antlr.analysis.Transition.isAction() call org.antlr.analysis.Transition.isAction() && = else if != && call org.antlr.analysis.Transition.isSemanticPredicate() call org.antlr.analysis.Transition.isSemanticPredicate() call org.antlr.analysis.Transition.isSemanticPredicate() call org.antlr.analysis.Transition.isSemanticPredicate() call org.antlr.analysis.Transition.isSemanticPredicate() decl_stmt org.antlr.analysis.SemanticContext = call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() if if = else = decl_stmt org.antlr.analysis.SemanticContext = if decl_stmt int = call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() decl_stmt org.antlr.analysis.NFAState = call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() if ! call org.antlr.analysis.SemanticContext.isSyntacticPredicate() call org.antlr.analysis.SemanticContext.isSyntacticPredicate() call org.antlr.analysis.SemanticContext.isSyntacticPredicate() call org.antlr.analysis.SemanticContext.isSyntacticPredicate() call org.antlr.analysis.SemanticContext.isSyntacticPredicate() || == = decl_stmt org.antlr.analysis.Transition = if != && call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() public static public static return NFAConfiguration Label int NFAConfiguration NFAState Transition DFAState decl List public public decl_stmt org.antlr.analysis.DFAState = call org.antlr.runtime.DFA.newState() call org.antlr.runtime.DFA.newState() call org.antlr.runtime.DFA.newState() call org.antlr.runtime.DFA.newState() call org.antlr.runtime.DFA.newState() decl_stmt java.util.List < = decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if || continue decl_stmt org.antlr.analysis.NFAState = call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() decl_stmt org.antlr.analysis.Transition = if == || ! continue decl_stmt org.antlr.analysis.Label = if != && == continue if decl_stmt org.antlr.analysis.NFAConfiguration = call org.antlr.analysis.DFAState.addNFAConfiguration(NFAState,NFAConfiguration) call org.antlr.analysis.DFAState.addNFAConfiguration(NFAState,NFAConfiguration) call org.antlr.analysis.DFAState.addNFAConfiguration(NFAState,NFAConfiguration) call org.antlr.analysis.DFAState.addNFAConfiguration(NFAState,NFAConfiguration) call org.antlr.analysis.DFAState.addNFAConfiguration(NFAState,NFAConfiguration) if call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() call DFAState.nfaConfigurations() == call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) = return NFAConfiguration Label int NFAState Transition Label protected protected decl_stmt org.antlr.analysis.Label = new decl_stmt int = for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = if || continue decl_stmt org.antlr.analysis.NFAState = call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() decl_stmt org.antlr.analysis.Transition = decl_stmt org.antlr.analysis.Label = if call org.antlr.analysis.Label.equals(Object) call org.antlr.analysis.Label.equals(Object) call org.antlr.analysis.Label.equals(Object) call org.antlr.analysis.Label.equals(Object) call org.antlr.analysis.Label.equals(Object) return int DFAState protected protected decl_stmt org.antlr.analysis.DFAState = call org.antlr.runtime.DFA.addState(DFAState) call org.antlr.runtime.DFA.addState(DFAState) call org.antlr.runtime.DFA.addState(DFAState) call org.antlr.runtime.DFA.addState(DFAState) call org.antlr.runtime.DFA.addState(DFAState) if != call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) return decl_stmt int = if != = else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return DFAState SemanticContext SemanticContext protected protected if && == && ! && ! decl_stmt org.antlr.analysis.DFAState = call org.antlr.runtime.DFA.getAcceptState(int) call org.antlr.runtime.DFA.getAcceptState(int) call org.antlr.runtime.DFA.getAcceptState(int) call org.antlr.runtime.DFA.getAcceptState(int) call org.antlr.runtime.DFA.getAcceptState(int) if != decl_stmt org.antlr.analysis.SemanticContext = decl_stmt org.antlr.analysis.SemanticContext = call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() if == && == || != && != && call org.antlr.analysis.SemanticContext.equals(Object) call org.antlr.analysis.SemanticContext.equals(Object) call org.antlr.analysis.SemanticContext.equals(Object) call org.antlr.analysis.SemanticContext.equals(Object) call org.antlr.analysis.SemanticContext.equals(Object) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.removeState(DFAState) call org.antlr.runtime.DFA.removeState(DFAState) call org.antlr.runtime.DFA.removeState(DFAState) call org.antlr.runtime.DFA.removeState(DFAState) call org.antlr.runtime.DFA.removeState(DFAState) = return call org.antlr.runtime.DFA.setAcceptState(int,DFAState) call org.antlr.runtime.DFA.setAcceptState(int,DFAState) call org.antlr.runtime.DFA.setAcceptState(int,DFAState) call org.antlr.runtime.DFA.setAcceptState(int,DFAState) call org.antlr.runtime.DFA.setAcceptState(int,DFAState) return boolean decl Set decl Set NFAConfiguration boolean NFAState public public if + decl_stmt boolean = decl_stmt java.util.Set < = if && != + decl_stmt org.antlr.analysis.NFAConfiguration = decl_stmt org.antlr.analysis.NFAState = call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() if call org.antlr.analysis.NFAState.isEOTTargetState() call org.antlr.analysis.NFAState.isEOTTargetState() call org.antlr.analysis.NFAState.isEOTTargetState() call org.antlr.analysis.NFAState.isEOTTargetState() call org.antlr.analysis.NFAState.isEOTTargetState() decl_stmt java.util.Set < = if != && call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > = if call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() = if ! && == return if ! && ! call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() decl_stmt boolean = if if + + = call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() return int int protected protected < decl_stmt int if call DFA.isGreedy() call DFA.isGreedy() call DFA.isGreedy() call DFA.isGreedy() call DFA.isGreedy() = else decl_stmt int = call org.antlr.runtime.DFA.getNumberOfAlts() call org.antlr.runtime.DFA.getNumberOfAlts() call org.antlr.runtime.DFA.getNumberOfAlts() call org.antlr.runtime.DFA.getNumberOfAlts() call org.antlr.runtime.DFA.getNumberOfAlts() if = else = return int protected protected < decl_stmt int if != = else = return int protected protected < decl_stmt int = call org.antlr.runtime.DFA.getNumberOfAlts() call org.antlr.runtime.DFA.getNumberOfAlts() call org.antlr.runtime.DFA.getNumberOfAlts() call org.antlr.runtime.DFA.getNumberOfAlts() call org.antlr.runtime.DFA.getNumberOfAlts() return NFAConfiguration int protected static protected static < decl_stmt int = for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = if != if == || = int int protected static protected static < decl_stmt int = for : decl_stmt int = if < = return int decl BitSet decl org decl BitSet decl misc decl antlr SemanticContext decl org decl Map protected protected < decl_stmt java.util.Map < = if call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() call decl Map.isEmpty() return call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() if - call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() > return if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == - decl_stmt org.antlr.runtime.BitSet = decl_stmt org.antlr.runtime.BitSet = decl_stmt int = call decl org.subtract() call decl org.subtract() call decl org.subtract() call decl org.subtract() call decl org.subtract() decl_stmt org.antlr.analysis.SemanticContext if == = new else decl_stmt org.antlr.analysis.SemanticContext = if call decl org.isSyntacticPredicate() call decl org.isSyntacticPredicate() call decl org.isSyntacticPredicate() call decl org.isSyntacticPredicate() call decl org.isSyntacticPredicate() = new else = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl_stmt int = for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = if == = if call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() == if decl_stmt int = for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = decl_stmt org.antlr.analysis.SemanticContext = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != = = call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() if call org.antlr.analysis.SemanticContext.isSyntacticPredicate() call org.antlr.analysis.SemanticContext.isSyntacticPredicate() call org.antlr.analysis.SemanticContext.isSyntacticPredicate() call org.antlr.analysis.SemanticContext.isSyntacticPredicate() call org.antlr.analysis.SemanticContext.isSyntacticPredicate() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() else if = return return decl Set Integer int decl Set decl List decl Map decl Set decl Map NFAState SemanticContext decl Set NFAConfiguration decl Map protected < protected < < decl_stmt java.util.Map < = new < decl_stmt java.util.Map < < = new < < for : call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < decl_stmt java.util.Map < < = new < < decl_stmt java.util.Set < = new < decl_stmt int = for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = decl_stmt java.lang.Integer = if if != decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt java.util.List < = new < for : decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() continue decl_stmt org.antlr.analysis.SemanticContext = for : = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = decl_stmt java.lang.Integer = if call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() call decl List.contains() && == decl_stmt org.antlr.analysis.NFAState = call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() if != && != if == || == else decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() call DFA.probe() return SemanticContext SemanticContext decl Iterator protected static protected static < decl_stmt java.util.Iterator < decl_stmt org.antlr.analysis.SemanticContext = = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.antlr.analysis.SemanticContext = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() if == = else = return decl List NFAConfiguration int DFAState DFAState decl List protected protected decl_stmt java.util.List < = new < decl_stmt int = for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new < public public if < return - else if > return return decl_stmt java.util.List < = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.antlr.analysis.DFAState = if == = call org.antlr.runtime.DFA.newState() call org.antlr.runtime.DFA.newState() call org.antlr.runtime.DFA.newState() call org.antlr.runtime.DFA.newState() call org.antlr.runtime.DFA.newState() call org.antlr.analysis.DFAState.addNFAConfiguration(NFAState,NFAConfiguration) call org.antlr.analysis.DFAState.addNFAConfiguration(NFAState,NFAConfiguration) call org.antlr.analysis.DFAState.addNFAConfiguration(NFAState,NFAConfiguration) call org.antlr.analysis.DFAState.addNFAConfiguration(NFAState,NFAConfiguration) call org.antlr.analysis.DFAState.addNFAConfiguration(NFAState,NFAConfiguration) call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFAState.setAcceptState() call DFAState.setAcceptState() call DFAState.setAcceptState() call DFAState.setAcceptState() call DFAState.setAcceptState() call org.antlr.runtime.DFA.setAcceptState(int,DFAState) call org.antlr.runtime.DFA.setAcceptState(int,DFAState) call org.antlr.runtime.DFA.setAcceptState(int,DFAState) call org.antlr.runtime.DFA.setAcceptState(int,DFAState) call org.antlr.runtime.DFA.setAcceptState(int,DFAState) decl_stmt org.antlr.analysis.DFAState = call org.antlr.runtime.DFA.addState(DFAState) call org.antlr.runtime.DFA.addState(DFAState) call org.antlr.runtime.DFA.addState(DFAState) call org.antlr.runtime.DFA.addState(DFAState) call org.antlr.runtime.DFA.addState(DFAState) if != call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) call org.antlr.runtime.DFA.setState(int,DFAState) = new public public if < return - else if > return return int protected protected = new for = < ++ decl_stmt int = + = new int Integer int public static public static < if == return decl_stmt int = decl_stmt int = for : ++ decl_stmt java.lang.Integer = if == = continue if > = return