org.antlr.misc org.antlr.analysis.Label import org.antlr.tool.Grammar import java.util.ArrayList import java.util.Iterator import java.util.List import java.util.ListIterator import class org.antlr.misc.IntervalSet super super implements decl List IntervalSet IntervalSet public static public static decl_stmt org.antlr.misc.IntervalSet = new call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) return IntervalSet public static public static decl_stmt org.antlr.misc.IntervalSet = new call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) return public public public public Interval Interval Interval protected protected if < return for < = call decl List.listIterator() call decl List.listIterator() call decl List.listIterator() call decl List.listIterator() call decl List.listIterator() decl_stmt org.antlr.misc.Interval = if return if || ! decl_stmt org.antlr.misc.Interval = while decl_stmt org.antlr.misc.Interval = if ! call org.antlr.misc.Interval.adjacent(Interval) call org.antlr.misc.Interval.adjacent(Interval) call org.antlr.misc.Interval.adjacent(Interval) call org.antlr.misc.Interval.adjacent(Interval) call org.antlr.misc.Interval.adjacent(Interval) && call org.antlr.misc.Interval.disjoint(Interval) call org.antlr.misc.Interval.disjoint(Interval) call org.antlr.misc.Interval.disjoint(Interval) call org.antlr.misc.Interval.disjoint(Interval) call org.antlr.misc.Interval.disjoint(Interval) break call org.antlr.misc.Interval.union(Interval) call org.antlr.misc.Interval.union(Interval) call org.antlr.misc.Interval.union(Interval) call org.antlr.misc.Interval.union(Interval) call org.antlr.misc.Interval.union(Interval) return if return call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() Interval IntervalSet int public public if == return if ! instanceof throw new + + decl_stmt org.antlr.misc.IntervalSet = decl_stmt int = call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() for = < ++ decl_stmt org.antlr.misc.Interval = call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() call IntervalSet.intervals() public public return IntervalSet Interval int IntervalSet int Interval IntervalSet IntervalSet Interval Interval public public if == return if ! instanceof throw new + + decl_stmt org.antlr.misc.IntervalSet = decl_stmt int = call org.antlr.misc.IntervalSet.getMaxElement() call org.antlr.misc.IntervalSet.getMaxElement() call org.antlr.misc.IntervalSet.getMaxElement() call org.antlr.misc.IntervalSet.getMaxElement() call org.antlr.misc.IntervalSet.getMaxElement() decl_stmt org.antlr.misc.IntervalSet = new decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if == return decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if > decl_stmt org.antlr.misc.IntervalSet = - decl_stmt org.antlr.misc.IntervalSet = call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) for = < ++ decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() - decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.antlr.misc.IntervalSet = + - decl_stmt org.antlr.misc.IntervalSet = call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() - if < decl_stmt org.antlr.misc.IntervalSet = + decl_stmt org.antlr.misc.IntervalSet = call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.and(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) return public public return IntervalSet public public decl_stmt org.antlr.misc.IntervalSet = new call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) call org.antlr.misc.IntervalSet.addAll(IntSet) return decl List int int int Interval decl List Interval int IntervalSet public public if == return decl_stmt java.util.List < = decl_stmt java.util.List < = decl_stmt org.antlr.misc.IntervalSet = decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = decl_stmt int = while < && < decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if call org.antlr.misc.Interval.startsBeforeDisjoint(Interval) call org.antlr.misc.Interval.startsBeforeDisjoint(Interval) call org.antlr.misc.Interval.startsBeforeDisjoint(Interval) call org.antlr.misc.Interval.startsBeforeDisjoint(Interval) call org.antlr.misc.Interval.startsBeforeDisjoint(Interval) ++ else if call org.antlr.misc.Interval.startsBeforeDisjoint(Interval) call org.antlr.misc.Interval.startsBeforeDisjoint(Interval) call org.antlr.misc.Interval.startsBeforeDisjoint(Interval) call org.antlr.misc.Interval.startsBeforeDisjoint(Interval) call org.antlr.misc.Interval.startsBeforeDisjoint(Interval) ++ else if call org.antlr.misc.Interval.properlyContains(Interval) call org.antlr.misc.Interval.properlyContains(Interval) call org.antlr.misc.Interval.properlyContains(Interval) call org.antlr.misc.Interval.properlyContains(Interval) call org.antlr.misc.Interval.properlyContains(Interval) if == = new call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.Interval.intersection(Interval) call org.antlr.misc.Interval.intersection(Interval) call org.antlr.misc.Interval.intersection(Interval) call org.antlr.misc.Interval.intersection(Interval) call org.antlr.misc.Interval.intersection(Interval) ++ else if call org.antlr.misc.Interval.properlyContains(Interval) call org.antlr.misc.Interval.properlyContains(Interval) call org.antlr.misc.Interval.properlyContains(Interval) call org.antlr.misc.Interval.properlyContains(Interval) call org.antlr.misc.Interval.properlyContains(Interval) if == = new call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.Interval.intersection(Interval) call org.antlr.misc.Interval.intersection(Interval) call org.antlr.misc.Interval.intersection(Interval) call org.antlr.misc.Interval.intersection(Interval) call org.antlr.misc.Interval.intersection(Interval) ++ else if ! call org.antlr.misc.Interval.disjoint(Interval) call org.antlr.misc.Interval.disjoint(Interval) call org.antlr.misc.Interval.disjoint(Interval) call org.antlr.misc.Interval.disjoint(Interval) call org.antlr.misc.Interval.disjoint(Interval) if == = new call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.IntervalSet.add(Interval) call org.antlr.misc.Interval.intersection(Interval) call org.antlr.misc.Interval.intersection(Interval) call org.antlr.misc.Interval.intersection(Interval) call org.antlr.misc.Interval.intersection(Interval) call org.antlr.misc.Interval.intersection(Interval) if call org.antlr.misc.Interval.startsAfterNonDisjoint(Interval) call org.antlr.misc.Interval.startsAfterNonDisjoint(Interval) call org.antlr.misc.Interval.startsAfterNonDisjoint(Interval) call org.antlr.misc.Interval.startsAfterNonDisjoint(Interval) call org.antlr.misc.Interval.startsAfterNonDisjoint(Interval) ++ else if call org.antlr.misc.Interval.startsAfterNonDisjoint(Interval) call org.antlr.misc.Interval.startsAfterNonDisjoint(Interval) call org.antlr.misc.Interval.startsAfterNonDisjoint(Interval) call org.antlr.misc.Interval.startsAfterNonDisjoint(Interval) call org.antlr.misc.Interval.startsAfterNonDisjoint(Interval) ++ if == return new return Interval int int int public public decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt int = decl_stmt int = if < break if >= && <= return return public public return == || call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() Interval public public if != && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if == return return Interval public public if return decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - return Interval int int int public public if return decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt int = decl_stmt int = for = <= ++ if >= return return public < public < return IntervalSet public public if ! instanceof return decl_stmt org.antlr.misc.IntervalSet = return public public return Interval int int StringBuilder decl Iterator public public decl_stmt java.lang.StringBuilder = new if == || return if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() decl_stmt org.antlr.misc.Interval = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt int = decl_stmt int = if == if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) else call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() Interval Interval int int public public decl_stmt int = decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() if == decl_stmt org.antlr.misc.Interval = return - + for = < ++ decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() += - + return Interval int int decl List int public < public < decl_stmt java.util.List < = new < decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt int = decl_stmt int = for = <= ++ call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return Interval int int int int public public decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = for = < ++ decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt int = decl_stmt int = for = <= ++ if == return ++ return - int int Interval int int decl int public public decl_stmt int = new decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() decl_stmt int = for = < ++ decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt int = decl_stmt int = for = <= ++ = ++ return decl runtime decl BitSet decl org int decl antlr public public decl_stmt org.antlr.runtime.BitSet = new + decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ decl_stmt org.antlr.misc.Interval = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt int = decl_stmt int = for = <= ++ call decl org.add() call decl org.add() call decl org.add() call decl org.add() call decl org.add() return public public throw new