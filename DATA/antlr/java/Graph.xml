org.antlr.misc java.util.* import class decl Map public public < if == = new < < if ! public public return decl Node decl Node public public decl_stmt sun.tools.tree.Node < = decl_stmt sun.tools.tree.Node < = call decl Node.addEdge() call decl Node.addEdge() call decl Node.addEdge() call decl Node.addEdge() call decl Node.addEdge() decl Node decl Node protected < protected < decl_stmt sun.tools.tree.Node < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return decl_stmt sun.tools.tree.Node < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return decl Set decl Node decl ArrayList public < public < decl_stmt java.util.Set < < = new < < decl_stmt java.util.ArrayList < = new < while call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() < call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() decl_stmt sun.tools.tree.Node < = for < : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() = if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() break return public public < < < < if return if != for < :