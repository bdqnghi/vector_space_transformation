org.antlr.test org.antlr.Tool import org.antlr.analysis.DFA import org.antlr.analysis.DecisionProbe import org.antlr.analysis.Label import org.antlr.codegen.CodeGenerator import org.antlr.misc.BitSet import org.antlr.tool.* import org.junit.Test import java.util.* import static static org.junit.Assert.* import class org.antlr.test.TestDFAConversion super super extends String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = decl_stmt int = new decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = new decl_stmt int = decl List Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.util.List < = int Grammar decl List public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.util.List < = decl_stmt int = int Grammar decl List public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.util.List < = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + + + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = decl List Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + decl_stmt java.util.List < = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + decl_stmt java.lang.String = + + + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + decl_stmt java.lang.String = + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + decl_stmt java.lang.String = + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + decl_stmt java.lang.String = + + + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + + decl_stmt java.lang.String = + + + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + + decl_stmt java.lang.String = + + + + + + + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + + + + + + + + decl_stmt java.lang.String = + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + + + + + + + + + decl_stmt java.lang.String = + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + + + + + + + + + decl_stmt java.lang.String = + + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + decl_stmt java.lang.String = + + + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + + decl_stmt java.lang.String = + + + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + decl_stmt java.lang.String = + + + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + decl_stmt int = decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = decl Set Grammar ErrorQueue decl Set decl Set decl Collection Message LeftRecursionCyclesMessage public public throws decl_stmt org.antlr.tool.Grammar = new + + + = decl_stmt org.antlr.test.ErrorQueue = new decl_stmt java.util.Set < = call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() decl_stmt java.util.Set < = new < call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() decl_stmt org.antlr.tool.Message = call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() + call Message.getClass() call Message.getClass() call Message.getClass() call Message.getClass() call Message.getClass() instanceof decl_stmt org.antlr.tool.LeftRecursionCyclesMessage = decl_stmt java.util.Collection < extends extends extends < extends extends = decl_stmt java.util.Set < = new < decl Set Grammar ErrorQueue decl Set decl Set decl Collection Message LeftRecursionCyclesMessage public public throws decl_stmt org.antlr.tool.Grammar = new + + + + = decl_stmt org.antlr.test.ErrorQueue = new decl_stmt java.util.Set < = call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() decl_stmt java.util.Set < = new < call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() decl_stmt org.antlr.tool.Message = call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() + call Message.getClass() call Message.getClass() call Message.getClass() call Message.getClass() call Message.getClass() instanceof decl_stmt org.antlr.tool.LeftRecursionCyclesMessage = decl_stmt java.util.Collection < extends extends extends < extends extends = decl_stmt java.util.Set < = new < decl Set Grammar ErrorQueue decl Set decl Set decl Collection Message LeftRecursionCyclesMessage public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + = decl_stmt org.antlr.test.ErrorQueue = new decl_stmt java.util.Set < = call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() decl_stmt java.util.Set < = new < call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() decl_stmt org.antlr.tool.Message = call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() call ErrorQueue.errors() + call Message.getClass() call Message.getClass() call Message.getClass() call Message.getClass() call Message.getClass() instanceof decl_stmt org.antlr.tool.LeftRecursionCyclesMessage = decl_stmt java.util.Collection < extends extends extends < extends extends = decl_stmt java.util.Set < = new < Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + decl_stmt int = decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = = + Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + decl_stmt java.lang.String = + decl_stmt int = decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + decl_stmt java.lang.String = + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + decl_stmt java.lang.String = + + + + + = + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Tool Message ErrorQueue CodeGenerator Grammar public public throws decl_stmt org.antlr.test.ErrorQueue = new decl_stmt org.antlr.tool.Grammar = new + decl_stmt org.antlr.gunit.swingui.Tool = call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) call org.antlr.gunit.swingui.Tool.setOutputDirectory(String) decl_stmt org.antlr.codegen.CodeGenerator = new call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.tool.Grammar.setCodeGenerator(CodeGenerator) call org.antlr.codegen.CodeGenerator.genRecognizer() call org.antlr.codegen.CodeGenerator.genRecognizer() call org.antlr.codegen.CodeGenerator.genRecognizer() call org.antlr.codegen.CodeGenerator.genRecognizer() call org.antlr.codegen.CodeGenerator.genRecognizer() decl_stmt org.antlr.tool.Message = call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() + call Message.getClass() call Message.getClass() call Message.getClass() call Message.getClass() call Message.getClass() instanceof Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = decl Set decl Set Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.util.Set < = call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() decl_stmt java.util.Set < = new < decl Set decl Set Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + + decl_stmt java.util.Set < = call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() decl_stmt java.util.Set < = new < decl Set decl Set Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + decl_stmt java.util.Set < = call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() decl_stmt java.util.Set < = new < decl Set decl Set Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.util.Set < = call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() call org.antlr.tool.Grammar.getLeftRecursiveRules() decl_stmt java.util.Set < = new < String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = decl_stmt int = new decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = decl_stmt int = new decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + = + = + + + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + = + = + + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + = + = + + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + + Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + decl_stmt int = new decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + decl_stmt int = new decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + + decl_stmt int = new decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + decl_stmt java.lang.String = + decl_stmt int = decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = call org.antlr.tool.Grammar.getGrammarTree() call org.antlr.tool.Grammar.getGrammarTree() call org.antlr.tool.Grammar.getGrammarTree() call org.antlr.tool.Grammar.getGrammarTree() call org.antlr.tool.Grammar.getGrammarTree() String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + decl_stmt java.lang.String = + decl_stmt int = new decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + decl_stmt java.lang.String = + decl_stmt int = new decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + decl_stmt java.lang.String = + + decl_stmt int = decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + + decl_stmt java.lang.String = + + Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + + decl_stmt java.lang.String = + + + + decl_stmt int = decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + + decl_stmt java.lang.String = + + + + decl_stmt int = decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = decl List Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + decl_stmt java.util.List < = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int decl Set decl Set String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + decl_stmt java.lang.String = + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = decl_stmt java.util.Set < = decl_stmt java.util.Set < = new < Grammar decl int decl Set decl Set String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + decl_stmt java.lang.String = + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = decl_stmt java.util.Set < = decl_stmt java.util.Set < = new < Grammar decl int decl Set decl Set String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + + decl_stmt java.lang.String = + + + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = decl_stmt java.util.Set < = decl_stmt java.util.Set < = new < Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.lang.String = + decl_stmt int = decl_stmt int = decl_stmt java.lang.String = decl_stmt int = decl_stmt int = = + decl List Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + + + + + + + + decl_stmt java.util.List < = int Grammar decl List public public throws decl_stmt org.antlr.tool.Grammar = new + + decl_stmt java.util.List < = decl_stmt int = String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + String Grammar public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = NonRegularDecisionMessage decl List ErrorQueue protected protected < = decl_stmt org.antlr.test.ErrorQueue = new if == decl_stmt org.antlr.tool.NonRegularDecisionMessage = != decl_stmt java.util.List < = new < RecursionOverflowMessage ErrorQueue protected protected < = decl_stmt org.antlr.test.ErrorQueue = new if == decl_stmt org.antlr.tool.RecursionOverflowMessage = + != call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() call RecursionOverflowMessage.targetRules() Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + decl_stmt int = decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = Grammar decl int String int decl int decl int String public public throws decl_stmt org.antlr.tool.Grammar = new + decl_stmt java.lang.String = + + + + + + + decl_stmt int = decl_stmt int = new decl_stmt java.lang.String = decl_stmt int = decl_stmt int = ErrorQueue decl List CodeGenerator BitSet decl List RecursionOverflowMessage decl List BitSet GrammarNonDeterminismMessage String Message String DFA FASerializer protected protected throws = decl_stmt org.antlr.test.ErrorQueue = new if == decl_stmt org.antlr.codegen.CodeGenerator = new if call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() != + call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() call org.antlr.test.ErrorQueue.size() decl_stmt org.antlr.runtime.DFA = + decl_stmt org.antlr.tool.FASerializer = new decl_stmt java.lang.String = call org.antlr.tool.FASerializer.serialize(State) call org.antlr.tool.FASerializer.serialize(State) call org.antlr.tool.FASerializer.serialize(State) call org.antlr.tool.FASerializer.serialize(State) call org.antlr.tool.FASerializer.serialize(State) decl_stmt java.util.List < = call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() if != decl_stmt org.antlr.runtime.BitSet = new call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) decl_stmt org.antlr.runtime.BitSet = new call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) else != call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() : if != decl_stmt org.antlr.tool.Message = call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() call ErrorQueue.warnings() + call Message.getClass() call Message.getClass() call Message.getClass() call Message.getClass() call Message.getClass() instanceof decl_stmt org.antlr.tool.GrammarNonDeterminismMessage = decl_stmt java.util.List < = call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() decl_stmt java.lang.String = call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() if != decl_stmt org.antlr.tool.RecursionOverflowMessage = decl_stmt org.antlr.tool.GrammarNonDeterminismMessage = decl_stmt java.util.List < = if != = call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() call GrammarNonDeterminismMessage.probe() else = if != decl_stmt org.antlr.runtime.BitSet = new call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) decl_stmt org.antlr.runtime.BitSet = new call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) call org.antlr.runtime.BitSet.addAll(IntSet) + != || != else decl_stmt org.antlr.tool.GrammarNonDeterminismMessage = Message protected protected < for = < ++ decl_stmt org.antlr.tool.Message = if instanceof return return Message protected protected < for = < ++ decl_stmt org.antlr.tool.Message = if instanceof return return Message protected protected < for = < ++ decl_stmt org.antlr.tool.Message = if instanceof return return Message protected protected < for = < ++ decl_stmt org.antlr.tool.Message = if instanceof return return Message protected protected < for = < ++ decl_stmt org.antlr.tool.Message = if instanceof return return StringBuilder int protected protected decl_stmt java.lang.StringBuilder = new for = < ++ if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl Set protected < protected < < extends extends decl_stmt java.util.Set < = new < for : call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return decl Set protected < protected < < extends extends extends < extends extends decl_stmt java.util.Set < = new < for < extends extends : call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() return