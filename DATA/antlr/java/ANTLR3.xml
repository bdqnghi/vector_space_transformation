org.apache.tools.ant.antlr java.util.regex.* import java.io.* import java.util.Map import org.apache.tools.ant.BuildException import org.apache.tools.ant.DirectoryScanner import org.apache.tools.ant.Project import org.apache.tools.ant.Task import org.apache.tools.ant.taskdefs.Execute import org.apache.tools.ant.taskdefs.LogOutputStream import org.apache.tools.ant.taskdefs.PumpStreamHandler import org.apache.tools.ant.taskdefs.Redirector import org.apache.tools.ant.types.Commandline import org.apache.tools.ant.types.CommandlineJava import org.apache.tools.ant.types.Path import org.apache.tools.ant.util.JavaEnvUtils import org.apache.tools.ant.util.LoaderUtils import org.apache.tools.ant.util.TeeOutputStream import org.apache.tools.ant.util.FileUtils import class org.apache.tools.ant.antlr.ANTLR3 super super extends boolean FileUtils File String boolean boolean boolean boolean boolean String boolean boolean boolean boolean boolean CommandlineJava boolean boolean File boolean boolean File boolean ByteArrayOutputStream File File boolean public public + = public public + = public public return public public + = public public + = public public = public public = public public = public public = public public = public public = public public = public public = public public = public public = public public = int public public + try decl_stmt int = = catch + + public public = public public = public public = public public = public public = public public = public public = public public = public public return call CommandlineJava.createClasspath() call CommandlineJava.createClasspath() call CommandlineJava.createClasspath() call CommandlineJava.createClasspath() call CommandlineJava.createClasspath() public public return call CommandlineJava.createVmArgument() call CommandlineJava.createVmArgument() call CommandlineJava.createVmArgument() call CommandlineJava.createVmArgument() call CommandlineJava.createVmArgument() decl Map String public public throws decl_stmt java.util.Map < = decl_stmt java.lang.String = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != + File protected protected if = else = + decl_stmt File = if != + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() else + + + + decl String File String DirectoryScanner decl String private private decl_stmt java.lang.String = decl_stmt DirectoryScanner = new call DirectoryScanner.setIncludes() call DirectoryScanner.setIncludes() call DirectoryScanner.setIncludes() call DirectoryScanner.setIncludes() call DirectoryScanner.setIncludes() call DirectoryScanner.setBasedir() call DirectoryScanner.setBasedir() call DirectoryScanner.setBasedir() call DirectoryScanner.setBasedir() call DirectoryScanner.setBasedir() new call DirectoryScanner.setCaseSensitive() call DirectoryScanner.setCaseSensitive() call DirectoryScanner.setCaseSensitive() call DirectoryScanner.setCaseSensitive() call DirectoryScanner.setCaseSensitive() call DirectoryScanner.scan() call DirectoryScanner.scan() call DirectoryScanner.scan() call DirectoryScanner.scan() call DirectoryScanner.scan() decl_stmt java.lang.String = decl_stmt java.lang.String = call DirectoryScanner.getIncludedFiles() call DirectoryScanner.getIncludedFiles() call DirectoryScanner.getIncludedFiles() call DirectoryScanner.getIncludedFiles() call DirectoryScanner.getIncludedFiles() for : decl_stmt File = new + + + call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() call File.getAbsolutePath() Pattern Matcher int public public throws if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call File.toString() call File.toString() call File.toString() call File.toString() call File.toString() call CommandlineJava.describeCommand() call CommandlineJava.describeCommand() call CommandlineJava.describeCommand() call CommandlineJava.describeCommand() call CommandlineJava.describeCommand() decl_stmt int = try = call CommandlineJava.getCommandline() call CommandlineJava.getCommandline() call CommandlineJava.getCommandline() call CommandlineJava.getCommandline() call CommandlineJava.getCommandline() new new catch throw new finally try call java.io.ByteArrayOutputStream.close() call java.io.ByteArrayOutputStream.close() call java.io.ByteArrayOutputStream.close() call java.io.ByteArrayOutputStream.close() call java.io.ByteArrayOutputStream.close() catch if != throw new + else decl_stmt java.util.regex.Pattern = decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) throw new else try + call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() + catch + call File.toString() call File.toString() call File.toString() call File.toString() call File.toString() + private private call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call File.toString() call File.toString() call File.toString() call File.toString() call File.toString() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call File.toString() call File.toString() call File.toString() call File.toString() call File.toString() if != if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if if if if if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if != call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if != call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() if call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() private private throws if == throw new else if ! call File.isFile() call File.isFile() call File.isFile() call File.isFile() call File.isFile() throw new + + if == new call File.getParent() call File.getParent() call File.getParent() call File.getParent() call File.getParent() if ! call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() throw new + if != && ! call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() throw new + if == new call File.getParent() call File.getParent() call File.getParent() call File.getParent() call File.getParent() if ! call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() call File.isDirectory() throw new + String File String int int Pattern File Matcher decl String boolean CommandlineJava String Redirector File decl String BufferedReader File String private private throws decl_stmt CommandlineJava try = call CommandlineJava.clone() call CommandlineJava.clone() call CommandlineJava.clone() call CommandlineJava.clone() call CommandlineJava.clone() catch throw new + call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call File.toString() call File.toString() call File.toString() call File.toString() call File.toString() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call File.toString() call File.toString() call File.toString() call File.toString() call File.toString() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call CommandlineJava.createArgument() call File.toString() call File.toString() call File.toString() call File.toString() call File.toString() call CommandlineJava.describeCommand() call CommandlineJava.describeCommand() call CommandlineJava.describeCommand() call CommandlineJava.describeCommand() call CommandlineJava.describeCommand() decl_stmt Redirector = new decl_stmt File try = call File.deleteOnExit() call File.deleteOnExit() call File.deleteOnExit() call File.deleteOnExit() call File.deleteOnExit() + call File.toString() call File.toString() call File.toString() call File.toString() call File.toString() + + call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() + call Redirector.setOutput() call Redirector.setOutput() call Redirector.setOutput() call Redirector.setOutput() call Redirector.setOutput() call Redirector.setAlwaysLog() call Redirector.setAlwaysLog() call Redirector.setAlwaysLog() call Redirector.setAlwaysLog() call Redirector.setAlwaysLog() call Redirector.createStreams() call Redirector.createStreams() call Redirector.createStreams() call Redirector.createStreams() call Redirector.createStreams() catch throw new + decl_stmt int = try = call CommandlineJava.getCommandline() call CommandlineJava.getCommandline() call CommandlineJava.getCommandline() call CommandlineJava.getCommandline() call CommandlineJava.getCommandline() call Redirector.getOutputStream() call Redirector.getOutputStream() call Redirector.getOutputStream() call Redirector.getOutputStream() call Redirector.getOutputStream() catch try call Redirector.complete() call Redirector.complete() call Redirector.complete() call Redirector.complete() call Redirector.complete() catch + throw new finally try call java.io.ByteArrayOutputStream.close() call java.io.ByteArrayOutputStream.close() call java.io.ByteArrayOutputStream.close() call java.io.ByteArrayOutputStream.close() call java.io.ByteArrayOutputStream.close() catch try call Redirector.complete() call Redirector.complete() call Redirector.complete() call Redirector.complete() call Redirector.complete() catch + if != if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() if call CommandlineJava.getClasspath() call CommandlineJava.getClasspath() call CommandlineJava.getClasspath() call CommandlineJava.getClasspath() call CommandlineJava.getClasspath() == + return else decl_stmt java.util.regex.Pattern = decl_stmt java.util.regex.Matcher = call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.util.regex.Pattern.matcher(CharSequence) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) if call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) call java.util.regex.Matcher.find(int) if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() return decl_stmt boolean = decl_stmt java.io.BufferedReader = try = new new catch try if != call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() catch throw new + call File.toString() call File.toString() call File.toString() call File.toString() call File.toString() + if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() try throw new + call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() + catch throw new + call File.toString() call File.toString() call File.toString() call File.toString() call File.toString() + decl_stmt java.lang.String try while = call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) call java.io.BufferedReader.readLine(boolean) != decl_stmt java.lang.String decl_stmt java.lang.String decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) if >= = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) decl_stmt File = new if ! call File.isFile() call File.isFile() call File.isFile() call File.isFile() call File.isFile() + + decl_stmt java.lang.String = call File.getName() call File.getName() call File.getName() call File.getName() call File.getName() decl_stmt java.lang.String = if <= += = new if call File.isFile() call File.isFile() call File.isFile() call File.isFile() call File.isFile() + + + call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + decl_stmt java.lang.String = decl_stmt File = new for : decl_stmt File = new + + + + + + + call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() + + + call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() call File.lastModified() if call FileUtils.isUpToDate() call FileUtils.isUpToDate() call FileUtils.isUpToDate() call FileUtils.isUpToDate() call FileUtils.isUpToDate() + + + + + + call FileUtils.setFileLastModified() call FileUtils.setFileLastModified() call FileUtils.setFileLastModified() call FileUtils.setFileLastModified() call FileUtils.setFileLastModified() - + + = break if break call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() catch if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() throw new + call File.toString() call File.toString() call File.toString() call File.toString() call File.toString() + if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() call File.delete() call File.delete() call File.delete() call File.delete() call File.delete() return decl String private private decl_stmt java.lang.String = for : + + return PumpStreamHandler Execute private private throws decl_stmt PumpStreamHandler if == = new else = new new decl_stmt Execute = new call Execute.setAntRun() call Execute.setAntRun() call Execute.setAntRun() call Execute.setAntRun() call Execute.setAntRun() if != call Execute.setWorkingDirectory() call Execute.setWorkingDirectory() call Execute.setWorkingDirectory() call Execute.setWorkingDirectory() call Execute.setWorkingDirectory() call Execute.setCommandline() call Execute.setCommandline() call Execute.setCommandline() call Execute.setCommandline() call Execute.setCommandline() return call Execute.execute() call Execute.execute() call Execute.execute() call Execute.execute() call Execute.execute()