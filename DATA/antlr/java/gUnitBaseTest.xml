org.antlr.gunit junit.framework.TestCase import org.antlr.runtime.* import org.antlr.runtime.tree.* import org.antlr.stringtemplate.StringTemplate import java.io.* import java.lang.reflect.* import class org.antlr.gunit.gUnitBaseTest super super extends PrintStream String String String String String String PrintStream String PrintStream Lexer Method ByteArrayOutputStream File decl Class decl Constructor int Method PrintStream CharStream String ByteArrayOutputStream public public throws decl_stmt org.antlr.runtime.CharStream if decl_stmt java.lang.String = decl_stmt File = new if ! call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() && != = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() = call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() = new else = new decl_stmt java.lang.Class < extends extends decl_stmt java.io.PrintStream = decl_stmt java.io.PrintStream = try = decl_stmt java.lang.reflect.Constructor < extends extends = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() decl_stmt org.antlr.runtime.Lexer = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call org.antlr.runtime.CharStream.setLine(int) call org.antlr.runtime.CharStream.setLine(int) call org.antlr.runtime.CharStream.setLine(int) call org.antlr.runtime.CharStream.setLine(int) call org.antlr.runtime.CharStream.setLine(int) decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() + decl_stmt java.io.ByteArrayOutputStream = new decl_stmt java.io.ByteArrayOutputStream = new = new = new call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) new decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() decl_stmt int = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) new if != call CharStream.size() call CharStream.size() call CharStream.size() call CharStream.size() call CharStream.size() call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) call java.io.PrintStream.println(int) + call CharStream.substring() call CharStream.substring() call CharStream.substring() call CharStream.substring() call CharStream.substring() call CharStream.size() call CharStream.size() call CharStream.size() call CharStream.size() call CharStream.size() - + = = if call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) > = call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) return if call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) > = call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) if call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) == && call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) == return catch catch catch catch catch catch catch if != = else = return finally try if != call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() if != call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() catch return decl Constructor String decl Class PrintStream StringTemplate Parser decl Method PrintStream File String CharStream Method Method Object Lexer String CommonTokenStream decl Class Method ByteArrayOutputStream decl Class decl Class CommonTree decl Constructor ByteArrayOutputStream public public throws decl_stmt org.antlr.runtime.CharStream if decl_stmt java.lang.String = decl_stmt File = new if ! call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() && != = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() = call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() = new else = new decl_stmt java.lang.Class < extends extends decl_stmt java.lang.Class < extends extends decl_stmt java.io.PrintStream = decl_stmt java.io.PrintStream = decl_stmt java.io.ByteArrayOutputStream = decl_stmt java.io.ByteArrayOutputStream = try = decl_stmt java.lang.reflect.Constructor < extends extends = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() decl_stmt org.antlr.runtime.Lexer = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call org.antlr.runtime.CharStream.setLine(int) call org.antlr.runtime.CharStream.setLine(int) call org.antlr.runtime.CharStream.setLine(int) call org.antlr.runtime.CharStream.setLine(int) call org.antlr.runtime.CharStream.setLine(int) decl_stmt org.antlr.runtime.CommonTokenStream = new = decl_stmt java.lang.reflect.Constructor < extends extends = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() decl_stmt org.antlr.runtime.Parser = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() if != decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() decl_stmt java.lang.Class < extends extends = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() = new = new = new = new decl_stmt java.lang.Object = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) decl_stmt java.lang.String = decl_stmt java.lang.String = if != if call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() + > try decl_stmt java.lang.Class < = + + + decl_stmt com.sun.jdi.Method = call decl Class.getDeclaredMethods() call decl Class.getDeclaredMethods() call decl Class.getDeclaredMethods() call decl Class.getDeclaredMethods() call decl Class.getDeclaredMethods() for : if decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() decl_stmt org.antlr.runtime.tree.CommonTree = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) = call CommonTree.toStringTree() call CommonTree.toStringTree() call CommonTree.toStringTree() call CommonTree.toStringTree() call CommonTree.toStringTree() else if decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() decl_stmt StringTemplate = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) = call StringTemplate.toString() call StringTemplate.toString() call StringTemplate.toString() call StringTemplate.toString() call StringTemplate.toString() catch = = if call CommonTokenStream.index() call CommonTokenStream.index() call CommonTokenStream.index() call CommonTokenStream.index() call CommonTokenStream.index() != call CommonTokenStream.size() call CommonTokenStream.size() call CommonTokenStream.size() call CommonTokenStream.size() call CommonTokenStream.size() - += + call CommonTokenStream.index() call CommonTokenStream.index() call CommonTokenStream.index() call CommonTokenStream.index() call CommonTokenStream.index() + += call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) += call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) if call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) > return if call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) > return if != return else if != return if != return if call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) == && call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) == return catch catch catch catch catch = call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) = call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) if != += else += return finally try if != call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() if != call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() catch return decl Constructor String decl Class decl Constructor decl Method PrintStream StringTemplate Parser ByteArrayOutputStream PrintStream decl Class File String CharStream CommonTreeNodeStream Method Method decl Class Method Object Lexer String TreeParser CommonTokenStream CommonTree decl Class Method Object Method ByteArrayOutputStream decl Class decl Class CommonTree decl Constructor TreeAdaptor public public throws decl_stmt org.antlr.runtime.CharStream if decl_stmt java.lang.String = decl_stmt File = new if ! call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() && != = new if call File.exists() call File.exists() call File.exists() call File.exists() call File.exists() = call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() call File.getCanonicalPath() = new else = new decl_stmt java.lang.Class < extends extends decl_stmt java.lang.Class < extends extends decl_stmt java.lang.Class < extends extends decl_stmt java.io.PrintStream = decl_stmt java.io.PrintStream = try = decl_stmt java.lang.reflect.Constructor < extends extends = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() decl_stmt org.antlr.runtime.Lexer = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() decl_stmt org.antlr.runtime.CommonTokenStream = new = decl_stmt java.lang.reflect.Constructor < extends extends = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() decl_stmt org.antlr.runtime.Parser = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() decl_stmt org.antlr.runtime.tree.TreeAdaptor = if != decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() decl_stmt java.lang.Class < extends extends = = call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call decl Class.newInstance() call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() decl_stmt java.io.ByteArrayOutputStream = new decl_stmt java.io.ByteArrayOutputStream = new = new = new decl_stmt java.lang.Object = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) decl_stmt java.lang.Class < = + + + decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() decl_stmt org.antlr.runtime.tree.CommonTree = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) decl_stmt org.antlr.runtime.tree.CommonTreeNodeStream if != = new else = new call org.antlr.runtime.tree.CommonTreeNodeStream.setTokenStream(TokenStream) call org.antlr.runtime.tree.CommonTreeNodeStream.setTokenStream(TokenStream) call org.antlr.runtime.tree.CommonTreeNodeStream.setTokenStream(TokenStream) call org.antlr.runtime.tree.CommonTreeNodeStream.setTokenStream(TokenStream) call org.antlr.runtime.tree.CommonTreeNodeStream.setTokenStream(TokenStream) = decl_stmt java.lang.reflect.Constructor < extends extends = call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() call decl Class.getConstructor() decl_stmt org.antlr.runtime.tree.TreeParser = call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() call decl Constructor.newInstance() decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() decl_stmt java.lang.Object = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) decl_stmt java.lang.String = decl_stmt java.lang.String = if != if call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() call Object.getClass() + > try decl_stmt java.lang.Class < = + + + decl_stmt com.sun.jdi.Method = call decl Class.getDeclaredMethods() call decl Class.getDeclaredMethods() call decl Class.getDeclaredMethods() call decl Class.getDeclaredMethods() call decl Class.getDeclaredMethods() for : if decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() decl_stmt org.antlr.runtime.tree.CommonTree = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) = call CommonTree.toStringTree() call CommonTree.toStringTree() call CommonTree.toStringTree() call CommonTree.toStringTree() call CommonTree.toStringTree() else if decl_stmt com.sun.jdi.Method = call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() call decl Class.getMethod() decl_stmt StringTemplate = call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) call com.sun.jdi.Method.invoke(Object,Object) = call StringTemplate.toString() call StringTemplate.toString() call StringTemplate.toString() call StringTemplate.toString() call StringTemplate.toString() catch = = if call CommonTokenStream.index() call CommonTokenStream.index() call CommonTokenStream.index() call CommonTokenStream.index() call CommonTokenStream.index() != call CommonTokenStream.size() call CommonTokenStream.size() call CommonTokenStream.size() call CommonTokenStream.size() call CommonTokenStream.size() - throw new if call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) > = call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) return if call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) > = call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) if != return else if != return if != return if call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) == && call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) call java.io.ByteArrayOutputStream.toString(int) == return catch catch catch catch catch if != = else = return finally try if != call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() if != call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() call java.io.PrintStream.close() catch return public public + == : + + if == if == || == return else return + else if == if != && > return else return else return protected protected