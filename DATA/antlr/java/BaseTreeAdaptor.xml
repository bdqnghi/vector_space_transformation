org.antlr.runtime.tree org.antlr.runtime.Token import org.antlr.runtime.TokenStream import org.antlr.runtime.RecognitionException import java.util.HashMap import java.util.Map import class org.antlr.runtime.tree.BaseTreeAdaptor super super implements int decl Map public public return CommonErrorNode public public decl_stmt org.antlr.runtime.tree.CommonErrorNode = new return public public return public public return Object Object Object int public public if == return decl_stmt java.lang.Object = decl_stmt int = for = < ++ decl_stmt java.lang.Object = decl_stmt java.lang.Object = return public public if != && != Tree int Tree public public decl_stmt org.antlr.runtime.tree.Tree = decl_stmt org.antlr.runtime.tree.Tree = if == return if call org.antlr.runtime.tree.Tree.isNil() call org.antlr.runtime.tree.Tree.isNil() call org.antlr.runtime.tree.Tree.isNil() call org.antlr.runtime.tree.Tree.isNil() call org.antlr.runtime.tree.Tree.isNil() decl_stmt int = call Tree.getChildCount() call Tree.getChildCount() call Tree.getChildCount() call Tree.getChildCount() call Tree.getChildCount() if == = call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.getChild(int) else if > throw new call org.antlr.runtime.tree.Tree.addChild(Tree) call org.antlr.runtime.tree.Tree.addChild(Tree) call org.antlr.runtime.tree.Tree.addChild(Tree) call org.antlr.runtime.tree.Tree.addChild(Tree) call org.antlr.runtime.tree.Tree.addChild(Tree) return Tree public public decl_stmt org.antlr.runtime.tree.Tree = if != && call org.antlr.runtime.tree.Tree.isNil() call org.antlr.runtime.tree.Tree.isNil() call org.antlr.runtime.tree.Tree.isNil() call org.antlr.runtime.tree.Tree.isNil() call org.antlr.runtime.tree.Tree.isNil() if call Tree.getChildCount() call Tree.getChildCount() call Tree.getChildCount() call Tree.getChildCount() call Tree.getChildCount() == = else if call Tree.getChildCount() call Tree.getChildCount() call Tree.getChildCount() call Tree.getChildCount() call Tree.getChildCount() == = call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.setParent(Tree) call org.antlr.runtime.tree.Tree.setParent(Tree) call org.antlr.runtime.tree.Tree.setParent(Tree) call org.antlr.runtime.tree.Tree.setParent(Tree) call org.antlr.runtime.tree.Tree.setParent(Tree) call org.antlr.runtime.tree.Tree.setChildIndex(int) call org.antlr.runtime.tree.Tree.setChildIndex(int) call org.antlr.runtime.tree.Tree.setChildIndex(int) call org.antlr.runtime.tree.Tree.setChildIndex(int) call org.antlr.runtime.tree.Tree.setChildIndex(int) - return public public return Tree public public = decl_stmt org.antlr.runtime.tree.Tree = return Tree public public if == return = decl_stmt org.antlr.runtime.tree.Tree = return Tree Token public public decl_stmt org.antlr.runtime.Token = decl_stmt org.antlr.runtime.tree.Tree = return public public return public public throw new public public return public public throw new public public return public public public public return public public return int Integer public public if == = new < decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != return decl_stmt int = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() ++ return