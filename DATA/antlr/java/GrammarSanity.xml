org.antlr.tool org.antlr.analysis.NFAState import org.antlr.analysis.RuleClosureTransition import org.antlr.analysis.Transition import org.antlr.grammar.v3.ANTLRParser import org.antlr.runtime.tree.Tree import java.util.ArrayList import java.util.HashSet import java.util.List import java.util.Set import class org.antlr.tool.GrammarSanity decl Set Grammar decl Set Rule decl List public < < public < < call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() = new < decl_stmt java.util.List < < = new < < for = < call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() ++ decl_stmt org.antlr.tool.Rule = call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() if != = new < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt java.util.Set < = new < if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > return NFAState boolean Rule Transition Transition boolean RuleClosureTransition protected protected < < < if return if return decl_stmt boolean = decl_stmt org.antlr.analysis.Transition = if instanceof decl_stmt RuleClosureTransition = decl_stmt org.antlr.tool.Rule = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() call Grammar.leftRecursiveRules() else call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() decl_stmt boolean = new < call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() if decl_stmt org.antlr.analysis.NFAState = |= else if call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() || call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() |= decl_stmt org.antlr.analysis.Transition = if != |= return decl Set boolean decl Set protected protected < < decl_stmt boolean = for = < ++ decl_stmt java.util.Set < = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() = if ! decl_stmt java.util.Set < = new < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() Rule public public decl_stmt org.antlr.tool.Rule = call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) if == if != if != && == else if != && != else if == if != if != return if != if != && == else if != && != GrammarAST public public if decl_stmt org.antlr.tool.GrammarAST = if ! return switch case case if return break case case case case case return protected protected switch case case case case case return default: return protected protected while == || == = if == return return