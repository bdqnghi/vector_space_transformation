org.antlr.runtime java.util.* import class org.antlr.runtime.TokenRewriteStream super super extends int int String decl Map decl Map public public return String int public public decl_stmt java.lang.String = decl_stmt int = call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) call java.lang.String.indexOf(String,int) = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) + call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() return + + + + + + public public if != return + public public if != return + public public if == return + + + + return + + + + + + protected protected = new < < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() new < = new < public public decl List public public decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if != call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() call decl List.subList() public public public public public public public public public public public public + public public public public public public decl List RewriteOperation public public decl_stmt RewriteOperation = new decl_stmt java.util.List < super super = = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public public public public public public public decl List RewriteOperation public public if > || < || < || >= throw new + + + + + + decl_stmt RewriteOperation = new decl_stmt java.util.List < super super = = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public public public public public public public public public public public public public public public return Integer protected protected decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == return - return protected protected call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() decl List protected < protected < decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = return decl List private < private < decl_stmt java.util.List < = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return public public return - StringBuilder public public decl_stmt java.lang.StringBuilder = new for = >= && <= && < ++ if != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public return - public public return - public public return int Token decl Map decl List StringBuffer RewriteOperation public public decl_stmt java.util.List < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if > - = - if < = if == || call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() call decl List.isEmpty() return decl_stmt java.lang.StringBuffer = new decl_stmt java.util.Map < extends extends = decl_stmt int = while <= && < decl_stmt RewriteOperation = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() call decl Map.remove() decl_stmt org.antlr.runtime.Token = if == if call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() != call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call org.antlr.runtime.Token.getText() call org.antlr.runtime.Token.getText() call org.antlr.runtime.Token.getText() call org.antlr.runtime.Token.getText() call org.antlr.runtime.Token.getText() ++ else = call RewriteOperation.execute() call RewriteOperation.execute() call RewriteOperation.execute() call RewriteOperation.execute() call RewriteOperation.execute() if == - for : call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() if >= - call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) call java.lang.StringBuffer.append(boolean) return call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() call java.lang.StringBuffer.toString() decl List decl List decl Map boolean InsertBeforeOp ReplaceOp boolean decl List InsertBeforeOp ReplaceOp RewriteOperation protected < extends extends protected < extends extends < extends extends for = < ++ decl_stmt RewriteOperation = if == continue if ! instanceof continue decl_stmt ReplaceOp = decl_stmt java.util.List < extends extends = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt InsertBeforeOp = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if == = call InsertBeforeOp.text() call InsertBeforeOp.text() call InsertBeforeOp.text() call InsertBeforeOp.text() call InsertBeforeOp.text() call InsertBeforeOp.text() call InsertBeforeOp.text() call InsertBeforeOp.text() call InsertBeforeOp.text() + != call ReplaceOp.text() call ReplaceOp.text() call ReplaceOp.text() call ReplaceOp.text() call ReplaceOp.text() call ReplaceOp.text() call ReplaceOp.text() call ReplaceOp.text() call ReplaceOp.text() : else if > && <= decl_stmt java.util.List < extends extends = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt ReplaceOp = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if >= && <= continue decl_stmt boolean = < || || || || || decl_stmt boolean = == && == if == && == && ! = = + else if ! && ! throw new + + + for = < ++ decl_stmt RewriteOperation = if == continue if ! instanceof continue decl_stmt InsertBeforeOp = decl_stmt java.util.List < extends extends = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt InsertBeforeOp = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if == = decl_stmt java.util.List < extends extends = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt ReplaceOp = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if == = continue if >= && <= throw new + + + decl_stmt java.util.Map < = new < for = < ++ decl_stmt RewriteOperation = if == continue if call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() != throw new call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return String String protected protected decl_stmt java.lang.String = decl_stmt java.lang.String = if != = if != = return + protected < extends extends < extends extends protected < extends extends < extends extends < extends extends < return RewriteOperation decl List protected < extends extends < extends extends protected < extends extends < extends extends < extends extends < decl_stmt java.util.List < = new < for = < && < ++ decl_stmt RewriteOperation = if == continue if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return public public return - StringBuilder public public decl_stmt java.lang.StringBuilder = new for = >= && <= && < ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString()