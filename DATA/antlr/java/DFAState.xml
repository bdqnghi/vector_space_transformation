org.antlr.analysis org.antlr.misc.IntSet import org.antlr.misc.MultiMap import org.antlr.misc.OrderedHashSet import org.antlr.misc.Utils import org.antlr.tool.Grammar import java.util.* import class org.antlr.analysis.DFAState super super extends int boolean int decl OrderedHashSet DFA int int decl OrderedHashSet boolean decl Set int decl List boolean boolean decl List int int public public = = = public public return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() public public return call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() public public call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() public public call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - public public return call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() public public call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() Label public public if call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() return call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() if < = if != = += + if != decl_stmt org.antlr.analysis.Label = if ! call org.antlr.analysis.Label.isEpsilon() call org.antlr.analysis.Label.isEpsilon() call org.antlr.analysis.Label.isEpsilon() call org.antlr.analysis.Label.isEpsilon() call org.antlr.analysis.Label.isEpsilon() || call org.antlr.analysis.Label.isSemanticPredicate() call org.antlr.analysis.Label.isSemanticPredicate() call org.antlr.analysis.Label.isSemanticPredicate() call org.antlr.analysis.Label.isSemanticPredicate() call org.antlr.analysis.Label.isSemanticPredicate() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if == = NFAConfiguration public public decl_stmt org.antlr.analysis.NFAConfiguration = new return Label int IntSet IntSet Label IntSet IntSet IntSet protected protected if == = new < if call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() call decl OrderedHashSet.contains() return decl_stmt org.antlr.misc.IntSet = decl_stmt org.antlr.misc.IntSet = decl_stmt int = call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() for = < ++ decl_stmt org.antlr.analysis.Label = call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() if ! continue decl_stmt org.antlr.misc.IntSet = call org.antlr.analysis.Label.getSet() call org.antlr.analysis.Label.getSet() call org.antlr.analysis.Label.getSet() call org.antlr.analysis.Label.getSet() call org.antlr.analysis.Label.getSet() decl_stmt org.antlr.misc.IntSet = call org.antlr.misc.IntSet.and(IntSet) call org.antlr.misc.IntSet.and(IntSet) call org.antlr.misc.IntSet.and(IntSet) call org.antlr.misc.IntSet.and(IntSet) call org.antlr.misc.IntSet.and(IntSet) call decl OrderedHashSet.set() call decl OrderedHashSet.set() call decl OrderedHashSet.set() call decl OrderedHashSet.set() call decl OrderedHashSet.set() new decl_stmt org.antlr.misc.IntSet = call org.antlr.misc.IntSet.subtract(IntSet) call org.antlr.misc.IntSet.subtract(IntSet) call org.antlr.misc.IntSet.subtract(IntSet) call org.antlr.misc.IntSet.subtract(IntSet) call org.antlr.misc.IntSet.subtract(IntSet) if ! call IntSet.isNil() call IntSet.isNil() call IntSet.isNil() call IntSet.isNil() call IntSet.isNil() decl_stmt org.antlr.analysis.Label = new call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() = call org.antlr.misc.IntSet.subtract(IntSet) call org.antlr.misc.IntSet.subtract(IntSet) call org.antlr.misc.IntSet.subtract(IntSet) call org.antlr.misc.IntSet.subtract(IntSet) call org.antlr.misc.IntSet.subtract(IntSet) if call IntSet.isNil() call IntSet.isNil() call IntSet.isNil() call IntSet.isNil() call IntSet.isNil() break = if ! call IntSet.isNil() call IntSet.isNil() call IntSet.isNil() call IntSet.isNil() call IntSet.isNil() decl_stmt org.antlr.analysis.Label = new call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() call decl OrderedHashSet.add() public < public < return public public < = public public if == return return DFAState public public decl_stmt org.antlr.analysis.DFAState = return int NFAConfiguration int public public if != return decl_stmt int = decl_stmt int = call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() if continue if == = else if != return = return int NFAConfiguration int public public decl_stmt int = decl_stmt int = call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() if == = else if != return return decl Set NFAConfiguration int public < public < decl_stmt java.util.Set < = new < decl_stmt int = call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return int protected < protected < decl_stmt int = call org.antlr.runtime.DFA.getUserMaxLookahead() call org.antlr.runtime.DFA.getUserMaxLookahead() call org.antlr.runtime.DFA.getUserMaxLookahead() call org.antlr.runtime.DFA.getUserMaxLookahead() call org.antlr.runtime.DFA.getUserMaxLookahead() if > && == return else if || return else return int decl Set int NFAConfiguration Integer decl MultiMap decl List int decl Set NFAConfiguration NFAConfiguration boolean NFAConfiguration int protected < protected < decl_stmt java.util.Set < = new < decl_stmt int = call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() if <= return decl_stmt org.antlr.misc.MultiMap < = new < for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() decl_stmt java.lang.Integer = call decl MultiMap.map() call decl MultiMap.map() call decl MultiMap.map() call decl MultiMap.map() call decl MultiMap.map() decl_stmt java.util.Set < = call decl MultiMap.keySet() call decl MultiMap.keySet() call decl MultiMap.keySet() call decl MultiMap.keySet() call decl MultiMap.keySet() decl_stmt int = for : decl_stmt boolean = decl_stmt java.util.List < = call decl MultiMap.get() call decl MultiMap.get() call decl MultiMap.get() call decl MultiMap.get() call decl MultiMap.get() decl_stmt int = decl_stmt int = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < && && ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if == = else if != if != || ! call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() call DFA.decisionNFAStartState() ++ = if ! call decl MultiMap.put() call decl MultiMap.put() call decl MultiMap.put() call decl MultiMap.put() call decl MultiMap.put() if == return for : decl_stmt java.util.List < = call decl MultiMap.get() call decl MultiMap.get() call decl MultiMap.get() call decl MultiMap.get() call decl MultiMap.get() decl_stmt int = if != = call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for = + < ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if != && call NFAConfiguration.context() call NFAConfiguration.context() call NFAConfiguration.context() call NFAConfiguration.context() call NFAConfiguration.context() call NFAConfiguration.context() call NFAConfiguration.context() call NFAConfiguration.context() call NFAConfiguration.context() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() return return NFAConfiguration decl Set int public < public < decl_stmt int = call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() decl_stmt java.util.Set < = new < for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() return return SemanticContext NFAConfiguration decl Set int public < extends extends public < extends extends decl_stmt int = call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() decl_stmt java.util.Set < = new < for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() decl_stmt org.antlr.analysis.SemanticContext = call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() if != && call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() return return SemanticContext NFAConfiguration SemanticContext int public public decl_stmt org.antlr.analysis.SemanticContext = decl_stmt int = call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() for = < ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() decl_stmt org.antlr.analysis.SemanticContext = call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() if == return else if || ! call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() call NFAConfiguration.semanticContext() if == = else = if instanceof return return public public return public public = public public return NFAConfiguration StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) for = < call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() call decl OrderedHashSet.size() ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() call decl OrderedHashSet.get() if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() public public return public public = if > =