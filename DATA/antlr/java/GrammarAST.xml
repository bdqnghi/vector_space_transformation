org.antlr.tool org.antlr.analysis.DFA import org.antlr.analysis.NFAState import org.antlr.grammar.v3.ANTLRParser import org.antlr.misc.IntSet import org.antlr.runtime.CommonToken import org.antlr.runtime.Token import org.antlr.runtime.tree.CommonTree import org.antlr.runtime.tree.Tree import org.stringtemplate.v4.ST import java.util.* import class org.antlr.tool.GrammarAST super super extends int IntSet decl Set decl Set int ST decl Map NFAState NFAState String GrammarAST DFA NFAState GrammarAST decl Map String int public < public < return public public < = public public = new - GrammarAST public public decl_stmt org.antlr.tool.GrammarAST = = = = = = = = public public = if != = = public public return public public = public public return public public = public public if == = new < return public public if == = new < return String public public < < if ! return if instanceof decl_stmt java.lang.String = if call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) == = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - if ++ if && = return Object public public decl_stmt java.lang.Object = if != = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() return decl String String public public < if == = return decl_stmt java.lang.String = new for : decl_stmt java.lang.String = if == public public if != return if != return return public public public public = public public if != return return - int Tree public public decl_stmt int = if != = if == decl_stmt org.antlr.runtime.tree.Tree = if != = call org.antlr.runtime.tree.Tree.getLine() call org.antlr.runtime.tree.Tree.getLine() call org.antlr.runtime.tree.Tree.getLine() call org.antlr.runtime.tree.Tree.getLine() call org.antlr.runtime.tree.Tree.getLine() return int Tree public public decl_stmt int = if != = if == decl_stmt org.antlr.runtime.tree.Tree = if != = call org.antlr.runtime.tree.Tree.getCharPositionInLine() call org.antlr.runtime.tree.Tree.getCharPositionInLine() call org.antlr.runtime.tree.Tree.getCharPositionInLine() call org.antlr.runtime.tree.Tree.getCharPositionInLine() call org.antlr.runtime.tree.Tree.getCharPositionInLine() return public public public public public public return public public = public public if == return return - public public return + Tree public public decl_stmt org.antlr.runtime.tree.Tree = if == return return call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.getChild(int) call org.antlr.runtime.tree.Tree.getChild(int) call Tree.getChildCount() call Tree.getChildCount() call Tree.getChildCount() call Tree.getChildCount() call Tree.getChildCount() - decl List public public decl_stmt java.util.List < extends extends = if == return new return call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() call decl List.toArray() new call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() public static < public static < return int decl List Tree public static < public static < decl_stmt java.util.List < = new < decl_stmt int = if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for = < ++ decl_stmt org.antlr.runtime.tree.Tree = for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() for = < ++ decl_stmt org.antlr.runtime.tree.Tree = for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl List public public if == return decl_stmt java.util.List < = for : if == return return decl List public < public < decl_stmt java.util.List < = new < return GrammarAST public public < if == for = < ++ decl_stmt org.antlr.tool.GrammarAST = call org.antlr.tool.GrammarAST._findAllType(int,List) call org.antlr.tool.GrammarAST._findAllType(int,List) call org.antlr.tool.GrammarAST._findAllType(int,List) call org.antlr.tool.GrammarAST._findAllType(int,List) call org.antlr.tool.GrammarAST._findAllType(int,List) GrammarAST public public if == return if ! instanceof return == decl_stmt org.antlr.tool.GrammarAST = return == call org.antlr.tool.GrammarAST.getLine() call org.antlr.tool.GrammarAST.getLine() call org.antlr.tool.GrammarAST.getLine() call org.antlr.tool.GrammarAST.getLine() call org.antlr.tool.GrammarAST.getLine() && == call org.antlr.tool.GrammarAST.getCharPositionInLine() call org.antlr.tool.GrammarAST.getCharPositionInLine() call org.antlr.tool.GrammarAST.getCharPositionInLine() call org.antlr.tool.GrammarAST.getCharPositionInLine() call org.antlr.tool.GrammarAST.getCharPositionInLine() public public if == return return decl Iterator decl Iterator public public if != return decl_stmt java.util.Iterator < = decl_stmt java.util.Iterator < = while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() if ! call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() return if call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() != call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() return return ! call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() GrammarAST public static public static if == return decl_stmt org.antlr.tool.GrammarAST = new call org.antlr.tool.GrammarAST.initialize(int,String) call org.antlr.tool.GrammarAST.initialize(int,String) call org.antlr.tool.GrammarAST.initialize(int,String) call org.antlr.tool.GrammarAST.initialize(int,String) call org.antlr.tool.GrammarAST.initialize(int,String) return public public return GrammarAST public static public static if == return decl_stmt org.antlr.tool.GrammarAST = for : call GrammarAST.addChild() call GrammarAST.addChild() call GrammarAST.addChild() call GrammarAST.addChild() call GrammarAST.addChild() return int decl List GrammarAST private static < private static < decl_stmt java.util.List < = new < for = < ++ decl_stmt org.antlr.tool.GrammarAST = decl_stmt int = call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() if == || == || == continue if == || == for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() else call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() == && call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() == && == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() new return GrammarAST GrammarAST public static public static if == return decl_stmt org.antlr.tool.GrammarAST = for = < ++ decl_stmt org.antlr.tool.GrammarAST = call GrammarAST.addChild() call GrammarAST.addChild() call GrammarAST.addChild() call GrammarAST.addChild() call GrammarAST.addChild() return GrammarAST public public = if == return for : if ! instanceof continue decl_stmt org.antlr.tool.GrammarAST = call org.antlr.tool.GrammarAST.setTreeEnclosingRuleNameDeeply(String) call org.antlr.tool.GrammarAST.setTreeEnclosingRuleNameDeeply(String) call org.antlr.tool.GrammarAST.setTreeEnclosingRuleNameDeeply(String) call org.antlr.tool.GrammarAST.setTreeEnclosingRuleNameDeeply(String) call org.antlr.tool.GrammarAST.setTreeEnclosingRuleNameDeeply(String) String public public decl_stmt java.lang.String = if != += + return public public if != = if != = int public public if != return decl_stmt int = for = < ++ if == ++ if == return return