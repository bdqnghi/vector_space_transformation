org.antlr.analysis org.antlr.tool.ErrorManager import org.antlr.tool.GrammarAST import org.antlr.tool.Rule import class org.antlr.analysis.NFAState super super extends int int Label String NFA int Rule decl Transition int int int int int GrammarAST int int boolean public public return Label public public if == throw new if > throw new + + if != = ++ decl_stmt org.antlr.analysis.Label = if call org.antlr.analysis.Label.isAtom() call org.antlr.analysis.Label.isAtom() call org.antlr.analysis.Label.isAtom() call org.antlr.analysis.Label.isAtom() call org.antlr.analysis.Label.isAtom() || call org.antlr.analysis.Label.isSet() call org.antlr.analysis.Label.isSet() call org.antlr.analysis.Label.isSet() call org.antlr.analysis.Label.isSet() call org.antlr.analysis.Label.isSet() if != = public public if == throw new = = = public public return int int NFAState public public decl_stmt org.antlr.analysis.NFAState = if == || == return decl_stmt int = decl_stmt int = call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() call NFA.grammar() switch case = + break case case = break case if == = else = break return public public = public public return public public = public public return public public = public public return public public = public public return > public public return