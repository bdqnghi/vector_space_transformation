org.antlr.tool org.antlr.analysis.Label import org.antlr.analysis.NFAState import org.antlr.grammar.v3.ANTLRParser import org.antlr.grammar.v3.AssignTokenTypesWalker import org.antlr.misc.Utils import org.antlr.runtime.RecognitionException import org.antlr.runtime.tree.CommonTreeNodeStream import java.util.ArrayList import java.util.HashSet import java.util.Iterator import java.util.LinkedHashMap import java.util.List import java.util.Map import java.util.Set import java.util.Vector import class org.antlr.tool.CompositeGrammar decl Vector decl Set boolean int int decl Vector CompositeGrammarTree decl Vector decl Map decl Vector decl Set int int decl Map protected protected call decl Vector.setSize() call decl Vector.setSize() call decl Vector.setSize() call decl Vector.setSize() call decl Vector.setSize() + - call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() + call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() + call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() + call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() + call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() + call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() + call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() + - call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() + - call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() + - call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public = new = public public return call org.antlr.tool.CompositeGrammarTree.getRule(String) call org.antlr.tool.CompositeGrammarTree.getRule(String) call org.antlr.tool.CompositeGrammarTree.getRule(String) call org.antlr.tool.CompositeGrammarTree.getRule(String) call org.antlr.tool.CompositeGrammarTree.getRule(String) public public return call org.antlr.tool.CompositeGrammarTree.getOption(String) call org.antlr.tool.CompositeGrammarTree.getOption(String) call org.antlr.tool.CompositeGrammarTree.getOption(String) call org.antlr.tool.CompositeGrammarTree.getOption(String) call org.antlr.tool.CompositeGrammarTree.getOption(String) public public if == = new new = CompositeGrammarTree public public decl_stmt org.antlr.tool.CompositeGrammarTree = call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) if == return if != return return decl List CompositeGrammarTree public < public < decl_stmt org.antlr.tool.CompositeGrammarTree = call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) if == return decl_stmt java.util.List < = call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.remove() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - return decl List CompositeGrammarTree CompositeGrammarTree decl List public < public < decl_stmt org.antlr.tool.CompositeGrammarTree = call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) decl_stmt java.util.List < = if == return decl_stmt java.util.List < = new < for = != && < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.tool.CompositeGrammarTree = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return decl List decl List public < public < decl_stmt java.util.List < = decl_stmt java.util.List < = if != call decl List.removeAll() call decl List.removeAll() call decl List.removeAll() call decl List.removeAll() call decl List.removeAll() return CompositeGrammarTree decl List CompositeGrammarTree public < public < if == return decl_stmt java.util.List < = new < decl_stmt org.antlr.tool.CompositeGrammarTree = call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) decl_stmt org.antlr.tool.CompositeGrammarTree = while != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = return decl Set Rule Rule public < extends extends public < extends extends if != return decl_stmt java.util.Set < extends extends = for < extends extends = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() decl_stmt org.antlr.tool.Rule = decl_stmt org.antlr.tool.Rule = if != || return decl Set decl List Grammar CompositeGrammarTree decl Set public < extends extends public < extends extends decl_stmt java.util.Set < = new < decl_stmt java.util.Set < = new < decl_stmt org.antlr.tool.CompositeGrammarTree = call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) decl_stmt java.util.List < = call org.antlr.tool.CompositeGrammarTree.getPreOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPreOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPreOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPreOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPreOrderedGrammarList() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.tool.Grammar = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() for : call org.antlr.tool.Grammar.getRules() call org.antlr.tool.Grammar.getRules() call org.antlr.tool.Grammar.getRules() call org.antlr.tool.Grammar.getRules() call org.antlr.tool.Grammar.getRules() if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return public public if == return return CompositeGrammarTree public public decl_stmt org.antlr.tool.CompositeGrammarTree = call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) call org.antlr.tool.CompositeGrammarTree.findNode(String) if != return return public public return ++ public public call decl Vector.setSize() call decl Vector.setSize() call decl Vector.setSize() call decl Vector.setSize() call decl Vector.setSize() + call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() call decl Vector.set() public public return call decl Vector.get() call decl Vector.get() call decl Vector.get() call decl Vector.get() call decl Vector.get() AssignTokenTypesWalker decl List Grammar public public throws decl_stmt AssignTokenTypesWalker = new decl_stmt java.util.List < = call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() for = != && < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.tool.Grammar = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call AssignTokenTypesWalker.setTreeNodeStream() call AssignTokenTypesWalker.setTreeNodeStream() call AssignTokenTypesWalker.setTreeNodeStream() call AssignTokenTypesWalker.setTreeNodeStream() call AssignTokenTypesWalker.setTreeNodeStream() new call org.antlr.tool.Grammar.getGrammarTree() call org.antlr.tool.Grammar.getGrammarTree() call org.antlr.tool.Grammar.getGrammarTree() call org.antlr.tool.Grammar.getGrammarTree() call org.antlr.tool.Grammar.getGrammarTree() try call AssignTokenTypesWalker.grammar_() call AssignTokenTypesWalker.grammar_() call AssignTokenTypesWalker.grammar_() call AssignTokenTypesWalker.grammar_() call AssignTokenTypesWalker.grammar_() catch call AssignTokenTypesWalker.defineTokens() call AssignTokenTypesWalker.defineTokens() call AssignTokenTypesWalker.defineTokens() call AssignTokenTypesWalker.defineTokens() call AssignTokenTypesWalker.defineTokens() decl List Grammar public public decl_stmt java.util.List < = call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() for = != && < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.tool.Grammar = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() if ! == || == continue for : call Grammar.grammarTree() call Grammar.grammarTree() call Grammar.grammarTree() call Grammar.grammarTree() call Grammar.grammarTree() call Grammar.grammarTree() call Grammar.grammarTree() call Grammar.grammarTree() call Grammar.grammarTree() if ! if call org.antlr.tool.Grammar.translateLeftRecursiveRule(GrammarAST) call org.antlr.tool.Grammar.translateLeftRecursiveRule(GrammarAST) call org.antlr.tool.Grammar.translateLeftRecursiveRule(GrammarAST) call org.antlr.tool.Grammar.translateLeftRecursiveRule(GrammarAST) call org.antlr.tool.Grammar.translateLeftRecursiveRule(GrammarAST) decl List Grammar public public call org.antlr.tool.CompositeGrammarTree.trimLexerImportsIntoCombined() call org.antlr.tool.CompositeGrammarTree.trimLexerImportsIntoCombined() call org.antlr.tool.CompositeGrammarTree.trimLexerImportsIntoCombined() call org.antlr.tool.CompositeGrammarTree.trimLexerImportsIntoCombined() call org.antlr.tool.CompositeGrammarTree.trimLexerImportsIntoCombined() decl_stmt java.util.List < = call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() for = != && < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.tool.Grammar = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.antlr.tool.Grammar.defineGrammarSymbols() call org.antlr.tool.Grammar.defineGrammarSymbols() call org.antlr.tool.Grammar.defineGrammarSymbols() call org.antlr.tool.Grammar.defineGrammarSymbols() call org.antlr.tool.Grammar.defineGrammarSymbols() for = != && < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.tool.Grammar = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.antlr.tool.Grammar.checkNameSpaceAndActions() call org.antlr.tool.Grammar.checkNameSpaceAndActions() call org.antlr.tool.Grammar.checkNameSpaceAndActions() call org.antlr.tool.Grammar.checkNameSpaceAndActions() call org.antlr.tool.Grammar.checkNameSpaceAndActions() decl List Grammar public public if return decl_stmt java.util.List < = call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() call org.antlr.tool.CompositeGrammarTree.getPostOrderedGrammarList() for = != && < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.tool.Grammar = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.antlr.tool.Grammar.createRuleStartAndStopNFAStates() call org.antlr.tool.Grammar.createRuleStartAndStopNFAStates() call org.antlr.tool.Grammar.createRuleStartAndStopNFAStates() call org.antlr.tool.Grammar.createRuleStartAndStopNFAStates() call org.antlr.tool.Grammar.createRuleStartAndStopNFAStates() for = != && < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.tool.Grammar = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() decl Set public public decl_stmt java.util.Set < = new < decl Set decl Set public public < decl_stmt java.util.Set < = new < decl_stmt java.util.Set < = new < for : if ! call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() else if ! call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() = if != for :