org.antlr.analysis org.antlr.grammar.v3.ANTLRParser import org.antlr.misc.MultiMap import org.antlr.misc.Utils import org.antlr.runtime.Token import org.antlr.tool.ErrorManager import org.antlr.tool.Grammar import org.antlr.tool.GrammarAST import java.util.* import class org.antlr.analysis.DecisionProbe Integer decl Set decl Map decl MultiMap decl Map boolean Integer decl Map Integer decl Set decl Map decl Set boolean decl Set decl Set decl Set DFA boolean public public return call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() public public return call org.antlr.runtime.DFA.isReduced() call org.antlr.runtime.DFA.isReduced() call org.antlr.runtime.DFA.isReduced() call org.antlr.runtime.DFA.isReduced() call org.antlr.runtime.DFA.isReduced() public public return call org.antlr.runtime.DFA.isCyclic() call org.antlr.runtime.DFA.isCyclic() call org.antlr.runtime.DFA.isCyclic() call org.antlr.runtime.DFA.isCyclic() call org.antlr.runtime.DFA.isCyclic() public public if call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() && call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() call decl Set.isEmpty() && call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() return if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > for : if ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return return return public public return call decl MultiMap.size() call decl MultiMap.size() call decl MultiMap.size() call decl MultiMap.size() call decl MultiMap.size() > public public return public public return call org.antlr.runtime.DFA.getNumberOfStates() call org.antlr.runtime.DFA.getNumberOfStates() call org.antlr.runtime.DFA.getNumberOfStates() call org.antlr.runtime.DFA.getNumberOfStates() call org.antlr.runtime.DFA.getNumberOfStates() public < public < return call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() public < public < return public < public < return decl List decl Set public < public < decl_stmt java.util.Set < = if == return decl_stmt java.util.List < = new < call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return public < public < return public < public < return Integer public public decl_stmt java.lang.Integer = call decl MultiMap.remove() call decl MultiMap.remove() call decl MultiMap.remove() call decl MultiMap.remove() call decl MultiMap.remove() decl List decl Set public < public < decl_stmt java.util.Set < = = new < decl_stmt java.util.List < = new < if == || == return return StringBuilder Grammar Label public public < extends extends decl_stmt org.antlr.tool.Grammar = decl_stmt java.lang.StringBuilder = new for < extends extends = decl_stmt org.antlr.analysis.Label = call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call org.antlr.analysis.Label.toString() call org.antlr.analysis.Label.toString() call org.antlr.analysis.Label.toString() call org.antlr.analysis.Label.toString() call org.antlr.analysis.Label.toString() if && != call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() decl List NFAState NFAState NFAState NFAState public < extends extends public < extends extends < extends extends decl_stmt org.antlr.analysis.NFAState = call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() decl_stmt java.util.List < = new < for = <= ++ decl_stmt org.antlr.analysis.NFAState = call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() decl_stmt org.antlr.analysis.NFAState = call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() decl_stmt org.antlr.analysis.NFAState = call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() = new < return decl Map public public decl_stmt java.util.Map < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == return return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() public public return call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() > public < public < return public < < public < < return call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() boolean DFAState decl Set decl Map GrammarAST decl Set decl Iterator GrammarAST decl Set decl List GrammarAST boolean decl Set String GrammarAST public public if && ! call org.antlr.runtime.DFA.getAutoBacktrackMode() call org.antlr.runtime.DFA.getAutoBacktrackMode() call org.antlr.runtime.DFA.getAutoBacktrackMode() call org.antlr.runtime.DFA.getAutoBacktrackMode() call org.antlr.runtime.DFA.getAutoBacktrackMode() decl_stmt java.util.Set < = decl_stmt java.util.Set < = if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > decl_stmt java.util.Iterator < = call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() call decl Set.iterator() while call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() call decl Iterator.hasNext() && ! call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() decl_stmt org.antlr.analysis.DFAState = call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() call decl Iterator.next() decl_stmt java.util.Map < < = if != && call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() call decl Map.size() > if == || ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() decl_stmt java.util.Set < = if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > decl_stmt boolean = decl_stmt org.antlr.tool.GrammarAST = call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() call DFAState.dfa() if != decl_stmt java.lang.String = call org.antlr.tool.GrammarAST.getBlockOption(String) call org.antlr.tool.GrammarAST.getBlockOption(String) call org.antlr.tool.GrammarAST.getBlockOption(String) call org.antlr.tool.GrammarAST.getBlockOption(String) call org.antlr.tool.GrammarAST.getBlockOption(String) if != && call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) call java.lang.String.equals(Object) = if ! decl_stmt java.util.Set < = if call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() > for : if ! decl_stmt java.util.List < = call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() call org.antlr.runtime.DFA.getUnreachableAlts() if != && call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > decl_stmt boolean = if call org.antlr.runtime.DFA.isTokensRuleDecision() call org.antlr.runtime.DFA.isTokensRuleDecision() call org.antlr.runtime.DFA.isTokensRuleDecision() call org.antlr.runtime.DFA.isTokensRuleDecision() call org.antlr.runtime.DFA.isTokensRuleDecision() for : decl_stmt org.antlr.tool.GrammarAST = call org.antlr.runtime.DFA.getDecisionASTNode() call org.antlr.runtime.DFA.getDecisionASTNode() call org.antlr.runtime.DFA.getDecisionASTNode() call org.antlr.runtime.DFA.getDecisionASTNode() call org.antlr.runtime.DFA.getDecisionASTNode() decl_stmt org.antlr.tool.GrammarAST = call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() - decl_stmt org.antlr.tool.GrammarAST = call GrammarAST.getFirstChildWithType() call GrammarAST.getFirstChildWithType() call GrammarAST.getFirstChildWithType() call GrammarAST.getFirstChildWithType() call GrammarAST.getFirstChildWithType() if != = call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() if else GrammarAST decl List GrammarAST Integer protected protected < decl_stmt java.util.List < = new < decl_stmt java.lang.Integer = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - decl_stmt org.antlr.tool.GrammarAST = call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() decl_stmt org.antlr.tool.GrammarAST if call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() == = call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() else = call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() - if call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() call org.antlr.tool.GrammarAST.getType() != && call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() == && call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() call GrammarAST.getChild() == decl Map decl Map decl Set DFAState decl List decl Map decl Collection decl Set decl Set protected protected decl_stmt java.util.Set < = call decl MultiMap.keySet() call decl MultiMap.keySet() call decl MultiMap.keySet() call decl MultiMap.keySet() call decl MultiMap.keySet() decl_stmt java.util.Map < < < = new < < < decl_stmt java.util.Map < = new < decl_stmt java.util.Set < = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt java.util.List < = new < for : decl_stmt java.util.Map < < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() decl_stmt java.util.Set < = call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() call decl Map.keySet() decl_stmt java.util.Collection < < = call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() call decl Map.values() decl_stmt org.antlr.analysis.DFAState = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() NFAConfiguration Integer decl Set DFAState decl Map String Transition NFAState decl List RuleClosureTransition private private < < < < < < < for : decl_stmt java.util.List < extends extends = for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt org.antlr.analysis.NFAConfiguration = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.antlr.analysis.NFAState = call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() decl_stmt org.antlr.analysis.Transition = decl_stmt RuleClosureTransition = decl_stmt java.lang.String = decl_stmt java.lang.Integer = decl_stmt java.util.Map < < = if == = new < < decl_stmt java.util.Set < = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == = new < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() if == decl_stmt org.antlr.analysis.DFAState = call org.antlr.runtime.DFA.getState(int) call org.antlr.runtime.DFA.getState(int) call org.antlr.runtime.DFA.getState(int) call org.antlr.runtime.DFA.getState(int) call org.antlr.runtime.DFA.getState(int) decl Set DFAState private < private < < decl_stmt java.util.Set < = new < for : decl_stmt org.antlr.analysis.DFAState = call org.antlr.runtime.DFA.getState(int) call org.antlr.runtime.DFA.getState(int) call org.antlr.runtime.DFA.getState(int) call org.antlr.runtime.DFA.getState(int) call org.antlr.runtime.DFA.getState(int) call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() return public public call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() public public = ++ call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call DFA.recursiveAltSet() call DFA.recursiveAltSet() call DFA.recursiveAltSet() call DFA.recursiveAltSet() call DFA.recursiveAltSet() call DFA.recursiveAltSet() call DFA.recursiveAltSet() call DFA.recursiveAltSet() call DFA.recursiveAltSet() Integer public public if > decl_stmt java.lang.Integer = call decl MultiMap.map() call decl MultiMap.map() call decl MultiMap.map() call decl MultiMap.map() call decl MultiMap.map() public public < call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.addAll() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call org.antlr.runtime.DFA.getDecisionNumber() call org.antlr.runtime.DFA.getDecisionNumber() call org.antlr.runtime.DFA.getDecisionNumber() call org.antlr.runtime.DFA.getDecisionNumber() call org.antlr.runtime.DFA.getDecisionNumber() public public < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public if call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call org.antlr.runtime.DFA.getDecisionNumber() call org.antlr.runtime.DFA.getDecisionNumber() call org.antlr.runtime.DFA.getDecisionNumber() call org.antlr.runtime.DFA.getDecisionNumber() call org.antlr.runtime.DFA.getDecisionNumber() decl Map public public < extends extends decl_stmt java.util.Map < = new < call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.putAll() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() public public < < call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() DFAState DFAState Transition Integer protected protected < if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return decl_stmt org.antlr.analysis.DFAState = call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() for = < call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() ++ decl_stmt org.antlr.analysis.Transition = call org.antlr.analysis.DFAState.transition(int) call org.antlr.analysis.DFAState.transition(int) call org.antlr.analysis.DFAState.transition(int) call org.antlr.analysis.DFAState.transition(int) call org.antlr.analysis.DFAState.transition(int) decl_stmt org.antlr.analysis.DFAState = decl_stmt java.lang.Integer = call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() call decl Map.get() if == continue if == call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return if == continue if call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() call decl Map.put() return decl Set boolean protected < protected < decl_stmt java.util.Set < = new < = new < if == || == return decl_stmt boolean = return DFAState Transition protected protected < < call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() for = < ++ decl_stmt org.antlr.analysis.Transition = decl_stmt org.antlr.analysis.DFAState = if && ! call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() if != return new boolean NFAState String Transition Label protected protected < extends extends < super super decl_stmt java.lang.String = if call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() return call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() call decl Set.add() for = < ++ decl_stmt org.antlr.analysis.Transition = decl_stmt org.antlr.analysis.NFAState = decl_stmt org.antlr.analysis.Label = if call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() || call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() decl_stmt boolean = if call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() return - continue if call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() if == - call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() return decl_stmt boolean = + if call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() return - continue call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() call decl Set.remove() return StringBuilder protected protected decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() NFAState NFAState NFAState NFAState RuleClosureTransition public public decl_stmt org.antlr.analysis.NFAState = call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() call org.antlr.runtime.DFA.getNFADecisionStartState() decl_stmt org.antlr.analysis.NFAState = call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() call DFA.nfa() decl_stmt org.antlr.analysis.NFAState = decl_stmt RuleClosureTransition = decl_stmt org.antlr.analysis.NFAState = return public public call decl MultiMap.clear() call decl MultiMap.clear() call decl MultiMap.clear() call decl MultiMap.clear() call decl MultiMap.clear()