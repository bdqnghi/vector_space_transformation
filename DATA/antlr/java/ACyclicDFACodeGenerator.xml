org.antlr.codegen java.util.ArrayList import org.antlr.analysis.* import org.antlr.misc.Utils import org.stringtemplate.v4.ST import org.stringtemplate.v4.STGroup import java.util.List import class org.antlr.codegen.ACyclicDFACodeGenerator CodeGenerator public public return int DFAState ST Integer String decl List String decl List Transition ST SemanticContext ST String DFAState Transition String ST String protected protected if decl_stmt ST = call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() return decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt java.lang.String = if call org.antlr.codegen.CodeGenerator.canGenerateSwitch(DFAState) call org.antlr.codegen.CodeGenerator.canGenerateSwitch(DFAState) call org.antlr.codegen.CodeGenerator.canGenerateSwitch(DFAState) call org.antlr.codegen.CodeGenerator.canGenerateSwitch(DFAState) call org.antlr.codegen.CodeGenerator.canGenerateSwitch(DFAState) = = = = decl_stmt ST = if == = else if == = call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() decl_stmt int = decl_stmt org.antlr.analysis.DFAState = for = < ++ decl_stmt org.antlr.analysis.Transition = if call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() == = = call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() call org.antlr.analysis.DFAState.getUniquelyPredictedAlt() continue decl_stmt ST = if call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() call ST.impl() != decl_stmt java.util.List < = call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() decl_stmt java.util.List < = new < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt java.lang.Integer = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt java.lang.String = call org.antlr.codegen.CodeGenerator.getTokenTypeAsTargetLabel(int) call org.antlr.codegen.CodeGenerator.getTokenTypeAsTargetLabel(int) call org.antlr.codegen.CodeGenerator.getTokenTypeAsTargetLabel(int) call org.antlr.codegen.CodeGenerator.getTokenTypeAsTargetLabel(int) call org.antlr.codegen.CodeGenerator.getTokenTypeAsTargetLabel(int) call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() else call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call org.antlr.codegen.CodeGenerator.genLabelExpr(STGroup,Transition,int) call org.antlr.codegen.CodeGenerator.genLabelExpr(STGroup,Transition,int) call org.antlr.codegen.CodeGenerator.genLabelExpr(STGroup,Transition,int) call org.antlr.codegen.CodeGenerator.genLabelExpr(STGroup,Transition,int) call org.antlr.codegen.CodeGenerator.genLabelExpr(STGroup,Transition,int) if ! call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() decl_stmt org.antlr.analysis.DFAState = decl_stmt org.antlr.analysis.SemanticContext = call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() call org.antlr.analysis.DFAState.getGatedPredicatesInNFAConfigurations() if != decl_stmt ST = call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.analysis.SemanticContext.genExpr(CodeGenerator,STGroup,DFA) call org.antlr.codegen.CodeGenerator.getTemplates() call org.antlr.codegen.CodeGenerator.getTemplates() call org.antlr.codegen.CodeGenerator.getTemplates() call org.antlr.codegen.CodeGenerator.getTemplates() call org.antlr.codegen.CodeGenerator.getTemplates() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() decl_stmt ST = + call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() if != call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() else if != && call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() > for = < call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() ++ decl_stmt org.antlr.analysis.Transition = call org.antlr.analysis.DFAState.transition(int) call org.antlr.analysis.DFAState.transition(int) call org.antlr.analysis.DFAState.transition(int) call org.antlr.analysis.DFAState.transition(int) call org.antlr.analysis.DFAState.transition(int) decl_stmt ST = call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call org.antlr.codegen.CodeGenerator.genSemanticPredicateExpr(STGroup,Transition) call org.antlr.codegen.CodeGenerator.genSemanticPredicateExpr(STGroup,Transition) call org.antlr.codegen.CodeGenerator.genSemanticPredicateExpr(STGroup,Transition) call org.antlr.codegen.CodeGenerator.genSemanticPredicateExpr(STGroup,Transition) call org.antlr.codegen.CodeGenerator.genSemanticPredicateExpr(STGroup,Transition) decl_stmt ST = + call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() return