org.antlr.analysis org.antlr.misc.IntSet import org.antlr.runtime.CommonToken import org.antlr.runtime.Token import org.antlr.tool.Grammar import java.util.ArrayList import java.util.HashSet import java.util.List import java.util.Set import class org.antlr.analysis.MachineProbe DFA decl Set < < decl_stmt java.util.Set < = new < return Transition decl List decl List public < public < < decl_stmt java.util.List < = new < if call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return for = < ++ decl_stmt org.antlr.analysis.Transition = if ! decl_stmt java.util.List < = if != call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() call decl List.addAll() return return Transition decl List decl List DFAState DFAState public < public < decl_stmt java.util.List < = decl_stmt java.util.List < = new < for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() - ++ decl_stmt org.antlr.analysis.DFAState = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt org.antlr.analysis.DFAState = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() + for = < call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() call org.antlr.analysis.DFAState.getNumberOfTransitions() ++ decl_stmt org.antlr.analysis.Transition = call DFAState.getTransition() call DFAState.getTransition() call DFAState.getTransition() call DFAState.getTransition() call DFAState.getTransition() if == call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() return decl List public public < decl_stmt java.util.List < = new < for : call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() return call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() call decl List.toString() decl Set IntSet decl List CommonToken Transition decl Set Token public < public < < < < decl_stmt java.util.List < = new < for = < - ++ decl_stmt java.util.Set < = decl_stmt java.util.Set < = + decl_stmt org.antlr.misc.IntSet = for : for = < ++ decl_stmt org.antlr.analysis.Transition = if ! call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() call org.antlr.analysis.Transition.isEpsilon() && ! call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() && call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() call decl Set.contains() if != decl_stmt org.antlr.runtime.Token = decl_stmt org.antlr.runtime.CommonToken = new call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getType() call org.antlr.runtime.Token.getText() call org.antlr.runtime.Token.getText() call org.antlr.runtime.Token.getText() call org.antlr.runtime.Token.getText() call org.antlr.runtime.Token.getText() call org.antlr.runtime.CommonToken.setLine(int) call org.antlr.runtime.CommonToken.setLine(int) call org.antlr.runtime.CommonToken.setLine(int) call org.antlr.runtime.CommonToken.setLine(int) call org.antlr.runtime.CommonToken.setLine(int) call org.antlr.runtime.Token.getLine() call org.antlr.runtime.Token.getLine() call org.antlr.runtime.Token.getLine() call org.antlr.runtime.Token.getLine() call org.antlr.runtime.Token.getLine() call org.antlr.runtime.CommonToken.setCharPositionInLine(int) call org.antlr.runtime.CommonToken.setCharPositionInLine(int) call org.antlr.runtime.CommonToken.setCharPositionInLine(int) call org.antlr.runtime.CommonToken.setCharPositionInLine(int) call org.antlr.runtime.CommonToken.setCharPositionInLine(int) call org.antlr.runtime.Token.getCharPositionInLine() call org.antlr.runtime.Token.getCharPositionInLine() call org.antlr.runtime.Token.getCharPositionInLine() call org.antlr.runtime.Token.getCharPositionInLine() call org.antlr.runtime.Token.getCharPositionInLine() call decl List.add() call decl List.add() call decl List.add() call decl List.add() call decl List.add() break break return