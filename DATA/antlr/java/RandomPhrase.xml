org.antlr.tool org.antlr.Tool import org.antlr.analysis.Label import org.antlr.analysis.NFAState import org.antlr.analysis.RuleClosureTransition import org.antlr.analysis.Transition import org.antlr.misc.IntervalSet import org.antlr.misc.Utils import java.io.BufferedReader import java.io.FileReader import java.util.ArrayList import java.util.Collection import java.util.List import java.util.Random import java.util.Stack import class org.antlr.tool.RandomPhrase boolean Random NFAState int NFAState Transition int NFAState NFAState Transition int RuleClosureTransition decl Stack protected static protected static < decl_stmt org.antlr.analysis.NFAState = decl_stmt org.antlr.analysis.NFAState = decl_stmt java.util.Stack < = new < while if == && call decl Stack.isEmpty() call decl Stack.isEmpty() call decl Stack.isEmpty() call decl Stack.isEmpty() call decl Stack.isEmpty() break if + if call org.antlr.analysis.NFAState.getNumberOfTransitions() call org.antlr.analysis.NFAState.getNumberOfTransitions() call org.antlr.analysis.NFAState.getNumberOfTransitions() call org.antlr.analysis.NFAState.getNumberOfTransitions() call org.antlr.analysis.NFAState.getNumberOfTransitions() == if + return if call NFAState.isAcceptState() call NFAState.isAcceptState() call NFAState.isAcceptState() call NFAState.isAcceptState() call NFAState.isAcceptState() decl_stmt org.antlr.analysis.NFAState = call decl Stack.pop() call decl Stack.pop() call decl Stack.pop() call decl Stack.pop() call decl Stack.pop() if + decl_stmt RuleClosureTransition = = continue if call org.antlr.analysis.NFAState.getNumberOfTransitions() call org.antlr.analysis.NFAState.getNumberOfTransitions() call org.antlr.analysis.NFAState.getNumberOfTransitions() call org.antlr.analysis.NFAState.getNumberOfTransitions() call org.antlr.analysis.NFAState.getNumberOfTransitions() == decl_stmt org.antlr.analysis.Transition = if instanceof call decl Stack.push() call decl Stack.push() call decl Stack.push() call decl Stack.push() call decl Stack.push() if + else if call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() || call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() call Transition.label() = continue decl_stmt int = call org.antlr.analysis.NFAState.getDecisionNumber() call org.antlr.analysis.NFAState.getDecisionNumber() call org.antlr.analysis.NFAState.getDecisionNumber() call org.antlr.analysis.NFAState.getDecisionNumber() call org.antlr.analysis.NFAState.getDecisionNumber() if == continue decl_stmt int = decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) + if + decl_stmt org.antlr.analysis.NFAState = decl_stmt org.antlr.analysis.Transition = = int IntervalSet protected static protected static if decl_stmt org.antlr.misc.IntervalSet = decl_stmt int = call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call java.util.Random.nextInt(int) call org.antlr.misc.IntervalSet.size() call org.antlr.misc.IntervalSet.size() call org.antlr.misc.IntervalSet.size() call org.antlr.misc.IntervalSet.size() call org.antlr.misc.IntervalSet.size() return call org.antlr.misc.IntervalSet.get(int) call org.antlr.misc.IntervalSet.get(int) call org.antlr.misc.IntervalSet.get(int) call org.antlr.misc.IntervalSet.get(int) call org.antlr.misc.IntervalSet.get(int) else return FileReader Grammar decl List Grammar CompositeGrammar Tool String String int decl List String long String Integer BufferedReader String decl List Integer String public static public static if < return decl_stmt java.lang.String = decl_stmt java.lang.String = decl_stmt long = if == decl_stmt java.lang.String = = try = new decl_stmt org.antlr.tool.CompositeGrammar = new decl_stmt org.antlr.gunit.swingui.Tool = new decl_stmt org.antlr.tool.Grammar = new call org.antlr.tool.CompositeGrammar.setDelegationRoot(Grammar) call org.antlr.tool.CompositeGrammar.setDelegationRoot(Grammar) call org.antlr.tool.CompositeGrammar.setDelegationRoot(Grammar) call org.antlr.tool.CompositeGrammar.setDelegationRoot(Grammar) call org.antlr.tool.CompositeGrammar.setDelegationRoot(Grammar) decl_stmt FileReader = new decl_stmt java.io.BufferedReader = new call org.antlr.tool.Grammar.parseAndBuildAST() call org.antlr.tool.Grammar.parseAndBuildAST() call org.antlr.tool.Grammar.parseAndBuildAST() call org.antlr.tool.Grammar.parseAndBuildAST() call org.antlr.tool.Grammar.parseAndBuildAST() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call BufferedReader.close() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() call Grammar.composite() decl_stmt java.util.List < extends extends extends < extends extends = call org.antlr.tool.Grammar.checkAllRulesForLeftRecursion() call org.antlr.tool.Grammar.checkAllRulesForLeftRecursion() call org.antlr.tool.Grammar.checkAllRulesForLeftRecursion() call org.antlr.tool.Grammar.checkAllRulesForLeftRecursion() call org.antlr.tool.Grammar.checkAllRulesForLeftRecursion() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > return if call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) call org.antlr.tool.Grammar.getRule(String) == + return decl_stmt java.lang.String = call org.antlr.tool.Grammar.getLexerGrammar() call org.antlr.tool.Grammar.getLexerGrammar() call org.antlr.tool.Grammar.getLexerGrammar() call org.antlr.tool.Grammar.getLexerGrammar() call org.antlr.tool.Grammar.getLexerGrammar() decl_stmt org.antlr.tool.Grammar = new call org.antlr.tool.Grammar.importTokenVocabulary(Grammar) call org.antlr.tool.Grammar.importTokenVocabulary(Grammar) call org.antlr.tool.Grammar.importTokenVocabulary(Grammar) call org.antlr.tool.Grammar.importTokenVocabulary(Grammar) call org.antlr.tool.Grammar.importTokenVocabulary(Grammar) = if != call org.antlr.tool.Grammar.setGrammarContent(String) call org.antlr.tool.Grammar.setGrammarContent(String) call org.antlr.tool.Grammar.setGrammarContent(String) call org.antlr.tool.Grammar.setGrammarContent(String) call org.antlr.tool.Grammar.setGrammarContent(String) else + call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() call org.antlr.tool.Grammar.buildNFA() = call org.antlr.tool.Grammar.checkAllRulesForLeftRecursion() call org.antlr.tool.Grammar.checkAllRulesForLeftRecursion() call org.antlr.tool.Grammar.checkAllRulesForLeftRecursion() call org.antlr.tool.Grammar.checkAllRulesForLeftRecursion() call org.antlr.tool.Grammar.checkAllRulesForLeftRecursion() if call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() > return decl_stmt java.util.List < = new < + for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt java.lang.Integer = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() decl_stmt int = decl_stmt java.lang.String = call org.antlr.tool.Grammar.getTokenDisplayName(int) call org.antlr.tool.Grammar.getTokenDisplayName(int) call org.antlr.tool.Grammar.getTokenDisplayName(int) call org.antlr.tool.Grammar.getTokenDisplayName(int) call org.antlr.tool.Grammar.getTokenDisplayName(int) if call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) call java.lang.String.charAt(int) decl_stmt java.util.List < = new < for = < call decl List.size() call decl List.size() call decl List.size() call decl List.size() call decl List.size() ++ decl_stmt java.lang.Integer = call decl List.get() call decl List.get() call decl List.get() call decl List.get() call decl List.get() char call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() call java.lang.Integer.intValue() else decl_stmt java.lang.String = call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.substring(int) call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() call java.lang.String.length() - + catch + + + + + catch + + + + +