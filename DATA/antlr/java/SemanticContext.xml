org.antlr.analysis org.antlr.codegen.CodeGenerator import org.antlr.grammar.v3.ANTLRParser import org.antlr.tool.Grammar import org.antlr.tool.GrammarAST import org.stringtemplate.v4.ST import org.stringtemplate.v4.STGroup import java.util.* import class org.antlr.analysis.SemanticContext SemanticContext public public Predicate public public if ! instanceof return decl_stmt Predicate = if != return if != return return call Predicate.predicateAST() call Predicate.predicateAST() call Predicate.predicateAST() call Predicate.predicateAST() call Predicate.predicateAST() call Predicate.predicateAST() call Predicate.predicateAST() call Predicate.predicateAST() call Predicate.predicateAST() public public if != return if == return return ST String String public public decl_stmt ST if != if = else = decl_stmt java.lang.String = if != call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() else = new call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() return if != decl_stmt java.lang.String = call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() return public public if return return public public return != && == || == public public return != && == || == public public if public public if == return return public public if != return return new public public return public public return public public if != return return new public public return public public return SemanticContext SemanticContext public public decl_stmt org.antlr.analysis.SemanticContext = for : decl_stmt org.antlr.analysis.SemanticContext = if != = return public public for : if return return public public for : if return return public public for : NOT decl Set CommutativePredicate decl ArrayList public public if == return if == decl_stmt CommutativePredicate = decl_stmt java.util.Set < = if != call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() return return if instanceof decl_stmt NOT = if instanceof && call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() != decl_stmt java.util.Set < = if != call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() call decl Set.size() return decl_stmt java.util.ArrayList < = new < for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return return public public return int StringBuilder public public decl_stmt java.lang.StringBuilder = new call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) decl_stmt int = for : if > call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) ++ call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) call java.lang.StringBuilder.append(boolean) return call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() call java.lang.StringBuilder.toString() ST ST public public decl_stmt ST = for : if == = continue decl_stmt ST if != = else = new call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() = return public public return public public return int public public decl_stmt int = for : = ^ return ST public public decl_stmt ST if != = else = new for : call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() return public public return public public return int public public decl_stmt int = for : = ~ ^ return ST public public decl_stmt ST if != = else = new call ST.add() call ST.add() call ST.add() call ST.add() call ST.add() return SemanticContext public public decl_stmt org.antlr.analysis.SemanticContext = if == return return new public public return public public return public public public public if ! instanceof return return public public return ~ public public return + + SemanticContext decl SemanticContext AND boolean public static public static if instanceof || instanceof return new decl_stmt org.antlr.analysis.SemanticContext = decl_stmt org.antlr.analysis.SemanticContext = = = decl_stmt boolean = != && != && ! instanceof if return if instanceof || instanceof return new if == || == return if == || == return if instanceof return if instanceof return decl_stmt AND = new if call AND.operands() call AND.operands() call AND.operands() call AND.operands() call AND.operands() call AND.operands() call AND.operands() call AND.operands() call AND.operands() == return call AND.operands() call AND.operands() call AND.operands() call AND.operands() call AND.operands() call AND.operands() call AND.operands() call AND.operands() call AND.operands() return SemanticContext decl SemanticContext OR boolean NOT public static public static if instanceof || instanceof return new decl_stmt org.antlr.analysis.SemanticContext = decl_stmt org.antlr.analysis.SemanticContext = = = decl_stmt boolean = != && != && ! instanceof if return if == || == || instanceof return if == || == || instanceof return if instanceof || instanceof || instanceof return new if instanceof decl_stmt NOT = if call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() return new else if instanceof decl_stmt NOT = if call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() call NOT.ctx() return new decl_stmt OR = new if call OR.operands() call OR.operands() call OR.operands() call OR.operands() call OR.operands() call OR.operands() call OR.operands() call OR.operands() call OR.operands() == return call OR.operands() call OR.operands() call OR.operands() call OR.operands() call OR.operands() call OR.operands() call OR.operands() call OR.operands() call OR.operands() return public static public static if instanceof return if instanceof return new else if instanceof return new return new decl HashSet decl HashSet decl HashSet public static public static if == || == || instanceof return new if == || == || instanceof return new if instanceof || instanceof return new new decl_stmt java.util.HashSet < = new < decl_stmt java.util.HashSet < = new < decl_stmt java.util.HashSet < = new < call decl HashSet.retainAll() call decl HashSet.retainAll() call decl HashSet.retainAll() call decl HashSet.retainAll() call decl HashSet.retainAll() if call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() return new call decl HashSet.removeAll() call decl HashSet.removeAll() call decl HashSet.removeAll() call decl HashSet.removeAll() call decl HashSet.removeAll() if call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() = new else if call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() == = call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() else = new call decl HashSet.removeAll() call decl HashSet.removeAll() call decl HashSet.removeAll() call decl HashSet.removeAll() call decl HashSet.removeAll() if call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() = new else if call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() == = call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() else = new if call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() == return new call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() return new new decl HashSet decl HashSet decl HashSet public static public static decl_stmt java.util.HashSet < = new < decl_stmt java.util.HashSet < = new < decl_stmt java.util.HashSet < = new < call decl HashSet.retainAll() call decl HashSet.retainAll() call decl HashSet.retainAll() call decl HashSet.retainAll() call decl HashSet.retainAll() if call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() return new call decl HashSet.removeAll() call decl HashSet.removeAll() call decl HashSet.removeAll() call decl HashSet.removeAll() call decl HashSet.removeAll() if call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() = new else if call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() == = call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() else = new call decl HashSet.removeAll() call decl HashSet.removeAll() call decl HashSet.removeAll() call decl HashSet.removeAll() call decl HashSet.removeAll() if call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() call decl HashSet.isEmpty() = new else if call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() == = call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() else = new if call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() call decl HashSet.size() == return new call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() call decl HashSet.iterator() return new new decl ArrayList decl Collection public static < public static < if instanceof return if instanceof decl_stmt java.util.Collection < = decl_stmt java.util.List < = new < call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return decl_stmt java.util.ArrayList < = new < call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return decl ArrayList decl Collection public static < public static < if instanceof return if instanceof decl_stmt java.util.Collection < = decl_stmt java.util.List < = new < call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() call decl Collection.size() for : call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return decl_stmt java.util.ArrayList < = new < call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() call decl ArrayList.add() return