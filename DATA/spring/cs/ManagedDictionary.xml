Spring.Objects.Factory.Config System using System.Collections using System.Collections.Generic using System.Collections.Specialized using System.Globalization using Spring.Core using Spring.Core.TypeConversion using Spring.Core.TypeResolution using Spring.Util using class attribute Spring.Objects.Factory.Config.ManagedDictionary super super Hashtable super IManagedCollection super IMergable string bool string return = return = string object IDictionary Type decl Type Type Type object public public decl_stmt System.Collections.Generic.IDictionary decl_stmt System.Type = if = decl_stmt System.Type = if = if == && == = new else decl_stmt System.Type = typeof <,> decl_stmt System.Type = new == typeof object : == typeof object : = call System.Type.MakeGenericType(Type) call System.Type.MakeGenericType(Type) call System.Type.MakeGenericType(Type) call System.Type.MakeGenericType(Type) call System.Type.MakeGenericType(Type) = foreach in decl_stmt string = decl_stmt object = decl_stmt object = if != try = catch throw new + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() if != try = + + + catch throw new + call object.GetType() call object.GetType() call object.GetType() call object.GetType() call object.GetType() call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) return return = var var var public public if ! throw new if == return decl_stmt var = as if == throw new + + decl_stmt var = new decl_stmt var = as if != = = foreach in = foreach in = return