Spring.Objects.Factory.Support System using System.Collections using System.Collections.Generic using System.Collections.Specialized using System.Globalization using System.Linq using Common.Logging using Spring.Core using Spring.Core.TypeConversion using Spring.Objects.Factory.Config using Spring.Util using Spring.Expressions using Spring.Context.Support using class attribute Spring.Objects.Factory.Support.DefaultListableObjectFactory super super AbstractAutowireCapableObjectFactory super IConfigurableListableObjectFactory super IObjectDefinitionRegistry ILog decl List decl IDictionary decl IDictionary decl IDictionary IAutowireCandidateResolver return = protected override < protected override < return decl IList RootObjectDefinition decl List protected override < protected override < decl_stmt System.Collections.Generic.List < = new < if == = new < < decl_stmt System.Collections.Generic.IList < = foreach in if decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = if != foreach in if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out = new < call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl IDictionary.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out return return new Type private private if == return decl_stmt System.Type = return != && private private return RootObjectDefinition private private if == return decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = return && return public override public override return call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() IObjectDefinition public override public override if is try catch throw new decl_stmt Spring.Objects.Factory.Config.IObjectDefinition if call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if ! throw new else region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() endregion else call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() = RootObjectDefinition IFactoryObject Type string int public public region region if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + endregion try decl_stmt int = for = < ++ decl_stmt string = if ! && decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = if ! && && ! decl_stmt System.Type = if != && typeof decl_stmt Spring.Objects.Factory.IFactoryObject = if else catch try catch call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() call ILog.Error() throw public public if != is || + + + + if ! call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() call decl IDictionary.ContainsKey() public override public override return IObjectDefinition public override public override if throw new = decl_stmt Spring.Objects.Factory.Config.IObjectDefinition if ! call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() call decl IDictionary.TryGetValue() out if ! || == return else if is = return public < public < return var decl IList public < public < decl_stmt System.Collections.Generic.IList < = new < decl_stmt var = as if && != foreach in call var.GetObjectDefinitionNames() call var.GetObjectDefinitionNames() call var.GetObjectDefinitionNames() call var.GetObjectDefinitionNames() call var.GetObjectDefinitionNames() if ! call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Contains() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() return public < public < return decl List public < public < decl_stmt System.Collections.Generic.List < = new < foreach in if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return public < public < return public < public < public < < return typeof decl List public < public < decl_stmt System.Collections.Generic.List < = return public < public < public < < return typeof public < public < return decl Dictionary public < public < public < < decl_stmt System.Collections.Generic.Dictionary < = new < typeof return decl Dictionary public < public < decl_stmt System.Collections.Generic.Dictionary < = new < return decl IList private private decl_stmt System.Collections.Generic.IList < = foreach in try catch if != && typeof if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() else throw decl Dictionary public < public < public < < decl_stmt System.Collections.Generic.Dictionary < = new < typeof return decl IList decl IList public override public override public override < decl_stmt System.Collections.Generic.IList < = typeof if > decl_stmt System.Collections.Generic.IList < = new < foreach in if call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() call decl IList.Add() if > = if == || == throw new typeof if == return else if == && != return < else throw new typeof + + + bool string decl IList bool decl List decl IList RootObjectDefinition protected < protected < decl_stmt System.Collections.Generic.List < = new < decl_stmt System.Collections.Generic.IList < = foreach in decl_stmt string = if ! try decl_stmt Spring.Objects.Factory.Support.RootObjectDefinition = if ! && || || ! && ! decl_stmt bool = decl_stmt bool = || ! || && || && if ! && = = || && if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() catch if throw if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + catch if throw if call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() call ILog.Debug() + + decl_stmt System.Collections.Generic.IList < = foreach in decl_stmt string = if ! if if || && call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() continue = if call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() call decl List.Add() return private private return != && && ! Type protected protected decl_stmt System.Type = return != && typeof string var Object IDictionary object DictionaryEntry string var Type public override public override decl_stmt System.Type = decl_stmt System.Object = if != if is string decl_stmt object = = string if call object.Equals() call object.Equals() call object.Equals() call object.Equals() call object.Equals() = string return if decl_stmt System.Type = call Type.GetElementType() call Type.GetElementType() call Type.GetElementType() call Type.GetElementType() call Type.GetElementType() decl_stmt System.Collections.Generic.IDictionary = if == if + return if != foreach in return else if && call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() == typeof <> || call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() == typeof <> || call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() == typeof <,> decl_stmt var = call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() call System.Type.GetGenericTypeDefinition() == typeof <,> decl_stmt var = call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() : call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() if && call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() != typeof string throw new + call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() call System.Type.GetGenericArguments() decl_stmt System.Collections.Generic.IDictionary = if == if + return if != foreach in return : else if typeof && return else decl_stmt System.Collections.Generic.IDictionary = if == if decl_stmt string = != : throw new + + + + + + + + return if > decl_stmt string = if == throw new + + + if != return decl_stmt DictionaryEntry = if != return object string bool string string bool private private decl_stmt string = decl_stmt string = foreach in decl_stmt string = as string decl_stmt object = if if != decl_stmt bool = decl_stmt bool = if == throw new + if && ! = else = if == && call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() call decl IDictionary.Values() || = return ?? private private if return return is && protected protected return != && || private private throw new Type decl IList string IDictionary object private private decl_stmt System.Collections.Generic.IList < = decl_stmt System.Collections.Generic.IDictionary = new foreach in decl_stmt System.Type = if call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) call System.Type.IsAssignableFrom(Type) decl_stmt object = if call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) break for = < ++ decl_stmt string = if ! call string.Equals() call string.Equals() call string.Equals() call string.Equals() call string.Equals() && call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) return bool public public decl_stmt bool = != && != && typeof if = if ! if return else if is return return private private return new