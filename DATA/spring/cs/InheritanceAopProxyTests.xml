Spring.Aop.Framework.DynamicProxy System using NUnit.Framework using Spring.Objects using Spring.Aop.Interceptor using System.Reflection using Spring.Expressions using class attribute Spring.Aop.Framework.DynamicProxy.InheritanceAopProxyTests Type ConstructorInfo protected protected decl_stmt System.Type = new decl_stmt System.Reflection.ConstructorInfo = call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) call System.Type.GetConstructor(BindingFlags,Binder,Type,ParameterModifier) new typeof return call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) call System.Reflection.ConstructorInfo.Invoke(Object) new IIncrementable object InheritanceTestObject AdvisedSupport public public decl_stmt Spring.Aop.Framework.AdvisedSupport = new = new decl_stmt object = is decl_stmt InheritanceTestObject = as = is decl_stmt Spring.Aop.Framework.DynamicProxy.IIncrementable = as call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() object InheritanceTestObject AdvisedSupport public public decl_stmt Spring.Aop.Framework.AdvisedSupport = new = new decl_stmt object = is decl_stmt InheritanceTestObject = as object InheritanceTestObject AdvisedSupport public public decl_stmt Spring.Aop.Framework.AdvisedSupport = new = new decl_stmt object = is decl_stmt InheritanceTestObject = as NopInterceptor object InheritanceTestObject AdvisedSupport public public decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt object = is decl_stmt InheritanceTestObject = as = NopInterceptor object AmbiguousMatchesTestObject AdvisedSupport public public decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt object = is decl_stmt AmbiguousMatchesTestObject = as call AmbiguousMatchesTestObject.DoIt() call AmbiguousMatchesTestObject.DoIt() call AmbiguousMatchesTestObject.DoIt() call AmbiguousMatchesTestObject.DoIt() call AmbiguousMatchesTestObject.DoIt() new public virtual public virtual public virtual public virtual NopInterceptor object AnotherTestObject AdvisedSupport public public decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt object = is decl_stmt AnotherTestObject = as typeof int < NopInterceptor object AnotherTestObject AdvisedSupport public public decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt object = is decl_stmt AnotherTestObject = as < public virtual public virtual public virtual < return typeof public virtual public virtual return typeof string public virtual public virtual public virtual < return NopInterceptor object InheritanceTestObject AdvisedSupport public public decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt object = is decl_stmt InheritanceTestObject = as = call InheritanceTestObject.Reset() call InheritanceTestObject.Reset() call InheritanceTestObject.Reset() call InheritanceTestObject.Reset() call InheritanceTestObject.Reset() NopInterceptor object InheritanceTestObject AdvisedSupport public public decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new = new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt object = is decl_stmt InheritanceTestObject = as call InheritanceTestObject.InternalToDo() call InheritanceTestObject.InternalToDo() call InheritanceTestObject.InternalToDo() call InheritanceTestObject.InternalToDo() call InheritanceTestObject.InternalToDo() NopInterceptor IIncrementable object InheritanceTestObject AdvisedSupport public public decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt object = is decl_stmt InheritanceTestObject = as call InheritanceTestObject.Increment() call InheritanceTestObject.Increment() call InheritanceTestObject.Increment() call InheritanceTestObject.Increment() call InheritanceTestObject.Increment() is decl_stmt Spring.Aop.Framework.DynamicProxy.IIncrementable = as call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() NopInterceptor IIncrementable object InheritanceTestObject AdvisedSupport public public decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt object = is decl_stmt InheritanceTestObject = as is decl_stmt Spring.Aop.Framework.DynamicProxy.IIncrementable = as call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() call Spring.Aop.Framework.DynamicProxy.IIncrementable.Increment() NopInterceptor object InheritanceTestObject AdvisedSupport public public decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt object = is decl_stmt InheritanceTestObject = as call InheritanceTestObject.IncrementTwice() call InheritanceTestObject.IncrementTwice() call InheritanceTestObject.IncrementTwice() call InheritanceTestObject.IncrementTwice() call InheritanceTestObject.IncrementTwice() NopInterceptor object InheritanceTestObject AdvisedSupport public public decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt object = is decl_stmt InheritanceTestObject = as call InheritanceTestObject.Todo() call InheritanceTestObject.Todo() call InheritanceTestObject.Todo() call InheritanceTestObject.Todo() call InheritanceTestObject.Todo() NopInterceptor object InheritanceTestObject AdvisedSupport public public decl_stmt Spring.Aop.Interceptor.NopInterceptor = new decl_stmt Spring.Aop.Framework.AdvisedSupport = new new call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) call Spring.Aop.Framework.AdvisedSupport.AddAdvice(int,IAdvice) decl_stmt object = is decl_stmt InheritanceTestObject = as call InheritanceTestObject.Todo() call InheritanceTestObject.Todo() call InheritanceTestObject.Todo() call InheritanceTestObject.Todo() call InheritanceTestObject.Todo() =