Spring.Messaging.Core System using System.Collections using System.Collections.Generic using System.Messaging using Common.Logging using Spring.Context using Spring.Messaging.Support using Spring.Messaging.Support.Converters using Spring.Threading using Spring.Util using class Spring.Messaging.Core.DefaultMessageQueueFactory super super IMessageQueueFactory super IApplicationContextAware IConfigurableApplicationContext string string ILog decl IDictionary MessageQueueFactoryObject public public decl_stmt Spring.Messaging.Support.MessageQueueFactoryObject = new = call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() decl_stmt System.Collections.Generic.IDictionary < = < foreach < in new IDictionary MessageQueue public public decl_stmt System.Collections.Generic.IDictionary = as if == = new if ! call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) decl_stmt MessageQueue = call IConfigurableApplicationContext.GetObject() call IConfigurableApplicationContext.GetObject() call IConfigurableApplicationContext.GetObject() call IConfigurableApplicationContext.GetObject() call IConfigurableApplicationContext.GetObject() as call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) return as public public return call IConfigurableApplicationContext.ContainsObject() call IConfigurableApplicationContext.ContainsObject() call IConfigurableApplicationContext.ContainsObject() call IConfigurableApplicationContext.ContainsObject() call IConfigurableApplicationContext.ContainsObject() MessageConverterFactoryObject public public decl_stmt Spring.Messaging.Support.Converters.MessageConverterFactoryObject = new = call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() IDictionary IMessageConverter public public decl_stmt System.Collections.Generic.IDictionary = as if == = new if ! call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) call System.Collections.Generic.IDictionary.Contains(Object) decl_stmt Spring.Messaging.Support.Converters.IMessageConverter = call IConfigurableApplicationContext.GetObject() call IConfigurableApplicationContext.GetObject() call IConfigurableApplicationContext.GetObject() call IConfigurableApplicationContext.GetObject() call IConfigurableApplicationContext.GetObject() typeof if call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call IConfigurableApplicationContext.ObjectFactory() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() call ILog.Warn() + + call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call IMessageConverter.Clone() call IMessageConverter.Clone() call IMessageConverter.Clone() call IMessageConverter.Clone() call IMessageConverter.Clone() else call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) call System.Collections.Generic.IDictionary.Add(TKey,TValue) return as public public return call IConfigurableApplicationContext.ContainsObject() call IConfigurableApplicationContext.ContainsObject() call IConfigurableApplicationContext.ContainsObject() call IConfigurableApplicationContext.ContainsObject() call IConfigurableApplicationContext.ContainsObject() return IConfigurableApplicationContext decl_stmt Spring.Context.IConfigurableApplicationContext = as if == throw new =