Spring.Aspects.Exceptions System using System.Collections using System.Collections.Specialized using Common.Logging using Common.Logging.Simple using NUnit.Framework using Spring.Aop.Framework using Spring.Aspects.Exceptions using Spring.Expressions using Spring.Objects using Spring.Util using class attribute Spring.Aspects.Exceptions.ExceptionHandlerAspectIntegrationTests bool CaptureOutputLoggerFactoryAdapter ILoggerFactoryAdapter ExceptionHandlerAdvice public public = = new = = new public public call CaptureOutputLoggerFactoryAdapter.Dispose() call CaptureOutputLoggerFactoryAdapter.Dispose() call CaptureOutputLoggerFactoryAdapter.Dispose() call CaptureOutputLoggerFactoryAdapter.Dispose() call CaptureOutputLoggerFactoryAdapter.Dispose() = ITestObject string public public decl_stmt string = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) new catch public static public static = bool string LogExceptionHandler ITestObject ProxyFactory public public decl_stmt Spring.Aspects.Exceptions.LogExceptionHandler = new = decl_stmt string = call LogExceptionHandler.SourceExceptionNames() call LogExceptionHandler.SourceExceptionNames() call LogExceptionHandler.SourceExceptionNames() call LogExceptionHandler.SourceExceptionNames() call LogExceptionHandler.SourceExceptionNames() call LogExceptionHandler.SourceExceptionNames() call LogExceptionHandler.SourceExceptionNames() call LogExceptionHandler.SourceExceptionNames() call LogExceptionHandler.SourceExceptionNames() = call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) new catch decl_stmt bool = foreach in if >= = string public public decl_stmt string = string public public decl_stmt string = string public public decl_stmt string = LogExceptionHandler public public decl_stmt Spring.Aspects.Exceptions.LogExceptionHandler = new = = = LogExceptionHandler public public decl_stmt Spring.Aspects.Exceptions.LogExceptionHandler = new string typeof public typeof public decl_stmt string = string public public decl_stmt string = string public public decl_stmt string = ITestObject private private decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) new catch ITestObject private private decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) new catch ITestObject private private decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) new catch ITestObject string public public decl_stmt string = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = TranslationExceptionHandler ITestObject IList public public decl_stmt Spring.Aspects.Exceptions.TranslationExceptionHandler = new decl_stmt System.Collections.Generic.IList = new call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) call System.Collections.Generic.IList.Add(Object) = = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = private static private static try new catch typeof catch typeof ITestObject string public public decl_stmt string = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) new catch typeof catch typeof ITestObject string public public decl_stmt string = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) new catch catch typeof ITestObject string public public decl_stmt string = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) new catch catch typeof ITestObject string public public decl_stmt string = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) new catch catch typeof ITestObject string public public decl_stmt string = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) new catch + ITestObject string public public decl_stmt string = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try call Spring.Aop.Framework.AutoProxy.ITestObject.ExceptionalWithReturnValue(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.ExceptionalWithReturnValue(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.ExceptionalWithReturnValue(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.ExceptionalWithReturnValue(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.ExceptionalWithReturnValue(Exception) new catch + ITestObject int string public public decl_stmt string = decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = try decl_stmt int = call Spring.Aop.Framework.AutoProxy.ITestObject.ExceptionalWithReturnValue(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.ExceptionalWithReturnValue(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.ExceptionalWithReturnValue(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.ExceptionalWithReturnValue(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.ExceptionalWithReturnValue(Exception) new catch Exception ProxyFactory string string ITestObject public public decl_stmt string = decl_stmt string = call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() decl_stmt Spring.Aop.Framework.AutoProxy.ITestObject = call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) try call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) call Spring.Aop.Framework.AutoProxy.ITestObject.Exceptional(Exception) new catch decl_stmt System.Exception = catch typeof private private call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() return private private call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() return private private call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() return private private call ExceptionHandlerAdvice.ExceptionHandlerDictionary() call ExceptionHandlerAdvice.ExceptionHandlerDictionary() call ExceptionHandlerAdvice.ExceptionHandlerDictionary() call ExceptionHandlerAdvice.ExceptionHandlerDictionary() call ExceptionHandlerAdvice.ExceptionHandlerDictionary() call ExceptionHandlerAdvice.ExceptionHandlerDictionary() call ExceptionHandlerAdvice.ExceptionHandlerDictionary() call ExceptionHandlerAdvice.ExceptionHandlerDictionary() call ExceptionHandlerAdvice.ExceptionHandlerDictionary() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() call ExceptionHandlerAdvice.ExceptionHandlers() return ProxyFactory private private call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() call Spring.Aspects.Exceptions.ExceptionHandlerAdvice.AfterPropertiesSet() decl_stmt Spring.Data.NHibernate.Bytecode.ProxyFactory = new new call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() call ProxyFactory.AddAdvice() return call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) call Spring.Data.NHibernate.Bytecode.ProxyFactory.GetProxy(object,ISessionImplementor) bool private private decl_stmt bool = foreach in if >= = + + +